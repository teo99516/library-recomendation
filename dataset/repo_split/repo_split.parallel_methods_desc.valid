'__init__: This has to be present'
'XXX22: This has to be present'
'Remove recursive references to allow garbage DCNL collector to collect this object.'
'Disassemble a code object, returning a list of \'Token\'. DCNL The main part of this procedure is modelled after DCNL dis.disassemble().'
'Find the first <instr> in the block from start to end. DCNL <instr> is any python bytecode instruction or a list of opcodes DCNL If <instr> is an opcode with a target (like a jump), a target DCNL destination can be specified which must match precisely if exact DCNL is True, or if exact is False, the instruction which has a target DCNL closest to <target> will be returned. DCNL Return index to it or None if not found.'
'Find the last <instr> in the block from start to end. DCNL <instr> is any python bytecode instruction or a list of opcodes DCNL If <instr> is an opcode with a target (like a jump), a target DCNL destination can be specified which must match precisely if exact DCNL is True, or if exact is False, the instruction which has a target DCNL closest to <target> will be returned. DCNL Return index to it or None if not found.'
'Find all <instr> in the block from start to end. DCNL <instr> is any python bytecode instruction or a list of opcodes DCNL If <instr> is an opcode with a target (like a jump), a target DCNL destination can be specified which must match precisely. DCNL Return a list with indexes to them or [] if none found.'
'Find all <instr> in the block from start to end. DCNL <instr> is any python bytecode instruction or a list of opcodes DCNL If <instr> is an opcode with a target (like a jump), a target DCNL destination can be specified which must match precisely. DCNL Return a list with indexes to them or [] if none found.'
'Return the next jump that was generated by an except SomeException: DCNL construct in a try...except...else clause or None if not found.'
'Restrict pos to parent boundaries.'
'Detect structures and their boundaries to fix optimizied jumps DCNL in python2.3+'
'Detect all offsets in a byte code which are jump targets. DCNL Return the list of offsets. DCNL This procedure is modelled after dis.findlables(), but here DCNL for each target the number of jumps are counted.'
'exec_stmt ::= expr exprlist DUP_TOP EXEC_STMT DCNL exec_stmt ::= expr exprlist EXEC_STMT'
'prettyprint a mapexpr DCNL \'mapexpr\' is something like k = {\'a\': 1, \'b\': 42 }"'
'prettyprint a list or tuple'
'Special handling for opcodes that take a variable number DCNL of arguments -- we add a new entry for each in TABLE_R.'
'If the name of the formal parameter starts with dot, DCNL it\'s a tuple parameter, like this: DCNL #          def MyFunc(xx, (a,b,c), yy): DCNL #                  print a, b*2, c*42 DCNL In byte-code, the whole tuple is assigned to parameter \'.1\' and DCNL then the tuple gets unpacked to \'a\', \'b\' and \'c\'. DCNL Since identifiers starting with a dot are illegal in Python, DCNL we can search for the byte-code equivalent to \'(a,b,c) = .1\''
'Dump function defintion, doc string, and function body.'
'Dump class definition, doc string and class body.'
'convert AST to source code'
'Return the function\'s docstring.'
'Support instance methods.'
'(INTERNAL) ctypes parameter conversion method.'
'Register an event notification. DCNL @param eventtype: the desired event type to be notified about. DCNL @param callback: the function to call when the event occurs. DCNL @param args: optional positional arguments for the callback. DCNL @param kwds: optional keyword arguments for the callback. DCNL @return: 0 on success, ENOMEM on error. DCNL @note: The callback function must have at least one argument, DCNL an Event instance.  Any other, optional positional and keyword DCNL arguments are in B{addition} to the first one.'
'Unregister an event notification. DCNL @param eventtype: the event type notification to be removed.'
'Create a new MediaPlayer instance. DCNL @param uri: an optional URI to play in the player.'
'Create a new MediaListPlayer instance.'
'Create a new Media instance. DCNL If mrl contains a colon (:) preceded by more than 1 letter, it DCNL will be treated as a URL. Else, it will be considered as a DCNL local path. If you need more control, directly use DCNL media_new_location/media_new_path methods. DCNL Options can be specified as supplementary string parameters, DCNL but note that many options cannot be set at the media level, DCNL and rather at the Instance level. For instance, the marquee DCNL filter must be specified when creating the vlc.Instance or DCNL vlc.MediaPlayer. DCNL Alternatively, options can be added to the media using the DCNL Media.add_options method (with the same limitation). DCNL @param options: optional media option=value strings'
'Create a new MediaList instance. DCNL @param mrls: optional list of MRL strings'
'Enumerate the defined audio output devices. DCNL @return: list of dicts {name:, description:, devices:}'
'Returns a list of available audio filters.'
'Returns a list of available video filters.'
'Decrement the reference count of a libvlc instance, and destroy it DCNL if it reaches zero.'
'Increments the reference count of a libvlc instance. DCNL The initial reference count is 1 after L{new}() returns.'
'Try to start a user interface for the libvlc instance. DCNL @param name: interface name, or None for default. DCNL @return: 0 on success, -1 on error.'
'Sets the application name. LibVLC passes this as the user agent string DCNL when a protocol requires it. DCNL @param name: human-readable application name, e.g. "FooBar player 1.2.3". DCNL @param http: HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0". DCNL @version: LibVLC 1.1.1 or later.'
'Sets some meta-information about the application. DCNL See also L{set_user_agent}(). DCNL @param id: Java-style application identifier, e.g. "com.acme.foobar". DCNL @param version: application version numbers, e.g. "1.2.3". DCNL @param icon: application icon name, e.g. "foobar". DCNL @version: LibVLC 2.1.0 or later.'
'Unsets the logging callback for a LibVLC instance. This is rarely needed: DCNL the callback is implicitly unset when the instance is destroyed. DCNL This function will wait for any pending callbacks invocation to complete DCNL (causing a deadlock if called from within the callback). DCNL @version: LibVLC 2.1.0 or later.'
'Sets the logging callback for a LibVLC instance. DCNL This function is thread-safe: it will wait for any pending callbacks DCNL invocation to complete. DCNL @param data: opaque data pointer for the callback function @note Some log messages (especially debug) are emitted by LibVLC while is being initialized. These messages cannot be captured with this interface. @warning A deadlock may occur if this function is called from the callback. DCNL @param p_instance: libvlc instance. DCNL @version: LibVLC 2.1.0 or later.'
'Sets up logging to a file. DCNL @param stream: FILE pointer opened for writing (the FILE pointer must remain valid until L{log_unset}()). DCNL @version: LibVLC 2.1.0 or later.'
'Create a media with a certain given media resource location, DCNL for instance a valid URL. DCNL @note: To refer to a local file with this function, DCNL the file://... URI syntax B{must} be used (see IETF RFC3986). DCNL We recommend using L{media_new_path}() instead when dealing with DCNL local files. DCNL See L{media_release}. DCNL @param psz_mrl: the media location. DCNL @return: the newly created media or None on error.'
'Create a media for a certain file path. DCNL See L{media_release}. DCNL @param path: local filesystem path. DCNL @return: the newly created media or None on error.'
'Create a media for an already open file descriptor. DCNL The file descriptor shall be open for reading (or reading and writing). DCNL Regular file descriptors, pipe read descriptors and character device DCNL descriptors (including TTYs) are supported on all platforms. DCNL Block device descriptors are supported where available. DCNL Directory descriptors are supported on systems that provide fdopendir(). DCNL Sockets are supported on all platforms where they are file descriptors, DCNL i.e. all except Windows. DCNL @note: This library will B{not} automatically close the file descriptor DCNL under any circumstance. Nevertheless, a file descriptor can usually only be DCNL rendered once in a media player. To render it a second time, the file DCNL descriptor should probably be rewound to the beginning with lseek(). DCNL See L{media_release}. DCNL @param fd: open file descriptor. DCNL @return: the newly created media or None on error. DCNL @version: LibVLC 1.1.5 and later.'
'Create a media with custom callbacks to read the data from. DCNL @param open_cb: callback to open the custom bitstream input media. DCNL @param read_cb: callback to read data (must not be None). DCNL @param seek_cb: callback to seek, or None if seeking is not supported. DCNL @param close_cb: callback to close the media, or None if unnecessary. DCNL @param opaque: data pointer for the open callback. DCNL @return: the newly created media or None on error @note If open_cb is None, the opaque pointer will be passed to read_cb, seek_cb and close_cb, and the stream size will be treated as unknown. @note The callbacks may be called asynchronously (from another thread). A single stream instance need not be reentrant. However the open_cb needs to be reentrant if the media is used by multiple player instances. @warning The callbacks may be used until all or any player instances that were supplied the media item are stopped. See L{media_release}. DCNL @version: LibVLC 3.0.0 and later.'
'Create a media as an empty node with a given name. DCNL See L{media_release}. DCNL @param psz_name: the name of the node. DCNL @return: the new empty media or None on error.'
'Create a media discoverer object by name. DCNL After this object is created, you should attach to events in order to be DCNL notified of the discoverer state. DCNL You should also attach to media_list events in order to be notified of new DCNL items discovered. DCNL You need to call L{media_discoverer_start}() in order to start the DCNL discovery. DCNL See L{media_discoverer_media_list} DCNL See L{media_discoverer_event_manager} DCNL See L{media_discoverer_start}. DCNL @param psz_name: service name. DCNL @return: media discover object or None in case of error. DCNL @version: LibVLC 3.0.0 or later.'
'Create an new Media Library object. DCNL @return: a new object or None on error.'
'Gets the list of available audio output modules. DCNL @return: list of available audio outputs. It must be freed with In case of error, None is returned.'
'Gets a list of audio output devices for a given audio output module, DCNL See L{audio_output_device_set}(). DCNL @note: Not all audio outputs support this. In particular, an empty (None) DCNL list of devices does B{not} imply that the specified audio output does DCNL not work. DCNL @note: The list might not be exhaustive. DCNL @warning: Some audio output devices in the list might not actually work in DCNL some circumstances. By default, it is recommended to not specify any DCNL explicit audio device. DCNL @param psz_aout: audio output name (as returned by L{audio_output_list_get}()). DCNL @return: A None-terminated linked list of potential audio output devices. It must be freed with L{audio_output_device_list_release}(). DCNL @version: LibVLC 2.1.0 or later.'
'Release the vlm instance related to the given L{Instance}.'
'Add a broadcast, with one input. DCNL @param psz_name: the name of the new broadcast. DCNL @param psz_input: the input MRL. DCNL @param psz_output: the output MRL (the parameter to the "sout" variable). DCNL @param i_options: number of additional options. DCNL @param ppsz_options: additional options. DCNL @param b_enabled: boolean for enabling the new broadcast. DCNL @param b_loop: Should this broadcast be played in loop ? DCNL @return: 0 on success, -1 on error.'
'Add a vod, with one input. DCNL @param psz_name: the name of the new vod media. DCNL @param psz_input: the input MRL. DCNL @param i_options: number of additional options. DCNL @param ppsz_options: additional options. DCNL @param b_enabled: boolean for enabling the new vod. DCNL @param psz_mux: the muxer of the vod media. DCNL @return: 0 on success, -1 on error.'
'Delete a media (VOD or broadcast). DCNL @param psz_name: the media to delete. DCNL @return: 0 on success, -1 on error.'
'Enable or disable a media (VOD or broadcast). DCNL @param psz_name: the media to work on. DCNL @param b_enabled: the new status. DCNL @return: 0 on success, -1 on error.'
'Set the output for a media. DCNL @param psz_name: the media to work on. DCNL @param psz_output: the output MRL (the parameter to the "sout" variable). DCNL @return: 0 on success, -1 on error.'
'Set a media\'s input MRL. This will delete all existing inputs and DCNL add the specified one. DCNL @param psz_name: the media to work on. DCNL @param psz_input: the input MRL. DCNL @return: 0 on success, -1 on error.'
'Add a media\'s input MRL. This will add the specified one. DCNL @param psz_name: the media to work on. DCNL @param psz_input: the input MRL. DCNL @return: 0 on success, -1 on error.'
'Set a media\'s loop status. DCNL @param psz_name: the media to work on. DCNL @param b_loop: the new status. DCNL @return: 0 on success, -1 on error.'
'Set a media\'s vod muxer. DCNL @param psz_name: the media to work on. DCNL @param psz_mux: the new muxer. DCNL @return: 0 on success, -1 on error.'
'Edit the parameters of a media. This will delete all existing inputs and DCNL add the specified one. DCNL @param psz_name: the name of the new broadcast. DCNL @param psz_input: the input MRL. DCNL @param psz_output: the output MRL (the parameter to the "sout" variable). DCNL @param i_options: number of additional options. DCNL @param ppsz_options: additional options. DCNL @param b_enabled: boolean for enabling the new broadcast. DCNL @param b_loop: Should this broadcast be played in loop ? DCNL @return: 0 on success, -1 on error.'
'Play the named broadcast. DCNL @param psz_name: the name of the broadcast. DCNL @return: 0 on success, -1 on error.'
'Stop the named broadcast. DCNL @param psz_name: the name of the broadcast. DCNL @return: 0 on success, -1 on error.'
'Pause the named broadcast. DCNL @param psz_name: the name of the broadcast. DCNL @return: 0 on success, -1 on error.'
'Seek in the named broadcast. DCNL @param psz_name: the name of the broadcast. DCNL @param f_percentage: the percentage to seek to. DCNL @return: 0 on success, -1 on error.'
'Return information about the named media as a JSON DCNL string representation. DCNL This function is mainly intended for debugging use, DCNL if you want programmatic access to the state of DCNL a vlm_media_instance_t, please use the corresponding DCNL libvlc_vlm_get_media_instance_xxx -functions. DCNL Currently there are no such functions available for DCNL vlm_media_t though. DCNL @param psz_name: the name of the media, if the name is an empty string, all media is described. DCNL @return: string with information about named media, or None on error.'
'Get vlm_media instance position by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: position as float or -1. on error.'
'Get vlm_media instance time by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: time as integer or -1 on error.'
'Get vlm_media instance length by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: length of media item or -1 on error.'
'Get vlm_media instance playback rate by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: playback rate or -1 on error.'
'Get vlm_media instance title number by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: title as number or -1 on error. DCNL @bug: will always return 0.'
'Get vlm_media instance chapter number by name or instance id. DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: chapter as number or -1 on error. DCNL @bug: will always return 0.'
'Is libvlc instance seekable ? DCNL @param psz_name: name of vlm media instance. DCNL @param i_instance: instance id. DCNL @return: 1 if seekable, 0 if not, -1 if media does not exist. DCNL @bug: will always return 0.'
'Get libvlc_event_manager from a vlm media. DCNL The p_event_manager is immutable, so you don\'t have to hold the lock. DCNL @return: libvlc_event_manager.'
'Add a list of options to the media. DCNL Options must be written without the double-dash. Warning: most DCNL audio and video options, such as text renderer, have no DCNL effects on an individual media. These options must be set at DCNL the vlc.Instance or vlc.MediaPlayer instanciation. DCNL @param options: optional media option=value strings'
'Get media descriptor\'s elementary streams description DCNL Note, you need to call L{parse}() or play the media at least once DCNL before calling this function. DCNL Not doing this will result in an empty array. DCNL The result must be freed with L{tracks_release}. DCNL @version: LibVLC 2.1.0 and later.'
'Add an option to the media. DCNL This option will be used to determine how the media_player will DCNL read the media. This allows to use VLC\'s advanced DCNL reading/streaming options on a per-media basis. DCNL @note: The options are listed in \'vlc --long-help\' from the command line, DCNL e.g. "-sout-all". Keep in mind that available options and their semantics DCNL vary across LibVLC versions and builds. DCNL @warning: Not all options affects L{Media} objects: DCNL Specifically, due to architectural issues most audio and video options, DCNL such as text renderer options, have no effects on an individual media. DCNL These options must be set through L{new}() instead. DCNL @param psz_options: the options (as a string).'
'Add an option to the media with configurable flags. DCNL This option will be used to determine how the media_player will DCNL read the media. This allows to use VLC\'s advanced DCNL reading/streaming options on a per-media basis. DCNL The options are detailed in vlc --long-help, for instance DCNL "--sout-all". Note that all options are not usable on medias: DCNL specifically, due to architectural issues, video-related options DCNL such as text renderer options cannot be set on a single media. They DCNL must be set on the whole libvlc instance instead. DCNL @param psz_options: the options (as a string). DCNL @param i_flags: the flags for this option.'
'Retain a reference to a media descriptor object (libvlc_media_t). Use DCNL L{release}() to decrement the reference count of a DCNL media descriptor object.'
'Decrement the reference count of a media descriptor object. If the DCNL reference count is 0, then L{release}() will release the DCNL media descriptor object. It will send out an libvlc_MediaFreed event DCNL to all listeners. If the media descriptor object has been released it DCNL should not be used again.'
'Get the media resource locator (mrl) from a media descriptor object. DCNL @return: string with mrl of media descriptor object.'
'Duplicate a media descriptor object.'
'Read the meta of the media. DCNL If the media has not yet been parsed this will return None. DCNL This methods automatically calls L{parse_async}(), so after calling DCNL it you may receive a libvlc_MediaMetaChanged event. If you prefer a synchronous DCNL version ensure that you call L{parse}() before get_meta(). DCNL See L{parse} DCNL See L{parse_async} DCNL See libvlc_MediaMetaChanged. DCNL @param e_meta: the meta to read. DCNL @return: the media\'s meta.'
'Set the meta of the media (this function will not save the meta, call DCNL L{save_meta} in order to save the meta). DCNL @param e_meta: the meta to write. DCNL @param psz_value: the media\'s meta.'
'Save the meta previously set. DCNL @return: true if the write operation was successful.'
'Get current state of media descriptor object. Possible media states DCNL are defined in libvlc_structures.c ( libvlc_NothingSpecial=0, DCNL libvlc_Opening, libvlc_Buffering, libvlc_Playing, libvlc_Paused, DCNL libvlc_Stopped, libvlc_Ended, DCNL libvlc_Error). DCNL See libvlc_state_t. DCNL @return: state of media descriptor object.'
'Get the current statistics about the media. DCNL @param p_stats:: structure that contain the statistics about the media (this structure must be allocated by the caller). DCNL @return: true if the statistics are available, false otherwise \libvlc_return_bool.'
'Get subitems of media descriptor object. This will increment DCNL the reference count of supplied media descriptor object. Use DCNL L{list_release}() to decrement the reference counting. DCNL @return: list of media descriptor subitems or None.'
'Get event manager from media descriptor object. DCNL NOTE: this function doesn\'t increment reference counting. DCNL @return: event manager object.'
'Get duration (in ms) of media descriptor object item. DCNL @return: duration of media item or -1 on error.'
'Parse a media. DCNL This fetches (local) art, meta data and tracks information. DCNL The method is synchronous. DCNL See L{parse_async} DCNL See L{get_meta} DCNL See libvlc_media_get_tracks_info.'
'Parse a media. DCNL This fetches (local) art, meta data and tracks information. DCNL The method is the asynchronous of L{parse}(). DCNL To track when this is over you can listen to libvlc_MediaParsedChanged DCNL event. However if the media was already parsed you will not receive this DCNL event. DCNL See L{parse} DCNL See libvlc_MediaParsedChanged DCNL See L{get_meta} DCNL See libvlc_media_get_tracks_info.'
'Parse the media asynchronously with options. DCNL This fetches (local or network) art, meta data and/or tracks information. DCNL This method is the extended version of L{parse_async}(). DCNL To track when this is over you can listen to libvlc_MediaParsedChanged DCNL event. However if this functions returns an error, you will not receive this DCNL event. DCNL It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All DCNL these flags can be combined. By default, media is parsed if it\'s a local DCNL file. DCNL See libvlc_MediaParsedChanged DCNL See L{get_meta} DCNL See L{tracks_get} DCNL See libvlc_media_parse_flag_t. DCNL @param parse_flag: parse options: DCNL @return: -1 in case of error, 0 otherwise. DCNL @version: LibVLC 3.0.0 or later.'
'Get Parsed status for media descriptor object. DCNL See libvlc_MediaParsedChanged. DCNL @return: true if media object has been parsed otherwise it returns false \libvlc_return_bool.'
'Sets media descriptor\'s user_data. user_data is specialized data DCNL accessed by the host application, VLC.framework uses it as a pointer to DCNL an native object that references a L{Media} pointer. DCNL @param p_new_user_data: pointer to user data.'
'Get media descriptor\'s user_data. user_data is specialized data DCNL accessed by the host application, VLC.framework uses it as a pointer to DCNL an native object that references a L{Media} pointer.'
'Get the media type of the media descriptor object. DCNL @return: media type. DCNL @version: LibVLC 3.0.0 and later. See libvlc_media_type_t.'
'Create a Media Player object from a Media. DCNL @return: a new media player object, or None on error.'
'(INTERNAL) ctypes wrapper constructor.'
'Start media discovery. DCNL To stop it, call L{stop}() or DCNL L{release}() directly. DCNL See L{stop}. DCNL @return: -1 in case of error, 0 otherwise. DCNL @version: LibVLC 3.0.0 or later.'
'Stop media discovery. DCNL See L{start}. DCNL @version: LibVLC 3.0.0 or later.'
'Release media discover object. If the reference count reaches 0, then DCNL the object will be released.'
'Get media service discover object its localized name. DCNL @return: localized name.'
'Get media service discover media list. DCNL @return: list of media items.'
'Get event manager from media service discover object. DCNL @return: event manager object.'
'Query if media service discover object is running. DCNL @return: true if running, false if not \libvlc_return_bool.'
'(INTERNAL) ctypes wrapper constructor.'
'Release media library object. This functions decrements the DCNL reference count of the media library object. If it reaches 0, DCNL then the object will be released.'
'Retain a reference to a media library object. This function will DCNL increment the reference counting for this object. Use DCNL L{release}() to decrement the reference count.'
'Load media library. DCNL @return: 0 on success, -1 on error.'
'Get media library subitems. DCNL @return: media list subitems.'
'Add media instance to media list. DCNL The L{lock} should be held upon entering this function. DCNL @param mrl: a media instance or a MRL. DCNL @return: 0 on success, -1 if the media list is read-only.'
'Release media list created with L{new}().'
'Retain reference to a media list.'
'Associate media instance with this media list instance. DCNL If another media instance was present it will be released. DCNL The L{lock} should NOT be held upon entering this function. DCNL @param p_md: media instance to add.'
'Get media instance from this media list instance. This action will increase DCNL the refcount on the media instance. DCNL The L{lock} should NOT be held upon entering this function. DCNL @return: media instance.'
'Insert media instance in media list on a position DCNL The L{lock} should be held upon entering this function. DCNL @param p_md: a media instance. DCNL @param i_pos: position in array where to insert. DCNL @return: 0 on success, -1 if the media list is read-only.'
'Remove media instance from media list on a position DCNL The L{lock} should be held upon entering this function. DCNL @param i_pos: position in array where to insert. DCNL @return: 0 on success, -1 if the list is read-only or the item was not found.'
'Get count on media list items DCNL The L{lock} should be held upon entering this function. DCNL @return: number of items in media list.'
'List media instance in media list at a position DCNL The L{lock} should be held upon entering this function. DCNL @param i_pos: position in array where to insert. DCNL @return: media instance at position i_pos, or None if not found. In case of success, L{media_retain}() is called to increase the refcount on the media.'
'Find index position of List media instance in media list. DCNL Warning: the function will return the first matched position. DCNL The L{lock} should be held upon entering this function. DCNL @param p_md: media instance. DCNL @return: position of media instance or -1 if media not found.'
'This indicates if this media list is read-only from a user point of view. DCNL @return: 1 on readonly, 0 on readwrite \libvlc_return_bool.'
'Get lock on media list items.'
'Release lock on media list items DCNL The L{lock} should be held upon entering this function.'
'Get libvlc_event_manager from this media list instance. DCNL The p_event_manager is immutable, so you don\'t have to hold the lock. DCNL @return: libvlc_event_manager.'
'Return the associated Instance.'
'Release a media_list_player after use DCNL Decrement the reference count of a media player object. If the DCNL reference count is 0, then L{release}() will DCNL release the media player object. If the media player object DCNL has been released, then it should not be used again.'
'Retain a reference to a media player list object. Use DCNL L{release}() to decrement reference count.'
'Return the event manager of this media_list_player. DCNL @return: the event manager.'
'Replace media player in media_list_player with this instance. DCNL @param p_mi: media player instance.'
'Get media player of the media_list_player instance. DCNL @return: media player instance @note the caller is responsible for releasing the returned instance.'
'Set the media list associated with the player. DCNL @param p_mlist: list of media.'
'Play media list.'
'Toggle pause (or resume) media list.'
'Is media list playing? DCNL @return: true for playing and false for not playing \libvlc_return_bool.'
'Get current libvlc_state of media list player. DCNL @return: libvlc_state_t for media list player.'
'Play media list item at position index. DCNL @param i_index: index in media list to play. DCNL @return: 0 upon success -1 if the item wasn\'t found.'
'Play the given media item. DCNL @param p_md: the media instance. DCNL @return: 0 upon success, -1 if the media is not part of the media list.'
'Stop playing media list.'
'Play next item from media list. DCNL @return: 0 upon success -1 if there is no next item.'
'Play previous item from media list. DCNL @return: 0 upon success -1 if there is no previous item.'
'Sets the playback mode for the playlist. DCNL @param e_mode: playback mode specification.'
'Return the associated Instance.'
'Set the MRL to play. DCNL Warning: most audio and video options, such as text renderer, DCNL have no effects on an individual media. These options must be DCNL set at the vlc.Instance or vlc.MediaPlayer instanciation. DCNL @param mrl: The MRL DCNL @param options: optional media option=value strings DCNL @return: the Media object'
'Get the description of available video subtitles.'
'Get the description of available titles.'
'Get the description of available chapters for specific title. DCNL @param title: selected title (int)'
'Get the description of available video tracks.'
'Get the description of available audio tracks.'
'Get the full description of available titles. DCNL @return: the titles list DCNL @version: LibVLC 3.0.0 and later.'
'Get the full description of available chapters. DCNL @param index: of the title to query for chapters. DCNL @return: the chapter list DCNL @version: LibVLC 3.0.0 and later.'
'Get the video size in pixels as 2-tuple (width, height). DCNL @param num: video number (default 0).'
'Set a Win32/Win64 API window handle (HWND). DCNL Specify where the media player should render its video DCNL output. If LibVLC was built without Win32/Win64 API output DCNL support, then this has no effects. DCNL @param drawable: windows handle of the drawable.'
'Get the width of a video in pixels. DCNL @param num: video number (default 0).'
'Get the height of a video in pixels. DCNL @param num: video number (default 0).'
'Get the mouse pointer coordinates over a video as 2-tuple (x, y). DCNL Coordinates are expressed in terms of the decoded video resolution, DCNL B{not} in terms of pixels on the screen/viewport.  To get the DCNL latter, you must query your windowing system directly. DCNL Either coordinate may be negative or larger than the corresponding DCNL size of the video, if the cursor is outside the rendering area. DCNL @warning: The coordinates may be out-of-date if the pointer is not DCNL located on the video rendering area.  LibVLC does not track the DCNL mouse pointer if the latter is outside the video widget. DCNL @note: LibVLC does not support multiple mouse pointers (but does DCNL support multiple input devices sharing the same pointer). DCNL @param num: video number (default 0).'
'Release a media_player after use DCNL Decrement the reference count of a media player object. If the DCNL reference count is 0, then L{release}() will DCNL release the media player object. If the media player object DCNL has been released, then it should not be used again.'
'Retain a reference to a media player object. Use DCNL L{release}() to decrement reference count.'
'Set the media that will be used by the media_player. If any, DCNL previous md will be released. DCNL @param p_md: the Media. Afterwards the p_md can be safely destroyed.'
'Get the media used by the media_player. DCNL @return: the media associated with p_mi, or None if no media is associated.'
'Get the Event Manager from which the media player send event. DCNL @return: the event manager associated with p_mi.'
'is_playing. DCNL @return: 1 if the media player is playing, 0 otherwise \libvlc_return_bool.'
'Play. DCNL @return: 0 if playback started (and was already started), or -1 on error.'
'Pause or resume (no effect if there is no media). DCNL @param do_pause: play/resume if zero, pause if non-zero. DCNL @version: LibVLC 1.1.1 or later.'
'Toggle pause (no effect if there is no media).'
'Stop (no effect if there is no media).'
'Set callbacks and private data to render decoded video to a custom area DCNL in memory. DCNL Use L{video_set_format}() or L{video_set_format_callbacks}() DCNL to configure the decoded format. DCNL @param lock: callback to lock video memory (must not be None). DCNL @param unlock: callback to unlock video memory (or None if not needed). DCNL @param display: callback to display video (or None if not needed). DCNL @param opaque: private pointer for the three callbacks (as first parameter). DCNL @version: LibVLC 1.1.1 or later.'
'Set decoded video chroma and dimensions. DCNL This only works in combination with L{video_set_callbacks}(), DCNL and is mutually exclusive with L{video_set_format_callbacks}(). DCNL @param chroma: a four-characters string identifying the chroma (e.g. "RV32" or "YUYV"). DCNL @param width: pixel width. DCNL @param height: pixel height. DCNL @param pitch: line pitch (in bytes). DCNL @version: LibVLC 1.1.1 or later. DCNL @bug: All pixel planes are expected to have the same pitch. To use the YCbCr color space with chrominance subsampling, consider using L{video_set_format_callbacks}() instead.'
'Set decoded video chroma and dimensions. This only works in combination with DCNL L{video_set_callbacks}(). DCNL @param setup: callback to select the video format (cannot be None). DCNL @param cleanup: callback to release any allocated resources (or None). DCNL @version: LibVLC 2.0.0 or later.'
'Set the NSView handler where the media player should render its video output. DCNL Use the vout called "macosx". DCNL The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding DCNL protocol: DCNL @code.m DCNL \@protocol VLCOpenGLVideoViewEmbedding <NSObject> DCNL - (void)addVoutSubview:(NSView *)view; DCNL - (void)removeVoutSubview:(NSView *)view; DCNL \@end DCNL @endcode DCNL Or it can be an NSView object. DCNL If you want to use it along with Qt4 see the QMacCocoaViewContainer. Then DCNL the following code should work: DCNL @code.mm DCNL NSView *video = [[NSView alloc] init]; DCNL QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent); DCNL L{set_nsobject}(mp, video); DCNL [video release]; DCNL @endcode DCNL You can find a live example in VLCVideoView in VLCKit.framework. DCNL @param drawable: the drawable that is either an NSView or an object following the VLCOpenGLVideoViewEmbedding protocol.'
'Get the NSView handler previously set with L{set_nsobject}(). DCNL @return: the NSView handler or 0 if none where set.'
'\deprecated Use L{set_nsobject} instead.'
'\deprecated Use L{get_nsobject} instead.'
'Set an X Window System drawable where the media player should render its DCNL video output. The call takes effect when the playback starts. If it is DCNL already started, it might need to be stopped before changes apply. DCNL If LibVLC was built without X11 output support, then this function has no DCNL effects. DCNL By default, LibVLC will capture input events on the video rendering area. DCNL Use L{video_set_mouse_input}() and L{video_set_key_input}() to DCNL disable that and deliver events to the parent window / to the application DCNL instead. By design, the X11 protocol delivers input events to only one DCNL recipient. DCNL @warning DCNL The application must call the XInitThreads() function from Xlib before DCNL L{new}(), and before any call to XOpenDisplay() directly or via any DCNL other library. Failure to call XInitThreads() will seriously impede LibVLC DCNL performance. Calling XOpenDisplay() before XInitThreads() will eventually DCNL crash the process. That is a limitation of Xlib. DCNL @param drawable: X11 window ID @note The specified identifier must correspond to an existing Input/Output class X11 window. Pixmaps are B{not} currently supported. The default X11 server is assumed, i.e. that specified in the DISPLAY environment variable. @warning LibVLC can deal with invalid X11 handle errors, however some display drivers (EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle must remain valid until playback is stopped, otherwise the process may abort or crash. DCNL @bug No more than one window handle per media player instance can be specified. If the media has multiple simultaneously active video tracks, extra tracks will be rendered into external windows beyond the control of the application.'
'Get the X Window System window identifier previously set with DCNL L{set_xwindow}(). Note that this will return the identifier DCNL even if VLC is not currently using it (for instance if it is playing an DCNL audio-only input). DCNL @return: an X window ID, or 0 if none where set.'
'Get the Windows API window handle (HWND) previously set with DCNL L{set_hwnd}(). The handle will be returned even if LibVLC DCNL is not currently outputting any video to it. DCNL @return: a window handle or None if there are none.'
'Set the android context. DCNL @param p_jvm: the Java VM of the android process. DCNL @param awindow_handler: org.videolan.libvlc.IAWindowNativeHandler jobject implemented by the org.videolan.libvlc.MediaPlayer class from the libvlc-android project. DCNL @version: LibVLC 3.0.0 and later.'
'Set callbacks and private data for decoded audio. DCNL Use L{audio_set_format}() or L{audio_set_format_callbacks}() DCNL to configure the decoded audio format. DCNL @param play: callback to play audio samples (must not be None). DCNL @param pause: callback to pause playback (or None to ignore). DCNL @param resume: callback to resume playback (or None to ignore). DCNL @param flush: callback to flush audio buffers (or None to ignore). DCNL @param drain: callback to drain audio buffers (or None to ignore). DCNL @param opaque: private pointer for the audio callbacks (as first parameter). DCNL @version: LibVLC 2.0.0 or later.'
'Set callbacks and private data for decoded audio. This only works in DCNL combination with L{audio_set_callbacks}(). DCNL Use L{audio_set_format}() or L{audio_set_format_callbacks}() DCNL to configure the decoded audio format. DCNL @param set_volume: callback to apply audio volume, or None to apply volume in software. DCNL @version: LibVLC 2.0.0 or later.'
'Set decoded audio format. This only works in combination with DCNL L{audio_set_callbacks}(). DCNL @param setup: callback to select the audio format (cannot be None). DCNL @param cleanup: callback to release any allocated resources (or None). DCNL @version: LibVLC 2.0.0 or later.'
'Set decoded audio format. DCNL This only works in combination with L{audio_set_callbacks}(), DCNL and is mutually exclusive with L{audio_set_format_callbacks}(). DCNL @param format: a four-characters string identifying the sample format (e.g. "S16N" or "FL32"). DCNL @param rate: sample rate (expressed in Hz). DCNL @param channels: channels count. DCNL @version: LibVLC 2.0.0 or later.'
'Get the current movie length (in ms). DCNL @return: the movie length (in ms), or -1 if there is no media.'
'Get the current movie time (in ms). DCNL @return: the movie time (in ms), or -1 if there is no media.'
'Set the movie time (in ms). This has no effect if no media is being played. DCNL Not all formats and protocols support this. DCNL @param i_time: the movie time (in ms).'
'Get movie position as percentage between 0.0 and 1.0. DCNL @return: movie position, or -1. in case of error.'
'Set movie position as percentage between 0.0 and 1.0. DCNL This has no effect if playback is not enabled. DCNL This might not work depending on the underlying input format and protocol. DCNL @param f_pos: the position.'
'Set movie chapter (if applicable). DCNL @param i_chapter: chapter number to play.'
'Get movie chapter. DCNL @return: chapter number currently playing, or -1 if there is no media.'
'Get movie chapter count. DCNL @return: number of chapters in movie, or -1.'
'Is the player able to play. DCNL @return: boolean \libvlc_return_bool.'
'Get title chapter count. DCNL @param i_title: title. DCNL @return: number of chapters in title, or -1.'
'Set movie title. DCNL @param i_title: title number to play.'
'Get movie title. DCNL @return: title number currently playing, or -1.'
'Get movie title count. DCNL @return: title number count, or -1.'
'Set previous chapter (if applicable).'
'Set next chapter (if applicable).'
'Get the requested movie play rate. DCNL @warning: Depending on the underlying media, the requested rate may be DCNL different from the real playback rate. DCNL @return: movie play rate.'
'Set movie play rate. DCNL @param rate: movie play rate to set. DCNL @return: -1 if an error was detected, 0 otherwise (but even then, it might not actually work depending on the underlying media protocol).'
'Get current movie state. DCNL @return: the current state of the media player (playing, paused, ...) See libvlc_state_t.'
'Get movie fps rate. DCNL @return: frames per second (fps) for this playing movie, or 0 if unspecified.'
'How many video outputs does this media player have? DCNL @return: the number of video outputs.'
'Is this media player seekable? DCNL @return: true if the media player can seek \libvlc_return_bool.'
'Can this media player be paused? DCNL @return: true if the media player can pause \libvlc_return_bool.'
'Check if the current program is scrambled. DCNL @return: true if the current program is scrambled \libvlc_return_bool. DCNL @version: LibVLC 2.2.0 or later.'
'Display the next frame (if supported).'
'Navigate through DVD Menu. DCNL @param navigate: the Navigation mode. DCNL @version: libVLC 2.0.0 or later.'
'Set if, and how, the video title will be shown when media is played. DCNL @param position: position at which to display the title, or libvlc_position_disable to prevent the title from being displayed. DCNL @param timeout: title display timeout in milliseconds (ignored if libvlc_position_disable). DCNL @version: libVLC 2.1.0 or later.'
'Toggle fullscreen status on non-embedded video outputs. DCNL @warning: The same limitations applies to this function DCNL as to L{set_fullscreen}().'
'Enable or disable fullscreen. DCNL @warning: With most window managers, only a top-level windows can be in DCNL full-screen mode. Hence, this function will not operate properly if DCNL L{set_xwindow}() was used to embed the video in a DCNL non-top-level window. In that case, the embedding window must be reparented DCNL to the root window B{before} fullscreen mode is enabled. You will want DCNL to reparent it back to its normal parent when disabling fullscreen. DCNL @param b_fullscreen: boolean for fullscreen status.'
'Get current fullscreen status. DCNL @return: the fullscreen status (boolean) \libvlc_return_bool.'
'Enable or disable key press events handling, according to the LibVLC hotkeys DCNL configuration. By default and for historical reasons, keyboard events are DCNL handled by the LibVLC video widget. DCNL @note: On X11, there can be only one subscriber for key press and mouse DCNL click events per window. If your application has subscribed to those events DCNL for the X window ID of the video widget, then LibVLC will not be able to DCNL handle key presses and mouse clicks in any case. DCNL @warning: This function is only implemented for X11 and Win32 at the moment. DCNL @param on: true to handle key press events, false to ignore them.'
'Enable or disable mouse click events handling. By default, those events are DCNL handled. This is needed for DVD menus to work, as well as a few video DCNL filters such as "puzzle". DCNL See L{video_set_key_input}(). DCNL @warning: This function is only implemented for X11 and Win32 at the moment. DCNL @param on: true to handle mouse click events, false to ignore them.'
'Get the current video scaling factor. DCNL See also L{video_set_scale}(). DCNL @return: the currently configured zoom factor, or 0. if the video is set to fit to the output window/drawable automatically.'
'Set the video scaling factor. That is the ratio of the number of pixels on DCNL screen to the number of pixels in the original decoded video in each DCNL dimension. Zero is a special value; it will adjust the video to the output DCNL window/drawable (in windowed mode) or the entire screen. DCNL Note that not all video outputs support scaling. DCNL @param f_factor: the scaling factor, or zero.'
'Get current video aspect ratio. DCNL @return: the video aspect ratio or None if unspecified (the result must be released with free() or L{free}()).'
'Set new video aspect ratio. DCNL @param psz_aspect: new video aspect-ratio or None to reset to default @note Invalid aspect ratios are ignored.'
'Get current video subtitle. DCNL @return: the video subtitle selected, or -1 if none.'
'Get the number of available video subtitles. DCNL @return: the number of available video subtitles.'
'Set new video subtitle. DCNL @param i_spu: video subtitle track to select (i_id from track description). DCNL @return: 0 on success, -1 if out of range.'
'Set new video subtitle file. DCNL @param psz_subtitle: new video subtitle file. DCNL @return: the success status (boolean).'
'Get the current subtitle delay. Positive values means subtitles are being DCNL displayed later, negative values earlier. DCNL @return: time (in microseconds) the display of subtitles is being delayed. DCNL @version: LibVLC 2.0.0 or later.'
'Set the subtitle delay. This affects the timing of when the subtitle will DCNL be displayed. Positive values result in subtitles being displayed later, DCNL while negative values will result in subtitles being displayed earlier. DCNL The subtitle delay will be reset to zero each time the media changes. DCNL @param i_delay: time (in microseconds) the display of subtitles should be delayed. DCNL @return: 0 on success, -1 on error. DCNL @version: LibVLC 2.0.0 or later.'
'Get current crop filter geometry. DCNL @return: the crop filter geometry or None if unset.'
'Set new crop filter geometry. DCNL @param psz_geometry: new crop filter geometry (None to unset).'
'Get current teletext page requested. DCNL @return: the current teletext page requested.'
'Set new teletext page to retrieve. DCNL @param i_page: teletex page number requested.'
'Toggle teletext transparent status on video output.'
'Get number of available video tracks. DCNL @return: the number of available video tracks (int).'
'Get current video track. DCNL @return: the video track ID (int) or -1 if no active input.'
'Set video track. DCNL @param i_track: the track ID (i_id field from track description). DCNL @return: 0 on success, -1 if out of range.'
'Take a snapshot of the current video window. DCNL If i_width AND i_height is 0, original size is used. DCNL If i_width XOR i_height is 0, original aspect-ratio is preserved. DCNL @param num: number of video output (typically 0 for the first/only one). DCNL @param psz_filepath: the path where to save the screenshot to. DCNL @param i_width: the snapshot\'s width. DCNL @param i_height: the snapshot\'s height. DCNL @return: 0 on success, -1 if the video was not found.'
'Enable or disable deinterlace filter. DCNL @param psz_mode: type of deinterlace filter, None to disable.'
'Get an integer marquee option value. DCNL @param option: marq option to get See libvlc_video_marquee_int_option_t.'
'Get a string marquee option value. DCNL @param option: marq option to get See libvlc_video_marquee_string_option_t.'
'Enable, disable or set an integer marquee option DCNL Setting libvlc_marquee_Enable has the side effect of enabling (arg !0) DCNL or disabling (arg 0) the marq filter. DCNL @param option: marq option to set See libvlc_video_marquee_int_option_t. DCNL @param i_val: marq option value.'
'Set a marquee string option. DCNL @param option: marq option to set See libvlc_video_marquee_string_option_t. DCNL @param psz_text: marq option value.'
'Get integer logo option. DCNL @param option: logo option to get, values of libvlc_video_logo_option_t.'
'Set logo option as integer. Options that take a different type value DCNL are ignored. DCNL Passing libvlc_logo_enable as option value has the side effect of DCNL starting (arg !0) or stopping (arg 0) the logo filter. DCNL @param option: logo option to set, values of libvlc_video_logo_option_t. DCNL @param value: logo option value.'
'Set logo option as string. Options that take a different type value DCNL are ignored. DCNL @param option: logo option to set, values of libvlc_video_logo_option_t. DCNL @param psz_value: logo option value.'
'Get integer adjust option. DCNL @param option: adjust option to get, values of libvlc_video_adjust_option_t. DCNL @version: LibVLC 1.1.1 and later.'
'Set adjust option as integer. Options that take a different type value DCNL are ignored. DCNL Passing libvlc_adjust_enable as option value has the side effect of DCNL starting (arg !0) or stopping (arg 0) the adjust filter. DCNL @param option: adust option to set, values of libvlc_video_adjust_option_t. DCNL @param value: adjust option value. DCNL @version: LibVLC 1.1.1 and later.'
'Get float adjust option. DCNL @param option: adjust option to get, values of libvlc_video_adjust_option_t. DCNL @version: LibVLC 1.1.1 and later.'
'Set adjust option as float. Options that take a different type value DCNL are ignored. DCNL @param option: adust option to set, values of libvlc_video_adjust_option_t. DCNL @param value: adjust option value. DCNL @version: LibVLC 1.1.1 and later.'
'Selects an audio output module. DCNL @note: Any change will take be effect only after playback is stopped and DCNL restarted. Audio output cannot be changed while playing. DCNL @param psz_name: name of audio output, use psz_name of See L{AudioOutput}. DCNL @return: 0 if function succeded, -1 on error.'
'Gets a list of potential audio output devices, DCNL See L{audio_output_device_set}(). DCNL @note: Not all audio outputs support enumerating devices. DCNL The audio output may be functional even if the list is empty (None). DCNL @note: The list may not be exhaustive. DCNL @warning: Some audio output devices in the list might not actually work in DCNL some circumstances. By default, it is recommended to not specify any DCNL explicit audio device. DCNL @return: A None-terminated linked list of potential audio output devices. It must be freed with L{audio_output_device_list_release}(). DCNL @version: LibVLC 2.2.0 or later.'
'Configures an explicit audio output device. DCNL If the module paramater is None, audio output will be moved to the device DCNL specified by the device identifier string immediately. This is the DCNL recommended usage. DCNL A list of adequate potential device strings can be obtained with DCNL L{audio_output_device_enum}(). DCNL However passing None is supported in LibVLC version 2.2.0 and later only; DCNL in earlier versions, this function would have no effects when the module DCNL parameter was None. DCNL If the module parameter is not None, the device parameter of the DCNL corresponding audio output, if it exists, will be set to the specified DCNL string. Note that some audio output modules do not have such a parameter DCNL (notably MMDevice and PulseAudio). DCNL A list of adequate potential device strings can be obtained with DCNL L{audio_output_device_list_get}(). DCNL @note: This function does not select the specified audio output plugin. DCNL L{audio_output_set}() is used for that purpose. DCNL @warning: The syntax for the device parameter depends on the audio output. DCNL Some audio output modules require further parameters (e.g. a channels map DCNL in the case of ALSA). DCNL @param module: If None, current audio output module. if non-None, name of audio output module. DCNL @param device_id: device identifier string. DCNL @return: Nothing. Errors are ignored (this is a design bug).'
'Get the current audio output device identifier. DCNL This complements L{audio_output_device_set}(). DCNL @warning: The initial value for the current audio output device identifier DCNL may not be set or may be some unknown value. A LibVLC application should DCNL compare this value against the known device identifiers (e.g. those that DCNL were previously retrieved by a call to L{audio_output_device_enum} or DCNL L{audio_output_device_list_get}) to find the current audio output device. DCNL It is possible that the selected audio output device changes (an external DCNL change) without a call to L{audio_output_device_set}. That may make this DCNL method unsuitable to use if a LibVLC application is attempting to track DCNL dynamic audio device changes as they happen. DCNL @return: the current audio output device identifier None if no device is selected or in case of error (the result must be released with free() or L{free}()). DCNL @version: LibVLC 3.0.0 or later.'
'Toggle mute status.'
'Get current mute status. DCNL @return: the mute status (boolean) if defined, -1 if undefined/unapplicable.'
'Set mute status. DCNL @param status: If status is true then mute, otherwise unmute @warning This function does not always work. If there are no active audio playback stream, the mute status might not be available. If digital pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also some audio output plugins do not support muting at all. @note To force silent playback, disable all audio tracks. This is more efficient and reliable than mute.'
'Get current software audio volume. DCNL @return: the software volume in percents (0 = mute, 100 = nominal / 0dB).'
'Set current software audio volume. DCNL @param i_volume: the volume in percents (0 = mute, 100 = 0dB). DCNL @return: 0 if the volume was set, -1 if it was out of range.'
'Get number of available audio tracks. DCNL @return: the number of available audio tracks (int), or -1 if unavailable.'
'Get current audio track. DCNL @return: the audio track ID or -1 if no active input.'
'Set current audio track. DCNL @param i_track: the track ID (i_id field from track description). DCNL @return: 0 on success, -1 on error.'
'Get current audio channel. DCNL @return: the audio channel See libvlc_audio_output_channel_t.'
'Set current audio channel. DCNL @param channel: the audio channel, See libvlc_audio_output_channel_t. DCNL @return: 0 on success, -1 on error.'
'Get current audio delay. DCNL @return: the audio delay (microseconds). DCNL @version: LibVLC 1.1.1 or later.'
'Set current audio delay. The audio delay will be reset to zero each time the media changes. DCNL @param i_delay: the audio delay (microseconds). DCNL @return: 0 on success, -1 on error. DCNL @version: LibVLC 1.1.1 or later.'
'Apply new equalizer settings to a media player. DCNL The equalizer is first created by invoking L{audio_equalizer_new}() or DCNL L{audio_equalizer_new_from_preset}(). DCNL It is possible to apply new equalizer settings to a media player whether the media DCNL player is currently playing media or not. DCNL Invoking this method will immediately apply the new equalizer settings to the audio DCNL output of the currently playing media if there is any. DCNL If there is no currently playing media, the new equalizer settings will be applied DCNL later if and when new media is played. DCNL Equalizer settings will automatically be applied to subsequently played media. DCNL To disable the equalizer for a media player invoke this method passing None for the DCNL p_equalizer parameter. DCNL The media player does not keep a reference to the supplied equalizer so it is safe DCNL for an application to release the equalizer reference any time after this method DCNL returns. DCNL @param p_equalizer: opaque equalizer handle, or None to disable the equalizer for this media player. DCNL @return: zero on success, -1 on error. DCNL @version: LibVLC 2.2.0 or later.'
'First test whether we already have a Tribler process listening on port 8085. If so, use that one and don\'t DCNL start a new, fresh session.'
'This method is executed in a separate thread and is only here since there are some calls that are crashing on DCNL macOS in a subprocess (due to libdispatch.dylib).'
'Plot two lines of the absolute amounts of contributed and consumed bytes.'
'Perform a request to check the health of the torrent that is represented by this widget. DCNL Don\'t do this if we are already checking the health or if we have the health info.'
'When we receive a health response, update the health status.'
'Return the first num widget items with type cls. DCNL This can be useful when for instance you need the first five search results.'
'Reset the video player, i.e. when a download is removed that was being played.'
'Process a URI request if we have one in the queue.'
'Perform a HTTP request. DCNL :param endpoint: the endpoint to call (i.e. "statistics") DCNL :param read_callback: the callback to be called with result info when we have the data DCNL :param data: optional POST data to be sent with the request DCNL :param method: the HTTP verb (GET/POST/PUT/PATCH) DCNL :param capture_errors: whether errors should be handled by this class (defaults to True)'
'Somehow, the events connection dropped. Try to reconnect.'
'Uses RemoteTorrentHandler to schedule a task.'
'Starts pending requests.'
'Adds a new request.'
'Starts processing pending requests.'
'The callback that will be called by LibtorrentMgr when a download was successful.'
'The callback that will be called by LibtorrentMgr when a download failed.'
'This method returns the version of the used libtorrent DCNL library and is required for compatibility purposes'
'Set the maximum download and maximum upload rate limits with the value in the config. DCNL This is the extra step necessary to apply a new maximum download/upload rate setting. DCNL :return:'
'Check whether the handle exists and is valid. If so, stop the looping call and fire the deferreds waiting DCNL for the handle.'
'Returns a deferred that fires with a valid libtorrent download handle.'
'Create a Download object. Used internally by Session. DCNL @param dcfg DownloadStartupConfig or None (in which case DCNL a new DownloadConfig() is created and the result DCNL becomes the runtime config of this Download. DCNL :returns a Deferred to which a callback can be added which returns the result of DCNL network_create_engine_wrapper.'
'Periodically checks whether the engine wrapper can be created. DCNL Notifies when it\'s ready by calling the callback of the deferred being returned. DCNL :return: A deferred that will be called when you can create the engine wrapper.'
'Returns a base64 encoded bitmask of the pieces that we have.'
'Return the total number of pieces'
'Callback for the alert that contains the resume data of a specific download. DCNL This resume data will be written to a file on disk.'
'Update libtorrent stats and check if the download should be stopped.'
'Returns the status of the download. DCNL @return DLSTATUS_*'
'Returns the size of the torrent content. DCNL @return float'
'Return fraction of content downloaded. DCNL @return float 0..1'
'Return last reported speed in bytes/s DCNL @return float'
'Save the resume data of a download. This method returns a deferred that fires when the resume data is available. DCNL Note that this method only calls save_resume_data once on subsequent calls.'
'Called by any thread'
'@return (status, stats, seeding_stats, logmsgs, coopdl_helpers, coopdl_coordinator)'
'A function to convert peer_info libtorrent object into dictionary DCNL This data is used to identify peers with combination of several flags'
'Called by any thread'
'Called by network thread'
'Called by any thread. Called on Session.remove_download()'
'Called by network thread, but safe for any'
'Returns the file to which the downloaded content is saved.'
'Determine which file maps to which piece ranges for progress info'
'Restart the Download'
'You can give a list of extensions to return. If None: return all dest_files DCNL @return list of (torrent,disk) filename tuples.'
'Checkpoint this download. Returns a deferred that fires when the checkpointing is completed.'
'Add a peer address from 3rd source (not tracker, not DHT) to this download. DCNL @param (hostname_ip,port) tuple'
'Constructor. DCNL :param session: The Tribler session.'
'Return a dictionary with some general Tribler statistics.'
'Return a dictionary with some general Dispersy statistics.'
'Return a dictionary with general statistics of the active Dispersy communities.'
'Migrates the torrent collecting directory.'
'Renames all the torrent files to INFOHASH.torrent and delete unparseable ones.'
'Calling this method will convert all configuration files to the ConfigObj.state format.'
'Convert the sessionconfig.pickle file to triblerd.conf. Do nothing if we do not have a pickle file. DCNL Remove the pickle file after we are done.'
'Convert the abc.conf, user_download_choice.pickle, gui_settings and recent download history files DCNL to triblerd.conf.'
'Convert all pickle download checkpoints to .state files.'
'Run the upgrader if it is enabled in the config. DCNL Note that by default, upgrading is enabled in the config. It is then disabled DCNL after upgrading to Tribler 7.'
'This method performs actions necessary to upgrade to Tribler 7.'
'Broadcast a notification (event) that the upgrader is starting doing work DCNL after a check has established work on the db is required. DCNL Will only fire once.'
'Broadcast a notification (event) that the upgrader is done.'
'Checks the database version and upgrade if it is not the latest version.'
'Starts migrating from Tribler 6.3 to 6.4.'
'Migrates the torrent collecting directory.'
'Walks through the torrent collecting directory and gets the total number of file.'
'Deletes the reseeds dir, not used anymore.'
'Deletes all partial swift downloads, also clean up obsolete .mhash and .mbinmap files.'
'Renames all the torrent files to INFOHASH.torrent and delete unparseable ones.'
'Deletes all directories in the torrent collecting directory.'
'Cleans up all SearchCommunity and MetadataCommunity stuff in dispersy database.'
'Starts migrating from Tribler 6.3 to 6.4.'
'Cleans up all SearchCommunity and MetadataCommunity stuff in dispersy database.'
'Migrates the database to the new version.'
'Import all torrent files in the collected torrent dir, all the files already in the database will be ignored.'
'Reindex all torrents in the database. Required when upgrading to a newer FTS engine.'
'Shutting down boosting manager. It also stops and remove all the sources.'
'Get the actual object of the source key'
'Dynamically enable/disable mining source.'
'add new source into the boosting manager'
'remove source by stop the downloading and remove its metainfo for all its swarms'
'This function called when a source is finally determined. Fetch some torrents from it, DCNL then insert it into our data'
'Notify us when we have new seeder/leecher value in torrent from tracker'
'Manually scrape tracker by requesting to tracker manager'
'setting archive of a particular source. This affects all the torrents in this source'
'Start downloading a particular torrent and add it to download list in Tribler'
'Stopping torrent that currently downloading'
'Function to select which torrent in the torrent list will be downloaded in the DCNL next iteration. It depends on the source and applied policy'
'load config in file configuration and apply it to manager'
'save the environment parameters in config file'
'Log transfer statistics'
'function to update swarm statistics. DCNL This function called when we get new Downloadstate for active torrents. DCNL Updated downloadstate (seeding_stats) for a particular torrent is stored here.'
'Start operating mining for this source'
'kill tasks on this source'
'load source if and only if the overall system is ready. DCNL This is useful so we don\'t burden the application during the startup'
'returning \'raw\' source. May be overriden'
'periodically check torrents in channel. Will return the torrent data if finished.'
'function to download a torrent by infohash and call a callback afterwards DCNL with TorrentDef object as parameter.'
'function called when RSS successfully read'
'function called when RSS failed except from 503 DCNL aborting load the source'
'apply the policy to the torrents stored'
'function to find a key of an object'
'function to check whether a swarm is included to download'
'Initializes this DBHandler.'
'Search in the local database for torrents matching a specific query. This method also assigns a relevance DCNL score to each torrent, based on the name, files and file extensions. DCNL The algorithm is based on BM25. The document length factor is regarded since our "documents" are very small DCNL (often a few keywords). DCNL See https://en.wikipedia.org/wiki/Okapi_BM25 for more information about BM25.'
'return the vote status if such record exists, otherwise None'
'return the dispersy_id for this vote'
'return the timestamp for this vote'
'Return some random (channel) torrents from the database.'
'Calculate the relevance score of a channel from the database. DCNL The algorithm used is a very stripped-down version of BM25 where only the matching terms are counted.'
'Searches for matching channels against a given query in the database.'
'Returns all the channels'
'Returns all newest unsubscribed channels, ie the ones with no votes (positive or negative)'
'Returns the channels based on the input sql, if the number of positive votes DCNL is less than maxvotes and the number of torrent > 0'
'Returns channel id, name, nrfavorites of most popular channel if any'
'Returns the torrent dispersy IDs from a specified playlist.'
'The version of this database.'
'Returns the connection of the database, which may be None if not initialized or closed. DCNL :return: The connection object of the database'
'Initializes the database. If the database doesn\'t exist, we create a new one. Otherwise, we check the DCNL version and upgrade to the latest version.'
'Cancels all pending tasks and closes all cursors. Then, it closes the connection.'
'Opens a connection to the database. If the database doesn\'t exist, we create a new one and run the DCNL initialization SQL scripts. If the database doesn\'t exist, we simply connect to it. DCNL And finally, we read the database version.'
'values must be a list of tuples'
'value_name could be a string, a tuple of strings, or \'*\''
'value_name could be a string, or a tuple of strings DCNL order by is represented as order_by DCNL group by is represented as group_by'
'Add observer function which will be called upon certain event DCNL Example: DCNL addObserver(NTFY_TORRENTS, [NTFY_INSERT,NTFY_DELETE]) -> get callbacks DCNL when peers are added or deleted DCNL addObserver(NTFY_TORRENTS, [NTFY_SEARCH_RESULT], \'a_search_id\') -> get DCNL callbacks when peer-searchresults of of search DCNL with id==\'a_search_id\' come in'
'Remove all observers with function func'
'Notify all interested observers about an event with threads from the pool'
'Return the current Video-On-Demand download that is being requested.'
'Set a new Video-On-Demand download. Set the mode of old download to normal and close the file stream of DCNL the old download.'
'Get the destination directory of the VOD download.'
'Shutdown the video HTTP server.'
'Called only once (unless we have multiple Sessions) by MainThread'
'Called by any thread'
'This method is called when the download handle has been created. DCNL Immediately checkpoint the download and write the resume data.'
'Called by any thread'
'Called by any thread'
'Called by any thread'
'Update the amount of hops for a specified download. This can be done on runtime.'
'Update the trackers for a download. DCNL :param infohash: infohash of the torrent that needs to be updated DCNL :param trackers: A list of tracker urls.'
'Stop any download states callback if present.'
'Set the download state callback. Remove any old callback if it\'s present.'
'Invoke the download states callback with a list of the download states.'
'This method is periodically (every second) called with a list of the download states of the active downloads.'
'Called by any thread'
'Called by any thread, assume session_lock already held'
'Checkpoints all running downloads in Tribler. DCNL Even if the list of Downloads changes in the mean time this is no problem. DCNL For removals, dllist will still hold a pointer to the download, and additions are no problem DCNL (just won\'t be included in list of states returned via callback).'
'Shutdown all downloads in Tribler.'
'Called as soon as Session shutdown is initiated. Used to start DCNL shutdown tasks that takes some time and that can run in parallel DCNL to checkpointing, etc. DCNL :returns a Deferred that will fire once all dependencies acknowledge they have shutdown.'
'Called by network thread'
'Called by any thread'
'Adds a new tracker into the tracker info dict and the database. DCNL :param tracker_url: The new tracker URL to be added.'
'Gets the tracker information with the given tracker URL. DCNL :param tracker_url: The given tracker URL. DCNL :return: The tracker info dict if exists, None otherwise.'
'Updates a tracker information. DCNL :param tracker_url: The given tracker_url. DCNL :param is_successful: If the check was successful.'
'Checks if the given tracker URL should be checked right now or not. DCNL :param tracker_url: The given tracker URL. DCNL :return: True or False.'
'Gets the next tracker for automatic tracker-checking. DCNL :return: The next tracker for automatic tracker-checking.'
'Check whether a lock file exists in the Tribler directory. If not, create the file. If it exists, DCNL check the PID that is written inside the lock file.'
'Check whether a given process ID is currently running. We do this by sending signal 0 to the process DCNL which does not has any effect on the running process. DCNL Source: http://stackoverflow.com/questions/7647167/check-if-a-process-is-running-in-python-in-linux-unix'
'Create the lock file and write the PID in it. We also create the directory structure since the ProcessChecker DCNL might be called before the .Tribler directory has been created.'
'Remove the lock file.'
'Returns the PID from the lock file.'
'Parses an HTML content and find links.'
'Converts an HTML document to plain text.'
'Parses a RSS feed. This methods supports RSS 2.0 and Media RSS.'
'Creates a new Channel. DCNL :param name: Name of the Channel. DCNL :param description: Description of the Channel. DCNL :param mode: Mode of the Channel (\'open\', \'semi-open\', or \'closed\'). DCNL :param rss_url: RSS URL for the Channel. DCNL :return: Channel ID DCNL :raises DuplicateChannelNameError if name already exists'
'Gets the ChannelObject with the given channel id. DCNL :return: The ChannelObject if exists, otherwise None.'
'Gets a Channel by name. DCNL :param name: Channel name. DCNL :return: The channel object if exists, otherwise None.'
'Gets a list of all channel objects. DCNL :return: The list of all channel objects.'
'Searches for torrents using SearchCommunity with the given keywords. DCNL :param keywords: The given keywords.'
'The callback function handles the search results from SearchCommunity. DCNL :param subject: Must be SIGNAL_SEARCH_COMMUNITY. DCNL :param change_type: Must be SIGNAL_ON_SEARCH_RESULTS. DCNL :param object_id: Must be None. DCNL :param search_results: The result dictionary which has \'keywords\', \'results\', and \'candidate\'.'
'Searches for channels using AllChannelCommunity with the given keywords. DCNL :param keywords: The given keywords.'
'The callback function handles the search results from AllChannelCommunity. DCNL :param subject: Must be SIGNAL_ALLCHANNEL_COMMUNITY. DCNL :param change_type: Must be SIGNAL_ON_SEARCH_RESULTS. DCNL :param object_id: Must be None. DCNL :param search_results: The result dictionary which has \'keywords\', \'results\', and \'candidate\'.'
'.. http:put:: /shutdown DCNL A PUT request to this endpoint will shutdown Tribler. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/shutdown DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "shutdown": True'
'.. http:get:: /wallets DCNL A GET request to this endpoint will return information about all available wallets in Tribler. DCNL This includes information about the address, a human-readable wallet name and the balance. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/wallets DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "wallets": [{ DCNL "created": True, DCNL "name": "Bitcoin", DCNL "address": "17AVS7n3zgBjPq1JT4uVmEXdcX3vgB2wAh", DCNL "balance": { DCNL "available": 0.000126, DCNL "pending": 0.0, DCNL "currency": "BTC"'
'.. http:put:: /wallets/(string:wallet identifier) DCNL A request to this endpoint will create a new wallet. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/wallets/BTC --data "password=secret" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "created": True'
'.. http:get:: /wallets/(string:wallet identifier)/balance DCNL A GET request to this endpoint will return balance information of a specific wallet. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/wallets/BTC/balance DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "balance": { DCNL "available": 0.000126, DCNL "pending": 0.0, DCNL "currency": "BTC"'
'.. http:get:: /wallets/(string:wallet identifier)/transactions DCNL A GET request to this endpoint will return past transactions of a specific wallet. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/wallets/BTC/transactions DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "transactions": [{ DCNL "currency": "BTC", DCNL "to": "17AVS7n3zgBjPq1JT4uVmEXdcX3vgB2wAh", DCNL "outgoing": false, DCNL "from": "", DCNL "description": "", DCNL "timestamp": "1489673696", DCNL "fee_amount": 0.0, DCNL "amount": 0.00395598, DCNL "id": "6f6c40d034d69c5113ad8cb3710c172955f84787b9313ede1c39cac85eeaaffe"'
'.. http:get:: /wallets/(string:wallet identifier)/transfer DCNL A GET request to this endpoint will return past transactions of a specific wallet. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/wallets/BTC/transfer DCNL --data "amount=0.3&destination=mpC1DDgSP4PKc5HxJzQ5w9q6CGLBEQuLsN" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "txid": "abcd"'
'During the initialization of the REST API, we only start the event sockets and the state endpoint. DCNL We enable the other endpoints when Tribler has completed the starting procedure.'
'This method is only called when Tribler has started. It enables the other endpoints that are dependent DCNL on a fully started Tribler.'
'Search for the tunnel community in the dispersy communities.'
'.. http:get:: /debug/circuits DCNL A GET request to this endpoint returns information about the built circuits in the tunnel community. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/debug/circuits DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "circuits": [ DCNL "id": 1234, DCNL "state": "EXTENDING", DCNL "goal_hops": 4, DCNL "bytes_up": 45, DCNL "bytes_down": 49, DCNL "created": 1468176257, DCNL "hops": [{ DCNL "host": "unknown" DCNL "host": "39.95.147.20:8965"'
'.. http:get:: /settings DCNL A GET request to this endpoint returns all the session settings that can be found in Tribler. DCNL Please note that a port with a value of -1 means that the port is randomly assigned at startup. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/settings DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "settings": { DCNL "libtorrent": { DCNL "anon_listen_port": -1,'
'.. http:post:: /settings DCNL A POST request to this endpoint will update Tribler settings. A JSON-dictionary should be passed as body DCNL contents. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X POST http://localhost:8085/settings --data "{" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "modified": True'
'Set a specific Tribler setting. Throw a ValueError if this setting is not available.'
'Parse the settings dictionary.'
'.. http:get:: /market/transactions DCNL A GET request to this endpoint will return all performed transactions in the market community. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/transactions DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "transactions": [{ DCNL "trader_id": "12c406358ba05e5883a75da3f009477e4ca699a9", DCNL "order_number": 4, DCNL "partner_trader_id": "34c406358ba05e5883a75da3f009477e4ca699a9", DCNL "partner_order_number": 1, DCNL "transaction_number": 3, DCNL "price": 10, DCNL "price_type": "MC", DCNL "transferred_price": 5, DCNL "quantity": 10, DCNL "quantity_type": "BTC", DCNL "transferred_quantity": 4, DCNL "timestamp": 1493906434.627721, DCNL "payment_complete": False'
'.. http:get:: /market/transactions/(string:trader_id)/(string:transaction_number)/payments DCNL A GET request to this endpoint will return all payments tied to a specific transaction. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/transactions/ DCNL 12c406358ba05e5883a75da3f009477e4ca699a9/3/payments DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "payments": [{ DCNL "trader_id": "12c406358ba05e5883a75da3f009477e4ca699a9", DCNL "transaction_number": 3, DCNL "price": 10, DCNL "price_type": "MC", DCNL "quantity": 10, DCNL "quantity_type": "BTC", DCNL "transferred_quantity": 4, DCNL "payment_id": "abcd", DCNL "address_from": "my_mc_address", DCNL "address_to": "my_btc_address", DCNL "timestamp": 1493906434.627721,'
'Create an ask/bid from the provided parameters in a request. This method returns a tuple with the price, DCNL quantity and timeout of the ask/bid.'
'.. http:get:: /market/asks DCNL A GET request to this endpoint will return all ask ticks in the order book of the market community. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/asks DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "asks": [{ DCNL "price_type": "BTC", DCNL "quantity_type": "MC", DCNL "ticks": [{ DCNL "trader_id": "12c406358ba05e5883a75da3f009477e4ca699a9", DCNL "timeout": 3600, DCNL "quantity_type": "MC", DCNL "price_type": "BTC", DCNL "timestamp": 1493905920.68573, DCNL "price": 10.0, DCNL "order_number": 1, DCNL "message_id": "12c406358ba05e5883a75da3f009477e4ca699a9.1", DCNL "quantity": 10.0}, ...]'
'.. http:put:: /market/asks DCNL A request to this endpoint will create a new ask order. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/market/asks --data DCNL "price=10&quantity=10&price_type=BTC&quantity_type=MC" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "created": True'
'.. http:get:: /market/bids DCNL A GET request to this endpoint will return all bid ticks in the order book of the market community. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/bids DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "bids": [{ DCNL "price_type": "BTC", DCNL "quantity_type": "MC", DCNL "ticks": [{ DCNL "trader_id": "12c406358ba05e5883a75da3f009477e4ca699a9", DCNL "timeout": 3600, DCNL "quantity_type": "MC", DCNL "price_type": "BTC", DCNL "timestamp": 1493905920.68573, DCNL "price": 10.0, DCNL "order_number": 1, DCNL "message_id": "12c406358ba05e5883a75da3f009477e4ca699a9.1", DCNL "quantity": 10.0}, ...]'
'.. http:put:: /market/bids DCNL A request to this endpoint will create a new bid order. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/market/bids --data DCNL "price=10&quantity=10&price_type=BTC&quantity_type=MC" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "created": True'
'.. http:get:: /market/orders DCNL A GET request to this endpoint will return all your orders in the market community. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/orders DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "orders": [{ DCNL "trader_id": "12c406358ba05e5883a75da3f009477e4ca699a9", DCNL "timestamp": 1493906434.627721, DCNL "price": 10.0, DCNL "quantity_type": "MC", DCNL "reserved_quantity": 0.0, DCNL "is_ask": False, DCNL "price_type": "BTC", DCNL "timeout": 3600.0, DCNL "traded_quantity": 0.0, DCNL "order_number": 1, DCNL "completed_timestamp": null, DCNL "quantity": 10.0, DCNL "cancelled": False, DCNL "status": "open"'
'.. http:get:: /market/orders/(string:order_number)/cancel DCNL A POST request to this endpoint will cancel a specific order. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/market/orders/3/cancel DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "cancelled": True'
'.. http:get:: /search?q=(string:query) DCNL A GET request to this endpoint will create a search. Results are returned over the events endpoint, one by one. DCNL First, the results available in the local database will be pushed. After that, incoming Dispersy results are DCNL pushed. The query to this endpoint is passed using the url, i.e. /search?q=pioneer. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/search?q=tribler DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "type": "search_result_channel", DCNL "query": "test", DCNL "result": { DCNL "id": 3, DCNL "dispersy_cid": "da69aaad39ccf468aba2ab9177d5f8d8160135e6", DCNL "name": "My fancy channel", DCNL "description": "A description of this fancy channel", DCNL "subscribed": True, DCNL "votes": 23, DCNL "torrents": 3, DCNL "spam": 5, DCNL "modified": 14598395, DCNL "can_edit": False'
'.. http:get:: /search/completions?q=(string:query) DCNL A GET request to this endpoint will return autocompletion suggestions for the given query. For instance, DCNL when searching for "pioneer", this endpoint might return "pioneer one" if that torrent is present in the DCNL local database. This endpoint can be used to suggest terms to users while they type their search query. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/search/completions?q=pioneer DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "completions": ["pioneer one", "pioneer movie"]'
'.. http:get:: /torrentinfo DCNL A GET request to this endpoint will return information from a torrent found at a provided URI. DCNL This URI can either represent a file location, a magnet link or a HTTP(S) url. DCNL - torrent: the URI of the torrent file that should be downloaded. This parameter is required. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/torrentinfo?torrent=file:/home/me/test.torrent DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL {"metainfo": <torrent metainfo dictionary>}'
'Returns a 404 response code if your channel has not been created.'
'Create a download configuration based on some given parameters. Possible parameters are: DCNL - anon_hops: the number of hops for the anonymous download. 0 hops is equivalent to a plain download DCNL - safe_seeding: whether the seeding of the download should be anonymous or not (0 = off, 1 = on) DCNL - destination: the destination path of the torrent (where it is saved on disk)'
'.. http:get:: /downloads?get_peers=(boolean: get_peers)&get_pieces=(boolean: get_pieces) DCNL A GET request to this endpoint returns all downloads in Tribler, both active and inactive. The progress is a DCNL number ranging from 0 to 1, indicating the progress of the specific state (downloading, checking etc). The DCNL download speeds have the unit bytes/sec. The size of the torrent is given in bytes. The estimated time assumed DCNL is given in seconds. A description of the possible download statuses can be found in the REST API documentation. DCNL Detailed information about peers and pieces is only requested when the get_peers and/or get_pieces flag is set. DCNL Note that setting this flag has a negative impact on performance and should only be used in situations DCNL where this data is required. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/downloads?get_peers=1&get_pieces=1 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "downloads": [{ DCNL "name": "Ubuntu-16.04-desktop-amd64", DCNL "progress": 0.31459265, DCNL "infohash": "4344503b7e797ebf31582327a5baae35b11bda01", DCNL "speed_down": 4938.83, DCNL "speed_up": 321.84, DCNL "status": "DLSTATUS_DOWNLOADING", DCNL "size": 89432483, DCNL "eta": 38493, DCNL "num_peers": 53, DCNL "num_seeds": 93, DCNL "total_up": 10000, DCNL "total_down": 100000, DCNL "ratio": 0.1, DCNL "files": [{ DCNL "index": 0, DCNL "name": "ubuntu.iso", DCNL "size": 89432483, DCNL "included": True DCNL "trackers": [{ DCNL "url": "http://ipv6.torrent.ubuntu.com:6969/announce", DCNL "status": "Working", DCNL "peers": 42 DCNL "hops": 1, DCNL "anon_download": True, DCNL "safe_seeding": True, DCNL "max_upload_speed": 0, DCNL "max_download_speed": 0, DCNL "destination": "/home/user/file.txt", DCNL "availability": 1.234, DCNL "peers": [{ DCNL "ip": "123.456.789.987", DCNL "dtotal": 23, DCNL "downrate": 0, DCNL "uinterested": False, DCNL "wstate": " ", DCNL "optimistic": False, DCNL "total_pieces": 420, DCNL "vod_mod": True, DCNL "vod_prebuffering_progress": 0.89, DCNL "vod_prebuffering_progress_consec": 0.86, DCNL "error": "", DCNL "time_added": 1484819242,'
'.. http:put:: /downloads DCNL A PUT request to this endpoint will start a download from a provided URI. This URI can either represent a file DCNL location, a magnet link or a HTTP(S) url. DCNL - anon_hops: the number of hops for the anonymous download. 0 hops is equivalent to a plain download DCNL - safe_seeding: whether the seeding of the download should be anonymous or not (0 = off, 1 = on) DCNL - destination: the download destination path of the torrent DCNL - torrent: the URI of the torrent file that should be downloaded. This parameter is required. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/downloads DCNL --data "anon_hops=2&safe_seeding=1&destination=/my/dest/on/disk/&uri=file:/home/me/test.torrent DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL {"started": True, "infohash": "4344503b7e797ebf31582327a5baae35b11bda01"}'
'.. http:delete:: /downloads/(string: infohash) DCNL A DELETE request to this endpoint removes a specific download from Tribler. You can specify whether you only DCNL want to remove the download or the download and the downloaded data using the remove_data parameter. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/download/4344503b7e797ebf31582327a5baae35b11bda01 DCNL --data "remove_data=1" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL {"removed": True}'
'.. http:patch:: /download/(string: infohash) DCNL A PATCH request to this endpoint will update a download in Tribler. DCNL A state parameter can be passed to modify the state of the download. Valid states are "resume" DCNL (to resume a stopped/paused download), "stop" (to stop a running download) and "recheck" DCNL (to force a recheck of the hashes of a download). DCNL Another possible parameter is selected_files which manipulates which files are included in the download. DCNL The selected_files parameter is an array with the file indices as values. DCNL The anonymity of a download can be changed at runtime by passing the anon_hops parameter, however, this must DCNL be the only parameter in this request. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PATCH http://localhost:8085/downloads/4344503b7e797ebf31582327a5baae35b11bda01 DCNL --data "state=resume&selected_files[]=file1.iso&selected_files[]=1" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL {"modified": True}'
'.. http:get:: /download/(string: infohash)/torrent DCNL A GET request to this endpoint returns the .torrent file associated with the specified download. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/downloads/4344503b7e797ebf31582327a5baae35b11bda01/torrent DCNL **Example response**: DCNL The contents of the .torrent file.'
'.. http:get:: /torrents/random?limit=(int: max nr of torrents) DCNL A GET request to this endpoint returns random (channel) torrents. DCNL You can optionally specify a limit parameter to limit the maximum number of results. By default, this is 10. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/torrents/random?limit=1 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "torrents": [{ DCNL "id": 4, DCNL "infohash": "97d2d8f5d37e56cfaeaae151d55f05b077074779", DCNL "name": "Ubuntu-16.04-desktop-amd64", DCNL "size": 8592385, DCNL "category": "other", DCNL "num_seeders": 42, DCNL "num_leechers": 184, DCNL "last_tracker_check": 1463176959'
'.. http:get:: /torrents/(string: torrent infohash)/tracker DCNL Fetch all trackers of a specific torrent. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl http://localhost:8085/torrents/97d2d8f5d37e56cfaeaae151d55f05b077074779/trackers DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "trackers": [ DCNL "http://mytracker.com:80/announce", DCNL "udp://fancytracker.org:1337/announce" DCNL :statuscode 404: if the torrent is not found in the database'
'.. http:get:: /torrents/(string: torrent infohash)/health DCNL Fetch the swarm health of a specific torrent. You can optionally specify the timeout to be used in the DCNL connections to the trackers. This is by default 20 seconds. DCNL By default, we will not check the health of a torrent again if it was recently checked. You can force a health DCNL recheck by passing the refresh parameter. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl http://localhost:8085/torrents/97d2d8f5d37e56cfaeaae151d55f05b077074779/health?timeout=15&refresh=1 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "http://mytracker.com:80/announce": [{ DCNL "seeders": 43, DCNL "leechers": 20, DCNL "infohash": "97d2d8f5d37e56cfaeaae151d55f05b077074779" DCNL "http://nonexistingtracker.com:80/announce": { DCNL "error": "timeout" DCNL :statuscode 404: if the torrent is not found in the database'
'Search for the trustchain community in the dispersy communities.'
'.. http:get:: /trustchain/statistics DCNL A GET request to this endpoint returns statistics about the trustchain community DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/trustchain/statistics DCNL **Example response**: DCNL Note: latest_block does not exist if there is no data DCNL .. sourcecode:: javascript DCNL "statistics": DCNL "id": "TGliTmFDTFBLO...VGbxS406vrI=", DCNL "total_blocks": 8537, DCNL "total_down": 108904042, DCNL "total_up": 95138354, DCNL "latest_block": DCNL "hash": ab672fd6acc0... DCNL "up": 123, DCNL "down": 495, DCNL "total_up": 8393, DCNL "total_down": 8943, DCNL "link_public_key": 7324b765a98e, DCNL "sequence_number": 50, DCNL "link_public_key": 9a5572ec59bbf, DCNL "link_sequence_number": 3482, DCNL "previous_hash": bd7830e7bdd1...,'
'.. http:get:: /trustchain/blocks/TGliTmFDTFBLOVGbxS406vrI=?limit=(int: max nr of returned blocks) DCNL A GET request to this endpoint returns all blocks of a specific identity, both that were signed and responded DCNL by him. You can optionally limit the amount of blocks returned, this will only return some of the most recent DCNL blocks. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/trustchain/blocks/d78130e71bdd1...=?limit=10 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "blocks": [{ DCNL "hash": ab672fd6acc0... DCNL "up": 123, DCNL "down": 495, DCNL "total_up": 8393, DCNL "total_down": 8943, DCNL "sequence_number": 50, DCNL "link_public_key": 9a5572ec59bbf, DCNL "link_sequence_number": 3482, DCNL "previous_hash": bd7830e7bdd1...,'
'.. http:get:: /state DCNL A GET request to this endpoint returns the current state of the Tribler core. There are three states: DCNL - STARTING: The core of Tribler is starting DCNL - UPGRADING: The upgrader is active DCNL - STARTED: The Tribler core has started DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/state DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "state": "STARTED", DCNL "last_exception": None'
'.. http:post:: /createtorrent?download=(boolean: download) DCNL Create a torrent from local files and return it in base64 encoding. DCNL Description and trackers list are optional. DCNL This endpoint returns a 500 HTTP response if a source file does not exist. DCNL You can optionally pass a flag to start downloading the created torrent. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X POST http://localhost:8085/createtorrent DCNL --data "files[]=path/to/file.txt DCNL &files[]=path/to/another/file.mp4 DCNL &description=Video DCNL &trackers[]=url_tracker1 DCNL &trackers[]=url_backup1 DCNL &trackers[]=url_backup2" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "torrent": { base64 encoded torrent file } DCNL :statuscode 500: if source files do not exist.'
'Write data over the event socket if it\'s open.'
'Returns the channel search results over the events endpoint.'
'Returns the torrent search results over the events endpoint.'
'.. http:get:: /events DCNL A GET request to this endpoint will open the event connection. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/events'
'.. http:get:: /statistics/tribler DCNL A GET request to this endpoint returns general statistics in Tribler. DCNL The size of the Tribler database is in bytes. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/statistics/tribler DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "tribler_statistics": { DCNL "num_channels": 1234, DCNL "database_size": 384923, DCNL "torrent_queue_stats": [{ DCNL "failed": 2, DCNL "total": 9, DCNL "type": "TFTP", DCNL "pending": 1, DCNL "success": 6'
'.. http:get:: /statistics/dispersy DCNL A GET request to this endpoint returns general statistics in Dispersy. DCNL The returned runtime is the amount of seconds that Dispersy is active. The total uploaded and total downloaded DCNL statistics are in bytes. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/statistics/dispersy DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "dispersy_statistics": { DCNL "wan_address": "123.321.456.654:1234", DCNL "lan_address": "192.168.1.2:1435", DCNL "connection": "unknown", DCNL "runtime": 859.34, DCNL "total_downloaded": 538.53, DCNL "total_uploaded": 983.24, DCNL "packets_sent": 43, DCNL "packets_received": 89,'
'.. http:get:: /statistics/communities DCNL A GET request to this endpoint returns general statistics of active Dispersy communities. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/statistics/communities DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "community_statistics": [{ DCNL "identifier": "48d04e922dec4430daf22400c9d4cc5a3a53b27d", DCNL "member": "a66ebac9d88a239ef348a030d5ed3837868fc06d", DCNL "candidates": 43, DCNL "global_time": 42, DCNL "classification", "ChannelCommunity", DCNL "packets_sent": 43, DCNL "packets_received": 89,'
'Returns a 404 response code if your channel has not been created.'
'Returns a 401 response code if you are not authorized to perform a specific request.'
'Returns information about the channel from the database. Returns None if the channel with given cid DCNL does not exist.'
'Returns the Channel object associated with a channel that is used to manage rss feeds.'
'Make a vote in the channel specified by the cid. Returns a deferred that fires when the vote is done.'
'Returns a Dispersy community from the given channel id. The Community object can be used to delete/add torrents DCNL or modify playlists in a specific channel.'
'.. http:get:: /channels/popular?limit=(int:max nr of channels) DCNL A GET request to this endpoint will return the most popular discovered channels in Tribler. DCNL You can optionally pass a limit parameter to limit the number of results. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/popular?limit=1 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "channels": [{ DCNL "id": 3, DCNL "dispersy_cid": "da69aaad39ccf468aba2ab9177d5f8d8160135e6", DCNL "name": "My fancy channel", DCNL "description": "A description of this fancy channel", DCNL "subscribed": False, DCNL "votes": 23, DCNL "torrents": 3, DCNL "spam": 5, DCNL "modified": 14598395, DCNL "can_edit": True,'
'.. http:get:: /channels/discovered DCNL A GET request to this endpoint returns all channels discovered in Tribler. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/discovered DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "channels": [{ DCNL "id": 3, DCNL "dispersy_cid": "da69aaad39ccf468aba2ab9177d5f8d8160135e6", DCNL "name": "My fancy channel", DCNL "description": "A description of this fancy channel", DCNL "subscribed": False, DCNL "votes": 23, DCNL "torrents": 3, DCNL "spam": 5, DCNL "modified": 14598395, DCNL "can_edit": True'
'.. http:put:: /channels/discovered DCNL Create your own new channel. The passed mode and descriptions are optional. DCNL Valid modes include: \'open\', \'semi-open\' or \'closed\'. By default, the mode of the new channel is \'closed\'. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered DCNL --data "name=fancy name&description=fancy description&mode=open" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "added": 23 DCNL :statuscode 500: if a channel with the specified name already exists.'
'.. http:get:: /channels/discovered/(string: channelid) DCNL Return the name, description and identifier of a channel. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/discovered/4a9cfc7ca9d15617765f4151dd9fae94c8f3ba11 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "overview": { DCNL "name": "My Tribler channel", DCNL "description": "A great collection of open-source movies", DCNL "identifier": "4a9cfc7ca9d15617765f4151dd9fae94c8f3ba11" DCNL :statuscode 404: if your channel has not been created (yet).'
'.. http:get:: /channels/discovered/(string: channelid)/playlists DCNL Returns the playlists in your channel. Returns error 404 if you have not created a channel. DCNL - disable_filter: whether the family filter should be disabled for this request (1 = disabled) DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/discovered/abcd/playlists DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "playlists": [{ DCNL "id": 1, DCNL "name": "My first playlist", DCNL "description": "Funny movies", DCNL "torrents": [{ DCNL "id": 4, DCNL "infohash": "97d2d8f5d37e56cfaeaae151d55f05b077074779", DCNL "name": "Ubuntu-16.04-desktop-amd64", DCNL "size": 8592385, DCNL "category": "other", DCNL "num_seeders": 42, DCNL "num_leechers": 184, DCNL "last_tracker_check": 1463176959 DCNL :statuscode 404: if you have not created a channel.'
'.. http:put:: /channels/discovered/(string: channelid)/playlists DCNL Create a new empty playlist with a given name and description. The name and description parameters are DCNL mandatory. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered/abcd/playlists DCNL --data "name=My fancy playlist&description=This playlist contains some random movies" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "created": True DCNL :statuscode 400: if you are missing the name and/or description parameter DCNL :statuscode 404: if the specified channel does not exist'
'.. http:delete:: /channels/discovered/(string: channelid)/playlists/(int: playlistid) DCNL Remove a playlist with a specified playlist id. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/channels/discovered/abcd/playlists/3 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "removed": True DCNL :statuscode 404: if the specified channel (community) or playlist does not exist'
'.. http:post:: /channels/discovered/(string: channelid)/playlists/(int: playlistid) DCNL Edit a specific playlist. The new name and description should be passed as parameter. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X POST http://localhost:8085/channels/discovered/abcd/playlists/3 DCNL --data "name=test&description=my test description" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "modified": True DCNL :statuscode 404: if the specified channel (community) or playlist does not exist or if the DCNL name and description parameters are missing.'
'.. http:put:: /channels/discovered/(string: channelid)/playlists/(int: playlistid)/(string: infohash) DCNL Add a torrent with a specified infohash to a specified playlist. The torrent that is added to the playlist, DCNL should be present in the channel. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered/abcd/playlists/3/abcdef DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "added": True DCNL :statuscode 404: if the specified channel/playlist/torrent does not exist. DCNL :statuscode 409: if the specified torrent is already in the specified playlist.'
'.. http:delete:: /channels/discovered/(string: channelid)/playlists/(int: playlistid)/(string: infohash) DCNL Remove a torrent with a specified infohash from a specified playlist. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/channels/discovered/abcd/playlists/3/abcdef DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "removed": True DCNL :statuscode 404: if the specified channel/playlist/torrent does not exist.'
'.. http:get:: /mychannel DCNL Return the name, description and identifier of your channel. DCNL This endpoint returns a 404 HTTP response if you have not created a channel (yet). DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/mychannel DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "overview": { DCNL "name": "My Tribler channel", DCNL "description": "A great collection of open-source movies", DCNL "identifier": "4a9cfc7ca9d15617765f4151dd9fae94c8f3ba11" DCNL :statuscode 404: if your channel has not been created (yet).'
'.. http:post:: /mychannel DCNL Modify the name and/or the description of your channel. DCNL This endpoint returns a 404 HTTP response if you have not created a channel (yet). DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X POST http://localhost:8085/mychannel DCNL --data "name=My fancy playlist&description=This playlist contains some random movies" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "modified": True DCNL :statuscode 404: if your channel has not been created (yet).'
'Returns a tuple of (channel_obj, error). Callers of this method should check whether the channel_obj is None and DCNL if so, return the error.'
'.. http:get:: /channels/discovered/(string: channelid)/rssfeeds DCNL Returns the RSS feeds in your channel. DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/discovered/abcd/rssfeeds DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "rssfeeds": [{ DCNL "url": "http://rssprovider.com/feed.xml",'
'.. http:post:: /channels/discovered/(string: channelid)/recheckfeeds DCNL Rechecks all rss feeds in your channel. Returns error 404 if you channel does not exist. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X POST http://localhost:8085/channels/discovered/recheckrssfeeds DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "rechecked": True DCNL :statuscode 404: if you have not created a channel.'
'.. http:put:: /channels/discovered/(string: channelid)/rssfeeds/http%3A%2F%2Ftest.com%2Frss.xml DCNL Add a RSS feed to your channel. Returns error 409 if the supplied RSS feed already exists. DCNL Note that the rss feed url should be URL-encoded. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered/abcd/rssfeeds/http%3A%2F%2Ftest.com%2Frss.xml DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "added": True DCNL :statuscode 409: (conflict) if the specified RSS URL is already present in your feeds.'
'.. http:delete:: /channels/discovered/(string: channelid)/rssfeeds/http%3A%2F%2Ftest.com%2Frss.xml DCNL Delete a RSS feed from your channel. Returns error 404 if the RSS feed that is being removed does not exist. DCNL Note that the rss feed url should be URL-encoded. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/channels/discovered/abcd/rssfeeds/http%3A%2F%2Ftest.com%2Frss.xml DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "removed": True DCNL :statuscode 404: if the specified RSS URL is not in your feed list.'
'.. http:get:: /channels/discovered/(string: channelid)/torrents DCNL A GET request to this endpoint returns all discovered torrents in a specific channel. The size of the torrent is DCNL in number of bytes. The last_tracker_check value will be 0 if we did not check the tracker state of the torrent DCNL yet. Optionally, we can disable the family filter for this particular request by passing the following flag: DCNL - disable_filter: whether the family filter should be disabled for this request (1 = disabled) DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/discovered/da69aaad39ccf468aba2ab9177d5f8d8160135e6/torrents DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "torrents": [{ DCNL "id": 4, DCNL "infohash": "97d2d8f5d37e56cfaeaae151d55f05b077074779", DCNL "name": "Ubuntu-16.04-desktop-amd64", DCNL "size": 8592385, DCNL "category": "other", DCNL "num_seeders": 42, DCNL "num_leechers": 184, DCNL "last_tracker_check": 1463176959 DCNL :statuscode 404: if the specified channel cannot be found.'
'.. http:put:: /channels/discovered/(string: channelid)/torrents DCNL Add a torrent file to your own channel. Returns error 500 if something is wrong with the torrent file DCNL and DuplicateTorrentFileError if already added to your channel. The torrent data is passed as base-64 encoded DCNL string. The description is optional. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered/abcd/torrents DCNL --data "torrent=...&description=funny video" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "added": True DCNL :statuscode 404: if your channel does not exist. DCNL :statuscode 500: if the passed torrent data is corrupt.'
'.. http:put:: /channels/discovered/(string: channelid)/torrents/http%3A%2F%2Ftest.com%2Ftest.torrent DCNL Add a torrent by magnet or url to your channel. Returns error 500 if something is wrong with the torrent file DCNL and DuplicateTorrentFileError if already added to your channel (except with magnet links). DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/discovered/abcdefg/torrents/ DCNL http%3A%2F%2Ftest.com%2Ftest.torrent --data "description=nice video" DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "added": "http://test.com/test.torrent" DCNL :statuscode 404: if your channel does not exist. DCNL :statuscode 500: if the specified torrent is already in your channel.'
'.. http:delete:: /channels/discovered/(string: channelid)/torrents/(string: torrent infohash) DCNL Remove a torrent with a given infohash from a given channel. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/channels/discovered/abcdefg/torrents/ DCNL 97d2d8f5d37e56cfaeaae151d55f05b077074779 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "removed": True DCNL :statuscode 404: if the channel is not found or if the torrent is not found in the specified channel'
'.. http:get:: /channels/subscribed DCNL Returns all the channels the user is subscribed to. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X GET http://localhost:8085/channels/subscribed DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "subscribed": [{ DCNL "id": 3, DCNL "dispersy_cid": "da69aaad39ccf468aba2ab9177d5f8d8160135e6", DCNL "name": "My fancy channel", DCNL "description": "A description of this fancy channel", DCNL "subscribed": True, DCNL "votes": 23, DCNL "torrents": 3, DCNL "spam": 5, DCNL "modified": 14598395, DCNL "can_edit": True,'
'.. http:put:: /channels/subscribed/(string: channelid) DCNL Subscribe to a specific channel. Returns error 409 if you are already subscribed to this channel. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X PUT http://localhost:8085/channels/subscribed/da69aaad39ccf468aba2ab9177d5f8d8160135e6 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "subscribed" : True DCNL :statuscode 409: (conflict) if you are already subscribed to the specified channel.'
'.. http:delete:: /channels/subscribed/(string: channelid) DCNL Unsubscribe from a specific channel. Returns error 404 if you are not subscribed to this channel. DCNL **Example request**: DCNL .. sourcecode:: none DCNL curl -X DELETE http://localhost:8085/channels/subscribed/da69aaad39ccf468aba2ab9177d5f8d8160135e6 DCNL **Example response**: DCNL .. sourcecode:: javascript DCNL "unsubscribed" : True DCNL :statuscode 404: if you are not subscribed to the specified channel.'
'Starts the HTTP API with the listen port as specified in the session configuration.'
'Stop the HTTP API and return a deferred that fires when the server has shut down.'
'Sets the _infohash_list to None and returns a deferred that has succeeded. DCNL :return: A deferred that succeeds immediately.'
'Checks if we still can add requests to this session. DCNL :return: True or False.'
'Adds a infohash into this session. DCNL :param infohash: The infohash to be added.'
'Does some work when a connection has been established.'
'Number of retries before a session is marked as failed.'
'Interval between retries.'
'Returns the max amount of retries allowed for this session. DCNL :return: The maximum amount of retries.'
'Returns the interval one has to wait before retrying to connect. DCNL :return: The interval before retrying.'
'Handles the case of an error during the request. DCNL :param failure: The failure object that is thrown by a deferred.'
':param _: The deferred which we ignore. DCNL This function handles the scenario of the session prematurely being cleaned up, DCNL most likely due to a shutdown. DCNL This function only should be called by the result_deferred.'
'This method handles everything that needs to be done when one step DCNL in the session has failed and thus no data can be obtained.'
'This function handles the response body of a HTTP tracker, DCNL parsing the results.'
'Cleans the session by cancelling all deferreds and closing sockets. DCNL :return: A deferred that fires once the cleanup is done.'
'This method handles everything that needs to be done when something during DCNL the UDP scraping went wrong.'
'Stops the UDP scraper and closes the socket. DCNL :return: A deferred that fires once it has closed the connection.'
'This function is called when the scraper is initialized. DCNL Initiates the connection with the tracker.'
'This function can be called to send serialized data to the tracker. DCNL :param data: The serialized data to be send.'
'This function dispatches data received from a UDP tracker. DCNL If it\'s the first response, it will dispatch the data to the handle_connection_response DCNL function of the UDP session. DCNL All subsequent data will be send to the _handle_response function of the UDP session. DCNL :param data: The data received from the UDP tracker.'
'Handles the case of a connection being refused by a tracker.'
'Handles the case when resolving an ip address fails. DCNL :param failure: The failure object thrown by the deferred.'
':param _: The deferred which we ignore. DCNL This function handles the scenario of the session prematurely being cleaned up, DCNL most likely due to a shutdown. DCNL This function only should be called by the result_deferred.'
'Called when a hostname has been resolved to an ip address. DCNL Constructs a scraper and opens a UDP port to listen on. DCNL Removes an old scraper if present. DCNL :param ip_address: The ip address that matches the hostname of the tracker_url. DCNL :param start_scraper: Whether we should start the scraper immediately.'
'This method handles everything that needs to be done when one step DCNL in the session has failed and thus no data can be obtained.'
'Generates a unique transaction id and stores this in the _active_session_dict set.'
'Removes an session and its corresponding id from the _active_session_dict set. DCNL :param session: The session that needs to be removed from the set.'
'Cleans the session by cancelling all deferreds and closing sockets. DCNL :return: A deferred that fires once the cleanup is done.'
'Returns the max amount of retries allowed for this session. DCNL :return: The maximum amount of retries.'
'Returns the time one has to wait until retrying the connection again. DCNL Increases exponentially with the number of retries. DCNL :return: The interval one has to wait before retrying the connection.'
'Connects to the tracker and starts querying for seed and leech data. DCNL :return: A deferred that will fire with a dictionary containing seed/leech information per infohash'
'Called by the UDPScraper when it is connected to the tracker. DCNL Creates a connection message and calls the scraper to send it.'
'Handles the connection response from the UDP scraper and queries DCNL it immediately for seed/leech data per infohash DCNL :param response: The connection response from the UDP scraper'
'Handles the response from the UDP scraper. DCNL :param response: The response from the UDP scraper'
'Cleans the session by cancelling all deferreds and closing sockets. DCNL :return: A deferred that fires once the cleanup is done.'
'Returns whether or not this session can accept additional infohashes. DCNL :return:'
'This function adds a infohash to the request list. DCNL :param infohash: The infohash to be added.'
'Fakely connects to a tracker. DCNL :return: A deferred with a callback containing an empty dictionary.'
'Returns the max amount of retries allowed for this session. DCNL :return: The maximum amount of retries.'
'Returns the interval one has to wait before retrying to connect. DCNL :return: The interval before retrying.'
'Shutdown the torrent health checker. DCNL Once shut down it can\'t be started again. DCNL :returns A deferred that will fire once the shutdown has completed.'
'Changes the tracker selection interval dynamically and schedules the task.'
'The regularly scheduled task that selects torrents associated with a specific tracker to check.'
'Public API for adding a GUI request. DCNL :param infohash: Torrent infohash. DCNL :param timeout: The timeout to use in the performed requests DCNL :param scrape_now: Flag whether we want to force scraping immediately'
'Handles the scenario of when a tracker session has failed by calling the DCNL tracker_manager\'s update_tracker_info function. DCNL Trap value errors that are thrown by e.g. the HTTPTrackerSession when a connection fails. DCNL And trap CancelledErrors that can be thrown when shutting down. DCNL :param failure: The failure object raised by Twisted.'
'A Session object is created which is configured with the Tribler configuration object. DCNL Only a single session instance can exist at a time in a process. DCNL :param config: a TriblerConfig object or None, in which case we DCNL look for a saved session in the default location (state dir). If DCNL we can\'t find it, we create a new TriblerConfig() object to DCNL serve as startup config. Next, the config is saved in the directory DCNL indicated by its \'state_dir\' attribute. DCNL :param ignore_singleton: for testing purposes only. Enables the existence of multiple DCNL Session instances. DCNL :param autoload_discovery: only false in the Tunnel community tests'
'Create directory structure of the state directory.'
'Claim all required random ports.'
'Set parameters that depend on state_dir.'
'Returns the Session singleton if it exists or otherwise creates it first, in which DCNL case you need to pass the constructor params. DCNL :return: the Session singleton'
'Check if there exists a Session singleton. DCNL :return: either True or False.'
'Remove the Session singleton.'
'This method is called when an unhandled error in Tribler is observed. DCNL It broadcasts the tribler_exception event.'
'Start a download from an argument. This argument can be of the following type: DCNL -http: Start a download from a torrent file at the given url. DCNL -magnet: Start a download from a torrent file by using a magnet link. DCNL -file: Start a download from a torrent file at given location. DCNL :param uri: specifies the location of the torrent to be downloaded DCNL :param download_config: an optional configuration for the download DCNL :return: a deferred that fires when a download has been added to the Tribler core'
'Creates a Download object and adds it to the session. The passed DCNL ContentDef and DownloadStartupConfig are copied into the new Download DCNL object. The Download is then started and checkpointed. DCNL If a checkpointed version of the Download is found, that is restarted DCNL overriding the saved DownloadStartupConfig if "download_startup_config" is not None. DCNL Locking is done by LaunchManyCore. DCNL :param torrent_definition: a finalized TorrentDef DCNL :param download_startup_config: a DownloadStartupConfig or None, in which case DCNL a new DownloadStartupConfig() is created with its default settings DCNL and the result becomes the runtime config of this Download DCNL :param hidden: whether this torrent should be added to the mypreference table DCNL :return: a Download'
'Recreates Download from resume file. DCNL Note: this cannot be made into a method of Download, as the Download DCNL needs to be bound to a session, it cannot exist independently. DCNL :return: a Download object DCNL :raises: a NotYetImplementedException'
'Returns a copy of the list of Downloads. DCNL Locking is done by LaunchManyCore. DCNL :return: a list of Download objects'
'Returns the Download object for this hash. DCNL Locking is done by LaunchManyCore. DCNL :return: a Download object'
'Checks if the torrent download already exists. DCNL :param infohash: The torrent infohash DCNL :return: True or False indicating if the torrent download already exists'
'Stops the download and removes it from the session. DCNL Note that LaunchManyCore locks. DCNL :param download: the Download to remove DCNL :param remove_content: whether to delete the already downloaded content from disk DCNL :param remove_state: whether to delete the metadata files of the downloaded content from disk DCNL :param hidden: whether this torrent is added to the mypreference table and this entry should be removed'
'Remove a download by it\'s infohash. DCNL We can only remove content when the download object is found, otherwise only DCNL the state is removed. DCNL :param infohash: the download to remove DCNL :param remove_content: whether to delete the already downloaded content from disk DCNL :param remove_state: whether to remove the metadata files from disk'
'See Download.set_state_callback. Calls user_callback with a list of DCNL DownloadStates, one for each Download in the Session as first argument. DCNL The user_callback must return a tuple (when, getpeerlist) that indicates DCNL when to invoke the callback again (as a number of seconds from now, DCNL or < 0.0 if not at all) and whether to also include the details of DCNL the connected peers in the DownloadStates on that next call. DCNL The callback will be called by a popup thread which can be used DCNL indefinitely (within reason) by the higher level code. DCNL :param user_callback: a function adhering to the above spec DCNL :param interval: time in between the download states callback\'s'
'Returns the PermID of the Session, as determined by the DCNL TriblerConfig.set_permid() parameter. A PermID is a public key. DCNL :return: the PermID encoded in a string in DER format'
'Add an observer function function to the Session. The observer DCNL function will be called when one of the specified events (changeTypes) DCNL occurs on the specified subject. DCNL The function will be called by a popup thread which can be used indefinitely (within reason) DCNL by the higher level code. Note that this function is called by any thread and is thread safe. DCNL :param observer_function: should accept as its first argument DCNL the subject, as second argument the changeType, as third argument an DCNL object_id (e.g. the primary key in the observed database) and an DCNL optional list of arguments. DCNL :param subject: the subject to observe, one of NTFY_* subjects (see simpledefs). DCNL :param change_types: the list of events to be notified of one of NTFY_* events. DCNL :param object_id: The specific object in the subject to monitor (e.g. a DCNL specific primary key in a database to monitor for updates.) DCNL :param cache: the time to bundle/cache events matching this function'
'Remove observer function. No more callbacks will be made. DCNL This function is called by any thread and is thread safe. DCNL :param function: the observer function to remove.'
'Opens a connection to the specified database. Only the thread calling this method may DCNL use this connection. The connection must be closed with close_dbhandler() when this DCNL thread exits. This function is called by any thread. DCNL ;param subject: the database to open. Must be one of the subjects specified here. DCNL :return: a reference to a DBHandler class for the specified subject or DCNL None when the Session was not started with megacache enabled.'
'Closes the given database connection.'
'Return a dictionary with general Tribler statistics.'
'Return a dictionary with general Dispersy statistics.'
'Return a dictionary with general communities statistics.'
'Restart Downloads from a saved checkpoint, if any. Note that we fetch information from the user download DCNL choices since it might be that a user has stopped a download. In that case, the download should not be DCNL resumed immediately when being loaded by libtorrent.'
'Saves the internal session state to the Session\'s state dir. DCNL Checkpoints the downloads via the LaunchManyCore instance. This function is called by any thread.'
'Start the SQLite database.'
'Start a Tribler session by initializing the LaunchManyCore class, opening the database and running the upgrader. DCNL Returns a deferred that fires when the Tribler session is ready for use.'
'Checkpoints the session and closes it, stopping the download engine. DCNL This method has to be called from the reactor thread.'
'Whether the Session has completely shutdown, i.e., its internal DCNL threads are finished and it is safe to quit the process the Session DCNL is running in. DCNL :return: a boolean.'
'Returns the directory in which to checkpoint the Downloads in this DCNL Session. This function is called by the network thread.'
'Try to download the torrent file without a known source. A possible source could be the DHT. DCNL If the torrent is received successfully, the user_callback method is called with the infohash as first DCNL and the contents of the torrent file (bencoded dict) as second parameter. If the torrent could not DCNL be obtained, the callback is not called. The torrent will have been added to the TorrentDBHandler (if enabled) DCNL at the time of the call. DCNL :param infohash: the infohash of the torrent DCNL :param user_callback: a function adhering to the above spec DCNL :param priority: the priority of this download'
'Ask the designated peer to send us the torrent file for the torrent DCNL identified by the passed infohash. If the torrent is successfully DCNL received, the user_callback method is called with the infohash as first DCNL and the contents of the torrent file (bencoded dict) as second parameter. DCNL If the torrent could not be obtained, the callback is not called. DCNL The torrent will have been added to the TorrentDBHandler (if enabled) DCNL at the time of the call. DCNL :param candidate: the designated peer DCNL :param infohash: the infohash of the torrent DCNL :param user_callback: a function adhering to the above spec DCNL :param priority: priority of this request'
'Ask the designated peer to send us the torrent message for the torrent DCNL identified by the passed infohash. If the torrent message is successfully DCNL received, the user_callback method is called with the infohash as first DCNL and the contents of the torrent file (bencoded dict) as second parameter. DCNL If the torrent could not be obtained, the callback is not called. DCNL The torrent will have been added to the TorrentDBHandler (if enabled) DCNL at the time of the call. DCNL :param candidate: the designated peer DCNL :param infohash: the infohash of the torrent DCNL :param user_callback: a function adhering to the above spec DCNL :param priority: priority of this request'
'Checkpoints the downloads.'
'Updates the trackers of a torrent. DCNL :param infohash: infohash of the torrent that needs to be updated DCNL :param trackers: A list of tracker urls'
'Checks if the given torrent infohash exists in the torrent_store database. DCNL :param infohash: The given infohash binary DCNL :return: True or False indicating if we have the torrent'
'Gets the given torrent from the torrent_store database. DCNL :param infohash: the given infohash binary DCNL :return: the torrent data if exists, None otherwise'
'Saves the given torrent into the torrent_store database. DCNL :param infohash: the given infohash binary DCNL :param data: the torrent file data'
'Deletes the given torrent from the torrent_store database. DCNL :param infohash: the given infohash binary'
'Searches for remote torrents through SearchCommunity with the given keywords. DCNL :param keywords: the given keywords DCNL :return: the number of requests made'
'Searches for remote channels through AllChannelCommunity with the given keywords. DCNL :param keywords: the given keywords'
'Creates a torrent file. DCNL :param file_path_list: files to add in torrent file DCNL :param params: optional parameters for torrent file DCNL :return: a Deferred that fires when the torrent file has been created'
'Creates a new Channel. DCNL :param name: name of the Channel DCNL :param description: description of the Channel DCNL :param mode: mode of the Channel (\'open\', \'semi-open\', or \'closed\') DCNL :return: a channel ID DCNL :raises a DuplicateChannelNameError if name already exists'
'Adds a TorrentDef to a Channel. DCNL :param channel_id: id of the Channel to add the Torrent to DCNL :param torrent_def: definition of the Torrent to add DCNL :param extra_info: description of the Torrent to add DCNL :param forward: when True the messages are forwarded (as defined by their message DCNL destination policy) to other nodes in the community. This parameter should (almost always) DCNL be True, its inclusion is mostly to allow certain debugging scenarios'
'Checks the given torrent\'s health on its trackers. DCNL :param infohash: the given torrent infohash DCNL :param timeout: time to wait while performing the request DCNL :param scrape_now: flag to scrape immediately'
'Gets the thumbnail data. DCNL :param thumb_hash: the thumbnail SHA1 hash DCNL :return: the thumbnail data'
'Normal constructor for TorrentDef (The input, metainfo and infohash DCNL parameters are used internally to make this a copy constructor)'
'Load a BT .torrent or Tribler .tribe file from disk and convert DCNL it into a finalized TorrentDef. DCNL @param filename  An absolute Unicode filename DCNL @return TorrentDef'
'Loads a torrent file that is already in memory. DCNL :param data: The torrent file data. DCNL :return: A TorrentDef object.'
'Internal class method that reads a torrent file from stream, DCNL checks it for correctness and sets self.input and self.metainfo DCNL accordingly.'
'Load a BT .torrent or Tribler .tstream file from the URL and DCNL convert it into a TorrentDef. DCNL @param url URL DCNL @return Deferred'
'Load a BT .torrent or Tribler .tribe file from the metainfo dictionary DCNL it into a TorrentDef DCNL @param metainfo A dictionary following the BT torrent file spec. DCNL @return TorrentDef.'
'Add a file or directory to this torrent definition. When adding a DCNL directory, all files in that directory will be added to the torrent. DCNL One can add multiple files and directories to a torrent definition. DCNL In that case the "outpath" parameter must be used to indicate how DCNL the files/dirs should be named in the torrent. The outpaths used must DCNL start with a common prefix which will become the "name" field of the DCNL torrent. DCNL To seed the torrent via the core (as opposed to e.g. HTTP) you will DCNL need to start the download with the dest_dir set to the top-level DCNL directory containing the files and directories to seed. For example, DCNL a file "c:\Videosile.avi" is seeded as follows: DCNL <pre> DCNL tdef = TorrentDef() DCNL tdef.add_content("c:\Videosile.avi",playtime="1:59:20") DCNL tdef.set_tracker(s.get_internal_tracker_url()) DCNL tdef.finalize() DCNL dscfg = DownloadStartupConfig() DCNL dscfg.set_dest_dir("c:\Video") DCNL s.start_download(tdef,dscfg) DCNL </pre> DCNL @param inpath Absolute name of file or directory on local filesystem, DCNL as Unicode string. DCNL @param outpath (optional) Name of the content to use in the torrent def DCNL as Unicode string. DCNL @param playtime (optional) String representing the duration of the DCNL multimedia file when played, in [hh:]mm:ss format.'
'Remove a file or directory from this torrent definition DCNL @param inpath Absolute name of file or directory on local filesystem, DCNL as Unicode string.'
'Set the character encoding for e.g. the \'name\' field'
'Sets the tracker (i.e. the torrent file\'s \'announce\' field). DCNL @param url The announce URL.'
'Returns the announce URL. DCNL @return URL'
'Set hierarchy of trackers (announce-list) following the spec DCNL at http://www.bittorrent.org/beps/bep_0012.html DCNL @param hier A hierarchy of trackers as a list of lists.'
'Returns the hierarchy of trackers. DCNL @return A list of lists.'
'Returns a flat tuple of all known trackers DCNL @return A tuple containing trackers'
'Sets the DHT nodes required by the mainline DHT support, DCNL See http://www.bittorrent.org/beps/bep_0005.html DCNL @param nodes A list of [hostname,port] lists.'
'Returns the DHT nodes set. DCNL @return A list of [hostname,port] lists.'
'Set comment field. DCNL @param value A Unicode string.'
'Returns the comment field of the def. DCNL @return A Unicode string.'
'Returns the comment field of the def as a unicode string. DCNL @return A Unicode string.'
'Set \'created by\' field. DCNL @param value A Unicode string.'
'Returns the \'created by\' field. DCNL @return Unicode string.'
'Set list of HTTP seeds following the BEP 19 spec (GetRight style): DCNL http://www.bittorrent.org/beps/bep_0019.html DCNL @param value A list of URLs.'
'Returns the list of HTTP seeds. DCNL @return A list of URLs.'
'Set list of HTTP seeds following the BEP 17 spec (John Hoffman style): DCNL http://www.bittorrent.org/beps/bep_0017.html DCNL @param value A list of URLs.'
'Returns the list of HTTP seeds. DCNL @return A list of URLs.'
'Set the size of the pieces in which the content is traded. DCNL The piece size must be a multiple of the chunk size, the unit in which DCNL it is transmitted, which is 16K by default (see DCNL DownloadConfig.set_download_slice_size()). The default is automatic DCNL (value 0). DCNL @param value A number of bytes as per the text.'
'Returns the piece size. DCNL @return A number of bytes.'
'Returns the number of pieces. DCNL @return A number of pieces.'
'Returns the pieces'
'Set the initial peers to connect to. DCNL @param value List of (IP,port) tuples'
'Returns the list of initial peers. DCNL @return List of (IP,port) tuples.'
'Create BT torrent file by reading the files added with DCNL add_content() and calculate the torrent file\'s infohash. DCNL Creating the torrent file can take a long time and will be carried out DCNL by the calling thread. The process can be made interruptable by passing DCNL a threading.Event() object via the userabortflag and setting it when DCNL the process should be aborted. The also optional userprogresscallback DCNL will be called by the calling thread periodically, with a progress DCNL percentage as argument. DCNL The userprogresscallback function will be called by the calling thread. DCNL @param userabortflag threading.Event() object DCNL @param userprogresscallback Function accepting a fraction as first DCNL argument.'
'Returns whether the TorrentDef is finalized or not. DCNL @return Boolean.'
'Returns the infohash of the torrent, for non-URL compatible DCNL torrents. Otherwise it returns the swarm identifier (either the root hash DCNL (Merkle torrents) or hash of the live-source authentication key. DCNL @return A string of length 20.'
'Returns the torrent definition as a dictionary that follows the BT DCNL spec for torrent files. DCNL @return dict'
'Returns the info[\'name\'] field as raw string of bytes. DCNL @return String'
'Set the name of this torrent DCNL @param name name of torrent as String'
'Returns the info[\'name\'] field as Unicode string. DCNL @return Unicode string.'
'Finalizes the torrent def and writes a torrent file i.e., bencoded dict DCNL following BT spec) to the specified filename. Note this may take a DCNL long time when the torrent def is not yet finalized. DCNL @param filename An absolute Unicode path name.'
'Finalizes the torrent def and converts the metainfo to string, returns the DCNL number of bytes the string would take on disk.'
'Get a generator for files in the torrent def. No filtering DCNL is possible and all tricks are allowed to obtain a unicode DCNL list of filenames. DCNL @return A unicode filename generator.'
'The list of files in the finalized torrent def. DCNL @param exts (Optional) list of filename extensions (without leading .) DCNL to search for. DCNL @return A list of filenames.'
'Returns the total size of the content in the torrent. If the DCNL optional selectedfiles argument is specified, the method returns DCNL the total size of only those files. DCNL @return A length (long)'
'Returns whether this TorrentDef is a multi-file torrent. DCNL @return Boolean'
'Returns whether this TorrentDef is a private torrent. DCNL @return Boolean'
'The constructor. DCNL :param session:     The tribler session. DCNL :param endpoint:    The endpoint to use. DCNL :param prefix:      The prefix to use. DCNL :param block_size:  Transmission block size. DCNL :param timeout:     Transmission timeout. DCNL :param max_retries: Transmission maximum retries.'
'Initializes the TFTP service. We create a UDP socket and a server session.'
'Shuts down the TFTP service.'
'Downloads a file from a remote host. DCNL :param file_name: The file name of the file to be downloaded. DCNL :param ip:        The IP of the remote host. DCNL :param port:      The port of the remote host. DCNL :param success_callback: The success callback. DCNL :param failure_callback: The failure callback.'
'A scheduled task that checks for timeout.'
'Checks if a session has timed out and tries to retransmit packet if allowed. DCNL :param session: The given session. DCNL :return: True or False indicating if the session has failed.'
'Schedules a task to process callbacks.'
'Process the callbacks'
'The callback function that the thread pool will call when there is incoming data. DCNL :param addr: The (IP, port) address tuple of the sender. DCNL :param data: The data received.'
'Handles a new request. DCNL :param ip:      The IP of the client. DCNL :param port:    The port of the client. DCNL :param packet:  The packet.'
'Loads a thumbnail into memory. DCNL :param thumb_hash: The thumbnail hash.'
'Loads a file into memory. DCNL :param file_name: The file name.'
'Gets the next block of data to be uploaded. This method is only used for data uploading. DCNL :return The data to transfer.'
'processes an incoming packet. DCNL :param packet: The incoming packet dictionary.'
'Processes an incoming packet as a receiver. DCNL :param packet: The incoming packet dictionary.'
'Processes an incoming packet as a sender. DCNL :param packet: The incoming packet dictionary.'
'Handles an error during packet processing. DCNL :param error_code: The error code.'
'Sets the directory where to save this Download. DCNL @param path A path of a directory.'
'Gets the directory where to save this Download.'
'Gets the directory name where to save this torrent'
'Sets the directory name where to save this torrent DCNL @param correctedfilename name for multifile directory'
'Sets the mode of this download. DCNL @param mode DLMODE_NORMAL/DLMODE_VOD'
'Returns the mode of this download. DCNL @return DLMODE_NORMAL/DLMODE_VOD'
'Select which files in the torrent to download. The filenames must DCNL be the names as they appear in the content def, including encoding. DCNL Trivially, when the torrent contains a file \'sjaak.avi\' the files DCNL parameter must be \'sjaak.avi\'. When the content def is a torrent def DCNL and contains multiple files and is named \'filecollection\', the files DCNL parameter must be DCNL os.path.join(\'filecollection\',\'sjaak.avi\') DCNL For a swift def, the files must be following the multi-file spec encoding DCNL (i.e., UTF-8 and /). DCNL @param files Can be a single filename or a list of filenames (e.g. DCNL [\'harry.avi\',\'sjaak.avi\']). Not Unicode strings!'
'Returns the list of files selected for download. DCNL @return A list of strings.'
'Normal constructor for DownloadStartupConfig (copy constructor DCNL used internally)'
'Load a saved DownloadStartupConfig from disk. DCNL @param filename  An absolute Unicode filename DCNL @return DownloadStartupConfig object'
'Save the DownloadStartupConfig to disk. DCNL @param filename  An absolute Unicode filename'
'Create a new TriblerConfig instance. DCNL :param config: a ConfigObj instance DCNL :raises an InvalidConfigException if ConfigObj is invalid'
'Load a TriblerConfig from disk.'
'Return a TriblerConfig object that has the same values.'
'Validate the ConfigObj using Validator. DCNL Note that `validate()` returns `True` if the ConfigObj is correct and a dictionary with `True` and `False` DCNL values for keys who\'s validation failed if at least one key was found to be incorrect.'
'Write the configuration to the config file in the state dir as specified in the config.'
'Get the default application state directory.'
'Fetch a port setting from the config file and in case it\'s set to -1 (random), look for a free port DCNL and assign it to this particular setting.'
'Get a random port which is not already selected.'
'Set the path of the video analyser. DCNL The path set depends on the current platform. DCNL :return:'
'Set which proxy LibTorrent should use (default = 0). DCNL :param proxy_type: int (0 = no proxy server, DCNL 1 = SOCKS4, DCNL 2 = SOCKS5, DCNL 3 = SOCKS5 + auth, DCNL 4 = HTTP, DCNL 5 = HTTP + auth) DCNL :param server: (host, port) tuple or None DCNL :param auth: (username, password) tuple or None'
':param proxy_type: int (0 = no proxy server, DCNL 1 = SOCKS4, DCNL 2 = SOCKS5, DCNL 3 = SOCKS5 + auth, DCNL 4 = HTTP, DCNL 5 = HTTP + auth) DCNL :param server: (host, [ports]) tuple or None DCNL :param auth: (username, password) tuple or None'
'Get the anon proxy settings. DCNL :return: a 4-tuple with the proxytype in int, (ip as string, list of ports in int), auth'
'Set the maximum amount of connections for each download. DCNL By default, this is -1, unlimited. DCNL :param value: int.'
'Returns the maximum amount of connections per download DCNL :return: int.'
'Sets the maximum upload rate (kB / s). DCNL :param value: the new maximum upload rate in kB / s DCNL :return:'
'Gets the maximum upload rate (kB / s). DCNL :return: the maximum upload rate in kB / s'
'Sets the maximum download rate (kB / s). DCNL :param value: the new maximum download rate in kB / s DCNL :return:'
'Gets the maximum download rate (kB / s). DCNL :return: the maximum download rate in kB / s'
'Set source list for a chosen key: boosting_sources, boosting_enabled, boosting_disabled, or archive_sources. DCNL :param source_list: One of boosting_sources, DCNL boosting_enabled, DCNL boosting_disabled, DCNL archive_sources DCNL :param key: the ConfigObj key'
'The policy should be one of DCNL - "random" DCNL - "creation" DCNL - "seederratio" DCNL :param policy: a string DCNL :return:'
'Get the credit mining policy. DCNL :param as_class: whether to return a string or the python class DCNL :return: the policy in string form or the policy class.'
'Internal constructor. DCNL @param download The Download this state belongs too. DCNL @param status The status of the Download (DLSTATUS_*) DCNL @param progress The general progress of the Download. DCNL @param stats The BT engine statistics for the Download. DCNL @param filepieceranges The range of pieces that we are interested in. DCNL The get_pieces_complete() returns only completeness information about DCNL this range. This is used for playing a video in a multi-torrent file. DCNL @param logmsgs A list of messages from the BT engine which may be of'
'Returns the Download object of which this is the state'
'The general progress of the Download as a percentage. When status is DCNL * DLSTATUS_HASHCHECKING it is the percentage of already downloaded DCNL content checked for integrity. DCNL * DLSTATUS_DOWNLOADING/SEEDING it is the percentage downloaded. DCNL @return Progress as a float (0..1).'
'Returns the status of the torrent. DCNL @return DLSTATUS_*'
'Returns the Exception that caused the download to be moved to DCNL DLSTATUS_STOPPED_ON_ERROR status. DCNL @return Exception'
'Returns the current up or download speed. DCNL @return The speed in bytes/s.'
'Returns the total amount of up or downloaded bytes. DCNL @return The amount in bytes.'
'Returns the seedings stats for this download. Will only be availible after DCNL SeedingManager update_download_state is called. DCNL Contains if not null, version, total_up, total_down, time_seeding DCNL All values are stored by the seedingmanager, thus will not only contain current download session values'
'Returns the estimated time to finish of download. DCNL @return The time in ?, as ?.'
'Returns the download\'s number of initiated connections. This is used DCNL to see if there is any progress when non-fatal errors have occured DCNL (e.g. tracker timeout). DCNL @return An integer.'
'Returns the download\'s number of active connections. This is used DCNL to see if there is any progress when non-fatal errors have occured DCNL (e.g. tracker timeout). DCNL @return An integer.'
'Returns the download\'s number of non-seeders. DCNL @return An integer.'
'Returns the sum of the number of seeds and peers. This function DCNL works only if the Download.set_state_callback() / DCNL Session.set_download_states_callback() was called with the getpeerlist DCNL parameter set to True, otherwise returns (None,None) DCNL @return A tuple (num seeds, num peers)'
'Returns a list of booleans indicating whether we have completely DCNL received that piece of the content. The list of pieces for which DCNL we provide this info depends on which files were selected for download DCNL using DownloadStartupConfig.set_selected_files(). DCNL @return A list of booleans'
'Returns the number of total and completed pieces DCNL @return A tuple containing two integers, total and completed nr of pieces'
'Returns a list of filename, progress tuples indicating the progress DCNL for every file selected using set_selected_files. Progress is a float DCNL between 0 and 1'
'Return overall the availability of all pieces, using connected peers DCNL Availability is defined as the number of complete copies of a piece, thus seeders DCNL increment the availability by 1. Leechers provide a subset of piece thus we count the DCNL overall availability of all pieces provided by the connected peers and use the minimum DCNL of this + the average of all additional pieces.'
'Returns the percentage of prebuffering for Video-On-Demand already DCNL completed. DCNL @return A float (0..1)'
'Returns the percentage of consecutive prebuffering for Video-On-Demand already DCNL completed. DCNL @return A float (0..1)'
'Returns if this download is currently in vod mode DCNL @return A Boolean'
'Returns a list of dictionaries, one for each connected peer DCNL containing the statistics for that peer. In particular, the DCNL dictionary contains the keys: DCNL <pre> DCNL \'id\' = PeerID or \'http seed\' DCNL \'extended_version\' = Peer client version, as received during the extend handshake message DCNL \'ip\' = IP address as string or URL of httpseed DCNL \'port\' = Port DCNL \'pex_received\' = True/False DCNL \'optimistic\' = True/False DCNL \'direction\' = \'L\'/\'R\' (outgoing/incoming) DCNL \'uprate\' = Upload rate in KB/s DCNL \'uinterested\' = Upload Interested: True/False DCNL \'uchoked\' = Upload Choked: True/False DCNL \'uhasqueries\' = Upload has requests in buffer and not choked DCNL \'uflushed\' = Upload is not flushed DCNL \'downrate\' = Download rate in KB/s DCNL \'dinterested\' = Download interested: True/Flase DCNL \'dchoked\' = Download choked: True/False DCNL \'snubbed\' = Download snubbed: True/False DCNL \'utotal\' = Total uploaded from peer in KB DCNL \'dtotal\' = Total downloaded from peer in KB DCNL \'completed\' = Fraction of download completed by peer (0-1.0) DCNL -- QUESTION(lipu): swift and Bitfield are gone. Does this \'have\' thing has anything to do with swift? DCNL \'have\' = Bitfield object for this peer if not complete DCNL \'speed\' = The peer\'s current total download speed (estimated) DCNL </pre>'
'Return is xxx filtering is enabled in this client'
'Encode a half block message. DCNL :param message: Message.impl of HalfBlockPayload.impl DCNL :return encoding ready to be sent to the network of the message'
'Decode an incoming half block message. DCNL :param placeholder: DCNL :param offset: Start of the HalfBlock message in the data. DCNL :param data: ByteStream containing the message. DCNL :return: (offset, HalfBlockPayload.impl)'
'Encode a crawl request message. DCNL :param message: Message.impl of CrawlRequestPayload.impl DCNL :return encoding ready to be sent of the network of the message'
'Decode an incoming crawl request message. DCNL :param placeholder: DCNL :param offset: Start of the CrawlRequest message in the data. DCNL :param data: ByteStream containing the message. DCNL :return: (offset, CrawlRequest.impl)'
'Sets up the persistence layer ready for use. DCNL :param working_directory: Path to the working directory DCNL that will contain the the db at working directory/DATABASE_PATH DCNL :param db_name: The name of the database'
'Persist a block DCNL :param block: The data that will be saved.'
'Get a specific block for a given public key DCNL :param public_key: The public_key for which the block has to be found. DCNL :param sequence_number: The specific block to get DCNL :return: the block or None if it is not known'
'Check if a block is existent in the persistence layer. DCNL :param block: the block to check DCNL :return: True if the block exists, else false.'
'Get the latest block for a given public key DCNL :param public_key: The public_key for which the latest block has to be found. DCNL :return: the latest block or None if it is not known'
'Returns database block with the lowest sequence number higher than the block\'s sequence_number DCNL :param block: The block who\'s successor we want to find DCNL :return A block'
'Returns database block with the highest sequence number lower than the block\'s sequence_number DCNL :param block: The block who\'s predecessor we want to find DCNL :return A block'
'Get the block that is linked to the given block DCNL :param block: The block for which to get the linked block DCNL :return: the latest block or None if it is not known'
'Return the first part of a generic sql select query.'
'Return the schema for the database.'
'Return the upgrade script for a specific version. DCNL :param current_version: the version of the script to return.'
'Ensure the proper schema is used by the database. DCNL :param database_version: Current version of the database. DCNL :return:'
'Validates the transaction of this block DCNL :param database: the database to check against DCNL :return: A tuple consisting of a ValidationResult and a list of user string errors'
'Validates this block against what is known in the database DCNL :param database: the database to check against DCNL :return: A tuple consisting of a ValidationResult and a list of user string errors'
'Signs this block with the given key DCNL :param key: the key to sign this block with'
'Create an empty next block. DCNL :param database: the database to use as information source DCNL :param transaction: the transaction to use in this block DCNL :param public_key: the public key to use for this block DCNL :param link: optionally create the block as a linked block to this block DCNL :param link_pk: the public key of the counterparty in this transaction DCNL :return: A newly created block'
'Encode this block for transport DCNL :param signature: False to pack EMPTY_SIG in the signature location, true to pack the signature field DCNL :return: the buffer the data was packed into'
'Unpacks a block from a buffer DCNL :param data: The buffer to unpack from DCNL :param offset: Optionally, the offset at which to start unpacking DCNL :return: The TrustChainBlock that was unpacked from the buffer'
'Prepare a tuple to use for inserting into the database DCNL :return: A database insertable tuple'
'This override allows one to take the dict(<block>) of a block. DCNL :return: generator to iterate over all properties of this block'
'The block does not violate any rules'
'The block does not violate any rules, but there are gaps or no blocks on the previous or next block'
'The block does not violate any rules, but there is a gap or no block on the next block'
'The block does not violate any rules, but there is a gap or no block on the previous block'
'There are no blocks (previous or next) to validate against'
'The block violates at least one validation rule'
'Setup all message that can be received by this community and the super classes. DCNL :return: list of meta messages.'
'Return whether we should sign the block in the passed message. DCNL @param message: the message containing a block we want to sign or not.'
'Returns a Deferred that fires when we receive an introduction response from a given candidate.'
'Returns a Deferred that fires when we receive a signature request with a specific block hash.'
'Create, sign, persist and send a block signed message DCNL :param candidate: The peer with whom you have interacted, as a dispersy candidate DCNL :param transaction: A string describing the interaction in this block DCNL :param linked: The block that the requester is asking us to sign'
'We\'ve received a half block, either because we sent a SIGNED message to some one or we are crawling DCNL :param messages The half block messages'
'Set the callback function for live edge updates. DCNL Passed arguments are: DCNL live_edge_id, [candidates]'
'Reset the live edges counter and current live edge.'
'Enable or disable live edges. DCNL :param value: whether or not to enable live edges DCNL :type value: boolean'
'Get the trust for another member. DCNL Currently this is just the length of their chain. DCNL :param member: the member we interacted with DCNL :type member: dispersy.member.Member DCNL :return: the trust value for this member DCNL :rtype: int'
'Choose a trusted candidate to introduce to someone else. DCNL The more trust you have for someone, the higher the chance is to forward them.'
':param order_book: The order book to search in DCNL :type order_book: OrderBook'
':param order: The order to match against DCNL :type order: Order DCNL :return: The proposed trades DCNL :rtype: [ProposedTrade]'
':param order: The order to match against DCNL :type order: Order DCNL :return: The proposed trades DCNL :rtype: [ProposedTrade]'
'Search through the price levels in the order book DCNL :param price: The price of the price level DCNL :param price_level: The price level to search in DCNL :param quantity_to_trade: The quantity still to be matched DCNL :param order: The order to match for DCNL :type price: Price DCNL :type price_level: PriceLevel DCNL :type quantity_to_trade: Quantity DCNL :type order: Order DCNL :return: The quantity to trade and the proposed trades DCNL :rtype: Quantity, [ProposedTrade]'
'Search through the tick entries in the price levels DCNL :param tick_entry: The tick entry to match against DCNL :param quantity_to_trade: The quantity still to be matched DCNL :param order: The order to match for DCNL :type tick_entry: TickEntry DCNL :type quantity_to_trade: Quantity DCNL :type order: Order DCNL :return: The quantity to trade and the proposed trades DCNL :rtype: Quantity, [ProposedTrade]'
':param matching_strategy: The strategy to use DCNL :type matching_strategy: MatchingStrategy'
':param order: The order to match against DCNL :type order: Order DCNL :return: The proposed trades DCNL :rtype: [ProposedTrade]'
':param order_number: Integer representing the number of an order DCNL :type order_number: int DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':param trader_id: The trader id who created the order DCNL :param order_number: The number of the order created DCNL :type trader_id: TraderId DCNL :type order_number: OrderNumber'
':rtype: TraderId'
':rtype: OrderNumber'
'format: <trader_id>.<order_number>'
':param order_id: An order id to identify the order DCNL :param price: A price to indicate for which amount to sell or buy DCNL :param quantity: A quantity to indicate how much to sell or buy DCNL :param timeout: A timeout when this tick is going to expire DCNL :param timestamp: A timestamp when the order was created DCNL :param is_ask: A bool to indicate if this order is an ask DCNL :type order_id: OrderId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :type timestamp: Timestamp DCNL :type is_ask: bool'
'Create an Order object based on information in the database.'
'Returns a database representation of an Order object. DCNL :rtype: tuple'
':rtype: Dictionary[OrderId: Quantity]'
':rtype: OrderId'
':rtype: Price'
'Return the total quantity of the order DCNL :rtype: Quantity'
'Return the quantity that is not reserved DCNL :rtype: Quantity'
'Return the reserved quantity of the order DCNL :rtype: Quantity'
'Return the traded quantity of the order DCNL :rtype: Quantity'
'Return when the order is going to expire DCNL :rtype: Timeout'
':rtype: Timestamp'
':return: the timestamp of completion of this order, None if this order is not completed (yet). DCNL :rtype: Timestamp'
':return: True if message is an ask, False otherwise DCNL :rtype: bool'
':return: whether the order has been cancelled or not. DCNL :rtype: bool'
':return: True if the order is completed. DCNL :rtype: bool'
'Return the status of this order. Can be one of these: "open", "completed", "expired" or "cancelled" DCNL :return: The status of this order DCNL :rtype: str'
':param order_id: The order id from another peer that the quantity needs to be reserved for DCNL :param quantity: The quantity to reserve DCNL :type order_id: OrderId DCNL :type quantity: Quantity DCNL :return: True if the quantity was reserved, False otherwise DCNL :rtype: bool'
'Release all quantity for a specific tick. DCNL :param order_id: The order id from another peer that the quantity needs to be released for DCNL :type order_id: OrderId DCNL :raises TickWasNotReserved: Thrown when the tick was not reserved first'
':return: True if valid, False otherwise DCNL :rtype: bool'
'Return a dictionary representation of this dictionary.'
':param payment_id: String representation of the id of the payment DCNL :type payment_id: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
'Return the payment id.'
'Don\'t use this class directly, use one of the class methods DCNL :param message_id: A message id to identify the tick DCNL :param order_id: A order id to identify the order this tick represents DCNL :param price: A price to indicate for which amount to sell or buy DCNL :param quantity: A quantity to indicate how much to sell or buy DCNL :param timeout: A timeout when this tick is going to expire DCNL :param timestamp: A timestamp when the tick was created DCNL :param is_ask: A bool to indicate if this tick is an ask DCNL :param public_key: The public key of the originator of this message DCNL :param signature: A signature of this message DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :type timestamp: Timestamp DCNL :type is_ask: bool DCNL :type public_key: str DCNL :type signature: str'
'Create a tick from an order DCNL :param order: The order that this tick represents DCNL :param message_id: The message id for the tick DCNL :return: The created tick DCNL :rtype: Tick'
':rtype: OrderId'
':rtype: Price'
':rtype: Quantity'
':param quantity: The new quantity DCNL :type quantity: Quantity'
'Return when the tick is going to expire DCNL :rtype: Timeout'
':return: True if this tick is an ask, False otherwise DCNL :rtype: bool'
':return: True if valid, False otherwise DCNL :rtype: bool'
'Sign this tick using a private key. DCNL :param member: The member that signs this tick'
'Update the timestamp of this tick and set it to the current time.'
'Return network representation of the tick'
'Return a dictionary with a representation of this tick.'
':param message_id: A message id to identify the ask DCNL :param order_id: A order id to identify the order this tick represents DCNL :param price: A price that needs to be paid for the ask DCNL :param quantity: The quantity that needs to be sold DCNL :param timeout: A timeout for the ask DCNL :param timestamp: A timestamp for when the ask was created DCNL :param public_key: The public key of the originator of this message DCNL :param signature: A signature of this message DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :type timestamp: Timestamp DCNL :type public_key: str DCNL :type signature: str'
'Restore an ask from the network DCNL :param data: OfferPayload DCNL :return: Restored ask DCNL :rtype: Ask'
':param message_id: A message id to identify the bid DCNL :param order_id: A order id to identify the order this tick represents DCNL :param price: A price that you are willing to pay for the bid DCNL :param quantity: The quantity that you want to buy DCNL :param timeout: A timeout for the bid DCNL :param timestamp: A timestamp for when the bid was created DCNL :param public_key: The public key of the originator of this message DCNL :param signature: A signature of this message DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :type timestamp: Timestamp DCNL :type public_key: str DCNL :type signature: str'
'Restore a bid from the network DCNL :param data: OfferPayload DCNL :return: Restored bid DCNL :rtype: Bid'
'Do not use this class directly DCNL Make a subclass of this class with a specific implementation for a storage backend'
':param mid: Hex encoded version of the member id of this node DCNL :type mid: str'
':rtype: [Transaction]'
':param transaction_id: The transaction id to look for DCNL :type transaction_id: TransactionId DCNL :return: The transaction or null if it cannot be found DCNL :rtype: Transaction'
':type transaction: Transaction'
':type transaction: Transaction'
':type transaction_id: TransactionId'
':rtype: TransactionId'
':param mid: Hex encoded version of the member id of this node DCNL :type mid: str'
':rtype: [Transaction]'
':param transaction_id: The transaction id to look for DCNL :type transaction_id: TransactionId DCNL :return: The transaction or null if it cannot be found DCNL :rtype: Transaction'
':param transaction: The transaction to add to the database DCNL :type transaction: Transaction'
':param transaction: The transaction to update DCNL :type transaction: Transaction'
':param transaction_id: The id of the transaction to remove'
':rtype: TransactionId'
':param timeout: Float representation of a timeout DCNL :type timeout: float DCNL :raises ValueError: Thrown when one of the arguments are invalid'
'Return if a timeout has occurred DCNL :param timestamp: A timestamp DCNL :type timestamp: Timestamp DCNL :return: True if timeout has occurred, False otherwise DCNL :rtype: bool'
':param quantity: float representation of a quantity that is positive or zero DCNL :param wallet_id: Identifier of the wallet type of this price DCNL :type quantity: float DCNL :type wallet_id: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':rtype: str'
':rtype: int'
'Create a Payment object based on information in the database.'
'Returns a database representation of a Payment object. DCNL :rtype: tuple'
'Restore a payment from the network DCNL :param data: PaymentPayload DCNL :return: Restored payment DCNL :rtype: Payment'
'Return network representation of the multi chain payment'
':type ask: Ask'
':type order_id: OrderId'
':type bid: Bid'
':type order_id: OrderId'
':type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type quantity: Quantity DCNL :type end_transaction_timestamp: Timestamp'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :return: True if the tick exists, False otherwise DCNL :rtype: bool'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :rtype: TickEntry'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :rtype: TickEntry'
'Return a tick with the specified order id. DCNL :param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :rtype: TickEntry'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :return: True if the ask exists, False otherwise DCNL :rtype: bool'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :return: True if the bid exists, False otherwise DCNL :rtype: bool'
':type order_id: OrderId'
'Return the asks side DCNL :rtype: Side'
'Return the bids side DCNL :rtype: Side'
'Return the price an ask needs to have to make a trade DCNL :rtype: Price'
'Return the price a bid needs to have to make a trade DCNL :rtype: Price'
'Return the spread between the bid and the ask price DCNL :rtype: Price'
'Return the price in between the bid and the ask price DCNL :rtype: Price'
'Return the depth of the price level with the given price on the bid side DCNL :param price: The price for the price level DCNL :type price: Price DCNL :return: The depth at that price level DCNL :rtype: Quantity'
'Return the depth of the price level with the given price on the ask side DCNL :param price: The price for the price level DCNL :type price: Price DCNL :return: The depth at that price level DCNL :rtype: Quantity'
'format: [(<price>, <depth>), (<price>, <depth>), ...] DCNL :return: The depth profile DCNL :rtype: list'
'format: [(<price>, <depth>), (<price>, <depth>), ...] DCNL :return: The depth profile DCNL :rtype: list'
':param price: The price to be relative to DCNL :type price: Price DCNL :return: The relative price DCNL :rtype: Price'
':param price: The price to be relative to DCNL :type price: Price DCNL :return: The relative price DCNL :rtype: Price'
':param tick: The tick with the price to be relative to DCNL :type tick: Tick DCNL :return: The relative price DCNL :rtype: Price'
'Return the price level that an ask has to match to make a trade DCNL :rtype: PriceLevel'
'Return the price level that a bid has to match to make a trade DCNL :rtype: PriceLevel'
'Return all IDs of the orders in the orderbook, both asks and bids. The returned list is sorted. DCNL :rtype: [OrderId]'
'Write all ticks to the database'
'Restore ticks from the database'
':param ttl: Integer representation of a time to live DCNL :type ttl: int DCNL :raises ValueError: Thrown when one of the arguments are invalid'
'Create a time to live with the default value DCNL :return: The ttl DCNL :rtype: Ttl'
'Check if the ttl is still hig enough to be send on DCNL :return: True if it is alive, False otherwise DCNL :rtype: bool'
'Makes a hop by reducing the ttl by 1, to simulate the message being relayed through a node'
':rtype: TickEntry'
'Return the length of the amount of ticks contained in the price level DCNL :rtype: integer'
'The depth is equal to the total amount of volume contained in this price level DCNL :rtype: Quantity'
':param new_depth: The new depth DCNL :type new_depth: Quantity'
'Return the length of the amount of ticks contained in the price level'
'Return the next tick in the price level for the iterator'
':type tick: TickEntry'
':type tick: TickEntry'
':type transaction_repository: TransactionRepository'
':type proposed_trade: ProposedTrade DCNL :rtype: Transaction'
':type start_transaction: StartTransaction DCNL :rtype: Transaction'
':param transaction_id: The transaction id to look for DCNL :type transaction_id: TransactionId DCNL :return: The transaction or null if it cannot be found DCNL :rtype: Transaction'
':rtype: [Transaction]'
':type transaction_number: int DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':param trader_id: The trader id who created the order DCNL :param transaction_number: The number of the transaction created DCNL :type trader_id: TraderId DCNL :type transaction_number: TransactionNumber'
':rtype: TraderId'
':rtype: TransactionNumber'
'format: <trader_id>.<transaction_number>'
':param transaction_id: An transaction id to identify the order DCNL :param price: A price to indicate for which amount to sell or buy DCNL :param quantity: A quantity to indicate how much to sell or buy DCNL :param order_id: The id of your order for this transaction DCNL :param partner_order_id: The id of the order of the other party DCNL :param timestamp: A timestamp when the transaction was created DCNL :type transaction_id: TransactionId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type order_id: OrderId DCNL :type partner_order_id: OrderId DCNL :type timestamp: Timestamp'
'Create a Transaction object based on information in the database.'
'Returns a database representation of a Transaction object. DCNL :rtype: tuple'
':param proposed_trade: The proposed trade to create the transaction for DCNL :param transaction_id: The transaction id to use for this transaction DCNL :type proposed_trade: ProposedTrade DCNL :type transaction_id: TransactionId DCNL :return: The created transaction DCNL :rtype: Transaction'
':rtype: TransactionId'
':rtype: Price'
':rtype: Price'
':rtype: Price'
':rtype: Quantity'
':rtype: Quantity'
'Return the id of your order DCNL :rtype: OrderId'
':rtype: OrderId'
':rtype: [Payment]'
':rtype: Timestamp'
'Return the status of this transaction, can be one of these: "pending", "completed", "error". DCNL :rtype: str'
'Return an a amount that is a multiple of min_unit.'
'Return a dictionary with a representation of this transaction.'
':param message_id: A message id to identify the message DCNL :param transaction_id: A transaction id to identify the transaction DCNL :param order_id: My order id DCNL :param recipient_order_id: The order id of the recipient of this message DCNL :param proposal_id: The proposal ID associated with this start transaction message DCNL :param price: A price for the trade DCNL :param quantity: A quantity to be traded DCNL :param timestamp: A timestamp when the transaction was created DCNL :type message_id: MessageId DCNL :type transaction_id: TransactionId DCNL :type proposal_id: int DCNL :type order_id: OrderId DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timestamp: Timestamp'
':rtype: TransactionId'
':rtype: OrderId'
':rtype: OrderId'
':return: The proposal id DCNL :rtype: int'
':return: The price DCNL :rtype: Price'
':return: The quantity DCNL :rtype: Quantity'
'Restore a start transaction message from the network DCNL :param data: StartTransactionPayload DCNL :return: Restored start transaction DCNL :rtype: StartTransaction'
'Return network representation of the start transaction message'
'Don\'t use this method directly, use one of the class methods. DCNL :param message_id: A message id to identify the trade DCNL :param order_id: A order id to identify the order DCNL :param recipient_order_id: A order id to identify the traded party DCNL :param proposal_id: The ID of the trade proposal DCNL :param timestamp: A timestamp wen this trade was created DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type proposal_id: int DCNL :type timestamp: Timestamp'
'Propose a trade to another node DCNL :param message_id: A message id to identify the trade DCNL :param order_id: A order id to identify the order DCNL :param recipient_order_id: A order id to identify the traded party DCNL :param price: A price for the trade DCNL :param quantity: A quantity to be traded DCNL :param timestamp: A timestamp wen this trade was created DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type timestamp: Timestamp DCNL :return: A proposed trade DCNL :rtype: ProposedTrade'
'Decline a trade from another node DCNL :param message_id: A message id to identify the trade DCNL :param timestamp: A timestamp when the trade was declined DCNL :param proposed_trade: A proposed trade that needs to be declined DCNL :type message_id: MessageId DCNL :type timestamp: Timestamp DCNL :type proposed_trade: ProposedTrade DCNL :return: A declined trade DCNL :rtype: DeclinedTrade'
'Counter a trade from another node DCNL :param message_id: A message id to identify the trade DCNL :param quantity: The quantity to use for the counter offer DCNL :param timestamp: A timestamp when the trade was countered DCNL :param proposed_trade: A proposed trade that needs to be countered DCNL :type message_id: MessageId DCNL :type quantity: Quantity DCNL :type timestamp: Timestamp DCNL :type proposed_trade: ProposedTrade DCNL :return: A counter trade DCNL :rtype: CounterTrade'
':return: The order id DCNL :rtype: OrderId'
':return: The order id DCNL :rtype: OrderId'
':return: The proposal id DCNL :rtype: int'
'Don\'t use this method directly, use the class methods from Trade or use the from_network DCNL :param message_id: A message id to identify the trade DCNL :param order_id: A order id to identify the order DCNL :param recipient_order_id: A order id to identify the traded party DCNL :param proposal_id: The ID of the trade proposal DCNL :param price: A price for the trade DCNL :param quantity: A quantity to be traded DCNL :param timestamp: A timestamp wen this trade was created DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type proposal_id: int DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timestamp: Timestamp'
'Restore a proposed trade from the network DCNL :param data: TradePayload DCNL :return: Restored proposed trade DCNL :rtype: ProposedTrade'
':return: The price DCNL :rtype: Price'
':return: The quantity DCNL :rtype: Quantity'
'Return whether this trade proposal has an acceptable price. DCNL :rtype: bool'
'Return network representation of a proposed trade'
'Don\'t use this method directly, use one of the class methods of Trade or use from_network DCNL :param message_id: A message id to identify the trade DCNL :param order_id: A order id to identify the order DCNL :param recipient_order_id: A order id to identify the traded party DCNL :param proposal_id: The ID of the trade proposal DCNL :param price: A price for the trade DCNL :param quantity: A quantity to be traded DCNL :param timestamp: A timestamp wen this trade was created DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type proposal_id: int DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timestamp: Timestamp'
'Restore a counter trade from the network DCNL :param data: TradePayload DCNL :return: Restored counter trade DCNL :rtype: CounterTrade'
'Return network representation of a counter trade'
'Don\'t use this method directly, use one of the class methods from Trade or the from_network DCNL :param message_id: A message id to identify the trade DCNL :param order_id: A order id to identify the order DCNL :param recipient_order_id: A order id to identify the order DCNL :param proposal_id: The ID of the trade proposal DCNL :param timestamp: A timestamp wen this trade was created DCNL :type message_id: MessageId DCNL :type order_id: OrderId DCNL :type recipient_order_id: OrderId DCNL :type proposal_id: int DCNL :type timestamp: Timestamp'
'Restore a declined trade from the network DCNL :param data: DeclinedTradePayload DCNL :return: Restored declined trade DCNL :rtype: DeclinedTrade'
'Return network representation of a declined trade'
':param ip: String representation of an ipv4 address DCNL :type ip: str DCNL :param port: Integer representation of a port DCNL :type port: int DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':return: The ip DCNL :rtype: str'
':return: The port DCNL :rtype: int'
':param price: Integer representation of a price that is positive or zero DCNL :param wallet_id: Identifier of the wallet type of this price DCNL :type price: float DCNL :type wallet_id: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':rtype: str'
':rtype: int'
':param timestamp: Float representation of a timestamp DCNL :type timestamp: float DCNL :raises ValueError: Thrown when one of the arguments are invalid'
'Create a timestamp with the time set to the current time DCNL :return: A timestamp DCNL :rtype: Timestamp'
'Return the length of the amount of ticks contained in all the price level of this side'
'Return the price level corresponding to the given price DCNL :param price: The price for which the price level needs to be returned DCNL :type price: Price DCNL :return: The price level DCNL :rtype: PriceLevel'
':param order_id: The order id of the tick DCNL :type order_id: OrderId DCNL :return: The tick DCNL :rtype: TickEntry'
':param price: The price to create the level for DCNL :param quantity_wallet_id: the id of the quantities stored in this price level DCNL :type price: Price DCNL :type quantity_wallet_id: str'
':param price: The price to remove the level for DCNL :param quantity_wallet_id: the id of the quantities stored in this price level DCNL :type price: Price DCNL :type quantity_wallet_id: str'
':param price: The price to check for DCNL :type price: Price DCNL :return: True if the price level exists, False otherwise DCNL :rtype: bool'
':param order_id: The order id to search for DCNL :type order_id: OrderId DCNL :return: True if the tick exists, False otherwise DCNL :rtype: bool'
':param tick: The tick to insert DCNL :type tick: Tick'
':param order_id: The order id of the tick that needs to be removed DCNL :type order_id: OrderId'
':return: PriceLevelList'
'Returns the combinations (price wallet id, quantity wallet id) available in the side.'
'Return the maximum price that a tick is listed for on this side of the order book DCNL :rtype: Price'
'Return the minimum price that a tick is listed for on this side of the order book DCNL :rtype: Price'
'Return the price level for the maximum price DCNL :rtype: PriceLevel'
'Return the price level for the minimum price DCNL :rtype: PriceLevel'
'Return a list describing all ticks in this side. DCNL :rtype: list'
':type order_repository: OrderRepository'
'Create an ask order (sell order) DCNL :param price: The price for the order DCNL :param quantity: The quantity of the order DCNL :param timeout: The timeout of the order, when does the order need to be timed out DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :return: The order that is created DCNL :rtype: Order'
'Create a bid order (buy order) DCNL :param price: The price for the order DCNL :param quantity: The quantity of the order DCNL :param timeout: The timeout of the order, when does the order need to be timed out DCNL :type price: Price DCNL :type quantity: Quantity DCNL :type timeout: Timeout DCNL :return: The order that is created DCNL :rtype: Order'
'Cancel an order that was created by the user. DCNL :return: The order that is created DCNL :rtype: Order'
':param trader_id: String representing the trader id DCNL :type trader_id: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':param message_number: String representing the number of a message DCNL :type message_number: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
':param trader_id: The trader id who created the message DCNL :param message_number: The number of the message created DCNL :type trader_id: TraderId DCNL :type message_number: MessageNumber'
':rtype: TraderId'
':rtype: MessageNumber'
'format: <trader_id>.<message_number> DCNL :rtype: str'
'Don\'t use this class directly, use on of its implementations DCNL :param message_id: A message id to identify the message DCNL :param timestamp: A timestamp when the message was created DCNL :type message_id: MessageId DCNL :type timestamp: Timestamp'
':rtype: MessageId'
':rtype: Timestamp'
':param wallet_address: String representation of a wallet address DCNL :type wallet_address: str DCNL :raises ValueError: Thrown when one of the arguments are invalid'
'Do not use this class directly DCNL Make a subclass of this class with a specific implementation for a storage backend'
':param mid: Hex encoded version of the member id of this node DCNL :type mid: str'
':rtype: [Order]'
':param order_id: The order id to look for DCNL :type order_id: OrderId DCNL :return: The order or null if it cannot be found DCNL :rtype: Order'
':type order: Order'
':type order: Order'
':type order_id: OrderId'
':rtype: OrderId'
':param mid: Hex encoded version of the member id of this node DCNL :type mid: str'
':rtype: [Order]'
':param order_id: The order id to look for DCNL :type order_id: OrderId DCNL :return: The order or null if it cannot be found DCNL :rtype: Order'
':param order: The order to add to the database DCNL :type order: Order'
':param order: The order to update DCNL :type order: Order'
':param order_id: The id of the order to remove'
':rtype OrderId'
':param tick: A tick to represent in the order book DCNL :param price_level: A price level to place the tick in DCNL :type tick: Tick DCNL :type price_level: PriceLevel'
':rtype: Tick'
':rtype: OrderId'
':rtype: Price'
':rtype: Quantity'
':param new_quantity: The new quantity DCNL :type new_quantity: Quantity'
'Return if the tick is still valid DCNL :return: True if valid, False otherwise DCNL :rtype: bool'
':return: The price level the tick was placed in DCNL :rtype: PriceLevel'
':rtype: TickEntry'
':param new_prev_tick: The new previous tick DCNL :type new_prev_tick: TickEntry'
':rtype: TickEntry'
':param new_next_tick: The new previous tick DCNL :type new_next_tick: TickEntry'
'format: <quantity>      @       <price> DCNL :rtype: str'
':type price: Price DCNL :type price_level: PriceLevel'
':type price: Price'
'Returns (price, price_level) pair where price is successor to given price DCNL :type price: Price DCNL :rtype: (Price, PriceLevel)'
'Returns (price, price_level) pair where price is predecessor to given price DCNL :type price: Price DCNL :rtype: (Price, PriceLevel)'
'Return the lowest price in the price level list DCNL :rtype: Price'
'Return the highest price in the price level list DCNL :rtype: Price'
'Returns a sorted list of price, price_level tuples DCNL :param reverse: When true returns the reversed sorted list of price, price_level tuples DCNL :type reverse: bool DCNL :rtype: List[(Price, PriceLevel)]'
'Returns a list describing all ticks. DCNL :return: list'
':param mid: Hex encoded version of the member id of this node DCNL :type mid: str'
':rtype: MessageId'
'Sets up the persistence layer ready for use. DCNL :param working_directory: Path to the working directory DCNL that will contain the the db at working directory/DATABASE_PATH DCNL :return:'
'Return all orders in the database.'
'Return an order with a specific id.'
'Add a specific order to the database'
'Delete a specific order from the database'
'Return the next order number from the database'
'Delete all reserved ticks from a specific order'
'Add a reserved tick to the database'
'Get all reserved ticks for a specific order.'
'Return all transactions in the database.'
'Return a transaction with a specific id.'
'Add a specific transaction to the database'
'Delete a specific transaction from the database'
'Return the next transaction number from the database'
'Add a specific transaction to the database'
'Return all payment tied to a specific transaction.'
'Delete all payments that are associated with a specific transaction'
'Add a specific tick to the database'
'Remove all ticks from the database.'
'Get all ticks present in the database.'
'Ensure the proper schema is used by the database. DCNL :param database_version: Current version of the database. DCNL :return:'
'Return the IDs of all wallets in the market community.'
'Returns the address of the Dispersy instance. This method is here to make the experiments on the DAS5 succeed; DCNL direct messaging is not possible there with a wan address so we are using the local address instead.'
'Returns the address of the wallet with a specific identifier. Raises a ValueError if that wallet is not DCNL available.'
'Return a tuple of incoming and outgoing payment address of an order.'
'Try to find a match for a specific order and send proposed trade messages if there is a match DCNL :param order: The order to match'
'Lookup the ip for the public key to send a message to a specific node DCNL :param trader_id: The public key of the node to send to DCNL :type trader_id: TraderId DCNL :return: The ip and port tuple: (<ip>, <port>) DCNL :rtype: tuple'
'Update the public key to ip mapping DCNL :param trader_id: The public key of the node DCNL :param ip: The ip and port of the node DCNL :type trader_id: TraderId DCNL :type ip: tuple'
'Create an ask order (sell order) DCNL :param price: The price for the order in btc DCNL :param price_wallet_id: The type of the price (i.e. EUR, BTC) DCNL :param quantity: The quantity of the order DCNL :param price_wallet_id: The type of the price (i.e. EUR, BTC) DCNL :param timeout: The timeout of the order, when does the order need to be timed out DCNL :type price: float DCNL :type price_wallet_id: str DCNL :type quantity: float DCNL :type quantity_wallet_id: str DCNL :type timeout: float DCNL :return: The created order DCNL :rtype: Order'
'Send a tick message DCNL :param tick: The message to send DCNL :type tick: Tick'
'Create an ask order (sell order) DCNL :param price: The price for the order in btc DCNL :param price_wallet_id: The type of the price (i.e. EUR, BTC) DCNL :param quantity: The quantity of the order DCNL :param price_wallet_id: The type of the price (i.e. EUR, BTC) DCNL :param timeout: The timeout of the order, when does the order need to be timed out DCNL :type price: float DCNL :type price_wallet_id: str DCNL :type quantity: float DCNL :type quantity_wallet_id: str DCNL :type timeout: float DCNL :return: The created order DCNL :rtype: Order'
'Send a cancel-order message to the community'
'Send an offer sync message DCNL :param target_candidate: The candidate to send this message to DCNL :type: target_candidate: WalkCandidate DCNL :param tick: The tick to send DCNL :type tick: Tick'
'Update your tick in the order book according to a specific transaction. DCNL Afterwards, send the updated tick.'
'Abort a specific transaction by releasing all reserved quantity for this order.'
'Compute the reputation of peers in the community'
'Monitor an incoming transaction with a specific id.'
'Monitor an incoming transaction with a specific ID.'
'Generate a random transaction ID'
'Return the daemon that can be used to send JSON RPC commands to. This method is here so we can unit test DCNL this class.'
'Create a new bitcoin wallet.'
'Return the balance of the wallet.'
'Monitor a given transaction ID. Returns a Deferred that fires when the transaction is present.'
'Compute the reputation based on the data in the TradeChain database.'
'Compute the reputation based on the data in the TradeChain database using the PageRank algorithm.'
'Return all blocks in the database.'
'Return the upgrade script for a specific version. DCNL :param current_version: the version of the script to return.'
'Only sign the block if we have a (completed) transaction in the market community with the specific txid.'
'Instantiate a new Circuit data structure DCNL :type proxy: TunnelCommunity DCNL :param long circuit_id: the id of the candidate circuit DCNL :param (str, int) first_hop: the first hop of the circuit DCNL :return: Circuit'
'Return a read only tuple version of the hop-list of this circuit DCNL @rtype tuple[Hop]'
'Adds a hop to the circuits hop collection DCNL @param Hop hop: the hop to add'
'The circuit state, can be either: DCNL CIRCUIT_STATE_BROKEN, CIRCUIT_STATE_EXTENDING or CIRCUIT_STATE_READY DCNL @rtype: str'
'Mark the circuit as active'
'Convenience method to tunnel data over this circuit DCNL @param (str, int) destination: the destination of the packet DCNL @param str payload: the packet\'s payload'
'Destroys the circuit and calls the error callback of the circuit\'s DCNL deferred if it has not been called before DCNL @param str reason: the reason why the circuit is being destroyed'
'@param None|LibNaCLPK public_key: public key object of the hop'
'The hop\'s hostname'
'The hop\'s port'
'The hop\'s nodeid'
'The hop\'s public_key'
'@type sock_addr: (str, int) DCNL @type circuit_id: int DCNL @return:'
'The destination address as a tuple DCNL @rtype: (str, int)'
'The destination address as a tuple DCNL @rtype: (str, int)'
'Try to read a HANDSHAKE request DCNL :return: False if command could not been processes due to lack of bytes, True otherwise'
'Try to consume a REQUEST message and respond whether we will accept the DCNL request. DCNL Will setup a TCP relay or an UDP socket to accommodate TCP RELAY and DCNL UDP ASSOCIATE requests. After a TCP relay is set up the handler will DCNL deactivate itself and change the Connection to a TcpRelayConnection. DCNL Further data will be passed on to that handler. DCNL :return: False if command could not been processes due to lack of bytes, True otherwise'
'Deny SOCKS5 request DCNL @param Request request: the request to deny'
'When a circuit breaks and it affects our operation we should re-add the DCNL peers when a new circuit is available DCNL @param Circuit broken_circuit: the circuit that has been broken DCNL @return Set with destinations using this circuit'
'Closes the UDP socket if enabled and cancels all pending deferreds. DCNL :return: A deferred that fires once the UDP socket has closed.'
'This method is called when a download is removed. We check here whether we can stop building circuits for a DCNL specific number of hops in case it hasn\'t been finished yet.'
'Create an unmanaged Candidate for a tunnel mechanism with a certain address DCNL This avoids candidates being disassociated while they are being used in notifications. DCNL :param tunnel: the tunnel object being used DCNL :type tunnel: Circuit or RelayRoute or TunnelExitSocket DCNL :param sock_addr: the socket address of the candidate DCNL :type sock_addr: tuple DCNL :return: the immutable Candidate object DCNL :rtype: Candidate'
'Returns the number of people you interacted with (either helped or that have helped you) DCNL :param public_key: The public key of the member of which we want the information DCNL :return: A tuple of unique number of interactors that helped you and that you have helped respectively'
'Return the upgrade script for a specific version. DCNL :param current_version: the version of the script to return.'
'Create an empty next block. DCNL :param database: the database to use as information source DCNL :param transaction: the transaction to use in this block DCNL :param public_key: the public key to use for this block DCNL :param link: optionally create the block as a linked block to this block DCNL :param link_pk: the public key of the counterparty in this transaction DCNL :return: A newly created block'
'Validates this transaction DCNL :param transaction the transaction to validate DCNL :param database: the database to check against DCNL :return: A tuple consisting of a ValidationResult and a list of user string errors'
'We received a payment message originating from the market community. We set pending bytes so the validator DCNL passes when we receive the half block from the counterparty. DCNL Note that it might also be possible that the half block has been received already. That\'s why we revalidate DCNL the invalid messages again.'
'Return whether we should sign the block in the passed message. DCNL @param message: the message containing a block we want to sign or not.'
'Returns a dictionary with some statistics regarding the local trustchain database DCNL :returns a dictionary with statistics'
'Handler for the remove event of a tunnel. This function will attempt to create a block for the amounts that DCNL were transferred using the tunnel. DCNL :param subject: Category of the notifier event DCNL :param change_type: Type of the notifier event DCNL :param tunnel: The tunnel that was removed (closed) DCNL :param candidate: The dispersy candidate with whom this node has interacted in the tunnel'
'Get the trust for another member. DCNL Currently this is just the amount of MBs exchanged with them. DCNL :param member: the member we interacted with DCNL :type member: dispersy.member.Member DCNL :return: the trust value for this member DCNL :rtype: int'
'Test adding to pending bytes'
'Test cleaning of pending bytes'
'Test the on_tunnel_remove handler function for a circuit'
'Test the on_tunnel_remove handler function for a circuit'
'Test the on_tunnel_remove handler function for a circuit'
'Test the community to receive a request message.'
'Test the community to receive a request message twice.'
'Test the community to receive a request that claims more than we are prepared to sign'
'Test the community to receive a request that claims about a peer we know nothing about'
'If a block is created between two nodes both DCNL should have the correct total_up and total_down of the signature request.'
'After a request is sent, a node should update its totals.'
'Test the crawler takes a step when an introduction is made by the walker'
'Test the get_statistics method where last block is none'
'Test the get_statistics method where a last block exists'
'Test the get_statistics method where a last block exists'
'Test that the trust nodes have for each other is the upload + the download total of all blocks.'
'Test that the trust between nodes without blocks is 1.'
'Test whether the right number of interactors is returned'
'Test the community to send a signature request message.'
'Test the sign_block function with a missing member'
'Test the community to publish a signature request message.'
'Test the community to receive a signature request and a signature response message.'
'Test that a crawl is requested if the signer cannot validate the previous hash of a request'
'Test that a crawl is not send multiple times when a crawl is already happening as a result of an incoming block'
'Test that a crawl is requested and serviced if the signer cannot validate the previous hash of a request'
'Test the crawler to request the latest block.'
'Test the crawler to fetch a block with a specified sequence number.'
'Test the crawler to fetch blocks starting from a negative sequence number.'
'Test crawl without a block.'
'Test the crawler to request a known block.'
'Test the crawler for fetching multiple blocks in one crawl.'
'Test that the trust nodes have for each other is the sum of the length of both chains.'
'Test that the trust between nodes without blocks is 1.'
'A node without trust for anyone should still find a candidate.'
'Live edges should never include invalid/old candidates.'
'Test live edges start with my member.'
'Test creation and handling of a new live edge.'
'Test the waiting for an introduction candidate'
'Test the waiting for a signature request'
'Function to assertEqual two blocks'
'Test encoding of a signed message'
'Test if a responder can send a signature message with big total_up and down.'
'Test decoding a signature message with wrong size'
'Test if a requester can send a crawl request message.'
'Test if a DropPacket is raised when the crawl request size is wrong.'
'Test if the block can save very large numbers.'
'Test whether a block is correctly represented when converted to a dictionary'
'Test whether the should_sign method return False when there is no market community'
'Test whether the right methods are called when tunneling data over a circuit'
'Test the creation of an introduction point with an unexisting download'
'Testing whether an anonymous download over our tunnels works'
'Testing whether an anon download does not make progress without exit nodes'
'Testing whether an anon download does not make progress without relay nodes'
'This mocked method simply adds a peer to the DHT dictionary and invokes the callback.'
'Setup the hidden seeder. This includes setting the right circuit parameters, creating the download callback and DCNL waiting for the creation of an introduction point for the download.'
'Testing the hidden services'
'Testing whether the TunnelCommunity does not reload itself after unloading'
'Testing whether we do not load two different tunnel communities in the same session'
'Setup various variables and load the tunnel community in the main downloader session.'
'Setup all required nodes, including the relays, exit nodes and seeder.'
'Load the tunnel community in a given session. We are using our own tunnel community here instead of the one DCNL used in Tribler.'
'Create a single proxy and load the tunnel community in the session of that proxy.'
'Setup the seeder.'
'The callback of the seeder download. For now, this only logs the state of the download that\'s seeder and is DCNL useful for debugging purposes.'
'Start an anonymous download in the main Tribler session.'
'Test the decoding process of a request'
'Test whether UDP ASSOCIATE requests are answered with a REP_SUCCEEDED'
'When a Socks5Connection connection is closed twice, it should just DCNL return True'
'When a SocksUDPConnection connection is closed twice, it should just DCNL return True'
'When on_data receives an invalid encryption, crypto_in() should throw a CryptoException.'
'Notifications of NTFY_TUNNEL NTFY_REMOVE should report candidates with valid member associations'
'Notifications of NTFY_TUNNEL NTFY_REMOVE should report candidates even though they are no longer tracked DCNL The notification should still have a valid Candidate object for the reference of third parties. DCNL For example, Dispersy might determine a Candidate is no longer needed for the TunnelCommunity, but the DCNL TrustChainCommunity will still be interested in the Candidate object tied to a removed circuit.'
'Notifications of NTFY_TUNNEL NTFY_REMOVE should report candidates even though they are no longer tracked DCNL The notification should still have a valid Candidate object for the reference of third parties. DCNL For example, Dispersy might determine a Candidate is no longer needed for the TunnelCommunity, but the DCNL TrustChainCommunity will still be interested in the Candidate object tied to a removed circuit.'
'test whether a full transaction will be executed between two nodes.'
'Test whether the order book of two nodes are being synchronized'
'Test whether a trade is made between two nodes'
'Test whether a counter trade is made between two nodes'
'Test whether a decline trade is sent between nodes if the price of a proposed trade is not right'
'Test whether a cancel-order message is sent between nodes if we cancel an order'
'Setup various variables.'
'Load the market community and tradechain community in a given session.'
'Load a custom instance of the TriblerChain community in a given session.'
'Create a single session and load the tunnel community in the session of that proxy.'
'Test signing a tick'
'Test the update_timestamp method of a Tick object'
'Test the to dictionary method of a tick'
'Test whether two ticks with different price types are not matched'
'Test whether two ticks with different quantity types are not matched'
'Test partial matching of a bid order with the matching engine'
'Test partial matching of an ask order with the matching engine'
'Test searching within a price level'
'Test the initialization of a quantity'
'Test retrieval of the master members of the Market community'
'Test the timeout method of a proposed trade request in the cache'
'Test creation of an offer in the community'
'Test the general check of the validity of a message in the market community'
'Test the general check of the validity of a tick message in the market community'
'Test the general check of the validity of a trade message in the market community'
'Test sending an offer sync'
'Test sending a proposed trade'
'Test sending a counter trade'
'Test the start transaction method'
'Test the creation of an introduction request'
'Test that when we receive an intro request with a orders bloom filter, we send an order sync back'
'Test the retrieval of a wallet address'
'Test whether a tick is inserted in the order book when we receive one'
'Test whether we accept a trade when we receive a correct proposed trade message'
'Test whether we decline a trade when we receive an invalid proposed trade message'
'Test whether we send a counter trade when we receive a proposed trade message'
'Test whether the right operations happen when we receive an offer sync'
'Test the compute_reputation method'
'Test aborting a transaction'
'Test the initialization of a price'
'Test the add trade method of an order'
'Test the status of an order'
'Test the base compute method of the reputation manager'
'Test the price level lists of wallets of a side'
'Testing the list representation of a side'
'Test the market intro payload'
'Test the start transaction payload'
'Test the payment payload'
'Test the wallet info payload'
'Test the dictionary representation of a payment'
'Test the initialization of a quantity'
'Test the string representation of a payment id'
'Test equality between payment ids'
'Test the hash creation of a payment id'
'Test the timeout functions of asks/bids'
'Test the retrieval of a tick from the order book'
'Test whether we get an error when we add an invalid ask to the order book'
'Test whether we get an error when we add an invalid bid to the order book'
'Test the trade tick method in an order book'
'Test the get order IDs function in order book'
'Test whether ticks from the order book are correctly saved to the database'
'Test whether ticks from the database are correctly restored to the order book'
'Test the creating, opening, transactions and balance query of a Bitcoin wallet'
'Test the name of a Bitcoin wallet'
'Test the identifier of a Bitcoin wallet'
'Test the address of a Bitcoin wallet'
'Test the mininum unit of a Bitcoin wallet'
'Test the retrieval of the balance of a BTC wallet that is not created yet'
'Test that the transfer method of a BTC wallet raises an error when we don\'t have enough funds'
'Test that the transfer method of a BTC wallet'
'Test that the transfer method of a BTC wallet'
'Test the identifier of the Trustchain wallet'
'Test the identifier of a Trustchain wallet'
'Test the balance retrieval of a Trustchain wallet'
'Test whether creating a Trustchain wallet raises an error'
'Test the transfer method of a Trustchain wallet'
'Test the transfer method of a Trustchain wallet with a missing member'
'Test the monitoring of a transaction in a Trustchain wallet'
'Test the address of a Trustchain wallet'
'Test the retrieval of transactions of a dummy wallet'
'Test the minimum unit of a Trustchain wallet'
'Test waiting for an introduction candidate in the TrustChain wallet'
'Test the identifier of a dummy wallet'
'Test the name of a dummy wallet'
'Test the creation of a dummy wallet'
'Test fetching the balance of a dummy wallet'
'Test the transfer of money from a dummy wallet'
'Test whether transferring a too large amount of money from a dummy wallet raises an error'
'Test the monitor loop of a transaction wallet'
'Test an instant the monitor loop of a transaction wallet'
'Test the address of a dummy wallet'
'Test the retrieval of transactions of a dummy wallet'
'Test the minimum unit of a dummy wallet'
'Test the generation of a random transaction id'
'Test the unitize method of a Transaction'
'Test the addition of a payment to a transaction'
'Test the retrieval of the last payment'
'Test the process of determining the next payment details during a transaction'
'Test the to dictionary method of a transaction'
'Test the status of a transaction'
'Test the conversion of a StartTransaction object to the network'
'Return a placeholder message with a specific meta name'
'Test decoding of a payload'
'Test encoding and decoding of an introduction request'
'Test encoding and decoding of an offer'
'Test encoding and decoding of a cancel order'
'Test encoding and decoding of an offer sync'
'Test encoding and decoding of an declined trade'
'Test encoding and decoding of a start transaction message'
'Test encoding and decoding of a transaction message'
'Test encoding and decoding of wallet info'
'Test encoding and decoding of a payment'
'Test the initialization of the database order repository'
'Test the insertion and retrieval of an order in the database'
'Test the retrieval of a specific order'
'Test the deletion of an order from the database'
'Test the retrieval of the next order number from the database'
'Test the retrieval, addition and deletion of reserved ticks in the database'
'Test the insertion and retrieval of a transaction in the database'
'Test the retrieval of a specific transaction'
'Test the deletion of a transaction from the database'
'Test the retrieval of the next transaction number from the database'
'Test the insertion and retrieval of a payment in the database'
'Test addition, retrieval and deletion of ticks in the database'
'Test the addition and retrieval of a trader identity in the database'
'Test the check of the database'
'Setup a second peer that contains some search results.'
'Test whether we receive results when searching remotely for torrents'
'Test whether we receive results when searching remotely for channels'
'Test whether we are creating a search response when we receive a search request'
'Test whether decoding an invalid search response does not crash the program'
'Test the creation of a torrent in the search community'
'Testing whether the right methods are called when a torrent is removed from a playlist'
'Testing whether a correct Dispersy message is created when we add a torrent to our channel'
'Test the encoding of a torrent file'
'Test the decoding of a torrent message'
'Testing whether a votecast can be created in the community'
'Test the unloading of the preview community'
'Test whether a torrent is correctly seeded'
'Take a screenshot of the widget. You can optionally append a string to the name of the screenshot. The DCNL screenshot itself is saved as a JPEG file.'
'Return the port range of the test bucket assigned.'
'Return five random, free socks5 ports. DCNL This is here to make sure that tests in different buckets get assigned different SOCKS5 listen ports. DCNL Also, make sure that we have no duplicates in selected socks5 ports.'
'This method creates a torrent from a local file and saves the torrent in the session state dir. DCNL Note that the source file needs to exist.'
'Tests the create_torrent_file() function.'
'create and save torrent definition used in this test file'
'testing call resume data alert'
'Test whether the selected files are set correctly'
'Test whether we return the right share mode when requested in the LibtorrentDownloadImpl'
'Test whether we set the right share mode in LibtorrentDownloadImpl'
'Test whether setting the priority calls the right methods in LibtorrentDownloadImpl'
'Testing whether changing the configuration on runtime calls the right methods in LibtorrentDownloadImpl'
'Testing whether trackers are added to the libtorrent handler in LibtorrentDownloadImpl'
'Testing whether error alerts are processed correctly'
'Test whether a tracking warning alert is processed correctly'
'Testing whether the right operations happen when we receive metadata'
'Testing whether the right operations happen when we receive metadata but the torrent info is invalid'
'Testing whether the right operations happen after a torrent checked alert is received'
'Testing whether the right length of the content of the download is returned'
'Testing whether the right list of files is returned when fetching files from a download'
'Testing whether the right vod file index is returned in LibtorrentDownloadImpl'
'Testing whether the right vod file size is returned in LibtorrentDownloadImpl'
'Testing whether the right piece progress is returned in LibtorrentDownloadImpl'
'Testing whether the right byte progress is returned in LibtorrentDownloadImpl'
'Testing whether an exception in the setup method of LibtorrentDownloadImpl is handled correctly'
'Testing the tracker reply alert in LibtorrentDownloadImpl'
'Testing whether the stop method in LibtorrentDownloadImpl invokes the correct method'
'Testing whether the right operations are performed when we get a torrent finished alert'
'Testing whether a correct pieces bitmask is returned when requested'
'Testing whether the correct operations happen when an error is raised during resume data saving'
'Testing the metainfo fetching method when the DHT is not ready'
'Testing the metainfo fetching method'
'Testing whether the callback is correctly invoked when we received metainfo'
'Testing whether the callback is correctly invoked when we received metainfo after timeout'
'Testing the addition of a torrent to the libtorrent manager'
'Testing whether starting the download of a corrupt torrent file raises an exception'
'Test the starting of a download when there are no new trackers'
'Test setting the proxy settings'
'Adding corrupt values should result in the default value. DCNL Note that this test might fail if there is already an upgraded config stored in the default DCNL state directory. The code being tested here however shouldn\'t be ran if that config already exists. DCNL :return:'
'Adding corrupt values should result in the default value. DCNL Note that this test might fail if there is already an upgraded config stored in the default DCNL state directory. The code being tested here however shouldn\'t be ran if that config already exists. DCNL :return:'
'We no longer support DB versions older than 17 (Tribler 6.0)'
'Test the run method of the upgrader'
'Testing whether the right results are returned when searching in the local database for channels'
'Setup some classes and files that are used by the tests in this module.'
'This method creates a fake AllChannel community so we can check whether a request is made in the community DCNL when doing stuff with a channel.'
'Test the pass through function of Session.create_channel to the ChannelManager.'
'Test the unhandled error observer'
'Testing whether some errors are ignored (like socket errors)'
'Test whether adding a torrent def to a channel works'
'Test whether adding a torrent def twice to a channel raises an exception'
'When libtorrent is not enabled, an exception should be thrown when getting the libtorrent instance.'
'Opening the database without the megacache enabled should raise an exception.'
'When libtorrent is not enabled, an exception should be thrown when downloading a torrentfile.'
'When libtorrent is not enabled, an exception should be thrown when downloading a torrentfile from a peer.'
'When libtorrent is not enabled, an exception should be thrown when downloading a torrentfile from a peer.'
'Retrieving the string encoded permid should be successful.'
'Remove downloads method when empty.'
'Remove an existing download.'
'Test whether the get dispersy instance throws an exception if dispersy is not enabled.'
'Test whether the has_collected_torrent throws an exception if dispersy is not enabled.'
'Test whether the get_collected_torrent throws an exception if dispersy is not enabled.'
'Test whether the save_collected_torrent throws an exception if dispersy is not enabled.'
'Test whether the delete_collected_torrent throws an exception if dispersy is not enabled.'
'Test whether the search_remote_channels throws an exception if dispersy is not enabled.'
'Test whether the get_thumbnail_data throws an exception if dispersy is not enabled.'
'testing random policy'
'testing seeder ratio policy'
'testing policy (seederratio) and then fallback'
'test policy based on creation date'
'Test whether boosting manager dependencies works or not. DCNL In all test, check dependencies always off. In production, it is on by default.'
'Test load default configuration in BoostingManager'
'test - predict number of seeder and leecher only based on peer discovered and DCNL their activities'
'test levenshtein between two string (in this case, file name) DCNL source : DCNL http://people.cs.pitt.edu/~kirk/cs1501/Pruhs/Fall2006/Assignments/editdistance/Levenshtein%20Distance.htm'
'test updating statistics of a torrent (pick a new one)'
'testing escape symbols occured in xml/rss document file.'
'testing insert torrent on unknown source'
'testing uknkown source added to boosting source, and try to apply archive DCNL on top of that'
'test assertion error then not download the actual torrent'
'set settings in credit mining'
'Check if a specified number of torrent has been added to the passed source.'
'function to check if a source is ready initializing'
'test rss source'
'dummy errback when RSS source produces an error'
'Testing an unexisting RSS feed'
'Testing an unavailable RSS feed'
'test directory filled with .torrents'
'test archive mode. Use diretory because easier to fetch torrent'
'Dummy method to download the torrent'
'Helper function to insert 10 torrent into designated channel'
'testing channel source. DCNL It includes finding and downloading actual torrent'
'testing existing channel as a source. DCNL It also tests how boosting manager cope with unknown channel with retrying DCNL the lookup'
'Test the restriction of max_torrents in a source.'
'class returning peer info for a particular handle'
'check whether the handle is valid or not'
'returning infohash of torrents'
'supposed to get libtorrent session'
'set settings (don\'t do anything)'
'obligatory shutdown function'
'mocked function to get a download'
'Testing the init method of DownloadState'
'Testing various getters and setters in DownloadState'
'Testing various getters and setters in DownloadState'
'Testing whether the right completion of files is returned'
'Testing whether the right availability of a file is returned'
'Testing whether the right destination of a VOD download is returned'
'Testing whether the right VOD stream is returned'
'unittest test setup code'
'Testing whether the process checker returns false when there is no lock file.'
'Test whether a new lock file is created when an invalid pid is written inside the current lock file'
'Testing whether the process checker returns false when it finds its own pid in the lock file.'
'Testing whether the process checker returns true when another process is running.'
'Testing whether the process checker returns false when there is a dead pid in the lock file.'
'Setup the tests by creating the ChannelRssParser instance and initializing it.'
'Setup the tests by creating the ChannelObject instance.'
'Test the initialization of the tracker manager'
'Test whether adding a tracker works correctly'
'Test whether the correct tracker info is returned when requesting it in the tracker manager'
'Test whether the tracker info is correctly updated'
'Test whether we should check a tracker or not'
'Test whether the correct tracker is returned when fetching the next eligable tracker for the auto check'
'Test the method to get the market community in the market API'
'Add a transaction and a payment to the market'
'Test whether the API returns the right asks in the order book when performing a request'
'Test whether we can create an ask using the API'
'Test for an error when we don\'t add a price when creating an ask'
'Test for an error when we don\'t add a price type when creating an ask'
'Test whether the API returns the right bids in the order book when performing a request'
'Test whether we can create a bid using the API'
'Test for an error when we don\'t add a price when creating a bid'
'Test for an error when we don\'t add a price type when creating a bid'
'Test whether the API returns the right transactions in the order book when performing a request'
'Test whether the API returns a 404 when a payment cannot be found'
'Test whether the API returns the right orders when we perform a request'
'Test whether the API returns the right payments when we perform a request'
'Test whether a 404 is returned when we try to cancel an order that does not exist'
'Test whether an error is returned when we try to cancel an order that has expired'
'Test whether an error is returned when we try to cancel an order that has expired'
'Test whether the conversion from remote torrent dict to json works'
'Test whether the conversion from db torrent tuple to json works'
'Testing the get_parameters method in REST API util class'
'Test whether the conversion from a db channel tuple to json works'
'Testing whether we can edit a channel.'
'Testing the fix of a unicode array'
'Testing the fix of a unicode dictionary'
'Testing whether the event endpoint returns search results when we have search results available'
'Testing whether various events are coming through the events endpoints'
'Testing the family filter when searching for torrents and channels'
'Testing whether the API returns a correct Tribler statistics dictionary when requested'
'Testing whether the API returns a correct Dispersy statistics dictionary when requested'
'Testing whether the API returns a correct community statistics dictionary when requested'
'Testing whether the API returns a formatted 500 error if an unhandled Exception is raised'
'Testing whether the API returns error 404 if no trustchain community is loaded'
'Testing whether the API returns the correct statistics'
'Testing whether the API returns the correct statistics'
'Testing whether the API returns error 404 if no trustchain community is loaded when requesting blocks'
'Testing whether the API returns the correct blocks'
'Testing whether the API takes large values for the limit'
'Testing whether the API takes negative values for the limit'
'Testing whether the API takes odd values for the limit'
'Testing whether the API takes no values for the limit'
'Testing whether the API takes no limit argument'
'Testing whether random torrents are returned if random torrents are fetched'
'Testing whether error 400 is returned when a negative limit is passed to the request to fetch random torrents'
'Testing whether we get an error 404 if we are fetching the trackers of a non-existent torrent'
'Testing whether fetching the trackers of a non-existent torrent is successful'
'Test the endpoint to fetch the health of a torrent'
'Testing whether the API triggers a Tribler shutdown'
'Testing whether the API returns a proper base64 encoded torrent'
'Testing whether the API returns a formatted 500 error if IOError is raised'
'Test the get_parameters method'
'Testing whether the API returns an empty list when downloads are fetched but no downloads are active'
'Testing whether the API returns the right download when a download is added'
'Testing whether an error is returned when we start a torrent download and do not pass any URI'
'Testing whether an error is returned when we start a torrent download and pass wrong data'
'Testing whether an error is returned when we start a download from a bad URI'
'Testing whether we can start a download from a file'
'Testing whether we can start a download from a magnet'
'Testing whether starting a download from a unexisting URL gives an error'
'Testing whether the API returns error 400 if the remove_data parameter is not passed'
'Testing whether the API returns error 404 if a non-existent download is removed'
'Testing whether the API returns 200 if a download is being removed'
'Testing whether the API returns error 404 if a non-existent download is stopped'
'Testing whether the API returns 200 if a download is being stopped'
'Testing whether an error is returned when we toggle a file for inclusion out of range'
'Testing whether files can be correctly toggled in a download'
'Testing whether the API returns error 404 if a non-existent download is resumed'
'Testing whether the API returns 200 if a download is being resumed'
'Testing whether the API returns 200 if a download is being rechecked'
'Testing whether the API returns 400 if we supply both anon_hops and another parameter'
'Testing whether the API returns error 400 if an unknown state is passed when modifying a download'
'Testing whether the API returns error 404 if a non-existent download is exported'
'Testing whether the API returns the contents of the torrent file if a download is exported'
'Testing whether the API returns 200 if we change the amount of hops of a download'
'Test the get_parameters method'
'Testing whether the API returns a correct state when requested'
'Testing whether the API returns wallets when we query for them'
'Testing whether creating a wallet that already exists throws an error'
'Test creating a BTC wallet without specifying a password, which should throw an error'
'Test creating a BTC wallet'
'Testing whether we can create a wallet'
'Testing whether we can retrieve the balance of a wallet'
'Testing whether we can receive the transactions of a wallet'
'Test transferring assets from a non-BTC wallet'
'Test transferring assets from a non-created BTC wallet'
'Test transferring assets when providing wrong parameters'
'Test whether we receive the right response when we try a transfer that errors'
'Test transferring assets'
'Testing whether the API returns an error if an unknown endpoint is queried'
'Testing whether the API returns no channels when fetching discovered channels DCNL and there are no channels in the database'
'Testing whether the API returns inserted channels when fetching discovered channels'
'Testing whether the API returns the right JSON data if a channel is created'
'Testing whether the API returns the right JSON data if a channel is created'
'Testing whether the API returns a formatted 500 error if DuplicateChannelNameError is raised'
'Testing whether the API returns a 400 and error if the name parameter is not passed'
'Testing whether the API returns the right JSON data if description parameter is not passed'
'The startup method of this class creates a fake Dispersy instance with a fake AllChannel community. It also DCNL inserts some random channels so we have some data to work with.'
'Check whether we have the expected parameters when this method is called.'
'Testing whether the API returns error 409 when subscribing to an already subscribed channel'
'Testing whether the API creates a request in the AllChannel community when subscribing to a channel'
'Testing whether an error is returned when we subscribe to a channel and an error pops up'
'Testing whether the API returns an error when unsubscribing if the channel with the specified CID does not exist'
'Testing whether the API returns error 404 when unsubscribing from an already unsubscribed channel'
'Testing whether the API returns no channels when you have not subscribed to any channel'
'Testing whether the API returns the right channel when subscribed to one channel'
'Testing whether the API creates a request in the AllChannel community when unsubscribing from a channel'
'Testing whether the API returns some popular channels if the are queried'
'Testing whether error 400 is returned when a negative limit is passed to the request to fetch popular channels'
'Testing whether the API returns the right JSON data if a rss feeds from a channel are fetched'
'Testing whether the API returns a 404 if no channel has been created when adding a rss feed'
'Testing whether the API returns error 409 if a channel the rss feed already exists'
'Testing whether the API returns a 200 if a channel has been created and when adding a rss feed'
'Testing whether the API returns a 404 if no channel has been created when adding a rss feed'
'Testing whether the API returns a 404 and error if the url parameter does not exist in the existing feeds'
'Testing whether the API returns a 200 if a channel has been created and when removing a rss feed'
'Testing whether the API returns a 404 if no channel has been created when rechecking rss feeds'
'Testing whether the API returns a 200 if the rss feeds are rechecked in your channel'
'Testing whether the API returns unauthorized error if attempting to recheck feeds in another channel'
'Testing whether the API returns error 404 if no channel object exists in the channel manager'
'Testing whether the API returns response code 404 if no channel has been created'
'Testing whether the API returns the right JSON data if a channel overview is requested'
'Testing whether an error 404 is returned when trying to edit your non-existing channel'
'Testing whether an error 404 is returned when trying to edit your channel without community'
'Testing whether a channel is correctly modified'
'Testing whether the API returns error 404 if a non-existent channel is queried for torrents'
'Testing whether the API returns inserted torrents when fetching discovered channels, with and without filter'
'Testing whether adding a torrent to your channels works'
'Testing whether adding a torrent with a description to a channel works'
'Testing whether adding a torrent to a non-existing channel returns error 404'
'Testing whether error 400 is returned when the torrent parameter is missing when adding a torrent to a channel'
'Testing whether the API returns a formatted 500 error if ValueError is raised'
'Testing whether a torrent can be added to a channel using the API'
'Testing whether adding a torrent with a magnet link to a channel without description works'
'Testing whether adding a torrent to a non-existing channel returns error code 404'
'Testing whether the API returns a formatted 500 error if ValueError is raised'
'Testing whether the API returns an error 500 if a torrent is removed from an unknown channel'
'Testing whether the API returns an error 500 if an unknown torrent is removed from a channel'
'Testing whether the API returns an error 500 if torrent is removed from a channel without community'
'Testing whether the API can remove a torrent from a channel'
'Testing whether the API returns error 404 if an unknown channel is queried for playlists'
'Testing whether the API returns the right JSON data if no playlists have been added to your channel'
'Testing whether the API returns the right JSON data if playlists are fetched'
'Testing whether the API returns error 404 if the channel does not exist when creating a playlist'
'Testing whether the API returns error 400 if the name is missing when creating a new playlist'
'Testing whether the API returns error 400 if the description is missing when creating a new playlist'
'Testing whether the API returns error 404 if the the channel community is missing when creating a new playlist'
'Testing whether the API can create a new playlist in a given channel'
'Testing whether an error 404 is returned when a playlist is removed from a non-existent channel'
'Testing whether an error 404 is returned when a non-existent playlist is removed from a channel'
'Testing whether an error 404 is returned when a playlist is removed from a channel without community'
'Testing whether a playlist is correctly removed'
'Testing whether an error 400 is returned when a playlist is edit without a name parameter passed'
'Testing whether an error 400 is returned when a playlist is edit without a description parameter passed'
'Testing whether an error 404 is returned when a playlist is edit from a non-existent channel'
'Testing whether an error 404 is returned when a non-existent playlist is edited'
'Testing whether an error 404 is returned when a playlist is edited from a channel without community'
'Testing whether a playlist is correctly modified'
'Testing whether an error 404 is returned when a torrent is added to a playlist with a non-existent channel'
'Testing whether an error 404 is returned when a torrent is added to a non-existing playlist'
'Testing whether an error 404 is returned when a torrent is added to a playlist without channel community'
'Testing whether a torrent can successfully be added to a playlist'
'Testing whether an error 404 is returned when a torrent from a playlist is removed from a non-existent channel'
'Testing whether an error 404 is returned when a torrent from a playlist is removed from a non-existent playlist'
'Testing whether an error 404 is returned when a torrent from a playlist without channel community'
'Testing whether a torrent can be successfully removed from a playlist'
'Testing whether the API returns error 404 if an unknown channel is queried'
'Testing whether the API returns the right JSON data if a channel overview is requested'
'Testing whether the API returns a correct dictionary with torrent info.'
'Test whether the right operations happen when we receive an invalid metainfo object'
'Testing whether the API returns an error 400 if no search query is passed with the request'
'Testing whether the API finds no channels/torrents when searching if they are not in the database'
'Testing whether the API finds channels/torrents when searching if there is some inserted data in the database'
'Testing whether the API returns an error 400 if no query is passed when getting search completion terms'
'Testing whether the API returns the right terms when getting search completion terms'
'Verify that the expected sections are present.'
'Testing whether the API returns a correct settings dictionary when the settings are requested'
'Testing whether an error is returned if we are passing an invalid dictionary that is too deep'
'Testing whether an error is returned when we try to set a non-existing key'
'Testing whether settings in the API can be successfully set'
'Testing whether the API returns error 404 if no tunnel community is loaded'
'Testing whether the API returns the correct circuits'
'Test whether the right amount of torrents are returned when searching for torrents in db'
'Test whether the right amount of sorted torrents are returned when searching for torrents in db'
'Test the search procedure in the local database when searching for torrents'
'This test tests whether deleting using a single element as value works.'
'This test tests whether deleting using a tuple as value works.'
'Test the cleanup of a DHT session'
'Test the metainfo lookup of the DHT session'
'Test the metainfo timeout of the DHT session'
'Test various methods in the DHT session class'
'Test the initialization of the torrent checker'
'Test the rescheduling of the tracker select task'
'Test whether adding a request to fetch health of a trackerless torrent fails'
'Test whether cached results of a torrent are returned when fetching the health of a torrent'
'Test whether a Failure is raised when we try to fetch info about a torrent unknown to the database'
'Test whether we capture the error when a tracker check fails'
'Test whether we do nothing when tracker URL is invalid'
'Test the check of a tracker without associated torrents'
'Add a single file to a TorrentDef'
'Add a single dir to a TorrentDef'
'Add a single dir and single file to a TorrentDef'
'Add a single file with announce-list to a TorrentDef'
'Add a single file with BitTornado httpseeds to a TorrentDef'
'Add a single file with piece length to a TorrentDef'
'Add a single file to a TorrentDef and save the latter'
'Testing whether a ValueError is raised when a non-finalized tdef is added as download.'
'Testing whether a DuplicateDownloadException is raised when a download is added twice'
'Testing whether a pstate is successfully loaded'
'Testing whether a download is stopped on error in the download states callback in LaunchManyCore'
'Testing whether a download is readded when safe seeding in the download states callback in LaunchManyCore'
'Test whether we are resuming downloads after loading checkpoint'
'Testing whether all Dispersy communities can be succesfully loaded'
'Testing whether we do nothing if we are not running a session'
'Testing whether we fail if we exceed our maximum amount of retries'
'Testing whether scheduling a TFTP callback works correctly'
'Testing whether a tftp session is correctly cleaned up'
'Testing whether we do nothing when data comes in and the handler is not running'
'When the metadata_store from LaunchManyCore is not available, return DCNL from the function rather than trying to load the metadata. DCNL :return:'
'When the torrent_store from LaunchManyCore is not available, return DCNL from the function rather than trying to load the metadata. DCNL :return:'
'Testing whether a FileNotFound exception is raised when metadata cannot be found'
'Testing whether a FileNotFound exception is raised when a torrent cannot be found'
'Testing the handle_packet_as_receiver method'
'Testing the handle_packet_as_sender method'
'Testing the error handling of a tftp handler'
'Testing whether a correct error message is sent in the tftp handler'
'Testing whether the get_string method raises InvalidStringException when no zero terminator is found'
'Testing whether decoding the options raises InvalidPacketException if no options are found'
'Testing whether decoding the options raises InvalidPacketException if no value is found'
'Testing whether decoding the options raises InvalidOptionException if an invalid option is found'
'Testing whether decoding the options raises InvalidOptionException if an invalid option is found'
'Testing whether an InvalidPacketException is raised when our incoming data is too small'
'Testing whether an InvalidPacketException is raised when our incoming ack has an invalid size'
'Testing whether an InvalidPacketException is raised when our incoming error has an invalid size'
'Testing whether an InvalidPacketException is raised when our incoming error has an empty message'
'Testing whether an InvalidPacketException is raised when our incoming error has an invalid structure'
'Testing whether an InvalidPacketException is raised when our incoming packet is too small'
'Testing whether an InvalidPacketException is raised when our incoming packet contains an invalid opcode'
'Testing whether the encoding of an error packet is correct'
'Create a new TriblerConfig instance'
'When creating a new instance with a configobject provided, the given options DCNL must be contained in the resulting instance.'
'A newly created TriblerConfig is valid.'
'When writing and reading a config the options should remain the same.'
'Setting and getting of libtorrent proxy settings.'
'Check whether general get and set methods are working as expected.'
'Check whether torrent checking get and set methods are working as expected.'
'Check whether http api get and set methods are working as expected.'
'Check whether dispersy get and set methods are working as expected.'
'Check whether libtorrent get and set methods are working as expected.'
'Check whether mainline dht get and set methods are working as expected.'
'Check whether video server get and set methods are working as expected.'
'Check whether tunnel community get and set methods are working as expected.'
'Check whether upgrader get and set methods are working as expected.'
'Check whether torrent store get and set methods are working as expected.'
'Check whether wallet get and set methods are working as expected.'
'Check whether metadata get and set methods are working as expected.'
'Check whether torrent collecting get and set methods are working as expected.'
'Check whether search community get and set methods are working as expected.'
'Check whether allchannel community get and set methods are working as expected.'
'Check whether channel community get and set methods are working as expected.'
'Check whether preview channel community get and set methods are working as expected.'
'Check whether trustchain community get and set methods are working as expected.'
'Check whether watch folder get and set methods are working as expected.'
'Check whether credit mining get and set methods are working as expected.'
'Testing whether downloading a torrent from another peer is successful'
'Testing whether downloading torrent metadata from another peer is successful'
'No extend metadata messages may be send and the connection DCNL needs to close.'
'send length-prefixed message'
'received length-prefixed message'
'read n bytes from socket stream'
'Catch unhandled exception, log it and store it to be printed at teardown time too.'
'Log all unhandled exceptions, clear logged exceptions and raise to fail the currently running test.'
'Add information about an infohash to our tracker info.'
'Returns information about an infohash, None if this infohash is not in our info.'
'Return True if we have information about a specified infohash'
'Parse an incoming datagram. Check the action and based on that, send a response.'
'Send a connection reply.'
'Send a scrape reply.'
'Send an error message if the client does not follow the protocol.'
'Start the UDP Tracker'
'Stop the UDP Tracker, returns a deferred that fires when the server is closed.'
'Return a bencoded dictionary with information about the queried infohashes.'
'Start the HTTP Tracker'
'Stop the HTTP Tracker, returns a deferred that fires when the server is closed.'
'Initialize the variables of the TriblerServiceMaker and the logger.'
'Main method to startup Tribler.'
'Construct a Tribler service.'
'Load the Market community'
'Main method to startup Tribler.'
'Construct a Tribler service.'
'Initialize the variables of this service and the logger.'
'Main method to startup a tunnel helper and add a signal handler.'
'Construct a tunnel helper service.'
'Provides feedback about the current Haystack setup.'
'Clears out the search index completely.'
'Generates a Solr schema that reflects the indexes.'
'Extract text and metadata from a structured file (PDF, MS Word, etc.) DCNL Uses the Solr ExtractingRequestHandler, which is based on Apache Tika. DCNL See the Solr wiki for details: DCNL http://wiki.apache.org/solr/ExtractingRequestHandler DCNL Due to the way the ExtractingRequestHandler is implemented it completely DCNL replaces the normal Haystack indexing process with several unfortunate DCNL restrictions: only one file per request, the extracted data is added to DCNL the index with no ability to modify it, etc. To simplify the process and DCNL allow for more advanced use we\'ll run using the extract-only mode to DCNL return the extracted data without adding it to the index so we can then DCNL use it within Haystack\'s normal templating process. DCNL Returns None if metadata cannot be extracted; otherwise returns a DCNL dictionary containing at least two keys: DCNL :contents: DCNL Extracted full-text content, if applicable DCNL :metadata: DCNL key:value pairs of text strings'
'Builds and executes the query. Returns a list of search results.'
'Builds and executes the query. Returns a list of search results.'
'Updates the backend when given a SearchIndex and a collection of DCNL documents. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Removes a document/object from the backend. Can be either a model DCNL instance or the identifier (i.e. ``app_name.model_name.id``) in the DCNL event the object no longer exists. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Clears the backend of all documents/objects for a collection of models. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Takes a query to search on and returns dictionary. DCNL The query should be a string that is appropriate syntax for the backend. DCNL The returned dictionary should contain the keys \'results\' and \'hits\'. DCNL The \'results\' value should be an iterable of populated SearchResult DCNL objects. The \'hits\' should be an integer count of the number of matched DCNL results the search backend found. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Hook to give the backend a chance to prep an attribute value before DCNL sending it to the search engine. By default, just force it to unicode.'
'Takes a model object and returns results the backend thinks are similar. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Hook to allow backends which support rich-content types such as PDF, DCNL Word, etc. extraction to process the provided file object and return DCNL the contents for indexing DCNL Returns None if metadata cannot be extracted; otherwise returns a DCNL dictionary containing at least two keys: DCNL :contents: DCNL Extracted full-text content, if applicable DCNL :metadata: DCNL key:value pairs of text strings'
'Takes a dictionary of fields and returns schema information. DCNL This method MUST be implemented by each backend, as it will be highly DCNL specific to each one.'
'Builds a list of models for searching. DCNL The ``search`` method should use this and the ``django_ct`` field to DCNL narrow the results (unless the user indicates not to). This helps ignore DCNL any results that are not currently handled models and ensures DCNL consistent caching.'
'Constructs a new Node. If no connector is given, the default will be DCNL used. DCNL Warning: You probably don\'t want to pass in the \'negated\' parameter. It DCNL is NOT the same as constructing a node and calling negate() on the DCNL result.'
'This is called to create a new instance of this class when we need new DCNL Nodes (or subclasses) in the internal code in this class. Normally, it DCNL just shadows __init__(). However, subclasses with an __init__ signature DCNL that is not an extension of Node.__init__ might need to implement this DCNL method to allow a Node to create a new instance of them (if they have DCNL any extra setting up to do).'
'Utility method used by copy.deepcopy().'
'The size of a node if the number of children it has.'
'For truth value testing.'
'Returns True is \'other\' is a direct child of this instance.'
'Adds a new node to the tree. If the conn_type is the same as the root\'s DCNL current connector type, the node is added to the first level. DCNL Otherwise, the whole tree is pushed down one level and a new root DCNL connector is created, connecting the existing tree and the new node.'
'Negate the sense of the root connector. This reorganises the children DCNL so that the current node has a single child: a negated node containing DCNL all the previous children. This slightly odd construction makes adding DCNL new children behave more intuitively. DCNL Interpreting the meaning of this negate is up to client code. This DCNL method is useful for implementing "not" arrangements.'
'Sets up internal state so that new nodes are added to a subtree of the DCNL current node. The conn_type specifies how the sub-tree is joined to the DCNL existing children.'
'Closes off the most recently unmatched start_subtree() call. DCNL This puts the current state into a node of the parent tree and returns DCNL the current instances state to be the parent.'
'Produces a portion of the search query from the current SQ and its DCNL children.'
'Parses an expression and determines the field and filter type.'
'For pickling.'
'For unpickling.'
'Indicates if any query has been been run.'
'Generates a list of params to use when searching.'
'Builds and executes the query. Returns a list of search results.'
'Executes the More Like This. Returns a list of search results similar DCNL to the provided document (and optionally query).'
'Executes a raw query. Returns a list of search results.'
'Returns the number of results the backend found for the query. DCNL If the query has not been run, this will execute the query and store DCNL the results.'
'Returns the results received from the backend. DCNL If the query has not been run, this will execute the query and store DCNL the results.'
'Returns the facet counts received from the backend. DCNL If the query has not been run, this will execute the query and store DCNL the results.'
'Returns the stats received from the backend. DCNL If the query has not been run, this will execute the query and store DCNL the results'
'Returns the spelling suggestion received from the backend. DCNL If the query has not been run, this will execute the query and store DCNL the results.'
'Generates query fragment for boosting a single word/value pair.'
'Generates the query that matches all documents.'
'Interprets the collected query metadata and builds the final query to DCNL be sent to the backend.'
'Generates a query fragment from a field, filter type and a value. DCNL Must be implemented in backends as this will be highly backend specific.'
'Provides a mechanism for sanitizing user input before presenting the DCNL value to the backend. DCNL A basic (override-able) implementation is provided.'
'Adds a SQ to the current query.'
'Orders the search result by a field.'
'Clears out all ordering that has been already added, reverting the DCNL query to relevancy.'
'Restricts the query requiring matches in the given model. DCNL This builds upon previous additions, so you can limit to multiple models DCNL by chaining this method several times.'
'Restricts the query by altering either the start, end or both offsets.'
'Clears any existing limits.'
'Adds a boosted term and the amount to boost it to the query.'
'Runs a raw query (no parsing) against the backend. DCNL This method causes the SearchQuery to ignore the standard query DCNL generating facilities, running only what was provided instead. DCNL Note that any kwargs passed along will override anything provided DCNL to the rest of the ``SearchQuerySet``.'
'Allows backends with support for "More Like This" to return results DCNL similar to the provided instance.'
'Adds stats and stats_facets queries for the Solr backend.'
'Adds highlighting to the search results.'
'Adds bounding box parameters to search query.'
'Adds radius-based parameters to search query.'
'Denotes that results should include distance measurements from the DCNL point passed in.'
'Adds a regular facet on a field.'
'Adds a date-based facet on a field.'
'Adds a query facet on a field.'
'Narrows a search to a subset of all documents per the query. DCNL Generally used in conjunction with faceting.'
'Sets the result class to use for results. DCNL Overrides any previous usages. If ``None`` is provided, Haystack will DCNL revert back to the default ``SearchResult`` object.'
'Allows for overriding which connection should be used. This DCNL disables the use of routers when performing the query. DCNL If ``None`` is provided, it has no effect on what backend is used.'
'Resets the instance\'s internal state to appear as though no query has DCNL been run before. Only need to tweak a few variables we check.'
'Reset any transient connections, file handles, etc.'
'Defers loading until needed.'
'Converts Python values to a string for Whoosh. DCNL Code courtesy of pysolr.'
'Converts values from Whoosh to native Python values. DCNL A port of the same method in pysolr, as they deal with data the same way.'
'Provides a mechanism for sanitizing user input before presenting the DCNL value to the backend. DCNL Whoosh 1.X differs here in that you can no longer use a backslash DCNL to escape reserved characters. Instead, the whole word should be DCNL quoted.'
'Clears the backend of all documents/objects for a collection of models. DCNL :param models: List or tuple of models to clear. DCNL :param commit: Not used.'
'Defers loading until needed.'
'If value appears to be something datetime-like, return it in ISO format. DCNL Otherwise, return None.'
'Convert more Python data types to ES-understandable JSON.'
'Convert values from ElasticSearch to native Python values.'
'Builds and executes the query. Returns a list of search results.'
'Builds and executes the query. Returns a list of search results.'
'Returns the keyword arguments for instantiating the form.'
'Handles GET requests and instantiates a blank version of the form.'
'Returns a boolean of whether this field has a default value.'
'Returns the default value for the field.'
'Takes data from the provided object and prepares it for storage in the DCNL index.'
'Recursive method that looks, for one or more objects, for an attribute that can be multiple DCNL objects (relations) deep.'
'Returns list of nested attributes for looking through the relation.'
'Returns iterable of objects that contain data. For example, resolves Django ManyToMany relationship DCNL so the attributes of the related models can then be accessed.'
'Flattens an object for indexing. DCNL This loads a template DCNL (``search/indexes/{app_label}/{model_name}_{field_name}.txt``) and DCNL returns the result of rendering that template. ``object`` will be in DCNL its context.'
'Handles conversion between the data found and the type of the field. DCNL Extending classes should override this method and provide correct DCNL data coercion.'
'Should return the ``Model`` class (not an instance) that the rest of the DCNL ``SearchIndex`` should use. DCNL This method is required & you must override it to return the correct class.'
'Get the default QuerySet to index when doing a full update. DCNL Subclasses can override this method to avoid indexing certain objects.'
'Get the default QuerySet for read actions. DCNL Subclasses can override this method to work with other managers. DCNL Useful when working with default managers that filter some objects.'
'Get the default QuerySet to index when doing an index update. DCNL Subclasses can override this method to take into account related DCNL model modification times. DCNL The default is to use ``SearchIndex.index_queryset`` and filter DCNL based on ``SearchIndex.get_updated_field``'
'Fetches and adds/alters data before indexing.'
'Returns the field that supplies the primary document to be indexed.'
'Returns a dict of fields with weight values'
'Updates the entire index. DCNL If ``using`` is provided, it specifies which connection should be DCNL used. Default relies on the routers to decide which backend should DCNL be used.'
'Update the index for a single object. Attached to the class\'s DCNL post-save hook. DCNL If ``using`` is provided, it specifies which connection should be DCNL used. Default relies on the routers to decide which backend should DCNL be used.'
'Remove an object from the index. Attached to the class\'s DCNL post-delete hook. DCNL If ``using`` is provided, it specifies which connection should be DCNL used. Default relies on the routers to decide which backend should DCNL be used.'
'Clears the entire index. DCNL If ``using`` is provided, it specifies which connection should be DCNL used. Default relies on the routers to decide which backend should DCNL be used.'
'Completely clear the index for this model and rebuild it. DCNL If ``using`` is provided, it specifies which connection should be DCNL used. Default relies on the routers to decide which backend should DCNL be used.'
'Get the field name that represents the updated date for the model. DCNL If specified, this is used by the reindex command to filter out results DCNL from the QuerySet, enabling you to reindex only recent records. This DCNL method should either return None (reindex everything always) or a DCNL string of the Model\'s DateField/DateTimeField name.'
'Determine if an object should be updated in the index. DCNL It\'s useful to override this when an object may save frequently and DCNL cause excessive reindexing. You should check conditions on the instance DCNL and return False if it is not to be indexed. DCNL By default, returns True (always reindex).'
'Provides the ability to override how objects get loaded in conjunction DCNL with ``SearchQuerySet.load_all``. DCNL This is useful for post-processing the results from the query, enabling DCNL things like adding ``select_related`` or filtering certain data. DCNL By default, returns ``all()`` on the model\'s default manager.'
'Given a Django model field, return if it should be included in the DCNL contributed SearchFields.'
'Given a Django field, return the appropriate index fieldname.'
'Given any explicit fields to include and fields to exclude, add DCNL additional fields based on the associated model.'
'Returns the content type for the result\'s model instance.'
'Returns a dictionary of all of the fields from the raw result. DCNL Useful for serializing results. Only returns what was seen from the DCNL search engine, so it may have extra fields Haystack\'s indexes aren\'t DCNL aware of.'
'Returns a dictionary of all of the stored fields from the SearchIndex. DCNL Useful for serializing results. Only returns the fields Haystack\'s DCNL indexes are aware of as being \'stored\'.'
'Returns a dictionary representing the ``SearchResult`` in order to DCNL make it pickleable.'
'Updates the object\'s attributes according to data passed by pickle.'
'For pickling.'
'For unpickling.'
'Retrieves an item or slice from the set of results.'
'Returns all results for the query.'
'Returns an empty result list for the query.'
'Narrows the search based on certain attributes and the default operator.'
'Narrows the search by ensuring certain attributes are not included.'
'Narrows the search by looking for (and including) certain attributes.'
'Narrows the search by ensuring certain attributes are not included.'
'Alters the order in which the results should appear.'
'Adds highlighting to the results.'
'Accepts an arbitrary number of Model classes to include in the search.'
'Allows specifying a different class to use for results. DCNL Overrides any previous usages. If ``None`` is provided, Haystack will DCNL revert back to the default ``SearchResult`` object.'
'Boosts a certain aspect of the query.'
'Adds faceting to a query for the provided field.'
'Spatial: Adds a bounding box search to the query.'
'Spatial: Adds a distance-based search to the query.'
'Adds stats to a query for the provided field.'
'Adds stats facet for the given field and facet_fields represents DCNL the faceted fields.'
'Spatial: Denotes results must have distance measurements from the DCNL provided point.'
'Adds faceting to a query for the provided field by date.'
'Adds faceting to a query for the provided field with a custom query.'
'Pushes existing facet choices into the search.'
'Passes a raw query directly to the backend.'
'Efficiently populates the objects in the search results.'
'Performs a best guess constructing the search query. DCNL This method is somewhat naive but works well enough for the simple, DCNL common cases.'
'A shortcut method to perform an autocomplete search. DCNL Must be run against fields that are either ``NgramField`` or DCNL ``EdgeNgramField``.'
'Allows switching which connection the ``SearchQuerySet`` uses to DCNL search in.'
'Returns the total number of matching results.'
'Returns the best/top search result that matches the query.'
'Returns the most recent search result that matches the query.'
'Finds similar results to the object passed in.'
'Returns the facet counts found by the query. DCNL This will cause the query to execute and should generally be used when DCNL presenting the data.'
'Returns the stats results found by the query.'
'Set the exact text to be used to generate spelling suggestions DCNL When making complicated queries, such as the alt parser mechanism DCNL used by Solr dismax/edismax, this provides a convenient way to set DCNL the a simple text string which will be used to generate spelling DCNL suggestions without including unnecessary syntax.'
'Returns the spelling suggestion found by the query. DCNL To work, you must set ``INCLUDE_SPELLING`` within your connection\'s DCNL settings dictionary to ``True``. Otherwise, ``None`` will be returned. DCNL This will cause the query to execute and should generally be used when DCNL presenting the data.'
'Returns a list of dictionaries, each containing the key/value pairs for DCNL the result, exactly like Django\'s ``ValuesQuerySet``.'
'Returns a list of field values as tuples, exactly like Django\'s DCNL ``QuerySet.values``. DCNL Optionally accepts a ``flat=True`` kwarg, which in the case of a DCNL single field being provided, will return a flat list of that field DCNL rather than a list of tuples.'
'Allows for specifying a custom ``QuerySet`` that changes how ``load_all`` DCNL will fetch records for the provided model. DCNL This is useful for post-processing the results from the query, enabling DCNL things like adding ``select_related`` or filtering certain data.'
'Returns a new SearchQuerySet object.  Subclasses can override this method DCNL to easily customize the behavior of the Manager.'
'Determines the behavior when no query was found. DCNL By default, no results are returned (``EmptySearchQuerySet``). DCNL Should you want to show all results, override this method in your DCNL own ``SearchForm`` subclass and do ``return self.searchqueryset.all()``.'
'Return a list of the selected models.'
'Generates the actual response to the search. DCNL Relies on internal, overridable methods to construct the response.'
'Instantiates the form the class should use to process the search query.'
'Returns the query provided by the user. DCNL Returns an empty string if the query is invalid.'
'Fetches the results via the form. DCNL Returns an empty list if there\'s no query to search with.'
'Paginates the results appropriately. DCNL In case someone does not want to use Django\'s built-in pagination, it DCNL should be a simple matter to override this method to do what they would DCNL like.'
'Allows the addition of more context variables as needed. DCNL Must return a dictionary.'
'Generates the actual HttpResponse to send back to the user.'
'A hook for setting up anything necessary for DCNL ``handle_save/handle_delete`` to be executed. DCNL Default behavior is to do nothing (``pass``).'
'A hook for tearing down anything necessary for DCNL ``handle_save/handle_delete`` to no longer be executed. DCNL Default behavior is to do nothing (``pass``).'
'Given an individual model instance, determine which backends the DCNL update should be sent to & update the object on those backends.'
'Given an individual model instance, determine which backends the DCNL delete should be sent to & delete the object on those backends.'
'Test getting the search view form kwargs.'
'Test the generic SearchView response.'
'Test the generic SearchView form is valid.'
'Test the generic SearchView form is invalid.'
'Gets the request object for the view. DCNL :param url: a mock url to use for the request DCNL :param method: the http method to use for the request (\'get\', \'post\', DCNL etc).'
'update_index uses default index when --using is not present'
'update_index only applies to indexes specified with --using'
'clear_index uses all keys when --using is not present'
'clear_index only applies to indexes specified with --using'
'rebuild_index uses default index when --using is not present'
'rebuild_index passes --using to clear_index and update_index'
'Confirm that command-line option parsing produces the same results as using call_command() directly, DCNL mostly as a sanity check for the logic in rebuild_index which combines the option_lists for its DCNL component commands.'
'Combining AND queries with OR should give DCNL AND(OR(a, b), OR(c, d))'
'Combining OR queries with AND should give DCNL OR(AND(a, b), AND(c, d))'
'Ensure doing a dictionary lookup raises a TypeError so DCNL EmptySearchQuerySets can be used in templates.'
'Confirm that an empty list avoids a Elasticsearch exception'
'Confirm that an empty list avoids a Elasticsearch exception'
'Test build_search_kwargs with dwithin range for Elasticsearch versions < 1.0.0'
'Test build_search_kwargs with dwithin range for Elasticsearch versions >= 1.0.0'
'Confirm that an empty list avoids a Solr exception'
'Ensure that swapping the ``result_class`` works'
'Confirm that an empty list avoids a Solr exception'
'Confirm that the documents in the search index match the database'
'Haystack should use django.utils.timezone.now'
'Test build_search_kwargs with dwithin range for Elasticsearch versions < 1.0.0'
'Test build_search_kwargs with dwithin range for Elasticsearch versions >= 1.0.0'
'Publishes Deis platform state from the database to etcd.'
'Serialize the field\'s JSON data, for read operations.'
'Deserialize the field\'s JSON data, for write operations.'
'Deserialize the field\'s JSON integer data.'
'Deserialize the field\'s JSON string data.'
'Hack to remove DRF\'s UniqueTogetherValidator when it concerns the UUID. DCNL See https://github.com/deis/deis/pull/2898#discussion_r23105147'
'Check that the hostname is valid'
'Return the database column type for a UuidField.'
'Initialize an empty field with a new UUID before it is saved.'
'Tell forms how to represent this UuidField.'
'Test that a null build is created and that users can post new builds'
'Test that the serialized response contains only relevant data.'
'Test the text representation of a build.'
'If a user creates an application, an administrator should be able DCNL to push builds.'
'An unauthorized user should not be able to modify other builds. DCNL Since an unauthorized user can\'t access the application, these DCNL requests should return a 403.'
'After the first initial deploy, if the containers are scaled down to zero, DCNL they should stay that way on a new release.'
'Test that config is auto-created for a new app and that DCNL config can be updated using a PATCH'
'Test that config won\'t be created if a similar operation DCNL is in progress for that app.'
'Test that the serialized response contains only relevant data.'
'Test that config data is converted into the correct type.'
'Test that config sets on the same key function properly'
'Test that config sets with unicode values are accepted.'
'Test the text representation of a node.'
'Test that valid config keys are accepted.'
'Test that invalid config keys are rejected.'
'If a non-admin creates an app, an administrator should be able to set config DCNL values for that app.'
'Test that limit is auto-created for a new app and that DCNL limits can be updated using a PATCH'
'Test that CPU limits can be set'
'Test that tags can be set on an application'
'Ensure that setting the config value is owned by the requesting user DCNL See https://github.com/deis/deis/issues/2650'
'An unauthorized user should not be able to modify other config. DCNL Since an unauthorized user can\'t access the application, these DCNL requests should return a 403.'
'If a user deploys an app with a config value set for HEALTHCHECK_URL, the controller DCNL should check that the application responds with a 200 OK.'
'If a user deploys an app with a config value set for HEALTHCHECK_URL, the controller DCNL should check that the application responds with a 200 OK. If it\'s down, the app should be DCNL rolled back.'
'Ensure that when a healthcheck fails, a backoff strategy is used before trying again.'
'Ensure that when an initial delay is set, the request will sleep for x seconds, where DCNL x is the number of seconds in the initial timeout.'
'Ensure when a timeout value is set, the controller respects that value DCNL when making a request.'
'If a user deploys an app with a config value set for HEALTHCHECK_URL but the app DCNL returns a connection error, the controller should continue checking until either the app DCNL responds or the app fails to respond within the timeout. DCNL NOTE (bacongobbler): the Docker userland proxy listens for connections and returns a DCNL ConnectionError, hence the unit test.'
'Test that a user can register using the API, login and logout'
'test that a new user cannot register when registration is disabled.'
'test that a non superuser cannot register when registration is admin only.'
'test that a superuser can register when registration is admin only.'
'test that a registration should fail with a nonexistant mode'
'Test that a registered user can cancel her account.'
'Test that a registered user can change the password.'
'Test that an administrator can change a user\'s password, while a regular user cannot.'
'Test that token regeneration works'
'Test that the finite state machine transitions with a good scheduler'
'Test that you cannot directly modify the state'
'Test the text representation of a container.'
'If a non-admin user creates a container, an administrator should be able to DCNL manage it.'
'A user should not be able to scale processes unless a build is present.'
'Test the default command for each container workflow'
'Test the run command for each container workflow'
'Test that app info doesn\'t show transient "run" proctypes.'
'An unauthorized user should not be able to access an app\'s resources. DCNL If an unauthorized user is trying to scale an app he or she does not have access to, it DCNL should return a 403.'
'When a new procfile is posted which removes a certain process type, deis should stop the DCNL existing containers.'
'Run tests with all but critical log messages disabled.'
'Test that a release is created when an app is created, and DCNL that updating config or build or triggers a new release'
'Test the text representation of a release.'
'Test the text summary of a release.'
'If a non-user creates an app, an admin should be able to create releases.'
'An unauthorized user should not be able to modify other releases. DCNL Since an unauthorized user should not know about the application at all, these DCNL requests should return a 404.'
'Test that a user can add, remove and manage their SSH public keys'
'Test that a user cannot add invalid SSH public keys'
'Test that a user cannot add a duplicate key'
'Test the text representation of a key'
'Check that an administrator can list an app\'s perms'
'An unauthorized user should not be able to modify other apps\' permissions. DCNL Since an unauthorized user should not know about the application at all, these DCNL requests should return a 404.'
'An collaborator should not be able to modify the app\'s permissions.'
'Test that the serialized response contains only relevant data.'
'https://github.com/deis/deis/issues/3239'
'https://github.com/deis/deis/issues/3475'
'Wildcards are not allowed for now.'
'If a non-admin user creates an app, an administrator should be able to add DCNL domains to it.'
'An unauthorized user should not be able to modify other domains. DCNL Since an unauthorized user should not know about the application at all, these DCNL requests should return a 404.'
'Test that when the version header is sent, the request is accepted.'
'Test that when an improper version header is sent, the request is declined.'
'Test that when the version header is not present, the request is accepted.'
'Test creating a Push via the API'
'Test a user pushing to an unauthorized application'
'Test creating a Build via an API Hook'
'Test creating a Procfile build via an API Hook'
'Test creating a Dockerfile build via an API Hook'
'Test reading Config via an API Hook'
'Administrator should be able to create build hooks on non-admin apps.'
'Test that a user can create, read, update and delete an application'
'Test that the serialized response contains only relevant data.'
'Verifies that an app\'s release summary is dumped into the logs.'
'Nobody should be able to create applications with names which are reserved.'
'Application structures should be valid JSON objects.'
'Administrators of Deis should be able to manage all applications.'
'If a user creates an application, the administrator should be able DCNL to see it.'
'If the administrator has not provided SSH private key for run commands, DCNL make sure a friendly error message is provided on run'
'A user should not be able to run a one-off command unless a release DCNL is present.'
'An unauthorized user should not be able to access an app\'s resources. DCNL Since an unauthorized user can\'t access the application, these DCNL tests should return a 403, but currently return a 404. FIXME!'
'Tests creating a certificate.'
'Tests creating a wildcard certificate, which should be disabled.'
'In some cases such as with SAN certificates, the certificate can cover more DCNL than a single domain. In that case, we want to be able to specify the common DCNL name for the certificate/key.'
'When a user retrieves a certificate, only the common name and expiry date should be DCNL displayed.'
'Disallow put/patch requests'
'Destroying a certificate should generate a 204 response'
'Logs a message in the context of this application. DCNL This prefixes log messages with an application "tag" that the customized deis-logspout will DCNL be on the lookout for.  When it\'s seen, the message-- usually an application event of some DCNL sort like releasing or scaling, will be considered as "belonging" to the application DCNL instead of the controller and will be handled accordingly.'
'Create a new application with an initial config and release'
'Delete this application including all containers'
'Delete application logs stored by the logger component'
'Scale containers up or down to match requested structure.'
'Creates and starts containers via the scheduler'
'Restarts containers via the scheduler'
'Destroys containers via the scheduler'
'Deploy a new release to this application'
'Scale to default structure based on release type'
'Return aggregated log data for this application.'
'Run a one-off command in an ephemeral app container.'
'Run a one-off command'
'merge the old config with the new'
'Create a new application release using the provided Build and Config DCNL on behalf of a user. DCNL Releases start at v1 and auto-increment.'
'Return the previous Release to this one. DCNL :return: the previous :class:`Release`, or None'
'Drop django-allauth tables.'
'Drop socialaccount tables.'
'Drop django-celery tables.'
'Set empty Config fields to an empty dict.'
'Create custom model permissions.'
'Return `True` if permission is granted, `False` otherwise.'
'Return `True` if permission is granted, `False` otherwise.'
'Return `True` if permission is granted, `False` otherwise.'
'If settings.REGISTRATION_MODE does not exist, such as during a test, return True DCNL Return `True` if permission is granted, `False` otherwise.'
'Return `True` if permission is granted, `False` otherwise.'
'Return `True` if permission is granted, `False` otherwise.'
'Authenticate the request for anyone!'
'Authenticate the request for anyone or if a valid token is provided, a user.'
'Retrieve the object based on the latest release\'s value'
'HACK: Instead of filtering by the queryset, we limit the queryset to list only the apps DCNL which are owned by the user as well as any apps they have been given permission to DCNL interact with.'
'Retrieve domain certificate by common name'
'Get release by version always'
'Create a new release as a copy of the state of the compiled slug and config vars of a DCNL previous release.'
'Return a 405 "Not Allowed" if the request\'s client major version DCNL doesn\'t match this controller\'s REST API major version (currently "1").'
'Include the controller\'s REST API major and minor version in DCNL a response header.'
'A post_save hook for performing actions after the object has been pushed to the DCNL database. DCNL Leave it up to child classes to implement.'
'Update a source Docker image with environment config and publish it to deis-registry.'
'Add a "last-mile" layer of environment config to a Docker image for deis-registry.'
'Pull a Docker image into the local storage graph.'
'Push a local Docker image to a registry.'
'Tag a local Docker image with a new name and tag.'
'Create a new container.'
'Destroy a container.'
'Run a one-off command.'
'Start a container.'
'Display the given job\'s running state.'
'Stop a container.'
'Create a new container.'
'Destroy a container.'
'Run a one-off command.'
'Start a container.'
'Display the given job\'s running state.'
'Stop a container.'
'Create a container.'
'Start a container.'
'Stop a container.'
'Destroy a container.'
'Run a one-off command.'
'Display the given job\'s running state.'
'Create a new container.'
'Destroy a container.'
'Run a one-off command.'
'Start a container.'
'Stop a container.'
'Test that the tag renders a gravatar URL.'
'Test that the tag requires one argument.'
'Test that an empty email returns an empty string.'
'Reports convergence to :data:`sys.stderr`. DCNL The output consists of three columns: iteration number, log DCNL probability of the data at the current iteration and convergence DCNL rate.  At the first iteration convergence rate is unknown and DCNL is thus denoted by NaN. DCNL Parameters DCNL logprob : float DCNL The log probability of the data as computed by EM algorithm DCNL in the current iteration.'
'``True`` if the EM algorithm converged and ``False`` otherwise.'
'Compute the log probability under the model and compute posteriors. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ), optional DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL Returns DCNL logprob : float DCNL Log likelihood of ``X``. DCNL posteriors : array, shape (n_samples, n_components) DCNL State-membership probabilities for each sample in ``X``. DCNL See Also DCNL score : Compute the log probability under the model. DCNL decode : Find most likely state sequence corresponding to ``X``.'
'Compute the log probability under the model. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ), optional DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL Returns DCNL logprob : float DCNL Log likelihood of ``X``. DCNL See Also DCNL score_samples : Compute the log probability under the model and DCNL posteriors. DCNL decode : Find most likely state sequence corresponding to ``X``.'
'Find most likely state sequence corresponding to ``X``. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ), optional DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL algorithm : string DCNL Decoder algorithm. Must be one of "viterbi" or "map". DCNL If not given, :attr:`decoder` is used. DCNL Returns DCNL logprob : float DCNL Log probability of the produced state sequence. DCNL state_sequence : array, shape (n_samples, ) DCNL Labels for each sample from ``X`` obtained via a given DCNL decoder ``algorithm``. DCNL See Also DCNL score_samples : Compute the log probability under the model and DCNL posteriors. DCNL score : Compute the log probability under the model.'
'Find most likely state sequence corresponding to ``X``. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ), optional DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL Returns DCNL state_sequence : array, shape (n_samples, ) DCNL Labels for each sample from ``X``.'
'Compute the posterior probability for each state in the model. DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ), optional DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL Returns DCNL posteriors : array, shape (n_samples, n_components) DCNL State-membership probabilities for each sample from ``X``.'
'Generate random samples from the model. DCNL Parameters DCNL n_samples : int DCNL Number of samples to generate. DCNL random_state : RandomState or an int seed DCNL A random number generator instance. If ``None``, the object\'s DCNL ``random_state`` is used. DCNL Returns DCNL X : array, shape (n_samples, n_features) DCNL Feature matrix. DCNL state_sequence : array, shape (n_samples, ) DCNL State sequence produced by the model.'
'Estimate model parameters. DCNL An initialization step is performed before entering the DCNL EM algorithm. If you want to avoid this step for a subset of DCNL the parameters, pass proper ``init_params`` keyword argument DCNL to estimator\'s constructor. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ) DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``. DCNL Returns DCNL self : object DCNL Returns self.'
'Initializes model parameters prior to fitting. DCNL Parameters DCNL X : array-like, shape (n_samples, n_features) DCNL Feature matrix of individual samples. DCNL lengths : array-like of integers, shape (n_sequences, ) DCNL Lengths of the individual sequences in ``X``. The sum of DCNL these should be ``n_samples``.'
'Validates model parameters prior to fitting. DCNL Raises DCNL ValueError DCNL If any of the parameters are invalid, e.g. if :attr:`startprob_` DCNL don\'t sum to 1.'
'Initializes sufficient statistics required for M-step. DCNL The method is *pure*, meaning that it doesn\'t change the state of DCNL the instance.  For extensibility computed statistics are stored DCNL in a dictionary. DCNL Returns DCNL nobs : int DCNL Number of samples in the data. DCNL start : array, shape (n_components, ) DCNL An array where the i-th element corresponds to the posterior DCNL probability of the first sample being generated by the i-th DCNL state. DCNL trans : array, shape (n_components, n_components) DCNL An array where the (i, j)-th element corresponds to the DCNL posterior probability of transitioning between the i-th to j-th DCNL states.'
'Updates sufficient statistics from a given sample. DCNL Parameters DCNL stats : dict DCNL Sufficient statistics as returned by DCNL :meth:`~base._BaseHMM._initialize_sufficient_statistics`. DCNL X : array, shape (n_samples, n_features) DCNL Sample sequence. DCNL framelogprob : array, shape (n_samples, n_components) DCNL Log-probabilities of each sample under each of the model states. DCNL posteriors : array, shape (n_samples, n_components) DCNL Posterior probabilities of each sample being generated by each DCNL of the model states. DCNL fwdlattice, bwdlattice : array, shape (n_samples, n_components) DCNL Log-forward and log-backward probabilities.'
'Performs the M-step of EM algorithm. DCNL Parameters DCNL stats : dict DCNL Sufficient statistics updated from all available samples.'
'Return covars as a full matrix.'
'Check if ``X`` is a sample from a Multinomial distribution. DCNL That is ``X`` should be an array of non-negative integers from DCNL range ``[min(X), max(X)]``, such that each integer from the range DCNL occurs in ``X`` at least once. DCNL For example ``[0, 0, 2, 1, 3, 1, 1]`` is a valid sample from a DCNL Multinomial distribution, while ``[0, 0, 3, 5, 10]`` is not.'
'Don\'t render this element\'s tag(s).'
'Don\'t render this element.'
'Render an instance of this node for each item in list.'
'callback : function -- the function that controls how this DCNL template is rendered DCNL html : string or unicode -- the template HTML DCNL [attribute : string or unicode] -- name of the tag attribute used DCNL to hold compiler directives DCNL [codecs : tuple] -- a tuple containing two functions used by the DCNL content property to encode/decode HTML entities DCNL [warnings : boolean] -- warn when non-directive attribute DCNL is encountered'
'Render this template; *args will be passed directly to the template.'
'Print the object model\'s structure for diagnostic use.'
'Shortcut for append method.'
'Locate and import asciidoc.py. DCNL Initialize instance attributes.'
'Import asciidoc module (script or compiled .pyc). DCNL See DCNL http://groups.google.com/group/asciidoc/browse_frm/thread/66e7b59d12cd2f91 DCNL for an explanation of why a seemingly straight-forward job turned out DCNL quite complicated.'
'Compile infile to outfile using backend format. DCNL infile can outfile can be file path strings or file like objects.'
'print "-----------------------" DCNL print ty.strip() DCNL print other_ty.strip() DCNL print "ty in alternatives " + str(ty in alternatives) DCNL if ty in alternatives: DCNL print "alternatives[ty].count(other_ty) " + str(alternatives[ty].count(other_ty))'
'print "-----------------------" DCNL print ty.strip() DCNL print other_ty.strip() DCNL print "ty in alternatives " + str(ty in alternatives) DCNL if ty in alternatives: DCNL print "alternatives[ty].count(other_ty) " + str(alternatives[ty].count(other_ty))'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
':param fd: Underlying image file object'
'Return the next chunk of the underlying iterator. DCNL This is replaced with cooperative_read in __init__ if the underlying DCNL fd already supports read().'
':param data: Underlying image data object DCNL :param limit: maximum number of bytes the reader should allow'
'Add a column to the table DCNL :param width: number of characters wide the column should be DCNL :param label: column heading DCNL :param just: justification for the column, \'l\' for left, DCNL \'r\' for right'
'Authenticate with the Keystone service. DCNL There are a few scenarios to consider here: DCNL 1. Which version of Keystone are we using? v1 which uses headers to DCNL pass the credentials, or v2 which uses a JSON encoded request body? DCNL 2. Keystone may respond back with a redirection using a 305 status DCNL code. DCNL 3. We may attempt a v1 auth when v2 is what\'s called for. In this DCNL case, we rewrite the url to contain /v2.0/ and retry using the v2 DCNL protocol.'
'Connect to a host on a given (SSL) port. DCNL If ca_file is pointing somewhere, use it to check Server Certificate. DCNL Redefined/copied and extended from httplib.py:1105 (Python 2.6.x). DCNL This is needed to pass cert_reqs=ssl.CERT_REQUIRED as parameter to DCNL ssl.wrap_socket(), which forces SSL to check server certificate against DCNL our client certificate.'
'Creates a new client to some service. DCNL :param host: The host where service resides DCNL :param port: The port where service resides DCNL :param timeout: Connection timeout. DCNL :param use_ssl: Should we use HTTPS? DCNL :param auth_tok: The auth token to pass to the server DCNL :param creds: The credentials to pass to the auth plugin DCNL :param doc_root: Prefix for all URLs we request from host DCNL :param key_file: Optional PEM-formatted file that contains the private DCNL key. DCNL If use_ssl is True, and this param is None (the DCNL default), then an environ variable DCNL GLANCE_CLIENT_KEY_FILE is looked for. If no such DCNL environ variable is found, ClientConnectionError DCNL will be raised. DCNL :param cert_file: Optional PEM-formatted certificate chain file. DCNL If use_ssl is True, and this param is None (the DCNL default), then an environ variable DCNL GLANCE_CLIENT_CERT_FILE is looked for. If no such DCNL environ variable is found, ClientConnectionError DCNL will be raised. DCNL :param ca_file: Optional CA cert file to use in SSL connections DCNL If use_ssl is True, and this param is None (the DCNL default), then an environ variable DCNL GLANCE_CLIENT_CA_FILE is looked for. DCNL :param insecure: Optional. If set then the server\'s certificate DCNL will not be verified. DCNL :param configure_via_auth: Optional. Defaults to True. If set, the DCNL URL returned from the service catalog for the image DCNL endpoint will **override** the URL supplied to in DCNL the host parameter.'
'Updates the authentication token for this client connection.'
'Setups the connection based on the given url. DCNL The form is: DCNL <http|https>://<host>:port/doc_root'
'Returns an instantiated authentication plugin.'
'Returns the proper connection type'
'Use the authentication plugin to authenticate and set the auth token. DCNL :param force_reauth: For re-authentication to bypass cache.'
'Make a request, returning an HTTP response object. DCNL :param method: HTTP verb (GET, POST, PUT, etc.) DCNL :param action: Requested path to append to self.doc_root DCNL :param body: Data to send in the body of the request DCNL :param headers: Headers to send with the request DCNL :param params: Key/value pairs to use in query string DCNL :returns: HTTP response object'
'Create a URL object we can use to pass to _do_request().'
'Connects to the server and issues a request.  Handles converting DCNL any returned HTTP error status codes to OpenStack/Glance exceptions DCNL and closing the server connection. Returns the result data, or DCNL raises an appropriate exception. DCNL :param method: HTTP method ("GET", "POST", "PUT", etc...) DCNL :param url: urlparse.ParsedResult object with URL information DCNL :param body: data to send (as string, filelike or iterable), DCNL or None (default) DCNL :param headers: mapping of key/value pairs to add as headers DCNL :note DCNL If the body param has a read attribute, and method is either DCNL POST or PUT, this method will automatically conduct a chunked-transfer DCNL encoding and use the body as a file object or iterable, transferring DCNL chunks of data using the connection\'s send() method. This allows large DCNL objects to be transferred efficiently without buffering the entire DCNL body in memory.'
'Returns the integer status code from the response, which DCNL can be either a Webob.Response (used in testing) or httplib.Response'
'Extract a subset of keys from a dictionary. The filters key DCNL will also be extracted, and each of its values will be returned DCNL as an individual param. DCNL :param actual_params: dict of keys to filter DCNL :param allowed_params: list of keys that \'actual_params\' will be DCNL reduced to DCNL :retval subset of \'params\' dict'
'Run a WSGI server with the given application. DCNL :param application: The application to be run in the WSGI server DCNL :param default_port: Port to bind to if none is specified in conf'
'Wait until all servers have completed running.'
'Run a WSGI server.'
'Start a WSGI server in a new green thread.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Iterator that prints the contents of a wrapper string iterator DCNL when iterated.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be a wsgi.Controller, who will route DCNL the request to the action method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, "/svrlist", controller=sc, action="list") DCNL # Actions are all implicitly defined DCNL mapper.resource("server", "servers", controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, "/v1.0/{path_info:.*}", controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Determine the requested response content-type.'
'Determine content type of the request body.'
'Returns whether a Webob.Request object will possess an entity body. DCNL :param request:  Webob.Request object'
':param controller: object that implement methods created by routes lib DCNL :param deserializer: object that supports webob request deserialization DCNL through controller-like actions DCNL :param serializer: object that supports webob response serialization DCNL through controller-like actions'
'WSGI method that controls (de)serialization and method dispatch.'
'Find action-specific method on self and call it.'
'Parse dictionary created by routes library.'
'Try to find a version first in the accept header, then the URL'
'Given a string, tries to match a major and/or DCNL minor version number. DCNL :param subject: The string to check DCNL :returns version found in the subject DCNL :raises ValueError if no acceptable version could be found'
'Convert authentication information into a request context DCNL Generate a glance.context.RequestContext object from the available DCNL authentication headers and store on the \'context\' attribute DCNL of the req object. DCNL :param req: wsgi request object that will be given the context object DCNL :raises webob.exc.HTTPUnauthorized: when value of the X-Identity-Status DCNL header is not \'Confirmed\' and DCNL anonymous access is disallowed'
'Create a context without an authorized user.'
'Sanity check the \'deleted\' and \'size\' metadata values.'
'Determine the version of the url and extract the image id DCNL :returns tuple of version and image id if the url is a cacheable, DCNL otherwise None'
'For requests for an image file, we check the local image DCNL cache. If present, we return the image file, appending DCNL the image metadata in headers. If not present, we pass DCNL the request on to the next application in the pipeline.'
'Preserve the image id and request method for later retrieval'
'Preserve the cached image id for consumption by the DCNL process_response method of this middleware'
'We intercept the response coming back from the main DCNL images Resource, removing image file from the cache DCNL if necessary'
'Returns the integer status code from the response, which DCNL can be either a Webob.Response (used in testing) or httplib.Response'
'Called if cache hit'
'Create a new Rules object based on the provided dict of rules'
'Set the rules found in the json file on disk'
'Locate the policy json data file'
'Read contents of the policy file DCNL This re-caches policy data if the file has been changed.'
'Verifies that the action is valid on the target in this context. DCNL :param context: Glance request context DCNL :param rule: String representing the action to be checked DCNL :param object: Dictionary representing the object of the action. DCNL :raises: `glance.common.exception.Forbidden` DCNL :returns: A non-False value if access is allowed.'
'Verifies that the action is valid on the target in this context. DCNL :param context: Glance request context DCNL :param action: String representing the action to be checked DCNL :param object: Dictionary representing the object of the action. DCNL :raises: `glance.common.exception.Forbidden` DCNL :returns: A non-False value if access is allowed.'
'Verifies that the action is valid on the target in this context. DCNL :param context: Glance request context DCNL :param action: String representing the action to be checked DCNL :param object: Dictionary representing the object of the action. DCNL :returns: A non-False value if access is allowed.'
'Adds a membership to the image. DCNL :param req: the Request object coming from the wsgi layer DCNL :param image_id: the image identifier DCNL :param member_id: the member identifier DCNL :retval The response body is a mapping of the following form:: DCNL {\'member_id\': <MEMBER>, DCNL \'image_id\': <IMAGE>, DCNL \'status\': <MEMBER_STATUS> DCNL \'created_at\': .., DCNL \'updated_at\': ..}'
'Adds a membership to the image. DCNL :param req: the Request object coming from the wsgi layer DCNL :param image_id: the image identifier DCNL :param member_id: the member identifier DCNL :retval The response body is a mapping of the following form:: DCNL {\'member_id\': <MEMBER>, DCNL \'image_id\': <IMAGE>, DCNL \'status\': <MEMBER_STATUS> DCNL \'created_at\': .., DCNL \'updated_at\': ..}'
'Return a list of dictionaries indicating the members of the DCNL image, i.e., those tenants the image is shared with. DCNL :param req: the Request object coming from the wsgi layer DCNL :param image_id: The image identifier DCNL :retval The response body is a mapping of the following form:: DCNL {\'members\': [ DCNL {\'member_id\': <MEMBER>, DCNL \'image_id\': <IMAGE>, DCNL \'status\': <MEMBER_STATUS> DCNL \'created_at\': .., DCNL \'updated_at\': ..}, ..'
'Removes a membership from the image.'
'Parse a json pointer. DCNL Json Pointers are defined in DCNL http://tools.ietf.org/html/draft-pbryan-zyp-json-pointer . DCNL The pointers use \'/\' for separation between object attributes, such DCNL that \'/A/B\' would evaluate to C in {"A": {"B": "C"}}. A \'/\' character DCNL in an attribute name is encoded as "~1" and a \'~\' character is encoded DCNL as "~0".'
'Validate a json pointer. DCNL We only accept a limited form of json pointers. Specifically, we do DCNL not allow multiple levels of indirection, so there can only be one \'/\' DCNL in the pointer, located at the start of the string.'
'Return a list of dictionaries indicating the members of the DCNL image, i.e., those tenants the image is shared with. DCNL :param req: the Request object coming from the wsgi layer DCNL :param image_id: The opaque image identifier DCNL :retval The response body is a mapping of the following form:: DCNL {\'members\': [ DCNL {\'member_id\': <MEMBER>, DCNL \'can_share\': <SHARE_PERMISSION>, ...}, ...'
'Removes a membership from the image.'
'This will cover the missing \'show\' and \'create\' actions'
'Adds a membership to the image, or updates an existing one. DCNL If a body is present, it is a dict with the following format:: DCNL {"member": { DCNL "can_share": [True|False] DCNL If "can_share" is provided, the member\'s ability to share is DCNL set accordingly.  If it is not provided, existing memberships DCNL remain unchanged and new memberships default to False.'
'Replaces the members of the image with those specified in the DCNL body.  The body is a dict with the following format:: DCNL {"memberships": [ DCNL {"member_id": <MEMBER_ID>, DCNL ["can_share": [True|False]]}, ...'
'Retrieves list of image memberships for the given member. DCNL :param req: the Request object coming from the wsgi layer DCNL :param id: the opaque member identifier DCNL :retval The response body is a mapping of the following form:: DCNL {\'shared_images\': [ DCNL {\'image_id\': <IMAGE>, DCNL \'can_share\': <SHARE_PERMISSION>, ...}, ...'
'Authorize an action against our policies'
'Returns the following information for all public, available images: DCNL * id -- The opaque image identifier DCNL * name -- The name of the image DCNL * disk_format -- The disk image format DCNL * container_format -- The "container" format of the image DCNL * checksum -- MD5 checksum of the image data DCNL * size -- Size of image data in bytes DCNL :param req: The WSGI/Webob Request object DCNL :retval The response body is a mapping of the following form:: DCNL {\'images\': [ DCNL {\'id\': <ID>, DCNL \'name\': <NAME>, DCNL \'disk_format\': <DISK_FORMAT>, DCNL \'container_format\': <DISK_FORMAT>, DCNL \'checksum\': <CHECKSUM> DCNL \'size\': <SIZE>}, ...'
'Returns detailed information for all public, available images DCNL :param req: The WSGI/Webob Request object DCNL :retval The response body is a mapping of the following form:: DCNL {\'images\': [ DCNL {\'id\': <ID>, DCNL \'name\': <NAME>, DCNL \'size\': <SIZE>, DCNL \'disk_format\': <DISK_FORMAT>, DCNL \'container_format\': <CONTAINER_FORMAT>, DCNL \'checksum\': <CHECKSUM>, DCNL \'min_disk\': <MIN_DISK>, DCNL \'min_ram\': <MIN_RAM>, DCNL \'store\': <STORE>, DCNL \'status\': <STATUS>, DCNL \'created_at\': <TIMESTAMP>, DCNL \'updated_at\': <TIMESTAMP>, DCNL \'deleted_at\': <TIMESTAMP>|<NONE>, DCNL \'properties\': {\'distro\': \'Ubuntu 10.04 LTS\', ...}}, ...'
'Extracts necessary query params from request. DCNL :param req: the WSGI Request object DCNL :retval dict of parameters that can be used by registry client'
'Return a dictionary of query param filters from the request DCNL :param req: the Request object coming from the wsgi layer DCNL :retval a dict of key/value filters'
'Returns metadata about an image in the HTTP headers of the DCNL response object DCNL :param req: The WSGI/Webob Request object DCNL :param id: The opaque image identifier DCNL :retval similar to \'show\' method but without image_data DCNL :raises HTTPNotFound if image metadata is not available to user'
'External sources (as specified via the location or copy-from headers) DCNL are supported only over non-local store types, i.e. S3, Swift, HTTP. DCNL Note the absence of file:// for security reasons, see LP bug #942118. DCNL If the above constraint is violated, we reject with 400 "Bad Request".'
'Returns an iterator that can be used to retrieve an image\'s DCNL data along with the image metadata. DCNL :param req: The WSGI/Webob Request object DCNL :param id: The opaque image identifier DCNL :raises HTTPNotFound if image is not available to user'
'Adds the image metadata to the registry and assigns DCNL an image identifier if one is not supplied in the request DCNL headers. Sets the image\'s status to `queued`. DCNL :param req: The WSGI/Webob Request object DCNL :param id: The opaque image identifier DCNL :param image_meta: The image metadata DCNL :raises HTTPConflict if image already exists DCNL :raises HTTPBadRequest if image metadata is not valid'
'Uploads the payload of the request to a backend store in DCNL Glance. If the `x-image-meta-store` header is set, Glance DCNL will attempt to use that scheme; if not, Glance will use the DCNL scheme set by the flag `default_store` to find the backing store. DCNL :param req: The WSGI/Webob Request object DCNL :param image_meta: Mapping of metadata about image DCNL :raises HTTPConflict if image already exists DCNL :retval The location where the image was stored'
'Sets the image status to `active` and the image\'s location DCNL attribute. DCNL :param req: The WSGI/Webob Request object DCNL :param image_id: Opaque image identifier DCNL :param location: Location of where Glance stored this image'
'Marks the image status to `killed`. DCNL :param req: The WSGI/Webob Request object DCNL :param image_id: Opaque image identifier'
'Mark image killed without raising exceptions if it fails. DCNL Since _kill is meant to be called from exceptions handlers, it should DCNL not raise itself, rather it should just log its error. DCNL :param req: The WSGI/Webob Request object DCNL :param image_id: Opaque image identifier'
'Safely uploads the image data in the request payload DCNL and activates the image in the registry after a successful DCNL upload. DCNL :param req: The WSGI/Webob Request object DCNL :param image_meta: Mapping of metadata about image DCNL :retval Mapping of updated image data'
'Ensures that all required image metadata values are valid.'
'Adds a new image to Glance. Four scenarios exist when creating an DCNL image: DCNL 1. If the image data is available directly for upload, create can be DCNL passed the image data as the request body and the metadata as the DCNL request headers. The image will initially be \'queued\', during DCNL upload it will be in the \'saving\' status, and then \'killed\' or DCNL \'active\' depending on whether the upload completed successfully. DCNL 2. If the image data exists somewhere else, you can upload indirectly DCNL from the external source using the x-glance-api-copy-from header. DCNL Once the image is uploaded, the external store is not subsequently DCNL consulted, i.e. the image content is served out from the configured DCNL glance image store.  State transitions are as for option #1. DCNL 3. If the image data exists somewhere else, you can reference the DCNL source using the x-image-meta-location header. The image content DCNL will be served out from the external store, i.e. is never uploaded DCNL to the configured glance image store. DCNL 4. If the image data is not available yet, but you\'d like reserve a DCNL spot for it, you can omit the data and a record will be created in DCNL the \'queued\' state. This exists primarily to maintain backwards DCNL compatibility with OpenStack/Rackspace API semantics. DCNL The request body *must* be encoded as application/octet-stream, DCNL otherwise an HTTPBadRequest is returned. DCNL Upon a successful save of the image data and metadata, a response DCNL containing metadata about the image is returned, including its DCNL opaque identifier. DCNL :param req: The WSGI/Webob Request object DCNL :param image_meta: Mapping of metadata about image DCNL :param image_data: Actual image data that is to be stored DCNL :raises HTTPBadRequest if x-image-meta-location is missing DCNL and the request body is not application/octet-stream DCNL image data.'
'Updates an existing image with the registry. DCNL :param request: The WSGI/Webob Request object DCNL :param id: The opaque image identifier DCNL :retval Returns the updated image information as a mapping'
'Deletes the image and all its chunks from the Glance DCNL :param req: The WSGI/Webob Request object DCNL :param id: The opaque image identifier DCNL :raises HttpBadRequest if image registry is invalid DCNL :raises HttpNotFound if image or any chunk is not available DCNL :raises HttpUnauthorized if image or any chunk is not DCNL deleteable by the requesting user'
'Grabs the storage backend for the supplied store name DCNL or raises an HTTPBadRequest (400) response DCNL :param request: The WSGI/Webob Request object DCNL :param scheme: The backend store scheme DCNL :raises HTTPNotFound if store does not exist'
'Given a response and mapping of image metadata, injects DCNL the Response with a set of HTTP headers for the image DCNL metadata. Each main image metadata field is injected DCNL as a HTTP header with key \'x-image-meta-<FIELD>\' except DCNL for the properties field, which is further broken out DCNL into a set of \'x-image-meta-property-<KEY>\' headers DCNL :param response: The Webob Response object DCNL :param image_meta: Mapping of image metadata'
'Build a relative url to reach the image defined by image_meta.'
'Grabs the image metadata for an image with a supplied DCNL identifier or raises an HTTPNotFound (404) response DCNL :param request: The WSGI/Webob Request object DCNL :param image_id: The opaque image identifier DCNL :raises HTTPNotFound if image does not exist'
'Same as get_image_meta_or_404 except that it will raise a 404 if the DCNL image isn\'t \'active\'.'
'Authorize request against \'manage_image_cache\' policy'
'GET /cached_images DCNL Returns a mapping of records about cached images.'
'DELETE /cached_images/<IMAGE_ID> DCNL Removes an image from the cache.'
'DELETE /cached_images - Clear all active cached images DCNL Removes all images from the cache.'
'GET /queued_images DCNL Returns a mapping of records about queued images.'
'PUT /queued_images/<IMAGE_ID> DCNL Queues an image for caching. We do not check to see if DCNL the image is in the registry here. That is done by the DCNL prefetcher...'
'DELETE /queued_images/<IMAGE_ID> DCNL Removes an image from the cache.'
'DELETE /queued_images - Clear all active queued images DCNL Removes all images from the cache.'
'Respond to a request for all OpenStack API versions.'
'Save this object'
'Delete this object'
'dict.update() behaviour.'
'Initialize the Store'
'Configure the Store to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method.'
'Returns a tuple of schemes which this store can handle.'
'Returns the store location class that is used by this store.'
'This is like `configure` except that it\'s specifically for DCNL configuring the store to accept objects. DCNL If the store was not able to successfully configure DCNL itself, it should raise `exception.BadStoreConfiguration`.'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns a tuple of generator DCNL (for reading the image file) and image_size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns the size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Add method that raises an exception because the Store was DCNL not able to be configured properly and therefore the add() DCNL method would error out.'
'Stores an image file with supplied identifier to the backend DCNL storage system and returns a tuple containing information DCNL about the stored image. DCNL :param image_id: The opaque image identifier DCNL :param image_file: The image data to write, as a file-like object DCNL :param image_size: The size of the image data to write, in bytes DCNL :retval tuple of URL in backing store, bytes written, and checksum DCNL :raises `glance.common.exception.Duplicate` if the image already DCNL existed'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file to delete DCNL :location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Sets the read and write access control list for an image in the DCNL backend store. DCNL :location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :public A boolean indicating whether the image should be public. DCNL :read_tenants A list of tenant strings which should be granted DCNL read access for an image. DCNL :write_tenants A list of tenant strings which should be granted DCNL write access for an image.'
'Parse URLs. This method fixes an issue where credentials specified DCNL in the URL are interpreted differently in Python 2.6.1+ than prior DCNL versions of Python. DCNL Note that an Amazon AWS secret key can contain the forward slash, DCNL which is entirely retarded, and breaks urlparse miserably. DCNL This function works around that issue.'
'Return an iterator over the image file'
'Return entire string value... used in testing'
'Close the internal file pointer'
'Configure the Store to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadStoreConfiguration`'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns a tuple of generator DCNL (for reading the image file) and image_size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns the image_size (or 0 DCNL if unavailable) DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri()'
'Stores an image file with supplied identifier to the backend DCNL storage system and returns a tuple containing information DCNL about the stored image. DCNL :param image_id: The opaque image identifier DCNL :param image_file: The image data to write, as a file-like object DCNL :param image_size: The size of the image data to write, in bytes DCNL :retval tuple of URL in backing store, bytes written, and checksum DCNL :raises `glance.common.exception.Duplicate` if the image already DCNL existed DCNL S3 writes the image data using the scheme: DCNL s3://<ACCESS_KEY>:<SECRET_KEY>@<S3_URL>/<BUCKET>/<OBJ> DCNL where: DCNL <USER> = ``s3_store_user`` DCNL <KEY> = ``s3_store_key`` DCNL <S3_HOST> = ``s3_store_host`` DCNL <BUCKET> = ``s3_store_bucket`` DCNL <ID> = The id of the image being added'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file to delete DCNL :location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises NotFound if image does not exist'
'Initialize the object DCNL :param wrappped: the wrapped iterator or filelike. DCNL :param size: the size of data available'
'Delegate iteration to the wrapped instance.'
'Index into the next chunk (or previous chunk in the case where DCNL the last data returned was not fully consumed). DCNL :param i: a slice-to-the-end'
'Implemented by subclasses to return the next element'
'Return entire string value... used in testing'
'Length accessor.'
'Configure the Store to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadStoreConfiguration`'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns a generator for reading DCNL the image file DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Create an rbd image. If librbd supports it, DCNL make it a cloneable snapshot, so that copy-on-write DCNL volumes can be created from it. DCNL :retval `glance.store.rbd.StoreLocation` object'
'Stores an image file with supplied identifier to the backend DCNL storage system and returns a tuple containing information DCNL about the stored image. DCNL :param image_id: The opaque image identifier DCNL :param image_file: The image data to write, as a file-like object DCNL :param image_size: The size of the image data to write, in bytes DCNL :retval tuple of URL in backing store, bytes written, and checksum DCNL :raises `glance.common.exception.Duplicate` if the image already DCNL existed'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file to delete DCNL :location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises NotFound if image does not exist'
'Parse URLs. This method fixes an issue where credentials specified DCNL in the URL are interpreted differently in Python 2.6.1+ than prior DCNL versions of Python. It also deals with the peculiarity that new-style DCNL Swift URIs have where a username can contain a \':\', like so: DCNL swift://account:user:pass@authurl.com/container/obj'
'Creates a fully-qualified auth url that the Swift client library can DCNL use. The scheme for the auth_url is determined using the scheme DCNL included in the `location` field. DCNL HTTPS is assumed, unless \'swift+http\' is specified.'
'Creates a missing container in Swift if the DCNL ``swift_store_create_container_on_put`` option is set. DCNL :param container: Name of container to create DCNL :param connection: Connection to swift service'
'Create a new Location object. DCNL :param store_name: The string identifier/scheme of the storage backend DCNL :param store_location_class: The store location class to use DCNL for this location instance. DCNL :param image_id: The identifier of the image in whatever storage DCNL backend is used. DCNL :param uri: Optional URI to construct location from DCNL :param store_specs: Dictionary of information about the location DCNL of the image that is dependent on the backend DCNL store'
'Returns the Glance image URI, which is the host:port of the API server DCNL along with /images/<IMAGE_ID>'
'Subclasses should implement any processing of the self.specs collection DCNL such as storing credentials and possibly establishing connections.'
'Subclasses should implement a method that returns an internal URI that, DCNL when supplied to the StoreLocation instance, can be interpreted by the DCNL StoreLocation\'s parse_uri() method. The URI returned from this method DCNL shall never be public and only used internally within Glance, so it is DCNL fine to encode credentials in this URI.'
'Subclasses should implement a method that accepts a string URI and DCNL sets appropriate internal fields such that a call to get_uri() will DCNL return a proper internal URI'
'Parse URLs. This method fixes an issue where credentials specified DCNL in the URL are interpreted differently in Python 2.6.1+ than prior DCNL versions of Python.'
'Return an iterator over the image file'
'Close the internal file pointer'
'Configure the Store to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadStoreConfiguration`'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns a tuple of generator DCNL (for reading the image file) and image_size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file and returns the image size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises `glance.exception.NotFound` if image does not exist DCNL :rtype int'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file to delete DCNL :location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri() DCNL :raises NotFound if image does not exist DCNL :raises Forbidden if cannot delete because of permissions'
'Stores an image file with supplied identifier to the backend DCNL storage system and returns a tuple containing information DCNL about the stored image. DCNL :param image_id: The opaque image identifier DCNL :param image_file: The image data to write, as a file-like object DCNL :param image_size: The size of the image data to write, in bytes DCNL :retval tuple of URL in backing store, bytes written, and checksum DCNL :raises `glance.common.exception.Duplicate` if the image already DCNL existed DCNL :note By default, the backend writes the image data to a file DCNL `/<DATADIR>/<ID>`, where <DATADIR> is the value of DCNL the filesystem_store_datadir configuration option and <ID> DCNL is the supplied image ID.'
'Parse URLs. This method fixes an issue where credentials specified DCNL in the URL are interpreted differently in Python 2.6.1+ than prior DCNL versions of Python.'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns a tuple of generator DCNL (for reading the image file) and image_size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri()'
'Takes a `glance.store.location.Location` object that indicates DCNL where to find the image file, and returns the size DCNL :param location `glance.store.location.Location` object, supplied DCNL from glance.store.location.get_location_from_uri()'
'Returns connection class for accessing the resource. Useful DCNL for dependency injection and stubouts in testing...'
'Test GET with no redirect'
'Test GET with one 302 FOUND redirect'
'Test GET with one 302 FOUND redirect w/ a query string'
'Test we don\'t redirect forever.'
'Test POST with 302 redirect'
'Test redirect to one host and then another.'
'Cannot specify a deleted image as a marker.'
'Specify a deleted image as a marker if showing deleted images.'
'Specify a deleted image as a marker if showing deleted images. DCNL A non-admin user has to explicitly ask for deleted DCNL images, and should only see deleted images in the results'
'Paginate through a list of images using limit and marker'
'Owner1 should see images it owns that are shared with User1'
'User1 should see all images shared with User1'
'User2 should see no images shared with User1'
'Admin should see all images shared with User1'
'Owner1 should see all memberships of its image'
'Admin should see all memberships of owner1\'s image'
'User1 should see its own membership of owner1\'s image'
'User2 should see its own membership of owner1\'s image'
'User3 should see no memberships of owner1\'s image'
'We test that glance-control falls back to a temporary pid file DCNL for non-existent pid file directory that cannot be created.'
'We test that glance-control falls back to a temporary pid file DCNL for unwriteable pid file directory.'
'We test that the \'--respawn\' option causes the API server DCNL to be respawned after death but not after a deliberate stop'
'We test that the \'--respawn\' option doesn\'t cause bouncing DCNL API server to be respawned'
'Exercise `glance-control api reload`'
'Ensure child processes don\'t respawn forever if they can\'t start'
'Test logging output proper when verbose and debug DCNL is on.'
'Test logging output proper when verbose and debug DCNL is off.'
'Test that we notice when our log file has been rotated'
'test that images don\'t get deleted immediatly and that the scrubber DCNL scrubs them'
'test that the glance-scrubber script runs successfully when not in DCNL daemon mode'
'test that the glance-scrubber script runs successfully against a swift DCNL backend when not in daemon mode'
'test that files written to scrubber_data_dir use DCNL metadata_encryption_key when available to encrypt the location'
'Test that the scrubber handles the case where the image to be scrubbed DCNL is missing from swift'
'Creates a new Server object. DCNL :param test_dir: The directory where all test stuff is kept. This is DCNL passed from the FunctionalTestCase. DCNL :param port: The port to start a server up on.'
'Writes the configuration file for the server to its intended DCNL destination.  Returns the name of the configuration file and DCNL the over-ridden config content (may be useful for populating DCNL error messages).'
'Starts the server. DCNL Any kwargs passed to this method will override the configuration DCNL value in the conf file used in starting the servers.'
'Call glane-control reload for a specific server. DCNL Any kwargs passed to this method will override the configuration DCNL value in the conf file used in starting the servers.'
'Create database if required for this server'
'Spin down the server.'
'Makes sure anything we created or started up in the DCNL tests are destroyed or spun down'
'Starts a server on an unused port. DCNL Any kwargs passed to this method will override the configuration DCNL value in the conf file used in starting the server. DCNL :param server: the server to launch DCNL :param expect_launch: true iff the server is expected to DCNL successfully start DCNL :param expect_exit: true iff the launched process is expected DCNL to exit in a timely fashion DCNL :param expected_exitcode: expected exitcode from the launcher'
'Starts a server, with retries if the server launches but DCNL fails to start listening on the expected port. DCNL :param server: the server to launch DCNL :param port_name: the name of the port attribute DCNL :param max_retries: the maximum number of attempts DCNL :param expect_launch: true iff the server is expected to DCNL successfully start DCNL :param expect_exit: true iff the launched process is expected DCNL to exit in a timely fashion DCNL :param expect_confirmation: true iff launch confirmation msg DCNL expected on stdout'
'Starts the API and Registry servers (bin/glance-control api start DCNL & bin/glance-control registry start) on unused ports. DCNL Any kwargs passed to this method will override the configuration DCNL value in the conf file used in starting the servers.'
'Simple ping on the port. If responsive, return True, else DCNL return False. DCNL :note We use raw sockets, not ping here, since ping uses ICMP and DCNL has no concept of ports...'
'Tight loop, waiting for the given server port(s) to be available. DCNL Returns when all are pingable. There is a timeout on waiting DCNL for the servers to come up. DCNL :param servers: Glance server ports to ping DCNL :param expect_launch: Optional, true iff the server(s) are DCNL expected to successfully start DCNL :param timeout: Optional, defaults to 3 seconds DCNL :return: None if launch expectation is met, otherwise an DCNL assertion message'
'Reload a running server DCNL Any kwargs passed to this method will override the configuration DCNL value in the conf file used in starting the server. DCNL :param server: the server to launch DCNL :param expect_launch: true iff the server is expected to DCNL successfully start DCNL :param expect_exit: true iff the launched process is expected DCNL to exit in a timely fashion DCNL :param expected_exitcode: expected exitcode from the launcher'
'Called to stop a single server in a normal fashion using the DCNL glance-control stop method to gracefully shut the server down. DCNL :param server: the server to stop'
'Called to stop the started servers in a normal fashion. Note DCNL that cleanup() will stop the servers using a fairly draconian DCNL method of sending a SIGTERM signal to the servers. Here, we use DCNL the glance-control stop method to gracefully shut the server down. DCNL This method also asserts that the shutdown was clean, and so it DCNL is meant to be called during a normal test case sequence.'
'Provides a crude mechanism to run manual SQL commands for backend DCNL DB verification within the functional tests. DCNL The raw result set is returned.'
'Test DB creation by db_sync on a fresh DB'
'Test DB creation with db_auto_create False'
'Store image data in the backend manually DCNL :param image_id: image identifier DCNL :param image_data: string representing image data fixture DCNL :return URI referencing newly-created backend object'
'Add, get and delete an image'
'Get an image that was created externally to Glance'
'Upload an image that is split into multiple swift objects. DCNL We specifically check the case that DCNL image_size % swift_store_large_object_chunk_size != 0 to DCNL ensure we aren\'t losing image data.'
'Ensure an image is properly configured when using multitenancy.'
'Ensure BigInteger not mapped to BIGINT'
'Test rate limited response'
'Test rate limited response with retry'
'Test service unavailable response'
'Test service unavailable response with retry'
'Test expectation failed response'
'Test server error response'
'Adds an image with supplied name and returns the newly-created DCNL image identifier.'
'Return True if supplied image ID is cached, False otherwise'
'Return True if supplied image ID is cached, False otherwise'
'Test that cache index command works'
'Test that cache index command works'
'Test that we can queue and fetch images using the DCNL CLI utility'
'We test that putting the cache middleware into the DCNL application pipeline gives us transparent image caching'
'Ensure the v2 API image transfer calls trigger caching'
'We test that caching is no longer broken for remote images'
'Adds an image and returns the newly-added image DCNL identifier'
'Verify no images in the image cache'
'Tests that cached images are queryable'
'Tests that cached images may be deleted'
'Tests that images may be queued and prefetched'
'Test to see if the pre-requisites for the image cache DCNL are working (python-xattr installed and xattr support on the DCNL filesystem)'
'Test to see if the pre-requisites for the image cache DCNL are working (python-xattr installed and xattr support on the DCNL filesystem)'
'Test to see if the pre-requisites for the image cache DCNL are working (python-xattr installed and xattr support on the DCNL filesystem)'
'Test to see if the pre-requisites for the image cache DCNL are working (python-xattr installed and xattr support on the DCNL filesystem)'
'A test for LP bug #781410 -- glance should fail more gracefully DCNL on requests for images that have been removed from the fs'
'A test for LP bug #704854 -- Exception thrown by registry DCNL server is consumed by API server. DCNL We start both servers daemonized. DCNL We then use curl to try adding an image that does not DCNL meet validation requirements on the registry server and test DCNL that the error returned from the API server to curl is appropriate'
'Ensure we can copy from an external image in from_store.'
'Ensure we can copy from an external image in Swift.'
'Ensure we can copy from an external image in S3.'
'Ensure we can copy from an external image in HTTP. DCNL :param exists: True iff the external source image exists'
'Ensure we can\'t copy from file'
'We test the following sequential series of actions: DCNL 0. GET /images DCNL - Verify no public images DCNL 1. GET /images/detail DCNL - Verify no public images DCNL 2. POST /images with public image named Image1 DCNL and no custom properties DCNL - Verify 201 returned DCNL 3. HEAD image DCNL - Verify HTTP headers have correct information we just added DCNL 4. GET image DCNL - Verify all information on image we just added is correct DCNL 5. GET /images DCNL - Verify the image we just added is returned DCNL 6. GET /images/detail DCNL - Verify the image we just added is returned DCNL 7. PUT image with custom properties of "distro" and "arch" DCNL - Verify 200 returned DCNL 8. GET image DCNL - Verify updated information about image was stored DCNL 9. PUT image DCNL - Remove a previously existing property. DCNL 10. PUT image DCNL - Add a previously deleted property.'
'We test the process flow where a user registers an image DCNL with Glance but does not immediately upload an image file. DCNL Later, the user uploads an image file using a PUT operation. DCNL We track the changing of image status throughout this process. DCNL 0. GET /images DCNL - Verify no public images DCNL 1. POST /images with public image named Image1 with no location DCNL attribute and no image data. DCNL - Verify 201 returned DCNL 2. GET /images DCNL - Verify one public image DCNL 3. HEAD image DCNL - Verify image now in queued status DCNL 4. PUT image with image data DCNL - Verify 200 returned DCNL 5. HEAD images DCNL - Verify image now in active status DCNL 6. GET /images DCNL - Verify one public image'
'A test against the actual datastore backend for the registry DCNL to ensure that the image size property is not truncated. DCNL :see https://bugs.launchpad.net/glance/+bug/739433'
'A test to ensure that an image with size explicitly set to zero DCNL has status that immediately transitions to active.'
'A test that errors coming from the POST API do not DCNL get consumed and print the actual error message, and DCNL not something like &lt;traceback object at 0x1918d40&gt; DCNL :see https://bugs.launchpad.net/glance/+bug/755912'
'Set up four test images and ensure each query param filter works'
'Ensure marker and limit query params work'
'Set up three test images and ensure each query param filter works'
'Upload initial image, then attempt to upload duplicate image'
'We test the following: DCNL 0. GET /images/1 DCNL - Verify 404 DCNL 1. DELETE /images/1 DCNL - Verify 404'
'We test that a mis-configured default_store causes the API server DCNL to fail to start.'
'We test that missing container/disk format fails with 400 "Bad Request" DCNL :see https://bugs.launchpad.net/glance/+bug/933702'
'We test that missing container/disk format only fails with DCNL 400 "Bad Request" when the image content is PUT (i.e. not DCNL on the original POST of a queued image). DCNL :see https://bugs.launchpad.net/glance/+bug/937216'
'Test mismatched attribute.'
'Test mismatched size.'
'Test mismatched checksum.'
'We test the following sequential series of actions: DCNL 0. GET /images DCNL - Verify no public images DCNL 1. GET /images/detail DCNL - Verify no public images DCNL 2. POST /images with public image named Image1 DCNL and no custom properties DCNL - Verify 201 returned DCNL 3. HEAD image DCNL - Verify HTTP headers have correct information we just added DCNL 4. GET image DCNL - Verify all information on image we just added is correct DCNL 5. GET /images DCNL - Verify the image we just added is returned DCNL 6. GET /images/detail DCNL - Verify the image we just added is returned DCNL 7. PUT image with custom properties of "distro" and "arch" DCNL - Verify 200 returned DCNL 8. GET image DCNL - Verify updated information about image was stored DCNL 9. PUT image DCNL - Remove a previously existing property. DCNL 10. PUT image DCNL - Add a previously deleted property.'
'We test the process flow where a user registers an image DCNL with Glance but does not immediately upload an image file. DCNL Later, the user uploads an image file using a PUT operation. DCNL We track the changing of image status throughout this process. DCNL 0. GET /images DCNL - Verify no public images DCNL 1. POST /images with public image named Image1 with no location DCNL attribute and no image data. DCNL - Verify 201 returned DCNL 2. GET /images DCNL - Verify one public image DCNL 3. HEAD image DCNL - Verify image now in queued status DCNL 4. PUT image with image data DCNL - Verify 200 returned DCNL 5. HEAD image DCNL - Verify image now in active status DCNL 6. GET /images DCNL - Verify one public image'
'We test that various calls to the images and root endpoints are DCNL handled properly, and that usage of the Accept: header does DCNL content negotiation properly.'
'A test against the actual datastore backend for the registry DCNL to ensure that the image size property is not truncated. DCNL :see https://bugs.launchpad.net/glance/+bug/739433'
'A test that errors coming from the POST API do not get consumed DCNL and print the actual error message, and DCNL not something like &lt;traceback object at 0x1918d40&gt; DCNL :see https://bugs.launchpad.net/glance/+bug/755912'
'Set up four test images and ensure each query param filter works'
'Ensure marker and limit query params work'
'Set up three test images and ensure each query param filter works'
'Upload initial image, then attempt to upload duplicate image'
'We test the following: DCNL 0. GET /images DCNL - Verify no public images DCNL 1. DELETE random image DCNL - Verify 404'
'Spin up the api servers with multiprocessing on'
'Ensure an interrupt signal does not cause a respawn storm. DCNL See bug #978130'
'Test that versioning is handled properly through all channels'
'Test that versioning is handled properly through all channels'
'Respond to an image HEAD request fake metadata'
'Respond to an image GET request with fake image content.'
'Simple override to prevent writing crap to stderr...'
'Override some configuration values. DCNL The keyword arguments are the names of configuration options to DCNL override and their values. DCNL If a group argument is supplied, the overrides are applied to DCNL the specified configuration option group. DCNL All overrides are automatically cleared at the end of the current DCNL test by the fixtures cleanup process.'
'Perform a context visibility test.  Creates a (fake) image DCNL with the specified owner and is_public attributes, then DCNL creates a context with the given keyword arguments and expects DCNL exp_res as the result of an is_image_visible() call on the DCNL context.'
'Perform a context sharability test.  Creates a (fake) image DCNL with the specified owner and is_public attributes, then DCNL creates a context with the given keyword arguments and expects DCNL exp_res as the result of an is_image_sharable() call on the DCNL context.  If membership is not None, its value will be passed DCNL in as the \'membership\' keyword argument of DCNL is_image_sharable().'
'Tests that an empty context (with is_admin set to True) can DCNL access an image with is_public set to True.'
'Tests that an empty context (with is_admin set to True) can DCNL access an owned image with is_public set to True.'
'Tests that an empty context (with is_admin set to True) can DCNL access an image with is_public set to False.'
'Tests that an empty context (with is_admin set to True) can DCNL access an owned image with is_public set to False.'
'Tests that an empty context (with is_admin set to False) can DCNL not share an image, with or without membership.'
'Tests that an anonymous context (with is_admin set to False) DCNL can access an image with is_public set to True.'
'Tests that an anonymous context (with is_admin set to False) DCNL can access an owned image with is_public set to True.'
'Tests that an anonymous context (with is_admin set to False) DCNL can access an unowned image with is_public set to False.'
'Tests that an anonymous context (with is_admin set to False) DCNL cannot access an owned image with is_public set to False.'
'Tests that an empty context (with is_admin set to True) can DCNL not share an image, with or without membership.'
'Tests that an authenticated context (with is_admin set to DCNL False) can access an image with is_public set to True.'
'Tests that an authenticated context (with is_admin set to DCNL False) can access an image (which it does not own) with DCNL is_public set to True.'
'Tests that an authenticated context (with is_admin set to DCNL False) can access an image (which it does own) with is_public DCNL set to True.'
'Tests that an authenticated context (with is_admin set to DCNL False) can access an image with is_public set to False.'
'Tests that an authenticated context (with is_admin set to DCNL False) cannot access an image (which it does not own) with DCNL is_public set to False.'
'Tests that an authenticated context (with is_admin set to DCNL False) can access an image (which it does own) with is_public DCNL set to False.'
'Tests that an authenticated context (with is_admin set to DCNL False) cannot share an image it neither owns nor is shared DCNL with it.'
'Tests that an authenticated context (with is_admin set to DCNL True) can share an image it neither owns nor is shared with DCNL it.'
'Tests that an authenticated context (with is_admin set to DCNL False) can share an image it owns, even if it is not shared DCNL with it.'
'Tests that an authenticated context (with is_admin set to DCNL False) cannot share an image it does not own even if it is DCNL shared with it, but with can_share = False.'
'Tests that an authenticated context (with is_admin set to DCNL False) can share an image it does not own if it is shared with DCNL it with can_share = True.'
'An image should streamed regardless of expected_size'
'Raise Forbidden if a rule for given action is set to false.'
'Test that plugin created without required DCNL credential pieces raises an exception'
'Test that a 400 during authenticate raises exception.AuthBadRequst'
'Test that a 400 during authenticate raises exception.AuthBadRequst'
'Test v1 auth code paths'
'Test v2 auth code paths'
'Ensure unset metadata is not encoded in HTTP headers'
'Test that for various URIs, the correct Location DCNL object can be contructed and then the original URI DCNL returned via the get_store_uri() method.'
'Test that a URI with a non-existing scheme triggers exception'
'Test the specific StoreLocation for the Filesystem store'
'Test the specific StoreLocation for the HTTP store'
'Test the specific StoreLocation for the Swift store'
'Test the specific StoreLocation for the S3 store'
'Test the specific StoreLocation for the RBD store'
'Test that the backend returned by glance.store.get_backend_class DCNL is correct or raises an appropriate error.'
'Missing defined policy file should result in a default ruleset'
'Missing default policy file should result in a default ruleset'
'Ensure that the api filters out deleted image properties.'
'Ensure status of queued image is updated (LP bug #1048851)'
'Ensure status of queued image is updated (LP bug #1048851) DCNL to \'deleted\' when delayed_delete isenabled'
'Ensure that the serializer passes through invalid additional DCNL properties (i.e. non-string) without complaining.'
'Establish a clean test environment'
'Clear the test environment'
'Test correct set of public image returned'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by name in DCNL ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by status in DCNL descending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by disk_format in DCNL ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by container_format in DCNL descending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by size in ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by created_at in ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by updated_at in descending order.'
'Test correct set of images returned with marker param.'
'Test exception is raised when marker is invalid'
'Test correct number of images returned with limit param.'
'Test correct set of images returned with marker/limit params.'
'Test correct set of images returned with limit param == None.'
'Test correct set of public, name-filtered image returned. This DCNL is just a sanity check, we test the details call more in-depth.'
'Tests that the detailed info about public images returned'
'Test correct set of images returned with marker/limit params.'
'Test exception is raised when marker is invalid'
'Tests that a detailed call can be filtered by name'
'Tests that a detailed call can be filtered by status'
'Tests that a detailed call can be filtered by container_format'
'Tests that a detailed call can be filtered by disk_format'
'Tests that a detailed call can be filtered by size_max'
'Tests that a detailed call can be filtered by size_min'
'Tests that a detailed call can be filtered by size_min'
'Tests that a detailed call can be filtered by changes-since'
'Tests that a detailed call can be filtered by a property'
'Tests that a detailed call returns list of DCNL public images sorted alphabetically by disk_format in DCNL ascending order.'
'Tests that the detailed info about an image returned'
'Tests that NotFound is raised when getting a non-existing image'
'Tests that we can add image metadata and returns the new id'
'Tests that we can add image metadata with properties'
'Tests proper exception is raised if image with ID already exists'
'Tests proper exception is raised if a bad status is set'
'Tests that the /images PUT registry API updates the image'
'Tests non existing image update doesn\'t work'
'Tests that image metadata is deleted properly'
'Tests cannot delete non-existing image'
'Tests getting image members'
'Tests getting non-existent image members'
'Tests getting member images'
'Tests replacing image members'
'Tests deleting image members'
'Establish a clean test environment'
'Test a "normal" retrieval of an image in chunks'
'Test a "normal" retrieval of an image in chunks'
'Test a "normal" retrieval of an image in chunks'
'Test that trying to retrieve a s3 that doesn\'t exist DCNL raises an error'
'Test that we can add an image via the s3 backend'
'Test that having http(s):// in the s3serviceurl in config DCNL options works as expected.'
'Tests that adding an image with an existing identifier DCNL raises an appropriate exception'
'Tests that options without access key disables the add method'
'Tests that options without secret key disables the add method'
'Tests that options without host disables the add method'
'Test we can delete an existing image in the s3 store'
'Test that trying to delete a s3 that doesn\'t exist DCNL raises an error'
'Test that the s3 location can be derived from the host'
'Test that the s3 location cannot be derived from an unexpected host'
'Verify is_cached(1) returns 0, then add something to the cache DCNL and verify is_cached(1) returns 1.'
'Verify is_cached(1) returns 0, then add something to the cache DCNL and verify after a subsequent read from the cache that DCNL is_cached(1) returns 1.'
'Test convenience wrapper for opening a cache file via DCNL its image identifier.'
'Test convenience wrapper for querying cache file size via DCNL its image identifier.'
'Test delete method that removes an image from the cache'
'Test delete method that removes an image from the cache'
'Test the clean method removes expected images'
'Test that pruning the cache works as expected...'
'Test that an image_cache_max_size of 0 doesn\'t kill the pruner DCNL This is a test specifically for LP #1039854'
'Test that queueing works properly'
'Test to see if open_for_write works in normal case'
'Test to see if open_for_write works in a failure case for each driver DCNL This case is where an exception is raised while the file is being DCNL written. The image is partially filled in cache and filling wont resume DCNL so verify the image is moved to invalid/ directory'
'Test to see if the caching iterator interacts properly with the driver DCNL When the iterator completes going through the data the driver should DCNL have closed the image and placed it correctly'
'Test that when the backend fails, caching_iter does not continue trying DCNL to consume data, and rolls back the cache.'
'Test to see if the caching iterator interacts properly with the driver DCNL in a case where the iterator is only partially consumed. In this case DCNL the image is only partially filled in cache and filling wont resume. DCNL When the iterator goes out of scope the driver should have closed the DCNL image and moved it from incomplete/ to invalid/'
'Test to see if the pre-requisites for the image cache DCNL are working (python-xattr installed and xattr support on the DCNL filesystem)'
'Test to see if the pre-requisites for the image cache DCNL are working (python-sqlite3 installed)'
'Verifies that the headers returned by conversion code are unicode. DCNL Headers are passed via http in non-testing mode, which automatically DCNL converts them to unicode. Verifying that the method does the DCNL conversion proves that we aren\'t passing data that works in tests DCNL but will fail in production.'
'Verifies that data is the same after being passed through headers'
'Test GET with no redirect'
'Test that we can get the size of an object in the swift store'
'Test that single tenant uris work with multi tenant on.'
'Test a "normal" retrieval of an image in chunks'
'Test a retrieval from Swift with an HTTP authurl. This is DCNL specified either via a Location header with swift+http:// or using DCNL http:// in the swift_store_auth_address config value'
'Test that trying to retrieve a swift that doesn\'t exist DCNL raises an error'
'Test that we can add an image via the swift backend'
'Test that we can add an image via the swift backend with DCNL a variety of different auth_address values'
'Tests that adding an image with a non-existing container DCNL raises an appropriate exception'
'Tests that adding an image with a non-existing container DCNL creates the container automatically if flag is set'
'Tests that adding a very large image. We simulate the large DCNL object by setting store.large_object_size to a small number DCNL and then verify that there have been a number of calls to DCNL put_object()...'
'Tests that adding an image to Swift which has both an unknown size and DCNL exceeds Swift\'s maximum limit of 5GB is correctly uploaded. DCNL We avoid the overhead of creating a 5GB object for this test by DCNL temporarily setting MAX_SWIFT_OBJECT_SIZE to 1KB, and then adding DCNL an object of 5KB. DCNL Bug lp:891738'
'Tests that adding an image with an existing identifier DCNL raises an appropriate exception'
'Tests that options without user disables the add method'
'Tests that options without key disables the add method'
'Tests that options without auth address disables the add method'
'Test we can delete an existing image in the swift store'
'Test that trying to delete a swift that doesn\'t exist DCNL raises an error'
'Test that we can set a public read acl.'
'Test that we can set read acl for tenants.'
'Test that we can set write acl for tenants.'
'Establish a clean test environment'
'Replicate what goes on in the Swift driver with the DCNL repeated creation of the ChunkReader object'
'Test for determining that when an admin tries to download a deleted DCNL image it returns 404 Not Found error.'
'Test for determining image is deleted from cache when it is not found DCNL in Glance Registry.'
'Establish a clean test environment'
'Test that a bad sql_connection option supplied to the registry DCNL API controller results in a) an Exception being thrown and b) DCNL a message being logged to the registry log file...'
'Establish a clean test environment'
'Clear the test environment'
'Tests that the /images/<id> registry API endpoint DCNL returns the expected image'
'Tests that the /images/<id> registry API endpoint DCNL returns a 404 for an unknown image id'
'Tests that the /images/<id> registry API endpoint DCNL returns a 404 for an invalid (therefore unknown) image id'
'Tests that the /images/<id> registry API endpoint DCNL returns a 200 for deleted image to admin user.'
'Tests that the /images/<id> registry API endpoint DCNL returns a 404 for deleted image to non-admin user.'
'Tests that the root registry API returns "index", DCNL which is a list of public images'
'Tests that the /images registry API returns list of DCNL public images'
'Tests that the /images registry API returns list of DCNL public images that conforms to a marker query param'
'Tests that the /images registry API returns a 400 DCNL when an unknown marker is provided'
'Tests that the /images registry API returns a 400 DCNL when a malformed marker is provided'
'Tests that the /images registry API returns list of DCNL public images that conforms to a limit query param'
'Tests that the /images registry API returns list of DCNL public images that conforms to a limit query param'
'Tests that the /images registry API returns list of DCNL public images that conforms to a limit query param'
'Tests that the /images registry API returns list of DCNL public images that conforms to limit and marker query params'
'Tests that the /images registry API returns list of DCNL public images that have a specific name. This is really a sanity DCNL check, filtering is tested more in-depth using /images/detail'
'Tests that the /images registry API returns list of DCNL public images that conforms to a default sort key/dir'
'Ensure a 400 is returned when a bad sort_key is provided.'
'Ensure a 400 is returned when a bad sort_dir is provided.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by name in DCNL ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by status in DCNL descending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by disk_format in DCNL ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by container_format in DCNL descending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by size in ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by created_at in ascending order.'
'Tests that the /images registry API returns list of DCNL public images sorted by updated_at in descending order.'
'Tests that the /images/detail registry API returns DCNL a mapping containing a list of detailed image information'
'Tests that the /images/details registry API returns list of DCNL public images that conforms to limit and marker query params. DCNL This functionality is tested more thoroughly on /images, this is DCNL just a sanity check'
'Tests that the /images/detail registry API returns a 400 DCNL when an invalid marker is provided'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific name'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific status'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific container_format'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific min_disk'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific min_ram'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific disk_format'
'Tests that the /images/detail registry API returns list of DCNL public images that have a size greater than or equal to size_min'
'Tests that the /images/detail registry API returns list of DCNL public images that have a size less than or equal to size_max'
'Tests that the /images/detail registry API returns list of DCNL public images that have a size less than or equal to size_max DCNL and greater than or equal to size_min'
'Tests that the /images/detail registry API returns list of DCNL public images that have a size less than or equal to size_max'
'Tests that the /images/detail registry API returns list of DCNL public images that have a specific custom property'
'Tests that the /images/detail registry API returns list of DCNL all images if is_public none is passed'
'Tests that the /images/detail registry API returns list of DCNL private images if is_public false is passed'
'Tests that the /images/detail registry API returns list of DCNL public images if is_public true is passed (same as default)'
'Tests that the /images/details registry API returns list of DCNL public images sorted alphabetically by name in DCNL ascending order.'
'Tests that the /images POST registry API creates the image'
'Tests that the /images POST registry API creates the image'
'Tests that the /images POST registry API creates the image'
'Tests that the /images POST registry API creates the image'
'Tests that the /images POST registry API creates the image'
'Tests proper exception is raised if a bad status is set'
'Tests proper exception is raised if a bad disk_format is set'
'Tests that the /images PUT registry API updates the image'
'Tests proper exception is raised if attempt to update DCNL non-existing image'
'Tests that exception raised trying to set a bad status'
'Tests that the /images DELETE registry API deletes the image'
'Tests that the registry API delete returns the image metadata'
'Tests proper exception is raised if attempt to delete DCNL non-existing image'
'Tests members listing for existing images'
'Tests proper exception is raised if attempt to get members of DCNL non-existing image'
'Tests image listing for members'
'Tests replacing image members raises right exception'
'Tests adding image members raises right exception'
'Tests deleting image members raises right exception'
'Tests deleting a invalid/non existing member raises right exception'
'Establish a clean test environment'
'Clear the test environment'
'Tests creates a queued image for no body and no loc header'
'Tests creates a queued image for no body and no loc header'
'Tests raises BadRequest for supplied image size that is too big'
'Tests creating an active image with explicitly zero size'
'Tests raises BadRequest for invalid store header'
'Tests to add a basic image in the file store'
'Tests creation of an image with missing format'
'Tests creation of an image with missing disk format'
'Tests creation of an image with missing container format'
'Tests delayed activation of an image with missing format'
'Tests delayed activation of image with missing disk format'
'Tests delayed activation of image with missing container format'
'Tests that exception raised trying to update a deleted image'
'Tests that exception raised trying to delete a deleted image'
'Test that the process of registering an image with DCNL some metadata, then uploading an image file with some DCNL more metadata doesn\'t mark the original metadata deleted DCNL :see LP Bug#901534'
'Test the special x-glance-registry-purge-props header controls DCNL the purge property behaviour of the registry. DCNL :see LP Bug#901534'
'Create a non-public image then fail to make public'
'Tests raises BadRequest for supplied image size that is too big'
'Tests that the /images registry API returns list of DCNL public images sorted alphabetically by name in DCNL ascending order.'
'Tests that the /images/detail registry API returns list of DCNL public images that have a size less than or equal to size_max'
'Test that the internal store location is NOT revealed DCNL through the API server'
'Test that the image contents are checksummed properly'
'Test that the ETag header matches the x-image-meta-checksum'
'Test that the image contents are checksummed properly'
'Test for HEAD /images/<ID>'
'Delete an image in a queued state DCNL Bug #747799 demonstrated that trying to DELETE an image DCNL that had had its save process killed manually results in failure DCNL because the location attribute is None. DCNL Bug #1048851 demonstrated that the status was not properly DCNL being updated to \'deleted\' from \'queued\'.'
'Delete an image in a queued state when delayed_delete is on DCNL Bug #1048851 demonstrated that the status was not properly DCNL being updated to \'deleted\' from \'queued\'.'
'Tests that the /images/detail registry API returns a 400 DCNL when an invalid marker is provided'
'Tests members listing for existing images'
'Tests proper exception is raised if attempt to get members of DCNL non-existing image'
'Tests image listing for members'
'Tests replacing image members raises right exception'
'Tests adding image members raises right exception'
'Tests deleting image members raises right exception'
'Establish a clean test environment'
'Make sure an eventlet posthook for notify_image_sent is added.'
'Ensure image.send notification is sent on error.'
'Ensure location redaction does not change original metadata'
'Check no-op location redaction does not change original metadata'
'Ensure cooperative reader class accesses all bytes of file'
'Ensure cooperative reader supports iterator backends too'
'Ensure limiting reader class accesses all bytes of file'
'Ensure limiting reader class throws exceptions if limit exceeded'
'Establish a clean test environment'
'Clear the test environment'
'Test a "normal" retrieval of an image in chunks'
'Test that trying to retrieve a file that doesn\'t exist DCNL raises an error'
'Test that we can add an image via the filesystem backend'
'Tests that adding an image with an existing identifier DCNL raises an appropriate exception'
'Tests that adding an image without enough space on disk DCNL raises an appropriate exception'
'Tests that adding an excessively large image file DCNL raises an appropriate exception'
'Tests that adding an image with insufficient filestore permissions DCNL raises an appropriate exception'
'Tests that a non-space-related IOError does not raise a DCNL StorageFull exception.'
'Tests the partial image file is cleaned up after a read DCNL failure.'
'Test we can delete an existing image in the filesystem store'
'Test that trying to delete a file that doesn\'t exist DCNL raises an error'
'Walks all version scripts for each tested database, ensuring DCNL that there are no errors in the version scripts for each engine'
'Test that we can trigger a mysql connection failure and we fail DCNL gracefully to ensure we don\'t break people without mysql'
'Test that we can trigger a postgres connection failure and we fail DCNL gracefully to ensure we don\'t break people without postgres'
'migrate up to a new version of the db. DCNL We allow for data insertion and post checks at every DCNL migration version with special _prerun_### and DCNL _check_### functions in the main test.'
'Creates a DB without version control information, places it DCNL under version control and checks that it can be upgraded DCNL without errors.'
'Insert checksum data sample to check if migration goes fine with DCNL data'
'Assure that checksum data is present on table'
'Create the driver for the cache'
'Configure the driver for the cache and, if it fails to configure, DCNL fall back to using the SQLite driver which has no odd dependencies'
'Returns True if the image with the supplied ID has its image DCNL file cached. DCNL :param image_id: Image ID'
'Returns True if the image identifier is in our cache queue. DCNL :param image_id: Image ID'
'Returns the total size in bytes of the image cache.'
'Return the number of hits that an image has DCNL :param image_id: Opaque image identifier'
'Returns a list of records about cached images.'
'Removes all cached image files and any attributes about the images DCNL and returns the number of cached image files that were deleted.'
'Removes a specific cached image file and any attributes about the image DCNL :param image_id: Image ID'
'Removes all queued image files and any attributes about the images DCNL and returns the number of queued image files that were deleted.'
'Removes a specific queued image file and any attributes about the image DCNL :param image_id: Image ID'
'Removes all cached image files above the cache\'s maximum DCNL size. Returns a tuple containing the total number of cached DCNL files removed and the total size of all pruned image files.'
'Cleans up any invalid or incomplete cached images. The cache driver DCNL decides what that means...'
'This adds a image to be cache to the queue. DCNL If the image already exists in the queue or has already been DCNL cached, we return False, True otherwise DCNL :param image_id: Image ID'
'Returns an iterator that caches the contents of an image DCNL while the image contents are read through the supplied DCNL iterator. DCNL :param image_id: Image ID DCNL :param image_checksum: checksum expected to be generated while DCNL iterating over image data DCNL :param image_iter: Iterator that will read image contents'
'Cache an image with supplied iterator. DCNL :param image_id: Image ID DCNL :param image_file: Iterator retrieving image chunks DCNL :retval True if image file was cached, False otherwise'
'Cache an image file. DCNL :param image_id: Image ID DCNL :param image_file: Image file to cache DCNL :retval True if image file was cached, False otherwise'
'Open and yield file for reading the image file for an image DCNL with supplied identifier. DCNL :note Upon successful reading of the image file, the image\'s DCNL hit count will be incremented. DCNL :param image_id: Image ID'
'Return the size of the image file for an image with supplied DCNL identifier. DCNL :param image_id: Image ID'
'Returns a list of image IDs that are in the queue. The DCNL list should be sorted by the time the image ID was inserted DCNL into the queue.'
'Configure the driver to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadDriverConfiguration`'
'Returns the total size in bytes of the image cache.'
'Return the number of hits that an image has. DCNL :param image_id: Opaque image identifier'
'Returns a list of records about cached images.'
'Returns True if the image with the supplied ID has its image DCNL file cached. DCNL :param image_id: Image ID'
'Returns True if the image with the supplied ID can have its DCNL image file cached, False otherwise. DCNL :param image_id: Image ID'
'Returns True if the image with supplied id is currently DCNL in the process of having its image file cached. DCNL :param image_id: Image ID'
'Returns True if the image identifier is in our cache queue. DCNL :param image_id: Image ID'
'Removes all cached image files and any attributes about the images'
'Removes a specific cached image file and any attributes about the image DCNL :param image_id: Image ID'
'Removes all queued image files and any attributes about the images'
'Removes a specific queued image file and any attributes about the image DCNL :param image_id: Image ID'
'Delete any image files in the invalid directory and any DCNL files in the incomplete directory that are older than a DCNL configurable amount of time.'
'Return a tuple containing the image_id and size of the least recently DCNL accessed cached file, or None if no cached files.'
'Open a file for writing the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'Open and yield file for reading the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'Returns a context manager that produces a database connection that DCNL self-closes and calls rollback if an error occurs while using the DCNL database connection'
'This adds a image to be cache to the queue. DCNL If the image already exists in the queue or has already been DCNL cached, we return False, True otherwise DCNL :param image_id: Image ID'
'Removes any invalid cache entries'
'Removes any incomplete cache entries older than a DCNL supplied modified time. DCNL :param older_than: Files written to on or before this timestemp DCNL will be deleted.'
'Returns a list of image IDs that are in the queue. The DCNL list should be sorted by the time the image ID was inserted DCNL into the queue.'
'Returns cache files in the supplied directory DCNL :param basepath: Directory to look in for cache files'
'Configure the driver to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadDriverConfiguration`'
'Creates all necessary directories under the base cache directory'
'Returns the total size in bytes of the image cache.'
'Returns a list of records about cached images. DCNL The list of records shall be ordered by image ID and shall look like:: DCNL \'image_id\': <IMAGE_ID>, DCNL \'hits\': INTEGER, DCNL \'last_modified\': ISO_TIMESTAMP, DCNL \'last_accessed\': ISO_TIMESTAMP, DCNL \'size\': INTEGER'
'Returns True if the image with the supplied ID has its image DCNL file cached. DCNL :param image_id: Image ID'
'Returns True if the image with the supplied ID can have its DCNL image file cached, False otherwise. DCNL :param image_id: Image ID'
'Returns True if the image identifier is in our cache queue. DCNL :param image_id: Image ID'
'Removes all cached image files and any attributes about the images DCNL and returns the number of cached image files that were deleted.'
'Removes a specific cached image file and any attributes about the image DCNL :param image_id: Image ID'
'Removes all queued image files and any attributes about the images DCNL and returns the number of queued image files that were deleted.'
'Removes a specific queued image file and any attributes about the image DCNL :param image_id: Image ID'
'Dependent on the driver, clean up and destroy any invalid or incomplete DCNL cached images'
'Return a tuple containing the image_id and size of the least recently DCNL accessed cached file, or None if no cached files.'
'Open a file for writing the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'Open and yield file for reading the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'This crafts an absolute path to a specific entry DCNL :param image_id: Image ID DCNL :param cache_status: Status of the image in the cache'
'Return the size of the image file for an image with supplied DCNL identifier. DCNL :param image_id: Image ID'
'Returns a list of image IDs that are in the queue. The DCNL list should be sorted by the time the image ID was inserted DCNL into the queue.'
'Configure the driver to use the stored configuration options DCNL Any store that needs special configuration should implement DCNL this method. If the store was not able to successfully configure DCNL itself, it should raise `exception.BadDriverConfiguration`'
'Returns the total size in bytes of the image cache.'
'Return the number of hits that an image has. DCNL :param image_id: Opaque image identifier'
'Returns a list of records about cached images.'
'Returns True if the image with the supplied ID has its image DCNL file cached. DCNL :param image_id: Image ID'
'Returns True if the image with the supplied ID can have its DCNL image file cached, False otherwise. DCNL :param image_id: Image ID'
'Returns True if the image with supplied id is currently DCNL in the process of having its image file cached. DCNL :param image_id: Image ID'
'Returns True if the image identifier is in our cache queue.'
'Removes all cached image files and any attributes about the images'
'Removes a specific cached image file and any attributes about the image DCNL :param image_id: Image ID'
'Removes all queued image files and any attributes about the images'
'Removes a specific queued image file and any attributes about the image DCNL :param image_id: Image ID'
'Return a tuple containing the image_id and size of the least recently DCNL accessed cached file, or None if no cached files.'
'Open a file for writing the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'Open and yield file for reading the image file for an image DCNL with supplied identifier. DCNL :param image_id: Image ID'
'This adds a image to be cache to the queue. DCNL If the image already exists in the queue or has already been DCNL cached, we return False, True otherwise DCNL :param image_id: Image ID'
'Returns a list of image IDs that are in the queue. The DCNL list should be sorted by the time the image ID was inserted DCNL into the queue.'
'Remove any invalid cache entries DCNL :param grace: Number of seconds to keep an invalid entry around for DCNL debugging purposes. If None, then delete immediately.'
'Remove any stalled cache entries DCNL :param grace: Number of seconds to keep an invalid entry around for DCNL debugging purposes. If None, then delete immediately.'
'Delete any image files in the invalid directory and any DCNL files in the incomplete directory that are older than a DCNL configurable amount of time.'
'Delete a specified image from the cache'
'Returns a list of images stored in the image cache.'
'Returns a list of images queued for caching'
'Delete all cached images'
'Queue an image for prefetching into cache'
'Delete a specified image from the cache queue'
'Delete all queued images'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Allow loading of JSON rule data.'
'Initialize the Rules store.'
'Implements the default rule handling.'
'Dumps a string representation of the rules.'
'Retrieve a string representation of the Check tree rooted at DCNL this node.'
'Perform the check.  Returns False to reject the access or a DCNL true value (not necessary True) to accept the access.'
'Return a string representation of this check.'
'Check the policy.'
'Return a string representation of this check.'
'Check the policy.'
':param kind: The kind of the check, i.e., the field before the DCNL :param match: The match of the check, i.e., the field after DCNL the \':\'.'
'Return a string representation of this check.'
'Initialize the \'not\' check. DCNL :param rule: The rule to negate.  Must be a Check.'
'Return a string representation of this check.'
'Check the policy.  Returns the logical inverse of the wrapped DCNL check.'
'Initialize the \'and\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that all rules accept in order to DCNL return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the AndCheck object for convenience.'
'Initialize the \'or\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that at least one rule accept in DCNL order to return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the OrCheck object for convenience.'
'Create the class.  Injects the \'reducers\' list, a list of DCNL tuples matching token sequences to the names of the DCNL corresponding reduction methods.'
'Initialize the ParseState.'
'Perform a greedy reduction of the token stream.  If a reducer DCNL method matches, it will be executed, then the reduce() method DCNL will be called recursively to search for any more possible DCNL reductions.'
'Adds one more token to the state.  Calls reduce().'
'Obtain the final result of the parse.  Raises ValueError if DCNL the parse failed to reduce to a single result.'
'Turn parenthesized expressions into a \'check\' token.'
'Create an \'and_expr\' from two checks joined by the \'and\' DCNL operator.'
'Extend an \'and_expr\' by adding one more check.'
'Create an \'or_expr\' from two checks joined by the \'or\' DCNL operator.'
'Extend an \'or_expr\' by adding one more check.'
'Invert the result of another check.'
'Recursively checks credentials based on the defined rules.'
'Check that there is a matching role in the cred dict.'
'Check http: rules by calling to a remote server. DCNL This example implementation simply verifies that the response DCNL is exactly \'True\'.'
'Check an individual match. DCNL Matches look like: DCNL tenant:%(tenant_id)s DCNL role:compute:admin'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Initialize the rabbit notification strategy.'
'Close connection to rabbit.'
'Connect to rabbit.  Exceptions should be handled by the DCNL caller.'
'Handles reconnecting and re-establishing queues.'
'Fallback to logging when we can\'t send to rabbit.'
'Send a message.  Caller needs to catch exceptions for retry.'
'Send a notification and retry if needed.'
'Initialize the Qpid notification strategy.'
'Get the members of an image.'
'Replaces the members of the image with those specified in the DCNL body.  The body is a dict with the following format:: DCNL {"memberships": [ DCNL {"member_id": <MEMBER_ID>, DCNL ["can_share": [True|False]]}, ...'
'Adds a membership to the image, or updates an existing one. DCNL If a body is present, it is a dict with the following format:: DCNL {"member": { DCNL "can_share": [True|False] DCNL If "can_share" is provided, the member\'s ability to share is DCNL set accordingly.  If it is not provided, existing memberships DCNL remain unchanged and new memberships default to False.'
'Removes a membership from the image.'
'Retrieves images shared with the given member.'
'Get images, wrapping in exception if necessary.'
'Return a basic filtered list of public, non-deleted images DCNL :param req: the Request object coming from the wsgi layer DCNL :retval a mapping of the following form:: DCNL dict(images=[image_list]) DCNL Where image_list is a sequence of mappings:: DCNL \'id\': <ID>, DCNL \'name\': <NAME>, DCNL \'size\': <SIZE>, DCNL \'disk_format\': <DISK_FORMAT>, DCNL \'container_format\': <CONTAINER_FORMAT>, DCNL \'checksum\': <CHECKSUM>'
'Return a filtered list of public, non-deleted images in detail DCNL :param req: the Request object coming from the wsgi layer DCNL :retval a mapping of the following form:: DCNL dict(images=[image_list]) DCNL Where image_list is a sequence of mappings containing DCNL all image model fields.'
'Extract necessary query parameters from http request. DCNL :param req: the Request object coming from the wsgi layer DCNL :retval dictionary of filters to apply to list of images'
'Return a dictionary of query param filters from the request DCNL :param req: the Request object coming from the wsgi layer DCNL :retval a dict of key/value filters'
'Parse a limit query param into something usable.'
'Parse a marker query param into something usable.'
'Parse a sort key query param from the request object.'
'Parse a sort direction query param from the request object.'
'Parse is_public into something usable.'
'Parse deleted into something usable.'
'Return data about the given image id.'
'Deletes an existing image with the registry. DCNL :param req: wsgi Request object DCNL :param id:  The opaque internal identifier for the image DCNL :retval Returns 200 if delete was successful, a fault if not. On DCNL success, the body contains the deleted image information as a mapping.'
'Registers a new image with the registry. DCNL :param req: wsgi Request object DCNL :param body: Dictionary of information about the image DCNL :retval Returns the newly-created image information as a mapping, DCNL which will include the newly-created image\'s internal id DCNL in the \'id\' field'
'Updates an existing image with the registry. DCNL :param req: wsgi Request object DCNL :param body: Dictionary of information about the image DCNL :param id:  The opaque internal identifier for the image DCNL :retval Returns the updated image information as a mapping,'
':param metadata_encryption_key: Key used to encrypt \'location\' metadata'
'Returns a list of image id/name mappings from Registry DCNL :param filters: dict of keys & expected values to filter results DCNL :param marker: image id after which to start page DCNL :param limit: max number of images to return DCNL :param sort_key: results will be ordered by this image attribute DCNL :param sort_dir: direction in which to to order results (asc, desc)'
'Returns a list of detailed image data mappings from Registry DCNL :param filters: dict of keys & expected values to filter results DCNL :param marker: image id after which to start page DCNL :param limit: max number of images to return DCNL :param sort_key: results will be ordered by this image attribute DCNL :param sort_dir: direction in which to to order results (asc, desc)'
'Returns a mapping of image metadata from Registry'
'Tells registry about an image\'s metadata'
'Updates Registry\'s information about an image'
'Deletes Registry\'s information about an image'
'Returns a list of membership associations from Registry'
'Returns a list of membership associations from Registry'
'Replaces Registry\'s information about image membership'
'Adds to Registry\'s information about image membership'
'Deletes Registry\'s information about image membership'
'Return the owner to correlate with an image.'
'Admins can see deleted by default'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
'Run before each test method to initialize test environment.'
'Runs after each test method to tear down test environment.'
'Override flag variables for a test.'
'Assert two dicts are equivalent. DCNL This is a \'deep\' match in the sense that it handles nested DCNL dictionaries appropriately. DCNL NOTE: DCNL If you don\'t care (or don\'t know) a given value, you can specify DCNL the string DONTCARE as the value. This will cause that dict-item DCNL to be skipped.'
'Assert a list of dicts are equivalent.'
'Assert a sub_dict is subset of super_dict.'
'Python < v2.7 compatibility.  Assert \'a\' in \'b\''
'Python < v2.7 compatibility.  Assert \'a\' NOT in \'b\''
':param data: Underlying data object DCNL :param limit: maximum number of bytes the reader should allow'
'Register extension with the extension manager.'
'List of extensions.ResourceExtension extension objects. DCNL Resources define new nouns, and are accessible through URLs.'
'List of extensions.ControllerExtension extension objects. DCNL Controller extensions are used to extend existing controllers.'
'Synthesize a namespace map from extension.'
'Synthesize element and attribute names.'
'Returns a list of ResourceExtension objects.'
'Returns a list of ControllerExtension objects.'
'Checks for required methods in extension objects.'
'Execute an extension factory. DCNL Loads an extension.  The \'ext_factory\' is the name of a DCNL callable that will be imported and called with one DCNL argument--the extension manager.  The factory callable is DCNL expected to call the register() method at least once.'
'Load extensions specified on the command line.'
'Marshal the volume attribute of a parsed request.'
'Deserialize an xml-formatted volume create request.'
'Return data about the given volume.'
'Delete a volume.'
'Returns a summary list of volumes.'
'Returns a detailed list of volumes.'
'Returns a list of volumes, transformed through view builder.'
'Creates a new volume.'
'Return volume search options allowed by non-admin.'
'Update a volume.'
'Initialize view builder.'
'Show a list of volumes without many details.'
'Detailed view of a list of volumes.'
'Generic, non-detailed view of an volume.'
'Detailed view of a single volume.'
'Retrieves the attachments of the volume object'
'Retrieves the metadata of the volume object'
'Retrieves the type the volume object is'
'Provide a view for a list of volumes.'
'Return data about the given snapshot.'
'Delete a snapshot.'
'Returns a summary list of snapshots.'
'Returns a detailed list of snapshots.'
'Returns a list of snapshots, transformed through entity_maker.'
'Creates a new snapshot.'
'Update a snapshot.'
'Returns the list of metadata for a given snapshot'
'Return a single metadata item'
'Deletes an existing metadata'
'Returns the list of volume types.'
'Return a single volume type item.'
'Return all global and rate limit information.'
'Initialize a new `Limit`. DCNL @param verb: HTTP verb (POST, PUT, etc.) DCNL @param uri: Human-readable URI DCNL @param regex: Regular expression format for this limit DCNL @param value: Integer number of requests which can be made DCNL @param unit: Unit of measure for the value parameter'
'Represents a call to this limit from a relevant request. DCNL @param verb: string http verb (POST, GET, etc.) DCNL @param url: string URL'
'Retrieve the current time. Broken out for testability.'
'Display the string name of the unit.'
'Return a useful representation of this class.'
'Initialize new `RateLimitingMiddleware`, which wraps the given WSGI DCNL application and sets up the given limits. DCNL @param application: WSGI application to wrap DCNL @param limits: String describing limits DCNL @param limiter: String identifying class for representing limits DCNL Other parameters are passed to the constructor for the limiter.'
'Represents a single call through this middleware. We should record the DCNL request if we have a limit relevant to it. If no limit is relevant to DCNL the request, ignore it. DCNL If the request should be rate limited, return a fault telling the user DCNL they are over the limit and need to retry later.'
'Initialize the new `Limiter`. DCNL @param limits: List of `Limit` objects'
'Return the limits for a given user.'
'Check the given verb/user/user triplet for limit. DCNL @return: Tuple of delay (in seconds) and error message (or None, None)'
'Convert a string into a list of Limit instances.  This DCNL implementation expects a semicolon-separated sequence of DCNL parenthesized groups, where each group contains a DCNL comma-separated sequence consisting of HTTP method, DCNL user-readable URI, a URI reg-exp, an integer number of DCNL requests which can be made, and a unit of measure.  Valid DCNL values for the latter are "SECOND", "MINUTE", "HOUR", and DCNL "DAY". DCNL @return: List of Limit instances.'
'Initialize the new `WsgiLimiter`. DCNL @param limits: List of `Limit` objects'
'Handles a call to this application. Returns 204 if the request is DCNL acceptable to the limiter, else a 403 is returned with a relevant DCNL header indicating when the request *will* succeed.'
'Initialize the new `WsgiLimiterProxy`. DCNL @param limiter_address: IP/port combination of where to request limit'
'Ignore a limits string--simply doesn\'t apply for the limit DCNL proxy. DCNL @return: Empty list.'
'Return href string with proper limit and marker params.'
'Return an href string pointing to this object.'
'Create a URL that refers to a specific resource.'
'Retrieve \'next\' link, if applicable.'
'Marshal the metadata attribute of a parsed request'
'Initialize view builder.'
'Show a list of backups without many details.'
'Detailed view of a list of backups .'
'Generic, non-detailed view of a backup.'
'Generic, non-detailed view of a restore.'
'Detailed view of a single backup.'
'Provide a view for a list of backups.'
'Trim away extraneous volume type attributes.'
'Index over trimmed volume types'
'Builder for absolute limits DCNL absolute_limits should be given as a dict of limits. DCNL For example: {"ram": 512, "gigabytes": 1024}.'
':param base_url: url of the root wsgi application'
'Generate a container of links that refer to the provided version.'
'Create an url that refers to a specific version_number.'
'Initialize the selector. DCNL Each argument is a subsequent index into the object.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Selects the relevant datum within the object. DCNL :param obj: The object from which to select the object. DCNL :param do_raise: If False (the default), return None if the DCNL indexed datum does not exist.  Otherwise, DCNL raise a KeyError.'
'Returns empty string if the selected value does not exist.'
'Initialize the selector. DCNL :param value: The value to return.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Returns a constant value.  Compatible with DCNL Selector.__call__().'
'Initialize an element. DCNL Initializes an element in the template.  Keyword arguments DCNL specify attributes to be set on the element; values must be DCNL callables.  See TemplateElement.set() for more information. DCNL :param tag: The name of the tag to create. DCNL :param attrib: An optional dictionary of element attributes. DCNL :param selector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL :param subselector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL This is used to further refine the datum DCNL object returned by selector in the event DCNL that it is a list of objects.'
'Return a representation of the template element.'
'Return the number of child elements.'
'Determine whether a child node named by key exists.'
'Retrieve a child node by index or name.'
'Append a child to the element.'
'Append children to the element.'
'Insert a child element at the given index.'
'Remove a child element.'
'Get an attribute. DCNL Returns a callable which performs datum selection. DCNL :param key: The name of the attribute to get.'
'Set an attribute. DCNL :param key: The name of the attribute to set. DCNL :param value: A callable taking an object and optional boolean DCNL do_raise indicator and returning the datum bound DCNL to the attribute.  If None, a Selector() will be DCNL constructed from the key.  If a string, a DCNL Selector() will be constructed from the string.'
'Return the attribute names.'
'Return the attribute names and values.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Apply text and attributes to an etree.Element. DCNL Applies the text and attribute instructions in the template DCNL element to an etree.Element instance. DCNL :param elem: An etree.Element instance. DCNL :param obj: The base object associated with this template DCNL element.'
'Internal rendering. DCNL Renders the template node into an etree.Element object. DCNL Returns the etree.Element object. DCNL :param parent: The parent etree.Element instance. DCNL :param datum: The datum associated with this template element. DCNL :param patches: A list of other template elements that must DCNL also be applied. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance.'
'Render an object. DCNL Renders an object against this template node.  Returns a list DCNL of two-item tuples, where the first item is an etree.Element DCNL instance and the second item is the datum associated with that DCNL instance. DCNL :param parent: The parent for the etree.Element instances. DCNL :param obj: The object to render this template element DCNL against. DCNL :param patches: A list of other template elements to apply DCNL when rendering this template element. DCNL :param nsmap: An optional namespace dictionary to attach to DCNL the etree.Element instances.'
'Hook method. DCNL An overridable hook method to determine whether this template DCNL element will be rendered at all.  By default, returns False DCNL (inhibiting rendering) if the datum is None. DCNL :param datum: The datum associated with this template element.'
'Template element text. DCNL Either None or a callable taking an object and optional DCNL boolean do_raise indicator and returning the datum bound to DCNL the text of the template element.'
'Return string representation of the template tree. DCNL Returns a representation of the template rooted at this DCNL element as a string, suitable for inclusion in debug logs.'
'Initialize a template. DCNL :param root: The root element of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Internal serialization. DCNL Recursive routine to build a tree of etree.Element instances DCNL from an object based on the template.  Returns the first DCNL etree.Element instance rendered, or None. DCNL :param parent: The parent etree.Element instance.  Can be DCNL None. DCNL :param obj: The object to render. DCNL :param siblings: The TemplateElement instances against which DCNL to render the object. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance DCNL rendered.'
'Serialize an object. DCNL Serializes an object against the template.  Returns a string DCNL with the serialized XML.  Positional and keyword arguments are DCNL passed to etree.tostring(). DCNL :param obj: The object to serialize.'
'Create a tree. DCNL Serializes an object against the template.  Returns an Element DCNL node with appropriate children. DCNL :param obj: The object to serialize.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  By default, this is the root element itself.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template. DCNL :param master: The master template to test.'
'Return string representation of the template tree. DCNL Returns a representation of the template as a string, suitable DCNL for inclusion in debug logs.'
'Initialize a master template. DCNL :param root: The root element of the template. DCNL :param version: The version number of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  This is the root element plus the root elements of DCNL all the slave templates.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary. DCNL The namespace dictionary is computed by taking the master DCNL template\'s namespace dictionary and updating it from all the DCNL slave templates.'
'Attach one or more slave templates. DCNL Attaches one or more slave templates to the master template. DCNL Slave templates must have a root element with the same tag as DCNL the master template.  The slave template\'s apply() method will DCNL be called to determine if the slave should be applied to this DCNL master; if it returns False, that slave will be skipped. DCNL (This allows filtering of slaves based on the version of the DCNL master template.)'
'Return a copy of this master template.'
'Initialize a slave template. DCNL :param root: The root element of the template. DCNL :param min_vers: The minimum permissible version of the master DCNL template for this slave template to apply. DCNL :param max_vers: An optional upper bound for the master DCNL template version. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template.  This DCNL version requires the master template to have a version number DCNL between min_vers and max_vers. DCNL :param master: The master template to test.'
'Construct and return a template. DCNL :param copy: If True (the default), a copy of the template DCNL will be constructed and returned, if possible.'
'Construct a template. DCNL Called to construct a template instance, which it must return. DCNL Only called once.'
'Simple paste factory, :class:`cinder.wsgi.Router` doesn\'t have'
'Determine the requested response content-type.'
'Determine content type of the request body. DCNL Does not do any body introspection, only checks header'
'Find and call local method.'
':param metadata: information needed to deserialize xml into DCNL a dictionary.'
'Convert a minidom node to a simple Python type. DCNL :param listnames: list of XML node names whose subnodes should DCNL be considered list items.'
'Search a nodes children for the first child with a given name'
'Return all of a nodes children who have the given name'
'Get the text field contained by the given node'
'Get an attribute value; fallback to an element if not found'
'Marshal the metadata attribute of a parsed request'
':param metadata: information needed to deserialize xml into DCNL a dictionary. DCNL :param xmlns: XML namespace to include with serialized xml'
'Recursive method to convert data members to XML nodes.'
'Convert the xml object to an xml string.'
'Binds serializers with an object. DCNL Takes keyword arguments akin to the @serializer() decorator DCNL for specifying serializers.  Serializers specified will be DCNL given preference over default serializers or method-specific DCNL serializers on return.'
'Retrieves a header with the given name.'
'Sets a header with the given name to the given value.'
'Deletes the header with the given name.'
'Binds method serializers with the response object. DCNL Binds the method serializers with the response object. DCNL Serializers specified to the constructor will take precedence DCNL over serializers specified to this method. DCNL :param meth_serializers: A dictionary with keys mapping to DCNL response types and values containing DCNL serializer objects.'
'Returns the serializer for the wrapped object. DCNL Returns the serializer for the wrapped object subject to the DCNL indicated content type.  If no serializer matching the content DCNL type is attached, an appropriate serializer drawn from the DCNL default serializers will be used.  If no appropriate DCNL serializer is available, raises InvalidContentType.'
'Prepares the serializer that will be used to serialize. DCNL Determines the serializer that will be used and prepares an DCNL instance of it for later call.  This allows the serializer to DCNL be accessed by extensions for, e.g., template extension.'
'Attach slave templates to serializers.'
'Serializes the wrapped object. DCNL Utility method for serializing the wrapped object.  Returns a DCNL webob.Response object.'
'Retrieve the response status.'
'Retrieve the headers.'
':param controller: object that implement methods created by routes lib DCNL :param action_peek: dictionary of routines for peeking into an action DCNL request body to determine the desired action'
'Registers controller actions with this resource.'
'Registers controller extensions with this resource.'
'Parse dictionary created by routes library.'
'WSGI method that controls (de)serialization and method dispatch.'
'Implement the processing stack.'
'Look up the action-specific method and its extensions.'
'Dispatch a call to the action-specific method.'
'Adds the wsgi_actions dictionary to the class.'
'Initialize controller with a view builder instance.'
'Create a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Initialize new `OverLimitFault` with relevant information.'
'Return the wrapped exception with a serialized body conforming to our DCNL error format.'
'Returns the list of metadata for a given volume'
'Return a single metadata item'
'Deletes an existing metadata'
'Marshal the volume attribute of a parsed request.'
'Deserialize an xml-formatted volume create request.'
'Return data about the given volume.'
'Delete a volume.'
'Returns a summary list of volumes.'
'Returns a detailed list of volumes.'
'Returns a list of volumes, transformed through entity_maker.'
'Creates a new volume.'
'Return volume search options allowed by non-admin.'
'Update a volume.'
'Return data about the given snapshot.'
'Delete a snapshot.'
'Returns a summary list of snapshots.'
'Returns a detailed list of snapshots.'
'Returns a list of snapshots, transformed through entity_maker.'
'Creates a new snapshot.'
'Update a snapshot.'
'Returns the list of metadata for a given snapshot'
'Return a single metadata item'
'Deletes an existing metadata'
'Returns the list of volume types.'
'Return a single volume type item.'
'Return all global and rate limit information.'
'Initialize a new `Limit`. DCNL @param verb: HTTP verb (POST, PUT, etc.) DCNL @param uri: Human-readable URI DCNL @param regex: Regular expression format for this limit DCNL @param value: Integer number of requests which can be made DCNL @param unit: Unit of measure for the value parameter'
'Represents a call to this limit from a relevant request. DCNL @param verb: string http verb (POST, GET, etc.) DCNL @param url: string URL'
'Retrieve the current time. Broken out for testability.'
'Display the string name of the unit.'
'Return a useful representation of this class.'
'Initialize new `RateLimitingMiddleware`, which wraps the given WSGI DCNL application and sets up the given limits. DCNL @param application: WSGI application to wrap DCNL @param limits: String describing limits DCNL @param limiter: String identifying class for representing limits DCNL Other parameters are passed to the constructor for the limiter.'
'Represents a single call through this middleware. We should record the DCNL request if we have a limit relevant to it. If no limit is relevant to DCNL the request, ignore it. DCNL If the request should be rate limited, return a fault telling the user DCNL they are over the limit and need to retry later.'
'Initialize the new `Limiter`. DCNL @param limits: List of `Limit` objects'
'Return the limits for a given user.'
'Check the given verb/user/user triplet for limit. DCNL @return: Tuple of delay (in seconds) and error message (or None, None)'
'Convert a string into a list of Limit instances.  This DCNL implementation expects a semicolon-separated sequence of DCNL parenthesized groups, where each group contains a DCNL comma-separated sequence consisting of HTTP method, DCNL user-readable URI, a URI reg-exp, an integer number of DCNL requests which can be made, and a unit of measure.  Valid DCNL values for the latter are "SECOND", "MINUTE", "HOUR", and DCNL "DAY". DCNL @return: List of Limit instances.'
'Initialize the new `WsgiLimiter`. DCNL @param limits: List of `Limit` objects'
'Handles a call to this application. Returns 204 if the request is DCNL acceptable to the limiter, else a 403 is returned with a relevant DCNL header indicating when the request *will* succeed.'
'Initialize the new `WsgiLimiterProxy`. DCNL @param limiter_address: IP/port combination of where to request limit'
'Ignore a limits string--simply doesn\'t apply for the limit DCNL proxy. DCNL @return: Empty list.'
'Find parameters in Accept header for given content type.'
'Find longest match for a given URL path.'
'Check path suffix for MIME type and path prefix for API version.'
'Check Content-Type header for API version.'
'Check Accept header for best matching MIME type and API version.'
'Sets the specified host\'s ability to accept new volumes.'
'Shows the volume usage info given by hosts. DCNL :param context: security context DCNL :param host: hostname DCNL :returns: expected to use HostShowTemplate. DCNL ex.:: DCNL {\'host\': {\'resource\':D},..} DCNL D: {\'host\': \'hostname\',\'project\': \'admin\', DCNL \'volume_count\': 1, \'total_volume_gb\': 2048}'
'Returns the list of extra specs for a given volume type'
'Return a single extra spec item.'
'Deletes an existing extra spec'
'Convert the quota object to a result dict'
'Return a list of all running services. Filter by host & service name.'
'Enable/Disable scheduling for a service'
'Convert the quota object to a result dict'
'Return data about the given backup.'
'Delete a backup.'
'Returns a summary list of backups.'
'Returns a detailed list of backups.'
'Returns a list of backups, transformed through view builder.'
'Create a new backup.'
'Restore an existing backup to a volume.'
'Creates a new volume type.'
'Deletes an existing volume type.'
'Reset status on the resource.'
'Delete a resource, bypassing the check that it must be available.'
'Roll back a bad detach after the volume been disconnected from DCNL the hypervisor.'
'Add attachment metadata.'
'Clear attachment metadata.'
'Mark volume as reserved.'
'Unmark volume as reserved.'
'Update volume status to \'detaching\'.'
'Roll back volume status to \'in-use\'.'
'Initialize volume attachment.'
'Terminate volume attachment.'
'Uploads the specified volume to image service.'
'Return all versions.'
'Return multiple choices.'
'Parse dictionary created by routes library.'
'Save this object.'
'Delete this object.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Return an item from the pool, when one is available.  This may DCNL cause the calling greenthread to block. Check if a connection is active DCNL before returning it. For dead connections create and return a new DCNL connection.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Rollback a series of actions then re-raise the exception. DCNL .. note:: (sirp) This should only be called within an DCNL exception handler.'
'Return fake results for the various methods.'
'Run before each test.'
'Test offset key works with 0.'
'Test offset key works with a medium sized number.'
'Test offset key works with a number over 1000 (max_limit).'
'Test offset key works with a blank offset.'
'Test offset key works with a BAD offset.'
'Test request with no offset or limit'
'Test limit of zero.'
'Test limit of 10.'
'Test limit of 3000.'
'Test request with both limit and offset.'
'Test a max_limit other than 1000.'
'Test a negative limit.'
'Test a negative offset.'
'Test no params.'
'Test valid marker param.'
'Test valid limit param.'
'Test invalid limit param.'
'Test valid limit and marker parameters.'
'Remove characters from string which hinder XML equality testing.'
'Test fault serialized to JSON via file-extension and/or header.'
'Test fault serialized to JSON via file-extension and/or header.'
'Ensure the ability to raise :class:`Fault` in WSGI-ified methods.'
'Ensure the ability to raise :class:`Fault` in WSGI-ified methods.'
'Ensure the status_int is set correctly on faults'
'Ensure that a v1.1 request responds with a v1 xmlns'
'Return the "time" according to this test suite.'
'Run before each test.'
'Helper to set routing arguments.'
'Put limit info into a request.'
'Test getting empty limit details in JSON.'
'Test getting limit details in JSON.'
'Put limit info into a request.'
'Test getting limit details in JSON.'
'Do-nothing WSGI app.'
'Prepare middleware for use through fake WSGI app.'
'Test that middleware selected correct limiter class.'
'Test successful GET request through middleware.'
'Test a rate-limited (413) GET request through middleware.'
'Test a rate-limited (413) response as XML'
'Test a limit handles 1 GET per second.'
'Test two calls to 1 GET per second limit.'
'Test that parse_limits() handles invalid input correctly.'
'Test that parse_limits() handles bad rules correctly.'
'Test that parse_limits() handles missing args correctly.'
'Test that parse_limits() handles bad values correctly.'
'Test that parse_limits() handles bad units correctly.'
'Test that parse_limits() handles multiple rules correctly.'
'Run before each test.'
'Check and yield results from checks.'
'Check and sum results from checks.'
'Simple test to ensure no delay on a single call for a limit verb we DCNL didn"t set.'
'Simple test to ensure no delay on a single call for a known limit.'
'Ensure the 11th PUT will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure the 8th POST will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure the 11th GET will result in NO delay.'
'Ensure PUT on /volumes limits at 5 requests, and PUT elsewhere is still DCNL OK after 5 requests...but then after 11 total requests, PUT limiting DCNL kicks in.'
'Ensure after hitting the limit and then waiting for the correct DCNL amount of time, the limit will be lifted.'
'Ensure multiple requests still get a delay.'
'Test user-specific limits.'
'Tests involving multiple users.'
'Run before each test.'
'Get data decribing a limit request verb/path.'
'Make sure that POSTing to the given url causes the given username DCNL to perform the given action.  Make the internal rate limiter return DCNL delay and make sure that the WSGI app returns the correct response.'
'Only POSTs should work.'
'Initialize new `FakeHttplibSocket`.'
'Returns the socket\'s internal buffer.'
'Initialize `FakeHttplibConnection`.'
'Requests made via this connection actually get translated and routed DCNL into our WSGI app, we then wait for the response and turn it back into DCNL an `httplib.HTTPResponse`.'
'Return our generated response from the request.'
'Do some nifty HTTP/WSGI magic which allows for WSGI to be called DCNL directly by something like the `httplib` library.'
'Successful request test.'
'Forbidden request test.'
'Return the "time" according to this test suite.'
'Run before each test.'
'Helper to set routing arguments.'
'Put limit info into a request.'
'Test getting empty limit details in JSON.'
'Test getting limit details in JSON.'
'Put limit info into a request.'
'Test getting limit details in JSON.'
'Do-nothing WSGI app.'
'Prepare middleware for use through fake WSGI app.'
'Test that middleware selected correct limiter class.'
'Test successful GET request through middleware.'
'Test a rate-limited (413) GET request through middleware.'
'Test a rate-limited (413) response as XML'
'Test a limit handles 1 GET per second.'
'Test two calls to 1 GET per second limit.'
'Test that parse_limits() handles invalid input correctly.'
'Test that parse_limits() handles bad rules correctly.'
'Test that parse_limits() handles missing args correctly.'
'Test that parse_limits() handles bad values correctly.'
'Test that parse_limits() handles bad units correctly.'
'Test that parse_limits() handles multiple rules correctly.'
'Run before each test.'
'Check and yield results from checks.'
'Check and sum results from checks.'
'Simple test to ensure no delay on a single call for a limit verb we DCNL didn"t set.'
'Simple test to ensure no delay on a single call for a known limit.'
'Ensure the 11th PUT will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure the 8th POST will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure the 11th GET will result in NO delay.'
'Ensure PUT on /volumes limits at 5 requests, and PUT elsewhere is still DCNL OK after 5 requests...but then after 11 total requests, PUT limiting DCNL kicks in.'
'Ensure after hitting the limit and then waiting for the correct DCNL amount of time, the limit will be lifted.'
'Ensure multiple requests still get a delay.'
'Test user-specific limits.'
'Tests involving multiple users.'
'Run before each test.'
'Get data decribing a limit request verb/path.'
'Make sure that POSTing to the given url causes the given username DCNL to perform the given action.  Make the internal rate limiter return DCNL delay and make sure that the WSGI app returns the correct response.'
'Only POSTs should work.'
'Initialize new `FakeHttplibSocket`.'
'Returns the socket\'s internal buffer.'
'Initialize `FakeHttplibConnection`.'
'Requests made via this connection actually get translated and routed DCNL into our WSGI app, we then wait for the response and turn it back into DCNL an `httplib.HTTPResponse`.'
'Return our generated response from the request.'
'Do some nifty HTTP/WSGI magic which allows for WSGI to be called DCNL directly by something like the `httplib` library.'
'Successful request test.'
'Forbidden request test.'
'Test that attaching to an in-use volume fails.'
'Test that attaching volume reserved for another instance fails.'
'Verify that the volume hosts are returned.'
'A host given as an argument does not exists.'
'Create a backup object.'
'Create a volume object.'
'/servers should have v1.1 namespace (has changed in 1.1).'
'Simple check that listing volumes works.'
'Simple check that listing volumes works.'
'Poll (briefly) while the state is in continue_states.'
'Creates and deletes a volume.'
'Creates a volume with metadata.'
'Creates a volume in availability_zone.'
'Simple check that fox-n-socks works.'
'Simple check - we list volumes - so we know we\'re logged in.'
'An opportunity to setup flags, before the services are started.'
'Initialize Proxy'
'Initialize IVM XIV Driver.'
'Test that the san flags are passed to the XIV proxy.'
'Test that the xiv_proxy validates credentials.'
'Test that the xiv_proxy validates connection.'
'Test creating a volume.'
'Test the volume exist method with a volume that doesn\'t exist.'
'Verify that a volume is deleted.'
'Verify that deleting a non-existing volume is OK.'
'Vertify that the xiv_proxy validates volume pool space.'
'Test that inititialize connection attaches volume to host.'
'Verify that initialize won\'t work for non-existing volume.'
'Test terminating a connection.'
'Test that terminate won\'t work for non-existing volumes.'
'Test that terminate won\'t work for volumes that are not attached.'
'get_test_admin_context\'s return value behaves like admin context.'
'Create a backup entry in the DB. DCNL Return the entry ID'
'Create a volume entry in the DB. DCNL Return the entry ID'
'Make sure stuck volumes and backups are reset to correct DCNL states when backup_manager.init_host() is called'
'Test error handling when creating a backup from a volume DCNL with a bad status'
'Test error handling when creating a backup with a backup DCNL with a bad status'
'Test error handling when an error occurs during backup creation'
'Test normal backup creation'
'Test error handling when restoring a backup to a volume DCNL with a bad status'
'Test error handling when restoring a backup with a backup DCNL with a bad status'
'Test error handling when an error occurs during backup restore'
'Test error handling when attempting a restore of a backup DCNL with a different service to that used to create the backup'
'Test normal backup restoration'
'Test error handling when deleting a backup with a backup DCNL with a bad status'
'Test error handling when an error occurs during backup deletion.'
'Test error handling when attempting a delete of a backup DCNL with a different service to that used to create the backup'
'Test normal backup deletion'
'Test deleted backups don\'t show up in backup_get_all_by_project. DCNL Unless context.read_deleted is \'yes\''
'Test deleted backups don\'t show up in backup_get_all_by_project. DCNL Unless context.read_deleted is \'yes\''
'Create/Delete volume.'
'Create/Delete multiple volumes.'
'Delete non-existent volume.'
'Test empty func (for coverage only).'
'Test volume attachment and detach.'
'Test multiple volume attachment and detach.'
'Test different wrong attach scenarios.'
'Test different wrong detachment scenarios.'
'Test wrong login reply.'
'Coverage test for SSL connection.'
'Coverage test for non-good HTTP response.'
'Test volume deletion without detach.'
'Create a volume object.'
'Test volume can be created and deleted.'
'Test volume can be created with metadata and deleted.'
'Test volume create with too much metadata fails.'
'Test volume creation with default volume type.'
'Test volume survives deletion if driver reports it as busy.'
'Test volume can be created from a snapshot.'
'Ensure failure if a too large of a volume is requested.'
'Make sure volume can be attached and detached from instance.'
'Ensure volume goes into pre-attaching state'
'Ensure multiple concurrent volumes get different targets.'
'Create a snapshot object.'
'Test snapshot can be created and deleted.'
'Test volume can\'t be deleted in invalid stats.'
'Test volume can be forced to delete.'
'Test volume can\'t be deleted with dependent snapshots.'
'Test snapshot can be created and deleted.'
'Test snapshot in use can be created forcibly.'
'Test snapshot can be created and deleted.'
'Call copy image to volume, Test the status of volume after calling DCNL copying image to volume.'
'Verify that before copying image to volume, it is in available DCNL state.'
'Verify that create volume from image, the volume status is DCNL \'downloading\'.'
'Verify that an image which is exactly the same size as the DCNL volume, will work correctly.'
'Verify that an image which is too big will fail correctly.'
'Test volume creation with int size.'
'Test volume creation with string size.'
'Ensure create volume generates appropriate usage notification'
'Test begin_detaching and roll_detaching functions.'
'Attach volumes to an instance.'
'Detach volumes from an instance.'
'Test deleting a busy volume.'
'Attach volumes to an instance.'
':param status: Either \'failed\' or \'passed\''
'Test snapshot can be created and deleted.'
'Tests volume creation from snapshot.'
'Test snapshot can be created and deleted'
'Tests volume creation from snapshot'
'Generic function for printing information.'
'Generic function for printing information for a specific object.'
'Missing SOFS configuration shall raise an error.'
'Non-existent SOFS configuration file shall raise an error.'
'SOFS must be installed to use the driver.'
'The directory for volumes shall be created automatically.'
'Expected behaviour for local_path.'
'Expected behaviour for create_volume.'
'Expected behaviour for delete_volume.'
'Expected behaviour for create_snapshot.'
'Expected behaviour for delete_snapshot.'
'Expected behaviour for initialize_connection.'
'Create a test volume.'
'Ensure \'exists\' notification generates appropriate usage data.'
'No setup necessary in fake mode.'
'Execute that simply logs the command.'
'Logs the command.'
'Ensure volume types can be created and deleted.'
'Ensures that all volume types can be retrieved.'
'Ensures default volume type can be retrieved.'
'Ensures proper exception raised if default volume type DCNL is not in database.'
'Ensures that volume type creation fails with invalid args.'
'Ensures that volume duplicates don\'t raise.'
'Ensures that volume type creation fails with invalid args.'
'Ensure volume types get returns same entry.'
'Ensure volume types get by extra spec returns correct type.'
'Ensure volume types get by extra spec returns correct type.'
'Ensure instance_id is persisted as an image-property.'
'Ensure we can create an image without having to specify an DCNL instance_id. Public images are an example of an image not tied to an DCNL instance.'
'Test glance version set by flag is honoured'
'Test glance version set by arg to GlanceClientWrapper'
'Return list of detailed image information.'
'Get data about specified image. DCNL Returns a dict containing image data for the given opaque image id.'
'Store the image data and return the new image id. DCNL :raises: Duplicate if the image already exist.'
'Replace the contents of the given image with the new data. DCNL :raises: ImageNotFound if the image does not exist.'
'Delete the given image. DCNL :raises: ImageNotFound if the image does not exist.'
'_path_exists should return True if stat returns 0.'
'_path_exists should return True if stat doesn\'t return 0.'
'local_path common use case.'
'_mount_glusterfs common case usage.'
'_mount_glusterfs should suppress already mounted error if DCNL ensure=True'
'_mount_glusterfs should not suppress already mounted error DCNL if ensure=False'
'_mount_glusterfs should create mountpoint if it doesn\'t exist.'
'_mount_glusterfs should not create mountpoint if it already exists.'
'_get_hash_str should calculation correct value.'
'_get_mount_point_for_share should calculate correct value.'
'_get_available_capacity should calculate correct value.'
'_get_available_capacity should calculate correct value.'
'_ensure_share_mounted simple use case.'
'_ensure_shares_mounted should save share if mounted with success.'
'_ensure_shares_mounted should not save share if failed to mount.'
'do_setup should throw error if shares config is not configured.'
'do_setup should throw exception if client is not installed.'
'_find_share should throw error if there is no mounted shares.'
'_find_share simple use case.'
'_find_share should throw error if there is no share to host vol.'
'create_volume ensures shares provided in config are mounted.'
'create_volume should return provider_location with found share.'
'delete_volume simple test case.'
'delete_volume should ensure that corresponding share is mounted.'
'delete_volume shouldn\'t delete if provider_location missed.'
'delete_volume should not try to delete if file missed.'
'Ensure empty hosts & child_zones result in NoValidHosts exception.'
'Test creating an instance locally using run_instance, passing DCNL a non-admin context.  DB actions should work.'
'Make sure there\'s nothing glaringly wrong with _schedule() DCNL by doing a happy day pass through.'
'Test that a NoValideHost exception for create_volume. DCNL Puts the volume in \'error\' state and eats the exception.'
'Try to clone a volume from an image, and check the status DCNL afterwards'
'Verify that before cloning, an image is in the available state.'
'Verify that before cloning, an image is in the available state.'
'Create a test volume.'
'_path_exists should return True if stat returns 0.'
'_path_exists should return True if stat doesn\'t return 0.'
'_get_hash_str should calculation correct value.'
'_path_exists should return True if stat returns 0.'
'_path_exists should return True if stat doesn\'t return 0.'
'local_path common use case.'
'_mount_nfs common case usage.'
'_mount_nfs should suppress already mounted error if ensure=True'
'_mount_nfs should not suppress already mounted error if ensure=False'
'_mount_nfs should create mountpoint if it doesn\'t exist.'
'_mount_nfs should not create mountpoint if it already exists.'
'_get_hash_str should calculation correct value.'
'_get_mount_point_for_share should calculate correct value.'
'_get_available_capacity should calculate correct value.'
'_get_available_capacity should calculate correct value.'
'_ensure_share_mounted simple use case.'
'_ensure_shares_mounted should save share if mounted with success.'
'_ensure_shares_mounted should not save share if failed to mount.'
'do_setup should throw error if shares config is not configured.'
'do_setup should throw error if nfs client is not installed.'
'_find_share should throw error if there is no mounted shares.'
'_find_share simple use case.'
'_find_share should throw error if there is no share to host vol.'
'create_volume ensures shares provided in config are mounted.'
'create_volume should return provider_location with found share.'
'delete_volume simple test case.'
'delete_volume should ensure that corresponding share is mounted.'
'delete_volume shouldn\'t delete if provider_location missed.'
'delete_volume should not try to delete if file missed.'
'get_volume_stats must fill the correct values'
'Returns the socket\'s internal buffer.'
'Required for compatibility with boto/tornado.'
'Walks all version scripts for each tested database, ensuring DCNL that there are no errors in the version scripts for each engine'
'Test that we can trigger a mysql connection failure and we fail DCNL gracefully to ensure we don\'t break people without mysql'
'Test that table creation on mysql only builds InnoDB tables'
'Test that we can trigger a postgres connection failure and we fail DCNL gracefully to ensure we don\'t break people without postgres'
'migrate up to a new version of the db. DCNL We allow for data insertion and post checks at every DCNL migration version with special _prerun_### and DCNL _check_### functions in the main test.'
'Test that adding source_volid column works correctly.'
'Test that adding and removing the backups table works correctly'
'Test adding snapshot_metadata table works correctly.'
'Finds a volume by its name.'
'Checks if a volume exists.'
'Checks if a snapshot exists.'
'Finds a snapshot by its name.'
'Deletes a volume.'
'Gets the path disk of the volume.'
'Deletes a snapshot.'
'Finds a initiator id by its name.'
'Checks if  a initiatorId exists.'
'Finds a export id by its name.'
'Checks if  a export exists.'
'Deletes a initiatorId.'
'Deletes an export.'
'Respond to a GET request.'
'Respond to a POST request.'
'Returns the socket\'s internal buffer'
'Respond to a GET request.'
'Respond to a POST request.'
'Respond to a GET request.'
'Respond to a POST request.'
'Get the content of the child'
'Respond to a GET request.'
'Respond to a POST request.'
'Do any initialization that needs to be run if this is a DCNL standalone service.'
'Create volume backups using configured backup service.'
'Restore volume backups from configured backup service.'
'Delete volume backup from configured backup service.'
'Make the RPC call to delete a volume backup.'
'Make the RPC call to create a volume backup.'
'Make the RPC call to restore a volume backup.'
'Backup the given volume to swift using the given backup metadata.'
'Restore a v1 swift volume backup from swift.'
'Restore the given volume backup from swift.'
'Delete the given backup from swift.'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a server to finish. DCNL :param service: Server to run and wait for. DCNL :returns: None'
'Load and start the given server. DCNL :param server: The server you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary.'
'Instantiates class and passes back application object. DCNL :param host: defaults to FLAGS.host DCNL :param binary: defaults to basename of executable DCNL :param topic: defaults to bin_name - \'cinder-\' part DCNL :param manager: defaults to FLAGS.<topic>_manager DCNL :param report_interval: defaults to FLAGS.report_interval DCNL :param periodic_interval: defaults to FLAGS.periodic_interval DCNL :param periodic_fuzzy_delay: defaults to FLAGS.periodic_fuzzy_delay'
'Destroy the service object in the datastore.'
'Tasks to be run at a periodic interval.'
'Update the state of this service in the datastore.'
'Initialize, but do not start the WSGI server. DCNL :param name: The name of the WSGI server given to the loader. DCNL :param loader: Loads the WSGI application using the given name. DCNL :returns: None'
'Initialize a Manager object appropriate for this service. DCNL Use the service name to look up a Manager subclass from the DCNL configuration and initialize an instance. If no class name DCNL is configured, just return None. DCNL :returns: a Manager instance, or None.'
'Start serving this service using loaded configuration. DCNL Also, retrieve updated port number in case \'0\' was passed in, which DCNL indicates a random port should be used. DCNL :returns: None'
'Stop serving this API. DCNL :returns: None'
'Wait for the service to stop serving this API. DCNL :returns: None'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool'
'When with ConnectionContext() is used, return self'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
':param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending" flag'
'The consume() callback will call this.  Store the result.'
'Return a result until we get a \'None\' response from consumer'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute.'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect'
'Fetch the message and pass it to the callback object'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection'
'Send a message'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection'
'Send a message'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params DCNL should be used for the connection (if any)'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Init a brain using json instead of a rules dictionary.'
'Checks authorization of some rules against credentials. DCNL Detailed description of the check with examples in policy.enforce(). DCNL :param match_list: nested tuples of data to match against DCNL :param target_dict: dict of object properties DCNL :param credentials_dict: dict of actor properties DCNL :returns: True if the check passes'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'How weighted this weigher should be.  Normally this would DCNL be overriden in a subclass based on a config value.'
'Override in a subclass to specify a weight for a specific DCNL object.'
'Weigh multiple objects.  Override in a subclass if you need DCNL need access to all objects in order to manipulate weights.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Return a sorted (highest score first) list of WeighedObjects.'
'Return True if the object passes the filter, otherwise False.'
'Return True if the HostState passes the filter, otherwise False. DCNL Override this in a subclass.'
'Check that the capabilities provided by the services DCNL satisfy the extra specs associated with the instance type'
'Return a list of hosts that can create instance_type.'
'Returns True if the specified operator can successfully DCNL compare the first item in the args with all the rest. Will DCNL return False if only one item is in the list.'
'First term is == all the other terms.'
'First term is < all the other terms.'
'First term is > all the other terms.'
'First term is in set of remaining terms'
'First term is <= all the other terms.'
'First term is >= all the other terms.'
'Flip each of the arguments.'
'True if any arg is True.'
'True if all args are True.'
'Strings prefixed with $ are capability lookups in the DCNL form \'$variable\' where \'variable\' is an attribute in the DCNL HostState class.  If $variable is a dictionary, you may DCNL use: $variable.dictkey'
'Recursively parse the query structure.'
'Return a list of hosts that can fulfill the requirements DCNL specified in the query.'
'Return True if it passes the filter, False otherwise. DCNL Override this in a subclass.'
'Yield objects that pass the filter. DCNL Can be overriden in a subclass, if you need to base filtering DCNL decisions on all objects.  Otherwise, one can just override DCNL _filter_one() to filter a single object.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Returns existing executable, or empty string if none found'
'Only check that the first argument (command) matches exec_path'
'Returns command to execute (with sudo -u if run_as != root).'
'Returns specific environment to set, None if none'
'Metaclass that allows us to collect decorated periodic tasks.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Tasks to be run at a periodic interval.'
'Handle initialization if this is a standalone service. DCNL Child classes should override this method.'
'Remember these capabilities to send on next periodic update.'
'Pass data back to the scheduler at a periodic interval.'
'Create a client that we\'ll use for every call.'
'Create a client that will be used for one call.'
'Call a glance client method.  If we get a connection error, DCNL retry the request according to FLAGS.glance_num_retries.'
'Calls out to Glance for a list of detailed image information.'
'Returns a dict with image data for the given opaque image id.'
'Returns the direct url representing the backend storage location, DCNL or None if this attribute is not shown by Glance.'
'Calls out to Glance for metadata and data and writes data.'
'Store the image data and return the new image object.'
'Modify the given image with the new data.'
'Delete the given image. DCNL :raises: ImageNotFound if the image does not exist. DCNL :raises: NotAuthorized if the user is not an owner.'
'Check image availability. DCNL This check is needed in case Nova and Glance are deployed DCNL without authentication turned on.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Given a list of resources, retrieve the default quotas. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources.'
'Given a list of resources, retrieve the quotas for the given DCNL quota class. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Given a list of resources, retrieve the quotas for the given DCNL project. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified.  It DCNL will be ignored if project_id == DCNL context.project_id. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve. DCNL :param has_sync: If True, indicates that the resource must DCNL have a sync attribute; if False, indicates DCNL that the resource must NOT have a sync DCNL attribute. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param deltas: A dictionary of the proposed delta changes. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initializes a Resource. DCNL :param name: The name of the resource, i.e., "volumes". DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Given a driver and context, obtain the quota for this DCNL resource. DCNL :param driver: A quota driver. DCNL :param context: The request context. DCNL :param project_id: The project to obtain the quota value for. DCNL If not provided, it is taken from the DCNL context.  If it is given as None, no DCNL project-specific quota will be searched DCNL for. DCNL :param quota_class: The quota class corresponding to the DCNL project, or for which the quota is to be DCNL looked up.  If not provided, it is taken DCNL from the context.  If it is given as None, DCNL no quota class-specific quota will be DCNL searched for.  Note that the quota class DCNL defaults to the value in the context, DCNL which may not correspond to the project if DCNL project_id is not the same as the one in DCNL the context.'
'Return the default value of the quota.'
'Initializes a ReservableResource. DCNL Reservable resources are those resources which directly DCNL correspond to objects in the database, i.e., volumes, gigabytes, DCNL etc.  A ReservableResource must be constructed with a usage DCNL synchronization function, which will be called to determine the DCNL current counts of one or more resources. DCNL The usage synchronization function will be passed three DCNL arguments: an admin context, the project ID, and an opaque DCNL session object, which should in turn be passed to the DCNL underlying database function.  Synchronization functions DCNL should return a dictionary mapping resource names to the DCNL current in_use count for those resources; more than one DCNL resource and resource count may be returned.  Note that DCNL synchronization functions may be associated with more than one DCNL ReservableResource. DCNL :param name: The name of the resource, i.e., "volumes". DCNL :param sync: A callable which returns a dictionary to DCNL resynchronize the in_use count for one or more DCNL resources, as described above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initializes a CountableResource. DCNL Countable resources are those resources which directly DCNL correspond to objects in the database, i.e., volumes, gigabytes, DCNL etc., but for which a count by project ID is inappropriate.  A DCNL CountableResource must be constructed with a counting DCNL function, which will be called to determine the current counts DCNL of the resource. DCNL The counting function will be passed the context, along with DCNL the extra positional and keyword arguments that are passed to DCNL Quota.count().  It should return an integer specifying the DCNL count. DCNL Note that this counting is not performed in a transaction-safe DCNL manner.  This resource class is a temporary measure to provide DCNL required functionality, until a better approach to solving DCNL this problem can be evolved. DCNL :param name: The name of the resource, i.e., "volumes". DCNL :param count: A callable which returns the count of the DCNL resource.  The arguments passed are as described DCNL above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initialize a Quota object.'
'Register a resource.'
'Register a list of resources.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Retrieve the default quotas. DCNL :param context: The request context, for access checks.'
'Retrieve the quotas for the given quota class. DCNL :param context: The request context, for access checks. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Retrieve the quotas for the given project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'Count a resource. DCNL For countable resources, invokes the count() function and DCNL returns its result.  Arguments following the context and DCNL resource are passed directly to the count function declared by DCNL the resource. DCNL :param context: The request context, for access checks. DCNL :param resource: The name of the resource, as a string.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction.  The DCNL values to check are given as keyword arguments, where the key DCNL identifies the specific quota limit to check, and the value is DCNL the proposed value. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas.  The deltas are given as DCNL keyword arguments, and current usage and other reservations DCNL are factored into the quota check. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initialize, but do not start, a WSGI server. DCNL :param name: Pretty name for logging. DCNL :param app: The WSGI application to serve. DCNL :param host: IP address to serve the application. DCNL :param port: Port number to server the application. DCNL :param pool_size: Maximum number of eventlets to spawn concurrently. DCNL :returns: None'
'Run the blocking eventlet WSGI server. DCNL :returns: None'
'Start serving a WSGI application. DCNL :param backlog: Maximum number of queued connections. DCNL :returns: None DCNL :raises: cinder.exception.InvalidInput'
'Stop this server. DCNL This is not a very nice action, as currently the method by which a DCNL server is stopped is by killing its eventlet. DCNL :returns: None'
'Block, until the server has stopped. DCNL Waits on the server\'s eventlet to finish, then returns. DCNL :returns: None'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = cinder.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import cinder.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = cinder.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import cinder.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Iterator that prints the contents of a wrapper string.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be an object that can route DCNL the request to the action-specific method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, \'/svrlist\', controller=sc, action=\'list\') DCNL # Actions are all implicitly defined DCNL mapper.resource(\'server\', \'servers\', controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, \'/v1.0/{path_info:.*}\', controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Dispatch the request to the appropriate controller. DCNL Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Initialize the loader, and attempt to find the config. DCNL :param config_path: Full or relative path to the paste config. DCNL :returns: None'
'Return the paste URLMap wrapped WSGI application. DCNL :param name: Name of the application to load. DCNL :returns: Paste URLMap object wrapping the requested application. DCNL :raises: `cinder.exception.PasteAppNotFound`'
'Filter a list of hosts based on request_spec.'
'Picks a host that is up at random.'
'Picks a host that is up at random.'
'Get a list of hosts from the HostManager.'
'Get the normalized set of capabilities for the services.'
'Process a capability update from a service node.'
'Return the list of hosts that have a running service for topic.'
'Must override schedule method for scheduler to work.'
'Must override schedule method for scheduler to work.'
'Update information about a host from its volume_node info.'
'Incrementally update host state from an volume'
'Since the caller may specify which filters to use we need DCNL to have an authoritative list of what is permissible. This DCNL function checks the filter names against a predefined set DCNL of acceptable filters.'
'Since the caller may specify which weighers to use, we need DCNL to have an authoritative list of what is permissible. This DCNL function checks the weigher names against a predefined set DCNL of acceptable weighers.'
'Filter hosts and return only ones passing all filters'
'Weigh the hosts'
'Update the per-service capabilities based on this notification.'
'Returns a dict of all the hosts the HostManager DCNL knows about. Also, each of the consumable resources in HostState DCNL are pre-populated and adjusted based on data in the db. DCNL For example: DCNL {\'192.168.1.100\': HostState(), ...}'
'Get a list of hosts from the HostManager.'
'Get the normalized set of capabilities for this zone.'
'Process a capability update from a service node.'
'The schedule() contract requires we return the one DCNL best-suited host for this request.'
'Fetch options dictionary. Broken out for testing.'
'Stuff things into filter_properties.  Can be overridden in a DCNL subclass to add more data.'
'Add additional information to the filter properties after a host has DCNL been selected by the scheduling process.'
'Add a retry entry for the selected volume backend. In the event that DCNL the request gets re-scheduled, this entry will signal that the given DCNL backend has already been tried.'
'If the request contained an exception from a previous volume DCNL create operation, log it to aid debugging'
'Populate filter properties with history of retries for this DCNL request. If maximum retries is exceeded, raise NoValidHost.'
'Returns a list of hosts that meet the required specs, DCNL ordered by their fitness.'
'Get file handle. Broken out for testing.'
'Get the last modified datetime. Broken out for testing.'
'Decode the JSON file. Broken out for testing.'
'Get current UTC. Broken out for testing.'
'Check the json file for changes and load it if needed.'
'Override the weight multiplier.'
'Higher weights win.  We want spreading to be the default.'
'Return True if host has sufficient capacity.'
'Skip nodes that have already been attempted.'
'Picks a host that is up and has the fewest volumes.'
':param read_deleted: \'no\' indicates deleted records are hidden, \'yes\' DCNL indicates deleted records are visible, \'only\' indicates that DCNL *only* deleted records are visible. DCNL :param overwrite: Set to False to ensure that the greenthread local DCNL copy of the index is not overwritten. DCNL :param kwargs: Extra arguments that might be present, but we ignore DCNL because they possibly came in from older rpc messages.'
'Return a version of this context with admin flag set.'
'Creates a volume. Can optionally return a Dictionary of DCNL changes to the volume object to be persisted.'
'Creates a volume from a snapshot.'
'Creates a clone of the specified volume.'
'Deletes a volume.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Synchronously recreates an export for a volume.'
'Exports the volume. Can optionally return a Dictionary of changes DCNL to the volume object to be persisted.'
'Removes an export for a volume.'
'Allow connection to connector and return connection info.'
'Disallow connection from connector'
'Callback for volume attached to instance.'
'Callback for volume detached.'
'Return the current state of the volume service. If \'refresh\' is DCNL True, run the update first.'
'Any initialization the volume driver does while starting'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Create a volume efficiently from an existing image. DCNL image_location is a string whose format depends on the DCNL image service backend in use. The driver should use it DCNL to determine whether cloning is possible. DCNL Returns a boolean indicating whether cloning occurred'
'Create a new backup from an existing volume.'
'Restore an existing backup to a new or existing volume.'
'Gets iscsi configuration DCNL We ideally get saved information in the volume entity, but fall back DCNL to discovery if need be. Discovery may be completely removed in future DCNL The properties are: DCNL :target_discovered:    boolean indicating whether discovery was used DCNL :target_iqn:    the IQN of the iSCSI target DCNL :target_portal:    the portal of the iSCSI target DCNL :target_lun:    the lun of the iSCSI target DCNL :volume_id:    the id of the volume (currently used by xen) DCNL :auth_method:, :auth_username:, :auth_password: DCNL the authentication details. Right now, either auth_method is not DCNL present meaning no authentication, or auth_method == `CHAP` DCNL meaning use CHAP with the specified credentials.'
'Initializes the connection and returns connection info. DCNL The iscsi driver returns a driver_volume_type of \'iscsi\'. DCNL The format of the driver data is defined in _get_iscsi_properties. DCNL Example return value:: DCNL \'driver_volume_type\': \'iscsi\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_iqn\': \'iqn.2010-10.org.openstack:volume-00000001\', DCNL \'target_portal\': \'127.0.0.0.1:3260\', DCNL \'volume_id\': 1,'
'Get iscsi initiator name for this machine'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Attach the volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'No setup necessary in fake mode.'
'Execute that simply logs the command.'
'Initializes the connection and returns connection info. DCNL The  driver returns a driver_volume_type of \'fibre_channel\'. DCNL The target_wwn can be a single entry or a list of wwns that DCNL correspond to the list of remote wwn(s) that will export the volume. DCNL Example return values: DCNL \'driver_volume_type\': \'fibre_channel\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_lun\': 1, DCNL \'target_wwn\': \'1234567890123\', DCNL or DCNL \'driver_volume_type\': \'fibre_channel\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_lun\': 1, DCNL \'target_wwn\': [\'1234567890123\', \'0987654321321\'],'
'Set the function to be used to execute commands.'
'Create a iSCSI target and logical unit'
'Remove a iSCSI target and logical unit'
'Create a new iSCSI target.'
'Delete a target.'
'Query the given target ID.'
'Create a new LUN on a target using the supplied path.'
'Delete a logical unit from a target.'
'Returns an error if prerequisites aren\'t met'
'Deletes a logical volume.'
'Creates a logical volume. Can optionally return a Dictionary of DCNL changes to the volume object to be persisted.'
'Creates a volume from a snapshot.'
'Deletes a logical volume.'
'unprovision old volumes to prevent data leaking between users.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Creates a clone of the specified volume.'
'Create a new backup from an existing volume.'
'Restore an existing backup to a new or existing volume.'
'Synchronously recreates an export for a logical volume.'
'Fix provider_location and dev files to address bug 1065702. DCNL For volumes that the provider_location has NOT been updated DCNL and are not currently in-use we\'ll create a new iscsi target DCNL and remove the persist file. DCNL If the volume is in-use, we\'ll just stick with the old name DCNL and when detach is called we\'ll feed back into ensure_export DCNL again if necessary and fix things up then. DCNL Details at: https://bugs.launchpad.net/cinder/+bug/1065702'
'Ensure that target ids have been created in datastore.'
'Creates an export for a logical volume.'
'Removes an export for a logical volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Returns an error if prerequisites aren\'t met'
'Creates a logical volume. Can optionally return a Dictionary of DCNL changes to the volume object to be persisted.'
'Deletes a logical volume.'
'Creates a clone of the specified volume.'
'Creates a snapshot of a volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Creates a EMC(VMAX/VNX) volume.'
'Creates a volume from a snapshot.'
'Creates a cloned volume.'
'Deletes an EMC volume.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Driver entry point to get the export info for an existing volume.'
'Driver entry point to get the export info for a new volume.'
'Driver entry point to remove an export for a volume.'
'Make sure volume is exported.'
'Initializes the connection and returns connection info. DCNL The iscsi driver returns a driver_volume_type of \'iscsi\'. DCNL the format of the driver data is defined in _get_iscsi_properties. DCNL Example return value:: DCNL \'driver_volume_type\': \'iscsi\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_iqn\': \'iqn.2010-10.org.openstack:volume-00000001\', DCNL \'target_portal\': \'127.0.0.0.1:3260\', DCNL \'volume_id\': 1,'
'Gets iscsi configuration. DCNL We ideally get saved information in the volume entity, but fall back DCNL to discovery if need be. Discovery may be completely removed in future DCNL The properties are: DCNL :target_discovered:    boolean indicating whether discovery was used DCNL :target_iqn:    the IQN of the iSCSI target DCNL :target_portal:    the portal of the iSCSI target DCNL :target_lun:    the lun of the iSCSI target DCNL :volume_id:    the id of the volume (currently used by xen) DCNL :auth_method:, :auth_username:, :auth_password: DCNL the authentication details. Right now, either auth_method is not DCNL present meaning no authentication, or auth_method == `CHAP` DCNL meaning use CHAP with the specified credentials.'
'Disallow connection from connector.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Creates a EMC(VMAX/VNX) volume.'
'Creates a volume from a snapshot.'
'Creates a clone of the specified volume.'
'Deletes an EMC volume.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Driver entry point to get the export info for a new volume.'
'This method maps a volume to a host. DCNL It adds a volume and initiator to a Storage Group DCNL and therefore maps the volume to the host.'
'This method unmaps a volume from the host. DCNL Removes a volume from the Storage Group DCNL and therefore unmaps the volume from the host.'
'This method maps a volume to a host. DCNL Add volume to the Device Masking Group that belongs to DCNL a Masking View.'
'This method unmaps a volume from a host. DCNL Removes volume from the Device Masking Group that belongs to DCNL a Masking View.'
'Maps a volume to the host.'
'Unmaps a volume from the host.'
'Initializes the connection and returns connection info.'
'Disallow connection from connector.'
'Retrieve status info.'
'Get the storage type from the config file.'
'Finds the Device Masking Group in a masking view.'
'Create an SSH client and open an interactive SSH channel.'
'Close SSH connection.'
'Read data from SSH channel.'
'Send SSH commands and return results.'
'Check config file.'
'Try to connect with device and get device type.'
'Create a new volume.'
'Delete a volume.'
'Driver entry point to get the  export info for a new volume.'
'Driver entry point to get the export info for a existing volume.'
'Driver entry point to remove an export for a volume.'
'Map a volume to a host and return target iSCSI information.'
'Delete map between a volume and a host.'
'Create a snapshot.'
'Delete a snapshot.'
'Create a volume from a snapshot. DCNL We use LUNcopy to create a new LUN from snapshot.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Check the config file, make sure the key elements are set.'
'Open xml file.'
'Get login IP, username and password from config file.'
'Get parameters from config file for creating LUN.'
'Return pools information created in storage device.'
'Get the maximum pool from config file. DCNL According to the given pools\' name in config file, DCNL we select the pool of maximum free capacity.'
'Get iSCSI info from config file.'
'Build SSH connection to execute CLI commands. DCNL If the connection to first controller time out, DCNL try to connect to the other controller.'
'Form new names because of the 32-character limit on names.'
'Get the ID of a LUN with the given LUN name.'
'Create a host group.'
'Get the given hostgroup ID.'
'Add a new host.'
'Check whether the initiator is already added.'
'Add a new initiator to storage device.'
'Delete an initiator.'
'Get the given host ID.'
'Get hostports details of the given host.'
'Add a host port.'
'Delete a host port.'
'Get target iSCSI iqn.'
'Get iSCSI IP infomation of storage device.'
'Map a lun to a host. DCNL Here we give the hostlun ID which starts from 1.'
'Get the hostLUN ID of a LUN according host ID and LUN ID.'
'Remove the map.'
'Delete a host.'
'Get map infomation of the given host. DCNL This method return a map information list. Every item in the list DCNL is a dictionary. The dictionarie includes three keys: mapid, DCNL devlunid, hostlunid. These items are sorted by hostlunid value DCNL from small to large.'
'Get the storage device type and product version.'
'Active a snapshot.'
'Disable a snapshot.'
'Delete a snapshot.'
'Create a new volume with the given name and size.'
'Delete a volume.'
'Create a LUNcopy.'
'Starte a LUNcopy.'
'Get the given LUNcopy\'s ID.'
'Wait for LUNcopy to complete.'
'Get LUNcopy information.'
'Delete a LUNcopy.'
'Create a snapshot with snapshot name and source LUN ID.'
'Get the given snapshot ID.'
'Check whether resource pools\' valid size is more than 1G.'
'Retrieve status info from volume group.'
'Get total free capacity of pools.'
'Sanity checks before attempting to mount SOFS.'
'Any initialization the volume driver does while starting.'
'Returns an error if prerequisites aren\'t met.'
'Creates a logical volume. DCNL Can optionally return a Dictionary of changes to the volume DCNL object to be persisted.'
'Creates a volume from a snapshot.'
'Deletes a logical volume.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Synchronously recreates an export for a logical volume.'
'Exports the volume. DCNL Can optionally return a Dictionary of changes to the volume DCNL object to be persisted.'
'Removes an export for a logical volume.'
'Allow connection to connector and return connection info.'
'Disallow connection from connector.'
'Callback for volume attached to instance.'
'Callback for volume detached.'
'Return the current state of the volume service. DCNL If \'refresh\' is True, run the update first.'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Create a volume efficiently from an existing image. DCNL image_location is a string whose format depends on the DCNL image service backend in use. The driver should use it DCNL to determine whether cloning is possible. DCNL Returns a boolean indicating whether cloning occurred'
'Initialize the driver.'
'Setup and verify IBM XIV storage connection.'
'Ensure an export.'
'Create an export.'
'Create a volume on the IBM XIV storage system.'
'Delete a volume on the IBM XIV storage system.'
'Disconnect a volume from an attached instance.'
'Map the created volume.'
'Terminate a connection to a volume.'
'Create a volume from a snapshot.'
'Create a snapshot.'
'Delete a snapshot.'
'Get volume stats.'
'Any initialization the volume driver does while starting.'
'Just to override parent behavior.'
'Creates a volume.'
'Deletes a logical volume.'
'Synchronously recreates an export for a logical volume.'
'Exports the volume. Can optionally return a Dictionary of changes DCNL to the volume object to be persisted.'
'Removes an export for a logical volume.'
'Allow connection to connector and return connection info.'
'Disallow connection from connector.'
'Create a volume on given glusterfs_share. DCNL :param volume: volume reference'
'Look for GlusterFS shares in the flags and try to mount them DCNL locally.'
'Mount GlusterFS share. DCNL :param glusterfs_share:'
'Choose GlusterFS share among available ones for given volume size. DCNL Current implementation looks for greatest capacity. DCNL :param volume_size_for: int size in GB'
'Return mount point for share. DCNL :param glusterfs_share: example 172.18.194.100:/var/glusterfs'
'Calculate available space on the GlusterFS share. DCNL :param glusterfs_share: example 172.18.194.100:/var/glusterfs'
'Mount GlusterFS share to mount path.'
'Get volume stats. DCNL If \'refresh\' is True, update the stats first.'
'Retrieve stats info from volume group.'
'Utility routine to handle checking ZAPI failures.'
'Instantiate a web services client. DCNL This method creates a "suds" client to make web services calls to the DCNL DFM server. Note that the WSDL file is quite large and may take DCNL a few seconds to parse.'
'Set the storage service to use for provisioning.'
'Set the storage service prefix to use for provisioning.'
'Set the vfiler to use for provisioning.'
'Ensure that the flags we care about are set.'
'Setup the NetApp Volume driver. DCNL Called one time by the manager after the driver is loaded. DCNL Validate the flags we care about and setup the suds (web services) DCNL client.'
'Check that the driver is working and can communicate. DCNL Invoke a web services API to make sure we can talk to the server. DCNL Also perform the discovery of datasets and LUNs from DFM.'
'Get the list of datasets from DFM.'
'Discover all of the LUNs in a dataset.'
'Discover the LUNs from DFM. DCNL Discover all of the OpenStack-created datasets and LUNs in the DFM DCNL database.'
'Get progress of one running DFM job. DCNL Obtain the latest progress report for the job and return the DCNL list of progress events.'
'Wait until a job terminates. DCNL Poll the job until it completes or an error is detected. Return the DCNL final list of progress events if it completes successfully.'
'Return the dataset name for a given project and volume type.'
'Lookup a dataset by name in the list of discovered datasets.'
'Create a new dataset using the storage service. DCNL The export settings are set to create iSCSI LUNs aligned for Linux. DCNL Returns the ID of the new dataset.'
'Provision a LUN through provisioning manager. DCNL The LUN will be created inside a dataset associated with the project. DCNL If the dataset doesn\'t already exist, we create it using the storage DCNL service specified in the cinder conf.'
'Get the storage service type for a volume.'
'Remove the LUN from the dataset, also destroying it. DCNL Remove the LUN from the dataset and destroy the actual LUN and Qtree DCNL on the storage system.'
'Driver entry point for creating a new volume.'
'Lookup the LUN that corresponds to the give volume. DCNL Initial lookups involve a table scan of all of the discovered LUNs, DCNL but later lookups are done instantly from the hashtable.'
'Driver entry point for destroying existing volumes.'
'Given the ID of a LUN, get the details about that LUN.'
'Given the ID of a host, get the details about it. DCNL A "host" is a storage system here.'
'Get the iSCSI Target Name for a storage system.'
'Return true if the API element should be considered empty. DCNL Helper routine to figure out if a list returned from a proxy API DCNL is empty. This is necessary because the API proxy produces nasty DCNL looking XML.'
'Get iSCSI target portal for a storage system. DCNL Get the iSCSI Target Portal details for a particular IP address DCNL on a storage system.'
'Get the iSCSI export details for a volume. DCNL Looks up the LUN in DFM based on the volume and project name, then get DCNL the LUN\'s ID. We store that value in the database instead of the iSCSI DCNL details because we will not have the true iSCSI details until masking DCNL time (when initialize_connection() is called).'
'Driver entry point to get the export info for an existing volume.'
'Driver entry point to get the export info for a new volume.'
'Driver exntry point to remove an export for a volume. DCNL Since exporting is idempotent in this driver, we have nothing DCNL to do for unexporting.'
'Get the igroup for an initiator. DCNL Look for an existing igroup (initiator group) on the storage system DCNL containing a given iSCSI initiator and return the name of the igroup.'
'Create a new igroup. DCNL Create a new igroup (initiator group) on the storage system to hold DCNL the given iSCSI initiator. The group will only have 1 member and will DCNL be named "openstack-${initiator_name}".'
'Get the mapping between a LUN and an igroup. DCNL Check if a given LUN is already mapped to the given igroup (initiator DCNL group). If the LUN is mapped, also return the LUN number for the DCNL mapping.'
'Map a LUN to an igroup. DCNL Map the given LUN to the given igroup (initiator group). Return the LUN DCNL number that the LUN was mapped to (the filer will choose the lowest DCNL available number).'
'Unmap the given LUN from the given igroup (initiator group).'
'Ensure that a LUN is mapped to a particular initiator. DCNL Check if a LUN is mapped to a given initiator already and create DCNL the mapping if it is not. A new igroup will be created if needed. DCNL Returns the LUN number for the mapping between the LUN and initiator DCNL in both cases.'
'Ensure that a LUN is not mapped to a particular initiator. DCNL Check if a LUN is mapped to a given initiator and remove the DCNL mapping if it is. This does not destroy the igroup.'
'Driver entry point to attach a volume to an instance. DCNL Do the LUN masking on the storage system so the initiator can access DCNL the LUN on the target. Also return the iSCSI properties so the DCNL initiator can find the LUN. This implementation does not call DCNL _get_iscsi_properties() to get the properties because cannot store the DCNL LUN number in the database. We only find out what the LUN number will DCNL be during this method call so we construct the properties dictionary DCNL ourselves.'
'Driver entry point to unattach a volume from an instance. DCNL Unmask the LUN on the storage system so the given intiator can no DCNL longer access it.'
'Check the status of a clone operation. DCNL Return True if done, False otherwise.'
'Create a clone of a NetApp LUN. DCNL The clone initially consumes no space and is not space reserved.'
'Refresh the LUN list for one filer in DFM.'
'Destroy a LUN on the filer.'
'Resize the volume by the amount requested.'
'Create a qtree the filer.'
'Driver entry point for creating a snapshot. DCNL This driver implements snapshots by using efficient single-file DCNL (LUN) cloning.'
'Driver entry point for deleting a snapshot.'
'Driver entry point for creating a new volume from a snapshot. DCNL Many would call this "cloning" and in fact we use cloning to implement DCNL this feature.'
'Creates a clone of the specified volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Get the metadata property of a LUN.'
'Instantiate a web services client. DCNL This method creates a "suds" client to make web services calls to the DCNL DFM server. Note that the WSDL file is quite large and may take DCNL a few seconds to parse.'
'Ensure that the flags we care about are set.'
'Setup the NetApp Volume driver. DCNL Called one time by the manager after the driver is loaded. DCNL Validate the flags we care about and setup the suds (web services) DCNL client.'
'Check that the driver is working and can communicate. DCNL Discovers the LUNs on the NetApp server.'
'Driver entry point for creating a new volume.'
'Driver entry point for destroying existing volumes.'
'Driver entry point to get the export info for an existing volume.'
'Driver entry point to get the export info for a new volume.'
'Driver exntry point to remove an export for a volume. DCNL Since exporting is idempotent in this driver, we have nothing DCNL to do for unexporting.'
'Driver entry point to attach a volume to an instance. DCNL Do the LUN masking on the storage system so the initiator can access DCNL the LUN on the target. Also return the iSCSI properties so the DCNL initiator can find the LUN. This implementation does not call DCNL _get_iscsi_properties() to get the properties because cannot store the DCNL LUN number in the database. We only find out what the LUN number will DCNL be during this method call so we construct the properties dictionary DCNL ourselves.'
'Driver entry point to unattach a volume from an instance. DCNL Unmask the LUN on the storage system so the given intiator can no DCNL longer access it.'
'Driver entry point for creating a snapshot. DCNL This driver implements snapshots by using efficient single-file DCNL (LUN) cloning.'
'Driver entry point for deleting a snapshot.'
'Driver entry point for creating a new volume from a snapshot. DCNL Many would call this "cloning" and in fact we use cloning to implement DCNL this feature.'
'Get the storage service type for a volume.'
'Adds LUN to cache table.'
'Clone LUN with the given handle to the new name.'
'Creates metadata from kwargs.'
'Get the details for a LUN from our cache table.'
'Creates dictionary from metadata array.'
'Creates a clone of the specified volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Instantiate a client for NetApp server. DCNL This method creates NetApp server client for api communication.'
'Does custom setup depending on the type of filer.'
'Ensure that the flags we care about are set.'
'Setup the NetApp Volume driver. DCNL Called one time by the manager after the driver is loaded. DCNL Validate the flags we care about and setup NetApp DCNL client.'
'Check that the driver is working and can communicate. DCNL Discovers the LUNs on the NetApp server.'
'Driver entry point for creating a new volume.'
'Driver entry point for destroying existing volumes.'
'Driver entry point to get the export info for an existing volume.'
'Driver entry point to get the export info for a new volume.'
'Driver exntry point to remove an export for a volume. DCNL Since exporting is idempotent in this driver, we have nothing DCNL to do for unexporting.'
'Driver entry point to attach a volume to an instance. DCNL Do the LUN masking on the storage system so the initiator can access DCNL the LUN on the target. Also return the iSCSI properties so the DCNL initiator can find the LUN. This implementation does not call DCNL _get_iscsi_properties() to get the properties because cannot store the DCNL LUN number in the database. We only find out what the LUN number will DCNL be during this method call so we construct the properties dictionary DCNL ourselves.'
'Driver entry point for creating a snapshot. DCNL This driver implements snapshots by using efficient single-file DCNL (LUN) cloning.'
'Driver entry point for deleting a snapshot.'
'Driver entry point for creating a new volume from a snapshot. DCNL Many would call this "cloning" and in fact we use cloning to implement DCNL this feature.'
'Driver entry point to unattach a volume from an instance. DCNL Unmask the LUN on the storage system so the given intiator can no DCNL longer access it.'
'Gets the supported ontapi version.'
'Creates an actual lun on filer.'
'Get the available volume by size.'
'Returns iscsi iqn.'
'Gets the target portal details.'
'Returns lun handle based on filer type.'
'Gets the list of luns on filer.'
'Extracts the luns from api. DCNL Populates in the lun table.'
'Invoke the api for successful result. DCNL do_tunneling sets flag for tunneling.'
'Configures tunneling based on system type.'
'Checks if element is NetApp element.'
'Maps lun to the initiator. DCNL Returns lun id assigned.'
'Unmaps a lun from given initiator.'
'Find the igroup for mapped lun with initiator.'
'Checks for an igroup for an initiator. DCNL Creates igroup if not found.'
'Get igroups by initiator.'
'Checks if the os type supplied is NetApp supported.'
'Creates igoup with specified args.'
'Adds initiators to the specified igroup.'
'Get the storage service type for a volume.'
'Adds LUN to cache table.'
'Clone LUN with the given name to the new name.'
'Retrives lun with specified args.'
'Get the attributes for a LUN from our cache table.'
'Creates a clone of the specified volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Does custom setup for ontap cluster.'
'Get the available volume by size.'
'Gets the target portal details.'
'Returns iscsi iqn.'
'Returns lun handle based on filer type.'
'Gets the list of luns on filer.'
'Find the igroup for mapped lun with initiator.'
'Gets the lun map by lun path.'
'Get igroups by initiator.'
'Clone LUN with the given handle to the new name.'
'Retrives lun with specified args.'
'Creates lun metadata dictionary.'
'Configures tunneling for ontap cluster.'
'Retrieve status info from volume group.'
'Does custom setup depending on the type of filer.'
'Get the available volume by size.'
'Checks if a volume is not root.'
'Get igroups by initiator.'
'Gets the target portal details.'
'Returns iscsi iqn.'
'Returns lun handle based on filer type.'
'Gets the list of luns on filer.'
'Gets the luns for a volume.'
'Find the igroup for mapped lun with initiator.'
'Clone LUN with the given handle to the new name.'
'Sets the space reserve info.'
'Checks for the job till completed.'
'Retrives lun with specified args.'
'Creates lun metadata dictionary.'
'Configures tunneling for 7 mode.'
'Retrieve status info from volume group.'
'Get the transport type protocol.'
'Set the transport type protocol for api. DCNL Supports http and https transport types.'
'Get the authorization style for communicating with the server.'
'Set the authorization style for communicating with the server. DCNL Supports basic_auth for now. DCNL Certificate_auth mode to be done.'
'Get the target server type.'
'Set the target server type. DCNL Supports filer and dfm server types.'
'Set the api version.'
'Gets the api version.'
'Set the server communication port.'
'Get the server communication port.'
'Sets the timeout in seconds'
'Gets the timeout in seconds if set.'
'Get the vfiler tunneling.'
'Set the vfiler tunneling.'
'Get the vserver for tunneling.'
'Set the vserver for tunneling.'
'Set the username for authentication.'
'Set the password for authentication.'
'Invoke the api on the server.'
'Invokes api and checks execution status as success.'
'Creates request in the desired format.'
'Get the NaElement for the response.'
'Gets the call result.'
'Name of the element or etree.Element.'
'Returns the tag name of the element.'
'Set the text for the element.'
'Get the text for the element.'
'Add the attribute to the element.'
'Add multiple attributes to the element.'
'Add the child element to the element.'
'Get the child element by the tag name.'
'Get the content of the child.'
'Get the children for the element.'
'Checks whether element has attribute.'
'Get the attribute with the given name.'
'Returns the list of attribute names.'
'Add child with tag name and context. DCNL Convert replaces entity refs to chars.'
'Converts entity refs to chars DCNL neccessary to handle etree auto conversions.'
'Creates and returns named node with children.'
'Creates named node with children.'
'Prints the element to string'
'Returns an error if prerequisites aren\'t met'
'Creates a volume from a snapshot.'
'Creates a snapshot.'
'Deletes a snapshot.'
'Raises error if any required configuration flag for OnCommand proxy DCNL is missing.'
'Creates SOAP _client for ONTAP-7 DataFabric Service.'
'Returns NFS mount address as <nfs_ip_address>:<nfs_mount_dir>'
'Clones mounted volume with OnCommand proxy API'
'Polls ONTAP7 for clone status. Returns once clone is finished. DCNL :param clone_operation_id: Identifier of ONTAP clone operation'
'Returns provider location for given volume DCNL :param volume_id:'
'Returns IP address for the given volume'
'Returns NFS export path for the given volume'
'Returns ID of the ONTAP-7 host'
'Returns full path to the NFS share, e.g. /vol/vol0/home'
'Check if volume exists'
'Get volume path (local fs path) for given volume name on given nfs DCNL share DCNL @param nfs_share string, example 172.18.194.100:/var/nfs DCNL @param volume_name string, DCNL example volume-91ee65ec-c473-4391-8c09-162b00c68a8c'
'Creates a clone of the specified volume.'
'Retrieve status info from volume group.'
'Returns an error if prerequisites aren\'t met'
'Clones mounted volume with NetApp Cloud Services'
'Raises error if any required configuration flag for NetApp Cloud DCNL Webservices is missing.'
'Creates SOAP _client for NetApp Cloud service.'
'Retrieve status info from volume group.'
'Returns an error if prerequisites aren\'t met'
'Clones mounted volume on NetApp filer'
'Raises error if any required configuration flag for NetApp DCNL filer is missing.'
'Creates NetApp api client.'
'Do the customized set up on client if any for different types'
'Checks if element is NetApp element'
'Invoke the api for successful result. DCNL Vserver implies vserver api else filer/Cluster api.'
'Gets the supported ontapi version.'
'Do the customized set up on client for cluster mode'
'Clones mounted volume on NetApp Cluster'
'Gets the network interface info by ip.'
'Gets the volume by junction path and vserver'
'Clones file on vserver'
'Retrieve status info from volume group.'
'Do the customized set up on client if any for 7 mode'
'Clones mounted volume with NetApp filer'
'Gets the actual path on the filer for export path'
'Starts the clone operation. DCNL Returns the clone-id'
'Waits till a clone operation is complete or errored out.'
'Clear the clone information. DCNL Invoke this in case of failed clone.'
'Retrieve status info from volume group.'
'Returns an error if prerequisites aren\'t met'
'Return the current state of the volume service. If \'refresh\' is DCNL True, run the update first.'
'Creates a logical volume.'
'Creates a volume from a snapshot.'
'Deletes a logical volume.'
'Creates an rbd snapshot'
'Deletes an rbd snapshot'
'Returns the path of the rbd volume.'
'Synchronously recreates an export for a logical volume.'
'Exports the volume'
'Removes an export for a logical volume'
'Returns an error if prerequisites aren\'t met'
'Creates a sheepdog volume'
'Creates a sheepdog volume from a snapshot.'
'Deletes a logical volume'
'Creates a sheepdog snapshot'
'Deletes a sheepdog snapshot'
'Safely and synchronously recreates an export for a logical volume'
'Exports the volume'
'Removes an export for a logical volume'
'Check that we have all configuration details from the storage.'
'Ensure that the flags are set properly.'
'Check that the volume exists on the storage. DCNL The system does not "export" volumes as a Linux iSCSI target does, DCNL and therefore we just check that the volume exists on the storage.'
'Generate and store a randomly-generated CHAP secret for the host.'
'Return the CHAP secret for the given host.'
'Translate connector info to storage system host name. DCNL Translate a host\'s name and IP to the prefix of its hostname on the DCNL storage subsystem.  We create a host name host name from the host and DCNL IP address, replacing any invalid characters (at most 55 characters), DCNL and adding a random 8-character suffix to avoid collisions. The total DCNL length should be at most 63 characters.'
'List the hosts defined in the storage. DCNL Return the host name with the given connection info, or None if there DCNL is no host fitting that information.'
'Create a new host on the storage system. DCNL We create a host name and associate it with the given connection DCNL information.'
'Return the defined storage mappings for a host.'
'Create a mapping between a volume to a host.'
'Delete a host on the storage system.'
'Perform the necessary work so that an iSCSI/FC connection can DCNL be made. DCNL To be able to create an iSCSI/FC connection from a given host to a DCNL volume, we must: DCNL 1. Translate the given iSCSI name or WWNN to a host name DCNL 2. Create new host on the storage system if it does not yet exist DCNL 3. Map the volume to the host if it is not already done DCNL 4. Return the connection information for relevant nodes (in the DCNL proper I/O group)'
'Cleanup after an iSCSI connection has been terminated. DCNL When we clean up a terminated connection between a given connector DCNL and volume, we: DCNL 1. Translate the given connector to a host name DCNL 2. Remove the volume-to-host mapping if it exists DCNL 3. Delete the host if it has no more mappings (hosts are created DCNL automatically by this driver when mappings are created)'
'Return vdisk attributes, or None if vdisk does not exist DCNL Exception is raised if the information from system can not be DCNL parsed/matched to a single vdisk.'
'Return FlashCopy mappings that this vdisk is associated with.'
'Create a new vdisk.'
'Create a FlashCopy mapping from the source to the target.'
'Create a new snapshot using FlashCopy.'
'Check if vdisk is defined.'
'Deletes existing vdisks. DCNL It is very important to properly take care of mappings before deleting DCNL the disk: DCNL 1. If no mappings, then it was a vdisk, and can be deleted DCNL 2. If it is the source of a flashcopy mapping and copy_rate is 0, then DCNL it is a vdisk that has a snapshot.  If the force flag is set, DCNL delete the mapping and the vdisk, otherwise set the mapping to DCNL copy and wait (this will allow users to delete vdisks that have DCNL snapshots if/when the upper layers allow it). DCNL 3. If it is the target of a mapping and copy_rate is 0, it is a DCNL snapshot, and we should properly stop the mapping and delete. DCNL 4. If it is the source/target of a mapping and copy_rate is not 0, it DCNL is a clone or vdisk created from a snapshot.  We wait for the copy DCNL to complete (the mapping will be autodeleted) and then delete the DCNL vdisk.'
'Get volume status. DCNL If we haven\'t gotten stats yet or \'refresh\' is True, DCNL run update the stats first.'
'Retrieve status info from volume group.'
'Execute command on the Storwize/SVC and parse attributes. DCNL Exception is raised if the information from the system DCNL can not be obtained.'
'Return CLI row data as a dictionary indexed by names from header. DCNL string. The strings are converted to columns using the delimiter in DCNL delim.'
'Internal assertion mechanism for CLI output.'
'Sanity check to ensure we have required options set.'
'Returns an error if prerequisites aren\'t met.'
'Clone an existing volume.'
'Creates a volume from a snapshot. DCNL TODO: support using the size from the user.'
'Assigns the volume to a server. DCNL Assign any created volume to a compute node/host so that it can be DCNL used from that host. DCNL This driver returns a driver_volume_type of \'iscsi\'. DCNL The format of the driver data is defined in _get_iscsi_properties. DCNL Example return value: DCNL \'driver_volume_type\': \'iscsi\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_iqn\': \'iqn.2010-10.org.openstack:volume-00000001\', DCNL \'target_protal\': \'127.0.0.1:3260\', DCNL \'volume_id\': 1, DCNL Steps to export a volume on 3PAR DCNL * Get the 3PAR iSCSI iqn DCNL * Create a host on the 3par DCNL * create vlun on the 3par'
'Driver entry point to unattach a volume from an instance.'
'This is a 3PAR host entry for exporting volumes DCNL via active VLUNs.'
'Converts the openstack volume id from DCNL ecffc30f-98cb-4cf5-85ee-d7309cc17cd2 DCNL to DCNL osv-7P.DD5jLTPWF7tcwnMF80g DCNL We convert the 128 bits of the uuid into a 24character long DCNL base64 encoded string to ensure we don\'t exceed the maximum DCNL allowed 31 character name limit on 3Par DCNL We strip the padding \'=\' and replace + with . DCNL and / with -'
'Runs a CLI command over SSH, without doing any result parsing.'
'We have to do this in order to get CSV output DCNL from the CLI command.   We first have to issue DCNL a command to tell the CLI that we want the output DCNL to be formatted in CSV, then we issue the real DCNL command.'
'We have to use a safe hostname length DCNL for 3PAR host names.'
'In order to export a volume on a 3PAR box, we have to DCNL create a VLUN.'
'Creates a volume from a snapshot. DCNL TODO: support using the size from the user.'
'Sanity check to ensure we have required options set.'
'Returns an error if prerequisites aren\'t met.'
'Creates a volume from a snapshot. DCNL TODO: support using the size from the user.'
'Assigns the volume to a server. DCNL Assign any created volume to a compute node/host so that it can be DCNL used from that host. DCNL The  driver returns a driver_volume_type of \'fibre_channel\'. DCNL The target_wwn can be a single entry or a list of wwns that DCNL correspond to the list of remote wwn(s) that will export the volume. DCNL Example return values: DCNL \'driver_volume_type\': \'fibre_channel\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_lun\': 1, DCNL \'target_wwn\': \'1234567890123\', DCNL or DCNL \'driver_volume_type\': \'fibre_channel\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_lun\': 1, DCNL \'target_wwn\': [\'1234567890123\', \'0987654321321\'], DCNL Steps to export a volume on 3PAR DCNL * Create a host on the 3par with the target wwn DCNL * Create a VLUN for that HOST with the volume we want to export.'
'Driver entry point to unattach a volume from an instance.'
'This is a 3PAR host entry for exporting volumes DCNL via active VLUNs.'
'Runs a CLIQ command over SSH, without doing any result parsing'
'Runs a CLIQ command over SSH, parsing and checking the output'
'Queries for info about the cluster (including IP)'
'Gets the IP on which a cluster shares iSCSI volumes'
'Gets the volume info, including IQN'
'Creates a volume.'
'Creates a volume from a snapshot.'
'Creates a snapshot.'
'Deletes a volume.'
'Assigns the volume to a server. DCNL Assign any created volume to a compute node/host so that it can be DCNL used from that host. HP VSA requires a volume to be assigned DCNL to a server. DCNL This driver returns a driver_volume_type of \'iscsi\'. DCNL The format of the driver data is defined in _get_iscsi_properties. DCNL Example return value: DCNL \'driver_volume_type\': \'iscsi\' DCNL \'data\': { DCNL \'target_discovered\': True, DCNL \'target_iqn\': \'iqn.2010-10.org.openstack:volume-00000001\', DCNL \'target_protal\': \'127.0.0.1:3260\', DCNL \'volume_id\': 1,'
'Unassign the volume from the host.'
'Synchronously recreates an export for a logical volume.'
'Exports the volume.'
'Removes an export for a logical volume.'
'Returns an error if prerequisites aren\'t met.'
'Create a cloen of the specified volume.'
'Gets list of target groups from host.'
'Creates a volume.'
'Deletes a volume.'
'Synchronously recreates an export for a logical volume.'
'Removes an export for a logical volume.'
'Split lines from data into an array, trimming them'
'Collect lines which start with prefix; with trimming'
'Generate command to be sent to VPSA.'
'Retrieve access key for VPSA connection.'
'Send command to VPSA Controller.'
'Any initialization the volume driver does while starting. DCNL Establishes initial connection with VPSA and retrieves access_key.'
'Returns an error (exception) if prerequisites aren\'t met.'
'Return local path to existing local volume.'
'Helper for parsing VPSA\'s XML output. DCNL Returns single item if first==True or list for multiple selection. DCNL If second argument in search_tuple is None - returns all items with DCNL appropriate key.'
'Return VPSA\'s name for the volume.'
'Return details of VPSA\'s active controller.'
'Return VPSA\'s name for server object with given IQN.'
'Create server object within VPSA (if doesn\'t exist).'
'Create volume.'
'Delete volume. DCNL Return ok if doesn\'t exist. Auto detach from all servers.'
'Irrelevant for VPSA volumes. Export created during attachment.'
'Irrelevant for VPSA volumes. Export created during attachment.'
'Irrelevant for VPSA volumes. Export removed during detach.'
'Attach volume to initiator/host. DCNL During this call VPSA exposes volume to particular Initiator. It also DCNL creates a \'server\' entity for Initiator (if it was not created before) DCNL All necessary connection information is returned, including auth data. DCNL Connection data (target, LUN) is not stored in the DB.'
'Detach volume from the initiator.'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Creates a clone of the specified volume.'
'Setup the Windows Volume driver. DCNL Called one time by the manager after the driver is loaded. DCNL Validate the flags we care about'
'Check that the driver is working and can communicate.'
'Driver entry point to attach a volume to an instance.'
'Driver entry point to unattach a volume from an instance. DCNL Unmask the LUN on the storage system so the given intiator can no DCNL longer access it.'
'Driver entry point for creating a new volume.'
'Driver entry point for destroying existing volumes.'
'Driver entry point for creating a snapshot.'
'Driver entry point for exporting snapshots as volumes.'
'Driver entry point for deleting a snapshot.'
'Do all steps to get disk exported as LUN 0 at separate target. DCNL :param volume: reference of volume to be exported DCNL :param ensure: if True, ignore errors caused by already existing DCNL resources DCNL :return: iscsiadm-formatted provider location string'
'Driver entry point to get the export info for an existing volume.'
'Driver entry point to get the export info for a new volume.'
'Driver exntry point to remove an export for a volume.'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Login and Session Handler.'
'Set effective group.'
'Map group name to group ID.'
'_esm represent the entry point to send requests to ESM Appliance. DCNL Send the HTTPS call, get response in JSON DCNL convert response into Python Object and return it.'
'In charge of all commands into \'configure\'.'
'Fetch information for a given Volume or Snapshot.'
'Return AoE Address for a given Volume.'
'Create LUN on Coraid Backend Storage.'
'Delete LUN.'
'Create Snapshot.'
'Delete Snapshot.'
'Create a LUN from a Snapshot.'
'Initialize the volume driver.'
'Return an error if prerequisites aren\'t met.'
'Return the ESM Repository from the Volume Type. DCNL The ESM Repository is stored into a volume_type_extra_specs key.'
'Create a Volume.'
'Delete a Volume.'
'Create a Snapshot.'
'Delete a Snapshot.'
'Create a Volume from a Snapshot.'
'Return connection information.'
'Return Volume Stats.'
'All API requests to SolidFire device go through this method. DCNL Simple json-rpc web based API calls. DCNL each call takes a set of paramaters (dict) DCNL and returns results in a dict as well.'
'Get all volumes on cluster for specified account.'
'Get SolidFire account object by name.'
'Build the SolidFire account name to use.'
'Create account on SolidFire device if it doesn\'t already exist. DCNL We\'re first going to check if the account already exits, if it does DCNL just return it.  If not, then create it.'
'Query the SolidFire cluster for some property info.'
'Gets the associated account, retrieves CHAP info and updates.'
'Generates random_string to use for CHAP password.'
'Gets the connection info for specified account and volume.'
'Create a clone of an existing volume. DCNL Currently snapshots are the same as clones on the SF cluster. DCNL Due to the way the SF cluster works there\'s no loss in efficiency DCNL or space usage between the two.  The only thing different right DCNL now is the restore snapshot functionality which has not been DCNL implemented in the pre-release version of the SolidFire Cluster.'
'Create volume on SolidFire device. DCNL The account is where CHAP settings are derived from, volume is DCNL created and exported.  Note that the new volume is immediately ready DCNL for use. DCNL One caveat here is that an existing user account must be specified DCNL in the API call to create a new volume.  We use a set algorithm to DCNL determine account info based on passed in cinder volume object.  First DCNL we check to see if the account already exists (and use it), or if it DCNL does not already exist, we\'ll go ahead and create it.'
'Create a clone of an existing volume.'
'Delete SolidFire Volume from device. DCNL SolidFire allows multipe volumes with same name, DCNL volumeID is what\'s guaranteed unique.'
'Verify the iscsi export info.'
'Setup the iscsi export info.'
'Delete the specified snapshot from the SolidFire cluster.'
'Create a snapshot of a volume on the SolidFire cluster. DCNL Note that for SolidFire Clusters currently there is no snapshot DCNL implementation.  Due to the way SF does cloning there\'s no performance DCNL hit or extra space used.  The only thing that\'s lacking from this is DCNL the abilit to restore snaps. DCNL After GA a true snapshot implementation will be available with DCNL restore at which time we\'ll rework this appropriately.'
'Create a volume from the specified snapshot.'
'Get volume status. DCNL If \'refresh\' is True, run update first. DCNL The name is a bit misleading as DCNL the majority of the data here is cluster DCNL data'
'Retrieve status info for the Cluster.'
'Just to override parent behavior.'
'Do nothing for this driver, but allow manager to handle deletion DCNL of snapshot in error state.'
'Creates file with 0 disk usage.'
'Creates regular file of given size. Takes a lot of time for large DCNL files.'
'Sets 666 permissions for the path.'
'Get volume path (mounted locally fs path) for given volume DCNL :param volume: volume reference'
'Check for existence of given path.'
'returns string that represents hash of base_str DCNL (in a hex format).'
'Any initialization the volume driver does while starting'
'Creates a volume'
'Deletes a logical volume.'
'Synchronously recreates an export for a logical volume.'
'Exports the volume. Can optionally return a Dictionary of changes DCNL to the volume object to be persisted.'
'Removes an export for a logical volume.'
'Allow connection to connector and return connection info.'
'Disallow connection from connector'
'Create a volume on given nfs_share DCNL :param volume: volume reference'
'Look for NFS shares in the flags and tries to mount them locally'
'Mount NFS share DCNL :param nfs_share:'
'Choose NFS share among available ones for given volume size. Current DCNL implementation looks for greatest capacity DCNL :param volume_size_for: int size in Gb'
':param nfs_share: example 172.18.194.100:/var/nfs'
'Calculate available space on the NFS share DCNL :param nfs_share: example 172.18.194.100:/var/nfs'
'Mount NFS share to mount path'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from volume group.'
'Verify that the volume for our zvols exists. DCNL :raise: :py:exc:`LookupError`'
'Return zvol name that corresponds given volume name.'
'Return iSCSI target name to access volume.'
'Return Nexenta iSCSI target group name for volume.'
'Create a zvol on appliance. DCNL :param volume: volume reference'
'Destroy a zvol on appliance. DCNL :param volume: volume reference'
'Create snapshot of existing zvol on appliance. DCNL :param snapshot: shapshot reference'
'Create new volume from other\'s snapshot on appliance. DCNL :param volume: reference of volume to be created DCNL :param snapshot: reference of source snapshot'
'Delete volume\'s snapshot on appliance. DCNL :param snapshot: shapshot reference'
'Return local path to existing local volume. DCNL We never have local volumes, so it raises NotImplementedError. DCNL :raise: :py:exc:`NotImplementedError`'
'Do all steps to get zvol exported as LUN 0 at separate target. DCNL :param volume: reference of volume to be exported DCNL :param ensure: if True, ignore errors caused by already existing DCNL resources DCNL :return: iscsiadm-formatted provider location string'
'Create new export for zvol. DCNL :param volume: reference of volume to be exported DCNL :return: iscsiadm-formatted provider location string'
'Recreate parts of export if necessary. DCNL :param volume: reference of volume to be exported'
'Destroy all resources created to export zvol. DCNL :param volume: reference of volume to be unexported'
'Fetch the image from image_service and write it to the volume.'
'Copy the volume to the specified image.'
'Creates a clone of the specified volume.'
'Get volume status. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info for Nexenta device.'
'This takes care of grafting the implementation\'s config DCNL values into the config group'
'Load the driver from the one specified in args, or from flags.'
'Do any initialization that needs to be run if this is a DCNL standalone service.'
'Creates and exports the volume.'
'Try to re-schedule the create or re-raise the original error to DCNL error out the volume.'
'Attempt to re-schedule a volume operation.'
'Deletes and unexports volume.'
'Creates and exports the snapshot.'
'Deletes and unexports snapshot.'
'Updates db to show volume is attached'
'Updates db to show volume is detached'
'Downloads Glance image to the specified volume.'
'Uploads the specified volume to Glance. DCNL image_meta is a dictionary containing the following keys: DCNL \'id\', \'container_format\', \'disk_format\''
'Prepare volume for connection from host represented by connector. DCNL This method calls the driver initialize_connection and returns DCNL it to the caller.  The connector parameter is a dictionary with DCNL information about the host that will connect to the volume in the DCNL following format:: DCNL \'ip\': ip, DCNL \'initiator\': initiator, DCNL ip: the ip address of the connecting machine DCNL initiator: the iscsi initiator name of the connecting machine. DCNL This can be None if the connecting machine does not support iscsi DCNL connections. DCNL driver is responsible for doing any necessary security setup and DCNL returning a connection_info dictionary in the following format:: DCNL \'driver_volume_type\': driver_volume_type, DCNL \'data\': data, DCNL driver_volume_type: a string to identify the type of volume.  This DCNL can be used by the calling code to determine the DCNL strategy for connecting to the volume. This could DCNL be \'iscsi\', \'rbd\', \'sheepdog\', etc. DCNL data: this is the data that the calling code will use to connect DCNL to the volume. Keep in mind that this will be serialized to DCNL json in various places, so it should not contain any non-json DCNL data types.'
'Cleanup connection from host represented by connector. DCNL The format of connector is the same as for initialize_connection.'
'Collect driver status and then publish'
'Get all metadata associated with a volume.'
'Delete the given metadata item from a volume.'
'Updates or creates volume metadata. DCNL If delete is True, metadata items that are not specified in the DCNL `metadata` argument will be deleted.'
'Get value of particular metadata key.'
'Get all metadata associated with a snapshot.'
'Delete the given metadata item from a snapshot.'
'Updates or creates snapshot metadata. DCNL If delete is True, metadata items that are not specified in the DCNL `metadata` argument will be deleted.'
'Check if the volume can be used.'
'Create a new image from the specified volume.'
'Sets the specified host\'s ability to accept new volumes.'
'Returns the result of calling "uptime" on the target host.'
'Start/Stop host maintenance window. On start, it triggers DCNL volume evacuation.'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
'From the output of pylint msg, to a dict, where each key DCNL is a unique error identifier, value is a list of LintOutput'
'Revoke all user certs.'
'Revoke all project certs.'
'Revoke certs for user in project.'
'Generate and sign a cert for user in project.'
'Get root ca for a project.'
'Get crl for a project.'
'Decrypt base64 encoded text using the projects private key.'
'Any addition steps that are needed outside of the migrations.'
'Run before each test method to initialize test environment.'
'Override flag variables for a test.'
'Creation of this object should basically cover all time consuming DCNL collection.  Methods after that should not cause time delays due to DCNL network operations or lengthy cpu operations. DCNL The user should then get a single instance and make multiple method DCNL calls on it.'
'Yields (path, value) tuples for metadata elements.'
'middleware can use fake for testing.'
'Return True if any role in roles is allowed in context.'
'Format InstanceBlockDeviceMappingResponseItemType.'
'Get all instances first, to prevent partial executions.'
'Terminate each instance in instance_id, which is a list of ec2 ids. DCNL instance_id is a kwarg so its name cannot be modified.'
'instance_id is a list of instance ids.'
'Stop each instances in instance_id. DCNL Here instance_id is a list of instance ids'
'Start each instances in instance_id. DCNL Here instance_id is a list of instance ids'
'Convert from format defined by GlanceImageService to S3 format.'
'Create a response for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Get the list of roles.'
'Register extension with the extension manager.'
'List of extensions.ResourceExtension extension objects. DCNL Resources define new nouns, and are accessible through URLs.'
'List of extensions.ControllerExtension extension objects. DCNL Controller extensions are used to extend existing controllers.'
'Synthesize a namespace map from extension.'
'Synthesize element and attribute names.'
'Returns a list of ResourceExtension objects.'
'Returns a list of ControllerExtension objects.'
'Checks for required methods in extension objects.'
'Execute an extension factory. DCNL Loads an extension.  The \'ext_factory\' is the name of a DCNL callable that will be imported and called with one DCNL argument--the extension manager.  The factory callable is DCNL expected to call the register() method at least once.'
'Load extensions specified on the command line.'
'Simple paste factory, :class:`nova.wsgi.Router` doesn\'t have one.'
'Marshal the metadata attribute of a parsed request.'
'Return href string with proper limit and marker params.'
'Return an href string pointing to this object.'
'Create a URL that refers to a specific resource.'
'Retrieve \'next\' link, if applicable.'
'Initialize the selector. DCNL Each argument is a subsequent index into the object.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Selects the relevant datum within the object. DCNL :param obj: The object from which to select the object. DCNL :param do_raise: If False (the default), return None if the DCNL indexed datum does not exist.  Otherwise, DCNL raise a KeyError.'
'Returns empty string if the selected value does not exist.'
'Initialize the selector. DCNL :param value: The value to return.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Returns a constant value.  Compatible with DCNL Selector.__call__().'
'Initialize an element. DCNL Initializes an element in the template.  Keyword arguments DCNL specify attributes to be set on the element; values must be DCNL callables.  See TemplateElement.set() for more information. DCNL :param tag: The name of the tag to create. DCNL :param attrib: An optional dictionary of element attributes. DCNL :param selector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL :param subselector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL This is used to further refine the datum DCNL object returned by selector in the event DCNL that it is a list of objects.'
'Return a representation of the template element.'
'Return the number of child elements.'
'Determine whether a child node named by key exists.'
'Retrieve a child node by index or name.'
'Append a child to the element.'
'Append children to the element.'
'Insert a child element at the given index.'
'Remove a child element.'
'Get an attribute. DCNL Returns a callable which performs datum selection. DCNL :param key: The name of the attribute to get.'
'Set an attribute. DCNL :param key: The name of the attribute to set. DCNL :param value: A callable taking an object and optional boolean DCNL do_raise indicator and returning the datum bound DCNL to the attribute.  If None, a Selector() will be DCNL constructed from the key.  If a string, a DCNL Selector() will be constructed from the string.'
'Return the attribute names.'
'Return the attribute names and values.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Apply text and attributes to an etree.Element. DCNL Applies the text and attribute instructions in the template DCNL element to an etree.Element instance. DCNL :param elem: An etree.Element instance. DCNL :param obj: The base object associated with this template DCNL element.'
'Internal rendering. DCNL Renders the template node into an etree.Element object. DCNL Returns the etree.Element object. DCNL :param parent: The parent etree.Element instance. DCNL :param datum: The datum associated with this template element. DCNL :param patches: A list of other template elements that must DCNL also be applied. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance.'
'Render an object. DCNL Renders an object against this template node.  Returns a list DCNL of two-item tuples, where the first item is an etree.Element DCNL instance and the second item is the datum associated with that DCNL instance. DCNL :param parent: The parent for the etree.Element instances. DCNL :param obj: The object to render this template element DCNL against. DCNL :param patches: A list of other template elements to apply DCNL when rendering this template element. DCNL :param nsmap: An optional namespace dictionary to attach to DCNL the etree.Element instances.'
'Hook method. DCNL An overridable hook method to determine whether this template DCNL element will be rendered at all.  By default, returns False DCNL (inhibiting rendering) if the datum is None. DCNL :param datum: The datum associated with this template element.'
'Template element text. DCNL Either None or a callable taking an object and optional DCNL boolean do_raise indicator and returning the datum bound to DCNL the text of the template element.'
'Return string representation of the template tree. DCNL Returns a representation of the template rooted at this DCNL element as a string, suitable for inclusion in debug logs.'
'Initialize a template. DCNL :param root: The root element of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Internal serialization. DCNL Recursive routine to build a tree of etree.Element instances DCNL from an object based on the template.  Returns the first DCNL etree.Element instance rendered, or None. DCNL :param parent: The parent etree.Element instance.  Can be DCNL None. DCNL :param obj: The object to render. DCNL :param siblings: The TemplateElement instances against which DCNL to render the object. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance DCNL rendered.'
'Serialize an object. DCNL Serializes an object against the template.  Returns a string DCNL with the serialized XML.  Positional and keyword arguments are DCNL passed to etree.tostring(). DCNL :param obj: The object to serialize.'
'Create a tree. DCNL Serializes an object against the template.  Returns an Element DCNL node with appropriate children. DCNL :param obj: The object to serialize.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  By default, this is the root element itself.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template. DCNL :param master: The master template to test.'
'Return string representation of the template tree. DCNL Returns a representation of the template as a string, suitable DCNL for inclusion in debug logs.'
'Initialize a master template. DCNL :param root: The root element of the template. DCNL :param version: The version number of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  This is the root element plus the root elements of DCNL all the slave templates.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary. DCNL The namespace dictionary is computed by taking the master DCNL template\'s namespace dictionary and updating it from all the DCNL slave templates.'
'Attach one or more slave templates. DCNL Attaches one or more slave templates to the master template. DCNL Slave templates must have a root element with the same tag as DCNL the master template.  The slave template\'s apply() method will DCNL be called to determine if the slave should be applied to this DCNL master; if it returns False, that slave will be skipped. DCNL (This allows filtering of slaves based on the version of the DCNL master template.)'
'Return a copy of this master template.'
'Initialize a slave template. DCNL :param root: The root element of the template. DCNL :param min_vers: The minimum permissible version of the master DCNL template for this slave template to apply. DCNL :param max_vers: An optional upper bound for the master DCNL template version. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template.  This DCNL version requires the master template to have a version number DCNL between min_vers and max_vers. DCNL :param master: The master template to test.'
'Construct and return a template. DCNL :param copy: If True (the default), a copy of the template DCNL will be constructed and returned, if possible.'
'Construct a template. DCNL Called to construct a template instance, which it must return. DCNL Only called once.'
'Allow API methods to store objects from a DB query to be DCNL used by API extensions within the same API request. DCNL An instance of this class only lives for the lifetime of a DCNL single API request, so there\'s no need to implement full DCNL cache management.'
'Allow an API extension to get previously stored objects within DCNL the same API request. DCNL Note that the object data will be slightly stale.'
'Allow an API extension to get a previously stored object DCNL within the same API request. DCNL Note that the object data will be slightly stale.'
'Determine the requested response content-type.'
'Determine content type of the request body. DCNL Does not do any body introspection, only checks header'
'Find and call local method.'
':param metadata: information needed to deserialize xml into DCNL a dictionary.'
'Convert a minidom node to a simple Python type. DCNL :param listnames: list of XML node names whose subnodes should DCNL be considered list items.'
'Search a nodes children for the first child with a given name.'
'Search a nodes children for the first child with a given name.'
'Return all of a nodes children who have the given name.'
'Get the text field contained by the given node.'
'Get only Element type childs from node.'
'Get an attribute value; fallback to an element if not found.'
'Marshal the metadata attribute of a parsed request.'
':param metadata: information needed to deserialize xml into DCNL a dictionary. DCNL :param xmlns: XML namespace to include with serialized xml'
'Recursive method to convert data members to XML nodes.'
'Convert the xml object to an xml string.'
'Binds serializers with an object. DCNL Takes keyword arguments akin to the @serializer() decorator DCNL for specifying serializers.  Serializers specified will be DCNL given preference over default serializers or method-specific DCNL serializers on return.'
'Retrieves a header with the given name.'
'Sets a header with the given name to the given value.'
'Deletes the header with the given name.'
'Binds method serializers with the response object. DCNL Binds the method serializers with the response object. DCNL Serializers specified to the constructor will take precedence DCNL over serializers specified to this method. DCNL :param meth_serializers: A dictionary with keys mapping to DCNL response types and values containing DCNL serializer objects.'
'Returns the serializer for the wrapped object. DCNL Returns the serializer for the wrapped object subject to the DCNL indicated content type.  If no serializer matching the content DCNL type is attached, an appropriate serializer drawn from the DCNL default serializers will be used.  If no appropriate DCNL serializer is available, raises InvalidContentType.'
'Prepares the serializer that will be used to serialize. DCNL Determines the serializer that will be used and prepares an DCNL instance of it for later call.  This allows the serializer to DCNL be accessed by extensions for, e.g., template extension.'
'Attach slave templates to serializers.'
'Serializes the wrapped object. DCNL Utility method for serializing the wrapped object.  Returns a DCNL webob.Response object.'
'Retrieve the response status.'
'Retrieve the headers.'
':param controller: object that implement methods created by routes lib DCNL :param action_peek: dictionary of routines for peeking into an action DCNL request body to determine the desired action DCNL :param inherits: another resource object that this resource should DCNL inherit extensions from. Any action extensions that DCNL are applied to the parent resource will also apply DCNL to this resource.'
'Registers controller actions with this resource.'
'Registers controller extensions with this resource.'
'Parse dictionary created by routes library.'
'WSGI method that controls (de)serialization and method dispatch.'
'Implement the processing stack.'
'Look up the action-specific method and its extensions.'
'Dispatch a call to the action-specific method.'
'Adds the wsgi_actions dictionary to the class.'
'Initialize controller with a view builder instance.'
'Create a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Initialize new `OverLimitFault` with relevant information.'
'Return the wrapped exception with a serialized body conforming to our DCNL error format.'
'Find parameters in Accept header for given content type.'
'Find longest match for a given URL path.'
'Check path suffix for MIME type and path prefix for API version.'
'Check Content-Type header for API version.'
'Check Accept header for best matching MIME type and API version.'
'Return a dictionary describing an IP address.'
'Returns a dictionary describing a network.'
'Return a dictionary describing a list of networks.'
'Return a dictionary with basic image attributes.'
'Return a dictionary with image details.'
'Show a list of images with details.'
'Show a list of images with basic attributes.'
'Provide a view for a list of images.'
'Return a list of links for this image.'
'Create an alternate link for a specific image id.'
'Return standard format for given date.'
'Update the status field to standardize format.'
'Return the \'index\' view of flavors.'
'Return the \'detail\' view of flavors.'
'Provide a view for a list of flavors.'
'Builder for absolute limits DCNL absolute_limits should be given as a dict of limits. DCNL For example: {"ram": 512, "gigabytes": 1024}.'
'Initialize view builder.'
'View that should be returned when an instance is created.'
'Generic, non-detailed view of an instance.'
'Detailed view of a single instance.'
'Show a list of servers without many details.'
'Detailed view of a list of instance.'
'Provide a view for a list of servers.'
':param base_url: url of the root wsgi application'
'Generate a container of links that refer to the provided version.'
'Create an url that refers to a specific version_number.'
'Returns the list of metadata for a given instance.'
'Initialize new `ImageController`. DCNL :param image_service: `nova.image.glance:GlanceImageService`'
'Return a dictionary of query param filters from the request DCNL :param req: the Request object coming from the wsgi layer DCNL :retval a dict of key/value filters'
'Return detailed information about a specific image. DCNL :param req: `wsgi.Request` object DCNL :param id: Image identifier'
'Delete an image, if allowed. DCNL :param req: `wsgi.Request` object DCNL :param id: Image identifier (integer)'
'Return an index listing of images available to the request. DCNL :param req: `wsgi.Request` object'
'Return a detailed index listing of images available to the request. DCNL :param req: `wsgi.Request` object.'
'Return all flavors in brief.'
'Return all flavors in detail.'
'Return data about the given flavor id.'
'Parse is_public into something usable.'
'Helper function that returns a list of flavor dicts.'
'Return all global and rate limit information.'
'Create a new limit.'
'Delete the limit.'
'Return limit details.'
'Show limit information.'
'Update existing limit.'
'Initialize a new `Limit`. DCNL @param verb: HTTP verb (POST, PUT, etc.) DCNL @param uri: Human-readable URI DCNL @param regex: Regular expression format for this limit DCNL @param value: Integer number of requests which can be made DCNL @param unit: Unit of measure for the value parameter'
'Represents a call to this limit from a relevant request. DCNL @param verb: string http verb (POST, GET, etc.) DCNL @param url: string URL'
'Retrieve the current time. Broken out for testability.'
'Display the string name of the unit.'
'Return a useful representation of this class.'
'Initialize new `RateLimitingMiddleware`, which wraps the given WSGI DCNL application and sets up the given limits. DCNL @param application: WSGI application to wrap DCNL @param limits: String describing limits DCNL @param limiter: String identifying class for representing limits DCNL Other parameters are passed to the constructor for the limiter.'
'Represents a single call through this middleware. We should record the DCNL request if we have a limit relevant to it. If no limit is relevant to DCNL the request, ignore it. DCNL If the request should be rate limited, return a fault telling the user DCNL they are over the limit and need to retry later.'
'Initialize the new `Limiter`. DCNL @param limits: List of `Limit` objects'
'Return the limits for a given user.'
'Check the given verb/user/user triplet for limit. DCNL @return: Tuple of delay (in seconds) and error message (or None, None)'
'Convert a string into a list of Limit instances.  This DCNL implementation expects a semicolon-separated sequence of DCNL parenthesized groups, where each group contains a DCNL comma-separated sequence consisting of HTTP method, DCNL user-readable URI, a URI reg-exp, an integer number of DCNL requests which can be made, and a unit of measure.  Valid DCNL values for the latter are "SECOND", "MINUTE", "HOUR", and DCNL "DAY". DCNL @return: List of Limit instances.'
'Initialize the new `WsgiLimiter`. DCNL @param limits: List of `Limit` objects'
'Handles a call to this application. Returns 204 if the request is DCNL acceptable to the limiter, else a 403 is returned with a relevant DCNL header indicating when the request *will* succeed.'
'Initialize the new `WsgiLimiterProxy`. DCNL @param limiter_address: IP/port combination of where to request limit'
'Ignore a limits string--simply doesn\'t apply for the limit DCNL proxy. DCNL @return: Empty list.'
'Returns a list of consoles for this instance.'
'Creates a new console.'
'Shows in-depth information on a specific console.'
'You can\'t update a console.'
'Deletes a console.'
':returns: A dict in the format: DCNL {\'hosts\': [{\'host_name\': \'some.host.name\', DCNL \'service\': \'cells\'}, DCNL {\'host_name\': \'some.other.host.name\', DCNL \'service\': \'cells\'}, DCNL {\'host_name\': \'some.celly.host.name\', DCNL \'service\': \'cells\'}, DCNL {\'host_name\': \'console1.host.com\', DCNL \'service\': \'consoleauth\'}, DCNL {\'host_name\': \'network1.host.com\', DCNL \'service\': \'network\'}, DCNL {\'host_name\': \'netwwork2.host.com\', DCNL \'service\': \'network\'}, DCNL {\'host_name\': \'sched1.host.com\', DCNL \'service\': \'scheduler\'}, DCNL {\'host_name\': \'sched2.host.com\', DCNL \'service\': \'scheduler\'}, DCNL {\'host_name\': \'vol1.host.com\', DCNL \'service\': \'volume\'}]}'
':param body: example format {\'status\': \'enable\', DCNL \'maintenance_mode\': \'enable\'} DCNL :returns:'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances. DCNL :param enabled: a boolean - if False no new VMs will be able to start DCNL on the host'
'Reboots, shuts down or powers up the host.'
'Shows the physical/usage resource given by hosts. DCNL :param id: hostname DCNL :returns: expected to use HostShowTemplate. DCNL ex.:: DCNL {\'host\': {\'resource\':D},..} DCNL D: {\'host\': \'hostname\',\'project\': \'admin\', DCNL \'cpu\': 1, \'memory_mb\': 2048, \'disk_gb\': 30}'
'Marshal the volume attribute of a parsed request.'
'Deserialize an xml-formatted volume create request.'
'Return data about the given volume.'
'Delete a volume.'
'Returns a summary list of volumes.'
'Returns a detailed list of volumes.'
'Returns a list of volumes, transformed through entity_maker.'
'Creates a new volume.'
'Returns the list of volume attachments for a given instance.'
'Return data about the given volume attachment.'
'Attach a volume to an instance.'
'Update a volume attachment.  We don\'t currently support this.'
'Detach a volume from an instance.'
'Returns a list of attachments, transformed through entity_maker.'
'Return data about the given snapshot.'
'Delete a snapshot.'
'Returns a summary list of snapshots.'
'Returns a detailed list of snapshots.'
'Returns a list of snapshots, transformed through entity_maker.'
'Creates a new snapshot.'
'Returns the list of interface attachments for a given instance.'
'Return data about the given interface attachment.'
'Attach an interface to an instance.'
'Update a interface attachment.  We don\'t currently support this.'
'Detach an interface from an instance.'
'Returns a list of attachments, transformed through entity_maker.'
'Returns the list of actions recorded for a given instance.'
'Return data about the given instance action.'
'Convert the quota object to a result dict.'
'Permit admins to evacuate a server from a failed host DCNL to a new one.'
'Return data about the given floating ip.'
'Return a list of floating ips allocated to a project.'
'Checks that value is id and then returns its address.'
'Associate floating_ip to an instance.'
'Dissociate floating_ip from an instance.'
'Deserialize an xml-formatted cell create request.'
'Return all cells.'
'Return all cells in brief.'
'Return all cells in detail.'
'Return name and capabilities for this cell.'
'Return data about the given cell name.  \'id\' is a cell name.'
'Delete a child or parent cell entry.  \'id\' is a cell name.'
'Validate cell name is not empty and doesn\'t contain \'!\' or \'.\'.'
'Validate cell_type is \'parent\' or \'child\'.'
'Convert cell[\'type\'] to is_parent boolean.'
'Create a child cell entry.'
'Update a child cell entry.  \'id\' is the cell name to update.'
'Tell all cells to sync instance info.'
'Get text console output.'
'Return a list of all floating ips.'
'Return a list of all floating ips for a given host.'
'Bulk create floating ips.'
'Bulk delete floating IPs.'
'Iterate over hosts within an address range. DCNL If an explicit range specifier is missing, the parameter is DCNL interpreted as a specific individual address.'
'Returns a list a host aggregate\'s id, name, availability_zone.'
'Creates an aggregate, given its name and availability_zone.'
'Shows the details of an aggregate, hosts and metadata included.'
'Updates the name and/or availability_zone of given aggregate.'
'Removes an aggregate by id.'
'Adds a host to the specified aggregate.'
'Removes a host from the specified aggregate.'
'Replaces the aggregate\'s existing metadata with new metadata.'
'Return a dictionary mapping flavorid to flavor_ref.'
'Deserialize an xml-formatted security group create request.'
'Deserialize an xml-formatted security group create request.'
'Marshal the security group rule attribute of a parsed request.'
'Return data about the given security group.'
'Delete a security group.'
'Returns a list of security groups.'
'Creates a new security group.'
'Returns a list of security groups for the given instance.'
'Configure cloudpipe parameters for the project.'
'Ensure the keychains and folders exist.'
'Get all cloudpipes.'
'Get the cloudpipe instance for a project ID.'
'Create a new cloudpipe instance, if none exists. DCNL Parameters: {cloudpipe: {\'project_id\': \'\'}}'
'List running cloudpipe instances.'
'Return a list of certificates.'
'Return a list of certificates.'
'Returns the list of extra specs for a given flavor.'
'Return a single extra spec item.'
'Deletes an existing extra spec.'
'Returns a list of VIFs, transformed through entity_maker.'
'Returns the list of VIFs for a given instance.'
'Return a list of available DNS domains.'
'Add or modify domain entry.'
'Delete the domain identified by id.'
'Return the DNS entry that corresponds to domain_id and id.'
'Add or modify dns entry.'
'Delete the entry identified by req and id.'
'Return a list of all running services. Filter by host & service name.'
'Enable/Disable scheduling for a service.'
'Start an instance.'
'Stop an instance.'
'Convert the quota object to a result dict.'
'Returns a list of services.'
'Return a list of backdoor ports for all services in the list.'
'Begin recording coverage information.'
'Return a list of pools.'
'Restore a previously deleted instance.'
'Force delete of instance before deferred cleanup.'
'Return data about the given fixed ip.'
'Returns a full log for all instance usage audit tasks on all DCNL computes. DCNL :param begin: datetime beginning of audit period to get logs for, DCNL Defaults to the beginning of the most recently completed DCNL audit period prior to the \'before\' date. DCNL :param end: datetime ending of audit period to get logs for, DCNL Defaults to the ending of the most recently completed DCNL audit period prior to the \'before\' date. DCNL :param before: By default we look for the audit period most recently DCNL completed before this datetime. Has no effect if both begin and end DCNL are specified.'
'Rescue an instance.'
'Unrescue an instance.'
'Get text console output.'
'Get text console output.'
'Return the actions the extension adds, as required by contract.'
'Get flavor information from the instance\'s system_metadata, DCNL allowing a fallback to lookup by-id for deleted instances only'
'Retrieve tenant_usage for all tenants.'
'Retrieve tenant_usage for a specified tenant.'
'Permit Admins to pause the server.'
'Permit Admins to unpause the server.'
'Permit admins to suspend the server.'
'Permit admins to resume the server from suspend.'
'Permit admins to migrate a server to a new host.'
'Permit admins to reset networking on a server.'
'Permit admins to inject network info into a server.'
'Permit admins to lock a server.'
'Permit admins to lock a server.'
'Backup a server instance. DCNL Images now have an `image_type` associated with them, which can be DCNL \'snapshot\' or the backup type, like \'daily\' or \'weekly\'. DCNL If the image_type is backup-like, then the rotation factor can be DCNL included and that will cause the oldest backups that exceed the DCNL rotation factor to be deleted.'
'Permit admins to (live) migrate a server to a new host.'
'Permit admins to reset the state of a server.'
'Returns a summary list of availability zone.'
'Returns a detailed list of availability zone.'
'Adds an IP on a given network to an instance.'
'Removes an IP from an instance.'
'Return a list of all agent builds. Filter by hypervisor.'
'Update an existing agent build.'
'Deletes an existing agent build.'
'Creates a new agent build.'
'Create or import keypair. DCNL Sending name will generate a key and return private_key DCNL and fingerprint. DCNL You can send a public_key to add an existing ssh key DCNL params: keypair object with: DCNL name (required) - string DCNL public_key (optional) - string'
'Delete a keypair with a given name'
'Return data for the given key name.'
'List of keypairs for a user'
'Marshal the personality attribute of a parsed request.'
'Marshal the server attribute of a parsed request.'
'Marshal the block_device_mapping node of a parsed request.'
'Marshal the scheduler hints attribute of a parsed request.'
'Marshal the networks attribute of a parsed request.'
'Marshal the security_groups attribute of a parsed request.'
'Deserialize an xml-formatted server create request.'
'Returns a list of server names and ids for a given user.'
'Returns a list of server details for a given user.'
'Returns a list of servers, based on any search options specified.'
'Utility function for looking up an instance by uuid.'
'Create a list of injected files from the personality attribute. DCNL At this time, injected_files must be formatted as a list of DCNL (file_path, file_content) pairs for compatibility with the DCNL underlying compute service.'
'Create a list of requested networks from the networks attribute.'
'Check if the user_data is encoded properly.'
'Returns server details by server id.'
'Creates a new server for a given user.'
'Update server then pass on to version-specific controller.'
'Begin the resize process with given instance/flavor.'
'Destroys a server.'
'Get image data from the request or raise appropriate DCNL exceptions DCNL If no image is supplied - checks to see if there is DCNL block devices set and proper extesions loaded.'
'Ensure that we can work with the metadata given.'
'Resizes a given instance to the flavor size requested.'
'Rebuild an instance with the given attributes.'
'Snapshot a server instance.'
'Determine the admin password for a server on creation.'
'Return server search options allowed by non-admin.'
'Returns the list of metadata for a given instance.'
'Return a single metadata item.'
'Deletes an existing metadata.'
'Return all versions.'
'Return multiple choices.'
'Parse dictionary created by routes library.'
'Perform any initialization. DCNL Currently, we only add an iptables filter rule for the metadata DCNL service.'
':param data: Underlying data object DCNL :param limit: maximum number of bytes the reader should allow'
'Process/Formats the value before insert it into the db.'
'Process/Formats the value before insert it into the db.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Rollback a series of actions then re-raise the exception. DCNL .. note:: (sirp) This should only be called within an DCNL exception handler.'
'Get available port for consoles.'
'Sets up console.'
'Tears down console.'
'Perform console initialization.'
'Encode password.'
'Returns VMRC Connection credentials. DCNL Return string is of the form \'<VM PATH>:<ESX Username>@<ESX Password>\'.'
'Is one time password or not.'
'Returns a VMRC Session. DCNL Return string is of the form \'<VM MOID>:<VMRC Ticket>\'.'
'Is one time password or not.'
'Get available port for consoles that need one.'
'Sets up actual proxies.'
'Tears down actual proxies.'
'Start up any config\'ed consoles on start.'
'Trim password to length, and encode.'
'Trim password to length, and encode.'
'Call xvp to obfuscate passwords for config file. DCNL Args: DCNL - password: the password to encode, max 8 char for vm passwords, DCNL and 16 chars for pool passwords. passwords will DCNL be trimmed to max len before encoding. DCNL - is_pool_password: True if this this is the XenServer api password DCNL False if it\'s a VM console password DCNL (xvp uses different keys and max lengths for pool passwords) DCNL Note that xvp\'s obfuscation should not be considered \'real\' encryption. DCNL It simply DES encrypts the passwords with static keys plainly viewable DCNL in the xvp source code.'
'Called after a new WebSocket connection has been established.'
'Get VIM session for the pool specified.'
'Sets up console for the instance.'
'Adds a console for the instance. DCNL If it is one time password, then we generate new console credentials.'
'Removes a console entry.'
'Gets console pool info for the instance.'
'Sets up actual proxies.'
'Tears down actual proxies.'
'Start up any config\'ed consoles on start.'
'Returns random console password.'
'Get available port for consoles that need one.'
'Trim password to length, and any other massaging.'
'Trim password to length, and any other massaging.'
'Initialize the check.'
'Determine whether is_admin matches the requested value.'
'Ensure uninstalled code get version string.'
'Make a base file for testing.'
'Create a volume object.'
'Simulates an error while downloading an image. DCNL Verifies that the VM and VDIs created are properly cleaned up.'
'Simulates an error while creating VM record. DCNL Verifies that the VM and VDIs created are properly cleaned up.'
'Simulates an error while attaching disks. DCNL Verifies that the VM and VDIs created are properly cleaned up.'
'Creates and spawns a test instance.'
'Should not partition unless instance is marked as DCNL auto_disk_config.'
'Should partition if instance is marked as auto_disk_config=True and DCNL virt-layer specific fail-safe checks pass.'
'Test that get_all_bw_conters returns an empty list when DCNL no data returned from Xenserver.  c.f. bug #910045.'
'Ensure InvalidAggregateAction is raised when adding host while DCNL aggregate is not ready.'
'Ensure InvalidAggregateAction is raised when aggregate is DCNL deleted.'
'Ensure InvalidAggregateAction is raised when aggregate is DCNL in error.'
'Ensure InvalidAggregateAction is raised when aggregate is DCNL deleted.'
'Ensure InvalidAggregateAction is raised when aggregate is DCNL changing.'
'Verifies disassociating auto assigned floating IP DCNL raises an exception'
'restart compute service. NOTE: fake driver forgets all instances.'
'Make sure that CreateImage works.'
'Ensure CreateImage fails as expected for an instance-store-backed DCNL instance'
'Fail x.'
'Sends a test request to see if key is locked out.'
'Makes sure create_volume works when we specify an availability DCNL zone'
'Make sure describe_instances works with root_device_name and DCNL block device mappings'
'restart compute service. NOTE: fake driver forgets all instances.'
'Run before each test.'
'Should throw a 400 error on corrupt xml.'
'Remove characters from string which hinder XML equality testing.'
'Make sure multi choice responses do not have content-type DCNL application/atom+xml (should use default of json)'
'Don\'t permit a snapshot if the allow_instance_snapshots flag is DCNL False'
'Should throw a 400 error on corrupt xml.'
'Create two servers with the same host and different DCNL project_ids and check that the hostId\'s are unique'
'Test getting servers by admin-only or unknown options when DCNL context is not admin. Make sure the admin and unknown options DCNL are stripped before they get to compute_api.get_all()'
'Test getting servers by admin-only or unknown options when DCNL context is admin. All options should be passed'
'Test getting servers by ip with admin_api enabled and DCNL admin context'
'Test getting servers by ip6 with admin_api enabled and DCNL admin context'
'We want to make sure that if two instances are on the same host, then DCNL they return the same hostId. If two instances are on different hosts, DCNL they should return different hostId\'s. In this test, there are 5 DCNL instances - 2 on one host and 3 on another.'
'Shared implementation for tests below that create instance.'
'utility function - check server_dict for adminPass length.'
'utility function - check server_dict for absence of adminPass.'
'Test creating multiple instances but not asking for DCNL reservation_id'
'Test creating multiple instances but not asking for DCNL reservation_id'
'Test creating multiple instances with asking for DCNL reservation_id'
'Test that a BadRequest is raised if multiple instances DCNL are requested with a list of block device mappings for volumes.'
'Test that a BadRequest is raised if multiple instances DCNL are requested to boot from a single volume.'
'Test that the create will fail if there is no image DCNL and no bdms supplied in the request'
'Test that the create works if there is no image supplied but DCNL os-volumes extension is enabled and bdms are supplied'
'Should throw a 400 error on corrupt xml.'
'Run before each test.'
'If you try to delete a deleted image, you get back 403 Forbidden.'
'Tests that filtering work on flavor details and that minRam and DCNL minDisk filters can be combined'
'Counterintuitively we should show disabled flavors to all users and not DCNL just admins. The reason is that, when a user performs a server-show DCNL request, we want to be able to display the pretty flavor name (\'512 MB DCNL Instance\') and not just the flavor-id even if the flavor id has been DCNL marked disabled.'
'Return the "time" according to this test suite.'
'Run before each test.'
'Helper to set routing arguments.'
'Put limit info into a request.'
'Put limit info into a request.'
'Do-nothing WSGI app.'
'Prepare middleware for use through fake WSGI app.'
'Run before each test.'
'Check and yield results from checks.'
'Check and sum results from checks.'
'Simple test to ensure no delay on a single call for a limit verb we DCNL didn"t set.'
'Ensure the 11th PUT will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure the 8th POST will result in a delay of 6.0 seconds until DCNL the next request will be granced.'
'Ensure PUT on /servers limits at 5 requests, and PUT elsewhere is still DCNL OK after 5 requests...but then after 11 total requests, PUT limiting DCNL kicks in.'
'Ensure after hitting the limit and then waiting for the correct DCNL amount of time, the limit will be lifted.'
'Run before each test.'
'Get data describing a limit request verb/path.'
'Make sure that POSTing to the given url causes the given username DCNL to perform the given action.  Make the internal rate limiter return DCNL delay and make sure that the WSGI app returns the correct response.'
'Initialize new `FakeHttplibSocket`.'
'Returns the socket\'s internal buffer.'
'Initialize `FakeHttplibConnection`.'
'Requests made via this connection actually get translated and routed DCNL into our WSGI app, we then wait for the response and turn it back into DCNL an `httplib.HTTPResponse`.'
'Return our generated response from the request.'
'Do some nifty HTTP/WSGI magic which allows for WSGI to be called DCNL directly by something like the `httplib` library.'
'If user doesn\'t pass in diskConfig for server, use image metadata DCNL to specify AUTO or MANUAL.'
'Create a floating ip object.'
'Rotation must be greater than or equal to zero DCNL for backup requests'
'Verify that the compute hosts are returned.'
'Create compute-manager(ComputeNode and Service record).'
'No instances are running on the given host.'
'show() works correctly as expected.'
'Create a floating ip object.'
'Run before each test.'
'Check that no reservations are leaked during tests.'
'Should throw a 400 error on corrupt xml.'
'Should throw a 400 error on corrupt xml.'
'Test that validator.validate only tests the intersect of keys DCNL from args and validator.'
'Create an instance action.'
'Create an instance action.'
'Ensure we can get actions by UUID.'
'Ensure we can get an action by instance UUID and action id.'
'Create an instance action event.'
'Finish an instance action event.'
'Finish an instance action event with an error.'
'Create an instance action and event with a string start_time.'
'Get a specific instance action event.'
'Check if keypair creation work as expected.'
'Check if key pair deletion works as expected.'
'Test if a previously created keypair can be found.'
'restart compute service. NOTE: fake driver forgets all instances.'
'Give the test a chance to modify subs after the server response DCNL was verified, and before the on-disk doc/api_samples file is checked. DCNL This may be needed by some tests to convert exact matches expected DCNL from the server into pattern matches to verify what is in the DCNL sample file. DCNL If there are no changes to be made, subs is returned unharmed.'
'Get api sample of key pairs post request.'
'Return a list of all agent builds.'
'Enable an existing agent build.'
'Disable an existing agent build.'
'setUp method for simple tenant usage.'
'tearDown method for simple tenant usage.'
'setUp Method for AdminActions api samples extension DCNL This method creates the server that will be used in each tests'
'Create a flavor.'
'An opportunity to setup flags, before the services are started.'
'Check all queued requests are passed to deploy().'
'Check a worker keeps on running even if deploy() raises DCNL an exception.'
'Check loosely all functions are called with right args.'
'logout_iscsi() must be called once login_iscsi() is called.'
'Create a test instance.'
'Does the return value match a real network_info structure.'
'Return a consistent elevated context so we can detect it.'
'Create and spawn the VM.'
'Check if the spawned VM\'s properties correspond to the instance in DCNL the db.'
'Check if the get_info returned values correspond to the instance DCNL object in the db.'
'Returns the hash for the given key; creates DCNL the hash if the key doesn\'t exist.'
'This method is ignored, but provided for compatibility.'
'This method is ignored, but provided for compatibility.'
'Add an object with the specified attributes at dn.'
'Remove the ldap object at specified dn.'
'Modify the object at dn using the attribute list. DCNL :param dn: a dn DCNL :param attrs: a list of tuples in the following form:: DCNL ([MOD_ADD | MOD_DELETE | MOD_REPACE], attribute, value)'
'Search for all matching objects under dn using the query. DCNL Args: DCNL dn -- dn to search under DCNL scope -- only SCOPE_BASE and SCOPE_SUBTREE are supported DCNL query -- query to filter objects by DCNL fields -- fields to return. Returns all fields if not specified'
'Get the prefix to use for all keys.'
'Assert two dicts are equivalent. DCNL This is a \'deep\' match in the sense that it handles nested DCNL dictionaries appropriately. DCNL NOTE: DCNL If you don\'t care (or don\'t know) a given value, you can specify DCNL the string DONTCARE as the value. This will cause that dict-item DCNL to be skipped.'
'Assert a list of dicts are equivalent.'
'Assert a sub_dict is subset of super_dict.'
'Adds tag and index to the path; they will be popped off when DCNL the corresponding \'with\' statement exits. DCNL :param tag: The element tag DCNL :param idx: If not None, the integer index of the element DCNL within its parent.  Not included in the path DCNL element if None.'
'Recursively compares nodes within the XML tree.'
'Test for compute service get right availability zone.'
'Test not compute service get right availability zone.'
'Test get right availability zone by given host.'
'Test get_availability_zones.'
'Defining mocks for LibvirtDriver(libvirt is not used).'
'Domain can fail to return the vcpu description in case it\'s DCNL just starting up or shutting down. Make sure None is handled DCNL gracefully.'
'Create a test instance.'
'Create a test instance.'
'Test for nova.virt.libvirt.libvirt_driver.LivirtConnection DCNL .migrate_disk_and_power_off.'
'Test for nova.virt.libvirt.libvirt_driver.LivirtConnection DCNL .migrate_disk_and_power_off.'
'Test for nova.virt.libvirt.libvirt_driver.LivirtConnection DCNL .finish_migration.'
'Test for nova.virt.libvirt.libvirt_driver.LivirtConnection DCNL .finish_revert_migration.'
'Ensure we can create an image without having to specify an DCNL instance_id. Public images are an example of an image not tied to an DCNL instance.'
'Return list of detailed image information.'
'Get data about specified image. DCNL Returns a dict containing image data for the given opaque image id.'
'Store the image data and return the new image id. DCNL :raises: Duplicate if the image already exist.'
'Replace the contents of the given image with the new data. DCNL :raises: ImageNotFound if the image does not exist.'
'Delete the given image. DCNL :raises: ImageNotFound if the image does not exist.'
'Volume with image metadata.'
'Stubs out the response from OAT service.'
'Test to make sure _filter_hosts() filters original hosts if DCNL avoid_original_host is True.'
'Test to make sure _filter_hosts() does not filter original DCNL hosts if avoid_original_host is False.'
'Make sure there\'s nothing glaringly wrong with _schedule() DCNL by doing a happy day pass through.'
'Make sure the scheduler_host_subset_size property works properly.'
'Hosts should still be chosen if pool size DCNL is larger than number of filtered hosts'
'If scheduler_host_subset_size is 1, the largest host with greatest DCNL weight should be returned'
'select_hosts is basically a wrapper around the _select() method. DCNL Similar to the _select tests, this just does a happy path test to DCNL ensure there is nothing glaringly wrong.'
'Create a test instance. Returns uuid.'
'Create a test instance.'
'Mock method four host_call_plugin to be used in unit tests DCNL for the dom0 iptables Firewall drivers for XenAPI'
'Create a test instance.'
'Returns the socket\'s internal buffer.'
'Required for compatibility with boto/tornado.'
'Returns a new EC2 connection.'
'Ensure that the ec2 api returns datetime in xs:dateTime DCNL (which apparently isn\'t datetime.isoformat()) DCNL NOTE(ken-pepple): https://bugs.launchpad.net/nova/+bug/721297'
'Test that, after creating a user and a project, the describe DCNL instances call to the API works properly'
'Test that, after creating a user and project and generating DCNL a key pair, that the API call to list key pairs works properly'
'Test that, after successfully generating a keypair, DCNL requesting a second keypair with the same name fails sanely'
'Test that we sanely handle invalid security group names. DCNL EC2 API Spec states we should only accept alphanumeric characters, DCNL spaces, dashes, and underscores. Amazon implementation DCNL accepts more characters - so, [:print:] is ok.'
'Test that we sanely handle invalid security group names. DCNL API Spec states that the length should not exceed 255 chars'
'Test that we can add and remove CIDR based rules DCNL to a security group'
'Test that we can add and remove CIDR based rules DCNL to a security group for IPv6'
'Test that we can grant and revoke another security group access DCNL to a security group'
'Sets it so that the host API always thinks that \'fake_host\' DCNL exists.'
'Create limits dictionary used for oversubscribing resources.'
'Create a test instance.'
'Create a test instance. Returns uuid.'
'Create a test instance type.'
'Test passing of oversubscribed ram policy from the scheduler, but DCNL with insufficient memory.'
'Test passing of oversubscribed disk policy from the scheduler, but DCNL with insufficient disk.'
'block device mapping failure test. DCNL Make sure that when there is a block device mapping problem, DCNL the instance goes to ERROR state, keeping the task state'
'spawn failure test. DCNL Make sure that when there is a spawning problem, DCNL the instance goes to ERROR state, keeping the task state'
'spawn network deallocate test. DCNL Make sure that when an instance is not found during spawn DCNL that the network is deallocated'
'Make sure it is possible to  run and terminate instance with volume DCNL attached'
'Make sure instance started without image (from volume) DCNL can be termintad without issues'
'Ensure that a failure in terminate_instance does not result DCNL in the task state being reverted from DELETING (see LP 1046236).'
'Ensure expected exception is raised if set_admin_password fails.'
'Ensure expected exception is raised if set_admin_password not DCNL authorized.'
'Ensure expected exception is raised if set_admin_password not DCNL implemented by driver.'
'Assert state of VM is equal to state passed as parameter.'
'Test that we handle InstanceTerminationFailure DCNL which is propagated up from the underlying driver.'
'Mock up commit of quota reservations.'
'Mock up rollback of quota reservations.'
'Contrived test to ensure finish_resize doesn\'t raise anything.'
'Ensure prep_resize raise a migration error if destination is set on DCNL the same source host and allow_resize_to_same_host is false'
'Ensure prep_resize raises a migration error if destination host is DCNL not defined'
'Ensure instance fails to migrate when source and destination are DCNL the same host'
'Confirm post_live_migration() works correctly as expected DCNL for non shared storage migration.'
'network_info in legacy is form [(network_dict, info_dict)].'
'network_info is NetworkInfo list-like object.'
'Ensure a snapshot of an instance can be created when image UUID DCNL is already known.'
'Ensure a snapshots min_ram and min_disk are correct. DCNL A snapshot of a non-shrinkable VHD should have min_disk DCNL set to that of the original instances flavor.'
'Ensure a snapshots min_ram and min_disk are correct. DCNL A snapshot of an instance should have min_ram and min_disk DCNL set to that of the instances original image unless that DCNL image had a disk format of vhd.'
'Ensure a snapshots min_ram and min_disk are correct. DCNL Do not show an attribute that the orig img did not have.'
'Ensure a snapshots min_ram and min_disk are correct. DCNL A snapshots min_ram and min_disk should be set to default if DCNL an instances original image cannot be found.'
'Verify building an instance has a reservation_id that DCNL matches return value from create'
'Verify building 2 instances at once results in a DCNL reservation_id being returned equal to reservation id set DCNL in both instances'
'Basic sanity check to make sure _reschedule_or_reraise is called DCNL when a build fails.'
'Test shutdown instance failing before re-scheduling logic can even DCNL run.'
'Verify the rescheduling logic gets called when there is an error DCNL during prep_resize.'
'Original exception should be raised if the _reschedule method DCNL raises another exception'
'Original exception should be raised if the resize is not DCNL rescheduled.'
'Confirm evacuate scenario updates host.'
'Confirm evacuate scenario does not update host.'
'Confirm evacuate scenario reconnects volumes.'
'Confirm evacuate scenario on shared storage.'
'Confirm evacuate scenario without shared storage DCNL (rebuild from image)'
'Rebuild if instance exists raises an exception.'
'Create a test instance.'
'Test that we can trigger a mysql connection failure and we fail DCNL gracefully to ensure we don\'t break people without mysql'
'Test that we can trigger a postgres connection failure and we fail DCNL gracefully to ensure we don\'t break people without postgres'
'migrate up to a new version of the db. DCNL We allow for data insertion and post checks at every DCNL migration version with special _pre_upgrade_### and DCNL _check_### functions in the main test.'
'Makes sure that we cannot deallocaate or disassociate DCNL a public ip of other project'
'Verify that release is called properly. DCNL Ensures https://bugs.launchpad.net/nova/+bug/973442 doesn\'t return'
'Verify that deallocate doesn\'t raise when no vif is returned. DCNL Ensures https://bugs.launchpad.net/nova/+bug/968457 doesn\'t return'
'Test FlatDHCPManager NAT rules for fixed_range.'
'Test FlatDHCPManager NAT rules for fixed_range.'
'Test VlanManager NAT rules for fixed_range.'
'Test VlanManager NAT rules for fixed_range.'
'Test to verify bug 855030 doesn\'t resurface. DCNL Mekes sure _rpc_allocate_fixed_ip returns a value so the call DCNL returns properly and the greenpool completes.'
'verify we will delete created ports DCNL if we fail to allocate all net resources. DCNL Mox to raise exception when creating a second port. DCNL In this case, the code should delete the first created port.'
'verify we have no port to delete DCNL if we fail to allocate the first net resource. DCNL Mox to raise exception when creating the first port. DCNL In this case, the code should not delete any ports.'
'Verify that the correct exception is thrown when duplicate DCNL network ids are passed to validate_networks.'
'Test post-association logic.'
'Makes sure plug doesn\'t drop FORWARD by default. DCNL Ensures bug 890195 doesn\'t reappear.'
'Makes sure vlan_interface flag overrides network bridge_interface. DCNL Allows heterogeneous networks a la bug 833426'
'Makes sure flat_interface flag overrides network bridge_interface. DCNL Allows heterogeneous networks a la bug 833426'
'return a name not in the DB.'
'return a flavorid not in the DB.'
'return first instance type name.'
'Ensure deleted instance types are not returned when not needed (for DCNL example when creating a server and attempting to translate from DCNL flavorid to instance_type_id.'
'Setup users, projects, and start a test server.'
'Tear down test server.'
'Perform an instance update in the database.'
'Wait until a conductor service is up and running. DCNL This method calls the remote ping() method on the conductor topic until DCNL it gets a response.  It starts with a shorter timeout in the loop DCNL (early_timeout) up to early_attempts number of tries.  It then drops DCNL back to the globally configured timeout for rpc calls for each retry.'
'Perform an instance update in the database.'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a server to finish. DCNL :param service: Server to run and wait for. DCNL :returns: None'
'Load and start the given server. DCNL :param server: The server you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary.'
'Instantiates class and passes back application object. DCNL :param host: defaults to CONF.host DCNL :param binary: defaults to basename of executable DCNL :param topic: defaults to bin_name - \'nova-\' part DCNL :param manager: defaults to CONF.<topic>_manager DCNL :param report_interval: defaults to CONF.report_interval DCNL :param periodic_enable: defaults to CONF.periodic_enable DCNL :param periodic_fuzzy_delay: defaults to CONF.periodic_fuzzy_delay DCNL :param periodic_interval_max: if set, the max time to wait between runs'
'Destroy the service object in the datastore.'
'Tasks to be run at a periodic interval.'
'Perform basic config checks before starting processing.'
'Initialize, but do not start the WSGI server. DCNL :param name: The name of the WSGI server given to the loader. DCNL :param loader: Loads the WSGI application using the given name. DCNL :returns: None'
'Initialize a Manager object appropriate for this service. DCNL Use the service name to look up a Manager subclass from the DCNL configuration and initialize an instance. If no class name DCNL is configured, just return None. DCNL :returns: a Manager instance, or None.'
'Start serving this service using loaded configuration. DCNL Also, retrieve updated port number in case \'0\' was passed in, which DCNL indicates a random port should be used. DCNL :returns: None'
'Stop serving this API. DCNL :returns: None'
'Wait for the service to stop serving this API. DCNL :returns: None'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Ignores the passed in args.'
'Retrieves the value for a key or None. DCNL this expunges expired keys during each get'
'Sets the value for a key.'
'Sets the value for a key if it doesn\'t exist.'
'Increments the value for a key.'
'Deletes the value associated with a key.'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool'
'When with ConnectionContext() is used, return self'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
':param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending" flag'
'The consume() callback will call this.  Store the result.'
'Return a result until we get a \'None\' response from consumer'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute.'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect'
'Fetch the message and pass it to the callback object'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection'
'Send a message'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection'
'Send a message'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params DCNL should be used for the connection (if any)'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Add callback for a given event notification. DCNL Subclasses can call this as an alternative to implementing DCNL a fullblown notify notifier.'
'Remove all notification callbacks to specified function.'
'Subclass convenience method which adds an extension descriptor. DCNL Subclass constructors should call this method when DCNL extending a project\'s REST interface. DCNL Note that once the api service has loaded, the DCNL API extension set is more-or-less fixed, so DCNL this should mainly be called by subclass constructors.'
'Subclass convenience method which adds a notifier. DCNL Notifier objects should implement the function notify(message). DCNL Each notifier receives a notify() call whenever an openstack DCNL service broadcasts a notification. DCNL Best to call this during construction.  Notifiers are enumerated DCNL and registered by the pluginmanager at plugin load time.'
'Returns list of notifiers for this plugin.'
'Return a list of API extension descriptors. DCNL Called by a project API during its load sequence.'
'Construct Plugin Manager; load and initialize plugins. DCNL project_name (e.g. \'nova\' or \'glance\') is used DCNL to construct the entry point that identifies plugins. DCNL The service_name (e.g. \'compute\') is passed on to DCNL each plugin as a raw string for it to do what it will.'
'Save this object.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Mark this object as deleted.'
'Get the actual backend.  May be a module or an instance of DCNL a class.  Doesn\'t matter to us.  We do this synchronized as it\'s DCNL possible multiple greenthreads started very quickly trying to do DCNL DB calls and eventlet can switch threads before self.__backend gets DCNL assigned.'
'Allow loading of JSON rule data.'
'Initialize the Rules store.'
'Implements the default rule handling.'
'Dumps a string representation of the rules.'
'Retrieve a string representation of the Check tree rooted at DCNL this node.'
'Perform the check.  Returns False to reject the access or a DCNL true value (not necessary True) to accept the access.'
'Return a string representation of this check.'
'Check the policy.'
'Return a string representation of this check.'
'Check the policy.'
':param kind: The kind of the check, i.e., the field before the DCNL :param match: The match of the check, i.e., the field after DCNL the \':\'.'
'Return a string representation of this check.'
'Initialize the \'not\' check. DCNL :param rule: The rule to negate.  Must be a Check.'
'Return a string representation of this check.'
'Check the policy.  Returns the logical inverse of the wrapped DCNL check.'
'Initialize the \'and\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that all rules accept in order to DCNL return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the AndCheck object for convenience.'
'Initialize the \'or\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that at least one rule accept in DCNL order to return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the OrCheck object for convenience.'
'Create the class.  Injects the \'reducers\' list, a list of DCNL tuples matching token sequences to the names of the DCNL corresponding reduction methods.'
'Initialize the ParseState.'
'Perform a greedy reduction of the token stream.  If a reducer DCNL method matches, it will be executed, then the reduce() method DCNL will be called recursively to search for any more possible DCNL reductions.'
'Adds one more token to the state.  Calls reduce().'
'Obtain the final result of the parse.  Raises ValueError if DCNL the parse failed to reduce to a single result.'
'Turn parenthesized expressions into a \'check\' token.'
'Create an \'and_expr\' from two checks joined by the \'and\' DCNL operator.'
'Extend an \'and_expr\' by adding one more check.'
'Create an \'or_expr\' from two checks joined by the \'or\' DCNL operator.'
'Extend an \'or_expr\' by adding one more check.'
'Invert the result of another check.'
'Recursively checks credentials based on the defined rules.'
'Check that there is a matching role in the cred dict.'
'Check http: rules by calling to a remote server. DCNL This example implementation simply verifies that the response DCNL is exactly \'True\'.'
'Check an individual match. DCNL Matches look like: DCNL tenant:%(tenant_id)s DCNL role:compute:admin'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Returns existing executable, or empty string if none found'
'Only check that the first argument (command) matches exec_path'
'Returns command to execute (with sudo -u if run_as != root).'
'Returns specific environment to set, None if none'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Get the classes from a module that match the type we want.'
'Get the classes of the type we want from all modules found DCNL in the directory that defines this class.'
'Get loadable classes from a list of names.  Each name can be DCNL a full module path or the full path to a method that returns DCNL classes to use.  The latter behavior is useful to specify a method DCNL that returns a list of classes to use in a default case.'
'Metaclass that allows us to collect decorated periodic tasks.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Tasks to be run at a periodic interval.'
'Hook to do additional manager initialization when one requests DCNL the service be started.  This is called before any service record DCNL is created. DCNL Child classes should override this method.'
'Hook to provide the manager the ability to do additional DCNL start-up work before any RPC queues/consumers are created. This is DCNL called after other initialization has succeeded and a service DCNL record is created. DCNL Child classes should override this method.'
'Hook to provide the manager the ability to do additional DCNL start-up work immediately after a service creates RPC consumers DCNL and starts \'running\'. DCNL Child classes should override this method.'
'Remember these capabilities to send on next periodic update.'
'Pass data back to the scheduler. DCNL Called at a periodic interval. And also called via rpc soon after DCNL the start of the scheduler.'
'Return True if it passes the filter, False otherwise. DCNL Override this in a subclass.'
'Yield objects that pass the filter. DCNL Can be overriden in a subclass, if you need to base filtering DCNL decisions on all objects.  Otherwise, one can just override DCNL _filter_one() to filter a single object.'
'Join the given service with it\'s group.'
'Moved from nova.utils DCNL Check whether a service is up based on last heartbeat.'
'Returns ALL members of the given group'
'Update the state of this service in the datastore.'
'Join the given service with its group.'
'Moved from nova.utils DCNL Check whether a service is up based on last heartbeat.'
'Returns ALL members of the given group'
'Update the state of this service in the datastore.'
'Create the zk session object.'
'Join the given service with its group.'
'Remove the given member from the service group.'
'Return all members in a list, or a ServiceGroupUnavailable DCNL exception.'
'Create an instance of the servicegroup API. DCNL args and kwargs are passed down to the servicegroup driver when it gets DCNL created.  No args currently exist, though.  Valid kwargs are: DCNL db_allowed - Boolean. False if direct db access is not allowed and DCNL alternative data access (conductor) should be used DCNL instead.'
'Add a new member to the ServiceGroup DCNL @param member_id: the joined member ID DCNL @param group_id: the group name, of the joined member DCNL @param service: the parameter can be used for notifications about DCNL disconnect mode and update some internals'
'Check if the given member is up.'
'Explicitly remove the given member from the ServiceGroup DCNL monitoring.'
'Returns ALL members of the given group.'
'Returns one member of the given group. The strategy to select DCNL the member is decided by the driver (e.g. random or round-robin).'
'Join the given service with it\'s group.'
'Check whether the given member is up.'
'Remove the given member from the ServiceGroup monitoring.'
'Returns ALL members of the given group.'
'The default behavior of get_one is to randomly pick one from DCNL the result of get_all(). This is likely to be overridden in the DCNL actual driver implementation.'
'Create an image. DCNL metadata[\'properties\'] should contain image_location.'
'Gets a manifest from s3 and makes an image.'
'Raises exception if extracting tarball would escape extract path.'
'Create a client that we\'ll use for every call.'
'Create a client that will be used for one call.'
'Call a glance client method.  If we get a connection error, DCNL retry the request according to CONF.glance_num_retries.'
'Calls out to Glance for a list of detailed image information.'
'Returns a dict with image data for the given opaque image id.'
'Returns the direct url representing the backend storage location, DCNL or None if this attribute is not shown by Glance.'
'Calls out to Glance for data and writes data.'
'Store the image data and return the new image object.'
'Modify the given image with the new data.'
'Delete the given image. DCNL :raises: ImageNotFound if the image does not exist. DCNL :raises: NotAuthorized if the user is not an owner. DCNL :raises: ImageNotAuthorized if the user is not authorized.'
'Check image availability. DCNL This check is needed in case Nova and Glance are deployed DCNL without authentication turned on.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Given a list of resources, retrieve the default quotas. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources.'
'Given a list of resources, retrieve the quotas for the given DCNL quota class. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Given a list of resources, retrieve the quotas for the given DCNL project. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified.  It DCNL will be ignored if project_id == DCNL context.project_id. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve. DCNL :param has_sync: If True, indicates that the resource must DCNL have a sync attribute; if False, indicates DCNL that the resource must NOT have a sync DCNL attribute. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param deltas: A dictionary of the proposed delta changes. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Reset the usage records for a particular user on a list of DCNL resources.  This will force that user\'s usage records to be DCNL refreshed the next time a reservation is made. DCNL Note: this does not affect the currently outstanding DCNL reservations the user has; those reservations must be DCNL committed or rolled back (or expired). DCNL :param context: The request context, for access checks. DCNL :param resources: A list of the resource names for which the DCNL usage must be reset.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Given a list of resources, retrieve the default quotas. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources.'
'Given a list of resources, retrieve the quotas for the given DCNL quota class. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Given a list of resources, retrieve the quotas for the given DCNL project. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified.  It DCNL will be ignored if project_id == DCNL context.project_id. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param deltas: A dictionary of the proposed delta changes. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Reset the usage records for a particular user on a list of DCNL resources.  This will force that user\'s usage records to be DCNL refreshed the next time a reservation is made. DCNL Note: this does not affect the currently outstanding DCNL reservations the user has; those reservations must be DCNL committed or rolled back (or expired). DCNL :param context: The request context, for access checks. DCNL :param resources: A list of the resource names for which the DCNL usage must be reset.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initializes a Resource. DCNL :param name: The name of the resource, i.e., "instances". DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Given a driver and context, obtain the quota for this DCNL resource. DCNL :param driver: A quota driver. DCNL :param context: The request context. DCNL :param project_id: The project to obtain the quota value for. DCNL If not provided, it is taken from the DCNL context.  If it is given as None, no DCNL project-specific quota will be searched DCNL for. DCNL :param quota_class: The quota class corresponding to the DCNL project, or for which the quota is to be DCNL looked up.  If not provided, it is taken DCNL from the context.  If it is given as None, DCNL no quota class-specific quota will be DCNL searched for.  Note that the quota class DCNL defaults to the value in the context, DCNL which may not correspond to the project if DCNL project_id is not the same as the one in DCNL the context.'
'Return the default value of the quota.'
'Initializes a ReservableResource. DCNL Reservable resources are those resources which directly DCNL correspond to objects in the database, i.e., instances, cores, DCNL etc.  A ReservableResource must be constructed with a usage DCNL synchronization function, which will be called to determine the DCNL current counts of one or more resources. DCNL The usage synchronization function will be passed three DCNL arguments: an admin context, the project ID, and an opaque DCNL session object, which should in turn be passed to the DCNL underlying database function.  Synchronization functions DCNL should return a dictionary mapping resource names to the DCNL current in_use count for those resources; more than one DCNL resource and resource count may be returned.  Note that DCNL synchronization functions may be associated with more than one DCNL ReservableResource. DCNL :param name: The name of the resource, i.e., "instances". DCNL :param sync: A callable which returns a dictionary to DCNL resynchronize the in_use count for one or more DCNL resources, as described above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initializes a CountableResource. DCNL Countable resources are those resources which directly DCNL correspond to objects in the database, i.e., instances, cores, DCNL etc., but for which a count by project ID is inappropriate.  A DCNL CountableResource must be constructed with a counting DCNL function, which will be called to determine the current counts DCNL of the resource. DCNL The counting function will be passed the context, along with DCNL the extra positional and keyword arguments that are passed to DCNL Quota.count().  It should return an integer specifying the DCNL count. DCNL Note that this counting is not performed in a transaction-safe DCNL manner.  This resource class is a temporary measure to provide DCNL required functionality, until a better approach to solving DCNL this problem can be evolved. DCNL :param name: The name of the resource, i.e., "instances". DCNL :param count: A callable which returns the count of the DCNL resource.  The arguments passed are as described DCNL above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initialize a Quota object.'
'Register a resource.'
'Register a list of resources.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Retrieve the default quotas. DCNL :param context: The request context, for access checks.'
'Retrieve the quotas for the given quota class. DCNL :param context: The request context, for access checks. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Retrieve the quotas for the given project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'Count a resource. DCNL For countable resources, invokes the count() function and DCNL returns its result.  Arguments following the context and DCNL resource are passed directly to the count function declared by DCNL the resource. DCNL :param context: The request context, for access checks. DCNL :param resource: The name of the resource, as a string.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction.  The DCNL values to check are given as keyword arguments, where the key DCNL identifies the specific quota limit to check, and the value is DCNL the proposed value. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas.  The deltas are given as DCNL keyword arguments, and current usage and other reservations DCNL are factored into the quota check. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Reset the usage records for a particular user on a list of DCNL resources.  This will force that user\'s usage records to be DCNL refreshed the next time a reservation is made. DCNL Note: this does not affect the currently outstanding DCNL reservations the user has; those reservations must be DCNL committed or rolled back (or expired). DCNL :param context: The request context, for access checks. DCNL :param resources: A list of the resource names for which the DCNL usage must be reset.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initialize, but do not start, a WSGI server. DCNL :param name: Pretty name for logging. DCNL :param app: The WSGI application to serve. DCNL :param host: IP address to serve the application. DCNL :param port: Port number to server the application. DCNL :param pool_size: Maximum number of eventlets to spawn concurrently. DCNL :param backlog: Maximum number of queued connections. DCNL :param max_url_len: Maximum length of permitted URLs. DCNL :returns: None DCNL :raises: nova.exception.InvalidInput'
'Start serving a WSGI application. DCNL :returns: None'
'Stop this server. DCNL This is not a very nice action, as currently the method by which a DCNL server is stopped is by killing its eventlet. DCNL :returns: None'
'Block, until the server has stopped. DCNL Waits on the server\'s eventlet to finish, then returns. DCNL :returns: None'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = nova.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import nova.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = nova.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import nova.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Iterator that prints the contents of a wrapper string.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be an object that can route DCNL the request to the action-specific method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, \'/svrlist\', controller=sc, action=\'list\') DCNL # Actions are all implicitly defined DCNL mapper.resource(\'server\', \'servers\', controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, \'/v1.0/{path_info:.*}\', controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Dispatch the request to the appropriate controller. DCNL Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Initialize the loader, and attempt to find the config. DCNL :param config_path: Full or relative path to the paste config. DCNL :returns: None'
'Return the paste URLMap wrapped WSGI application. DCNL :param name: Name of the application to load. DCNL :returns: Paste URLMap object wrapping the requested application. DCNL :raises: `nova.exception.PasteAppNotFound`'
'Make the config drive. DCNL :param path: the path to place the config drive image at DCNL :raises ProcessExecuteError if a helper process has failed.'
'Initialize anything that is necessary for the driver to function, DCNL including catching up with currently running VM\'s on the given host.'
'Get the current status of an instance.'
'Return currently known host stats.'
'Create a new instance/VM/domain on powerVM.'
'Destroy (shutdown and delete) the specified instance.'
'Reboot the specified instance. DCNL :param instance: Instance object as returned by DB layer. DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param reboot_type: Either a HARD or SOFT reboot DCNL :param block_device_info: Info pertaining to attached volumes DCNL :param bad_volumes_callback: Function to handle any bad volumes DCNL encountered'
'Retrieves the IP address of the hypervisor host.'
'Snapshots the specified instance. DCNL :param context: security context DCNL :param instance: Instance object as returned by DB layer. DCNL :param image_id: Reference to a pre-created image that will DCNL hold the snapshot. DCNL :param update_task_state: Function reference that allows for updates DCNL to the instance task state.'
'Pause the specified instance.'
'Unpause paused VM instance.'
'suspend the specified instance.'
'resume the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Retrieve resource info.'
'Reboots, shuts down or powers up the host.'
'Indicate if the driver requires the legacy network_info format.'
'Manage the driver\'s local image cache. DCNL Some drivers chose to cache images for instances on disk. This method DCNL is an opportunity to do management of that cache which isn\'t directly DCNL related to other calls into the driver. The prime example is to clean DCNL the cache and remove images which are no longer of interest.'
'Transfers the disk of a running instance in multiple phases, turning DCNL off the instance before the end. DCNL :returns: disk_info dictionary that is passed as the DCNL disk_info parameter to finish_migration DCNL on the destination nova-compute host'
'Rename the instance to be migrated to avoid naming conflicts DCNL :param instance_name: name of instance to be migrated DCNL :returns: the new instance name'
'Completes a resize, turning on the migrated instance DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param image_meta: image object returned by nova.image.glance that DCNL defines the image from which this instance DCNL was created'
'Confirms a resize, destroying the source VM.'
'Finish reverting a resize, powering back on the instance.'
'Get the current status of an LPAR instance. DCNL Returns a dict containing: DCNL :state:           the running state, one of the power_state codes DCNL :max_mem:         (int) the maximum memory in KBytes allowed DCNL :mem:             (int) the memory in KBytes used by the domain DCNL :num_cpu:         (int) the number of virtual CPUs for the domain DCNL :cpu_time:        (int) the CPU time used in nanoseconds DCNL :raises: PowerVMLPARInstanceNotFound'
'Check whether or not the LPAR instance exists and return it.'
'Return the names of all the instances known to the virtualization DCNL layer, as a list.'
'Retrieve resource info. DCNL :returns: dictionary containing resource info'
'Return currently known host stats.'
'Destroy (shutdown and delete) the specified instance. DCNL :param instance_name: Instance name.'
'Capture the root disk for a snapshot DCNL :param context: nova context for this operation DCNL :param instance: instance information to capture the image from DCNL :param image_id: uuid of pre-created snapshot image DCNL :param image_meta: metadata to upload with captured image DCNL :param update_task_state: Function reference that allows for updates DCNL to the instance task state.'
'Checks resources on host for resize, migrate, and spawn DCNL :param vcpus: CPUs to be used DCNL :param mem: memory requested by instance DCNL :param disk: size of disk to be expanded or created'
'Migrates SVC or Logical Volume based disks DCNL :param device_name: disk device name in /dev/ DCNL :param dest: IP or DNS name of destination host/VIOS DCNL :param image_path: path on source and destination to directory DCNL for storing image files DCNL :param instance_name: name of instance being migrated DCNL :returns: disk_info dictionary object describing root volume DCNL information used for locating/mounting the volume'
'Constructor. DCNL :param connection: common.Connection object with the DCNL information to connect to the remote DCNL ssh.'
'Return a LPAR object by its instance name. DCNL :param instance_name: LPAR instance name DCNL :param resource_type: the type of resources to list DCNL :returns: LPAR object'
'List all existent LPAR instances names. DCNL :returns: list -- list with instances names.'
'Receives a LPAR data object and creates a LPAR instance. DCNL :param lpar: LPAR object'
'Start a LPAR instance. DCNL :param instance_name: LPAR instance name'
'Stop a running LPAR. DCNL :param instance_name: LPAR instance name DCNL :param timeout: value in seconds for specifying DCNL how long to wait for the LPAR to stop'
'Removes a LPAR. DCNL :param instance_name: LPAR instance name'
'Return the vhost name by the instance id. DCNL :param instance_id: LPAR instance id DCNL :returns: string -- vhost name or None in case none is found'
'Virtual ethernet adapter id. DCNL Searches for the shared ethernet adapter and returns DCNL its id. DCNL :returns: id of the virtual ethernet adapter.'
'Returns the managed system hostname. DCNL :returns: string -- hostname'
'Returns the disk name attached to a vhost. DCNL :param vhost: a vhost name DCNL :returns: string -- disk name'
'Attach disk name to a specific vhost. DCNL :param disk: the disk name DCNL :param vhost: the vhost name'
'Get memory info. DCNL :returns: tuple - memory info (total_mem, avail_mem)'
'Get CPU info. DCNL :returns: tuple - cpu info (total_procs, avail_procs)'
'Get the disk usage information. DCNL :returns: tuple - disk info (disk_total, disk_used, disk_avail)'
'Run a remote command using an active ssh connection. DCNL :param command: String with the command to run.'
'Run a remote command as root using an active ssh connection. DCNL :param command: List of commands.'
'Resizing an LPAR DCNL :param lpar_info: dictionary of LPAR information'
'Finds and calculates the logical volume size in GB DCNL :param diskname: name of the logical volume DCNL :returns: size of logical volume in GB'
'Rename LPAR given by instance_name to new_name DCNL Note: For IVM based deployments, the name is DCNL limited to 31 characters and will be trimmed DCNL to meet this requirement DCNL :param instance_name: name of LPAR to be renamed DCNL :param new_name: desired new name of LPAR DCNL :returns: new name of renamed LPAR trimmed to 31 characters DCNL if necessary'
'Removes a file on the VIOS partition DCNL :param file_path: absolute path to file to be removed'
'Set LPAR\'s property virtual_eth_mac_base_value DCNL :param instance_name: name of the instance to be set DCNL :param mac: mac of virtual ethernet'
'Generates set of valid MAC addresses for an IVM instance.'
'Creates a volume with a minimum size DCNL :param size: size of the volume in bytes DCNL :returns: string -- the name of the disk device.'
'Removes the disk and its associated vSCSI connection DCNL :param volume_info: dictionary with volume info including name of DCNL disk device in /dev/'
'Creates a Volume and copies the specified image to it DCNL :param context: nova context used to retrieve image from glance DCNL :param instance: instance to create the volume for DCNL :param image_id: image_id reference used to locate image in glance DCNL :returns: dictionary with the name of the created DCNL disk device in \'device_name\' key'
'Capture the contents of a volume and upload to glance DCNL :param device_name: device in /dev/ to capture DCNL :param context: nova context for operation DCNL :param image_id: image reference to pre-created image in glance DCNL :param image_meta: metadata for new image DCNL :param update_task_state: Function reference that allows for updates DCNL to the instance task state'
'Copy a logical volume to file, compress, and transfer DCNL :param lv_name: volume device name DCNL :param src_host: source IP or DNS name. DCNL :param dest: destination IP or DNS name DCNL :param image_path: path to remote image storage directory DCNL :param instance_name: name of instance that is being migrated DCNL :returns: file path on destination of image file that was moved'
'Attaches volume to host using info passed in *args and **kargs'
'Detaches volume from host using info passed in *args and **kargs'
'Creates a logical volume with a minimum size DCNL :param size: size of the logical volume in bytes DCNL :returns: string -- the name of the new logical volume. DCNL :raises: PowerVMNoSpaceLeftOnVolumeGroup'
'Removes the Logical Volume and its associated vSCSI connection DCNL :param volume_info: Dictionary with volume info including name of DCNL Logical Volume device in /dev/ via device_name key'
'Creates a Logical Volume and copies the specified image to it DCNL :param context: nova context used to retrieve image from glance DCNL :param instance: instance to create the volume for DCNL :param image_id: image_id reference used to locate image in glance DCNL :returns: dictionary with the name of the created DCNL Logical Volume device in \'device_name\' key'
'Capture the contents of a volume and upload to glance DCNL :param device_name: device in /dev/ to capture DCNL :param context: nova context for operation DCNL :param image_id: image reference to pre-created image in glance DCNL :param image_meta: metadata for new image DCNL :param update_task_state: Function reference that allows for updates DCNL to the instance task state.'
'Copy a logical volume to file, compress, and transfer DCNL :param lv_name: logical volume device name DCNL :param dest: destination IP or DNS name DCNL :param image_path: path to remote image storage directory DCNL :param instance_name: name of instance that is being migrated DCNL :returns: file path on destination of image file that was moved'
'Creates a logical volume with a minimum size. DCNL :param size: size of the logical volume in bytes DCNL :returns: string -- the name of the new logical volume. DCNL :raises: PowerVMNoSpaceLeftOnVolumeGroup'
'Removes the lv and the connection between its associated vscsi. DCNL :param lv_name: a logical volume name'
'Copy file to device. DCNL :param source_path: path to input source file DCNL :param device: output device name DCNL :param decompress: if True (default) the file will be decompressed DCNL on the fly while being copied to the drive'
'Copy a device to a file using dd DCNL :param device_name: device name to copy from DCNL :param file_path: output file path'
'Copy file to VIOS, decompress it, and return its new size and name. DCNL :param source_path: source file path DCNL :param remote_path remote file path DCNL :param decompress: if True, decompressess the file after copying; DCNL if False (default), just copies the file'
'Copy a file from IVM to the nova-compute host, DCNL and return the location of the copy DCNL :param remote_source_path remote source file path DCNL :param local_dest_dir local destination directory DCNL :param compress: if True, compress the file before transfer; DCNL if False (default), copy the file as is'
'Run a remote command using an active ssh connection. DCNL :param command: String with the command to run.'
'Run a remote command as root using an active ssh connection. DCNL :param command: List of commands.'
'Reset state variables used for each pass.'
'Store a base image for later examination.'
'Return a list of the images present in _base. DCNL Determine what images we have on disk. There will be other files in DCNL this directory so we only grab the ones which are the right length DCNL to be disk images. DCNL Note that this does not return a value. It instead populates a class DCNL variable with a list of images that we need to try and explain.'
'List running instances (on all compute nodes).'
'List the backing images currently in use.'
'Find the base file matching this fingerprint. DCNL Yields the name of the base file, a boolean which is True if the image DCNL is "small", and a boolean which indicates if this is a resized image. DCNL Note that is is possible for more than one yield to result from this DCNL check. DCNL If no base file is found, then nothing is yielded.'
'Compare the checksum stored on disk with the current file. DCNL Note that if the checksum fails to verify this is logged, but no actual DCNL action occurs. This is something sysadmins should monitor for and DCNL handle manually when it occurs.'
'Remove a single base file if it is old enough. DCNL Returns nothing.'
'Handle the checks for a single base image.'
'Verify that base images are in a reasonable state.'
'Set cache mode on LibvirtConfigGuestDisk object.'
'Receives async events coming in from libvirtd. DCNL This is a native thread which runs the default DCNL libvirt event loop implementation. This processes DCNL any incoming async events from libvirtd and queues DCNL them for later dispatch. This thread is only DCNL permitted to use libvirt python APIs, and the DCNL driver.queue_event method. In particular any use DCNL of logging is forbidden, since it will confuse DCNL eventlet\'s greenthread integration'
'Dispatches async events coming in from libvirtd. DCNL This is a green thread which waits for events to DCNL arrive from the libvirt event loop thread. This DCNL then dispatches the events to the compute manager.'
'Receives lifecycle events from libvirt. DCNL NB: this method is executing in a native thread, not DCNL an eventlet coroutine. It can only invoke other libvirt DCNL APIs, or use self.queue_event(). Any use of logging APIs DCNL in particular is forbidden.'
'Puts an event on the queue for dispatch. DCNL This method is called by the native event thread to DCNL put events on the queue for later dispatch by the DCNL green thread.'
'Wait for & dispatch events from native thread DCNL Blocks until native thread indicates some events DCNL are ready. Then dispatches all queued events.'
'Create a self-pipe for the native thread to synchronize on. DCNL This code is taken from the eventlet tpool module, under terms DCNL of the Apache License v2.0.'
'Initializes the libvirt events subsystem. DCNL This requires running a native thread to provide the DCNL libvirt event loop integration. This forwards events DCNL to a green thread which does the actual dispatching.'
'Efficient override of base instance_exists method.'
'Efficient override of base instance_exists method.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Delete all LVM disks for given instance object.'
'Returns all LVM disks for given instance object.'
'Returns the xml for the disk mounted at device.'
'Create snapshot from a running VM instance. DCNL This command only works with qemu 0.14+'
'Snapshot an instance without downtime.'
'Reboot a virtual machine, given an instance reference.'
'Attempt to shutdown and restart the instance gracefully. DCNL We use shutdown and create here so we can return if the guest DCNL responded and actually rebooted. Note that this method only DCNL succeeds if the guest responds to acpi. Therefore we return DCNL success or failure so we can fall back to a hard reboot if DCNL necessary. DCNL :returns: True if the reboot succeeded'
'Reboot a virtual machine, given an instance reference. DCNL Performs a Libvirt reset (if supported) on the domain. DCNL If Libvirt reset is unavailable this method actually destroys and DCNL re-creates the domain to ensure the reboot happens, as the guest DCNL OS cannot ignore this action. DCNL If xml is set, it uses the passed in xml in place of the xml from the DCNL existing domain.'
'Pause VM instance.'
'Unpause paused VM instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Suspend the specified instance.'
'resume the specified instance.'
'resume guest state when a host is booted.'
'Loads a VM using rescue images. DCNL A rescue is normally performed when something goes wrong with the DCNL primary images and data needs to be corrected/recovered. Rescuing DCNL should not edit or over-ride the original image, only allow for DCNL data recovery.'
'Reboot the VM which is being rescued back into primary images.'
'Create a blank image of specified size.'
'Create a swap file of specified size.'
'Returns an instance of config.LibvirtConfigCaps representing DCNL the capabilities of the host'
'Returns a UUID representing the host.'
'Returns an instance of config.LibvirtConfigGuestCPU DCNL representing the host\'s CPU model & topology with DCNL policy for configuring a guest to match'
'Get config data for parameters. DCNL :param rescue: optional dictionary that should contain the key DCNL \'ramdisk_id\' if a ramdisk is needed for the rescue image and DCNL \'kernel_id\' if a kernel is needed for the rescue image.'
'Retrieve libvirt domain object given an instance name. DCNL All libvirt error handling should be handled in this method and DCNL relevant nova exceptions should be raised in response.'
'Retrieve information from libvirt for a specific instance name. DCNL If a libvirt error is encountered during lookup, we might raise a DCNL NotFound exception or Error exception depending on how severe the DCNL libvirt error is.'
'Create a domain. DCNL Either domain or xml must be passed in. If both are passed, then DCNL the domain definition is overwritten from the xml.'
'Do required network setup and create domain.'
'Return all block devices in use on this node.'
'Note that this function takes an instance name. DCNL Returns a list of all block devices for this domain.'
'Note that this function takes a domain xml. DCNL Returns a list of all network interfaces for this instance.'
'Get vcpu number of physical computer. DCNL :returns: the number of cpu core.'
'Get the total memory size(MB) of physical computer. DCNL :returns: the total amount of memory(MB).'
'Get local storage info of the compute node in GB. DCNL :returns: A dict containing: DCNL :total: How big the overall usable filesystem is (in gigabytes) DCNL :free: How much space is free (in gigabytes) DCNL :used: How much space is used (in gigabytes)'
'Get vcpu usage number of physical computer. DCNL :returns: The total number of vcpu that currently used.'
'Get the free memory size(MB) of physical computer. DCNL :returns: the total usage of memory(MB).'
'Get hypervisor type. DCNL :returns: hypervisor type (ex. qemu)'
'Get hypervisor version. DCNL :returns: hypervisor version (ex. 12003)'
'Returns the hostname of the hypervisor.'
'Get hypervisor instance capabilities DCNL Returns a list of tuples that describe instances the DCNL hypervisor is capable of hosting.  Each tuple consists DCNL of the triplet (arch, hypervisor_type, vm_mode). DCNL :returns: List of tuples describing instance capabilities'
'Get cpuinfo information. DCNL Obtains cpu feature from virConnect.getCapabilities, DCNL and returns as a json string. DCNL :return: see above description'
'Return usage info for volumes attached to vms on DCNL a given host'
'Note that this function takes an instance name.'
'Note that this function takes an instance name.'
'Retrieve resource info. DCNL This method is called as a periodic task and is used only DCNL in live migration currently. DCNL :param nodename: ignored in this driver DCNL :returns: dictionary containing resource info'
'Check if it is possible to execute live migration. DCNL This runs checks on the destination host, and then calls DCNL back to the source host to check the results. DCNL :param ctxt: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param block_migration: if true, prepare for block migration DCNL :param disk_over_commit: if true, allow disk over commit'
'Do required cleanup on dest host after check_can_live_migrate calls DCNL :param ctxt: security context'
'Check if it is possible to execute live migration. DCNL This checks if the live migration can succeed, based on the DCNL results from check_can_live_migrate_destination. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param dest_check_data: result of check_can_live_migrate_destination'
'Checks if destination has enough disk for block migration.'
'Checks the host cpu is compatible to a cpu given by xml. DCNL "xml" must be a part of libvirt.openReadonly().getCapabilities(). DCNL return values follows by virCPUCompareResult. DCNL if 0 > return value, do live migration. DCNL \'http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult\' DCNL :param cpu_info: json string that shows cpu feature(see get_cpu_info()) DCNL :returns: DCNL None. if given cpu info is not compatible to this server, DCNL raise exception.'
'Makes tmpfile under CONF.instances_path.'
'Confirms existence of the tmpfile under CONF.instances_path. DCNL Cannot confirm tmpfile return False.'
'Removes existence of the tmpfile under CONF.instances_path.'
'Ensure that an instance\'s filtering rules are enabled. DCNL When migrating an instance, we need the filtering rules to DCNL be configured on the destination host before starting the DCNL migration. DCNL Also, when restarting the compute service, we need to ensure DCNL that filtering rules exist for all running services.'
'Spawning live_migration operation for distributing high-load. DCNL :params ctxt: security context DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params dest: destination host DCNL :params block_migration: destination host DCNL :params post_method: DCNL post operation method. DCNL expected nova.compute.manager.post_live_migration. DCNL :params recover_method: DCNL recovery method when any exception occurs. DCNL expected nova.compute.manager.recover_live_migration. DCNL :params block_migration: if true, do block migration. DCNL :params migrate_data: implementation specific params'
'Do live migration. DCNL :params ctxt: security context DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params dest: destination host DCNL :params post_method: DCNL post operation method. DCNL expected nova.compute.manager.post_live_migration. DCNL :params recover_method: DCNL recovery method when any exception occurs. DCNL expected nova.compute.manager.recover_live_migration. DCNL :params migrate_data: implementation specific params'
'Download kernel and ramdisk for instance in instance directory.'
'Preparation live migration.'
'Preparation for block migration.'
':params ctxt: security context DCNL :params instance: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params disk_info_json: DCNL json strings specified in get_instance_disk_info'
'Post operation of live migration at destination host. DCNL :param ctxt: security context DCNL :param instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :param network_info: instance network information DCNL :param block_migration: if true, post operation of block_migraiton.'
'Preparation block migration. DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :return: DCNL json strings with below format:: DCNL "[{\'path\':\'disk\', \'type\':\'raw\', DCNL \'virt_disk_size\':\'10737418240\', DCNL \'backing_file\':\'backing_file\', DCNL \'disk_size\':\'83886080\'},...]"'
'Return total over committed disk size for all instances.'
'See comments of same method in firewall_driver.'
'Return the current state of the host. DCNL If \'refresh\' is True, run update the stats first.'
'Returns the result of calling "uptime".'
'Manage the local cache of images.'
'Used only for cleanup in case migrate_disk_and_power_off fails.'
'Make sure that a failed migrate doesn\'t prevent us from rolling DCNL back in a revert.'
'Confirms a resize, destroying the source VM.'
'Add a compute host to an aggregate.'
'Remove a compute host from an aggregate.'
'only used for Resource Pools.'
'Return the current state of the host. DCNL If \'refresh\' is True, run update the stats first.'
'Retrieve status info from libvirt.'
'Get VIF configurations for bridge type.'
'Ensure that the bridge exists, and add VIF to it.'
'No manual plugging required.'
'Plug using hybrid strategy DCNL Create a per-VIF linux bridge, then link that bridge to the OVS DCNL integration bridge via a veth device, setting up the other end DCNL of the veth device just like a normal OVS port.  Then boot the DCNL VIF on the linux bridge using standard libvirt mechanisms.'
'No manual unplugging required.'
'Unplug the VIF by deleting the port from the bridge.'
'No manual unplugging required.'
'UnPlug using hybrid strategy DCNL Unhook port from OVS, unhook port from bridge, delete DCNL bridge, and delete both veth devices.'
'Connect the volume. Returns xml for libvirt.'
'Disconnect the volume.'
'Connect the volume to a local device.'
'Connect the volume to a fake device.'
'Attach the volume to instance_name.'
'Detach the volume from instance_name.'
'Create back-end to nfs.'
'Connect the volume. Returns xml for libvirt.'
'@type nfs_export: string'
'Mount nfs export to mount path.'
'returns string that represents hash of base_str (in hex format).'
'Check path.'
'Call aoe-discover (aoe-tools) AoE Discover.'
'Revalidate the LUN Geometry (When an AoE ID is reused).'
'Create back-end to glusterfs.'
'Connect the volume. Returns xml for libvirt.'
'@type glusterfs_export: string'
'Mount glusterfs export to mount path.'
'returns string that represents hash of base_str (in hex format).'
'Check path.'
'Attach the volume to instance_name.'
'Detach the volume from instance_name.'
'Create back-end to SOFS and check connection.'
'Connect the volume. Returns xml for libvirt.'
'Sanity checks before attempting to mount SOFS.'
'No-op. Everything is done in prepare_instance_filter.'
'This filter protects false positives on IPv6 Duplicate Address DCNL Detection(DAD).'
'The standard allow-dhcp-server filter is an <ip> one, so it uses DCNL ebtables to allow traffic through. Without a corresponding rule in DCNL iptables, it\'ll get blocked anyway.'
'Set up basic filtering (MAC, IP, and ARP spoofing protection).'
'Obtain a list of base filters to apply to an instance. DCNL The return value should be a list of strings, each DCNL specifying a filter name.  Subclasses can override this DCNL function to add additional filters as needed.  Additional DCNL filters added to the list must also be correctly defined DCNL within the subclass.'
'Static filters are filters that have no need to be IP aware. DCNL There is no configuration or tuneability of these filters, so they DCNL can be set up once and forgotten about.'
'Clear out the nwfilter rules.'
'Check nova-instance-instance-xxx exists.'
'Set up provider rules and basic NWFilter.'
'No-op. Everything is done in prepare_instance_filter.'
'Check nova-instance-instance-xxx exists.'
'Image initialization. DCNL :source_type: block or file DCNL :driver_format: raw or qcow2 DCNL :is_block_dev:'
'Create image from template. DCNL Contains specific behavior for each image type. DCNL :prepare_template: function, that creates template. DCNL Should accept `target` argument. DCNL :base: Template name DCNL :size: Size of created image in bytes'
'Get `LibvirtConfigGuestDisk` filled for this image. DCNL :disk_dev: Disk bus device name DCNL :disk_bus: Disk bus type DCNL :device_type: Device type for this image. DCNL :cache_mode: Caching mode for this image DCNL :extra_specs: Instance type extra specs dict.'
'Creates image from template. DCNL Ensures that template and image not already exists. DCNL Ensures that base directory exists. DCNL Synchronizes on template fetching. DCNL :fetch_func: Function that creates the base image DCNL Should accept `target` argument. DCNL :filename: Name of the file in the image directory DCNL :size: Size of created image in bytes (optional)'
'Check once per class, whether fallocate(1) is available, DCNL and that the instances directory supports fallocate(2).'
'Constructs image for selected backend DCNL :instance: Instance name. DCNL :name: Image name. DCNL :image_type: Image type. DCNL Optional, is CONF.libvirt_images_type by default.'
'Returns snapshot for given image DCNL :path: path to image DCNL :snapshot_name: snapshot name DCNL :image_type: type of image'
'Detect nbd device files.'
'Retry requests for NBD devices.'
'Reset device paths to allow unmounting.'
'Make the image available as a block device in the file system.'
'Some implementations need to retry their get_dev.'
'Release the block device from the file system namespace.'
'Map partitions of the device to the file system namespace.'
'Remove partitions of the device from the file system namespace.'
'Mount the device into the file system.'
'Unmount the device from the file system.'
'Call the get, map and mnt operations.'
'Call the unmnt operation.'
'Call the umnt, unmap, and unget operations.'
'Reset internal state for a previously mounted directory.'
'Return the collated errors from all operations.'
'Mount a disk image, using the object attributes. DCNL The first supported means provided by the mount classes is used. DCNL True, or False is returned and the \'errors\' attribute DCNL contains any diagnostics.'
'Umount a mount point from the filesystem.'
'Remove a disk image from the file system.'
'Initialize anything that is necessary for the driver to function, DCNL including catching up with currently running VM\'s on the given host.'
'Get the current status of an instance, by name (not ID!) DCNL Returns a dict containing: DCNL :state:           the running state, one of the power_state codes DCNL :max_mem:         (int) the maximum memory in KBytes allowed DCNL :mem:             (int) the memory in KBytes used by the domain DCNL :num_cpu:         (int) the number of virtual CPUs for the domain DCNL :cpu_time:        (int) the CPU time used in nanoseconds'
'Return the total number of virtual machines. DCNL Return the number of virtual machines that the hypervisor knows DCNL about. DCNL .. note:: DCNL This implementation works for all drivers, but it is DCNL not particularly efficient. Maintainers of the virt drivers are DCNL encouraged to override this method with something more DCNL efficient.'
'Checks existence of an instance on the host. DCNL :param instance_id: The ID / name of the instance to lookup DCNL Returns True if an instance with the supplied ID exists on DCNL the host, False otherwise. DCNL .. note:: DCNL This implementation works for all drivers, but it is DCNL not particularly efficient. Maintainers of the virt drivers are DCNL encouraged to override this method with something more DCNL efficient.'
'Return the names of all the instances known to the virtualization DCNL layer, as a list.'
'Return the UUIDS of all the instances known to the virtualization DCNL layer, as a list.'
'Create a new instance/VM/domain on the virtualization platform. DCNL Once this successfully completes, the instance should be DCNL running (power_state.RUNNING). DCNL If this fails, any partial instance should be completely DCNL cleaned up, and the virtualization platform should be in the state DCNL that it was before this call began. DCNL :param context: security context DCNL :param instance: Instance object as returned by DB layer. DCNL This function should use the data there to guide DCNL the creation of the new instance. DCNL :param image_meta: image object returned by nova.image.glance that DCNL defines the image from which to boot this instance DCNL :param injected_files: User files to inject into instance. DCNL :param admin_password: Administrator password to set in instance. DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param block_device_info: Information about block devices to be DCNL attached to the instance.'
'Destroy (shutdown and delete) the specified instance. DCNL If the instance is not found (for example if networking failed), this DCNL function should still succeed.  It\'s probably a good idea to log a DCNL warning in that case. DCNL :param instance: Instance object as returned by DB layer. DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param block_device_info: Information about block devices that should DCNL be detached from the instance. DCNL :param destroy_disks: Indicates if disks should be destroyed'
'Reboot the specified instance. DCNL After this is called successfully, the instance\'s state DCNL goes back to power_state.RUNNING. The virtualization DCNL platform should ensure that the reboot action has completed DCNL successfully even in cases in which the underlying domain/vm DCNL is paused or halted/stopped. DCNL :param instance: Instance object as returned by DB layer. DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param reboot_type: Either a HARD or SOFT reboot DCNL :param block_device_info: Info pertaining to attached volumes DCNL :param bad_volumes_callback: Function to handle any bad volumes DCNL encountered'
'Return data about VM diagnostics.'
'Return bandwidth usage counters for each interface on each DCNL running VM'
'Return usage info for volumes attached to vms on DCNL a given host'
'Retrieves the IP address of the dom0'
'Attach the disk to the instance at mountpoint using info.'
'Detach the disk attached to the instance.'
'Attach an interface to the instance.'
'Detach an interface from the instance.'
'Transfers the disk of a running instance in multiple phases, turning DCNL off the instance before the end.'
'Snapshots the specified instance. DCNL :param context: security context DCNL :param instance: Instance object as returned by DB layer. DCNL :param image_id: Reference to a pre-created image that will DCNL hold the snapshot.'
'Completes a resize, turning on the migrated instance DCNL :param network_info: DCNL :py:meth:`~nova.network.manager.NetworkManager.get_instance_nw_info` DCNL :param image_meta: image object returned by nova.image.glance that DCNL defines the image from which this instance DCNL was created'
'Confirms a resize, destroying the source VM.'
'Finish reverting a resize, powering back on the instance.'
'Pause the specified instance.'
'Unpause paused VM instance.'
'suspend the specified instance.'
'resume the specified instance.'
'resume guest state when a host is booted.'
'Rescue the specified instance.'
'Unrescue the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Soft delete the specified instance.'
'Restore the specified instance.'
'Retrieve resource information. DCNL This method is called when nova-compute launches, and DCNL as part of a periodic task DCNL :param nodename: DCNL node which the caller want to get resources from DCNL a driver that manages only one node can safely ignore this DCNL :returns: Dictionary describing resources'
'Prepare an instance for live migration DCNL :param ctxt: security context DCNL :param instance_ref: instance object that will be migrated DCNL :param block_device_info: instance block device information DCNL :param network_info: instance network information DCNL :param migrate_data: implementation specific data dict.'
'Prepare a block device for migration DCNL :param ctxt: security context DCNL :param instance_ref: instance object that will have its disk migrated DCNL :param disk_info: information about disk to be migrated (as returned DCNL from get_instance_disk_info())'
'Live migration of an instance to another host. DCNL :params ctxt: security context DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params dest: destination host DCNL :params post_method: DCNL post operation method. DCNL expected nova.compute.manager.post_live_migration. DCNL :params recover_method: DCNL recovery method when any exception occurs. DCNL expected nova.compute.manager.recover_live_migration. DCNL :params block_migration: if true, migrate VM disk. DCNL :params migrate_data: implementation specific params.'
'Post operation of live migration at destination host. DCNL :param ctxt: security context DCNL :param instance_ref: instance object that is migrated DCNL :param network_info: instance network information DCNL :param block_migration: if true, post operation of block_migration.'
'Check if it is possible to execute live migration. DCNL This runs checks on the destination host, and then calls DCNL back to the source host to check the results. DCNL :param ctxt: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param src_compute_info: Info about the sending machine DCNL :param dst_compute_info: Info about the receiving machine DCNL :param block_migration: if true, prepare for block migration DCNL :param disk_over_commit: if true, allow disk over commit'
'Do required cleanup on dest host after check_can_live_migrate calls DCNL :param ctxt: security context DCNL :param dest_check_data: result of check_can_live_migrate_destination'
'Check if it is possible to execute live migration. DCNL This checks if the live migration can succeed, based on the DCNL results from check_can_live_migrate_destination. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param dest_check_data: result of check_can_live_migrate_destination'
'This method is called after a change to security groups. DCNL All security groups and their associated rules live in the datastore, DCNL and calling this method should apply the updated rules to instances DCNL running the specified security group. DCNL An error should be raised if the operation cannot complete.'
'This method is called when a security group is added to an instance. DCNL This message is sent to the virtualization drivers on hosts that are DCNL running an instance that belongs to a security group that has a rule DCNL that references the security group identified by `security_group_id`. DCNL It is the responsibility of this method to make sure any rules DCNL that authorize traffic flow with members of the security group are DCNL updated and any new members can communicate, and any removed members DCNL cannot. DCNL Scenario: DCNL * we are running on host \'H0\' and we have an instance \'i-0\'. DCNL * instance \'i-0\' is a member of security group \'speaks-b\' DCNL * group \'speaks-b\' has an ingress rule that authorizes group \'b\' DCNL * another host \'H1\' runs an instance \'i-1\' DCNL * instance \'i-1\' is a member of security group \'b\' DCNL When \'i-1\' launches or terminates we will receive the message DCNL to update members of group \'b\', at which time we will make DCNL any changes needed to the rules for instance \'i-0\' to allow DCNL or deny traffic coming from \'i-1\', depending on if it is being DCNL added or removed from the group. DCNL In this scenario, \'i-1\' could just as easily have been running on our DCNL host \'H0\' and this method would still have been called.  The point was DCNL that this method isn\'t called on the host where instances of that DCNL group are running (as is the case with DCNL :py:meth:`refresh_security_group_rules`) but is called where references DCNL are made to authorizing those instances. DCNL An error should be raised if the operation cannot complete.'
'This triggers a firewall update based on database changes. DCNL When this is called, rules have either been added or removed from the DCNL datastore.  You can retrieve rules with DCNL :py:meth:`nova.db.provider_fw_rule_get_all`. DCNL Provider rules take precedence over security group rules.  If an IP DCNL would be allowed by a security group ingress rule, but blocked by DCNL a provider rule, then packets from the IP are dropped.  This includes DCNL intra-project traffic in the case of the allow_project_net_traffic DCNL flag for the libvirt-derived classes.'
'reset networking for specified instance.'
'Setting up filtering rules and waiting for its completion. DCNL To migrate an instance, filtering rules to hypervisors DCNL and firewalls are inevitable on destination host. DCNL ( Waiting only for filtering rules to hypervisor, DCNL since filtering rules to firewall rules can be set faster). DCNL Concretely, the below method must be called. DCNL - setup_basic_filtering (for nova-basic, etc.) DCNL - prepare_instance_filter(for nova-instance-instance-xxx, etc.) DCNL to_xml may have to be called since it defines PROJNET, PROJMASK. DCNL but libvirt migrates those value through migrateToURI(), DCNL so , no need to be called. DCNL Don\'t use thread for this method since migration should DCNL not be started when setting-up filtering rules operations DCNL are not completed. DCNL :params instance_ref: nova.db.sqlalchemy.models.Instance object'
'Defer application of IPTables rules.'
'Turn off deferral of IPTables rules and apply the rules now.'
'Stop filtering instance.'
'Set the root password on the specified instance. DCNL The first parameter is an instance of nova.compute.service.Instance, DCNL and so the instance is being specified as instance.name. The second DCNL parameter is the value of the new password.'
'Writes a file on the specified instance. DCNL The first parameter is an instance of nova.compute.service.Instance, DCNL and so the instance is being specified as instance.name. The second DCNL parameter is the base64-encoded path to which the file is to be DCNL written on the instance; the third is the contents of the file, also DCNL base64-encoded.'
'Applies a diff to the instance metadata. DCNL This is an optional driver method which is used to publish DCNL changes to the instance\'s metadata to the hypervisor.  If the DCNL hypervisor has no means of publishing the instance metadata to DCNL the instance, then this method should not be implemented.'
'inject network info for specified instance.'
'Poll for rebooting instances DCNL :param timeout: the currently configured timeout for considering DCNL rebooting instances to be stuck DCNL :param instances: instances that have been in rebooting state DCNL longer than the configured timeout'
'Reboots, shuts down or powers up the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'Returns the result of calling "uptime" on the target host.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Return currently known host stats.'
'Return performance counters associated with the given disk_id on the DCNL given instance_name.  These are returned as [rd_req, rd_bytes, wr_req, DCNL wr_bytes, errs], where rd indicates read, wr indicates write, req is DCNL the total number of I/O requests made, bytes is the total number of DCNL bytes transferred, and errs is the number of requests held up due to a DCNL full pipeline. DCNL All counters are long integers. DCNL This method is optional.  On some platforms (e.g. XenAPI) performance DCNL statistics can be retrieved directly in aggregate form, without Nova DCNL having to do the aggregation.  On those platforms, this method is DCNL unused. DCNL Note that this function takes an instance ID.'
'Return performance counters associated with the given iface_id on the DCNL given instance_id.  These are returned as [rx_bytes, rx_packets, DCNL rx_errs, rx_drop, tx_bytes, tx_packets, tx_errs, tx_drop], where rx DCNL indicates receive, tx indicates transmit, bytes and packets indicate DCNL the total number of bytes or packets transferred, and errs and dropped DCNL is the total number of packets failed / dropped. DCNL All counters are long integers. DCNL This method is optional.  On some platforms (e.g. XenAPI) performance DCNL statistics can be retrieved directly in aggregate form, without Nova DCNL having to do the aggregation.  On those platforms, this method is DCNL unused. DCNL Note that this function takes an instance ID.'
'True if the driver requires the legacy network_info format.'
'What MAC addresses must this instance have? DCNL Some hypervisors (such as bare metal) cannot do freeform virtualisation DCNL of MAC addresses. This method allows drivers to return a set of MAC DCNL addresses that the instance is to have. allocate_for_instance will take DCNL this into consideration when provisioning networking for the instance. DCNL Mapping of MAC addresses to actual networks (or permitting them to be DCNL freeform) is up to the network implementation layer. For instance, DCNL with openflow switches, fixed MAC addresses can still be virtualised DCNL onto any L2 domain, with arbitrary VLANs etc, but regular switches DCNL require pre-configured MAC->network mappings that will match the DCNL actual configuration. DCNL Most hypervisors can use the default implementation which returns None. DCNL Hypervisors with MAC limits should return a set of MAC addresses, which DCNL will be supplied to the allocate_for_instance call by the compute DCNL manager, and it is up to that call to ensure that all assigned network DCNL details are compatible with the set of MAC addresses. DCNL This is called during spawn_instance by the compute manager. DCNL :return: None, or a set of MAC ids (e.g. set([\'12:34:56:78:90:ab\'])). DCNL None means \'no constraints\', a set means \'these and only these DCNL MAC addresses\'.'
'Manage the driver\'s local image cache. DCNL Some drivers chose to cache images for instances on disk. This method DCNL is an opportunity to do management of that cache which isn\'t directly DCNL related to other calls into the driver. The prime example is to clean DCNL the cache and remove images which are no longer of interest.'
'Add a compute host to an aggregate.'
'Remove a compute host from an aggregate.'
'Undo for Resource Pools.'
'Get connector information for the instance for attaching to volumes. DCNL Connector information is a dictionary representing the ip of the DCNL machine that will be making the connection, the name of the iscsi DCNL initiator and the hostname of the machine as follows:: DCNL \'ip\': ip, DCNL \'initiator\': initiator, DCNL \'host\': hostname'
'Returns nodenames of all nodes managed by the compute service. DCNL This method is for multi compute-nodes support. If a driver supports DCNL multi compute-nodes, this method returns a list of nodenames managed DCNL by the service. Otherwise, this method should return DCNL [hypervisor_hostname].'
'Get information about instance resource usage. DCNL :returns: dict of  nova uuid => dict of usage info'
'Checks access of instance files on the host. DCNL :param instance: instance to lookup DCNL Returns True if files of an instance with the supplied ID accessible on DCNL the host, False otherwise. DCNL .. note:: DCNL Used in rebuild for HA implementation and required for validation DCNL of access to instance shared disk files'
'Register a callback to receive events. DCNL Register a callback to receive asynchronous event DCNL notifications from hypervisors. The callback will DCNL be invoked with a single parameter, which will be DCNL an instance of the nova.virt.event.Event class.'
'Dispatches an event to the compute manager. DCNL Invokes the event callback registered by the DCNL compute manager to dispatch the event. This DCNL must only be invoked from a green thread.'
'For operations after power on.'
'For operations before power off.'
'Returns True or False according as the node\'s power state.'
'Get a node\'s uuid out of a manager instance dict. DCNL The compute manager is meant to know the node uuid, so missing uuid DCNL a significant issue - it may mean we\'ve been passed someone elses data.'
'Power off the specified instance.'
'Power on the specified instance.'
'Plugin VIFs into networks.'
'Manage the local cache of images.'
'Run a remote command using an active ssh connection. DCNL :param command: String with the command to run. DCNL If {_NodeName_} is in the command it will get replaced by DCNL the _matched_name value. DCNL base_cmd will also get prepended to the command.'
'Return all block devices in use on this node.'
'Turn the power to this node ON.'
'Turn the power to this node OFF.'
'Turns the power to node ON.'
'Cycles the power to a node.'
'Turns the power to node OFF, regardless of current state.'
'Fetch the necessary kernels and ramdisks for the instance.'
'Fetch the instance\'s image from Glance DCNL This method pulls the relevant AMI and associated kernel and ramdisk, DCNL and the deploy kernel and ramdisk from Glance, and writes them DCNL to the appropriate places on local disk. DCNL Both sets of kernel and ramdisk are needed for PXE booting, so these DCNL are stored under CONF.baremetal.tftp_root. DCNL At present, the AMI is cached and certain files are injected. DCNL Debian/ubuntu-specific assumptions are made regarding the injected DCNL files. In a future revision, this functionality will be replaced by a DCNL more scalable and os-agnostic approach: the deployment ramdisk will DCNL fetch from Glance directly, and write its own last-mile configuration.'
'Inject last-mile configuration into instances image DCNL Much of this method is a hack around DHCP and cloud-init DCNL not working together with baremetal provisioning yet.'
'Prepare all the images for this instance.'
'Delete instance\'s image file.'
'Configure PXE boot loader for an instance DCNL Kernel and ramdisk images are downloaded by cache_tftp_images, DCNL and stored in /tftpboot/{uuid}/ DCNL This method writes the instances config file, and then creates DCNL symlinks for each MAC address in the instance. DCNL By default, the complete layout looks like this: DCNL /tftpboot/ DCNL ./{uuid}/ DCNL kernel DCNL ramdisk DCNL deploy_kernel DCNL deploy_ramdisk DCNL config DCNL ./pxelinux.cfg/ DCNL {mac} -> ../{uuid}/config'
'Delete PXE bootloader images and config.'
'Wait for PXE deployment to complete.'
'For operations after power on.'
'For operations before power off.'
'Do the initialization that needs to be done.'
'List VM instances.'
'Create VM instance.'
'Create snapshot from a running VM instance.'
'Reboot VM instance.'
'Destroy VM instance.'
'Pause VM instance.'
'Unpause paused VM instance.'
'Suspend the specified instance.'
'Resume the suspended VM instance.'
'Rescue the specified instance.'
'Unrescue the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Poll for rebooting instances.'
'Return info about the VM instance.'
'Return data about VM diagnostics.'
'Return snapshot of console.'
'Return link to instance\'s VNC console.'
'Return volume connector information.'
'Retrieves the IP address of the ESX host.'
'Attach volume storage to VM instance.'
'Detach volume storage to VM instance.'
'Get info about the host on which the VM resides.'
'Retrieve resource info. DCNL This method is called when nova-compute launches, and DCNL as part of a periodic task. DCNL :returns: dictionary describing resources'
'Update the status info of the host, and return those values DCNL to the calling program.'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'Reboots, shuts down or powers up the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'inject network info for specified instance.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Return the IDs of all the virtual network interfaces attached to the DCNL specified instance, as a list.  These IDs are opaque to the caller DCNL (they are only useful for giving back to this layer as a parameter to DCNL interface_stats).  These IDs only need to be unique for a given DCNL instance.'
'Transfers the disk of a running instance in multiple phases, turning DCNL off the instance before the end.'
'Confirms a resize, destroying the source VM.'
'Finish reverting a resize, powering back on the instance.'
'Completes a resize, turning on the migrated instance.'
'Live migration of an instance to another host.'
'Create the VIM Object instance.'
'Creates a session with the ESX host.'
'Logs-out the session.'
'Check if the module is a VIM Object instance.'
'Calls a method within the module specified with DCNL args provided.'
'Gets the VIM object reference.'
'Return a Deferred that will give the result of the given task. DCNL The task is polled until it completes.'
'Poll the given task, and fires the given Deferred if we DCNL get a result.'
'Initializer.'
'Lists the VM instances that are registered with the ESX host.'
'Creates a VM instance. DCNL Steps followed are: DCNL 1. Create a VM with no disk and the specifics in the instance object DCNL like RAM size. DCNL 2. For flat disk DCNL 2.1. Create a dummy vmdk of the size of the disk file that is to be DCNL uploaded. This is required just to create the metadata file. DCNL 2.2. Delete the -flat.vmdk file created in the above step and retain DCNL the metadata .vmdk file. DCNL 2.3. Upload the disk file. DCNL 3. For sparse disk DCNL 3.1. Upload the disk file to a -sparse.vmdk file. DCNL 3.2. Copy/Clone the -sparse.vmdk file to a thin vmdk. DCNL 3.3. Delete the -sparse.vmdk file. DCNL 4. Attach the disk to the VM by reconfiguring the same. DCNL 5. Power on the VM.'
'Create snapshot from a running VM instance. DCNL Steps followed are: DCNL 1. Get the name of the vmdk file which the VM points to right now. DCNL Can be a chain of snapshots, so we need to know the last in the DCNL chain. DCNL 2. Create the snapshot. A new vmdk is created which the VM points to DCNL now. The earlier vmdk becomes read-only. DCNL 3. Call CopyVirtualDisk which coalesces the disk chain to form a single DCNL vmdk, rather a .vmdk metadata file and a -flat.vmdk disk data file. DCNL 4. Now upload the -flat.vmdk file to the image store. DCNL 5. Delete the coalesced .vmdk and -flat.vmdk created.'
'Reboot a VM instance.'
'Destroy a VM instance. Steps followed are: DCNL 1. Power off the VM, if it is in poweredOn state. DCNL 2. Destroy the VM.'
'Destroy a VM instance. Steps followed are: DCNL 1. Power off the VM, if it is in poweredOn state. DCNL 2. Un-register a VM. DCNL 3. Delete the contents of the folder holding the VM related data.'
'Suspend the specified instance.'
'Resume the specified instance.'
'Rescue the specified instance. DCNL - shutdown the instance VM. DCNL - spawn a rescue VM (the vm name-label will be instance-N-rescue).'
'Unrescue the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Update instance progress percent to reflect current step number'
'Transfers the disk of a running instance in multiple phases, turning DCNL off the instance before the end.'
'Confirms a resize, destroying the source VM.'
'Finish reverting a resize, powering back on the instance.'
'Completes a resize, turning on the migrated instance.'
'Spawning live_migration operation for distributing high-load.'
'Poll for rebooting instances.'
'Return data about the VM instance.'
'Return data about VM diagnostics.'
'Return snapshot of console.'
'Return connection info for a vnc console.'
'Return VNC port for an VM.'
'Set the machine id of the VM for guest tools to pick up and reconfigure DCNL the network interfaces.'
'Set the vnc configuration of the VM.'
'Get the datacenter name and the reference.'
'Get reference to the host with the name specified.'
'Get the Vm folder ref from the datacenter.'
'Check if the path exists on the datastore.'
'Check if the path and file exists on the datastore.'
'Creates a directory at the path specified. If it is just "NAME", DCNL then a directory with this name is created at the topmost level of the DCNL DataStore.'
'inject network info for specified instance.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Return the IDs of all the virtual network interfaces attached to the DCNL specified instance, as a list.  These IDs are opaque to the caller DCNL (they are only useful for giving back to this layer as a parameter to DCNL interface_stats).  These IDs only need to be unique for a given DCNL instance.'
'Read data from the pipe. Chunksize if ignored for we have ensured DCNL that the data chunks written to the pipe by readers is the same as the DCNL chunks asked for by the Writer.'
'Put a data item in the pipe.'
'Set the file\'s current position at the offset.'
'Get size of the file to be read.'
'A place-holder to maintain consistency.'
'Creates the necessary Communication interfaces and gets the DCNL ServiceContent for initiating SOAP transactions. DCNL protocol: http or https DCNL host    : ESX IPAddress[:port] or ESX Hostname[:port]'
'Gets the service content object.'
'Makes the API calls and gets the result.'
'Builds the request managed object.'
'Read an item from the queue. The chunk size is ignored for the DCNL Client ImageBodyIterator uses its own CHUNKSIZE.'
'Get the next item from the image iterator.'
'A dummy close just to maintain consistency.'
'Set the end of file marker.'
'Check if the end of file has been reached.'
'Close the file handle.'
'Close the file handle on garbage collection.'
'Build ESX host session cookie headers.'
'Write data to the file.'
'Read a chunk of data.'
'Get size of the file to be read.'
'Write to the file.'
'Get the response and close the connection.'
'Read a chunk of data.'
'Get size of the file to be read.'
'Checks the RetrieveProperties response for errors. Certain faults DCNL are sent as part of the SOAP body as property of missingSet. DCNL For example NotAuthenticated fault.'
'Reboots or shuts down the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'Update the current state of the host.'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'Update the current state of the host.'
'Attach disk to VM by reconfiguration.'
'Detach disk from VM by reconfiguration.'
'Discover iSCSI targets.'
'Return volume connector information.'
'Attach volume storage to VM instance.'
'Detach volume storage to VM instance.'
'Sets the obj property which acts as a reference to the object.'
'Sets an attribute value. Not using the __setattr__ directly for we DCNL want to set attributes of the type \'a.b.c\' and using this function DCNL class we set the same.'
'Gets an attribute. Used as an intermediary to get nested DCNL property like \'a.b.c\' value.'
'Called to reconfigure the VM. Actually customizes the property DCNL setting of the Virtual Machine object.'
'Adds a port group to the host system object in the db.'
'Creates a namespace object.'
'Initializes the suds client object, sets the service content DCNL contents and the cookies for the session.'
'Logs in and sets the session object in the db.'
'Logs out and remove the session object ref from the db.'
'Terminates a session.'
'Checks if the session is active.'
'Creates and registers a VM object with the Host System.'
'Reconfigures a VM and sets the properties supplied.'
'Creates/copies a vmdk file object in the datastore.'
'Snapshots a VM. Here we do nothing for faking sake.'
'Deletes .vmdk and -flat.vmdk files corresponding to the VM.'
'Deletes a file from the datastore.'
'Fakes a return.'
'Fakes a task return.'
'Unregisters a VM from the Host System.'
'Searches the datastore for a file.'
'Creates a directory in the datastore.'
'Sets power state for the VM.'
'Retrieves properties based on the type.'
'Adds a port group to the host system.'
'Perform an instance update operation on behalf of a virt driver DCNL :param context: security context DCNL :param instance_uuid: uuid of the instance to be updated DCNL :param updates: dict of attribute=value pairs to change DCNL Returns: orig_instance, new_instance'
'Look up an instance by uuid DCNL :param context: security context DCNL :param instance_uuid: uuid of the instance to be fetched'
'Find all instances on a given host DCNL :param context: security context DCNL :param host: host running instances to be returned'
'Get a list of aggregates to which the specified host belongs DCNL :param context: security context DCNL :param host: the host for which aggregates should be returned DCNL :param key: optionally filter by hosts with the given metadata key'
'Add/update metadata for specified aggregate DCNL :param context: security context DCNL :param aggregate: aggregate on which to update metadata DCNL :param metadata: dict of metadata to add/update DCNL :param set_delete: if True, only add'
'Delete the given metadata key from specified aggregate DCNL :param context: security context DCNL :param aggregate: aggregate from which to delete metadata DCNL :param key: metadata key to delete'
'Get the security group for a specified instance DCNL :param context: security context DCNL :param instance: instance defining the security group we want'
'Get the rules associated with a specified security group DCNL :param context: security context DCNL :param security_group: the security group for which the rules DCNL should be returned'
'Get the provider firewall rules DCNL :param context: security context'
'Get information about the available agent builds for a given DCNL hypervisor, os, and architecture DCNL :param context: security context DCNL :param hypervisor: agent hypervisor type DCNL :param os: agent operating system type DCNL :param architecture: agent architecture'
'Get information about an instance type DCNL :param context: security context DCNL :param instance_type_id: the id of the instance type in question'
'Prepare filters for the instance. DCNL At this point, the instance isn\'t running yet.'
'Defer application of IPTables rules.'
'Turn off deferral of IPTables rules and apply the rules now.'
'Stop filtering instance.'
'Apply instance filter. DCNL Once this method returns, the instance should be firewalled DCNL appropriately. This method should as far as possible be a DCNL no-op. It\'s vastly preferred to get everything set up in DCNL prepare_instance_filter.'
'Refresh security group rules from data store DCNL Gets called when a rule has been added to or removed from DCNL the security group.'
'Refresh security group members from data store DCNL Gets called when an instance gets added to or removed from DCNL the security group.'
'Refresh security group rules from data store DCNL Gets called when an instance gets added to or removed from DCNL the security group the instance is a member of or if the DCNL group gains or looses a rule.'
'Refresh common rules for all hosts/instances from data store. DCNL Gets called when a rule has been added to or removed from DCNL the list of rules (via admin api).'
'Create rules to block spoofing and allow dhcp. DCNL This gets called when spawning an instance, before DCNL :py:meth:`prepare_instance_filter`.'
'Check nova-instance-instance-xxx exists.'
'No-op. Everything is done in prepare_instance_filter.'
'Creates a rule corresponding to each ip that defines a DCNL jump to the corresponding instance - chain for all the traffic DCNL destined to that ip.'
'See :class:`FirewallDriver` docs.'
'Internal, synchronized version of refresh_provider_fw_rules.'
'Remove all rules from the provider chains.'
'Create all rules for the provider IP DROPs.'
'Generate a list of rules from provider for IP4 & IP6.'
'Get the CPU information. DCNL :returns: A dictionary containing the main properties DCNL of the central processor in the hypervisor.'
'Get hypervisor version. DCNL :returns: hypervisor version (ex. 12003)'
'Retrieve resource info. DCNL This method is called when nova-compute launches, and DCNL as part of a periodic task. DCNL :returns: dictionary describing resources'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'Reboots, shuts down or powers up the host.'
'Get information about the VM.'
'Create a new VM and start it.'
'Reboot the specified instance.'
'Pause VM instance.'
'Unpause paused VM instance.'
'Suspend the specified instance.'
'Resume the suspended VM instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Returns a tuple with total visible memory and free physical memory DCNL expressed in kB.'
'Returns a tuple with total size and free space DCNL expressed in bytes.'
'Add target portal, list targets and logins to the target.'
'Logs out storage target through its session id.'
'Create snapshot from a running VM instance.'
'Wrapper on __builin__.open used to simplify unit testing.'
'Return the names of all the instances known to Hyper-V.'
'Creates a VM.'
'Create an IDE drive and attach it to the vm.'
'Create an iscsi controller ready to mount volumes.'
'Attach a volume to a controller.'
'Create a (synthetic) nic and attach it to the vm.'
'Set the desired state of the VM.'
'Poll WMI job state and wait for completion.'
'Clone a WMI object.'
'Adds a new resource to the VM.'
'Updates a VM resource.'
'Removes a VM resource.'
'Attach a volume to the SCSI controller or to the IDE controller if DCNL ebs_root is True'
'Dettach a volume to the SCSI controller.'
'Get iscsi initiator name for this machine.'
'Add target portal, list targets and logins to the target.'
'Logs out storage target through its session id.'
'Executes log out of the session described by its session ID.'
'List VM instances.'
'Get the list of nova instance uuids for VMs found on the DCNL hypervisor.'
'Create VM instance.'
'Confirms a resize, destroying the source VM.'
'Finish reverting a resize, powering back on the instance.'
'Completes a resize, turning on the migrated instance.'
'Create snapshot from a running VM instance.'
'Reboot VM instance.'
'Set the root/admin password on the VM instance.'
'Create a file on the VM instance. The file path and contents DCNL should be base64-encoded.'
'Apply a diff to the instance metadata.'
'Destroy VM instance.'
'Pause VM instance.'
'Unpause paused VM instance.'
'Transfers the VHD of a running instance to another host, then shuts DCNL off the instance copies over the COW disk'
'suspend the specified instance.'
'resume the specified instance.'
'Rescue the specified instance.'
'Unrescue the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Soft delete the specified instance.'
'Restore the specified instance.'
'Poll for rebooting instances.'
'reset networking for specified instance.'
'inject network info for specified instance.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Return data about VM instance.'
'Return data about VM diagnostics.'
'Return bandwidth usage counters for each interface on each DCNL running VM'
'Return snapshot of console.'
'Return link to instance\'s VNC console.'
'Return volume connector information.'
'Attach volume storage to VM instance.'
'Detach volume storage to VM instance.'
'Retrieve resource info. DCNL This method is called when nova-compute launches, and DCNL as part of a periodic task. DCNL :param nodename: ignored in this driver DCNL :returns: dictionary describing resources'
'Check if it is possible to execute live migration. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param block_migration: if true, prepare for block migration DCNL :param disk_over_commit: if true, allow disk over commit'
'Do required cleanup on dest host after check_can_live_migrate calls DCNL :param ctxt: security context DCNL :param disk_over_commit: if true, allow disk over commit'
'Check if it is possible to execute live migration. DCNL This checks if the live migration can succeed, based on the DCNL results from check_can_live_migrate_destination. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param dest_check_data: result of check_can_live_migrate_destination DCNL includes the block_migration flag'
'Used by libvirt for live migration. We rely on xenapi DCNL checks to do this for us.'
'Used by libvirt for live migration. We rely on xenapi DCNL checks to do this for us. May be used in the future to DCNL populate the vdi/vif maps'
'Performs the live migration of the specified instance. DCNL :params ctxt: security context DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params dest: destination host DCNL :params post_method: DCNL post operation method. DCNL expected nova.compute.manager.post_live_migration. DCNL :params recover_method: DCNL recovery method when any exception occurs. DCNL expected nova.compute.manager.recover_live_migration. DCNL :params block_migration: if true, migrate VM disk. DCNL :params migrate_data: implementation specific params'
'Preparation live migration. DCNL :params block_device_info: DCNL It must be the result of _get_instance_volume_bdms() DCNL at compute manager.'
'Post operation of live migration at destination host. DCNL :params ctxt: security context DCNL :params instance_ref: DCNL nova.db.sqlalchemy.models.Instance object DCNL instance object that is migrated. DCNL :params network_info: instance network information DCNL :params : block_migration: if true, post operation of block_migraiton.'
'Removes security groups configured for an instance.'
'Updates security group rules for all instances associated with a DCNL given security group. DCNL Invoked when security group rules are updated.'
'Updates security group rules for all instances associated with a DCNL given security group. DCNL Invoked when instances are added/removed to a security group.'
'Updates security group rules for specified instance. DCNL Invoked when instances are added/removed to a security group DCNL or when a rule is added/removed to a security group.'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'The only valid values for \'action\' on XenServer are \'reboot\' or DCNL \'shutdown\', even though the API also accepts \'startup\'. As this is DCNL not technically possible on XenServer, since the host is the same DCNL physical machine as the hypervisor, if this is requested, we need to DCNL raise an exception.'
'Sets the specified host\'s ability to accept new instances.'
'Returns the result of calling "uptime" on the target host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Add a compute host to an aggregate.'
'Remove a compute host from an aggregate.'
'Undo aggregate operation when pool error raised.'
'Indicate if the driver requires the legacy network_info format.'
'resume guest state when a host is booted.'
'Get information about instance resource usage. DCNL :returns: dict of  nova uuid => dict of usage DCNL info'
'Return a tuple of (major, minor, rev) for the host version and DCNL a string of the product brand'
'Return a string session_id.  Used for vnc consoles.'
'Return exclusive session for scope of with statement.'
'Return the xenapi host on which nova-compute runs on.'
'Call the specified XenAPI method on a background thread.'
'Call host.call_plugin on a background thread.'
'Stubout point. This can be replaced with a mock session.'
'Parse exception details.'
'Retrieve all refs and recs for a Xen record type. DCNL Handles race-conditions where the record may be deleted between DCNL the `get_all` call and the `get_record` call.'
'List VM instances.'
'Get the list of nova instance uuids for VMs found on the DCNL hypervisor.'
'Power on a VM instance.'
'Create VM instance.'
'Create the VM record in Xen, making sure that we do not create DCNL a duplicate name-label.  Also do a rough sanity check on memory DCNL to try to short-circuit a potential failure later.  (The memory DCNL check only accounts for running VMs, so it can miss other builds DCNL that are in progress.)'
'Boot a new instance and configure it.'
'Get xapi OpaqueRef from a db record.'
'Prevent an instance from booting.'
'Allow an instance to boot.'
'Create snapshot from a running VM instance. DCNL :param context: request context DCNL :param instance: instance to be snapshotted DCNL :param image_id: id of image to upload to DCNL Steps involved in a XenServer snapshot: DCNL 1. XAPI-Snapshot: Snapshotting the instance using XenAPI. This DCNL creates: Snapshot (Template) VM, Snapshot VBD, Snapshot VDI, DCNL Snapshot VHD DCNL 2. Wait-for-coalesce: The Snapshot VDI and Instance VDI both point to DCNL a \'base-copy\' VDI.  The base_copy is immutable and may be chained DCNL with other base_copies.  If chained, the base_copies DCNL coalesce together, so, we must wait for this coalescing to occur to DCNL get a stable representation of the data on disk. DCNL 3. Push-to-data-store: Once coalesced, we call a plugin on the DCNL XenServer that will bundle the VHDs together and then push the DCNL bundle. Depending on the configured value of DCNL \'xenapi_image_upload_handler\', image data may be pushed to DCNL Glance or the specified data store.'
'Update instance progress percent to reflect current step number'
'Copies a VHD from one host machine to another, possibly DCNL resizing filesystem before hand. DCNL :param instance: the instance that owns the VHD in question. DCNL :param dest: the destination host machine. DCNL :param instance_type: instance_type to resize to'
'Resize an instances root disk.'
'Check the function name used to resize an instance based DCNL on product_brand and product_version.'
'Reboot VM instance.'
'Set the root/admin password on the VM instance.'
'Write a file to the VM instance.'
'Xenstore only allows the following characters as keys: DCNL ABCDEFGHIJKLMNOPQRSTUVWXYZ DCNL abcdefghijklmnopqrstuvwxyz DCNL 0123456789-/_@ DCNL So convert the others to _ DCNL Also convert / to _, because that is somewhat like a path DCNL separator.'
'Inject instance metadata into xenstore.'
'Apply changes to instance metadata to xenstore.'
'Find and return the root vdi ref for a VM.'
'Destroys all VDIs associated with a VM.'
'Three situations can occur: DCNL 1. We have neither a ramdisk nor a kernel, in which case we are a DCNL RAW image and can omit this step DCNL 2. We have one or the other, in which case, we should flag as an DCNL error DCNL 3. We have both, in which case we safely remove both the kernel DCNL and the ramdisk.'
'Destroy a rescue instance.'
'Destroy VM instance. DCNL This is the method exposed by xenapi_conn.destroy(). The rest of the DCNL destroy_* methods are internal.'
'Destroys VM instance by performing: DCNL 1. A shutdown DCNL 2. Destroying associated VDIs. DCNL 3. Destroying kernel and ramdisk files (if necessary). DCNL 4. Destroying that actual VM record.'
'Pause VM instance.'
'Unpause VM instance.'
'Suspend the specified instance.'
'Resume the specified instance.'
'Rescue the specified instance. DCNL - shutdown the instance VM. DCNL - set \'bootlock\' to prevent the instance from starting in rescue. DCNL - spawn a rescue VM (the vm name-label will be instance-N-rescue).'
'Unrescue the specified instance. DCNL - unplug the instance VM\'s disk from the rescue VM. DCNL - teardown the rescue VM. DCNL - release the bootlock to allow the instance VM to start.'
'Soft delete the specified instance.'
'Restore the specified instance.'
'Power off the specified instance.'
'Power on the specified instance.'
'Cancel the given tasks that are older than the given timeout.'
'Look for expirable rebooting instances. DCNL - issue a "hard" reboot to any instance that has been stuck in a DCNL reboot state for >= the given timeout'
'Return data about VM instance.'
'Return data about VM diagnostics.'
'Return running bandwidth counter for each interface on each DCNL running VM'
'Return snapshot of console.'
'Return connection info for a vnc console.'
'convert a network info vif to injectable instance data.'
'Generate the network info and make calls to place it into the DCNL xenstore and the xenstore param list. DCNL vm_ref can be passed in because it will sometimes be different than DCNL what vm_utils.lookup(session, instance[\'name\']) will find (ex: rescue)'
'Creates vifs for an instance.'
'Set up VIF networking on the host.'
'Calls resetnetwork method in agent.'
'Inject the hostname of the instance into the xenstore.'
'Writes the passed value to the xenstore record for the given VM DCNL at the specified location. A XenAPIPlugin.PluginError will be raised DCNL if any error is encountered in the write process.'
'Deletes the value from the xenstore record for the given VM at DCNL the specified location.  A XenAPIPlugin.PluginError will be DCNL raised if any error is encountered in the delete process.'
'Abstracts out the process of calling a method of a xenapi plugin. DCNL Any errors raised by the plugin will in turn raise a RuntimeError here.'
'Takes a key/value pair and adds it to the xenstore parameter DCNL record for the given vm instance. If the key exists in xenstore, DCNL it is overwritten'
'Takes a single key and removes it from the xenstore parameter DCNL record data for the given VM. DCNL If the key doesn\'t exist, the request is ignored.'
'recreates security group rules for every instance.'
'recreates security group rules for every instance.'
'recreates security group rules for specified instance.'
'Removes filters for each VIF of the specified instance.'
'Check if it is possible to execute live migration. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param block_migration: if true, prepare for block migration DCNL :param disk_over_commit: if true, allow disk over commit'
'Check if it\'s possible to execute live migration on the source side. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param dest_check_data: data returned by the check on the DCNL destination, includes block_migration flag'
'generate a vdi_map for _call_live_migrate_command.'
'unpack xapi specific parameters, and call a live migrate command.'
'Get usage info about each active instance.'
'Requests that the Glance plugin bundle the specified VDIs and DCNL push them into Glance using the specified human-friendly name.'
'Get the role played by the image, based on its type.'
'Get the version of the agent running on the VM instance.'
'Update agent on the VM instance.'
'Set the root/admin password on the VM instance. DCNL This is done via an agent running on the VM. Communication between nova DCNL and the agent is done via writing xenstore records. Since communication DCNL is done over the XenAPI RPC calls, we need to encrypt the password. DCNL We\'re using a simple Diffie-Hellman class instead of a more advanced DCNL library (such as M2Crypto) for compatibility with the agent code.'
'Efficient implementation of (num ** exp) % mod.'
'Ensure that a VLAN bridge exists.'
'Undo aggregate operation when pool error raised.'
'Add a compute host to an aggregate.'
'Remove a compute host from an aggregate.'
'Joins a slave into a XenServer resource pool.'
'Eject a slave from a XenServer resource pool.'
'Set the name label of a XenServer pool.'
'Clear the name label of a XenServer pool.'
'XenServer specific info needed to join the hypervisor pool.'
'Reboots or shuts down the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'Returns the result of calling "uptime" on the target host.'
'Return the current state of the host. If \'refresh\' is DCNL True, run the update first.'
'Since under Xenserver, a compute node runs on a given host, DCNL we can get host status information using xenapi.'
'Generate a list of rules from provider for IP4 & IP6. DCNL Note: We could not use the common code from virt.firewall because DCNL XS doesn\'t accept the \'-m multiport\' option'
'Attach volume storage to VM instance.'
'Detach volume storage to VM instance.'
'Return VBD refs for all Nova/Cinder volumes.'
'Detach any external nova/cinder volumes and purge the SRs.'
'Find any volumes with their connection severed. DCNL Certain VM operations (e.g. `VM.start`, `VM.reboot`, etc.) will not DCNL work when a VBD is present that points to a non-working volume. To work DCNL around this, we scan for non-working volumes and detach them before DCNL retrying a failed operation.'
'Plug VIFs into networks.'
'Unplug VIFs from networks.'
'Attach the disk to the instance at mountpoint using info.'
'Detach the disk attached to the instance.'
'Return bandwidth usage counters for each interface on each DCNL running VM'
'Return usage info for volumes attached to vms on DCNL a given host'
'Updates compute manager resource info on ComputeNode table. DCNL Since we don\'t have a real hypervisor, pretend we have lots of DCNL disk and ram.'
'This method is supported only by libvirt.'
'This method is supported only by libvirt.'
'Removes the named VM, as if it crashed. For testing.'
'Return fake Host Status of ram, disk, network.'
'Reboots, shuts down or powers up the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'Filter a list of hosts based on request_spec.'
'Picks a host that is up at random.'
'Selects a set of random hosts.'
'Create and run an instance or instances.'
'Select a target for resize.'
'Process a capability update from a service node.'
'Return the list of hosts that have a running service for topic.'
'Return the list of hosts that have VM\'s from the group.'
'Must override schedule_prep_resize method for scheduler to work.'
'Must override schedule_run_instance method for scheduler to work.'
'Must override select_hosts method for scheduler to work.'
'Live migration scheduling method. DCNL :param context: DCNL :param instance: instance dict DCNL :param dest: destination host DCNL :param block_migration: if true, block_migration. DCNL :param disk_over_commit: if True, consider real(not virtual) DCNL disk size. DCNL :return: DCNL The host where instance is running currently. DCNL Then scheduler send request that host.'
'Live migration check routine (for src host). DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object'
'Live migration check routine (for destination host). DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param dest: destination host DCNL :param ignore_hosts: hosts that should be avoided as dest host'
'Live migration common check routine. DCNL The following checks are based on DCNL http://wiki.libvirt.org/page/TodoPreMigrationChecks DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param dest: destination host'
'Checks if destination host has enough memory for live migration. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param dest: destination host'
'get compute node\'s information specified by key DCNL :param context: security context DCNL :param host: hostname(must be compute node) DCNL :param key: column name of compute_nodes DCNL :return: value specified by key'
'Update information about a host from its compute_node info.'
'Incrementally update host state from an instance.'
'Since the caller may specify which filters to use we need DCNL to have an authoritative list of what is permissible. This DCNL function checks the filter names against a predefined set DCNL of acceptable filters.'
'Filter hosts and return only ones passing all filters.'
'Weigh the hosts.'
'Update the per-service capabilities based on this notification.'
'Returns a list of HostStates that represents all the hosts DCNL the HostManager knows about. Also, each of the consumable resources DCNL in HostState are pre-populated and adjusted based on data in the db.'
'After we start up and can receive messages via RPC, tell all DCNL compute nodes to send us their capabilities.'
'Process a capability update from a service node.'
'Tries to call schedule_run_instance on the driver. DCNL Sets instance vm_state to ERROR on exceptions'
'Tries to call schedule_prep_resize on the driver. DCNL Sets instance vm_state to ACTIVE on NoHostFound DCNL Sets vm_state to ERROR on other exceptions'
'changes VM state and notifies.'
'Shows the physical/usage resource given by hosts. DCNL :param context: security context DCNL :param host: hostname DCNL :returns: DCNL example format is below:: DCNL {\'resource\':D, \'usage\':{proj_id1:D, proj_id2:D}} DCNL D: {\'vcpus\': 3, \'memory_mb\': 2048, \'local_gb\': 2048, DCNL \'vcpus_used\': 12, \'memory_mb_used\': 10240, DCNL \'local_gb_used\': 64}'
'Returns host(s) best suited for this request_spec and DCNL filter_properties'
'Update information about a host from its compute_node info.'
'This method is called from nova.compute.api to provision DCNL an instance.  We first create a build plan (a list of WeightedHosts) DCNL and then provision. DCNL Returns a list of the instances created.'
'Select a target for resize. DCNL Selects a target host for the instance, post-resize, and casts DCNL the prep_resize operation to it.'
'Selects a filtered set of hosts.'
'Create the requested resource in this Zone.'
'Add additional information to the filter properties after a node has DCNL been selected by the scheduling process.'
'Add a retry entry for the selected compute node. In the event that DCNL the request gets re-scheduled, this entry will signal that the given DCNL node has already been tried.'
'Fetch options dictionary. Broken out for testing.'
'Stuff things into filter_properties.  Can be overridden in a DCNL subclass to add more data.'
'If the request contained an exception from a previous compute DCNL build/resize operation, log it to aid debugging'
'Populate filter properties with history of retries for this DCNL request. If maximum retries is exceeded, raise NoValidHost.'
'Returns a list of hosts that meet the required specs, DCNL ordered by their fitness.'
'Checks if destination host has enough memory for live migration. DCNL :param context: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance object DCNL :param dest: destination host'
'Get file handle. Broken out for testing.'
'Get the last modified datetime. Broken out for testing.'
'Decode the JSON file. Broken out for testing.'
'Get current UTC. Broken out for testing.'
'Check the json file for changes and load it if needed.'
'Override the weight multiplier.'
'Higher weights win.  We want spreading to be the default.'
'Check if host passes specified image properties. DCNL Returns True for compute nodes that satisfy image properties DCNL contained in the request_spec.'
'Use information about current vm and task states collected from DCNL compute node statistics to decide whether to filter.'
'Return True if host has sufficient CPU cores.'
'Return True if the object passes the filter, otherwise False.'
'Return True if the HostState passes the filter, otherwise False. DCNL Override this in a subclass.'
'Only return hosts with sufficient available RAM.'
'Returns True for only active compute nodes.'
'Check that the capabilities provided by the compute service DCNL satisfy the extra specs associated with the instance type'
'Return a list of hosts that can create instance_type.'
'Filter based on disk usage.'
'Return a list of hosts that can create instance_type DCNL Check that the extra specs associated with the instance type match DCNL the metadata provided by aggregates.  If not present return False.'
'Dynamically limits hosts to one instance type DCNL Return False if host has any instance types other then the requested DCNL type. Return True if all instance types match or if host is empty.'
'Connect to a host on a given (SSL) port. DCNL If ca_file is pointing somewhere, use it to check Server Certificate. DCNL Redefined/copied and extended from httplib.py:1105 (Python 2.6.x). DCNL This is needed to pass cert_reqs=ssl.CERT_REQUIRED as parameter to DCNL ssl.wrap_socket(), which forces SSL to check server certificate DCNL against our client certificate.'
'Attests compute nodes through OAT service. DCNL :param hosts: hosts list to be attested DCNL :returns: dictionary for trust level and validate time'
'Check host\'s trust level.'
'Skip nodes that have already been attempted.'
'Returns True if the specified operator can successfully DCNL compare the first item in the args with all the rest. Will DCNL return False if only one item is in the list.'
'First term is == all the other terms.'
'First term is < all the other terms.'
'First term is > all the other terms.'
'First term is in set of remaining terms.'
'First term is <= all the other terms.'
'First term is >= all the other terms.'
'Flip each of the arguments.'
'True if any arg is True.'
'True if all args are True.'
'Strings prefixed with $ are capability lookups in the DCNL form \'$variable\' where \'variable\' is an attribute in the DCNL HostState class.  If $variable is a dictionary, you may DCNL use: $variable.dictkey'
'Recursively parse the query structure.'
'Return a list of hosts that can fulfill the requirements DCNL specified in the query.'
'If a host is in an aggregate that has the metadata key DCNL "filter_tenant_id" it can only create instances from that tenant(s). DCNL A host can be in different aggregates. DCNL If a host doesn\'t belong to an aggregate with the metadata key DCNL "filter_tenant_id" it can create instances from all tenants.'
'How weighted this weigher should be.  Normally this would DCNL be overriden in a subclass based on a config value.'
'Override in a subclass to specify a weight for a specific DCNL object.'
'Weigh multiple objects.  Override in a subclass if you need DCNL need access to all objects in order to manipulate weights.'
'Return a sorted (highest score first) list of WeighedObjects.'
':param read_deleted: \'no\' indicates deleted records are hidden, \'yes\' DCNL indicates deleted records are visible, \'only\' indicates that DCNL *only* deleted records are visible. DCNL :param overwrite: Set to False to ensure that the greenthread local DCNL copy of the index is not overwritten. DCNL :param kwargs: Extra arguments that might be present, but we ignore DCNL because they possibly came in from older rpc messages.'
'Return a version of this context with admin flag set.'
'Transform the exception for the volume but keep its traceback DCNL intact.'
'Indicate that some resources are needed for an upcoming compute DCNL instance build operation. DCNL This should be called before the compute node is about to perform DCNL an instance build operation that will consume additional resources. DCNL :param context: security context DCNL :param instance_ref: instance to reserve resources for DCNL :param limits: Dict of oversubscription limits for memory, disk, DCNL and CPUs. DCNL :returns: A Claim ticket representing the reserved resources.  It can DCNL be used to revert the resource usage if an error occurs DCNL during the instance build.'
'Indicate that resources are needed for a resize operation to this DCNL compute host. DCNL :param context: security context DCNL :param instance_ref: instance to reserve resources for DCNL :param instance_type: new instance_type being resized to DCNL :param limits: Dict of oversubscription limits for memory, disk, DCNL and CPUs. DCNL :returns: A Claim ticket representing the reserved resources.  This DCNL should be turned into finalize  a resource claim or free DCNL resources after the compute operation is finished.'
'Create a migration record for the upcoming resize.  This should DCNL be done while the COMPUTE_RESOURCES_SEMAPHORE is held so the resource DCNL claim will not be lost if the audit process starts.'
'Tag the instance as belonging to this host.  This should be done DCNL while the COMPUTE_RESOURCES_SEMPAHORE is held so the resource claim DCNL will not be lost if the audit process starts.'
'Remove usage from the given instance.'
'Remove usage for an incoming migration.'
'Update the resource usage and stats after a change in an DCNL instance'
'Override in-memory calculations of compute node resource usage based DCNL on data audited from the hypervisor layer. DCNL Add in resource claims in progress to account for operations that have DCNL declared a need for resources, but not necessarily retrieved them from DCNL the hypervisor layer yet.'
'Create or update the compute node DB record.'
'Create the compute node in the DB.'
'Log the hypervisor\'s view of free memory in and free disk. DCNL This is just a snapshot of resource usage recorded by the DCNL virt driver.'
'Report final calculate of free memory and free disk including DCNL instance calculations and in-progress resource claims.  These DCNL values will be exposed via the compute node table to the scheduler.'
'Persist the compute node updates to the DB.'
'Cleanup usage for a confirmed resize.'
'Cleanup usage for a reverted resize.'
'Update usage for a single migration.  The record may DCNL represent an incoming or outbound migration.'
'Update usage for a single instance.'
'Calculate resource usage based on instance utilization.  This is DCNL different than the hypervisor\'s view as it will account for all DCNL instances assigned to the local compute host, even if they are not DCNL currently powered on.'
'Given the set of instances and migrations already account for DCNL by resource tracker, sanity check the hypervisor to determine DCNL if there are any "orphaned" instances left hanging around. DCNL Orphans could be consuming memory and should be accounted for in DCNL usage calculations to guard against potential out of memory DCNL errors.'
'Include orphaned instances in usage.'
'Get the instance type from sys metadata if it\'s stashed.  If not, DCNL fall back to fetching it via the conductor API. DCNL See bug 1164110'
'Load configuration options and connect to the hypervisor.'
'Update an instance in the database using kwargs as value.'
'Return a list of instance records that match the instances found DCNL on the hypervisor.'
'Destroys evacuated instances. DCNL While nova-compute was down, the instances running on it could be DCNL evacuated to another host. Check that the instances reported DCNL by the driver are still associated with this host.  If they are DCNL not, destroy them.'
'Initialize this instance during service init.'
'Initialization for a standalone compute service.'
'After the service is initialized, but before we fully bring DCNL the service up by listening on RPC queues, make sure to update DCNL our available resources.'
'Retrieve the power state for the given instance.'
'Return backdoor port for eventlet_backdoor.'
'Retrieves the console host for a project on this host. DCNL Currently this is just set in the flags for each compute host.'
'Tell the virtualization driver to refresh security group rules. DCNL Passes straight through to the virtualization driver.'
'Tell the virtualization driver to refresh security group members. DCNL Passes straight through to the virtualization driver.'
'Tell the virtualization driver to refresh security rules for DCNL an instance. DCNL Passes straight through to the virtualization driver. DCNL Synchronise the call beacuse we may still be in the middle of DCNL creating the instance.'
'This call passes straight through to the virtualization driver.'
'Get a list of dictionaries of network data of an instance.'
'Converts the model nw_info object to legacy style.'
'setup volumes for block device mapping.'
'Base64 decode the list of files to inject.'
'Launch a new instance with specified options.'
'Try to re-schedule the build or re-raise the original build error to DCNL error out the instance.'
'Attempt to re-schedule a compute operation.'
'Ensure that instances are not stuck in build.'
'Ensure an instance with the same name is not already present.'
'Ensure image is smaller than the maximum size allowed by the DCNL instance_type. DCNL The image stored in Glance is potentially compressed, so we use two DCNL checks to ensure that the size isn\'t exceeded: DCNL 1) This one - checks compressed size, this a quick check to DCNL eliminate any images which are obviously too large DCNL 2) Check uncompressed size in nova.virt.xenapi.vm_utils. This DCNL is a slower check since it requires uncompressing the entire DCNL image, but is accurate because it reflects the image\'s DCNL actual size.'
'Save the host and launched_on fields and log appropriately.'
'Allocate networks for an instance and return the network info.'
'Set up the block device for an instance with error logging.'
'Spawn an instance with error logging and update its power state.'
'Return only bdms that have a volume_id.'
'Shutdown an instance on this host.'
'Delete an instance on this host.  Commit or rollback quotas DCNL as necessary.'
'Terminate an instance on this host.'
'Stopping an instance on this host.'
'Starting an instance on this host.'
'Soft delete an instance on this host.'
'Restore a soft-deleted instance on this host.'
'Power off an instance on this host.'
'Power on an instance on this host.'
'Destroy and re-make this instance. DCNL A \'rebuild\' effectively purges all existing data from the system and DCNL remakes the VM with given \'metadata\' and \'personalities\'. DCNL :param context: `nova.RequestContext` object DCNL :param instance: Instance dict DCNL :param orig_image_ref: Original image_ref before rebuild DCNL :param image_ref: New image_ref for rebuild DCNL :param injected_files: Files to inject DCNL :param new_pass: password to set on rebuilt instance DCNL :param orig_sys_metadata: instance system metadata from pre-rebuild DCNL :param bdms: block-device-mappings to use for rebuild DCNL :param recreate: True if instance should be recreated with same disk DCNL :param on_shared_storage: True if instance files on shared storage'
'Handle cases where the virt-layer had to detach non-working volumes DCNL in order to complete an operation.'
'Reboot an instance on this host.'
'Snapshot an instance on this host. DCNL :param context: security context DCNL :param instance: an Instance dict DCNL :param image_id: glance.db.sqlalchemy.models.Image.Id DCNL :param image_type: snapshot | backup DCNL :param backup_type: daily | weekly DCNL :param rotation: int representing how many backups to keep around; DCNL None if rotation shouldn\'t be used (as in the case of snapshots)'
'Delete excess backups associated to an instance. DCNL Instances are allowed a fixed number of backups (the rotation number); DCNL this method deletes the oldest backups that exceed the rotation DCNL threshold. DCNL :param context: security context DCNL :param instance: Instance dict DCNL :param backup_type: daily | weekly DCNL :param rotation: int representing how many backups to keep around; DCNL None if rotation shouldn\'t be used (as in the case of snapshots)'
'Set the root/admin password for an instance on this host. DCNL This is generally only called by API password resets after an DCNL image has been built.'
'Write a file to the specified path in an instance on this host.'
'Determine what image should be used to boot the rescue VM.'
'Rescue an instance on this host. DCNL :param rescue_password: password to set on rescue instance'
'Rescue an instance on this host.'
'Update the metadata published to the instance.'
'Clean up "old" and "new" instance_type information stored in DCNL instance\'s system_metadata. Optionally update the "current" DCNL instance_type to the saved old one first. DCNL Returns the updated system_metadata as a dict, as well as the DCNL post-cleanup current instance type.'
'Destroys the source instance.'
'Destroys the new instance on the destination machine. DCNL Reverts the model changes, and powers on the old instance on the DCNL source machine.'
'After some operations, the IQN or CHAP, for example, may have DCNL changed. This call updates the DB with the latest connection info.'
'Finishes the second half of reverting a resize. DCNL Power back on the source instance and revert the resized attributes DCNL in the database.'
'Initiates the process of moving a running instance to another host. DCNL Possibly changes the RAM and disk size in the process.'
'Try to re-schedule the resize or re-raise the original error to DCNL error out the instance.'
'Starts the migration of a running instance to another host.'
'Completes the migration process. DCNL Sets up the newly transferred disk and turns on the instance at its DCNL new host machine.'
'Calls network_api to add new fixed_ip to instance DCNL then injects the new network info and resets instance networking.'
'Calls network_api to remove existing fixed_ip from instance DCNL by injecting the altered network info and resetting DCNL instance networking.'
'Pause an instance on this host.'
'Unpause a paused instance on this host.'
'Reboots, shuts down or powers up the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Sets the specified host\'s ability to accept new instances.'
'Returns the result of calling "uptime" on the target host.'
'Retrieve diagnostics for an instance on this host.'
'Suspend the given instance.'
'Resume the given suspended instance.'
'Reset networking on the given instance.'
'Inject network info for the given instance.'
'Inject network info, but don\'t return the info.'
'Send the console output for the given instance.'
'Return connection information for a vnc console.'
'Return connection information for a spice console.'
'Attach a volume to an instance at boot time. So actual attach DCNL is done by instance creation'
'Attach a volume to an instance.'
'Do the actual driver detach using block device mapping.'
'Detach a volume from an instance.'
'Remove a volume connection using the volume api.'
'Use hotplug to add an network adapter to an instance.'
'Detach an network adapter from an instance.'
'Check if it is possible to execute live migration. DCNL This runs checks on the destination host, and then calls DCNL back to the source host to check the results. DCNL :param context: security context DCNL :param instance: dict of instance data DCNL :param block_migration: if true, prepare for block migration DCNL :param disk_over_commit: if true, allow disk over commit DCNL Returns a mapping of values required in case of block migration DCNL and None otherwise.'
'Check if it is possible to execute live migration. DCNL This checks if the live migration can succeed, based on the DCNL results from check_can_live_migrate_destination. DCNL :param context: security context DCNL :param instance: dict of instance data DCNL :param dest_check_data: result of check_can_live_migrate_destination DCNL Returns a dict values required for live migration without shared DCNL storage.'
'Preparations for live migration at dest host. DCNL :param context: security context DCNL :param instance: dict of instance data DCNL :param block_migration: if true, prepare for block migration DCNL :param migrate_data : if not None, it is a dict which holds data DCNL required for live migration without shared storage.'
'Executing live migration. DCNL :param context: security context DCNL :param instance: instance dict DCNL :param dest: destination host DCNL :param block_migration: if true, prepare for block migration DCNL :param migrate_data: implementation specific params'
'Post operations for live migration. DCNL This method is called from live_migration DCNL and mainly updating database record. DCNL :param ctxt: security context DCNL :param instance_ref: nova.db.sqlalchemy.models.Instance DCNL :param dest: destination host DCNL :param block_migration: if true, prepare for block migration DCNL :param migrate_data: if not None, it is a dict which has data DCNL required for live migration without shared storage'
'Post operations for live migration . DCNL :param context: security context DCNL :param instance: Instance dict DCNL :param block_migration: if true, prepare for block migration'
'Recovers Instance/volume state from migrating -> running. DCNL :param context: security context DCNL :param instance: nova.db.sqlalchemy.models.Instance DCNL :param dest: DCNL This method is called from live migration src host. DCNL This param specifies destination host. DCNL :param block_migration: if true, prepare for block migration DCNL :param migrate_data: DCNL if not none, contains implementation specific data.'
'Cleaning up image directory that is created pre_live_migration. DCNL :param context: security context DCNL :param instance: an Instance dict sent over rpc'
'Called periodically.  On every call, try to update the DCNL info_cache\'s network information for another instance by DCNL calling to the network manager. DCNL This is implemented by keeping a cache of uuids of instances DCNL that live on this host.  On each call, we pop one off of a DCNL list, pull the DB record, and try the call to the network API. DCNL If anything errors, we don\'t care.  It\'s possible the instance DCNL has been deleted, etc.'
'Return all block device mappings on a compute host.'
'Updates the volume usage cache table with a list of stats.'
'Queries vol usage cache table and sends a vol usage notification.'
'Align power states between the database and the hypervisor. DCNL To sync power state data we make a DB call to get the number of DCNL virtual machines known by the hypervisor and if the number matches the DCNL number of virtual machines known by the database, we proceed in a lazy DCNL loop, one database record at a time, checking if the hypervisor has the DCNL same power state as is in the database.'
'Align instance power state between the database and hypervisor. DCNL If the instance is not found on the hypervisor, but is in the database, DCNL then a stop() API will be called on the instance.'
'Reclaim instances that are queued for deletion.'
'See driver.get_available_resource() DCNL Periodic process that keeps that the compute host\'s understanding of DCNL resource availability and usage in sync with the underlying hypervisor. DCNL :param context: security context'
'Cleanup any instances which are erroneously still running after DCNL having been deleted. DCNL Valid actions to take are: DCNL 1. noop - do nothing DCNL 2. log - log which instances are erroneously running DCNL 3. reap - shutdown and cleanup any erroneously running instances DCNL The use-case for this cleanup task is: for various reasons, it may be DCNL possible for the database to show an instance as deleted but for that DCNL instance to still be running on a host machine (see bug DCNL https://bugs.launchpad.net/nova/+bug/911366). DCNL This cleanup task is a cross-hypervisor utility for finding these DCNL zombied instances and either logging the discrepancy (likely what you DCNL should do in production), or automatically reaping the instances (more DCNL appropriate for dev environments).'
'Returns a list of instances nova thinks is deleted, DCNL but the hypervisor thinks is still running.'
'Notify hypervisor of change (for hypervisor pools).'
'Removes a host from a physical hypervisor pool.'
'Run a single pass of the image cache manager.'
'Update an instance in the database using kwargs as value.'
'Enforce quota limits on injected files. DCNL Raises a QuotaError if any limit is exceeded.'
'Enforce quota limits on number of instances created.'
'Enforce quota limits on metadata properties.'
'Check if the security group requested exists and belongs to DCNL the project.'
'Check if the networks requested belongs to the project DCNL and the fixed IP address for each network provided is within DCNL same the network block'
'Choose kernel and ramdisk appropriate for the instance. DCNL The kernel and ramdisk can be chosen in one of three ways: DCNL 1. Passed in with create-instance request. DCNL 2. Inherited from image. DCNL 3. Forced to None by using `null_kernel` FLAG.'
'Verify all the input parameters regardless of the provisioning DCNL strategy being performed.'
'Verify all the input parameters regardless of the provisioning DCNL strategy being performed and schedule the instance(s) for DCNL creation.'
'tell vm driver to create ephemeral/swap device at boot time by DCNL updating BlockDeviceMapping'
'tell vm driver to attach volume at boot time by updating DCNL BlockDeviceMapping'
'Populate instance block device mapping information.'
'Populate instance shutdown_terminate information.'
'Populate instance display_name and hostname.'
'Build the beginning of a new instance.'
'Create an entry in the DB for this new instance, DCNL including any related table updates (such as security group, DCNL etc). DCNL This is called by the scheduler after a location for the DCNL instance has been determined.'
'Check policies for create().'
'Provision instances, sending instance information to the DCNL scheduler.  The scheduler will determine where the instance(s) DCNL go and will handle creating the DB entries. DCNL Returns a tuple of (instances, reservation_id)'
'Called when a rule is added/removed from a provider firewall.'
'Updates the state of a compute instance. DCNL For example to \'active\' or \'error\'. DCNL Also sets \'task_state\' to None. DCNL Used by admin_actions api DCNL :param context: The security context DCNL :param instance: The instance to update DCNL :param new_state: A member of vm_state, eg. \'active\''
'Updates the instance in the datastore. DCNL :param context: The security context DCNL :param instance: The instance to update DCNL :param kwargs: All additional keyword args are treated DCNL as data fields of the instance to be DCNL updated DCNL :returns: None'
'Terminate an instance.'
'Terminate an instance.'
'Restore a previously deleted (but not reclaimed) instance.'
'Force delete a previously deleted (but not reclaimed) instance.'
'Stop an instance.'
'Start an instance.'
'Get instances that were continuously active over a window.'
'Get an instance type by instance type id.'
'Get a single instance with the given instance_id.'
'Get all instances filtered by one of the given parameters. DCNL If there is no filter and the context is an admin, it will retrieve DCNL all instances in the system. DCNL Deleted instances will be returned by default, unless there is a DCNL search option that says otherwise. DCNL The results will be returned sorted in the order specified by the DCNL \'sort_dir\' parameter using the key specified in the \'sort_key\' DCNL parameter.'
'Backup the given instance DCNL :param instance: nova.db.sqlalchemy.models.Instance DCNL :param name: name of the backup or snapshot DCNL name = backup_type  # daily backups are called \'daily\' DCNL :param rotation: int representing how many backups to keep around; DCNL None if rotation shouldn\'t be used (as in the case of snapshots) DCNL :param extra_properties: dict of extra image properties to include'
'Snapshot the given instance. DCNL :param instance: nova.db.sqlalchemy.models.Instance DCNL :param name: name of the backup or snapshot DCNL :param extra_properties: dict of extra image properties to include DCNL :returns: A dict containing image metadata'
'Create new image entry in the image service.  This new image DCNL will be reserved for the compute manager to upload a snapshot DCNL or backup. DCNL :param context: security context DCNL :param instance: nova.db.sqlalchemy.models.Instance DCNL :param name: string for name of the snapshot DCNL :param image_type: snapshot | backup DCNL :param backup_type: daily | weekly DCNL :param rotation: int representing how many backups to keep around; DCNL None if rotation shouldn\'t be used (as in the case of snapshots) DCNL :param extra_properties: dict of extra image properties to include'
'Snapshot the given volume-backed instance. DCNL :param instance: nova.db.sqlalchemy.models.Instance DCNL :param image_meta: metadata for the new image DCNL :param name: name of the backup or snapshot DCNL :param extra_properties: dict of extra image properties to include DCNL :returns: the new image metadata'
'Reboot the given instance.'
'Throws an ImageNotFound exception if image_href does not exist.'
'Rebuild the given instance with the provided attributes.'
'Reverts a resize, deleting the \'new\' instance in the process.'
'Confirms a migration/resize and deletes the \'old\' instance.'
'Calculate any quota adjustment required at a particular point DCNL in the resize cycle. DCNL :param context: the request context DCNL :param new_instance_type: the target instance type DCNL :param old_instance_type: the original instance type DCNL :param sense: the sense of the adjustment, 1 indicates a DCNL forward adjustment, whereas -1 indicates a DCNL reversal of a prior adjustment DCNL :param compare: the direction of the comparison, 1 indicates DCNL we\'re checking for positive deltas, whereas DCNL -1 indicates negative deltas'
'Calculate deltas required to adjust quota for an instance upsize.'
'Calculate deltas required to reverse a prior upsizing DCNL quota adjustment.'
'Calculate deltas required to adjust quota for an instance downsize.'
'Resize (ie, migrate) a running instance. DCNL If flavor_id is None, the process is considered a migration, keeping DCNL the original flavor_id. If flavor_id is not None, the instance should DCNL be migrated to a new host and resized to the new flavor_id.'
'Add fixed_ip from specified network to given instance.'
'Remove fixed_ip from specified network to given instance.'
'Pause the given instance.'
'Unpause the given instance.'
'Retrieve diagnostics for the given instance.'
'Retrieve backdoor port.'
'Suspend the given instance.'
'Resume the given instance.'
'Rescue the given instance.'
'Unrescue the given instance.'
'Set the root/admin password for the given instance.'
'Write a file to the given instance.'
'Get a url to an instance Console.'
'Used in a child cell to get console info.'
'Get a url to an instance Console.'
'Used in a child cell to get console info.'
'Get console output for an instance.'
'Lock the given instance.'
'Unlock the given instance.'
'Return the boolean state of given instance\'s lock.'
'Reset networking on the instance.'
'Inject network info for the instance.'
'Attach an existing volume to an existing instance.'
'Detach a volume from an instance.'
'Use hotplug to add an network adapter to an instance.'
'Detach an network adapter from an instance.'
'Get all metadata associated with an instance.'
'Delete the given metadata item from an instance.'
'Updates or creates instance metadata. DCNL If delete is True, metadata items that are not specified in the DCNL `metadata` argument will be deleted.'
'Get all faults for a list of instance uuids.'
'Get all bdm tables for specified instance.'
'Migrate a server lively to a new host.'
'Running evacuate to target host. DCNL Checking vm compute host state, if the host not in expected_state, DCNL raising an exception.'
'Raise HostNotFound if compute host doesn\'t exist.'
'Sets the specified host\'s ability to accept new instances.'
'Returns the result of calling "uptime" on the target host.'
'Reboots, shuts down or powers up the host.'
'Start/Stop host maintenance window. On start, it triggers DCNL guest VMs evacuation.'
'Returns a list of services, optionally filtering the results. DCNL If specified, \'filters\' should be a dictionary containing services DCNL attributes and matching values.  Ie, to get a list of services for DCNL the \'compute\' topic, use filters={\'topic\': \'compute\'}.'
'Get service entry for the given compute hostname.'
'Return all instances on the given host.'
'Return the task logs within a given range, optionally DCNL filtering by host and/or state.'
'Return compute node entry for particular integer ID.'
'Creates the model for the aggregate.'
'Get an aggregate by id.'
'Get all the aggregates.'
'Update the properties of an aggregate.'
'Updates the aggregate metadata. DCNL If a key is set to None, it gets removed from the aggregate metadata.'
'Deletes the aggregate.'
'Adds the host to an aggregate.'
'Removes host from the aggregate.'
'Builds a dictionary with aggregate props, metadata and hosts.'
'Import a key pair using an existing public key.'
'Create a new key pair.'
'Delete a keypair by name.'
'List key pairs.'
'Get a keypair by name.'
'Validate given security group property. DCNL :param value:          the value to validate, as a string or unicode DCNL :param property:       the property, either \'name\' or \'description\' DCNL :param allowed:        the range of characters allowed'
'Ensure that a context has a security group. DCNL Creates a security group for the security context if it does not DCNL already exist. DCNL :param context: the security context'
'Check if the security group is already associated DCNL with the instance. If Yes, return True.'
'Add security group to the instance.'
'Remove the security group associated with the instance.'
'Add security group rule(s) to security group. DCNL Note: the Nova security group API doesn\'t support adding muliple DCNL security group rules at once but the EC2 one does. Therefore, DCNL this function is writen to support both.'
'Indicates whether the specified rule values are already DCNL defined in the default security group rules.'
'Called when a rule is added to or removed from a security_group.'
'Called when a security group gains a new or loses a member. DCNL Sends an update request to each compute node for each instance for DCNL which this is relevant.'
'Calculate an I/O based load by counting I/O heavy operations.'
'Calculate current load of the compute host based on DCNL task states.'
'Update stats after an instance is changed.'
'Save the useful bits of instance state for tracking purposes.'
'Compute operation requiring claimed resources has failed or DCNL been aborted.'
'Test if this claim can be satisfied given available resources and DCNL optional oversubscription limits DCNL This should be called before the compute node actually consumes the DCNL resources required to execute the claim. DCNL :param resources: available local compute node resources DCNL :returns: Return true if resources are available to claim.'
'Test if the given type of resource needed for a claim can be safely DCNL allocated.'
'Compute operation requiring claimed resources has failed or DCNL been aborted.'
'Is the target cell in a read-only mode?'
'Override compute API\'s checking of this.  It\'ll happen in DCNL child cell'
'Override compute API\'s checking of this.  It\'ll happen in DCNL child cell'
'Backup the given instance.'
'Snapshot the given instance.'
'We can use the base functionality, but I left this here just DCNL for completeness.'
'Updates the state of a compute instance. DCNL For example to \'active\' or \'error\'. DCNL Also sets \'task_state\' to None. DCNL Used by admin_actions api DCNL :param context: The security context DCNL :param instance: The instance to update DCNL :param new_state: A member of vm_state to change DCNL the instance\'s state to, DCNL eg. \'active\''
'Update an instance. DCNL :param pass_on_state_change: if true, the state change will be passed DCNL on to child cells'
'Terminate an instance.'
'Restore a previously deleted (but not reclaimed) instance.'
'Force delete a previously deleted (but not reclaimed) instance.'
'Stop an instance.'
'Start an instance.'
'Reboot the given instance.'
'Rebuild the given instance with the provided attributes.'
'Evacuate the given instance with the provided attributes.'
'Reverts a resize, deleting the \'new\' instance in the process.'
'Confirms a migration/resize and deletes the \'old\' instance.'
'Resize (ie, migrate) a running instance. DCNL If flavor_id is None, the process is considered a migration, keeping DCNL the original flavor_id. If flavor_id is not None, the instance should DCNL be migrated to a new host and resized to the new flavor_id.'
'Add fixed_ip from specified network to given instance.'
'Remove fixed_ip from specified network to given instance.'
'Pause the given instance.'
'Unpause the given instance.'
'Retrieve diagnostics for the given instance.'
'Suspend the given instance.'
'Resume the given instance.'
'Rescue the given instance.'
'Unrescue the given instance.'
'Set the root/admin password for the given instance.'
'Write a file to the given instance.'
'Get a url to a VNC Console.'
'Get a url to a SPICE Console.'
'Get console output for an an instance.'
'Lock the given instance.'
'Unlock the given instance.'
'Reset networking on the instance.'
'Inject network info for the instance.'
'Attach an existing volume to an existing instance.'
'Detach a volume from an instance.'
'Makes calls to network_api to associate_floating_ip. DCNL :param address: is a string floating ip address'
'Delete the given metadata item from an instance.'
'Cannot check this in API cell.  This will be checked in the DCNL target child cell.'
'Get all instances by host.  Host might have a cell prepended DCNL to it, so we\'ll need to strip it out.  We don\'t need to proxy DCNL this call to cells, as we have instance information here in DCNL the API cell.'
'Return the task logs within a given range from cells, DCNL optionally filtering by the host and/or state.  For cells, the DCNL host should be a path like \'path!to!cell@host\'.  If no @host DCNL is given, only task logs from a particular cell will be returned.'
'Get a compute node from a particular cell by its integer ID. DCNL compute_id should be in the format of \'path!to!cell@ID\'.'
'Add aggregate host. DCNL :param ctxt: request context DCNL :param aggregate_id: DCNL :param host_param: This value is placed in the message to be the \'host\' DCNL parameter for the remote method. DCNL :param host: This is the host to send the message to.'
'Set host maintenance mode DCNL :param ctxt: request context DCNL :param host_param: This value is placed in the message to be the \'host\' DCNL parameter for the remote method. DCNL :param mode: DCNL :param host: This is the host to send the message to.'
'Remove aggregate host. DCNL :param ctxt: request context DCNL :param aggregate_id: DCNL :param host_param: This value is placed in the message to be the \'host\' DCNL parameter for the remote method. DCNL :param host: This is the host to send the message to.'
'Add our hop to the routing_path.'
'Check if we\'re at the max hop count.  If we are and do_raise is DCNL True, raise CellMaxHopCountReached.  If we are at the max and DCNL do_raise is False... return True, else False.'
'Its been determined that we should process this message in this DCNL cell.  Go through the MessageRunner to call the appropriate DCNL method for this message.  Catch the response and/or exception and DCNL encode it within a Response instance.  Return it so the caller DCNL can potentially return it to another cell... or return it to DCNL a caller waiting in this cell.'
'Shortcut to creating a response queue in the MessageRunner.'
'Shortcut to deleting a response queue in the MessageRunner.'
'Wait for response(s) to be put into the eventlet queue.  Since DCNL each queue entry actually contains a list of JSON-ified responses, DCNL combine them all into a single list to return. DCNL Destroy the eventlet queue when done.'
'Send list of responses to this message.  Responses passed here DCNL are JSON-ified.  Targeted messages have a single response while DCNL Broadcast messages may have multiple responses. DCNL If this cell was the source of the message, these responses will DCNL be returned from self.process(). DCNL Otherwise, we will route the response to the source of the DCNL request.  If \'neighbor_only\' is True, the response will be sent DCNL to the neighbor cell, not the original requester.  Broadcast DCNL messages get aggregated at each hop, so neighbor_only will be DCNL True for those messages.'
'Send a response to this message.  If the source of the DCNL request was ourselves, just return the response.  It\'ll be DCNL passed back to the caller of self.process().  See DocString for DCNL _send_json_responses() as it handles most of the real work for DCNL this method. DCNL \'response\' is an instance of Response class.'
'Take an exception as returned from sys.exc_info(), encode DCNL it in a Response, and send it.'
'Convert a message to a dictionary.  Only used internally.'
'Convert a message into JSON for sending to a sibling cell.'
'Did this cell create this message?'
'Process a message.  Deal with it locally and/or forward it to a DCNL sibling cell. DCNL Override in a subclass.'
'Return the cell name for the next hop.  If the next hop is DCNL the current cell, return None.'
'Process a targeted message.  This is called for all cells DCNL that touch this message.  If the local cell is the one that DCNL created this message, we reply directly with a Response instance. DCNL If the local cell is not the target, an eventlet queue is created DCNL and we wait for the response to show up via another thread DCNL receiving the Response back. DCNL Responses to targeted messages are routed directly back to the DCNL source.  No eventlet queues are created in intermediate hops. DCNL All exceptions for processing the message across the whole DCNL routing path are caught and encoded within the Response and DCNL returned to the caller.'
'Set the next hops and return the number of hops.  The next DCNL hops may include ourself.'
'Send a message to multiple cells.'
'Responses to broadcast messages always need to go to the DCNL neighbor cell from which we received this message.  That DCNL cell aggregates the responses and makes sure to forward them DCNL to the correct source.'
'Process a broadcast message.  This is called for all cells DCNL that touch this message. DCNL The message is sent to all cells in the certain direction and DCNL the creator of this message has the option of whether or not DCNL to process it locally as well. DCNL If responses from all cells are required, each hop creates an DCNL eventlet queue and waits for responses from its immediate DCNL neighbor cells.  All responses are then aggregated into a DCNL single list and are returned to the neighbor cell until the DCNL source is reached. DCNL When the source is reached, a list of Response instances are DCNL returned to the caller. DCNL All exceptions for processing the message across the whole DCNL routing path are caught and encoded within the Response and DCNL returned to the caller.  It is possible to get a mix of DCNL successful responses and failure responses.  The caller is DCNL responsible for dealing with this.'
'Process a response.  If the target is the local cell, process DCNL the response here.  Otherwise, forward it to where it needs to DCNL go.'
'Get task logs from the DB.  The message could have DCNL directly targeted this cell, or it could have been a broadcast DCNL message. DCNL If \'host\' is not None, filter by host. DCNL If \'state\' is not None, filter by state.'
'Parent cell told us to schedule new instance creation.'
'Run a method in the compute api class.'
'A child cell told us about their capabilities.'
'A child cell told us about their capacity.'
'A parent cell has told us to send our capabilities, so let\'s DCNL do so.'
'A parent cell has told us to send our capacity, so let\'s DCNL do so.'
'Return the service entry for a compute host.'
'Proxy RPC to the given compute topic.'
'Get compute node by ID.'
'Validate console port with child cell compute node.'
'Are we the API level?'
'Update an instance in the DB if we\'re a top level cell.'
'Destroy an instance from the DB if we\'re a top level cell.'
'Call compute API delete() or soft_delete() in every cell. DCNL This is used when the API cell doesn\'t know what cell an instance DCNL belongs to but the instance was requested to be deleted or DCNL soft-deleted.  So, we\'ll run it everywhere.'
'Destroy an instance from the DB if we\'re a top level cell.'
'Update Bandwidth usage in the DB if we\'re a top level cell.'
'Return compute nodes in this cell.'
'Return compute node stats from this cell.'
'Delete consoleauth tokens for an instance in API cells.'
'Message processing will call this when its determined that DCNL the message should be processed within this cell.  Find the DCNL method to call based on the message type, and call it.  The DCNL caller is responsible for catching exceptions and returning DCNL results to cells, if needed.'
'Put a response into a response queue.  This is called when DCNL a _ResponseMessage is processed in the cell that initiated a DCNL \'call\' to another cell.'
'Set up an eventlet queue to use to wait for replies. DCNL Replies come back from the target cell as a _ResponseMessage DCNL being sent back to the source.'
'Stop tracking the response queue either because we\'re DCNL done receiving responses, or we\'ve timed out.'
'Create a ResponseMessage.  This is used internally within DCNL the messaging module.'
'Turns a message in JSON format into an appropriate Message DCNL instance.  This is called when cells receive a message from DCNL another cell.'
'Tell child cells to send us capabilities.  This is typically DCNL called on startup of the nova-cells service.'
'Tell child cells to send us capacities.  This is typically DCNL called on startup of the nova-cells service.'
'Send our capabilities to parent cells.'
'Send our capacities to parent cells.'
'Called by the scheduler to tell a child cell to schedule DCNL a new instance for build.'
'Call a compute API method in a specific cell.'
'Update an instance at the top level cell.'
'Destroy an instance at the top level cell.'
'This is used by API cell when it didn\'t know what cell DCNL an instance was in, but the instance was requested to be DCNL deleted or soft_deleted.  So, we\'ll broadcast this everywhere.'
'Create an instance fault at the top level cell.'
'Update bandwidth usage at top level cell.'
'Force a sync of all instances, potentially by project_id, DCNL and potentially since a certain date/time.'
'Get task logs from the DB from all cells or a particular DCNL cell. DCNL If \'cell_name\' is None or \'\', get responses from all cells. DCNL If \'host\' is not None, filter by host. DCNL If \'state\' is not None, filter by state. DCNL Return a list of Response objects.'
'Return list of compute nodes in all child cells.'
'Return compute node stats from all child cells.'
'Return compute node entry from a specific cell by ID.'
'Delete consoleauth tokens for an instance in API cells.'
'Validate console port with child cell compute node.'
'Start any consumers the driver may need.'
'Stop consuming messages.'
'Send a message to a cell.'
'Attempt to schedule instance(s).  If we have no cells DCNL to try, raise exception.NoCellsAvailable'
'Pick a cell where we should create a new instance.'
'Have the driver start its consumers for inter-cell communication. DCNL Also ask our child cells for their capacities and capabilities so DCNL we get them more quickly than just waiting for the next periodic DCNL update.  Receiving the updates from the children will cause us to DCNL update our parents.  If we don\'t have any children, just update DCNL our parents immediately.'
'Update our parent cells with our capabilities and capacity DCNL if we\'re at the bottom of the tree.'
'Periodic task to send updates for a number of instances to DCNL parent cells. DCNL On every run of the periodic task, we will attempt to sync DCNL \'CONF.cells.instance_update_num_instances\' number of instances. DCNL When we get the list of instances, we shuffle them so that multiple DCNL nova-cells services aren\'t attempting to sync the same instances DCNL in lockstep. DCNL If CONF.cells.instance_update_at_threshold is set, only attempt DCNL to sync instances that have been updated recently.  The CONF DCNL setting defines the maximum number of seconds old the updated_at DCNL can be.  Ie, a threshold of 3600 means to only update instances DCNL that have modified in the last hour.'
'Broadcast an instance_update or instance_destroy message up to DCNL parent cells.'
'Pick a cell (possibly ourselves) to build new instance(s) DCNL and forward the request accordingly.'
'Return cell information for our neighbor cells.'
'Call a compute API method in a specific cell.'
'Update an instance at the top level cell.'
'Destroy an instance at the top level cell.'
'This is used by API cell when it didn\'t know what cell DCNL an instance was in, but the instance was requested to be DCNL deleted or soft_deleted.  So, we\'ll broadcast this everywhere.'
'Create an instance fault at the top level cell.'
'Update bandwidth usage at top level cell.'
'Force a sync of all instances, potentially by project_id, DCNL and potentially since a certain date/time.'
'Return services in this cell and in all child cells.'
'Return a service entry for a compute host in a certain cell.'
'Proxy an RPC message as-is to a manager.'
'Get task logs from the DB from all cells or a particular DCNL cell. DCNL If \'host\' is not None, host will be of the format \'cell!name@host\', DCNL with \'@host\' being optional.  The query will be directed to the DCNL appropriate cell and return all task logs, or task logs matching DCNL the host if specified. DCNL \'state\' also may be None.  If it\'s not, filter by the state as well.'
'Get a compute node by ID in a specific cell.'
'Return list of compute nodes in all cells.'
'Return compute node stats totals from all cells.'
'Delete consoleauth tokens for an instance in API cells.'
'Validate console port with child cell compute node.'
'Start an RPC consumer.'
'Start RPC consumers. DCNL Start up 2 separate consumers for handling inter-cell DCNL communication via RPC.  Both handle the same types of DCNL messages, but requests/replies are separated to solve DCNL potential deadlocks. (If we used the same queue for both, DCNL it\'s possible to exhaust the RPC thread pool while we wait DCNL for replies.. such that we\'d never consume a reply.)'
'Stop RPC consumers. DCNL NOTE: Currently there\'s no hooks when stopping services DCNL to have managers cleanup, so this is not currently called.'
'Use the IntercellRPCAPI to send a message to a cell.'
'Turn the DB information for a cell into the parameters DCNL needed for the RPC call.'
'Send a message to another cell by JSON-ifying the message and DCNL making an RPC cast to \'process_message\'.  If the message says to DCNL fanout, do it.  The topic that is used will be DCNL \'CONF.rpc_driver_queue_base.<message_type>\'.'
'Init the Intercell RPC Dispatcher.'
'We received a message from another cell.  Use the MessageRunner DCNL to turn this from JSON back into an instance of the correct DCNL Message class.  Then process it!'
'Update cell credentials from db.'
'Update cell capabilities for a cell.'
'Update capacity information for a cell.'
'Return subset of cell information for OS API use.'
'Send a message to a cell.  Just forward this to the driver, DCNL passing ourselves and the message as arguments.'
'Make our cell info map match the db.'
'Is it time to sync the DB against our memory cache?'
'Update our capacity in the self.my_cell_state CellState. DCNL This will add/update 2 entries in our CellState.capacities, DCNL \'ram_free\' and \'disk_free\'. DCNL The values of these are both dictionaries with the following DCNL format: DCNL {\'total_mb\': <total_memory_free_in_the_cell>, DCNL \'units_by_mb: <units_dictionary>} DCNL <units_dictionary> contains the number of units that we can DCNL build for every instance_type that we have.  This number is DCNL computed by looking at room available on every compute_node. DCNL Take the following instance_types as an example: DCNL [{\'memory_mb\': 1024, \'root_gb\': 10, \'ephemeral_gb\': 100}, DCNL {\'memory_mb\': 2048, \'root_gb\': 20, \'ephemeral_gb\': 200}] DCNL capacities[\'ram_free\'][\'units_by_mb\'] would contain the following: DCNL {\'1024\': <number_of_instances_that_will_fit>, DCNL \'2048\': <number_of_instances_that_will_fit>} DCNL capacities[\'disk_free\'][\'units_by_mb\'] would contain the following: DCNL {\'122880\': <number_of_instances_that_will_fit>, DCNL \'225280\': <number_of_instances_that_will_fit>} DCNL Units are in MB, so 122880 = (10 + 100) * 1024. DCNL NOTE(comstud): Perhaps we should only report a single number DCNL available per instance_type.'
'Update status for all cells if it\'s time.  Most calls to DCNL this are from the check_for_update() decorator that checks DCNL the time, but it checks outside of a lock.  The duplicate DCNL check here is to prevent multiple threads from pulling the DCNL information simultaneously.'
'Return cell information for all neighbor cells.'
'Return information for my (this) cell.'
'Return list of child cell_infos.'
'Return list of parent cell_infos.'
'Update capabilities for a cell.'
'Update capacities for a cell.'
'Make a cast to a compute API method in a certain cell.'
'Make a call to a compute API method in a certain cell.'
'Schedule a new instance for creation.'
'Update instance at API level.'
'Destroy instance at API level.'
'Delete instance everywhere.  delete_type may be \'soft\' DCNL or \'hard\'.  This is generally only used to resolve races DCNL when API cell doesn\'t know to what cell an instance belongs.'
'Create an instance fault at the top.'
'Broadcast upwards that bw_usage was updated.'
'Broadcast up that an instance\'s info_cache has changed.'
'Get information about our neighbor cells from the manager.'
'Ask all cells to sync instance data.'
'Ask all cells for their list of services.'
'Get the service entry for a host in a particular cell.  The DCNL cell name should be encoded within the host_name.'
'Proxy RPC to a compute manager.  The host in the topic DCNL should be encoded with the target cell name.'
'Get the task logs from the DB in child cells.'
'Get a compute node by ID in a specific cell.'
'Return list of compute nodes in all cells, optionally DCNL filtering by hypervisor host.'
'Return compute node stats from all cells.'
'Delete consoleauth tokens for an instance in API cells.'
'Validate console port with child cell compute node.'
'Holds a reference to the "parent" network manager, used DCNL to take advantage of various FlatManager methods to avoid DCNL code duplication.'
'Returns information about the IPv4 and IPv6 subnets DCNL associated with a Quantum Network UUID.'
'Returns the list of routes for the IP block.'
'Returns a list of IPv4 address strings associated with DCNL the specified virtual interface, based on the fixed_ips table.'
'Returns a list containing a single IPv6 address strings DCNL associated with the specified virtual interface.'
'Adds (allocates) a floating ip to a project from a pool.'
'Removes (deallocates) a floating ip with address from a project.'
'Associates a floating ip with a fixed ip. DCNL ensures floating ip is allocated to the project in context'
'Disassociates a floating ip from fixed ip it is associated with.'
'Allocates all network structures for an instance. DCNL TODO(someone): document the rest of these parameters. DCNL :param macs: None or a set of MAC addresses that the instance DCNL should use. macs is supplied by the hypervisor driver (contrast DCNL with requested_networks which is user supplied). DCNL NB: macs is ignored by nova-network. DCNL :returns: network info as from get_instance_nw_info() below'
'Deallocates all network structures related to instance.'
'Adds a fixed ip to instance from specified network.'
'Removes a fixed ip from instance from specified network.'
'Force adds another network to a project.'
'Associate or disassociate host or project to network.'
'Returns all network info related to an instance.'
'Returns all network info related to an instance.'
'validate the networks passed at the time of creating DCNL the server'
'Returns a list of dicts in the form of DCNL {\'instance_uuid\': uuid, \'ip\': ip} that matched the ip_filter'
'Returns a list of available dns domains. DCNL These can be used to create DNS entries for floating ips.'
'Create specified DNS entry for address.'
'Create specified DNS entry for address.'
'Delete the specified dns entry.'
'Delete the specified dns domain.'
'Get entries for address and domain.'
'Get entries for name and domain.'
'Create a private DNS domain with nova availability zone.'
'Create a public DNS domain with optional nova project.'
'Setup or teardown the network structures on hosts related to DCNL instance'
'Start to migrate the network of an instance.'
'Finish migrating the network of an instance.'
'Adds a named chain to the table. DCNL The chain name is wrapped to be unique for the component creating DCNL it, so different components of Nova can safely create identically DCNL named chains without interfering with one another. DCNL At the moment, its wrapped name is <binary name>-<chain name>, DCNL so if nova-compute creates a chain named \'OUTPUT\', it\'ll actually DCNL end up named \'nova-compute-OUTPUT\'.'
'Remove named chain. DCNL This removal "cascades". All rule in the chain are removed, as are DCNL all rules in other chains that jump to it. DCNL If the chain is not found, this is merely logged.'
'Add a rule to the table. DCNL This is just like what you\'d feed to iptables, just without DCNL the \'-A <chain name>\' bit at the start. DCNL However, if you need to jump to one of your wrapped chains, DCNL prepend its name with a \'$\' which will ensure the wrapping DCNL is applied correctly.'
'Remove a rule from a chain. DCNL Note: The rule must be exactly identical to the one that was added. DCNL You cannot switch arguments around like you can with the iptables DCNL CLI tool.'
'Remove all rules matching regex.'
'Remove all rules from a chain.'
'Apply the current in-memory set of iptables rules. DCNL This will blow away any rules left over from previous runs of the DCNL same component of Nova, and replace them with our current set of DCNL rules. This happens atomically, thanks to iptables-restore.'
'Create Linux device, return device name.'
'Destroy Linux device, return device name.'
'Get device name.'
'Create a vlan and bridge unless they already exist.'
'Delete a bridge and vlan.'
'Create a vlan unless it already exists.'
'Delete a vlan.'
'Create a bridge unless it already exists. DCNL :param interface: the interface to create the bridge on. DCNL :param net_attrs: dictionary with  attributes used to create bridge. DCNL :param gateway: whether or not the bridge is a gateway. DCNL :param filtering: whether or not to create filters on the bridge. DCNL If net_attrs is set, it will add the net_attrs[\'gateway\'] to the bridge DCNL using net_attrs[\'broadcast\'] and net_attrs[\'cidr\'].  It will also add DCNL the ip_v6 address specified in net_attrs[\'cidr_v6\'] if use_ipv6 is set. DCNL The code will attempt to move any ips that already exist on the DCNL interface onto the bridge and reset the default gateway if necessary.'
'Delete a bridge.'
'Configures floating ips owned by host.'
'Handles allocating the floating IP resources for an instance. DCNL calls super class allocate_for_instance() as well DCNL rpc.called by network_api'
'Handles deallocating floating IP resources for an instance. DCNL calls super class deallocate_for_instance() as well. DCNL rpc.called by network_api'
'Raises if floating ip does not belong to project.'
'Gets a floating ip from the pool.'
'Returns a floating ip to the pool.'
'Associates a floating ip with a fixed ip. DCNL Makes sure everything makes sense then calls _associate_floating_ip, DCNL rpc\'ing to correct host if i\'m not it. DCNL Access to the floating_address is verified but access to the DCNL fixed_address is not verified. This assumes that that the calling DCNL side has already verified that the fixed_address is legal by DCNL checking access to the instance.'
'Performs db and driver calls to associate floating ip & fixed ip.'
'Disassociates a floating ip from its fixed ip. DCNL Makes sure everything makes sense then calls _disassociate_floating_ip, DCNL rpc\'ing to correct host if i\'m not it.'
'Performs db and driver calls to disassociate floating ip.'
'Returns a floating IP as a dict.'
'Returns list of floating pools.'
'Returns list of floating ip pools.'
'Returns a floating IP as a dict.'
'Returns the floating IPs allocated to a project.'
'Returns the floating IPs associated with a fixed_address.'
'Calls allocate_fixed_ip once for each network.'
'Sits in between _allocate_fixed_ips and allocate_fixed_ip to DCNL perform network lookup on the far side of rpc.'
'Call the superclass deallocate_fixed_ip if i\'m the correct host DCNL otherwise call to the correct host'
'Get the proper dhcp address to listen on.'
'Broker the request to the driver to fetch the dhcp leases.'
'Do any initialization that needs to be run if this is a DCNL standalone service.'
'Safely sets the host of the network.'
'Determine & return which networks an instance should connect to.'
'Handles allocating the various network resources for an instance. DCNL rpc.called by network_api'
'Handles deallocating various network resources for an instance. DCNL rpc.called by network_api DCNL kwargs can contain fixed_ips to circumvent another db lookup'
'Creates network info list for instance. DCNL called by allocate_for_instance and network_api DCNL context needs to be elevated DCNL :returns: network info list [(network,info),(network,info)...] DCNL where network = dict containing pertinent data from a network db object DCNL and info = dict containing pertinent networking data'
'Builds a NetworkInfo object containing all network information DCNL for an instance'
'Returns the dict representing necessary and meta network fields.'
'Returns the 1 or 2 possible subnets for a nova network.'
'Generates mac addresses and creates vif rows in db for them.'
'Adds a fixed ip to an instance from specified network.'
'Return backdoor port for eventlet_backdoor.'
'Removes a fixed ip from an instance from specified network.'
'Gets a fixed ip from the pool.'
'Returns a fixed ip to the pool.'
'Called by dhcp-bridge when ip is leased.'
'Called by dhcp-bridge when ip is released.'
'Create networks based on parameters.'
'Number of reserved ips at the bottom of the range.'
'Number of reserved ips at the top of the range.'
'Create all fixed ips for network.'
'Calls allocate_fixed_ip once for each network.'
'calls setup/teardown on network hosts for an instance.'
'Sets up network on this host.'
'Sets up network on this host.'
'check if the networks exists and host DCNL is set to each network.'
'Returns the vifs associated with an instance.'
'Returns the instance id a floating ip\'s fixed ip is allocated to.'
'Return a fixed ip.'
'Returns the vifs record for the mac_address.'
'Update local DNS entries of all networks on this host.'
'Called when fixed IP is allocated or deallocated.'
'Calls allocate_fixed_ip once for each network.'
'Returns a fixed ip to the pool.'
'Setup Network on this host.'
'Tear down network on this host.'
'Returns a floating IP as a dict.'
'Returns list of floating pools.'
'Returns list of floating ip pools.'
'Returns a floating IP as a dict.'
'Returns the floating IPs allocated to a project.'
'Returns the floating IPs associated with a fixed_address.'
'Gets a floating ip from the pool.'
'Returns a floating ip to the pool.'
'Associates a floating ip with a fixed ip. DCNL Makes sure everything makes sense then calls _associate_floating_ip, DCNL rpc\'ing to correct host if i\'m not it.'
'Disassociates a floating ip from its fixed ip. DCNL Makes sure everything makes sense then calls _disassociate_floating_ip, DCNL rpc\'ing to correct host if i\'m not it.'
'Called when fixed IP is allocated or deallocated.'
'Do any initialization that needs to be run if this is a DCNL standalone service.'
'Sets up network on this host.'
'Returns the dict representing necessary and meta network fields.'
'Do any initialization that needs to be run if this is a DCNL standalone service.'
'Gets a fixed ip from the pool.'
'Force adds another network to a project.'
'Associate or disassociate host or project to network.'
'Determine which networks an instance should connect to.'
'Create networks based on parameters.'
'Sets up network on this host.'
'Returns the dict representing necessary and meta network fields.'
'Number of reserved ips at the bottom of the range.'
'Number of reserved ips at the top of the range.'
'Set up basic L3 networking functionality.'
'Enable rules for a specific network.'
'Set up a gateway on this network.'
'Remove an existing gateway on this network.'
':returns: True/False (whether the driver is initialized).'
'Add a floating IP bound to the fixed IP with an optional DCNL l3_interface_id.  Some drivers won\'t care about the DCNL l3_interface_id so just pass None in that case. Network DCNL is also an optional parameter.'
'Return a network list available for the tenant. DCNL The list contains networks owned by the tenant and public networks. DCNL If net_ids specified, it searches networks with requested IDs only.'
'Allocate network resources for the instance. DCNL TODO(someone): document the rest of these parameters. DCNL :param macs: None or a set of MAC addresses that the instance DCNL should use. macs is supplied by the hypervisor driver (contrast DCNL with requested_networks which is user supplied). DCNL NB: QuantumV2 currently assigns hypervisor supplied MAC addresses DCNL to arbitrary networks, which requires openflow switches to DCNL function correctly if more than one network is being used with DCNL the bare metal hypervisor (which is the only one known to limit DCNL MAC addresses).'
'Deallocate all network resources related to the instance.'
'Add a fixed ip to the instance from specified network.'
'Remove a fixed ip from the instance.'
'Validate that the tenant can use the requested networks.'
'Retrieve instance uuids associated with the given ip address. DCNL :returns: A list of dicts containing the uuids keyed by \'instance_uuid\' DCNL e.g. [{\'instance_uuid\': uuid}, ...]'
'Return a list of dicts in the form of DCNL [{\'instance_uuid\': uuid}] that matched the ip filter.'
'Associate a floating ip with a fixed ip.'
'Returns the instance id a floating ip\'s fixed ip is allocated to.'
'Add a floating ip to a project from a pool.'
'Get floatingip from floating ip address.'
'Get floatingips from fixed ip and port.'
'Remove a floating ip with the given address from a project.'
'Disassociate a floating ip from the instance.'
'Start to migrate the network of an instance.'
'Finish migrating the network of an instance.'
'Force add a network to the project.'
'Return the subnets for a given port.'
'Return a list of available dns domains. DCNL These can be used to create DNS entries for floating ips.'
'Create specified DNS entry for address.'
'Create specified DNS entry for address.'
'Delete the specified dns entry.'
'Delete the specified dns domain.'
'Get entries for address and domain.'
'Get entries for name and domain.'
'Create a private DNS domain with nova availability zone.'
'Create a private DNS domain with optional nova project.'
'calls get(key, default) on self[\'meta\'].'
'Convience function to get cidr as a netaddr object.'
'Returns the list of all IPs DCNL The return value looks like this flat structure:: DCNL {\'network_label\': \'my_network\', DCNL \'network_id\': \'n8v29837fn234782f08fjxk3ofhb84\', DCNL \'ips\': [{\'address\': \'123.123.123.123\', DCNL \'version\': 4, DCNL \'type: \'fixed\', DCNL \'meta\': {...}}, DCNL {\'address\': \'124.124.124.124\', DCNL \'version\': 4, DCNL \'type\': \'floating\', DCNL \'meta\': {...}}, DCNL {\'address\': \'fe80::4\', DCNL \'version\': 6, DCNL \'type\': \'fixed\', DCNL \'meta\': {...}}]'
'Returns all fixed_ips without floating_ips attached.'
'Returns all floating_ips.'
'Return the legacy network_info representation of self'
'Returns list of security group rules owned by tenant.'
'This function deletes a security group.'
'Add security group rule(s) to security group. DCNL Note: the Nova security group API doesn\'t support adding muliple DCNL security group rules at once but the EC2 one does. Therefore, DCNL this function is writen to support both. Multiple rules are DCNL installed to a security group in quantum using bulk support.'
'Returns a dict(instance_id, [security_groups]) to allow obtaining DCNL all of the instances and their security groups in one shot.'
'Returns the security groups that are associated with an instance. DCNL If detailed is True then it also returns the full details of the DCNL security groups associated with an instance.'
'Add security group to the instance.'
'Remove the security group associated with the instance.'
'Indicates whether the specified rule is already DCNL defined in the given security group.'
'Called when a rule is added to or removed from a security_group.'
'Called when a security group gains a new or loses a member. DCNL Sends an update request to each compute node for each instance for DCNL which this is relevant.'
'Called when populating the database for an instances DCNL security groups.'
'Adds (allocates) a floating ip to a project from a pool.'
'Removes (deallocates) a floating ip with address from a project.'
'Associates a floating ip with a fixed ip. DCNL Ensures floating ip is allocated to the project in context. DCNL Does not verify ownership of the fixed ip. Caller is assumed to have DCNL checked that the instance is properly owned.'
'Disassociates a floating ip from fixed ip it is associated with.'
'Allocates all network structures for an instance. DCNL TODO(someone): document the rest of these parameters. DCNL :param macs: None or a set of MAC addresses that the instance DCNL should use. macs is supplied by the hypervisor driver (contrast DCNL with requested_networks which is user supplied). DCNL :returns: network info as from get_instance_nw_info() below'
'Deallocates all network structures related to instance.'
'Adds a fixed ip to instance from specified network.'
'Removes a fixed ip from instance from specified network.'
'Force adds another network to a project.'
'Associate or disassociate host or project to network.'
'Returns all network info related to an instance.'
'Returns all network info related to an instance.'
'validate the networks passed at the time of creating DCNL the server'
'Returns a list of dicts in the form of DCNL {\'instance_uuid\': uuid, \'ip\': ip} that matched the ip_filter'
'Returns a list of available dns domains. DCNL These can be used to create DNS entries for floating ips.'
'Create specified DNS entry for address.'
'Create specified DNS entry for address.'
'Delete the specified dns entry.'
'Delete the specified dns domain.'
'Get entries for address and domain.'
'Get entries for name and domain.'
'Create a private DNS domain with nova availability zone.'
'Create a public DNS domain with optional nova project.'
'Setup or teardown the network structures on hosts related to DCNL instance'
'Start to migrate the network of an instance.'
'Finish migrating the network of an instance.'
'ldap_object is an instance of ldap.LDAPObject. DCNL It should already be initialized and bound before DCNL getting passed in here.'
'Create a new domain entry, and return an object that wraps it.'
'Delete the domain that this entry refers to.'
'Called when a security group is created DCNL :param context: the security context. DCNL :param group: the new group added. group is a dictionary that contains DCNL the following: user_id, project_id, name, description).'
'Called when a security group is deleted DCNL :param context: the security context. DCNL :param security_group_id: the security group identifier.'
'Called when a rule is added to a security_group. DCNL :param context: the security context. DCNL :param rule_ids: a list of rule ids that have been affected.'
'Called when a rule is removed from a security_group. DCNL :param context: the security context. DCNL :param rule_ids: a list of rule ids that have been affected.'
'Called when a security group gains a new member. DCNL :param context: the security context. DCNL :param instance: the instance to be associated. DCNL :param group_name: the name of the security group to be associated.'
'Called when a security group loses a member. DCNL :param context: the security context. DCNL :param instance: the instance to be associated. DCNL :param group_name: the name of the security group to be associated.'
'Called when a security group gains or loses a member. DCNL :param context: the security context. DCNL :param group_ids: a list of security group identifiers.'
'Called when a rule is added to a security_group. DCNL :param context: the security context. DCNL :param group: the new group added. group is a dictionary that contains DCNL the following: user_id, project_id, name, description).'
'Called when a rule is added to a security_group. DCNL :param context: the security context. DCNL :param security_group_id: the security group identifier.'
'Called when a rule is added to a security_group. DCNL :param context: the security context. DCNL :param rule_ids: a list of rule ids that have been affected.'
'Called when a rule is removed from a security_group. DCNL :param context: the security context. DCNL :param rule_ids: a list of rule ids that have been affected.'
'Called when a security group gains a new member. DCNL :param context: the security context. DCNL :param instance: the instance to be associated. DCNL :param group_name: the name of the security group to be associated.'
'Called when a security group loses a member. DCNL :param context: the security context. DCNL :param instance: the instance to be associated. DCNL :param group_name: the name of the security group to be associated.'
'Called when a security group gains or loses a member. DCNL :param context: the security context. DCNL :param group_ids: a list of security group identifiers.'
'Proxy tcp connection from source to dest.'
'Execute hypervisor-specific vnc auth handshaking (if needed).'
'Spawn bi-directional vnc proxy.'
'A class method that returns True if the current platform supports DCNL coloring terminal output using this method. Returns False otherwise.'
'Write the given text to the stream in the given color. DCNL @param text: Text to be written to the stream. DCNL @param color: A string label for a color. e.g. \'red\', \'white\'.'
'Overrides normal addError to add support for DCNL errorClasses. If the exception is a registered class, the DCNL error will be added to the list for that class, not errors.'
'Attempt to ping the specified IP, and give up after 1 second.'
'Wait for instance to be running.'
'Wait for instance to be deleted.'
'Wait for ip to be pingable.'
'Wait for ip to be sshable.'
'Returns a boto ec2 connection for the current environment.'
'Splits a cloud controller endpoint url.'
'Retrieve all the instances associated with your account. DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :rtype: list DCNL :return: A list of  :class:`boto.ec2.instance.Reservation`'
'Runs an image on EC2. DCNL :type image_id: string DCNL :param image_id: The ID of the image to run DCNL :type min_count: int DCNL :param min_count: The minimum number of instances to launch DCNL :type max_count: int DCNL :param max_count: The maximum number of instances to launch DCNL :type key_name: string DCNL :param key_name: The name of the key pair with which to DCNL launch instances DCNL :type security_groups: list of strings DCNL :param security_groups: The names of the security groups with DCNL which to associate instances DCNL :type user_data: string DCNL :param user_data: The user data passed to the launched instances DCNL :type instance_type: string DCNL :param instance_type: The type of instance to run DCNL (m1.small, m1.large, m1.xlarge) DCNL :type placement: string DCNL :param placement: The availability zone in which to launch DCNL the instances DCNL :type kernel_id: string DCNL :param kernel_id: The ID of the kernel with which to DCNL launch the instances DCNL :type ramdisk_id: string DCNL :param ramdisk_id: The ID of the RAM disk with which to DCNL launch the instances DCNL :type monitoring_enabled: bool DCNL :param monitoring_enabled: Enable CloudWatch monitoring DCNL on the instance. DCNL :type subnet_id: string DCNL :param subnet_id: The subnet ID within which to launch DCNL the instances for VPC. DCNL :type block_device_map: DCNL :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_map: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated DCNL with the Image. DCNL :rtype: Reservation DCNL :return: The :class:`boto.ec2.instance.ReservationV6` DCNL associated with the request for machines'
'Called after Websockets server startup (i.e. after daemonize)'
'Called after a new WebSocket connection has been established.'
'Parses the path, extracts a token, and looks for a valid DCNL target for that token in the configuration file(s). Sets DCNL target_host and target_port if successful'
'Proxy client WebSocket to normal target socket.'
'Resolve a host (and optional port) to an IPv4 or IPv6 DCNL address. Create a socket. Bind to it if listen is set, DCNL otherwise connect to it. Return the socket.'
'Encode a HyBi style WebSocket frame. DCNL Optional opcode: DCNL 0x0 - continuation DCNL 0x1 - text frame (base64 encode buf) DCNL 0x2 - binary frame (use raw buf) DCNL 0x8 - connection close DCNL 0x9 - ping DCNL 0xA - pong'
'Decode HyBi style WebSocket packets. DCNL Returns: DCNL {\'fin\'          : 0_or_1, DCNL \'opcode\'       : number, DCNL \'masked\'       : boolean, DCNL \'hlen\'         : header_bytes_number, DCNL \'length\'       : payload_bytes_number, DCNL \'payload\'      : decoded_buffer, DCNL \'left\'         : bytes_left_number, DCNL \'close_code\'   : number, DCNL \'close_reason\' : string}'
'Generate hash value for WebSockets hixie-76.'
'Show traffic flow in verbose mode.'
'Output message with handler_id prefix.'
'Same as msg() but only if verbose.'
'Encode and send WebSocket frames. Any frames already DCNL queued will be sent first. If buf is not set then only queued DCNL frames will be sent. Returns the number of pending frames that DCNL could not be fully sent. If returned pending frames is greater DCNL than 0, then the caller should call again when the socket is DCNL ready.'
'Receive and decode WebSocket frames. DCNL Returns: DCNL (bufs_list, closed_string)'
'Send a WebSocket orderly close frame.'
'do_handshake does the following: DCNL - Peek at the first few bytes from the socket. DCNL - If the connection is Flash policy request then answer it, DCNL close the socket and return. DCNL - If the connection is an HTTPS/SSL/TLS connection then SSL DCNL wrap the socket. DCNL - Read from the (possibly wrapped) socket. DCNL - If we have received a HTTP GET request and the webserver DCNL functionality is enabled, answer it, close the socket and DCNL return. DCNL - Assume we have a WebSockets connection, parse the client DCNL handshake data. DCNL - Send a WebSockets handshake server response. DCNL - Return the socket for this WebSocket client.'
'Called after WebSockets startup'
'Run periodically while waiting for connections.'
'Do something with a WebSockets client connection.'
'Do something with a WebSockets client connection.'
'Daemonize if requested. Listen for for connections. Run DCNL do_handshake() method for each connection. If the connection DCNL is a WebSockets client then call new_client() method (which must DCNL be overridden) for each new client connection.'
'Called after Websockets server startup (i.e. after daemonize)'
'Called after a new WebSocket connection has been established.'
'Parses the path, extracts a token, and looks for a valid DCNL target for that token in the configuration file(s). Sets DCNL target_host and target_port if successful'
'Proxy client WebSocket to normal target socket.'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
'A class method that returns True if the current platform supports DCNL coloring terminal output using this method. Returns False otherwise.'
'Write the given text to the stream in the given color. DCNL @param text: Text to be written to the stream. DCNL @param color: A string label for a color. e.g. \'red\', \'white\'.'
'Overrides normal addError to add support for errorClasses. DCNL If the exception is a registered class, the error will be added DCNL to the list for that class, not errors.'
'Notify the agent that is hosting the router'
'Notify changed routers to hosting l3 agents. DCNL Adjust routers according to l3 agents\' role and DCNL related dhcp agents. DCNL Notify dhcp agent to get right subnet\'s gateway ips.'
'Notify all the agents that are hosting the routers'
'Fanout the deleted router to all L3 agents'
'Notify the agent on host'
'Notify all the agents that are hosting the network'
'Fanout the payload to all dhcp agents'
'The __subclasshook__ method is a class method DCNL that will be called everytime a class is tested DCNL using issubclass(klass, PluginInterface). DCNL In that case, it will check that every method DCNL marked with the abstractmethod decorator is DCNL provided by the plugin class.'
'The name of the extension. DCNL e.g. \'Fox In Socks\''
'The alias for the extension. DCNL e.g. \'FOXNSOX\''
'Friendly description for the extension. DCNL e.g. \'The Fox In Socks Extension\''
'The XML namespace for the extension. DCNL e.g. \'http://www.fox.in.socks/api/ext/pie/v1.0\''
'The timestamp when the extension was last updated. DCNL e.g. \'2011-01-22T13:25:27-06:00\''
'List of extensions.ResourceExtension extension objects. DCNL Resources define new nouns, and are accessible through URLs.'
'List of extensions.ActionExtension extension objects. DCNL Actions are verbs callable from the API.'
'List of extensions.RequestException extension objects. DCNL Request extensions are used to handle custom request data.'
'retrieve extended resources or attributes for core resources. DCNL Extended attributes are implemented by a core plugin similarly DCNL to the attributes defined in the core, and can appear in DCNL request and response messages. Their names are scoped with the DCNL extension\'s prefix. The core API version is passed to this DCNL function, which must return a DCNL map[<resource_name>][<attribute_name>][<attribute_property>] DCNL specifying the extended resource attribute properties required DCNL by that API version. DCNL Extension can add resources and their attr definitions too. DCNL The returned map can be integrated into RESOURCE_ATTRIBUTE_MAP.'
'Returns an abstract class which defines contract for the plugin. DCNL The abstract class should inherit from extesnions.PluginInterface, DCNL Methods in this abstract class  should be decorated as abstractmethod'
'Update attributes map for this extension DCNL This is default method for extending an extension\'s attributes map. DCNL An extension can use this method and supplying its own resource DCNL attribute map in extension_attrs_map argument to extend all its DCNL attributes that needs to be extended. DCNL If an extension does not implement update_attributes_map, the method DCNL does nothing and just return.'
'Paste factory.'
'Return a dict of ActionExtensionController-s by collection.'
'Returns a dict of RequestExtensionController-s by collection.'
'Route the incoming request with router.'
'Dispatch the request. DCNL Returns the routed WSGI app\'s response or defers to the extended DCNL application.'
'Returns a list of ResourceExtension objects.'
'Returns a list of ActionExtension objects.'
'Returns a list of RequestExtension objects.'
'Extend resources with additional resources or attributes. DCNL :param: attr_map, the existing mapping from resource name to DCNL attrs definition. DCNL After this function, we will extend the attr_map if an extension DCNL wants to extend this map.'
'Checks for required methods in extension objects.'
'Load extensions from the configured path. DCNL Load extensions from the configured path. The extension name is DCNL constructed from the module_name. If your extension module was named DCNL widgets.py the extension class within that module should be DCNL \'Widgets\'. DCNL See tests/unit/extensions/foxinsocks.py for an example DCNL extension implementation.'
'Checks if any of plugins supports extension and implements the DCNL extension contract.'
'Retrieves and formats a list of elements of the requested entity'
'Retrieves and formats a single element of the requested entity'
'Returns a list of the requested entity'
'Returns detailed information about the requested entity'
'Creates a new instance of the requested entity'
'Deletes the specified entity'
'Updates the specified entity\'s attributes'
'verifies required attributes are in request body, and that DCNL an attribute is only specified if it is allowed for the given DCNL operation (create/update). DCNL Attribute with default values are considered to be DCNL optional. DCNL body argument must be the deserialized body'
':param base_url: url of the root wsgi application'
'Generic method used to generate a version entity.'
'Generate a container of links that refer to the provided version.'
'Create an url that refers to a specific version_number.'
'verifies required parameters are in request body. DCNL sets default value for missing optional parameters. DCNL body argument must be the deserialized body'
'Respond to a request for all Quantum API versions.'
'Retrieve and return a list of the active network ids.'
'Retrieve and return a extended information about a network.'
'Allocate a DHCP port for the host and return port information. DCNL This method will re-use an existing port if one already exists.  When a DCNL port is re-used, the fixed_ip allocation will be updated to the current DCNL network state.'
'Release the port currently being used by a DHCP agent.'
'Release the fixed_ip associated the subnet on a port.'
'Release the fixed_ip associated the subnet on a port.'
'Performs sanity check on session persistence info. DCNL :param info: Session persistence info'
'Add a l3 agent to host a router.'
'Remove the router from l3 agent. After it, the router DCNL will be non-hosted until there is update which DCNL lead to re schedule or be added to another agent manually.'
'Get the valid l3 agents for the router from a list of l3_agents'
'Schedule the routers to l3 agents.'
'Create security group. DCNL If default_sg is true that means we are a default security group for DCNL a given tenant if it does not exist.'
'Tenant id is given to handle the case when we DCNL are creating a security group rule on behalf of another use.'
'Check that rules being installed all belong to the same security DCNL group, remote_group_id/security_group_id belong to the same tenant, DCNL and rules are valid.'
'Create a default security group if one doesn\'t exist. DCNL :returns: the default security group id.'
'Check that all security groups on port belong to tenant. DCNL :returns: all security groups IDs on port belonging to tenant.'
'Return True if port has as a security group and it\'s value DCNL is either [] or not is_attr_set, otherwise return False'
'Return True if port has as a security group and False if the DCNL security_group field is is_attr_set or [].'
'Convert a row into a dict'
'Retrieve a service type record'
'Retrieve a possibly filtered list of service types'
'Create a new service type'
'Update a service type'
'Delete a service type'
'Increase references count for a service type object DCNL This method should be invoked by plugins using the service DCNL type concept everytime an instance of an object associated DCNL with a given service type is created.'
'Decrease references count for a service type object DCNL This method should be invoked by plugins using the service DCNL type concept everytime an instance of an object associated DCNL with a given service type is removed'
'Query routers and their related floating_ips, interfaces.'
'Make the model object behave like a dict'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'sqlalchemy based automatic __repr__ method'
'Sync routers according to filters to a specific agent. DCNL @param context: contain user information DCNL @param kwargs: host, or router_id DCNL @return: a list of routers DCNL with their interfaces and floating_ips'
'Get one external network id for l3 agent. DCNL l3 agent expects only on external network when it performs DCNL this query.'
'register an hook to be invoked when a query is executed. DCNL Add the hooks to the _model_query_hooks dict. Models are the keys DCNL of this dict, whereas the value is another dict mapping hook names to DCNL callables performing the hook. DCNL Each hook has a "query" component, used to build the query expression DCNL and a "filter" component, which is used to build the filter expression. DCNL Query hooks take as input the query being built and return a DCNL transformed query expression. DCNL Filter hooks take as input the filter expression being built and return DCNL a transformed filter expression'
'Return held ip allocations with expired leases back to the pool.'
'Return an IP address to the pool of free IP\'s on the network DCNL subnet.'
'Generate an IP address. DCNL The IP address will be generated from one of the subnets defined on DCNL the network.'
'Allocate a specific IP address on the subnet.'
'Validate that the IP address on the subnet is not in use.'
'Validate that the IP address is on the subnet.'
'Validate IP in allocation pool. DCNL Validates that the IP address is either the default gateway or DCNL in the allocation pools of the subnet.'
'Test fixed IPs for port. DCNL Check that configured subnets are valid prior to allocating any DCNL IPs. Include the subnet_id in the result if only an IP address is DCNL configured. DCNL :raises: InvalidInput, IpAddressInUse'
'Allocate IP addresses according to the configured fixed_ips.'
'Add or remove IPs from the port.'
'Allocate IP addresses for the port. DCNL If port[\'fixed_ips\'] is set to \'ATTR_NOT_SPECIFIED\', allocate IP DCNL addresses for the port. If port[\'fixed_ips\'] contains an IP address or DCNL a subnet_id then allocate an IP address accordingly.'
'Validate the CIDR for a subnet. DCNL Verifies the specified CIDR does not overlap with the ones defined DCNL for the other subnets specified for this network, or with any other DCNL CIDR if overlapping IPs are disabled.'
'Validate IP allocation pools. DCNL Verify start and end address for each allocation pool are valid, DCNL ie: constituted by valid and appropriately ordered IP addresses. DCNL Also, verify pools do not overlap among themselves. DCNL Finally, verify that each range fall within the subnet\'s CIDR.'
'Create IP allocation pools for a given subnet DCNL Pools are defined by the \'allocation_pools\' attribute, DCNL a list of dict objects with \'start\' and \'end\' keys for DCNL defining the pool range.'
'handle creation of a single network'
'Check IP field of a subnet match specified ip version'
'Validate a subnet spec'
'Update the subnet with new info. The change however will not be DCNL realized until the client renew the dns lease or we support DCNL gratuitous DHCP offers'
'When a floating IP is associated with an internal port, DCNL we need to extract/determine some data associated with the DCNL internal port, including the internal_ip_address, and router_id. DCNL We also need to confirm that this internal port is owned by the DCNL tenant who owns the floating IP.'
'Checks to make sure a port is allowed to be deleted, raising DCNL an exception if this is not the case.  This should be called by DCNL any plugin when the API requests the deletion of a port, since DCNL some ports for L3 are not intended to be deleted directly via a DCNL DELETE to /ports, but rather via other API calls that perform the DCNL proper deletion checks.'
'Query routers and their gw ports for l3 agent. DCNL Query routers with the router_ids. The gateway ports, if any, DCNL will be queried too. DCNL l3 agent has an option to deal with only one router id. In addition, DCNL when we need to notify the agent the data about only one router DCNL (when modification of router, its interfaces, gw_port and floatingips), DCNL we will have router_ids. DCNL @param router_ids: the list of router ids which we want to query. DCNL if it is None, all of routers will be queried. DCNL @return: a list of dicted routers with dicted gw_port populated if any'
'Query floating_ips that relate to list of router_ids.'
'Query router interfaces that relate to list of router_ids.'
'Populate ports with subnet. DCNL These ports already have fixed_ips populated.'
'Query routers and their related floating_ips, interfaces.'
'update security groups on port DCNL This method returns a flag which indicates request notification DCNL is required and does not perform notification itself. DCNL It is because another changes for the port may require notification.'
'check security group member updated or not DCNL This method returns a flag which indicates request notification DCNL is required and does not perform notification itself. DCNL It is because another changes for the port may require notification.'
'notify update event of security group members DCNL The agent setups the iptables rule to allow DCNL ingress packet from the dhcp server (as a part of provider rules), DCNL so we need to notify an update of dhcp server ip DCNL address to the plugin agent. DCNL security_groups_provider_updated() just notifies that an event DCNL occurs and the plugin agent fetches the update provider DCNL rule in the other RPC call (security_group_rules_for_devices).'
'return security group rules for each port DCNL also convert remote_group_id rule DCNL to source_ip_prefix and dest_ip_prefix rule DCNL :params devices: list of devices DCNL :returns: port correspond to the devices with security group rules'
'Given a list of resources, retrieve the quotas for the given DCNL tenant. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resource keys. DCNL :param tenant_id: The ID of the tenant to return quotas for. DCNL :return dict: from resource name to dict of name and limit'
'Delete the quota entries for a given tenant_id. DCNL Atfer deletion, this tenant will use default quota values in conf.'
'Given a list of resources, retrieve the quotas for the all DCNL tenants. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resource keys. DCNL :return quotas: list of dict of tenant_id:, resourcekey1: DCNL resourcekey2: ...'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param tenant_id: the tenant_id to check quota. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param tenant_id: The tenant_id to check the quota. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota.'
'Returns a tuple of (port_security_enabled, has_ip) where DCNL port_security_enabled and has_ip are bools. Port_security is the DCNL value assocated with the port if one is present otherwise the value DCNL associated with the network is returned. has_ip is if the port is DCNL associated with an ip or not.'
'Create or update agent according to report.'
'Report state from agent to server.'
'Override some configuration values. DCNL The keyword arguments are the names of configuration options to DCNL override and their values. DCNL If a group argument is supplied, the overrides are applied to DCNL the specified configuration option group. DCNL All overrides are automatically cleared at the end of the current DCNL test by the fixtures cleanup process.'
'Constructs a test dictionary and a definition of constraints. DCNL :return: A (dictionary, constraint) tuple'
'Deletes default egress rules given a security group ID'
'Asserts that the sg rule has expected key/value pairs passed DCNL in as expected_kvs dictionary'
'does the entity deletion based on naming convention'
'Test loadbalancer db plugin via extension and directly'
'Returns Extended Resource for dummy management'
'Creates a bulk request from a list of objects'
'Creates a bulk request for any kind of resource'
'Invoked by test cases for injecting failures in plugin'
'If a field used by policy is selected, do not duplicate it. DCNL Verifies that if the field parameter explicitly specifies a field DCNL which is used by the policy engine, then it is not duplicated DCNL in the response.'
'Test update of port IP. DCNL Check that a configured IP 10.0.0.2 is replaced by 10.0.0.10.'
'Update IP and generate new IP on port. DCNL Check a port update with the specified subnet_id\'s. A IP address DCNL will be allocated for each subnet_id.'
'Test update of port with additional IP.'
'testing the string representation of \'model\' classes'
'Makes sure ValueError from bug 926412 is gone'
'Makes sure deleted exe\'s are killed correctly'
'Identifies resource type and relevant uuids in the uri DCNL /ws.v1/lswitch/xxx DCNL /ws.v1/lswitch/xxx/status DCNL /ws.v1/lswitch/xxx/lport/yyy DCNL /ws.v1/lswitch/xxx/lport/yyy/status DCNL /ws.v1/lrouter/zzz DCNL /ws.v1/lrouter/zzz/status DCNL /ws.v1/lrouter/zzz/lport/www DCNL /ws.v1/lrouter/zzz/lport/www/status DCNL /ws.v1/lqueue/xxx'
'Verify data on fake NVP API client in order to validate DCNL plugin did set them properly'
'Get all networks'
'Get a network'
'Create a network'
'Delete a network'
'Rename a network'
'Get all ports'
'Get a port'
'Add a port'
'Delete a port'
'Update a port'
'Plug interface to a port'
'Unplug interface to a port'
'Test serialize verifies that exception InvalidContentType is raised'
'Test get deserialize verifies DCNL that exception InvalidContentType is raised'
'Test serialize with content type json'
'Test serialize with content type xml'
'Test serialize verifies that exception is raises'
'Test Serializer.deserialize with content type json'
'Test deserialize with content type xml'
'Test deserialize with content type xml with meta'
'Test Serializer.serialize with content type xml with meta dict'
'Test serialize with content type xml with meta list'
'Test RequestDeserializer.get_body_deserializer'
'Test RequestDeserializer.get_expected_content_type'
'Test RequestDeserializer.get_action_args'
'Test RequestDeserializer.deserialize'
'Test get body deserializer verifies DCNL that exception InvalidContentType is raised'
'Test serialize verifies DCNL that exception InvalidContentType is raised'
'Test get body serializer verifies DCNL that exception InvalidContentType is raised'
'Test ResponseSerializer.get_body_serializer'
'Test ActionDispatcher.dispatch'
'Test ActionDispatcher.dispatch with none action'
'Test verifies JsonDeserializer.default DCNL raises exception MalformedRequestBody correctly'
'Test verifies that exception MalformedRequestBody is raised'
'Register two L3 agents and two DHCP agents.'
'Returns Ext Resources'
'create random parameters for ofc_item test'
'OFC description consists of [A-Za-z0-9_].'
'create random parameters for portinfo test'
'test create ofc_tenant'
'test exists_ofc_tenant'
'test delete ofc_tenant'
'test create ofc_network'
'test exists_ofc_network'
'test delete ofc_network'
'test create ofc_port'
'test exists_ofc_port'
'test delete ofc_port'
'test create ofc_filter'
'test exists_ofc_packet_filter'
'test delete ofc_filter'
'Setup for tests'
'create random parameters for ofc_item test'
'create random parameters for portinfo test'
'test add OFC item'
'test get OFC item'
'test get OFC d'
'test get OFC d'
'test find OFC item'
'test delete OFC item'
'test add portinfo'
'test get portinfo'
'test delete portinfo'
'create random parameters for ofc_item test'
'create random parameters for ofc_item test'
':param details: the details to return for the device DCNL :param func_name: the function that should be called DCNL :returns: whether the named function was called'
':param details: the details to return for the device DCNL :param port: the port that get_vif_port_by_id should return DCNL :param func_name: the function that should be called DCNL :returns: whether the named function was called'
'create and stringify vif port, confirm no exceptions'
'Override the routine for allowing the router:external attribute'
'test vlan allocation/de-alloc.'
'Test brocade specific network db.'
'Test brocade specific port db.'
'Set up function'
'Tests creation of two new Virtual Network. DCNL Tests deletion of one Virtual Network. DCNL This would result the following - DCNL The Nexus device should have only one network DCNL vlan configured on it\'s plugin configured DCNL interfaces. DCNL If running this test individually, run DCNL test_nexus_clear_vlan after this test to clean DCNL up the second vlan created by this test.'
'Test to clean up second vlan of nexus device DCNL created by test_create_delete_network. This DCNL test will fail if it is run individually.'
'Instantiates class and passes back application object. DCNL :param host: defaults to CONF.host DCNL :param binary: defaults to basename of executable DCNL :param topic: defaults to bin_name - \'nova-\' part DCNL :param manager: defaults to CONF.<topic>_manager DCNL :param report_interval: defaults to CONF.report_interval DCNL :param periodic_interval: defaults to CONF.periodic_interval DCNL :param periodic_fuzzy_delay: defaults to CONF.periodic_fuzzy_delay'
'Destroy the service object.'
'Tasks to be run at a periodic interval.'
'Update the state of this service.'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Metaclass that allows us to collect decorated periodic tasks.'
'Tasks to be run at a periodic interval.'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool'
'When with ConnectionContext() is used, return self'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
':param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending" flag'
'The consume() callback will call this.  Store the result.'
'Return a result until we get a \'None\' response from consumer'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute.'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect'
'Fetch the message and pass it to the callback object'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection'
'Send a message'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection'
'Send a message'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params DCNL should be used for the connection (if any)'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Allow loading of JSON rule data.'
'Initialize the Rules store.'
'Implements the default rule handling.'
'Dumps a string representation of the rules.'
'Retrieve a string representation of the Check tree rooted at DCNL this node.'
'Perform the check.  Returns False to reject the access or a DCNL true value (not necessary True) to accept the access.'
'Return a string representation of this check.'
'Check the policy.'
'Return a string representation of this check.'
'Check the policy.'
':param kind: The kind of the check, i.e., the field before the DCNL :param match: The match of the check, i.e., the field after DCNL the \':\'.'
'Return a string representation of this check.'
'Initialize the \'not\' check. DCNL :param rule: The rule to negate.  Must be a Check.'
'Return a string representation of this check.'
'Check the policy.  Returns the logical inverse of the wrapped DCNL check.'
'Initialize the \'and\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that all rules accept in order to DCNL return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the AndCheck object for convenience.'
'Initialize the \'or\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that at least one rule accept in DCNL order to return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the OrCheck object for convenience.'
'Create the class.  Injects the \'reducers\' list, a list of DCNL tuples matching token sequences to the names of the DCNL corresponding reduction methods.'
'Initialize the ParseState.'
'Perform a greedy reduction of the token stream.  If a reducer DCNL method matches, it will be executed, then the reduce() method DCNL will be called recursively to search for any more possible DCNL reductions.'
'Adds one more token to the state.  Calls reduce().'
'Obtain the final result of the parse.  Raises ValueError if DCNL the parse failed to reduce to a single result.'
'Turn parenthesized expressions into a \'check\' token.'
'Create an \'and_expr\' from two checks joined by the \'and\' DCNL operator.'
'Extend an \'and_expr\' by adding one more check.'
'Create an \'or_expr\' from two checks joined by the \'or\' DCNL operator.'
'Extend an \'or_expr\' by adding one more check.'
'Invert the result of another check.'
'Recursively checks credentials based on the defined rules.'
'Check that there is a matching role in the cred dict.'
'Check http: rules by calling to a remote server. DCNL This example implementation simply verifies that the response DCNL is exactly \'True\'.'
'Check an individual match. DCNL Matches look like: DCNL tenant:%(tenant_id)s DCNL role:compute:admin'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a service to finish. DCNL :param service: service to run and wait for. DCNL :returns: None'
'Load and start the given service. DCNL :param service: The service you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Handle initialization if this is a standalone service. DCNL Child classes should override this method.'
'Handler post initialization stuff. DCNL Child classes can override this method.'
'Start a WSGI service in a new green thread.'
'Populate the networks cache when the DHCP-agent starts'
'Activate the DHCP agent.'
'Invoke an action on a DHCP driver instance.'
'Sync the local DHCP state with Quantum.'
'Resync the dhcp state at the configured interval.'
'Spawn a thread to periodically resync the dhcp state.'
'Enable DHCP for a network that meets enabling criteria.'
'Disable DHCP for a network known to the agent.'
'Refresh or disable DHCP for a network depending on the current state DCNL of the network.'
'Handle the network.create.end notification event.'
'Handle the network.update.end notification event.'
'Handle the network.delete.end notification event.'
'Handle the subnet.update.end notification event.'
'Handle the subnet.delete.end notification event.'
'Handle the port.update.end notification event.'
'Handle the port.delete.end notification event.'
'Make a remote process call to retrieve the active networks.'
'Make a remote process call to retrieve network info.'
'Make a remote process call to create the dhcp port.'
'Make a remote process call to release the dhcp port.'
'Make a remote process call to release a fixed_ip on the port.'
'Make a remote process call to update the ip lease expiration.'
'Return interface(device) name for use by the DHCP process.'
'Return a unique DHCP device ID for this host on the network.'
'Create and initialize a device for network\'s DHCP on this host.'
'Destroy the device used for the network\'s DHCP on this host.'
'Handle incoming lease relay stream connection. DCNL This method will only read the first 1024 bytes and then close the DCNL connection.  The limit exists to limit the impact of misbehaving DCNL clients.'
'Spawn a green thread to run the lease relay unix socket server.'
'Handle the agent_updated notification event.'
'Daemonize process by doing Stevens double fork.'
'Start the daemon'
'Override this method when subclassing Daemon. DCNL start() will call this method after the process has daemonized.'
'Set the L3 settings for the interface using data from the port. DCNL ip_cidrs: list of \'X.X.X.X/YY\' strings'
'Plug in the interface.'
'Unplug the interface.'
'Plugin the interface.'
'Unplug the interface.'
'Returns the file name for a given kind of config file.'
'Last known pid for this external process spawned for this uuid.'
'Conditionally destroy the namespace if it is empty.'
'Ensures that the route entry for the interface is before all DCNL others on the same subnet.'
'Restart the dhcp service for the network.'
'Return a list of existing networks ids (ones we have configs for)'
'check if there is a subnet within the network with dhcp enabled.'
'Enables DHCP for this network by spawning a local process.'
'Disable DHCP for this network by killing the local process.'
'Returns the file name for a given kind of config file.'
'A helper function to read a value from one of the state files.'
'Last known pid for the DHCP process spawned for this network.'
'Return a list of existing networks ids (ones we have configs for)'
'Spawns a Dnsmasq process for the network.'
'Rebuild the dnsmasq config and signal the dnsmasq to reload.'
'Writes a dnsmasq compatible hosts file.'
'Write a dnsmasq compatible options file.'
'Setup ingress and egress chain for a port.'
'Remove ingress and egress chain for a port'
'Adds a named chain to the table. DCNL The chain name is wrapped to be unique for the component creating DCNL it, so different components of Nova can safely create identically DCNL named chains without interfering with one another. DCNL At the moment, its wrapped name is <binary name>-<chain name>, DCNL so if nova-compute creates a chain named \'OUTPUT\', it\'ll actually DCNL end up named \'nova-compute-OUTPUT\'.'
'Ensure the chain is removed. DCNL This removal "cascades". All rule in the chain are removed, as are DCNL all rules in other chains that jump to it.'
'Remove named chain. DCNL This removal "cascades". All rule in the chain are removed, as are DCNL all rules in other chains that jump to it. DCNL If the chain is not found, this is merely logged.'
'Add a rule to the table. DCNL This is just like what you\'d feed to iptables, just without DCNL the \'-A <chain name>\' bit at the start. DCNL However, if you need to jump to one of your wrapped chains, DCNL prepend its name with a \'$\' which will ensure the wrapping DCNL is applied correctly.'
'Remove a rule from a chain. DCNL Note: The rule must be exactly identical to the one that was added. DCNL You cannot switch arguments around like you can with the iptables DCNL CLI tool.'
'Remove all rules from a chain.'
'Apply the current in-memory set of iptables rules. DCNL This will blow away any rules left over from previous runs of the DCNL same component of Nova, and replace them with our current set of DCNL rules. This happens atomically, thanks to iptables-restore.'
'Make a remote process call to retrieve the sync data for routers.'
'Make a remote process call to retrieve the external network id. DCNL @raise common.RemoteError: with TooManyExternalNetworks DCNL as exc_type if there are DCNL more than one external network'
'Destroy router namespaces on the host to eliminate all stale DCNL linux devices, iptables rules, and namespaces. DCNL If only_router_id is passed, only destroy single namespace, to allow DCNL for multiple l3 agents on the same host, without stepping on each DCNL other\'s toes on init.  This only makes sense if router_id is set.'
'Find UUID of single external network for this agent'
'Deal with router deletion RPC message.'
'Deal with routers modification and creation RPC message.'
'Handle the agent_updated notification event.'
'Prepare filters for the port. DCNL This method should be called before the port is created.'
'Apply port filter. DCNL Once this method returns, the port should be firewalled DCNL appropriately. This method should as far as possible be a DCNL no-op. It\'s vastly preferred to get everything set up in DCNL prepare_port_filter.'
'Refresh security group rules from data store DCNL Gets called when an port gets added to or removed from DCNL the security group the port is a member of or if the DCNL group gains or looses a rule.'
'Stop filtering port'
'Defer application of filtering rule'
'Turn off deferral of rules and apply the rules now'
'returns filterd ports'
'defer apply context'
'callback for security group rule update DCNL :param security_groups: list of updated security_groups'
'callback for security group member update DCNL :param security_groups: list of updated security_groups'
'callback for security group provider update'
'notify rule updated security groups'
'notify member updated security groups'
'notify provider updated security groups'
'Retrieve the tenant info in context.'
'Returns Ext Resources'
'Returns Ext Resources'
'Returns Ext Resources'
'Create agent. DCNL This operation is not allow in REST API. DCNL @raise exceptions.BadRequest:'
'Delete agent. DCNL Agents register themselves on reporting state. DCNL But if a agent does not report its status DCNL for a long time (for example, it is dead for ever. ), DCNL admin can remove it. Agents must be disabled before DCNL being removed.'
'Disable or Enable the agent. DCNL Discription also can be updated. DCNL Some agents cannot be disabled, DCNL such as plugins, services. DCNL An error code should be reported in this case. DCNL @raise exceptions.BadRequest:'
'Returns Extended Resource for service type management'
'Returns Ext Resources'
'Returns Ext Resources'
'Create a new chain for security group. DCNL Creating a security group creates a pair of chains in MidoNet, one for DCNL inbound and the other for outbound.'
'Delete a chain mapped to a security group. DCNL Delete a SG means deleting all the chains (inbound and outbound) DCNL associated with the SG in MidoNet.'
'Get router chains. DCNL Returns a dictionary that has in/out chain resources key\'ed with \'in\' DCNL and \'out\' respectively, given the tenant_id and the router_id passed DCNL in in the arguments.'
'Create a new chain on a router. DCNL Creates chains for the router and returns the same dictionary as DCNL get_router_chains() returns.'
'Get a list of chains mapped to a security group.'
'Create Quantum subnet. DCNL Creates a Quantum subnet and a DHCP entry in MidoNet bridge.'
'Get Quantum subnet. DCNL Retrieves a Quantum subnet record but also including the DHCP entry DCNL data stored in MidoNet.'
'List Quantum subnets. DCNL Retrieves Quantum subnets with some fields populated by the data DCNL stored in MidoNet.'
'Delete Quantum subnet. DCNL Delete quantum network and its corresponding MidoNet bridge.'
'Create Quantum network. DCNL Create a new Quantum network and its corresponding MidoNet bridge.'
'Update Quantum network. DCNL Update an existing Quantum network and its corresponding MidoNet DCNL bridge.'
'Get Quantum network. DCNL Retrieves a Quantum network and its corresponding MidoNet bridge.'
'List quantum networks and verify that all exist in MidoNet.'
'Delete a network and its corresponding MidoNet bridge.'
'Create a L2 port in Quantum/MidoNet.'
'Update port.'
'Retrieve port.'
'List quantum ports and verify that they exist in MidoNet.'
'Delete a quantum port and corresponding MidoNet bridge port.'
'Remove interior router ports.'
'Create chains for Quantum security group.'
'Delete chains for Quantum security group.'
'Adds to the list of exptected inputs. The incomming request is DCNL matched in the order of priority. For same priority, match the DCNL oldest match request first. DCNL :param prior: intgere priority of this match (e.g. 100) DCNL :param method_regexp: regexp to match method (e.g. \'PUT|POST\') DCNL :param uri_regexp: regexp to match uri (e.g. \'/quantum/v?.?/\') DCNL :param handler: function with signature: DCNL lambda(method, uri, body, **kwargs) : status, body DCNL where DCNL - method: HTTP method for this request DCNL - uri: URI for this HTTP request DCNL - body: body of this HTTP request DCNL - kwargs are: DCNL - data: data object that was in the match call DCNL - node: TestNetworkCtrl object itself DCNL - id: offset of the matching tuple DCNL and return values is: DCNL (status, body) where: DCNL - status: HTTP resp status (e.g. \'200 OK\'). DCNL If None, use default_status DCNL - body: HTTP resp body. If None, use \'\''
'Define failure codes as required. DCNL Note: We assume 301-303 is a failure, and try the next server in DCNL the server pool.'
'Defining success codes as required. DCNL Note: We assume any valid 2xx as being successful response.'
'Create a network, which represents an L2 network segment which DCNL can have a set of subnets and ports associated with it. DCNL :param context: quantum api request context DCNL :param network: dictionary describing the network DCNL :returns: a sequence of mappings with the following signature: DCNL "id": UUID representing the network. DCNL "name": Human-readable name identifying the network. DCNL "tenant_id": Owner of network. NOTE: only admin user can specify DCNL a tenant_id other than its own. DCNL "admin_state_up": Sets admin state of network. DCNL if down, network does not forward packets. DCNL "status": Indicates whether network is currently operational DCNL (values are "ACTIVE", "DOWN", "BUILD", and "ERROR") DCNL "subnets": Subnets associated with this network. DCNL :raises: RemoteRestError'
'Updates the properties of a particular Virtual Network. DCNL :param context: quantum api request context DCNL :param net_id: uuid of the network to update DCNL :param network: dictionary describing the updates DCNL :returns: a sequence of mappings with the following signature: DCNL "id": UUID representing the network. DCNL "name": Human-readable name identifying the network. DCNL "tenant_id": Owner of network. NOTE: only admin user can DCNL specify a tenant_id other than its own. DCNL "admin_state_up": Sets admin state of network. DCNL if down, network does not forward packets. DCNL "status": Indicates whether network is currently operational DCNL (values are "ACTIVE", "DOWN", "BUILD", and "ERROR") DCNL "subnets": Subnets associated with this network. DCNL :raises: exceptions.NetworkNotFound DCNL :raises: RemoteRestError'
'Delete a network. DCNL :param context: quantum api request context DCNL :param id: UUID representing the network to delete. DCNL :returns: None DCNL :raises: exceptions.NetworkInUse DCNL :raises: exceptions.NetworkNotFound DCNL :raises: RemoteRestError'
'Create a port, which is a connection point of a device DCNL (e.g., a VM NIC) to attach to a L2 Quantum network. DCNL :param context: quantum api request context DCNL :param port: dictionary describing the port DCNL :returns: DCNL "id": uuid represeting the port. DCNL "network_id": uuid of network. DCNL "tenant_id": tenant_id DCNL "mac_address": mac address to use on this port. DCNL "admin_state_up": Sets admin state of port. if down, port DCNL does not forward packets. DCNL "status": dicates whether port is currently operational DCNL (limit values to "ACTIVE", "DOWN", "BUILD", and "ERROR") DCNL "fixed_ips": list of subnet ID"s and IP addresses to be used on DCNL this port DCNL "device_id": identifies the device (e.g., virtual server) using DCNL this port. DCNL :raises: exceptions.NetworkNotFound DCNL :raises: exceptions.StateInvalid DCNL :raises: RemoteRestError'
'Update values of a port. DCNL :param context: quantum api request context DCNL :param id: UUID representing the port to update. DCNL :param port: dictionary with keys indicating fields to update. DCNL :returns: a mapping sequence with the following signature: DCNL "id": uuid represeting the port. DCNL "network_id": uuid of network. DCNL "tenant_id": tenant_id DCNL "mac_address": mac address to use on this port. DCNL "admin_state_up": sets admin state of port. if down, port DCNL does not forward packets. DCNL "status": dicates whether port is currently operational DCNL (limit values to "ACTIVE", "DOWN", "BUILD", and "ERROR") DCNL "fixed_ips": list of subnet ID\'s and IP addresses to be used on DCNL this port DCNL "device_id": identifies the device (e.g., virtual server) using DCNL this port. DCNL :raises: exceptions.StateInvalid DCNL :raises: exceptions.PortNotFound DCNL :raises: RemoteRestError'
'Delete a port. DCNL :param context: quantum api request context DCNL :param id: UUID representing the port to delete. DCNL :raises: exceptions.PortInUse DCNL :raises: exceptions.PortNotFound DCNL :raises: exceptions.NetworkNotFound DCNL :raises: RemoteRestError'
'Attaches a remote interface to the specified port on the DCNL specified Virtual Network. DCNL :returns: None DCNL :raises: exceptions.NetworkNotFound DCNL :raises: exceptions.PortNotFound DCNL :raises: RemoteRestError'
'Detaches a remote interface from the specified port on the DCNL network controller DCNL :returns: None DCNL :raises: RemoteRestError'
'Pushes all data to network ctrl (networks/ports, ports/attachments) DCNL to give the controller an option to re-sync it\'s persistent store DCNL with quantum\'s current view of that data.'
'Look up an option value. DCNL :param name: the opt name (or \'dest\', more precisely) DCNL :param group: an OptGroup DCNL :returns: the option value, or a GroupAttr object DCNL :raises: NoSuchOptError, NoSuchGroupError, ConfigFileValueError, DCNL TemplateSubstitutionError'
'Register multiple option schemas at once.'
'Converts Quantum API security group rule to NVP API.'
'Converts a list of Quantum API security group rules to NVP API.'
'Query quantum db for security group rules.'
'Return profile id from novas group id.'
'This function receives all of the current rule associated with a DCNL security group and then removes the rule that matches the rule_id. In DCNL addition it removes the id field in the dict with each rule since that DCNL should not be passed to nvp.'
'Add a new set of controller parameters. DCNL :param ip: IP address of controller. DCNL :param port: port controller is listening on. DCNL :param user: user name. DCNL :param password: user password. DCNL :param request_timeout: timeout for an entire API request. DCNL :param http_timeout: timeout for a connect to a controller. DCNL :param retries: maximum number of request retries. DCNL :param redirects: maximum number of server redirect responses to DCNL follow. DCNL :param default_tz_uuid: default transport zone uuid. DCNL :param uuid: UUID of this cluster (used in MDI configs). DCNL :param zone: Zone of this cluster (used in MDI configs). DCNL :param default_l3_gw_service_uuid: Default l3 gateway service DCNL :param default_l2_gw_service_uuid: Default l2 gateway service DCNL :param default_interface_name: Default interface name for l2 gateways'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Build ip_addresses data structure for logical router port DCNL No need to perform validation on IPs - this has already been DCNL done in the l3_db mixin class'
'Retrieve ports associated with a specific device id. DCNL Used for retrieving all quantum ports attached to a given router.'
'Retrieve subnets attached to the specified router'
'Driver for creating a logical switch port on NVP platform'
'Driver for creating a switch port to be connected to a router'
'Driver for creating an external gateway port on NVP platform'
'Create a switch port, and attach it to a L2 gateway attachment'
'Return the NVP port uuid for a given quantum port. DCNL First, look up the Quantum database. If not found, execute DCNL a query on NVP platform as the mapping might be missing because DCNL the port was created before upgrading to grizzly.'
'Extends the Quantum Fault Map DCNL Exceptions specific to the NVP Plugin are mapped to standard DCNL HTTP Exceptions'
'Return cluster where configuration should be applied DCNL If the resource being configured has a paremeter expressing DCNL the zone id (nova_id), then select corresponding cluster, DCNL otherwise return default cluster.'
'Figure out the set of lswitches on each cluster that maps to this DCNL network id'
'Deletes a port on a specified Virtual Network, DCNL if the port contains a remote interface attachment, DCNL the remote interface is first un-plugged and then the port DCNL is deleted. DCNL :returns: None DCNL :raises: exception.PortInUse DCNL :raises: exception.PortNotFound DCNL :raises: exception.NetworkNotFound'
'Update floating IP association data. DCNL Overrides method from base class. DCNL The method is augmented for creating NAT rules in the process.'
'Create a layer-2 network gateway DCNL Create the gateway service on NVP platform and corresponding data DCNL structures in Quantum datase'
'Remove a layer-2 network gateway DCNL Remove the gateway service from NVP platform and corresponding data DCNL structures in Quantum datase'
'Create security group. DCNL If default_sg is true that means a we are creating a default security DCNL group and we don\'t need to check if one exists.'
'Delete a security group DCNL :param security_group_id: security group rule to remove.'
'create a single security group rule'
'create security group rules DCNL :param security_group_rule: list of rules to create'
'Delete a security group rule DCNL :param sgrid: security group id to remove.'
'This function determines if a port should be associated with a DCNL queue. It works by first querying NetworkQueueMapping to determine DCNL if the network is associated with a queue. If so, then it queries DCNL NetworkQueueMapping for all the networks that are associated with DCNL this queue. Next, it queries against all the ports on these networks DCNL with the port device_id. Finally it queries PortQueueMapping. If that DCNL query returns a queue_id that is returned. Otherwise a queue is DCNL created that is the size of the queue associated with the network and DCNL that queue_id is returned. DCNL If the network is not associated with a queue we then query to see DCNL if there is a default queue in the system. If so, a copy of that is DCNL created and the queue_id is returned. DCNL Otherwise None is returned. None is also returned if the port does not DCNL have a device_id or if the device_owner is network:'
'Convert fields to nvp fields.'
'Returns Ext Resources'
'Returns Ext Resources'
'Constructor. DCNL :param api_providers: a list of tuples in the form: DCNL (host, port, is_ssl=True). Passed on to NvpClientEventlet. DCNL :param user: the login username. DCNL :param password: the login password. DCNL :param concurrent_connections: the number of concurrent connections. DCNL :param request_timeout: all operations (including retries, redirects DCNL from unresponsive controllers, etc) should finish within this DCNL timeout. DCNL :param http_timeout: how long to wait before aborting an DCNL unresponsive controller (and allow for retries to another DCNL controller in the cluster) DCNL :param retries: the number of concurrent connections. DCNL :param redirects: the number of concurrent connections.'
'Login to NVP controller. DCNL Assumes same password is used for all controllers. DCNL :param user: NVP controller user (usually admin). Provided for DCNL backwards compatability. In the  normal mode of operation DCNL this should be None. DCNL :param password: NVP controller password. Provided for backwards DCNL compatability. In the normal mode of operation this should DCNL be None. DCNL :returns: Does not return a value.'
'Issues request to controller.'
'Constructor.'
'Allocate a green thread from the class pool.'
'Spawn a new green thread with the supplied function and args.'
'Wait for all outstanding requests to complete.'
'Wait for instance green thread to complete.'
'Start request processing.'
'Return a copy of this request instance.'
'Method executed within green thread.'
'First level request handling.'
'Parse api_providers from response. DCNL Returns: api_providers in [(host, port, is_ssl), ...] format'
'Check out an available HTTPConnection instance. DCNL Blocks until a connection is available. DCNL :auto_login: automatically logins before returning conn DCNL :headers: header to pass on to login attempt DCNL :param rid: request id passed in from request eventlet. DCNL :returns: An available HTTPConnection instance or None if no DCNL api_providers are configured.'
'Mark HTTPConnection instance as available for check-out. DCNL :param http_conn: An HTTPConnection instance obtained from this DCNL instance. DCNL :param bad_state: True if http_conn is known to be in a bad state DCNL (e.g. connection fault.) DCNL :service_unavail: True if http_conn returned 503 response. DCNL :param rid: request id passed in from request eventlet.'
'Block until a login has occurred for the current API provider.'
'Get data for specified API provider. DCNL Args: DCNL conn_or_conn_params: either a HTTP(S)Connection object or the DCNL resolved conn_params tuple returned by self._conn_params(). DCNL default: conn_params if ones passed aren\'t known DCNL Returns: Data associated with specified provider'
'Set data for specified API provider. DCNL Args: DCNL conn_or_conn_params: either a HTTP(S)Connection object or the DCNL resolved conn_params tuple returned by self._conn_params(). DCNL data: data to associate with API provider'
'Normalize conn_param tuple. DCNL Args: DCNL conn_or_conn_params: either a HTTP(S)Connection object or the DCNL resolved conn_params tuple returned by self._conn_params(). DCNL Returns: Normalized conn_param tuple'
'Constructor DCNL :param api_providers: a list of tuples of the form: (host, port, DCNL is_ssl). DCNL :param user: login username. DCNL :param password: login password. DCNL :param concurrent_connections: total number of concurrent connections. DCNL :param use_https: whether or not to use https for requests. DCNL :param connect_timeout: connection timeout in seconds. DCNL :param nvp_gen_timeout controls how long the generation id is kept DCNL if set to -1 the generation id is never timed out'
'Check out or create connection to redirected NVP API server. DCNL Args: DCNL conn_params: tuple specifying target of redirect, see DCNL self._conn_params() DCNL auto_login: returned connection should have valid session cookie DCNL headers: headers to pass on if auto_login DCNL Returns: An available HTTPConnection instance corresponding to the DCNL specified conn_params. If a connection did not previously DCNL exist, new connections are created with the highest prioity DCNL in the connection pool and one of these new connections DCNL returned.'
'Issue login request and update authentication cookie.'
'Issue a request to a provider.'
'Process redirect response, create new connection if necessary. DCNL Args: DCNL conn: connection that returned the redirect response DCNL headers: response headers of the redirect response DCNL allow_release_conn: if redirecting to a different server, DCNL release existing connection back to connection pool. DCNL Returns: Return tuple(conn, url) where conn is a connection object DCNL to the redirect target and url is the path of the API request'
'Return current request id.'
'Return any errors associated with this instance.'
'Return string representation of connection.'
'Pre-deletion check. DCNL Ensures a port will not be deleted if is being used by a network DCNL gateway. In that case an exception will be raised.'
'Create network core Quantum API'
'Update network core Quantum API'
'Delete network core Quantum API'
'Create port core Quantum API'
'Update port core Quantum API'
'Delete port core Quantum API'
'Create subnet core Quantum API'
'Delete subnet core Quantum API'
'Update subnet core Quantum API'
'Check if ethernet device exists.'
'Create a vlan and bridge unless they already exist.'
'Create a non-vlan bridge unless it already exists.'
'Create a local bridge unless it already exists.'
'Create a vlan unless it already exists.'
'Create a bridge unless it already exists.'
'If a VIF has been plugged into a network, this function will DCNL add the corresponding tap device to the relevant bridge'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Agent requests device details'
'Device no longer exists on agent'
'Device is up on agent'
'Creates a new client to some OFC. DCNL :param host: The host where service resides DCNL :param port: The port where service resides DCNL :param use_ssl: True to use SSL, False to use HTTP DCNL :param key_file: The SSL key file to use if use_ssl is true DCNL :param cert_file: The SSL cert file to use if use_ssl is true'
'Returns the proper connection type'
'Generate PFC acceptable String'
'Generate ID on PFC DCNL Currently, PFC ID must be less than 32. DCNL Shorten UUID string length from 36 to 31 by follows: DCNL * delete UUID Version and hyphen (see RFC4122) DCNL * ensure str length'
'Generate Description on PFC DCNL Currently, PFC Description must be less than 128.'
'RPC to update information of ports on Quantum Server'
'Constructor. DCNL :param integ_br: name of the integration bridge. DCNL :param root_helper: utility to use when running shell cmds. DCNL :param polling_interval: interval (secs) to check the bridge.'
'Main processing loop for NEC Plugin Agent.'
'Update status of specified resource.'
'Activate port by creating port on OFC if ready. DCNL Activate port and packet_filters associated with the port. DCNL Conditions to activate port on OFC are: DCNL * port admin_state is UP DCNL * network admin_state is UP DCNL * portinfo are available (to identify port on OFC)'
'Deactivate port by deleting port from OFC if exists. DCNL Deactivate port and packet_filters associated with the port.'
'Create a new network entry on DB, and create it on OFC.'
'Update network and handle resources associated with the network. DCNL Update network entry on DB. If \'admin_state_up\' was changed, activate DCNL or deactivate ports and packetfilters associated with the network.'
'Delete network and packet_filters associated with the network. DCNL Delete network entry from DB and OFC. Then delete packet_filters DCNL associated with the network. If the network is the last resource DCNL of the tenant, delete unnessary ofc_tenant.'
'Create a new port entry on DB, then try to activate it.'
'Update port, and handle packetfilters associated with the port. DCNL Update network entry on DB. If admin_state_up was changed, activate DCNL or deactivate the port and packetfilters associated with it.'
'Delete port and packet_filters associated with the port.'
'Activate packet_filter by creating filter on OFC if ready. DCNL Conditions to create packet_filter on OFC are: DCNL * packet_filter admin_state is UP DCNL * network admin_state is UP DCNL * (if \'in_port\' is specified) portinfo is available'
'Deactivate packet_filter by deleting filter from OFC if exixts.'
'Create a new packet_filter entry on DB, then try to activate it.'
'Update packet_filter entry on DB, and recreate it if changed. DCNL If any rule of the packet_filter was changed, recreate it on OFC.'
'Deactivate and delete packet_filter.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Update ports\' information and activate/deavtivate them. DCNL Expected input format is: DCNL {\'topic\': \'q-agent-notifier\', DCNL \'agent_id\': \'nec-q-agent.\' + <hostname>, DCNL \'datapath_id\': <datapath_id of br-int on remote host>, DCNL \'port_added\': [<new PortInfo>,...], DCNL \'port_removed\': [<removed Port ID>,...]}'
'Create a new tenant at OpenFlow Controller. DCNL :param description: A description of this tenant. DCNL :param tenant_id: A hint of OFC tenant ID. DCNL A driver could use this id as a OFC id or ignore it. DCNL :returns: ID of the tenant created at OpenFlow Controller. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Delete a tenant at OpenFlow Controller. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Create a new network on specified OFC tenant at OpenFlow Controller. DCNL :param ofc_tenant_id: a OFC tenant ID in which a new network belongs. DCNL :param description: A description of this network. DCNL :param network_id: A hint of an ID of OFC network. DCNL :returns: ID of the network created at OpenFlow Controller. DCNL ID returned must be unique in the OpenFlow Controller. DCNL If a network is identified in conjunction with other information DCNL such as a tenant ID, such information should be included in the ID. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Delete a netwrok at OpenFlow Controller. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Create a new port on specified network at OFC. DCNL :param ofc_network_id: a OFC tenant ID in which a new port belongs. DCNL :param portinfo: An OpenFlow information of this port. DCNL {\'datapath_id\': Switch ID that a port connected. DCNL \'port_no\': Port Number that a port connected on a Swtich. DCNL \'vlan_id\': VLAN ID that a port tagging. DCNL \'mac\': Mac address. DCNL :param port_id: A hint of an ID of OFC port. DCNL ID returned must be unique in the OpenFlow Controller. DCNL If a port is identified in combination with a network or DCNL a tenant, such information should be included in the ID. DCNL :returns: ID of the port created at OpenFlow Controller. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Delete a port at OpenFlow Controller. DCNL :raises: quantum.plugin.nec.common.exceptions.OFCException'
'Convert old-style ofc tenand id to new-style one. DCNL :param context: quantum context object DCNL :param ofc_tenant_id: ofc_tenant_id to be converted'
'Convert old-style ofc network id to new-style one. DCNL :param context: quantum context object DCNL :param ofc_network_id: ofc_network_id to be converted DCNL :param tenant_id: quantum tenant_id of the network'
'Convert old-style ofc port id to new-style one. DCNL :param context: quantum context object DCNL :param ofc_port_id: ofc_port_id to be converted DCNL :param tenant_id: quantum tenant_id of the port DCNL :param network_id: quantum network_id of the port'
'Try to find unused tunnel key in TunnelKey table starting DCNL from last_key + 1. DCNL When all keys are used, raise sqlalchemy.orm.exc.NoResultFound'
'Synchronize vlan_allocations table with configured VLAN ranges'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Agent requests device details'
'Device no longer exists on agent'
'Dummy function for ovs agent running on Linux to DCNL work with Hyper-V plugin and agent.'
'Poll WMI job state for completion'
'Creates a switch port'
'Disconnects the switch port'
'Compare only fields that will cause us to re-wire.'
'Constructor. DCNL :param integ_br: name of the integration bridge. DCNL :param tun_br: name of the tunnel bridge. DCNL :param local_ip: local IP address of this hypervisor. DCNL :param bridge_mappings: mappings from physical network name to bridge. DCNL :param root_helper: utility to use when running shell cmds. DCNL :param polling_interval: interval (secs) to poll DB. DCNL :param enable_tunneling: if True enable GRE networks.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Provisions a local VLAN. DCNL :param net_uuid: the uuid of the network associated with this vlan. DCNL :param network_type: the network type (\'gre\', \'vlan\', \'flat\', \'local\') DCNL :param physical_network: the physical network for \'vlan\' or \'flat\' DCNL :param segmentation_id: the VID for \'vlan\' or tunnel ID for \'tunnel\''
'Reclaim a local VLAN. DCNL :param net_uuid: the network uuid associated with this vlan. DCNL :param lvm: a LocalVLANMapping object that tracks (vlan, lsw_id, DCNL vif_ids) mapping.'
'Bind port to net_uuid/lsw_id and install flow for inbound traffic DCNL to vm. DCNL :param port: a ovslib.VifPort object. DCNL :param net_uuid: the net_uuid this port is to be associated with. DCNL :param network_type: the network type (\'gre\', \'vlan\', \'flat\', \'local\') DCNL :param physical_network: the physical network for \'vlan\' or \'flat\' DCNL :param segmentation_id: the VID for \'vlan\' or tunnel ID for \'tunnel\''
'Unbind port. DCNL Removes corresponding local vlan mapping object if this is its last DCNL VIF. DCNL :param vif_id: the id of the vif DCNL :param net_uuid: the net_uuid this port is associated with.'
'Once a port has no binding, put it on the "dead vlan". DCNL :param port: a ovs_lib.VifPort object.'
'Setup the integration bridge. DCNL Create patch ports and remove all existing flows. DCNL :param bridge_name: the name of the integration bridge. DCNL :returns: the integration bridge'
'Setup the tunnel bridge. DCNL Creates tunnel bridge, and links it to the integration bridge DCNL using a patch port. DCNL :param tun_br: the name of the tunnel bridge.'
'Setup the physical network bridges. DCNL Creates physical network bridges and links them to the DCNL integration bridge using veths. DCNL :param bridge_mappings: map physical network names to bridge names.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Agent requests device details'
'Device no longer exists on agent'
'Device is up on agent'
'Update new tunnel. DCNL Updates the datbase with the tunnel IP. All listening agents will also DCNL be notified about the new tunnel IP.'
'Returns the file name for a given kind of config file.'
'Handle RPC cast from plugin to reload a pool.'
'Handle RPC cast from plugin to modify a pool if known to agent.'
'Handle RPC cast from plugin to destroy a pool if known to agent.'
'Agent confirmation hook that a pool has been destroyed. DCNL This method exists for subclasses to change the deletion DCNL behavior.'
'Do the initialization for the loadbalancer service plugin here.'
'returns one of predefine service types. see DCNL quantum/plugins/common/constants.py'
'return a symbolic name for the plugin. DCNL Each service plugin should have a symbolic name. This name DCNL will be used, for instance, by service definitions in service types'
'returns string description of the plugin'
'initialize the vlan as a set.'
'try to get a specific vlan if requested DCNL or get the next vlan.'
'return the vlan to the pool.'
'Connect via SSH and initialize the NETCONF session.'
'Creates a new virtual network.'
'Deletes a virtual network.'
'Associates a MAC address to virtual network.'
'Dissociates a MAC address from virtual network.'
'Configures a VLAN interface.'
'Deletes a VLAN interface.'
'Retrieves all port profiles.'
'Retrieves a port profile.'
'Creates a port profile.'
'Deletes a port profile.'
'Activates a port profile.'
'Deactivates a port profile.'
'Associates a MAC address to a port profile.'
'Dissociates a MAC address from a port profile.'
'Creates VLAN sub-profile for port profile.'
'Configures L2 mode for VLAN sub-profile.'
'Configures trunk mode for VLAN sub-profile.'
'Configures allowed VLANs for VLAN sub-profile.'
'Connect via SSH and initialize the NETCONF session.'
'Creates a new virtual network.'
'Deletes a virtual network.'
'Associates a MAC address to virtual network.'
'Dissociates a MAC address from virtual network.'
'Configures a VLAN interface.'
'Deletes a VLAN interface.'
'Retrieves all port profiles.'
'Retrieves a port profile.'
'Creates a port profile.'
'Deletes a port profile.'
'Activates a port profile.'
'Deactivates a port profile.'
'Associates a MAC address to a port profile.'
'Dissociates a MAC address from a port profile.'
'Creates VLAN sub-profile for port profile.'
'Configures L2 mode for VLAN sub-profile.'
'Configures trunk mode for VLAN sub-profile.'
'Configures allowed VLANs for VLAN sub-profile.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Get port from the brocade specific db.'
'Agent requests device details.'
'Device no longer exists on agent.'
'Initialize Brocade Plugin, specify switch address DCNL and db configuration.'
'Brocade specific initialization.'
'This call to create network translates to creation of DCNL port-profile on the physical switch.'
'This call to delete the network translates to removing DCNL the port-profile on the physical switch.'
'Create logical port on the switch.'
'Get version number of the plugin.'
'Transform MAC address format. DCNL Transforms from 6 groups of 2 hexadecimal numbers delimited by ":" DCNL to 3 groups of 4 hexadecimals numbers delimited by ".". DCNL :param interface_mac: MAC address in the format xx:xx:xx:xx:xx:xx DCNL :type interface_mac: string DCNL :returns: MAC address in the format xxxx.xxxx.xxxx DCNL :rtype: string'
'Initialize the segmentation manager, check which device plugins are DCNL configured, and load the inventories those device plugins for which the DCNL inventory is configured'
'This delegates the calls to the methods implemented only by the OVS DCNL sub-plugin. Note: Currently, bulking is handled by the caller DCNL (PluginV2), and this model class expects to receive only non-bulking DCNL calls. If, however, a bulking call is made, this will method will DCNL delegate the call to the OVS plugin.'
'Get the name of the calling function'
'Invokes a device plugin\'s relevant functions (on the it\'s DCNL inventory and plugin implementation) for completing this operation.'
'Invokes the relevant function on a device plugin\'s DCNL inventory for completing this operation.'
'Invokes the relevant function on a device plugin\'s DCNL implementation for completing this operation.'
'Perform this operation in the context of the configured device DCNL plugins.'
'Perform this operation in the context of the configured device DCNL plugins.'
'Perform this operation in the context of the configured device DCNL plugins.'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'Perform this operation in the context of the configured device DCNL plugins.'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'Perform this operation in the context of the configured device DCNL plugins.'
'Perform this operation in the context of the configured device DCNL plugins.'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'For this model this method will be delegated to vswitch plugin'
'Set the username and password'
'Get the username'
'Get the password'
'Get the username and password'
'Delete a credential'
'Create a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the DCNL exception passed to constructor.'
'Dummy function to return the same key, used in walk'
'Internal Dict set method'
'Internal Dict get method'
'Dict get method'
'Iterate over table columns'
'Next method for the iterator'
'Make the model object behave like a dict'
'Make the model object behave like a dict" DCNL Includes attributes from joins.'
'Make the model object behave like a dict'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Internal Dict set method'
'Internal Dict get method'
'Dict get method'
'Iterate over table columns'
'Next method for the iterator'
'Make the model object behave like a dict'
'Make the model object behave like a dict" DCNL Includes attributes from joins.'
'Test create request'
'Test create network'
'Test create port'
'Delete port'
'Delete network'
'Tear down port and network'
'Set up function'
'Test create qos'
'Test create qos bad request'
'Test list qoss'
'Test show qos'
'Test show qos does not exist'
'Test update qos'
'Test update qos does not exist'
'Test update qos bad request'
'Test delte qos'
'Test delte qos does not exist'
'Tear Down Qos'
'Set up function'
'Test list credentials'
'Test create credential'
'Test create credential bad request'
'Test show credential'
'Test show credential does not exist'
'Test update credential'
'Test update credential bad request'
'Test update credential does not exist'
'Test delete credential'
'Test delete credential does not exist'
'Makes the fake connection to the Nexus Switch'
'Creates the Proper XML structure for the Nexus Switch Configuration'
'Creates a VLAN on Nexus Switch given the VLAN ID and Name'
'Delete a VLAN on Nexus Switch given the VLAN ID'
'Enables trunk mode an interface on Nexus Switch'
'Disables trunk mode an interface on Nexus Switch'
'Enables trunk mode vlan access an interface on Nexus Switch given DCNL VLANID'
'Enables trunk mode vlan access an interface on Nexus Switch given DCNL VLANID'
'Creates a VLAN and Enable on trunk mode an interface on Nexus Switch DCNL given the VLAN ID and Name and Interface Number'
'Delete a VLAN and Disables trunk mode an interface on Nexus Switch DCNL given the VLAN ID and Interface Number'
'Builds a string with all the VLANs on the same Switch'
'Adds a vlan from interfaces on the Nexus switch given the VLAN ID'
'Removes a vlan from interfaces on the Nexus switch given the VLAN ID'
'get all nexus port bindings'
'get nexus port binding'
'create nexus port binding'
'delete nexus port binding'
'update nexus port binding'
'Get all vlan binding into a list of dict'
'Get a vlan binding'
'Create a vlan binding'
'Delete a vlan binding'
'Update a vlan binding'
'Get all networks'
'Get a network'
'Create a network'
'Delete a network'
'Update a network'
'Get all ports'
'Get a port'
'Add a port'
'Delete a port'
'Update a port'
'Plug interface to a port'
'Unplug interface to a port'
'create nexus port binding'
'get all nexus port binding'
'delete nexus port binding'
'update nexus port binding'
'tear down nexusport binding table'
'Setup for tests'
'test add vlan binding'
'test get all vlan binding'
'test delete vlan binding'
'test update vlan binding'
'test vlanid methods'
'tearDown Network table'
'tearDown Port table'
'tearDown VlanBinding table'
'Setup for tests'
'test to create network'
'test to get all networks'
'test to delete network'
'test to update (rename) network'
'test to create port'
'test to delete port'
'test to plug/unplug interface'
'test to get network and port'
'tearDown for Network and Port table'
'tearDown for joined Network and Port test'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
':returns: DCNL :raises:'
'The __subclasshook__ method is a class method DCNL that will be called everytime a class is tested DCNL using issubclass(klass, Plugin). DCNL In that case, it will check that every method DCNL marked with the abstractmethod decorator is DCNL provided by the plugin class.'
'Loads the model class.'
'When the configured model class offers to manage the state of the DCNL logical resources, we delegate the core API calls directly to it. DCNL Note: Bulking calls will be handled by this class, and turned into DCNL non-bulking calls to be considered for delegation.'
'This delegates the calls to the extensions explicitly implemented by DCNL the model.'
'Creates a new Virtual Network, and assigns it DCNL a symbolic name.'
'Updates the symbolic name belonging to a particular DCNL Virtual Network.'
'Deletes the network with the specified network identifier DCNL belonging to the specified tenant.'
'Gets a particular network'
'Gets all networks'
'Creates a port on the specified Virtual Network.'
'Deletes a port'
'Updates the state of a port and returns the updated port'
'Create a subnet, which represents a range of IP addresses DCNL that can be allocated to devices.'
'Updates the state of a subnet and returns the updated subnet'
'Deletes a subnet'
'Get all QoS levels'
'Get QoS Details'
'Create a QoS level'
'Delete a QoS level'
'Rename QoS level'
'Get all credentials'
'Get a particular credential'
'Create a new credential'
'Delete a credential'
'Rename the particular credential resource'
'Provides the hostname on which a dynamic vnic is reserved'
'Get the portprofile name and the device name for the dynamic vnic'
'Remove the association of the VIF with the dynamic vnic'
'Device-specific calls including core API and extensions are DCNL delegated to the model.'
'Getting the name of the calling funciton'
'Returns Ext Resource Name'
'Returns Ext Resource Alias'
'Returns Ext Resource Description'
'Returns Ext Resource Namespace'
'Returns Ext Resource Update Time'
'Returns Ext Resources'
'Returns a list of credential ids'
'Returns a list of credentials.'
'Returns credential details for the given credential id'
'Creates a new credential for a given tenant'
'Updates the name for the credential with the given id'
'Destroys the credential with the given id'
':param base_url: url of the root wsgi application'
'Generic method used to generate a credential entity.'
'Return a simple description of credential.'
'Return a detailed description of credential.'
':param base_url: url of the root wsgi application'
'Generic method used to generate a QoS entity.'
'Return a simple description of qos.'
'Return a detailed description of qos.'
'Returns Ext Resource Name'
'Returns Ext Resource Alias'
'Returns Ext Resource Description'
'Returns Ext Resource Namespace'
'Returns Ext Resource update'
'Returns Ext Resources'
'Returns a list of qos ids'
'Returns a list of qoss.'
'Returns qos details for the given qos id'
'Creates a new qos for a given tenant'
'Updates the name for the qos with the given id'
'Destroys the qos with the given id'
'Makes the SSH connection to the Nexus Switch'
'Creates the Proper XML structure for the Nexus Switch Configuration'
'Creates a VLAN on Nexus Switch given the VLAN ID and Name'
'Delete a VLAN on Nexus Switch given the VLAN ID'
'Enables trunk mode an interface on Nexus Switch'
'Disables trunk mode an interface on Nexus Switch'
'Enables trunk mode vlan access an interface on Nexus Switch given DCNL VLANID'
'Enables trunk mode vlan access an interface on Nexus Switch given DCNL VLANID'
'Creates a VLAN and Enable on trunk mode an interface on Nexus Switch DCNL given the VLAN ID and Name and Interface Number'
'Delete a VLAN and Disables trunk mode an interface on Nexus Switch DCNL given the VLAN ID and Interface Number'
'Builds a string with all the VLANs on the same Switch'
'Adds a vlan from interfaces on the Nexus switch given the VLAN ID'
'Removes a vlan from interfaces on the Nexus switch given the VLAN ID'
'Extracts the configuration parameters from the configuration file'
'Returns a dictionary containing all DCNL <network_uuid, network_name> for DCNL the specified tenant.'
'Create a VLAN in the appropriate switch/port, DCNL and configure the appropriate interfaces DCNL for this VLAN'
'Deletes the VLAN in all switches, and removes the VLAN configuration DCNL from the relevant interfaces'
'Returns the details of a particular network'
'Updates the properties of a particular DCNL Virtual Network.'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'Delete port bindings from the database and scan DCNL whether the network is still required on DCNL the interfaces trunked'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'This is probably not applicable to the Nexus plugin. DCNL Delete if not required.'
'Obtain the VLAN ID given the Network ID'
'Gets the NETWORK ID'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param tennant_id: The tenant_id to check quota. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota.'
'Initializes a Resource. DCNL :param name: The name of the resource, i.e., "instances". DCNL :param flag: The name of the flag or configuration option'
'Return the default value of the quota.'
'Initializes a CountableResource. DCNL Countable resources are those resources which directly DCNL correspond to objects in the database, i.e., netowk, subnet, DCNL etc.,.  A CountableResource must be constructed with a counting DCNL function, which will be called to determine the current counts DCNL of the resource. DCNL The counting function will be passed the context, along with DCNL the extra positional and keyword arguments that are passed to DCNL Quota.count().  It should return an integer specifying the DCNL count. DCNL :param name: The name of the resource, i.e., "instances". DCNL :param count: A callable which returns the count of the DCNL resource.  The arguments passed are as described DCNL above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initialize a Quota object.'
'Register a resource.'
'Register a resource by name.'
'Register a list of resources.'
'Count a resource. DCNL For countable resources, invokes the count() function and DCNL returns its result.  Arguments following the context and DCNL resource are passed directly to the count function declared by DCNL the resource. DCNL :param context: The request context, for access checks. DCNL :param resource: The name of the resource, as a string.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction.  The DCNL values to check are given as keyword arguments, where the key DCNL identifies the specific quota limit to check, and the value is DCNL the proposed value. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks.'
'Create a subnet, which represents a range of IP addresses DCNL that can be allocated to devices DCNL : param context: quantum api request context DCNL : param subnet: dictionary describing the subnet, with keys DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.  All keys will be populated.'
'Update values of a subnet. DCNL : param context: quantum api request context DCNL : param id: UUID representing the subnet to update. DCNL : param subnet: dictionary with keys indicating fields to update. DCNL valid keys are those that have a value of True for \'allow_put\' DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.'
'Retrieve a subnet. DCNL : param context: quantum api request context DCNL : param id: UUID representing the subnet to fetch. DCNL : param fields: a list of strings that are valid keys in a DCNL subnet dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Retrieve a list of subnets.  The contents of the list depends on DCNL the identity of the user making the request (as indicated by the DCNL context) as well as any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a subnet as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL : param fields: a list of strings that are valid keys in a DCNL subnet dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Return the number of subnets.  The result depends on the identity of DCNL the user making the request (as indicated by the context) as well as DCNL any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a network as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL NOTE: this method is optional, as it was not part of the originally DCNL defined plugin API.'
'Delete a subnet. DCNL : param context: quantum api request context DCNL : param id: UUID representing the subnet to delete.'
'Create a network, which represents an L2 network segment which DCNL can have a set of subnets and ports associated with it. DCNL : param context: quantum api request context DCNL : param network: dictionary describing the network, with keys DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.  All keys will be populated.'
'Update values of a network. DCNL : param context: quantum api request context DCNL : param id: UUID representing the network to update. DCNL : param network: dictionary with keys indicating fields to update. DCNL valid keys are those that have a value of True for \'allow_put\' DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.'
'Retrieve a network. DCNL : param context: quantum api request context DCNL : param id: UUID representing the network to fetch. DCNL : param fields: a list of strings that are valid keys in a DCNL network dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Retrieve a list of networks.  The contents of the list depends on DCNL the identity of the user making the request (as indicated by the DCNL context) as well as any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a network as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL : param fields: a list of strings that are valid keys in a DCNL network dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Return the number of networks.  The result depends on the identity DCNL of the user making the request (as indicated by the context) as well DCNL as any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a network as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL NOTE: this method is optional, as it was not part of the originally DCNL defined plugin API.'
'Delete a network. DCNL : param context: quantum api request context DCNL : param id: UUID representing the network to delete.'
'Create a port, which is a connection point of a device (e.g., a VM DCNL NIC) to attach to a L2 Quantum network. DCNL : param context: quantum api request context DCNL : param port: dictionary describing the port, with keys DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.  All keys will be populated.'
'Update values of a port. DCNL : param context: quantum api request context DCNL : param id: UUID representing the port to update. DCNL : param port: dictionary with keys indicating fields to update. DCNL valid keys are those that have a value of True for \'allow_put\' DCNL as listed in the RESOURCE_ATTRIBUTE_MAP object in DCNL quantum/api/v2/attributes.py.'
'Retrieve a port. DCNL : param context: quantum api request context DCNL : param id: UUID representing the port to fetch. DCNL : param fields: a list of strings that are valid keys in a DCNL port dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Retrieve a list of ports.  The contents of the list depends on DCNL the identity of the user making the request (as indicated by the DCNL context) as well as any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a port as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL : param fields: a list of strings that are valid keys in a DCNL port dictionary as listed in the RESOURCE_ATTRIBUTE_MAP DCNL object in quantum/api/v2/attributes.py. Only these fields DCNL will be returned.'
'Return the number of ports.  The result depends on the identity of DCNL the user making the request (as indicated by the context) as well as DCNL any filters. DCNL : param context: quantum api request context DCNL : param filters: a dictionary with keys that are valid keys for DCNL a network as listed in the RESOURCE_ATTRIBUTE_MAP object DCNL in quantum/api/v2/attributes.py.  Values in this dictiontary DCNL are an iterable containing values that will be used for an exact DCNL match comparison for that value.  Each result returned by this DCNL function will have matched one of the values for each key in DCNL filters. DCNL NOTE: this method is optional, as it was not part of the originally DCNL defined plugin API.'
'Delete a port. DCNL : param context: quantum api request context DCNL : param id: UUID representing the port to delete.'
'Run a WSGI server with the given application.'
'Wait until all servers have completed running.'
'Start a WSGI server in a new green thread.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = nova.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import nova.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Determine the most acceptable content-type. DCNL Based on: DCNL 1) URI extension (.json/.xml) DCNL 2) Content-type header DCNL 3) Accept* headers'
'Find and call local method.'
':param metadata: information needed to deserialize xml into DCNL a dictionary. DCNL :param xmlns: XML namespace to include with serialized xml'
':param data: expect data to contain a single key as XML root, or DCNL contain another \'*_links\' key as atom links. Other DCNL case will use \'VIRTUAL_ROOT_KEY\' as XML root.'
'Recursive method to convert data members to XML nodes.'
'Serialize a dict into a string and wrap in a wsgi.Request object. DCNL :param response_data: dict produced by the Controller DCNL :param content_type: expected mimetype of serialized response body'
':param metadata: information needed to deserialize xml into DCNL a dictionary.'
'Convert a minidom node to a simple Python type. DCNL :param listnames: list of XML node names whose subnodes should DCNL be considered list items.'
'Extract necessary pieces of the request. DCNL :param request: Request object DCNL :returns tuple of expected controller action name, dictionary of DCNL keyword arguments to pass to the controller, the expected DCNL content type of the response'
'Parse dictionary created by routes library.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = nova.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import quantum.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Iterator that prints the contents of a wrapper string iterator DCNL when iterated.'
'Returns an instance of the WSGI Router class'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be a wsgi.Controller, who will route DCNL the request to the action method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, "/svrlist", controller=sc, action="list") DCNL # Actions are all implicitly defined DCNL mapper.resource("network", "networks", controller=nc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, "/v1.0/{path_info:.*}", controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
':param controller: object that implement methods created by routes lib DCNL :param deserializer: object that can serialize the output of a DCNL controller into a webob response DCNL :param serializer: object that can deserialize a webob request DCNL into necessary pieces DCNL :param fault_body_function: a function that will build the response DCNL body for HTTP errors raised by operations DCNL on this resource object'
'WSGI method that controls (de)serialization and method dispatch.'
'Find action-spefic method on controller and call it.'
'Creates a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Call the method specified in req.environ by RoutesMiddleware.'
'Serialize the given dict to the provided content_type. DCNL Uses self._serialization_metadata if it exists, which is a dict mapping DCNL MIME types to information needed to serialize to that type.'
'Deserialize the request body to the specefied content type. DCNL Uses self._serialization_metadata if it exists, which is a dict mapping DCNL MIME types to information needed to serialize to that type.'
'Provide the XML namespace to use if none is otherwise specified.'
'Create a serializer based on the given WSGI environment. DCNL \'metadata\' is an optional dict mapping MIME types to information DCNL needed to serialize a dictionary to that type.'
'Serialize a dictionary into the specified content type.'
'Deserialize a string to a dictionary. DCNL The string must be in the format of a supported MIME type.'
'Schedule the network to an active DHCP agent if there DCNL is no active DHCP agent hosting it.'
'Schedule non-hosted networks to the DHCP agent on DCNL the specified host.'
'Schedule non-hosted routers to L3 Agent running on host. DCNL If router_id is given, only this router is scheduled DCNL if it is not hosted yet. DCNL Don\'t schedule the routers which are hosted already DCNL by active l3 agents.'
'Schedule the router to an active L3 agent if there DCNL is no enable L3 agent hosting it.'
':param read_deleted: \'no\' indicates deleted records are hidden, \'yes\' DCNL indicates deleted records are visible, \'only\' indicates that DCNL *only* deleted records are visible.'
'Return a version of this context with admin flag set.'
'Only check that the first argument (command) matches exec_path'
'Returns command to execute (with sudo -u if run_as != root).'
'Returns specific environment to set, None if none'
'This matches the combination of the leading env DCNL vars plus "dnsmasq"'
'This matches the combination of the leading env DCNL vars plus "ip" "netns" "exec" <foo> "dnsmasq"'
'Returns the help text for this step.'
'Adds an error to the Action\'s Step based on API issues.'
'Handles any requisite processing for this action. The method should DCNL return either ``None`` or a dictionary of data to be passed to DCNL :meth:`~horizon.workflows.Step.contribute`. DCNL Returns ``None`` by default, effectively making it a no-op.'
'Allows for customization of how the workflow context is passed to the DCNL action; this is the reverse of what "contribute" does to make the DCNL action outputs sane for the workflow. Changes to the context are not DCNL saved globally here. They are localized to the action. DCNL Simply returns the unaltered context by default.'
'Returns the ID for this step. Suitable for use in HTML markup.'
'Adds the data listed in ``contributes`` to the workflow\'s shared DCNL context. By default, the context is simply updated with all the data DCNL returned by the action. DCNL Note that even if the value of one of the ``contributes`` keys is DCNL not present (e.g. optional) the key should still be added to the DCNL context with a value of ``None``.'
'Renders the step.'
'Returns the help text for this step.'
'Adds an error to the Step based on API issues.'
'Returns the instantiated step matching the given slug.'
'Returns the slug of the step which the workflow should begin on. DCNL This method takes into account both already-available data and errors DCNL within the steps.'
'Registers a :class:`~horizon.workflows.Step` with the workflow.'
'Unregisters a :class:`~horizon.workflows.Step` from the workflow.'
'Hook for custom context data validation. Should return a boolean DCNL value or raise :class:`~horizon.exceptions.WorkflowValidationError`.'
'Verified that all required data is present in the context and DCNL calls the ``validate`` method to allow for finer-grained checks DCNL on the context data.'
'Finalizes a workflow by running through all the actions in order DCNL and calling their ``handle`` methods. Returns ``True`` on full success, DCNL or ``False`` for a partial success, e.g. there were non-critical DCNL errors. (If it failed completely the function wouldn\'t return.)'
'Handles any final processing for this workflow. Should return a boolean DCNL value indicating success.'
'Returns a URL to redirect the user to upon completion. By default it DCNL will attempt to parse a ``success_url`` attribute on the workflow, DCNL which can take the form of a reversible URL pattern name, or a DCNL standard HTTP URL.'
'Hook to allow customization of the message returned to the user DCNL upon successful or unsuccessful completion of the workflow. DCNL By default it simply inserts the workflow\'s name into the message DCNL string.'
'Renders the workflow.'
'Returns the canonical URL for this workflow. DCNL This is used for the POST action attribute on the form element DCNL wrapping the workflow. DCNL For convenience it defaults to the value of DCNL ``request.get_full_path()`` with any query string stripped off, DCNL e.g. the path at which the workflow was requested.'
'Adds an error to the workflow\'s Step with the DCNL specifed slug based on API issues. This is useful DCNL when you wish for API errors to appear as errors on DCNL the form rather than using the messages framework.'
'Returns initial data for the workflow. Defaults to using the GET DCNL parameters to allow pre-seeding of the workflow context values.'
'Returns the instanciated workflow class.'
'Returns the template context, including the workflow class. DCNL This method should be overridden in subclasses to provide additional DCNL context data to the template.'
'Returns the template name to use for this request.'
'Handler for HTTP GET requests.'
'Handler for HTTP POST requests.'
'Returns the raw data for this column, before any filters or formatting DCNL are applied to it. This is useful when doing calculations on data in DCNL the table.'
'Returns the final display data for this column from the given inputs. DCNL The return value will be either the attribute specified for this column DCNL or the return value of the attr:`~horizon.tables.Column.transform` DCNL method for this column.'
'Returns the final value for the column\'s ``link`` property. DCNL If ``allowed_data_types`` of this column  is not empty and the datum DCNL has an assigned type, check if the datum\'s type is in the DCNL ``allowed_data_types`` list. If not, the datum won\'t be displayed DCNL as a link. DCNL If ``link`` is a callable, it will be passed the current data object DCNL and should return a URL. Otherwise ``get_link_url`` will attempt to DCNL call ``reverse`` on ``link`` with the object\'s id as a parameter. DCNL Failing that, it will simply return the value of ``link``.'
'Returns the summary value for the data in this column if a DCNL valid summation method is specified for it. Otherwise returns ``None``.'
'Load the row\'s data (either provided at initialization or as an DCNL argument to this function), initiailize all the cells contained DCNL by this row, and set the appropriate row properties which require DCNL the row\'s data to be determined. DCNL This function is called automatically by DCNL :meth:`~horizon.tables.Row.__init__` if the ``datum`` argument is DCNL provided. However, by not providing the data during initialization DCNL this function allows for the possibility of a two-step loading DCNL pattern when you need a row instance but don\'t yet have the data DCNL available.'
'Returns the bound cells for this row in order.'
'Fetches the updated data for the row based on the object id DCNL passed in. Must be implemented by a subclass to allow AJAX updating.'
'Returns a formatted version of the data for final output. DCNL This takes into consideration the DCNL :attr:`~horizon.tables.Column.link`` and DCNL :attr:`~horizon.tables.Column.empty_value` DCNL attributes.'
'Gets the status for the column based on the cell\'s data.'
'Returns a css class name determined by the status value.'
'Returns a flattened string of the cell\'s CSS classes.'
'Renders the table using the template from the table options.'
'Returns the canonical URL for this table. DCNL This is used for the POST action attribute on the form element DCNL wrapping the table. In many cases it is also useful for redirecting DCNL after a successful action on the table. DCNL For convenience it defaults to the value of DCNL ``request.get_full_path()`` with any query string stripped off, DCNL e.g. the path at which the table was requested.'
'Returns the message to be displayed when there is no data.'
'Returns the data object from the table\'s dataset which matches DCNL the ``lookup`` parameter specified. An error will be raised if DCNL the match is not a single data object. DCNL Uses :meth:`~horizon.tables.DataTable.get_object_id` internally.'
'Boolean. Indicates whether there are any available actions on this DCNL table.'
'Boolean. Indicates whather this table should be rendered wrapped in DCNL a ``<form>`` tag or not.'
'Returns a list of the action instances for this table.'
'Returns a list of the action instances for a specific row.'
'Renders the actions specified in ``Meta.table_actions``.'
'Renders the actions specified in ``Meta.row_actions`` using the DCNL current row data.'
'Parses the ``action`` parameter (a string) sent back with the DCNL POST data. By default this parses a string formatted as DCNL ``{{ table_name }}__{{ action_name }}__{{ row_id }}`` and returns DCNL each of the pieces. The ``row_id`` is optional.'
'Locates the appropriate action and routes the object DCNL data to it. The action should return an HTTP redirect DCNL if successful, or a value which evaluates to ``False`` DCNL if unsuccessful.'
'Determine whether the request should be handled by this table.'
'Determine whether the request should be handled by a preemptive action DCNL on this table or by an AJAX row update before loading any data.'
'Determine whether the request should be handled by any action on this DCNL table after data has been loaded.'
'Override to modify an incoming obj_id to match existing DCNL API data types or modify the format.'
'Returns the identifier for the object this row will represent. DCNL By default this returns an ``id`` attribute on the given object, DCNL but this can be overridden to return other values. DCNL .. warning:: DCNL Make sure that the value returned is a unique value for the id DCNL otherwise rendering issues can occur.'
'Returns a display name that identifies this object. DCNL By default, this returns a ``name`` attribute from the given object, DCNL but this can be overriden to return other values.'
'Returns a boolean value indicating whether there is more data DCNL available to this table from the source (generally an API). DCNL The method is largely meant for internal use, but if you want to DCNL override it to provide custom behavior you can do so at your own risk.'
'Returns the identifier for the last object in the current data set DCNL for APIs that use marker/limit-based paging.'
'Returns the query parameter string to paginate this table.'
'Returns a boolean value determining the overall row status DCNL based on the dictionary of column name to status mappings passed in. DCNL By default, it uses the following logic: DCNL #. If any statuses are ``False``, return ``False``. DCNL #. If no statuses are ``False`` but any or ``None``, return ``None``. DCNL #. If all statuses are ``True``, return ``True``. DCNL This provides the greatest protection against false positives without DCNL weighting any particular columns. DCNL The ``statuses`` parameter is passed in as a dictionary mapping DCNL column names to their statuses in order to allow this function to DCNL be overridden in such a way as to weight one column\'s status over DCNL another should that behavior be desired.'
'Returns a css class name determined by the status value. This class DCNL name is used to indicate the status of the rows in the table if DCNL any ``status_columns`` have been specified.'
'Returns this table\'s columns including auto-generated ones.'
'Return the row data for this table broken out by columns.'
'Method to see if the action is allowed for a certain type of data. DCNL Only affects mixed data type tables.'
'Determine whether this action is allowed for the current request. DCNL This method is meant to be overridden with more specific checks.'
'Allows per-action customization based on current conditions. DCNL This is particularly useful when you wish to create a "toggle" DCNL action that will be rendered differently based on the value of an DCNL attribute on the current row\'s data. DCNL By default this method is a no-op.'
'Returns a list of the default classes for the action. Defaults to DCNL ``["btn", "btn-small"]``.'
'Returns a list of the default HTML attributes for the action. Defaults DCNL to returning an ``id`` attribute with the value DCNL ``{{ table.name }}__action_{{ action.name }}__{{ creation counter }}``.'
'Returns the full POST parameter name for this action. DCNL Defaults to DCNL ``{{ table.name }}__{{ action.name }}``.'
'Returns the final URL based on the value of ``url``. DCNL If ``url`` is callable it will call the function. DCNL If not, it will then try to call ``reverse`` on ``url``. DCNL Failing that, it will simply return the value of ``url`` as-is. DCNL When called for a row action, the current row data object will be DCNL passed as the first parameter.'
'Returns the full query parameter name for this action. DCNL Defaults to DCNL ``{{ table.name }}__{{ action.name }}__{{ action.param_name }}``.'
'Provides the actual filtering logic. DCNL This method must be overridden by subclasses and return DCNL the filtered data.'
'Returns a list of dictionaries describing the fixed buttons DCNL to use for filtering. DCNL Each list item should be a dict with the keys: DCNL text:  Text to display on the button DCNL icon:  Icon class for icon element (inserted before text). DCNL value: Value returned when the button is clicked. DCNL This value is passed to ``filter()`` as DCNL ``filter_string``.'
'Override to separate images into categories. DCNL Return a dict with a key for the value of each fixed button, DCNL and a value that is a list of images in that category.'
'Builds combinations like \'Delete Object\' and \'Deleted DCNL Objects\' based on the number of items and `past` flag.'
'Required. Accepts a single object id and performs the specific action. DCNL Return values are discarded, errors raised are caught and logged.'
'Switches the action verbose name, if needed'
'Returns the URL to redirect to after a successful action.'
'Registers the given class. DCNL If the specified class is already registered then it is ignored.'
'Unregisters the given class. DCNL If the specified class isn\'t registered, ``NotRegistered`` will DCNL be raised.'
'Returns the default URL for this panel. DCNL The default URL is defined as the URL pattern with ``name="index"`` in DCNL the URLconf for this panel.'
'Returns the specified :class:`~horizon.Panel` instance registered DCNL with this dashboard.'
'Returns the :class:`~horizon.Panel` instances registered with this DCNL dashboard in order, without any panel groupings.'
'Returns the default URL for this dashboard. DCNL The default URL is defined as the URL pattern with ``name="index"`` DCNL in the URLconf for the :class:`~horizon.Panel` specified by DCNL :attr:`~horizon.Dashboard.default_panel`.'
'Discovers panels to register from the current dashboard module.'
'Registers a :class:`~horizon.Panel` with this dashboard.'
'Unregisters a :class:`~horizon.Panel` from this dashboard.'
'Registers a :class:`~horizon.Dashboard` with Horizon.'
'Unregisters a :class:`~horizon.Dashboard` from Horizon.'
'Returns the specified :class:`~horizon.Dashboard` instance.'
'Returns an ordered tuple of :class:`~horizon.Dashboard` modules. DCNL Orders dashboards according to the ``"dashboards"`` key in DCNL ``HORIZON_CONFIG`` or else returns all registered dashboards DCNL in alphabetical order. DCNL Any remaining :class:`~horizon.Dashboard` classes registered with DCNL Horizon but not listed in ``HORIZON_CONFIG[\'dashboards\']`` DCNL will be appended to the end of the list alphabetically.'
'Returns the default :class:`~horizon.Dashboard` instance. DCNL If ``"default_dashboard"`` is specified in ``HORIZON_CONFIG`` DCNL then that dashboard will be returned. If not, the first dashboard DCNL returned by :func:`~horizon.get_dashboards` will be returned.'
'Returns the default URL for a particular user. DCNL This method can be used to customize where a user is sent when DCNL they log in, etc. By default it returns the value of DCNL :meth:`get_absolute_url`. DCNL An alternative function can be supplied to customize this behavior DCNL by specifying a either a URL or a function which returns a URL via DCNL the ``"user_home"`` key in ``HORIZON_CONFIG``. Each of these DCNL would be valid:: DCNL {"user_home": "/home",}  # A URL DCNL {"user_home": "my_module.get_user_home",}  # Path to a function DCNL {"user_home": lambda user: "/" + user.name,}  # A function DCNL {"user_home": None,}  # Will always return the default dashboard DCNL This can be useful if the default dashboard may not be accessible DCNL to all users. When user_home is missing from HORIZON_CONFIG, DCNL it will default to the settings.LOGIN_REDIRECT_URL value.'
'Returns the default URL for Horizon\'s URLconf. DCNL The default URL is determined by calling DCNL :meth:`~horizon.Dashboard.get_absolute_url` DCNL on the :class:`~horizon.Dashboard` instance returned by DCNL :meth:`~horizon.get_default_dashboard`.'
'Lazy loading for URL patterns. DCNL This method avoids problems associated with attempting to evaluate DCNL the the URLconf before the settings module has been loaded.'
'Constructs the URLconf for Horizon from registered Dashboards.'
'Discovers modules to register from ``settings.INSTALLED_APPS``. DCNL This makes sure that the appropriate modules get imported to register DCNL themselves with Horizon.'
'Sets the table instances on the browser from a dictionary mapping table DCNL names to table instances (as constructed by MultiTableView).'
'Renders the table using the template from the table options.'
'Parses a date-like input string into a timezone aware Python datetime.'
'Replaces the values of variables marked as sensitive with DCNL stars (*********).'
'Adds an error to the form\'s error dictionary after validation DCNL based on problems reported via the API. This is useful when you DCNL wish for API errors to appear as errors on the form rather than DCNL using the messages framework.'
'For dynamic insertion of resources created in modals, this method DCNL returns the id of the created object. Defaults to returning the ``id`` DCNL attribute.'
'For dynamic insertion of resources created in modals, this method DCNL returns the display name of the created object. Defaults to returning DCNL the ``name`` attribute.'
'Returns an instance of the form to be used in this view.'
'Clears out the URL caches, reloads the root urls module, and DCNL re-triggers the autodiscovery mechanism for Horizon. Allows URLs DCNL to be re-calculated after registering new dashboards. Useful DCNL only for testing and should never be used on a live site.'
'Verify registration and autodiscovery work correctly. DCNL Please note that this implicitly tests that autodiscovery works DCNL by virtue of the fact that the dashboards listed in DCNL ``settings.INSTALLED_APPS`` are loaded from the start.'
'Isolation Test Part 1: sets a value.'
'Isolation Test Part 2: The value set in part 1 should be gone.'
'Tests everything that happens when the table is instantiated.'
'Render a Custom Template Tag to string'
'Test if site_branding tag renders the correct setting'
'Asserts that no messages have been attached by the ``contrib.messages`` DCNL framework.'
'Asserts that the specified number of messages have been attached DCNL for various message types. Usage would look like DCNL ``self.assertMessageCount(success=1)``.'
'Preload all data that for the tabs that will be displayed.'
'Returns the id for this tab group. Defaults to the value of the tab DCNL group\'s :attr:`horizon.tabs.Tab.slug`.'
'Returns a list of the default classes for the tab group. Defaults to DCNL ``["nav", "nav-tabs", "ajax-tabs"]``.'
'In the event that no tabs are either allowed or enabled, this method DCNL is the fallback handler. By default it\'s a no-op, but it exists DCNL to make redirecting or raising exceptions possible for subclasses.'
'Renders the HTML output for this tab group.'
'Returns a list of the allowed tabs for this tab group.'
'Returns a specific tab from this tab group. DCNL If the tab is not allowed or not enabled this method returns ``None``. DCNL If the tab is disabled but you wish to return it anyway, you can pass DCNL ``True`` to the allow_disabled argument.'
'Returns the tab specific by the GET request parameter. DCNL In the event that there is no GET request parameter, the value DCNL of the query parameter is invalid, or the tab is not allowed/enabled, DCNL the return value of this function is None.'
'Method to access whether or not this tab is the active tab.'
'Renders the tab to HTML using the DCNL :meth:`~horizon.tabs.Tab.get_context_data` method and DCNL the :meth:`~horizon.tabs.Tab.get_template_name` method. DCNL If :attr:`~horizon.tabs.Tab.preload` is ``False`` and ``force_load`` DCNL is not ``True``, or DCNL either :meth:`~horizon.tabs.Tab.allowed` or DCNL :meth:`~horizon.tabs.Tab.enabled` returns ``False`` this method will DCNL return an empty string.'
'Returns the id for this tab. Defaults to DCNL ``"{{ tab_group.slug }}__{{ tab.slug }}"``.'
'Returns a list of the default classes for the tab. Defaults to DCNL and empty list (``[]``), however additional classes may be added DCNL depending on the state of the tab as follows: DCNL If the tab is the active tab for the tab group, in which DCNL the class ``"active"`` will be added. DCNL If the tab is not enabled, the classes the class ``"disabled"`` DCNL will be added.'
'Returns the name of the template to be used for rendering this tab. DCNL By default it returns the value of the ``template_name`` attribute DCNL on the ``Tab`` class.'
'This method should return a dictionary of context data used to render DCNL the tab. Required.'
'Determines whether or not the tab should be accessible DCNL (e.g. be rendered into the HTML on load and respond to a click event). DCNL If a tab returns ``False`` from ``enabled`` it will ignore the value DCNL of ``preload`` and only render the HTML of the tab after being clicked. DCNL The default behavior is to return ``True`` for all cases.'
'Determines whether or not the tab is displayed. DCNL Tab instances can override this method to specify conditions under DCNL which this tab should not be shown at all by returning ``False``. DCNL The default behavior is to return ``True`` for all cases.'
'Calls the ``get_{{ table_name }}_data`` methods for each table class DCNL and sets the data on the tables.'
'Adds a ``{{ table_name }}_table`` item to the context for each table DCNL in the :attr:`~horizon.tabs.TableTab.table_classes` attribute. DCNL If only one table class is provided, a shortcut ``table`` context DCNL variable is also added containing the single table.'
'Returns the initialized tab group for this view.'
'Adds the ``tab_group`` variable to the context data.'
'Sends back an AJAX-appropriate response for the tab group if DCNL required, otherwise renders the response as normal.'
'Loads the tab group, and compiles the table instances for each DCNL table attached to any :class:`horizon.tabs.TableTab` instances on DCNL the tab group. This step is necessary before processing any DCNL tab or table actions.'
'A no-op on this class. Tables are handled at the tab level.'
'For the given dict containing a ``DataTable`` and a ``TableTab`` DCNL instance, it loads the table data for that tab and calls the DCNL table\'s :meth:`~horizon.tables.DataTable.maybe_handle` method. The DCNL return value will be the result of ``maybe_handle``.'
'This method should handle any necessary API calls, update the DCNL context object, and return the context object at the end.'
'Adds data necessary for Horizon to function to the request.'
'Catches internal Horizon exception classes such as NotAuthorized, DCNL NotFound and Http302 and handles them gracefully.'
'Convert HttpResponseRedirect to HttpResponse if request is via ajax DCNL to allow ajax request to redirect url'
'Returns an iterable of default classes which should be combined with DCNL any other declared classes.'
'Returns a dict of default attributes which should be combined with DCNL other declared attributes.'
'Returns a dict containing the final attributes of this element DCNL which will be rendered.'
'Returns a flattened string of HTML attributes based on the DCNL ``attrs`` dict provided to the class.'
'Returns a list of class name of HTML Element in string'
'Return the function\'s docstring.'
'Support instance methods.'
'Wraps transmitted rule info in the novaclient rule class.'
'Fetches a list of all floating IP pools. DCNL A list of FloatingIpPool objects is returned. DCNL FloatingIpPool object is an APIResourceWrapper/APIDictWrapper DCNL where \'id\' and \'name\' attributes are defined.'
'Fetches a list all floating IPs. DCNL A returned value is a list of FloatingIp object.'
'Fetches the floating IP. DCNL It returns a FloatingIp object corresponding to floating_ip_id.'
'Allocates a floating IP to the tenant. DCNL You must provide a pool name or id for which you would like to DCNL allocate an floating IP.'
'Releases a floating IP specified.'
'Associates the floating IP to the port. DCNL port_id is a fixed IP of a instance (Nova) or DCNL a port_id attached to a VNIC of a instance.'
'Disassociates the floating IP from the port. DCNL port_id is a fixed IP of a instance (Nova) or DCNL a port_id attached to a VNIC of a instance.'
'Returns a list of association targets of instance VIFs. DCNL Each association target is represented as FloatingIpTarget object. DCNL FloatingIpTarget is a APIResourceWrapper/APIDictWrapper and DCNL \'id\' and \'name\' attributes must be defined in each object. DCNL FloatingIpTarget.id can be passed as port_id in associate(). DCNL FloatingIpTarget.name is displayed in Floating Ip Association Form.'
'Returns a target ID of floating IP association based on DCNL a backend implementation.'
'Returns True if the default floating IP pool is enabled.'
'Adds an internal tracking reference for the given quota.'
'Adds to the "used" metric for the given quota.'
'Updates the "available" metric for the given quota.'
'Returns the URL to redirect to after a successful action.'
'Returns a list of objects given the subfolder\'s path. DCNL The path is from the kwargs of the request.'
'Returns a list of objects within the current folder.'
'Returns a list of subfolders within the current folder.'
'Setup subnet parameters DCNL This methods setups subnet parameters which are available DCNL in both create and update.'
'Delete the created network when subnet creation failed'
'The form will not be valid if both copy_from and image_file are not DCNL provided.'
'If HORIZON_IMAGES_ALLOW_UPLOAD is false, the image_file field widget DCNL will be a HiddenInput widget instead of a FileInput widget.'
'Check to make sure password fields match.'
'Naive case-insensitive search'
'Really naive case-insensitive search.'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Tests api.keystone.remove_tenant_user DCNL Verifies that remove_tenant_user is called with the right arguments DCNL after iterating the user\'s roles. DCNL There are no assertions in this test because the checking is handled DCNL by mox in the VerifyAll() call in tearDown().'
'Asserts that the given response issued a 302 redirect without DCNL processing the view which is redirected to.'
'Asserts that the response either does not contain a form in it\'s DCNL context, or that if it does, that form has no errors.'
'Asserts that the response does contain a form in it\'s DCNL context, and that form has errors, if count were given, DCNL it must match the exact numbers of errors'
'Add a new object to this container. DCNL Generally this method should only be used during data loading, since DCNL adding data during a test can affect the results of other tests.'
'Returns a list of all objects in this container.'
'Returns objects in this container whose attributes match the given DCNL keyword arguments.'
'Returns the single object in this container whose attributes match DCNL the given keyword arguments. An error will be raised if the arguments DCNL provided don\'t return exactly one match.'
'Returns the first object from this container.'
'The hashes here were generated by running the same requests against DCNL boto.utils.canonical_string'
'Handle GET Service request'
'Handle GET Bucket (List Objects) request'
'Handle PUT Bucket request'
'Handle DELETE Bucket request'
'Handle POST Bucket (Delete/Upload Multiple Objects) request'
'Handle HEAD Object request'
'Handle GET Object request'
'Handle PUT Object and PUT Object (Copy) request'
'Handle DELETE Object request'
'Fake a transformerManager for pipeline DCNL The faked entry point setting is below: DCNL update: TransformerClass DCNL except: TransformerClassException DCNL drop:   TransformerClassDrop'
'Do not accept cross posting samples to different projects.'
'Send multiple samples. DCNL The usecase here is to reduce the chatter and send the counters DCNL at a slower cadence.'
'Do not accept posting samples with missing mandatory fields.'
'Do not accept a single post of mixed sources.'
'Do accept a single post with some null sources DCNL this is a convience feature so you only have to set DCNL one of the sample\'s source field.'
'Test even for arbitrary request method, this will still work.'
'Send a metering message for publishing DCNL :param context: Execution context from the service or RPC call DCNL :param counter: Counter from pipeline after transformation DCNL :param source: counter source'
'Send a metering message for publishing DCNL :param context: Execution context from the service or RPC call DCNL :param counter: Counter from pipeline after transformation DCNL :param source: counter source'
'Send a metering message for publishing DCNL :param context: Execution context from the service or RPC call DCNL :param counter: Counter from pipeline after transformation DCNL :param source: counter source'
'Return samples for the meter. DCNL :param q: Filter rules for the data to be returned. DCNL :param limit: Maximum number of samples to return.'
'Post a list of new Samples to Ceilometer. DCNL :param body: a list of samples within the request body.'
'Computes the statistics of the samples in the time range given. DCNL :param q: Filter rules for the data to be returned. DCNL :param period: Returned result will be an array of statistics for a DCNL period long of that number of seconds.'
'Return all known meters, based on the data recorded so far. DCNL :param q: Filter rules for the meters to be returned.'
'Retrieve details about one resource. DCNL :param resource_id: The UUID of the resource.'
'Retrieve definitions of all of the resources. DCNL :param q: Filter rules for the resources to be returned.'
'Create a new alarm.'
'Modify an alarm.'
'Delete an alarm.'
'Return one alarm.'
'Return all alarms, based on the query provided. DCNL :param q: Filter rules for the alarms to be returned.'
'Initializes client.'
'Returns a list of dicts describing all probes.'
'Returns a KwapiClient configured with the proper url and token.'
'Iterate over all probes.'
'Returns all counters.'
'Tasks to be run at a periodic interval.'
'Counter rules checking DCNL At least one meaningful counter exist DCNL Included type and excluded type counter can\'t co-exist at DCNL the same pipeline DCNL Included type counter and wildcard can\'t co-exist at same pipeline'
'Push counter into pipeline for publishing. DCNL param start: the first transformer that the counter will be injected. DCNL This is mainly for flush() invocation that transformer DCNL may emit counters DCNL param ctxt: execution context from the manager or service DCNL param counters: counter list DCNL param source: counter source'
'Flush data after all counter have been injected to pipeline.'
'Setup the pipelines according to config. DCNL The top of the cfg is a list of pipeline definitions. DCNL Pipeline definition is an dictionary specifying the target counters, DCNL the tranformers involved, and the target publishers: DCNL "name": pipeline_name DCNL "interval": interval_time DCNL "counters" :  ["counter_1", "counter_2"], DCNL "tranformers":[ DCNL {"name": "Transformer_1", DCNL "parameters": {"p1": "value"}}, DCNL {"name": "Transformer_2", DCNL "parameters": {"p1": "value"}}, DCNL "publishers": ["publisher_1", "publisher_2"] DCNL Interval is how many seconds should the counters be injected to DCNL the pipeline. DCNL Valid counter format is \'*\', \'!counter_name\', or \'counter_name\'. DCNL \'*\' is wildcard symbol means any counters; \'!counter_name\' means DCNL "counter_name" will be excluded; \'counter_name\' means \'counter_name\' DCNL will be included. DCNL The \'counter_name" is Counter namedtuple\'s name field. For counter DCNL names with variable like "instance:m1.tiny", it\'s "instance:*", as DCNL returned by get_counter_list(). DCNL Valid counters definition is all "included counter names", all DCNL "excluded counter names", wildcard and "excluded counter names", or DCNL only wildcard. DCNL Transformer\'s name is plugin name in setup.py. DCNL Publisher\'s name is plugin name in setup.py'
'Build a new Publisher for these manager pipelines. DCNL :param context: The context. DCNL :param source: Counter source.'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Serialize something to primitive form. DCNL :param context: Security context DCNL :param entity: Entity to be serialized DCNL :returns: Serialized form of entity'
'Deserialize something from primitive form. DCNL :param context: Security context DCNL :param entity: Primitive to be deserialized DCNL :returns: Deserialized form of entity'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis. DCNL :param version_cap: Optionally cap the maximum version used for sent DCNL messages. DCNL :param serializer: Optionaly (de-)serialize entities with a DCNL provided helper.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'Check to see if a version is compatible with the version cap.'
'Helper method called to serialize message arguments. DCNL This calls our serializer on each argument, returning a new DCNL set of args that have been serialized. DCNL :param context: The request context DCNL :param kwargs: The arguments to serialize DCNL :returns: A new set of serialized arguments'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool.'
'When with ConnectionContext() is used, return self.'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance.'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
'Initiates CallbackWrapper object. DCNL :param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending\' flag.'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute. DCNL :param serializer: The Serializer object that will be used to DCNL deserialize arguments before the method call and DCNL to serialize the result after it returns.'
'Helper method called to deserialize args before dispatch. DCNL This calls our serializer on each argument, returning a new set of DCNL args that have been deserialized. DCNL :param context: The request context DCNL :param kwargs: The arguments to be deserialized DCNL :returns: A new set of deserialized args'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param namespace: The namespace for the requested method.  If None, DCNL the dispatcher will look for a method on a callback DCNL object with no namespace set. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, but may also be used DCNL publically to acknowledge a system is alive (i.e. rpc message DCNL successfully sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, but may also be used DCNL publically to acknowledge a system is alive (i.e. rpc message DCNL successfully sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat. DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect.'
'Load the JSON data in msg if msg.content_type indicates that it DCNL is necessary.  Put the loaded data back into msg.content and DCNL update msg.content_type appropriately. DCNL A Qpid Message containing a dict will have a content_type of DCNL \'amqp/map\', whereas one containing a string that needs to be converted DCNL back from JSON will have a content_type of JSON_CONTENT_TYPE. DCNL :param msg: a Qpid Message object DCNL :returns: None'
'Fetch the message and pass it to the callback object.'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection.'
'Qpid cannot serialize dicts containing strings longer than 65535 DCNL characters.  This function dumps the message content to a JSON DCNL string, which Qpid is able to handle. DCNL :param msg: May be either a Qpid Message object or a bare dict. DCNL :returns: A Qpid Message with its content field JSON encoded.'
'Send a message.'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues.'
'Close/release this connection.'
'Reset a connection so it can be used again.'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers.'
'Cancel a consumer thread.'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class.'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer.'
'Send a \'direct\' message.'
'Send a \'topic\' message.'
'Send a \'fanout\' message.'
'Send a notify message on a topic.'
'Consume from all queues/consumers.'
'Consumer from all queues/consumers in a greenthread.'
'Create a consumer that calls a method in a proxy object.'
'Create a worker that calls a method in a proxy object.'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service.'
'Initiates Timeout object. DCNL :param info: Extra info to convey to the user DCNL :param topic: The topic that the rpc call was sent to DCNL :param rpc_method_name: The name of the rpc method being DCNL called'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers. DCNL Uses given topic from the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect.'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started.'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection.'
'Send a message.'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params should be used for the connection DCNL (if any).'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues.'
'Close/release this connection.'
'Reset a connection so it can be used again.'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers.'
'Cancel a consumer thread.'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class.'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer.'
'Send a \'direct\' message.'
'Send a \'topic\' message.'
'Send a \'fanout\' message.'
'Send a notify message on a topic.'
'Consume from all queues/consumers.'
'Consumer from all queues/consumers in a greenthread.'
'Create a consumer that calls a method in a proxy object.'
'Create a worker that calls a method in a proxy object.'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Save this object.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Mark this object as deleted.'
'Get the actual backend.  May be a module or an instance of DCNL a class.  Doesn\'t matter to us.  We do this synchronized as it\'s DCNL possible multiple greenthreads started very quickly trying to do DCNL DB calls and eventlet can switch threads before self.__backend gets DCNL assigned.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Allow loading of JSON rule data.'
'Initialize the Rules store.'
'Implements the default rule handling.'
'Dumps a string representation of the rules.'
'Create a new Rules object based on the provided dict of rules. DCNL :param rules: New rules to use. It should be an instance of dict. DCNL :param overwrite: Whether to overwrite current rules or update them DCNL with the new rules.'
'Clears Enforcer rules, policy\'s cache and policy\'s path.'
'Loads policy_path\'s rules. DCNL Policy file is cached and will be reloaded if modified. DCNL :param force_reload: Whether to overwrite current rules.'
'Locate the policy json data file. DCNL :param policy_file: Custom policy file to locate. DCNL :returns: The policy path DCNL :raises: ConfigFilesNotFoundError if the file couldn\'t DCNL be located.'
'Checks authorization of a rule against the target and credentials. DCNL :param rule: A string or BaseCheck instance specifying the rule DCNL to evaluate. DCNL :param target: As much information about the object being operated DCNL on as possible, as a dictionary. DCNL :param creds: As much information about the user performing the DCNL action as possible, as a dictionary. DCNL :param do_raise: Whether to raise an exception or not if check DCNL fails. DCNL :param exc: Class of the exception to raise if the check fails. DCNL Any remaining arguments passed to check() (both DCNL positional and keyword arguments) will be passed to DCNL the exception class. If not specified, PolicyNotAuthorized DCNL will be used. DCNL :return: Returns False if the policy does not allow the action and DCNL exc is not provided; otherwise, returns a value that DCNL evaluates to True.  Note: for rules using the "case" DCNL expression, this True value will be the specified string DCNL from the expression.'
'String representation of the Check tree rooted at this node.'
'Triggers if instance of the class is called. DCNL Performs the check. Returns False to reject the access or a DCNL true value (not necessary True) to accept the access.'
'Return a string representation of this check.'
'Check the policy.'
'Return a string representation of this check.'
'Check the policy.'
'Initiates Check instance. DCNL :param kind: The kind of the check, i.e., the field before the DCNL :param match: The match of the check, i.e., the field after DCNL the \':\'.'
'Return a string representation of this check.'
'Initialize the \'not\' check. DCNL :param rule: The rule to negate.  Must be a Check.'
'Return a string representation of this check.'
'Check the policy. DCNL Returns the logical inverse of the wrapped check.'
'Initialize the \'and\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy. DCNL Requires that all rules accept in order to return True.'
'Adds rule to be tested. DCNL Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the AndCheck object for convenience.'
'Initialize the \'or\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy. DCNL Requires that at least one rule accept in order to return True.'
'Adds rule to be tested. DCNL Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the OrCheck object for convenience.'
'Create the class. DCNL Injects the \'reducers\' list, a list of tuples matching token sequences DCNL to the names of the corresponding reduction methods.'
'Initialize the ParseState.'
'Perform a greedy reduction of the token stream. DCNL If a reducer method matches, it will be executed, then the DCNL reduce() method will be called recursively to search for any more DCNL possible reductions.'
'Adds one more token to the state.  Calls reduce().'
'Obtain the final result of the parse. DCNL Raises ValueError if the parse failed to reduce to a single result.'
'Turn parenthesized expressions into a \'check\' token.'
'Create an \'and_expr\'. DCNL Join two checks by the \'and\' operator.'
'Extend an \'and_expr\' by adding one more check.'
'Create an \'or_expr\'. DCNL Join two checks by the \'or\' operator.'
'Extend an \'or_expr\' by adding one more check.'
'Invert the result of another check.'
'Recursively checks credentials based on the defined rules.'
'Check that there is a matching role in the cred dict.'
'Check http: rules by calling to a remote server. DCNL This example implementation simply verifies that the response DCNL is exactly \'True\'.'
'Check an individual match. DCNL Matches look like: DCNL tenant:%(tenant_id)s DCNL role:compute:admin'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a service to finish. DCNL :param service: service to run and wait for. DCNL :returns: None'
'Load and start the given service. DCNL :param service: The service you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary.'
'Initialize a LocaleHandler DCNL :param locale: locale to use for translating messages DCNL :param target: logging.Handler object to forward DCNL LogRecord objects to after translation'
'Setup transformer. DCNL Each time a transformed is involved in a pipeline, a new transformer DCNL instance is created and chained into the pipeline. i.e. transformer DCNL instance is per pipeline. This helps if transformer need keep some DCNL cache and per-pipeline information. DCNL :param kwargs: The parameters that are defined in pipeline config file.'
'Flush counters cached previously. DCNL :param context: Passed from the data collector. DCNL :param source: Source of counters that are being published.'
'Iterate over all images.'
'Return a sequence of ExchangeTopics defining the exchange and DCNL topics to be connected for this plugin.'
'Returns a nova Client object.'
'Returns list of instances on particular host.'
'Returns all floating ips.'
'Return a Connection instance based on the configuration settings.'
'Write the data to the backend storage system. DCNL :param data: a dictionary such as returned by DCNL ceilometer.meter.meter_message_from_counter'
'Return an iterable of user id strings. DCNL :param source: Optional source filter.'
'Return an iterable of project id strings. DCNL :param source: Optional source filter.'
'Return an iterable of dictionaries containing resource information. DCNL { \'resource_id\': UUID of the resource, DCNL \'project_id\': UUID of project owning the resource, DCNL \'user_id\': UUID of user owning the resource, DCNL \'timestamp\': UTC datetime of last update to the resource, DCNL \'metadata\': most current metadata for the resource, DCNL \'meter\': list of the meters reporting data for the resource, DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param source: Optional source filter. DCNL :param start_timestamp: Optional modified timestamp start range. DCNL :param end_timestamp: Optional modified timestamp end range. DCNL :param metaquery: Optional dict with metadata to match on. DCNL :param resource: Optional resource filter.'
'Return an iterable of dictionaries containing meter information. DCNL { \'name\': name of the meter, DCNL \'type\': type of the meter (guage, counter), DCNL \'resource_id\': UUID of the resource, DCNL \'project_id\': UUID of project owning the resource, DCNL \'user_id\': UUID of user owning the resource, DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param resource: Optional resource filter. DCNL :param source: Optional source filter. DCNL :param limit: Maximum number of results to return. DCNL :param metaquery: Optional dict with metadata to match on.'
'Return an iterable of samples as created by DCNL :func:`ceilometer.meter.meter_message_from_counter`.'
'Return a dictionary containing meter statistics. DCNL described by the query parameters. DCNL The filter must have a meter value set. DCNL { \'min\': DCNL \'max\': DCNL \'avg\': DCNL \'sum\': DCNL \'count\': DCNL \'period\': DCNL \'period_start\': DCNL \'period_end\': DCNL \'duration\': DCNL \'duration_start\': DCNL \'duration_end\':'
'Yields a lists of alarms that match filters'
'update alarm'
'Write the events. DCNL :param events: a list of model.Event objects.'
'Return an iterable of model.Event objects. DCNL :param event_filter: EventFilter instance'
'Make the model object behave like a dict.'
'Create a new event. DCNL :param event_name:  Name of the event. DCNL :param generated:   UTC time for when the event occured. DCNL :param traits:      list of Traits on this Event.'
'Create a new resource. DCNL :param resource_id: UUID of the resource DCNL :param project_id:  UUID of project owning the resource DCNL :param source:      the identifier for the user/project id definition DCNL :param user_id:     UUID of user owning the resource DCNL :param metadata:    most current metadata for the resource (a dict) DCNL :param meter:       list of the meters reporting data for the resource,'
'Create a new resource meter. DCNL :param counter_name: the name of the counter updating the resource DCNL :param counter_type: one of gauge, delta, cumulative DCNL :param counter_unit: official units name for the sample data'
'Create a new meter. DCNL :param name: name of the meter DCNL :param type: type of the meter (guage, counter) DCNL :param unit: unit of the meter DCNL :param resource_id: UUID of the resource DCNL :param project_id: UUID of project owning the resource DCNL :param source: the identifier for the user/project id definition DCNL :param user_id: UUID of user owning the resource'
'Create a new sample. DCNL :param source: the identifier for the user/project id definition DCNL :param counter_name: the name of the measurement being taken DCNL :param counter_type: the type of the measurement DCNL :param counter_unit: the units for the measurement DCNL :param counter_volume: the measured value DCNL :param user_id: the user that triggered the measurement DCNL :param project_id: the project that owns the resource DCNL :param resource_id: the thing on which the measurement was taken DCNL :param timestamp: the time of the measurement DCNL :param resource_metadata: extra details about the resource DCNL :param message_id: a message identifier DCNL :param message_signature: a hash created from the rest of the DCNL message data'
'Create a new statistics object. DCNL :param min: The smallest volume found DCNL :param max: The largest volume found DCNL :param avg: The average of all volumes found DCNL :param sum: The total of all volumes found DCNL :param count: The number of samples found DCNL :param period: The length of the time range covered by these stats DCNL :param period_start: The timestamp for the start of the period DCNL :param period_end: The timestamp for the end of the period DCNL :param duration: The total time for the matching samples DCNL :param duration_start: The earliest time for the matching samples DCNL :param duration_end: The latest time for the matching samples'
'Register any configuration options used by this engine.'
'Return a Connection instance based on the configuration settings.'
'Write the data to the backend storage system. DCNL :param data: a dictionary such as returned by DCNL ceilometer.meter.meter_message_from_counter'
'Return an iterable of user id strings. DCNL :param source: Optional source filter.'
'Return an iterable of project id strings. DCNL :param source: Optional source filter.'
'Return an iterable of api_models.Resource instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param source: Optional source filter. DCNL :param start_timestamp: Optional modified timestamp start range. DCNL :param end_timestamp: Optional modified timestamp end range. DCNL :param metaquery: Optional dict with metadata to match on. DCNL :param resource: Optional resource filter.'
'Return an iterable of api_models.Meter instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param resource: Optional ID of the resource. DCNL :param source: Optional source filter. DCNL :param metaquery: Optional dict with metadata to match on.'
'Return an iterable of api_models.Samples. DCNL :param sample_filter: Filter. DCNL :param limit: Maximum number of results to return.'
'Returns complex Meter counter_volume query for max and sum.'
'Return an iterable of api_models.Statistics instances containing DCNL meter statistics described by the query parameters. DCNL The filter must have a meter value set.'
'Yields a lists of alarms that match filters DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param enabled: Optional boolean to list disable alarm. DCNL :param alarm_id: Optional alarm_id to return one alarm.'
'update alarm DCNL :param alarm: the new Alarm to update'
'Delete a alarm DCNL :param alarm_id: ID of the alarm to delete'
'Find the UniqueName entry for a given key, creating DCNL one if necessary. DCNL This may result in a flush.'
'Make a new Trait from a Trait model. DCNL Doesn\'t flush or add to session.'
'Store a single Event, including related Traits.'
'Write the events to SQL database via sqlalchemy. DCNL :param event_models: a list of model.Event objects. DCNL Flush when they\'re all added, unless new UniqueNames are DCNL added along the way.'
'Return an iterable of model.Event objects. DCNL :param event_filter: EventFilter instance'
'Register any configuration options used by this engine.'
'Return a Connection instance based on the configuration settings.'
'Write the data to the backend storage system. DCNL :param data: a dictionary such as returned by DCNL ceilometer.meter.meter_message_from_counter'
'Return an iterable of user id strings. DCNL :param source: Optional source filter.'
'Return an iterable of project id strings. DCNL :param source: Optional source filter.'
'Return an iterable of models.Resource instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param source: Optional source filter. DCNL :param start_timestamp: Optional modified timestamp start range. DCNL :param end_timestamp: Optional modified timestamp end range. DCNL :param metaquery: Optional dict with metadata to match on. DCNL :param resource: Optional resource filter.'
'Return an iterable of models.Meter instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param resource: Optional resource filter. DCNL :param source: Optional source filter. DCNL :param metaquery: Optional dict with metadata to match on.'
'Return an iterable of model.Sample instances. DCNL :param sample_filter: Filter. DCNL :param limit: Maximum number of results to return.'
'Return an iterable of models.Statistics instance containing meter DCNL statistics described by the query parameters. DCNL The filter must have a meter value set.'
'Yields a lists of alarms that match filters'
'update alarm'
'Delete a alarm'
'Write the events. DCNL :param events: a list of model.Event objects.'
'Return an iterable of model.Event objects. DCNL :param event_filter: EventFilter instance'
'Register any configuration options used by this engine.'
'Return a Connection instance based on the configuration settings.'
'Hbase Connection Initialization'
'Return a connection to the database. DCNL .. note:: DCNL The tests use a subclass to override this and return an DCNL in-memory connection.'
'Parse connection parameters from a database url. DCNL .. note:: DCNL HBase Thrift does not support authentication and there is no DCNL database name, so we are not looking for these in the url.'
'Write the data to the backend storage system. DCNL :param data: a dictionary such as returned by DCNL ceilometer.meter.meter_message_from_counter'
'Return an iterable of user id strings. DCNL :param source: Optional source filter.'
'Return an iterable of project id strings. DCNL :param source: Optional source filter.'
'Return an iterable of models.Resource instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param source: Optional source filter. DCNL :param start_timestamp: Optional modified timestamp start range. DCNL :param end_timestamp: Optional modified timestamp end range. DCNL :param metaquery: Optional dict with metadata to match on.'
'Return an iterable of models.Meter instances DCNL :param user: Optional ID for user that owns the resource. DCNL :param project: Optional ID for project that owns the resource. DCNL :param resource: Optional resource filter. DCNL :param source: Optional source filter. DCNL :param metaquery: Optional dict with metadata to match on.'
'Return an iterable of models.Sample instances. DCNL :param sample_filter: Filter. DCNL :param limit: Maximum number of results to return.'
'Do the stats calculation on a requested time bucket in stats dict DCNL :param stats: dict where aggregated stats are kept DCNL :param index: time bucket index in stats DCNL :param meter: meter record as returned from HBase DCNL :param start_time: query start time DCNL :param period: length of the time bucket'
'Return an iterable of models.Statistics instances containing meter DCNL statistics described by the query parameters. DCNL The filter must have a meter value set. DCNL .. note:: DCNL Due to HBase limitations the aggregations are implemented DCNL in the driver itself, therefore this method will be quite slow DCNL because of all the Thrift traffic it is going to create.'
'Yields a lists of alarms that match filters DCNL raise NotImplementedError(\'metaquery not implemented\')'
'update alarm'
'Delete a alarm'
'Write the events. DCNL :param events: a list of model.Event objects.'
'Return an iterable of model.Event objects. DCNL :param event_filter: EventFilter instance'
'This method is called from scan() when \'SingleColumnValueFilter\' DCNL is found in the \'filter\' argument'
'Return boolean indicating whether this plugin should DCNL be enabled and used by the caller.'
'Transform a payload dict to a metadata dict.'
'Return a sequence of ExchangeTopics defining the exchange and DCNL topics to be connected for this plugin.'
'For nova notifier usage.'
'Poll one instance.'
'Return a sequence of ExchangeTopics defining the exchange and DCNL topics to be connected for this plugin.'
'List the instances on the current host.'
'Inspect the CPU statistics for an instance. DCNL :param instance_name: the name of the target instance DCNL :return: the number of CPUs and cumulative CPU time'
'Inspect the vNIC statistics for an instance. DCNL :param instance_name: the name of the target instance DCNL :return: for each vNIC, the number of bytes & packets DCNL received and transmitted'
'Inspect the disk statistics for an instance. DCNL :param instance_name: the name of the target instance DCNL :return: for each disk, the number of bytes & operations DCNL read and written, and the error count'
'Used with the extenaion manager map() method.'
'Bind the UDP socket and handle incoming data.'
'Consumers must be declared before consume_thread start.'
'Make a notification processed by an handler.'
'This method is triggered when metering data is DCNL cast from an agent.'
'Return a sequence of ExchangeTopics defining the exchange and topics DCNL to be connected for this plugin.'
'Set up for testing swift.object_server.ObjectController'
'Tear down for testing swift.object_server.ObjectController'
'Copied from swift.common.utils.split_path'
'The actual bug was a HEAD response coming out with a body because the DCNL Request object wasn\'t passed into the Response object\'s constructor. DCNL The Response object\'s __call__ method should be able to reify a DCNL Request object from the env it gets passed.'
'log_request() should send timing and byte-count counters for GET DCNL requests.  Also, __call__()\'s iter_response() function should DCNL statsd-log time to first byte (calling the passed-in start_response DCNL function), but only for GET requests.'
'Two identical rings should produce identical .gz files on disk. DCNL Only true on Python 2.7 or greater.'
'Test for https://bugs.launchpad.net/swift/+bug/845952'
'Test swift.common.db.ContainerBroker.__init__'
'Test swift.common.db.ContainerBroker throwing a conn away after DCNL unhandled exception'
'Test swift.common.db.ContainerBroker.empty'
'Test swift.common.db.ContainerBroker.delete_object'
'Test swift.common.db.ContainerBroker.put_object'
'Test swift.common.db.ContainerBroker.get_info'
'Test swift.common.db.ContainerBroker.list_objects_iter'
'Test swift.common.db.ContainerBroker.list_objects_iter'
'Test swift.common.db.ContainerBroker.list_objects_iter for a DCNL container that has an odd file with a trailing delimiter'
'test DatabaseBroker.newid'
'test DatabaseBroker.get_items_since'
'exercise the DatabaseBroker sync functions a bit'
'test DatabaseBroker.merge_items'
'test DatabaseBroker.merge_items'
'Test swift.common.db.AccountBroker.__init__'
'Test swift.common.db.AccountBroker throwing a conn away after DCNL exception'
'Test swift.common.db.AccountBroker.empty'
'Test swift.common.db.AccountBroker.delete_container'
'Test swift.common.db.AccountBroker.put_container'
'Test swift.common.db.AccountBroker.get_info'
'Test swift.common.db.AccountBroker.list_containers_iter'
'Test swift.common.db.AccountBroker.list_containers_iter for an DCNL account that has an odd file with a trailing delimiter'
'Ensure that a non-clean canonical_version never happens'
'Server.iter_pid_files is kinda boring, test the DCNL Server.pid_files stuff here as well'
'Pretend we are running as root.'
'Test swift.common.utils.normalize_timestamp'
'Test swift.common.utils.backward'
'Test swift.common.utils.split_account_path'
'Test swift.common.utils.validate_device_partition'
'Test swift.common.utils.NullLogger'
'Because the client library may not actually send a packet with DCNL sample_rate < 1, we keep trying until we get one through.'
'Set up for testing swift.object_server.ObjectController'
'Tear down for testing swift.object_server.ObjectController'
'This test case is to make sure that the disk file app_iter_ranges DCNL method all the paths being tested.'
'This test case tests when empty value passed into app_iter_ranges DCNL When ranges passed into the method is either empty array or None, DCNL this method will yield empty string'
'returns a DiskFile'
'Set up for testing swift.object_server.ObjectController'
'Tear down for testing swift.object_server.ObjectController'
'Test swift.object_server.ObjectController.POST'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.HEAD'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.GET'
'Test swift.object_server.ObjectController.DELETE'
'Test swift.object_server.ObjectController.__call__'
'After running xfs_repair, a partition directory could become a DCNL zero-byte file.  If this happens, collect_jobs() should clean it up and DCNL *not* create a job which will hit an exception as it tries to listdir() DCNL a file.'
'Set up for testing swift.account_server.AccountController'
'Tear down for testing swift.account_server.AccountController'
'Get the account ring.  Load it if it hasn\'t been yet.'
'Get paths to all of the partitions on each drive to be processed. DCNL :returns: a list of paths'
'Run the updator continuously.'
'Run the updater once.'
'Walk the path looking for container DBs and process them. DCNL :param path: path to walk'
'Process a container, and update the information in the account. DCNL :param dbfile: container DB to process'
'Report container info to an account server. DCNL :param node: node dictionary from the account ring DCNL :param part: partition the account is on DCNL :param container: container name DCNL :param put_timestamp: put timestamp DCNL :param delete_timestamp: delete timestamp DCNL :param count: object count in the container DCNL :param bytes: bytes used in the container'
'Get a DB broker for the container. DCNL :param drive: drive that holds the container DCNL :param part: partition the container is in DCNL :param account: account name DCNL :param container: container name DCNL :returns: ContainerBroker object'
'Update the account server(s) with latest container info. DCNL :param req: swob.Request object DCNL :param account: account name DCNL :param container: container name DCNL :param broker: container DB broker object DCNL :returns: if all the account requests return a 404 error code, DCNL HTTPNotFound response object, DCNL if the account cannot be updated due to a malformed header, DCNL an HTTPBadRequest response object, DCNL otherwise None.'
'Handle HTTP DELETE request.'
'Handle HTTP PUT request.'
'Handle HTTP HEAD request.'
'Will check the last parameter and if it starts with \'swift_bytes=\' will DCNL strip it off. Returns either the passed in content_type and size DCNL or the content_type without the swift_bytes param and its value as DCNL the new size. DCNL :params content_type: Content Type from db DCNL :params size: # bytes from db, an int DCNL :returns: tuple: content_type, size'
'Handle HTTP GET request.'
'Handle HTTP REPLICATE request (json-encoded RPC calls for replication.)'
'Handle HTTP POST request.'
'Run the container audit until stopped.'
'Run the container audit once.'
'Audits the given container path DCNL :param path: the path to a container db'
'read([size]) -> read at most size bytes, returned as a string. DCNL If the size argument is negative or omitted, read until EOF is reached. DCNL Notice that when in non-blocking mode, less data than what was DCNL requested may be returned, even if no size parameter was given.'
'Runs container sync scans until stopped.'
'Runs a single container sync scan.'
'Writes a report of the stats to the logger and resets the stats for the DCNL next report.'
'Checks the given path for a container database, determines if syncing DCNL is turned on for that database and, if so, sends any updates to the DCNL other container. DCNL :param path: the path to a container db'
'Sends the update the row indicates to the sync_to container. DCNL :param row: The updated row in the local database triggering the sync DCNL update. DCNL :param sync_to: The URL to the remote container. DCNL :param sync_key: The X-Container-Sync-Key to use when sending requests DCNL to the other container. DCNL :param broker: The local container database broker. DCNL :param info: The get_info result from the local container database DCNL broker. DCNL :returns: True on success'
'Encapsulates working with a database.'
'Create the DB DCNL :param put_timestamp: timestamp of initial PUT request'
'Mark the DB as deleted DCNL :param timestamp: delete timestamp'
'Checks the exception info to see if it indicates a quarantine situation DCNL (malformed or corrupted database). If not, the original exception will DCNL be reraised. If so, the database will be quarantined and a new DCNL sqlite3.DatabaseError will be raised indicating the action taken.'
'Use with the "with" statement; returns a database connection.'
'Use with the "with" statement; locks a database.'
'Re-id the database.  This should be called after an rsync. DCNL :param remote_id: the ID of the remote database being rsynced in'
'Used in replication to handle updating timestamps. DCNL :param created_at: create timestamp DCNL :param put_timestamp: put timestamp DCNL :param delete_timestamp: delete timestamp'
'Get a list of objects in the database between start and end. DCNL :param start: start ROWID DCNL :param count: number to get DCNL :returns: list of objects between start and end'
'Gets the most recent sync point for a server from the sync table. DCNL :param id: remote ID to get the sync_point for DCNL :param incoming: if True, get the last incoming sync, otherwise get DCNL the last outgoing sync DCNL :returns: the sync point, or -1 if the id doesn\'t exist.'
'Get a serialized copy of the sync table. DCNL :param incoming: if True, get the last incoming sync, otherwise get DCNL the last outgoing sync DCNL :returns: list of {\'remote_id\', \'sync_point\'}'
'Get information about the DB required for replication. DCNL :returns: dict containing keys: hash, id, created_at, put_timestamp, DCNL delete_timestamp, count, max_row, and metadata'
'Merge a list of sync points with the incoming sync table. DCNL :param sync_points: list of sync points where a sync point is a dict of DCNL {\'sync_point\', \'remote_id\'} DCNL :param incoming: if True, get the last incoming sync, otherwise get DCNL the last outgoing sync'
'The idea is to allocate space in front of an expanding db.  If it gets DCNL within 512k of a boundary, it allocates to the next boundary. DCNL Boundaries are 2m, 5m, 10m, 25m, 50m, then every 50m after.'
'Returns the metadata dict for the database. The metadata dict values DCNL are tuples of (value, timestamp) where the timestamp indicates when DCNL that key was set to that value.'
'Updates the metadata dict for the database. The metadata dict values DCNL are tuples of (value, timestamp) where the timestamp indicates when DCNL that key was set to that value. Key/values will only be overwritten if DCNL the timestamp is newer. To delete a key, set its value to (\'\', DCNL timestamp). These empty keys will eventually be removed by DCNL :func:reclaim'
'Removes any empty metadata values older than the timestamp'
'Removes any empty metadata values older than the timestamp using the DCNL given database connection. This function will not call commit on the DCNL conn, but will instead return True if the database needs committing. DCNL This function was created as a worker to limit transactions and commits DCNL from other related functions. DCNL :param conn: Database connection to reclaim metadata within. DCNL :param timestamp: Empty metadata items last updated before this DCNL timestamp will be removed. DCNL :returns: True if conn.commit() should be called'
'Creates a brand new database (tables, indices, triggers, etc.)'
'Create the object table which is specifc to the container DB. DCNL :param conn: DB connection object'
'Create the container_stat table which is specific to the container DB. DCNL :param conn: DB connection object DCNL :param put_timestamp: put timestamp'
'Update the put_timestamp.  Only modifies it if it is greater than DCNL the current timestamp. DCNL :param timestamp: put timestamp'
'Mark the DB as deleted DCNL :param conn: DB connection object DCNL :param timestamp: timestamp to mark as deleted'
'Check if the DB is empty. DCNL :returns: True if the database has no active objects, False otherwise'
'Handles committing rows in .pending files.'
'Delete rows from the object table that are marked deleted and DCNL whose created_at timestamp is < object_timestamp.  Also deletes rows DCNL from incoming_sync and outgoing_sync where the updated_at timestamp is DCNL < sync_timestamp. DCNL In addition, this calls the DatabaseBroker\'s :func:_reclaim method. DCNL :param object_timestamp: max created_at timestamp of object rows to DCNL delete DCNL :param sync_timestamp: max update_at timestamp of sync rows to delete'
'Mark an object deleted. DCNL :param name: object name to be deleted DCNL :param timestamp: timestamp when the object was marked as deleted'
'Creates an object in the DB with its metadata. DCNL :param name: object name to be created DCNL :param timestamp: timestamp of when the object was created DCNL :param size: object size DCNL :param content_type: object content-type DCNL :param etag: object etag DCNL :param deleted: if True, marks the object as deleted and sets the DCNL deteleted_at timestamp to timestamp'
'Check if the DB is considered to be deleted. DCNL :returns: True if the DB is considered to be deleted, False otherwise'
'Get global data for the container. DCNL :returns: dict with keys: account, container, created_at, DCNL put_timestamp, delete_timestamp, object_count, bytes_used, DCNL reported_put_timestamp, reported_delete_timestamp, DCNL reported_object_count, reported_bytes_used, hash, id, DCNL x_container_sync_point1, and x_container_sync_point2. DCNL If include_metadata is set, metadata is included as a key DCNL pointing to a dict of tuples of the metadata'
'Update reported stats. DCNL :param put_timestamp: put_timestamp to update DCNL :param delete_timestamp: delete_timestamp to update DCNL :param object_count: object_count to update DCNL :param bytes_used: bytes_used to update'
'Get a list of objects sorted by name starting at marker onward, up DCNL to limit entries.  Entries will begin with the prefix and will not DCNL have the delimiter after the prefix. DCNL :param limit: maximum number of entries to get DCNL :param marker: marker query DCNL :param end_marker: end marker query DCNL :param prefix: prefix query DCNL :param delimiter: delimiter for query DCNL :param path: if defined, will set the prefix and delimter based on DCNL the path DCNL :returns: list of tuples of (name, created_at, size, content_type, DCNL etag)'
'Merge items into the object table. DCNL :param item_list: list of dictionaries of {\'name\', \'created_at\', DCNL \'size\', \'content_type\', \'etag\', \'deleted\'} DCNL :param source: if defined, update incoming_sync with the source'
'Create a brand new database (tables, indices, triggers, etc.) DCNL :param conn: DB connection object DCNL :param put_timestamp: put timestamp'
'Create container table which is specific to the account DB. DCNL :param conn: DB connection object'
'Create account_stat table which is specific to the account DB. DCNL :param conn: DB connection object DCNL :param put_timestamp: put timestamp'
'Update the put_timestamp.  Only modifies it if it is greater than DCNL the current timestamp. DCNL :param timestamp: put timestamp'
'Mark the DB as deleted. DCNL :param conn: DB connection object DCNL :param timestamp: timestamp to mark as deleted'
'Handles committing rows in .pending files.'
'Check if the account DB is empty. DCNL :returns: True if the database has no active containers.'
'Delete rows from the container table that are marked deleted and DCNL whose created_at timestamp is < container_timestamp.  Also deletes rows DCNL from incoming_sync and outgoing_sync where the updated_at timestamp is DCNL < sync_timestamp. DCNL In addition, this calls the DatabaseBroker\'s :func:_reclaim method. DCNL :param container_timestamp: max created_at timestamp of container rows DCNL to delete DCNL :param sync_timestamp: max update_at timestamp of sync rows to delete'
'Create a container with the given attributes. DCNL :param name: name of the container to create DCNL :param put_timestamp: put_timestamp of the container to create DCNL :param delete_timestamp: delete_timestamp of the container to create DCNL :param object_count: number of objects in the container DCNL :param bytes_used: number of bytes used by the container'
'Check if the accont DB can be deleted. DCNL :returns: True if the account can be deleted, False otherwise'
'Check if the account DB is considered to be deleted. DCNL :returns: True if the account DB is considered to be deleted, False DCNL otherwise'
'Only returns true if the status field is set to DELETED.'
'Get global data for the account. DCNL :returns: dict with keys: account, created_at, put_timestamp, DCNL delete_timestamp, container_count, object_count, DCNL bytes_used, hash, id'
'Get a list of containerss sorted by name starting at marker onward, up DCNL to limit entries.  Entries will begin with the prefix and will not DCNL have the delimiter after the prefix. DCNL :param limit: maximum number of entries to get DCNL :param marker: marker query DCNL :param end_marker: end marker query DCNL :param prefix: prefix query DCNL :param delimiter: delimiter for query DCNL :returns: list of tuples of (name, object_count, bytes_used, 0)'
'Merge items into the container table. DCNL :param item_list: list of dictionaries of {\'name\', \'put_timestamp\', DCNL \'delete_timestamp\', \'object_count\', \'bytes_used\', DCNL \'deleted\'} DCNL :param source: if defined, update incoming_sync with the source'
'Override this to run the script once'
'Override this to run forever'
'Run the daemon'
'Accepts a standard WSGI application call, authenticating the request DCNL and installing callback hooks for authorization and ACL header DCNL validation. For an authenticated request, REMOTE_USER will be set to a DCNL comma separated list of the user\'s groups. DCNL With a non-empty reseller prefix, acts as the definitive auth service DCNL for just tokens and accounts that begin with that prefix, but will deny DCNL requests outside this prefix if no other auth middleware overrides it. DCNL With an empty reseller prefix, acts as the definitive auth service only DCNL for tokens that validate to a non-empty set of groups. For all other DCNL requests, acts as the fallback auth service when no other auth DCNL middleware overrides it. DCNL Alternatively, if the request matches the self.auth_prefix, the request DCNL will be routed through the internal auth request handler (self.handle). DCNL This is to handle granting tokens, etc.'
'Get groups for the given token. DCNL :param env: The current WSGI environment dictionary. DCNL :param token: Token to validate and return a group string for. DCNL :returns: None if the token is invalid or a string containing a comma DCNL separated list of groups the authenticated user is a member DCNL of. The first group in the list is also considered a unique DCNL identifier for that user.'
'Returns None if the request is authorized to continue or a standard DCNL WSGI response callable if not.'
'Returns a standard WSGI response callable with the status of 403 or 401 DCNL depending on whether the REMOTE_USER is set or not.'
'WSGI entry point for auth requests (ones that match the DCNL self.auth_prefix). DCNL Wraps env in swob.Request object and passes it down. DCNL :param env: WSGI environment dictionary DCNL :param start_response: WSGI callable'
'Entry point for auth requests (ones that match the self.auth_prefix). DCNL Should return a WSGI-style callable (such as swob.Response). DCNL :param req: swob.Request object'
'Handles the various `request for token and service end point(s)` calls. DCNL There are various formats to support the various auth servers in the DCNL past. Examples:: DCNL GET <auth-prefix>/v1/<act>/auth DCNL X-Auth-User: <act>:<usr>  or  X-Storage-User: <usr> DCNL X-Auth-Key: <key>         or  X-Storage-Pass: <key> DCNL GET <auth-prefix>/auth DCNL X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr> DCNL X-Auth-Key: <key>         or  X-Storage-Pass: <key> DCNL GET <auth-prefix>/v1.0 DCNL X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr> DCNL X-Auth-Key: <key>         or  X-Storage-Pass: <key> DCNL On successful authentication, the response will have X-Auth-Token and DCNL X-Storage-Token set to the token to use with Swift and X-Storage-URL DCNL set to the URL to the default Swift cluster to use. DCNL :param req: The swob.Request to process. DCNL :returns: swob.Response, 2xx on success with data set as explained DCNL above.'
'Sends the error response to the remote client, possibly resolving a DCNL custom error response body based on x-container-meta-web-error. DCNL :param response: The error response we should default to sending. DCNL :param env: The original request WSGI environment. DCNL :param start_response: The WSGI start_response hook.'
'Retrieves x-container-meta-web-index, x-container-meta-web-error, DCNL x-container-meta-web-listings, and x-container-meta-web-listings-css DCNL from memcache or from the cluster and stores the result in memcache and DCNL in self._index, self._error, self._listings, and self._listings_css. DCNL :param env: The WSGI environment dict.'
'Sends an HTML object listing to the remote client. DCNL :param env: The original WSGI environment dict. DCNL :param start_response: The original WSGI start_response hook. DCNL :param prefix: Any prefix desired for the container listing.'
'Constructs a relative path from a given prefix within the container. DCNL URLs and paths starting with \'/\' are not modified. DCNL :param prefix: The prefix for the container listing.'
'Handles a possible static web request for a container. DCNL :param env: The original WSGI environment dict. DCNL :param start_response: The original WSGI start_response hook.'
'Handles a possible static web request for an object. This object could DCNL resolve into an index or listing request. DCNL :param env: The original WSGI environment dict. DCNL :param start_response: The original WSGI start_response hook.'
'Main hook into the WSGI paste.deploy filter/app pipeline. DCNL :param env: The WSGI environment dict. DCNL :param start_response: The WSGI start_response hook.'
'Checks req.path for any forbidden characters DCNL Returns True if there are any forbidden characters DCNL Returns False if there aren\'t any forbidden characters'
'Checks that req.path doesn\'t exceed the defined maximum length DCNL Returns True if the length exceeds the maximum DCNL Returns False if the length is <= the maximum'
'Checks that req.path doesn\'t contain a substring matching regexps. DCNL Returns True if there are any forbidden substring DCNL Returns False if there aren\'t any forbidden substring'
'If used, this should be the first middleware in pipeline.'
'Main hook into the WSGI paste.deploy filter/app pipeline. DCNL :param env: The WSGI environment dict. DCNL :param start_response: The WSGI start_response hook. DCNL :returns: Response as per WSGI.'
'Returns just the account for the request, if it\'s an object GET, PUT, DCNL or HEAD request; otherwise, None is returned. DCNL :param env: The WSGI environment for the request. DCNL :returns: Account str or None.'
'Returns the provided temporary URL parameters (sig, expires), DCNL if given and syntactically valid. Either sig or expires could DCNL be None if not provided. If provided, expires is also DCNL converted to an int if possible or 0 if not, and checked for DCNL expiration (returns 0 if expired). DCNL :param env: The WSGI environment for the request. DCNL :returns: (sig, expires) as described above.'
'Returns the X-Account-Meta-Temp-URL-Key header value for the DCNL account, or None if none is set. DCNL :param env: The WSGI environment for the request. DCNL :param account: Account str. DCNL :returns: X-Account-Meta-Temp-URL-Key str value, or None.'
'Returns the hexdigest string of the HMAC-SHA1 (RFC 2104) for DCNL the request. DCNL :param env: The WSGI environment for the request. DCNL :param expires: Unix timestamp as an int for when the URL DCNL expires. DCNL :param key: Key str, from the X-Account-Meta-Temp-URL-Key of DCNL the account. DCNL :param request_method: Optional override of the request in DCNL the WSGI env. For example, if a HEAD DCNL does not match, you may wish to DCNL override with GET to still allow the DCNL HEAD. DCNL :returns: hexdigest str of the HMAC-SHA1 for the request.'
'Performs the necessary steps to indicate a WSGI 401 DCNL Unauthorized response to the request. DCNL :param env: The WSGI environment for the request. DCNL :param start_response: The WSGI start_response hook. DCNL :returns: 401 response as per WSGI.'
'Removes any headers from the WSGI environment as per the DCNL middleware configuration for incoming requests. DCNL :param env: The WSGI environment for the request.'
'Removes any headers as per the middleware configuration for DCNL outgoing responses. DCNL :param headers: A WSGI start_response style list of headers, DCNL [(\'header1\', \'value), (\'header2\', \'value), DCNL :returns: The same headers list, but with some headers DCNL removed as per the middlware configuration for DCNL outgoing responses.'
'Returns a 200 response with "OK" in the body.'
'Returns a 503 response with "DISABLED BY FILE" in the body.'
'Log a request. DCNL :param req: swob.Request object for the request DCNL :param status_int: integer code for the response status DCNL :param bytes_received: bytes successfully read from the request body DCNL :param bytes_sent: bytes yielded to the WSGI server DCNL :param request_time: time taken to satisfy the request, in seconds'
'Will handle the PUT of a SLO manifest. DCNL Heads every object in manifest to check if is valid and if so will DCNL save a manifest generated from the user input. DCNL :params req: a swob.Request with an obj in path DCNL :raises: HttpException on errors'
'Will delete all the segments in the SLO manifest and then, if DCNL successful, will delete the manifest file. DCNL :params req: a swob.Request with an obj in path DCNL :raises HTTPServerError: on invalid manifest DCNL :returns: swob.Response on failure, otherwise self.app'
'WSGI entry point'
'Extract the identity from the Keystone auth component.'
'Check reseller prefix.'
'Check cross-tenant ACLs DCNL Match tenant_id:user, tenant_name:user, and *:user. DCNL :param user: The user name from the identity token. DCNL :param tenant_id: The tenant ID from the identity token. DCNL :param tenant_name: The tenant name from the identity token. DCNL :param roles: The given container ACL. DCNL :returns: True if tenant_id:user, tenant_name:user, or *:user matches DCNL the given ACL. False otherwise.'
'Authorize an anonymous request. DCNL :returns: None if authorization is granted, an error page otherwise.'
'Perform authorization for access that does not require a DCNL confirmed identity. DCNL :returns: A boolean if authorization is granted or denied.  None if DCNL a determination could not be made.'
'Deny WSGI Response. DCNL Returns a standard WSGI response callable with the status of 403 or 401 DCNL depending on whether the REMOTE_USER is set or not.'
'Returns number of requests allowed per second for given container size.'
'Returns a list of key (used in memcache), ratelimit tuples. Keys DCNL should be checked in order. DCNL :param req_method: HTTP method DCNL :param account_name: account name from path DCNL :param container_name: container name from path DCNL :param obj_name: object name from path'
'Returns the amount of time (a float in seconds) that the app DCNL should sleep. DCNL :param key: a memcache key DCNL :param max_rate: maximum rate allowed in requests per second DCNL :raises: MaxSleepTimeHitError if max sleep time is exceeded.'
'Performs rate limiting and account white/black listing.  Sleeps DCNL if necessary. If self.memcache_client is not set, immediately returns DCNL None. DCNL :param account_name: account name from path DCNL :param container_name: container name from path DCNL :param obj_name: object name from path'
'WSGI entry point. DCNL Wraps env in swob.Request object and passes it down. DCNL :param env: WSGI environment dictionary DCNL :param start_response: WSGI callable'
'retrieve values from a recon cache file DCNL :params cache_keys: list of cache items to retrieve DCNL :params cache_file: cache file to retrieve items from. DCNL :params openr: open to use [for unittests] DCNL :return: dict of cache items and their value or none if not found'
'get ALL mounted fs from /proc/mounts'
'get info from /proc/loadavg'
'get info from /proc/meminfo'
'get # of async pendings'
'get replication info'
'get devices'
'get updater info'
'get expirer info'
'get auditor info'
'list unmounted (failed?) devices'
'get disk utilization statistics'
'get all ring md5sum\'s'
'get obj/container/account quarantine counts'
'get info from /proc/net/sockstat and sockstat6 DCNL Note: The mem value is actually kernel pages, but we return bytes DCNL allocated based on the systems page size.'
'Main hook into the WSGI paste.deploy filter/app pipeline. DCNL :param env: The WSGI environment dict. DCNL :param start_response: The WSGI start_response hook. DCNL :returns: Response as per WSGI.'
'Translates the form data into subrequests and issues a DCNL response. DCNL :param env: The WSGI environment dict. DCNL :param boundary: The MIME type boundary to look for. DCNL :returns: status_line, headers_list, body'
'Performs the subrequest and returns the response. DCNL :param orig_env: The WSGI environment dict; will only be used DCNL to form a new env for the subrequest. DCNL :param attributes: dict of the attributes of the form so far. DCNL :param fp: The file-like object containing the request body. DCNL :param key: The account key to validate the signature with. DCNL :returns: (status_line, message)'
'Returns the X-Account-Meta-Temp-URL-Key header value for the DCNL account, or None if none is set. DCNL :param env: The WSGI environment for the request. DCNL :returns: X-Account-Meta-Temp-URL-Key str value, or None.'
'Makes a subrequest to create a new container. DCNL :params container_path: an unquoted path to a container to be created DCNL :returns: None on success DCNL :raises: CreateContainerError on creation error'
'Will populate objs_to_delete with data from request input. DCNL :params req: a Swob request DCNL :returns: a list of the contents of req.body when separated by newline. DCNL :raises: HTTPException on failures'
':params req: a swob Request DCNL :raises HTTPException: on unhandled errors DCNL :returns: a swob Response'
':params req: a swob Request DCNL :params compress_type: specifying the compression type of the tar. DCNL Accepts \'\', \'gz, or \'bz2\' DCNL :raises HTTPException: on unhandled errors DCNL :returns: a swob response to request'
'The length parameter must be a ctypes.c_uint64'
'Add extra info to message'
'Convenience function for syslog priority LOG_NOTICE. The python DCNL logging lvl is set to 25, just above info.  SysLogHandler is DCNL monkey patched to map this log lvl to the LOG_NOTICE syslog DCNL priority.'
'The StatsD client prefix defaults to the "name" of the logger.  This DCNL method may override that default with a specific value.  Currently used DCNL in the proxy-server to differentiate the Account, Container, and Object DCNL controllers.'
'Factory to create methods which delegate to methods on DCNL self.logger.statsd_client (an instance of StatsdClient).  The DCNL created methods conditionally delegate to a method whose name is given DCNL in \'statsd_func_name\'.  The created delegate methods are a no-op when DCNL StatsD logging is not configured. DCNL :param statsd_func_name: the name of a method on StatsdClient.'
':param wsgi_input: file-like object to wrap the functionality of'
'Pass read request to the underlying file-like object and DCNL add bytes read to total.'
'Pass readline request to the underlying file-like object and DCNL add bytes read to total.'
'Returns the weight of each partition as calculated from the DCNL total weight of all the devices.'
'Reinitializes this RingBuilder instance from data obtained from the DCNL builder dict given. Code example:: DCNL b = RingBuilder(1, 1, 1)  # Dummy values DCNL b.copy_from(builder) DCNL This is to restore a RingBuilder that has had its b.to_dict() DCNL previously saved.'
'Returns a dict that can be used later with copy_from to DCNL restore a RingBuilder. swift-ring-builder uses this to DCNL pickle.dump the dict to a file and later load that dict into DCNL copy_from.'
'Changes the value used to decide if a given partition can be moved DCNL again. This restriction is to give the overall system enough time to DCNL settle a partition to its new location before moving it to yet another DCNL location. While no data would be lost if a partition is moved several DCNL times quickly, it could make that data unreachable for a short period DCNL of time. DCNL This should be set to at least the average full partition replication DCNL time. Starting it at 24 hours and then lowering it to what the DCNL replicator reports as the longest partition cycle is best. DCNL :param min_part_hours: new value for min_part_hours'
'Changes the number of replicas in this ring. DCNL If the new replica count is sufficiently different that DCNL self._replica2part2dev will change size, sets DCNL self.devs_changed. This is so tools like DCNL bin/swift-ring-builder can know to write out the new ring DCNL rather than bailing out due to lack of balance change.'
'Get the ring, or more specifically, the swift.common.ring.RingData. DCNL This ring data is the minimum required for use of the ring. The ring DCNL builder itself keeps additional data such as when partitions were last DCNL moved.'
'Add a device to the ring. This device dict should have a minimum of the DCNL following keys: DCNL id      unique integer identifier amongst devices. Defaults to the next DCNL id if the \'id\' key is not provided in the dict DCNL weight  a float of the relative weight of this device as compared to DCNL others; this indicates how many partitions the builder will try DCNL to assign to this device DCNL region  integer indicating which region the device is in DCNL zone    integer indicating which zone the device is in; a given DCNL partition will not be assigned to multiple devices within the DCNL same (region, zone) pair if there is any alternative DCNL ip      the ip address of the device DCNL port    the tcp port of the device DCNL device  the device\'s name on disk (sdb1, for example) DCNL meta    general use \'extra\' field; for example: the online date, the DCNL hardware description DCNL .. note:: DCNL This will not rebalance the ring immediately as you may want to DCNL make multiple changes for a single rebalance. DCNL :param dev: device dict'
'Set the weight of a device. This should be called rather than just DCNL altering the weight key in the device dict directly, as the builder DCNL will need to rebuild some internal state to reflect the change. DCNL .. note:: DCNL This will not rebalance the ring immediately as you may want to DCNL make multiple changes for a single rebalance. DCNL :param dev_id: device id DCNL :param weight: new weight for device'
'Remove a device from the ring. DCNL .. note:: DCNL This will not rebalance the ring immediately as you may want to DCNL make multiple changes for a single rebalance. DCNL :param dev_id: device id'
'Rebalance the ring. DCNL This is the main work function of the builder, as it will assign and DCNL reassign partitions to devices in the ring based on weights, distinct DCNL zones, recent reassignments, etc. DCNL The process doesn\'t always perfectly assign partitions (that\'d take a DCNL lot more analysis and therefore a lot more time -- I had code that did DCNL that before). Because of this, it keeps rebalancing until the device DCNL skew (number of partitions a device wants compared to what it has) gets DCNL below 1% or doesn\'t change by more than 1% (only happens with ring that DCNL can\'t be balanced no matter what -- like with 3 zones of differing DCNL weights with replicas set to 3). DCNL :returns: (number_of_partitions_altered, resulting_balance)'
'Validate the ring. DCNL This is a safety function to try to catch any bugs in the building DCNL process. It ensures partitions have been assigned to real devices, DCNL aren\'t doubly assigned, etc. It can also optionally check the even DCNL distribution of partitions across devices. DCNL :param stats: if True, check distribution of partitions across devices DCNL :returns: if stats is True, a tuple of (device_usage, worst_stat), else DCNL (None, None). device_usage[dev_id] will equal the number of DCNL partitions assigned to that device. worst_stat will equal the DCNL number of partitions the worst device is skewed from the DCNL number it should have. DCNL :raises RingValidationError: problem was found with the ring.'
'Get the balance of the ring. The balance value is the highest DCNL percentage off the desired amount of partitions a given device DCNL wants. For instance, if the "worst" device wants (based on its DCNL weight relative to the sum of all the devices\' weights) 123 DCNL partitions and it has 124 partitions, the balance value would DCNL be 0.83 (1 extra / 123 wanted * 100 for percentage). DCNL :returns: balance of the ring'
'Override min_part_hours by marking all partitions as having been moved DCNL 255 hours ago. This can be used to force a full rebalance on the next DCNL call to rebalance.'
'Get the devices that are responsible for the partition, DCNL filtering out duplicates. DCNL :param part: partition to get devices for DCNL :returns: list of device dicts'
'Returns an iterator all the non-None devices in the ring. Note that DCNL this means list(b._iter_devs())[some_id] may not equal b.devs[some_id]; DCNL you will have to check the \'id\' key of each device to obtain its DCNL dev_id.'
'Sets the parts_wanted key for each of the devices to the number of DCNL partitions the device wants based on its relative weight. This key is DCNL used to sort the devices according to "most wanted" during rebalancing DCNL to best distribute partitions. A negative parts_wanted indicates the DCNL device is "overweight" and wishes to give partitions away if possible.'
'Make sure that the lengths of the arrays in _replica2part2dev DCNL are correct for the current value of self.replicas. DCNL Example: DCNL self.part_power = 8 DCNL self.replicas = 2.25 DCNL self._replica2part2dev will contain 3 arrays: the first 2 of DCNL length 256 (2**8), and the last of length 64 (0.25 * 2**8). DCNL Returns a 2-tuple: the first element is a list of (partition, DCNL replicas) tuples indicating which replicas need to be DCNL (re)assigned to devices, and the second element is a count of DCNL how many replicas were removed.'
'Initial partition assignment is the same as rebalancing an DCNL existing ring, but with some initial setup beforehand.'
'Updates how many hours ago each partition was moved based on the DCNL current time. The builder won\'t move a partition that has been moved DCNL more recently than min_part_hours.'
'Returns a list of (partition, replicas) pairs to be reassigned by DCNL gathering from removed devices, insufficiently-far-apart replicas, and DCNL overweight drives.'
'For an existing ring data set, partitions are reassigned similarly to DCNL the initial assignment. The devices are ordered by how many partitions DCNL they still want and kept in that order throughout the process. The DCNL gathered partitions are iterated through, assigning them to devices DCNL according to the "most wanted" while keeping the replicas as "far DCNL apart" as possible. Two different regions are considered the DCNL farthest-apart things, followed by zones, then different ip/port pairs DCNL within a zone; the least-far-apart things are different devices with DCNL the same ip/port pair in the same zone. DCNL If you want more replicas than devices, you won\'t get all your DCNL replicas. DCNL :param reassign_parts: An iterable of (part, replicas_to_replace) DCNL pairs. replicas_to_replace is an iterable of the DCNL replica (an int) to replace for that partition. DCNL replicas_to_replace may be shared for multiple DCNL partitions, so be sure you do not modify it.'
'Returns a dict of (tier: replica_count) for all tiers in the ring. DCNL There will always be a () entry as the root of the structure, whose DCNL replica_count will equal the ring\'s replica_count. DCNL Then there will be (dev_id,) entries for each device, indicating the DCNL maximum number of replicas the device might have for any given DCNL partition. Anything greater than 1 indicates a partition at serious DCNL risk, as the data on that partition will not be stored distinctly at DCNL the ring\'s replica_count. DCNL Next there will be (dev_id, ip_port) entries for each device, DCNL indicating the maximum number of replicas the device shares with other DCNL devices on the same ip_port for any given partition. Anything greater DCNL than 1 indicates a partition at elevated risk, as if that ip_port were DCNL to fail multiple replicas of that partition would be unreachable. DCNL Last there will be (dev_id, ip_port, zone) entries for each device, DCNL indicating the maximum number of replicas the device shares with other DCNL devices within the same zone for any given partition. Anything greater DCNL than 1 indicates a partition at slightly elevated risk, as if that zone DCNL were to fail multiple replicas of that partition would be unreachable. DCNL Example return dict for the common SAIO setup:: DCNL {(): 3, DCNL (1,): 1.0, DCNL (1, \'127.0.0.1:6010\'): 1.0, DCNL (1, \'127.0.0.1:6010\', 0): 1.0, DCNL (2,): 1.0, DCNL (2, \'127.0.0.1:6020\'): 1.0, DCNL (2, \'127.0.0.1:6020\', 1): 1.0, DCNL (3,): 1.0, DCNL (3, \'127.0.0.1:6030\'): 1.0, DCNL (3, \'127.0.0.1:6030\', 2): 1.0, DCNL (4,): 1.0, DCNL (4, \'127.0.0.1:6040\'): 1.0, DCNL (4, \'127.0.0.1:6040\', 3): 1.0}'
'Returns a list of devices for a specified partition. DCNL Deliberately includes duplicates.'
'Returns a list of replicas for a specified partition. DCNL These can be used as indices into self._replica2part2dev DCNL without worrying about IndexErrors.'
'Generator yielding every (partition, replica) pair in the ring.'
'Obtain RingBuilder instance of the provided builder file DCNL :param builder_file: path to builder file to load DCNL :return: RingBuilder instance'
'The <search-value> can be of the form:: DCNL d<device_id>r<region>z<zone>-<ip>:<port>/<device_name>_<meta> DCNL Any part is optional, but you must include at least one part. DCNL Examples:: DCNL d74              Matches the device id 74 DCNL r4               Matches devices in region 4 DCNL z1               Matches devices in zone 1 DCNL z1-1.2.3.4       Matches devices in zone 1 with the ip 1.2.3.4 DCNL 1.2.3.4          Matches devices in any zone with the ip 1.2.3.4 DCNL z1:5678          Matches devices in zone 1 using port 5678 DCNL :5678            Matches devices that use port 5678 DCNL /sdb1            Matches devices with the device name sdb1 DCNL _shiny           Matches devices with shiny in the meta data DCNL _"snet: 5.6.7.8" Matches devices with snet: 5.6.7.8 in the meta data DCNL [::1]            Matches devices in any zone with the ip ::1 DCNL z1-[::1]:5678    Matches devices in zone 1 with ip ::1 and port 5678 DCNL Most specific example:: DCNL d74r4z1-1.2.3.4:5678/sdb1_"snet: 5.6.7.8" DCNL Nerd explanation: DCNL All items require their single character prefix except the ip, in which DCNL case the - is optional unless the device id or zone is also included.'
'Load ring data from a file. DCNL :param filename: Path to a file serialized by the save() method. DCNL :returns: A RingData instance containing the loaded data.'
'Serialize this RingData instance to disk. DCNL :param filename: File into which this instance should be serialized.'
'Number of replicas (full or partial) used in the ring.'
'Number of partitions in the ring.'
'devices in the ring'
'Check to see if the ring on disk is different than the current one in DCNL memory. DCNL :returns: True if the ring on disk has changed, False otherwise'
'Get the nodes that are responsible for the partition. If one DCNL node is responsible for more than one replica of the same DCNL partition, it will only appear in the output once. DCNL :param part: partition to get nodes for DCNL :returns: list of node dicts DCNL See :func:`get_nodes` for a description of the node dicts.'
'Get the partition and nodes for an account/container/object. DCNL If a node is responsible for more than one replica, it will DCNL only appear in the output once. DCNL :param account: account name DCNL :param container: container name DCNL :param obj: object name DCNL :returns: a tuple of (partition, list of node dicts) DCNL Each node dict will have at least the following keys: DCNL id      unique integer identifier amongst devices DCNL weight  a float of the relative weight of this device as compared to DCNL others; this indicates how many partitions the builder will try DCNL to assign to this device DCNL zone    integer indicating which zone the device is in; a given DCNL partition will not be assigned to multiple devices within the DCNL same zone DCNL ip      the ip address of the device DCNL port    the tcp port of the device DCNL device  the device\'s name on disk (sdb1, for example) DCNL meta    general use \'extra\' field; for example: the online date, the DCNL hardware description'
'Generator to get extra nodes for a partition for hinted handoff. DCNL The handoff nodes will try to be in zones other than the DCNL primary zones, will take into account the device weights, and DCNL will usually keep the same sequences of handoffs even with DCNL ring changes. DCNL :param part: partition to get handoff nodes for DCNL :returns: generator of node dicts DCNL See :func:`get_nodes` for a description of the node dicts.'
''
'Make an HTTP REPLICATE request DCNL :param args: list of json-encodable objects DCNL :returns: httplib response object'
'Zero out the stats.'
'Report the current stats to the logs.'
'Sync a single file using rsync. Used by _rsync_db to handle syncing. DCNL :param db_file: file to be synced DCNL :param remote_file: remote location to sync the DB file to DCNL :param whole-file: if True, uses rsync\'s --whole-file flag DCNL :returns: True if the sync was successful, False otherwise'
'Sync a whole db using rsync. DCNL :param broker: DB broker object of DB to be synced DCNL :param device: device to sync to DCNL :param http: ReplConnection object DCNL :param local_id: unique ID of the local database replica DCNL :param replicate_method: remote operation to perform after rsync DCNL :param replicate_timeout: timeout to wait in seconds'
'Sync a db by sending all records since the last sync. DCNL :param point: synchronization high water mark between the replicas DCNL :param broker: database broker object DCNL :param http: ReplConnection object for the remote server DCNL :param remote_id: database id for the remote replica DCNL :param local_id: database id for the local replica DCNL :returns: boolean indicating completion and success'
'Determine whether or not two replicas of a databases are considered DCNL to be in sync. DCNL :param rinfo: remote database info DCNL :param info: local database info DCNL :param broker: database broker object DCNL :param local_sync: cached last sync point between replicas DCNL :returns: boolean indicating whether or not the replicas are in sync'
'Make an http_connection using ReplConnection DCNL :param node: node dictionary from the ring DCNL :param partition: partition partition to send in the url DCNL :param db_file: DB file DCNL :returns: ReplConnection object'
'Replicate a database to a node. DCNL :param node: node dictionary from the ring to be replicated to DCNL :param broker: DB broker for the DB to be replication DCNL :param partition: partition on the node to replicate to DCNL :param info: DB info as a dictionary of {\'max_row\', \'hash\', \'id\', DCNL \'created_at\', \'put_timestamp\', \'delete_timestamp\', DCNL \'metadata\'} DCNL :returns: True if successful, False otherwise'
'Replicate the db, choosing method based on whether or not it DCNL already exists on peers. DCNL :param partition: partition to be replicated to DCNL :param object_file: DB file name to be replicated DCNL :param node_id: node id of the node to be replicated to'
'Extract the device name from an object path.  Returns "UNKNOWN" if the DCNL path could not be extracted successfully for some reason. DCNL :param object_file: the path to a database file.'
'Run a replication pass once.'
'Replicate dbs under the given root in an infinite loop.'
'display status of tracked pids for server'
'starts a server'
'spawn server and return immediately'
'start a server interactively'
'start server and run one pass on supporting daemons'
'stops a server'
'allow current requests to finish on supporting servers'
'stops then restarts server'
'graceful shutdown then restart on supporting servers'
'alias for reload'
'Find and return the decorated method named like cmd DCNL :param cmd: the command to get, a string, if not found raises DCNL UnknownCommandError'
'Get all publicly accessible commands DCNL :returns: a list of string tuples (cmd, help), the method names who are DCNL decorated as commands'
'Find the named command and run it DCNL :param cmd: the command name to run'
'Translate conf_file to a corresponding pid_file DCNL :param conf_file: an conf_file for this server, a string DCNL :returns: the pid_file for this conf_file'
'Translate pid_file to a corresponding conf_file DCNL :param pid_file: a pid_file for this server, a string DCNL :returns: the conf_file for this pid_file'
'Get conf files for this server DCNL :param: number, if supplied will only lookup the nth server DCNL :returns: list of conf files'
'Get pid files for this server DCNL :param: number, if supplied will only lookup the nth server DCNL :returns: list of pid files'
'Generator, yields (pid_file, pids)'
'Send a signal to pids for this server DCNL :param sig: signal to send DCNL :returns: a dict mapping pids (ints) to pid_files (paths)'
'Get running pids DCNL :returns: a dict mapping pids (ints) to pid_files (paths)'
'Kill running pids DCNL :param graceful: if True, attempt SIGHUP on supporting servers DCNL :returns: a dict mapping pids (ints) to pid_files (paths)'
'Display status of server DCNL :param: pids, if not supplied pids will be populated automatically DCNL :param: number, if supplied will only lookup the nth server DCNL :returns: 1 if server is not running, 0 otherwise'
'Launch a subprocess for this server. DCNL :param conf_file: path to conf_file to use as first arg DCNL :param once: boolean, add once argument to command DCNL :param wait: boolean, if true capture stdout with a pipe DCNL :param daemon: boolean, if true ask server to log to console DCNL :returns : the pid of the spawned process'
'wait on spawned procs to start'
'wait on spawned procs to terminate'
'Collect conf files and attempt to spawn the processes for this server'
'Send stop signals to pids for this server DCNL :returns: a dict mapping pids (ints) to pid_files (paths)'
'Retrieves a server conn from the pool, or connects a new one. DCNL Chooses the server based on a consistent hash of "key".'
'Returns a server connection to the pool'
'Set a key/value pair in memcache DCNL :param key: key DCNL :param value: value DCNL :param serialize: if True, value is serialized with JSON before sending DCNL to memcache, or with pickle if configured to use DCNL pickle instead of JSON (to avoid cache poisoning) DCNL :param timeout: ttl in memcache, this parameter is now deprecated. It DCNL will be removed in next release of OpenStack, DCNL use time parameter instead in the future DCNL :time: equivalent to timeout, this parameter is added to keep the DCNL signature compatible with python-memcached interface. This DCNL implementation will take this value and sign it to the DCNL parameter timeout DCNL :min_compress_len: minimum compress length, this parameter was added DCNL to keep the signature compatible with DCNL python-memcached interface. This implementation DCNL ignores it.'
'Gets the object specified by key.  It will also unserialize the object DCNL before returning if it is serialized in memcache with JSON, or if it DCNL is pickled and unpickling is allowed. DCNL :param key: key DCNL :returns: value of the key in memcache'
'Increments a key which has a numeric value by delta. DCNL If the key can\'t be found, it\'s added as delta or 0 if delta < 0. DCNL If passed a negative number, will use memcached\'s decr. Returns DCNL the int stored in memcached DCNL Note: The data memcached stores as the result of incr/decr is DCNL an unsigned int.  decr\'s that result in a number below 0 are DCNL stored as 0. DCNL :param key: key DCNL :param delta: amount to add to the value of key (or set as the value DCNL if the key is not found) will be cast to an int DCNL :param time: the time to live. This parameter deprecates parameter DCNL timeout. The addition of this parameter is to make the DCNL interface consistent with set and set_multi methods DCNL :param timeout: ttl in memcache, deprecated, will be removed in future DCNL OpenStack releases DCNL :raises MemcacheConnectionError:'
'Decrements a key which has a numeric value by delta. Calls incr with DCNL -delta. DCNL :param key: key DCNL :param delta: amount to subtract to the value of key (or set the DCNL value to 0 if the key is not found) will be cast to DCNL an int DCNL :param time: the time to live. This parameter depcates parameter DCNL timeout. The addition of this parameter is to make the DCNL interface consistent with set and set_multi methods DCNL :param timeout: ttl in memcache, deprecated, will be removed in future DCNL OpenStack releases DCNL :raises MemcacheConnectionError:'
'Deletes a key/value pair from memcache. DCNL :param key: key to be deleted'
'Sets multiple key/value pairs in memcache. DCNL :param mapping: dictonary of keys and values to be set in memcache DCNL :param servery_key: key to use in determining which server in the ring DCNL is used DCNL :param serialize: if True, value is serialized with JSON before sending DCNL to memcache, or with pickle if configured to use DCNL pickle instead of JSON (to avoid cache poisoning) DCNL :param timeout: ttl for memcache. This parameter is now deprecated, it DCNL will be removed in next release of OpenStack, use time DCNL parameter instead in the future DCNL :time: equalvent to timeout, this parameter is added to keep the DCNL signature compatible with python-memcached interface. This DCNL implementation will take this value and sign it to parameter DCNL timeout DCNL :min_compress_len: minimum compress length, this parameter was added DCNL to keep the signature compatible with DCNL python-memcached interface. This implementation DCNL ignores it'
'Gets multiple values from memcache for the given keys. DCNL :param keys: keys for values to be retrieved from memcache DCNL :param servery_key: key to use in determining which server in the ring DCNL is used DCNL :returns: list of values'
'Saves response info without sending it to the remote client. DCNL Uses the same semantics as the usual WSGI start_response.'
'Ensures start_response has been called before returning.'
'Returns the HTTP status int from the last called self._start_response DCNL result.'
'Returns str of value for given header key or None'
'Reads a chunk from the file object. DCNL Params are passed directly to the underlying file object\'s read(). DCNL :returns: Compressed chunk from file object.'
'Makes a request to Swift with retries. DCNL :param method: HTTP method of request. DCNL :param path: Path of request. DCNL :param headers: Headers to be sent with request. DCNL :param acceptable_statuses: List of acceptable statuses for request. DCNL :param body_file: Body file to be passed along with request, DCNL defaults to None. DCNL :returns : Response object on success. DCNL :raises UnexpectedResponse: Exception raised when make_request() fails DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Gets metadata by doing a HEAD on a path and using the metadata_prefix DCNL to get values from the headers returned. DCNL :param path: Path to do HEAD on. DCNL :param metadata_prefix: Used to filter values from the headers DCNL returned.  Will strip that prefix from the DCNL keys in the dict returned.  Defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :returns : A dict of metadata with metadata_prefix stripped from keys. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns an iterator of items from a json listing.  Assumes listing has DCNL \'name\' key defined and uses markers. DCNL :param path: Path to do GET on. DCNL :param marker: Prefix of first desired item, defaults to \'\'. DCNL :param end_marker: Last item returned will be \'less\' than this, DCNL defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns a swift path for a request quoting and utf-8 encoding the path DCNL parts as need be. DCNL :param account: swift account DCNL :param container: container, defaults to None DCNL :param obj: object, defaults to None DCNL :raises ValueError: Is raised if obj is specified and container is DCNL not.'
'Sets metadata on path using metadata_prefix to set values in headers of DCNL POST request. DCNL :param path: Path to do POST on. DCNL :param metadata: Dict of metadata to set. DCNL :param metadata_prefix: Prefix used to set metadata values in headers DCNL of requests, used to prefix keys in metadata DCNL when setting metadata, defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns an iterator of containers dicts from an account. DCNL :param account: Account on which to do the container listing. DCNL :param marker: Prefix of first desired item, defaults to \'\'. DCNL :param end_marker: Last item returned will be \'less\' than this, DCNL defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns (container_count, object_count) for an account. DCNL :param account: Account on which to get the information. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Gets account metadata. DCNL :param account: Account on which to get the metadata. DCNL :param metadata_prefix: Used to filter values from the headers DCNL returned.  Will strip that prefix from the DCNL keys in the dict returned.  Defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :returns : Returns dict of account metadata. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Sets account metadata.  A call to this will add to the account DCNL metadata and not overwrite all of it with values in the metadata dict. DCNL To clear an account metadata value, pass an empty string as DCNL the value for the key in the metadata dict. DCNL :param account: Account on which to get the metadata. DCNL :param metadata: Dict of metadata to set. DCNL :param metadata_prefix: Prefix used to set metadata values in headers DCNL of requests, used to prefix keys in metadata DCNL when setting metadata, defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Checks to see if a container exists. DCNL :param account: The container\'s account. DCNL :param container: Container to check. DCNL :returns : True if container exists, false otherwise. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Creates container. DCNL :param account: The container\'s account. DCNL :param container: Container to create. DCNL :param headers: Defaults to empty dict. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Deletes a container. DCNL :param account: The container\'s account. DCNL :param container: Container to delete. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Gets container metadata. DCNL :param account: The container\'s account. DCNL :param container: Container to get metadata on. DCNL :param metadata_prefix: Used to filter values from the headers DCNL returned.  Will strip that prefix from the DCNL keys in the dict returned.  Defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :returns : Returns dict of container metadata. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns an iterator of object dicts from a container. DCNL :param account: The container\'s account. DCNL :param container: Container to iterate objects on. DCNL :param marker: Prefix of first desired item, defaults to \'\'. DCNL :param end_marker: Last item returned will be \'less\' than this, DCNL defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Sets container metadata.  A call to this will add to the container DCNL metadata and not overwrite all of it with values in the metadata dict. DCNL To clear a container metadata value, pass an empty string as the value DCNL for the key in the metadata dict. DCNL :param account: The container\'s account. DCNL :param container: Container to set metadata on. DCNL :param metadata: Dict of metadata to set. DCNL :param metadata_prefix: Prefix used to set metadata values in headers DCNL of requests, used to prefix keys in metadata DCNL when setting metadata, defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Deletes an object. DCNL :param account: The object\'s account. DCNL :param container: The object\'s container. DCNL :param obj: The object. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2, HTTP_NOT_FOUND). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Gets object metadata. DCNL :param account: The object\'s account. DCNL :param container: The object\'s container. DCNL :param obj: The object. DCNL :param metadata_prefix: Used to filter values from the headers DCNL returned.  Will strip that prefix from the DCNL keys in the dict returned.  Defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :returns : Dict of object metadata. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Returns an iterator of object lines from an uncompressed or compressed DCNL text object. DCNL Uncompress object as it is read if the object\'s name ends with \'.gz\'. DCNL :param account: The object\'s account. DCNL :param container: The object\'s container. DCNL :param objec_namet: The object. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'Sets an object\'s metadata.  The object\'s metadata will be overwritten DCNL by the values in the metadata dict. DCNL :param account: The object\'s account. DCNL :param container: The object\'s container. DCNL :param obj: The object. DCNL :param metadata: Dict of metadata to set. DCNL :param metadata_prefix: Prefix used to set metadata values in headers DCNL of requests, used to prefix keys in metadata DCNL when setting metadata, defaults to \'\'. DCNL :param acceptable_statuses: List of status for valid responses, DCNL defaults to (2,). DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
':param fobj: File object to read object\'s content from. DCNL :param account: The object\'s account. DCNL :param container: The object\'s container. DCNL :param obj: The object. DCNL :param headers: Headers to send with request, defaults ot empty dict. DCNL :raises UnexpectedResponse: Exception raised when requests fail DCNL to get a response with an acceptable status DCNL :raises Exception: Exception is raised when code fails in an DCNL unexpected way.'
'This method is used to return multiple ranges for a given length DCNL which should represent the length of the underlying content. DCNL The constructor method __init__ made sure that any range in ranges DCNL list is syntactically valid. So if length is None or size of the DCNL ranges is zero, then the Range header should be ignored which will DCNL eventually make the response to be 200. DCNL If an empty list is returned by this method, it indicates that there DCNL are unsatisfiable ranges found in the Range header, 416 will be DCNL returned. DCNL if a returned list has at least one element, the list indicates that DCNL there is at least one range valid and the server should serve the DCNL request with a 206 status code. DCNL The start value of each range represents the starting position in DCNL the content, the end value represents the ending position. This DCNL method purposely adds 1 to the end number because the spec defines DCNL the Range to be inclusive. DCNL The Range spec can be found at the following link: DCNL http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1 DCNL :param length: length of the underlying content'
'Returns the item from "options" that best matches the accept header. DCNL Returns None if no available options are acceptable to the client. DCNL :param options: a list of content-types the server can respond with'
'Create a new request object with the given parameters, and an DCNL environment otherwise filled in with non-surprising default values.'
'Provides QUERY_STRING parameters as a dictionary'
'The path of the request, without host but with query string.'
'Provides the full path of the request, excluding the QUERY_STRING'
'Provides the full url of the request'
'Takes one path portion (delineated by slashes) from the DCNL path_info, and appends it to the script_name.  Returns DCNL the path segment.'
'Makes a copy of the request, converting it to a GET.'
'Calls the application with this request\'s environment.  Returns the DCNL status, headers, and app_iter for the response as a tuple. DCNL :param application: the WSGI application to call'
'Calls the application with this request\'s environment.  Returns a DCNL Response object that wraps up the application\'s result. DCNL :param application: the WSGI application to call'
'Validate and split the Request\'s path. DCNL **Examples**:: DCNL [\'a\'] = split_path(\'/a\') DCNL [\'a\', None] = split_path(\'/a\', 1, 2) DCNL [\'a\', \'c\'] = split_path(\'/a/c\', 1, 2) DCNL [\'a\', \'c\', \'o/r\'] = split_path(\'/a/c/o/r\', 1, 3, True) DCNL :param path: HTTP Request path to be split DCNL :param minsegs: Minimum number of segments to be extracted DCNL :param maxsegs: Maximum number of segments to be extracted DCNL :param rest_with_last: If True, trailing data will be returned as part DCNL of last segment.  If False, and there is DCNL trailing data, raises ValueError. DCNL :returns: list of segments with a length of maxsegs (non-existant DCNL segments will return as None) DCNL :raises: ValueError if given an invalid path'
'Prepare the Response for multiple ranges.'
'Attempt to construct an absolute location.'
'Get the container ring.  Load it, if it hasn\'t been yet.'
'Run the updater continuously.'
'Run the updater once'
'If there are async pendings on the device, walk each one and update. DCNL :param device: path to device'
'Process the object information to be updated and update. DCNL :param update_path: path to pickled object update file DCNL :param device: path to device'
'Perform the object update to the container DCNL :param node: node dictionary from the container ring DCNL :param part: partition that holds the container DCNL :param op: operation performed (ex: \'POST\' or \'DELETE\') DCNL :param obj: object name being updated DCNL :param headers: headers to send with the update'
'Returns an iterator over the data file.'
'Returns an iterator over the data file for range (start, stop)'
'Returns an iterator over the data file for a set of ranges'
'Check if file needs to be quarantined'
'Close the file. Will handle quarantining file if necessary. DCNL :param verify_file: Defaults to True. If false, will not check DCNL file to see if it needs quarantining.'
'Check if the file is deleted. DCNL :returns: True if the file doesn\'t exist or has been flagged as DCNL deleted.'
'Check if the file is expired. DCNL :returns: True if the file has an X-Delete-At in the past'
'Contextmanager to make a temporary file.'
'Finalize writing the file on disk, and renames it from the temp file to DCNL the real location.  This should be called after the data has been DCNL written to the temp file. DCNL :param fd: file descriptor of the temp file DCNL :param metadata: dictionary of metadata to be written DCNL :param extension: extension to be used when making the file'
'Short hand for putting metadata to .meta and .ts files. DCNL :param metadata: dictionary of metadata to be written DCNL :param tombstone: whether or not we are writing a tombstone'
'Remove any older versions of the object file.  Any file that has an DCNL older timestamp than timestamp will be deleted. DCNL :param timestamp: timestamp to compare with each file'
'Method for no-oping buffer cache drop method.'
'In the case that a file is corrupted, move it to a quarantined DCNL area to allow replication to fix it. DCNL :returns: if quarantine is successful, path to quarantined DCNL directory otherwise None'
'Returns the os.path.getsize for the file.  Raises an exception if this DCNL file does not match the Content-Length stored in the metadata. Or if DCNL self.data_file does not exist. DCNL :returns: file size as an int DCNL :raises DiskFileError: on file size mismatch. DCNL :raises DiskFileNotExist: on file not existing (including deleted)'
'Creates a new WSGI application for the Swift Object Server. An DCNL example configuration is given at DCNL <source-dir>/etc/object-server.conf-sample or DCNL /etc/swift/object-server.conf-sample.'
'Sends or saves an async update. DCNL :param op: operation performed (ex: \'PUT\', or \'DELETE\') DCNL :param account: account name for the object DCNL :param container: container name for the object DCNL :param obj: object name DCNL :param host: host that the container is on DCNL :param partition: partition that the container is on DCNL :param contdevice: device name that the container is on DCNL :param headers_out: dictionary of headers to send in the container DCNL request DCNL :param objdevice: device name that the object is in'
'Update the container when objects are updated. DCNL :param op: operation performed (ex: \'PUT\', or \'DELETE\') DCNL :param account: account name for the object DCNL :param container: container name for the object DCNL :param obj: object name DCNL :param headers_in: dictionary of headers from the original request DCNL :param headers_out: dictionary of headers to send in the container DCNL request(s) DCNL :param objdevice: device name that the object is in'
'Update the expiring objects container when objects are updated. DCNL :param op: operation performed (ex: \'PUT\', or \'DELETE\') DCNL :param account: account name for the object DCNL :param container: container name for the object DCNL :param obj: object name DCNL :param headers_in: dictionary of headers from the original request DCNL :param objdevice: device name that the object is in'
'Handle HTTP POST requests for the Swift Object Server.'
'Handle HTTP PUT requests for the Swift Object Server.'
'Handle HTTP GET requests for the Swift Object Server.'
'Handle HTTP HEAD requests for the Swift Object Server.'
'Handle HTTP DELETE requests for the Swift Object Server.'
'Handle REPLICATE requests for the Swift Object Server.  This is used DCNL by the object replicator to get hashes for directories.'
'WSGI Application entry point for the Swift Object Server.'
':param conf: configuration object obtained from ConfigParser DCNL :param logger: logging object'
'Execute the rsync binary to replicate a partition. DCNL :returns: return code of rsync process. 0 is successful'
'Synchronize local suffix directories from a partition with a remote DCNL node. DCNL :param node: the "dev" entry for the remote node to sync with DCNL :param job: information about the partition being synced DCNL :param suffixes: a list of suffixes which need to be pushed DCNL :returns: boolean indicating success or failure'
'Check to see if the ring has been updated DCNL :returns: boolean indicating whether or not the ring has changed'
'High-level method that replicates a single partition that doesn\'t DCNL belong on this node. DCNL :param job: a dict containing info about the partition to be replicated'
'High-level method that replicates a single partition. DCNL :param job: a dict containing info about the partition to be replicated'
'Logs various stats for the currently running replication pass.'
'Utility function that kills all coroutines currently running.'
'Loop that runs in the background during replication.  It periodically DCNL logs progress.'
'In testing, the pool.waitall() call very occasionally failed to return. DCNL This is an attempt to make sure the replicator finishes its replication DCNL pass in some eventuality.'
'Returns a sorted list of jobs (dictionaries) that specify the DCNL partitions, nodes, etc to be rsynced.'
'Run a replication pass'
'Audits the given object path. DCNL :param path: a path to an object DCNL :param device: the device the path is on DCNL :param partition: the partition the path is on'
'Run the object audit until stopped.'
'Run the object audit once.'
'Emits a log line report of the progress so far, or the final progress DCNL is final=True. DCNL :param final: Set to True for the last report once the expiration pass DCNL has completed.'
'Executes a single pass, looking for objects to expire. DCNL :param args: Extra args to fulfill the Daemon interface; this daemon DCNL has no additional args. DCNL :param kwargs: Extra keyword args to fulfill the Daemon interface; this DCNL daemon has no additional keyword args.'
'Executes passes forever, looking for objects to expire. DCNL :param args: Extra args to fulfill the Daemon interface; this daemon DCNL has no additional args. DCNL :param kwargs: Extra keyword args to fulfill the Daemon interface; this DCNL daemon has no additional keyword args.'
'Deletes the end-user object indicated by the actual object name given DCNL \'<account>/<container>/<object>\' if and only if the X-Delete-At value DCNL of the object is exactly the timestamp given. DCNL :param actual_obj: The name of the end-user object to delete: DCNL \'<account>/<container>/<object>\' DCNL :param timestamp: The timestamp the X-Delete-At value must match to DCNL perform the actual delete.'
'Get the controller to handle a request. DCNL :param path: path from request DCNL :returns: tuple of (controller class, path dictionary) DCNL :raises: ValueError (thrown by split_path) if given invalid path'
'WSGI entry point. DCNL Wraps env in swob.Request object and passes it down. DCNL :param env: WSGI environment dictionary DCNL :param start_response: WSGI callable'
'Entry point for proxy server. DCNL Should return a WSGI-style callable (such as swob.Response). DCNL :param req: swob.Request object'
'Sorts nodes in-place (and returns the sorted list) according to DCNL the configured strategy. The default "sorting" is to randomly DCNL shuffle the nodes. If the "timing" strategy is chosen, the nodes DCNL are sorted according to the stored timing data.'
'Handles incrementing error counts when talking to nodes. DCNL :param node: dictionary of node to increment the error count for'
'Handle logging, and handling of errors. DCNL :param node: dictionary of node to handle errors for DCNL :param msg: error message'
'Handle logging of generic exceptions. DCNL :param node: dictionary of node to log the error for DCNL :param typ: server type DCNL :param additional_info: additional information to log'
'Check if the node is currently error limited. DCNL :param node: dictionary of node to check DCNL :returns: True if error limited, False otherwise'
'Mark a node as error limited. DCNL :param node: dictionary of node to error limit'
'Get account information, and also verify that the account exists. DCNL :param account: name of the account to get the info for DCNL :returns: tuple of (account partition, account nodes, container_count) DCNL or (None, None, None) if it does not exist'
'Get container information and thusly verify container existence. DCNL This will also make a call to account_info to verify that the DCNL account exists. DCNL :param account: account name for the container DCNL :param container: container name to look up DCNL :returns: dict containing at least container partition (\'partition\'), DCNL container nodes (\'containers\'), container read DCNL acl (\'read_acl\'), container write acl (\'write_acl\'), DCNL and container sync key (\'sync_key\'). DCNL Values are set to None if the container does not exist.'
'Node iterator that will first iterate over the normal nodes for a DCNL partition and then the handoff partitions for the node. DCNL :param partition: partition to iterate nodes for DCNL :param nodes: list of node dicts from the ring DCNL :param ring: ring to get handoff nodes from'
'Sends an HTTP request to multiple nodes and aggregates the results. DCNL It attempts the primary nodes concurrently, then iterates over the DCNL handoff nodes as needed. DCNL :param headers: a list of dicts, where each dict represents one DCNL backend request that should be made. DCNL :returns: a swob.Response object'
'Given a list of responses from several servers, choose the best to DCNL return to the API. DCNL :param req: swob.Request object DCNL :param statuses: list of statuses returned DCNL :param reasons: list of reasons for each status DCNL :param bodies: bodies of each response DCNL :param server_type: type of server the responses came from DCNL :param etag: etag DCNL :returns: swob.Response object with the correct status, body, etc. set'
'Handler for HTTP GET requests.'
'Handler for HTTP HEAD requests.'
'Reads from the source and places data in the queue. It expects DCNL something else be reading from the queue and, if nothing does within DCNL self.app.client_timeout seconds, the process will be aborted. DCNL :param node: The node dict that the source is connected to, for DCNL logging/error-limiting purposes. DCNL :param source: The httplib.Response object to read from. DCNL :param queue: The eventlet.queue.Queue to place read source data into. DCNL :param logger_thread_locals: The thread local values to be set on the DCNL self.app.logger to retain transaction DCNL logging information.'
'Returns an iterator over the contents of the source (via its read DCNL func).  There is also quite a bit of cleanup to ensure garbage DCNL collection works and the underlying socket of the source is closed. DCNL :param source: The httplib.Response object this iterator should read DCNL from. DCNL :param node: The node the source is reading from, for logging purposes.'
'Indicates whether or not the request made to the backend found DCNL what it was looking for.'
'Base handler for HTTP GET or HEAD requests. DCNL :param req: swob.Request object DCNL :param server_type: server type DCNL :param partition: partition DCNL :param nodes: nodes DCNL :param path: path for the request DCNL :param attempts: number of attempts to try DCNL :returns: swob.Response object'
'Is the given Origin allowed to make requests to this resource DCNL :param cors_info: the resource\'s CORS related metadata headers DCNL :param origin: the origin making the request DCNL :return: True or False'
'Base handler for OPTIONS requests DCNL :param req: swob.Request object DCNL :returns: swob.Response object'
'Handler for HTTP GET/HEAD requests.'
'HTTP PUT request handler.'
'HTTP POST request handler.'
'HTTP DELETE request handler.'
'Loads the self.segment_iter with the next object segment\'s contents. DCNL :raises: StopIteration when there are no more object segments or DCNL segment no longer matches SLO manifest specifications.'
'Standard iterator function that returns the object\'s contents.'
'Non-standard iterator function for use with Swob in serving Range DCNL requests more quickly. This will skip over segments and do a range DCNL request on the first segment to return data from, if needed. DCNL :param start: The first byte (zero-based) to return. None for 0. DCNL :param stop: The last byte (zero-based) to return. None for end.'
'Returns an item-by-item iterator for a page-by-page iterator DCNL of item listings. DCNL Swallows listing-related errors; this iterator is only used DCNL after we\'ve already started streaming a response to the DCNL client, and so if we start getting errors from the container DCNL servers now, it\'s too late to send an error to the client, so DCNL we just quit looking for segments.'
'Indicates whether or not the request made to the backend found DCNL what it was looking for. DCNL In the case of an object, a 416 indicates that we found a DCNL backend with the object.'
'Handle HTTP GET or HEAD requests.'
'Handler for HTTP GET requests.'
'Handler for HTTP HEAD requests.'
'HTTP POST request handler.'
'Method for a file PUT coro'
'Method for a file PUT connect'
'HTTP PUT request handler.'
'HTTP DELETE request handler.'
'HTTP COPY request handler.'
'Handler for HTTP GET/HEAD requests.'
'Handler for HTTP GET requests.'
'Handler for HTTP HEAD requests.'
'HTTP PUT request handler.'
'HTTP POST request handler.'
'HTTP DELETE request handler.'
'The account :class:`swift.common.ring.Ring` for the cluster.'
'The container :class:`swift.common.ring.Ring` for the cluster.'
'The object :class:`swift.common.ring.Ring` for the cluster.'
'Main entry point when running the reaper in its normal daemon mode. DCNL This repeatedly calls :func:`reap_once` no quicker than the DCNL configuration interval.'
'Main entry point when running the reaper in \'once\' mode, where it will DCNL do a single pass over all accounts on the server. This is called DCNL repeatedly by :func:`run_forever`. This will call :func:`reap_device` DCNL once for each device on the server.'
'Called once per pass for each device on the server. This will scan the DCNL accounts directory for the device, looking for partitions this device DCNL is the primary for, then looking for account databases that are marked DCNL status=DELETED and still have containers and calling DCNL :func:`reap_account`. Account databases marked status=DELETED that no DCNL longer have containers will eventually be permanently removed by the DCNL reclaim process within the account replicator (see DCNL :mod:`swift.db_replicator`). DCNL :param device: The device to look for accounts to be deleted.'
'Called once per pass for each account this server is the primary for DCNL and attempts to delete the data for the given account. The reaper will DCNL only delete one account at any given time. It will call DCNL :func:`reap_container` up to sqrt(self.concurrency) times concurrently DCNL while reaping the account. DCNL If there is any exception while deleting a single container, the DCNL process will continue for any other containers and the failed DCNL containers will be tried again the next time this function is called DCNL with the same parameters. DCNL If there is any exception while listing the containers for deletion, DCNL the process will stop (but will obviously be tried again the next time DCNL this function is called with the same parameters). This isn\'t likely DCNL since the listing comes from the local database. DCNL After the process completes (successfully or not) statistics about what DCNL was accomplished will be logged. DCNL This function returns nothing and should raise no exception but only DCNL update various self.stats_* values for what occurs. DCNL :param broker: The AccountBroker for the account to delete. DCNL :param partition: The partition in the account ring the account is on. DCNL :param nodes: The primary node dicts for the account to delete. DCNL .. seealso:: DCNL :class:`swift.common.db.AccountBroker` for the broker class. DCNL .. seealso:: DCNL :func:`swift.common.ring.Ring.get_nodes` for a description DCNL of the node dicts.'
'Deletes the data and the container itself for the given container. This DCNL will call :func:`reap_object` up to sqrt(self.concurrency) times DCNL concurrently for the objects in the container. DCNL If there is any exception while deleting a single object, the process DCNL will continue for any other objects in the container and the failed DCNL objects will be tried again the next time this function is called with DCNL the same parameters. DCNL If there is any exception while listing the objects for deletion, the DCNL process will stop (but will obviously be tried again the next time this DCNL function is called with the same parameters). This is a possibility DCNL since the listing comes from querying just the primary remote container DCNL server. DCNL Once all objects have been attempted to be deleted, the container DCNL itself will be attempted to be deleted by sending a delete request to DCNL all container nodes. The format of the delete request is such that each DCNL container server will update a corresponding account server, removing DCNL the container from the account\'s listing. DCNL This function returns nothing and should raise no exception but only DCNL update various self.stats_* values for what occurs. DCNL :param account: The name of the account for the container. DCNL :param account_partition: The partition for the account on the account DCNL ring. DCNL :param account_nodes: The primary node dicts for the account. DCNL :param container: The name of the container to delete. DCNL * See also: :func:`swift.common.ring.Ring.get_nodes` for a description DCNL of the account node dicts.'
'Deletes the given object by issuing a delete request to each node for DCNL the object. The format of the delete request is such that each object DCNL server will update a corresponding container server, removing the DCNL object from the container\'s listing. DCNL This function returns nothing and should raise no exception but only DCNL update various self.stats_* values for what occurs. DCNL :param account: The name of the account for the object. DCNL :param container: The name of the container for the object. DCNL :param container_partition: The partition for the container on the DCNL container ring. DCNL :param container_nodes: The primary node dicts for the container. DCNL :param obj: The name of the object to delete. DCNL * See also: :func:`swift.common.ring.Ring.get_nodes` for a description DCNL of the container node dicts.'
'Handle HTTP DELETE request.'
'Handle HTTP PUT request.'
'Handle HTTP HEAD request.'
'Handle HTTP GET request.'
'Handle HTTP REPLICATE request. DCNL Handler for RPC calls for account replication.'
'Handle HTTP POST request.'
'Run the account audit until stopped.'
'Run the account audit once.'
'Audits the given account path DCNL :param path: the path to an account db'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
'Due to lack of endpoint CRUD'
'Populates a ref with attributes common to all API entities.'
'Applicable only to JSON.'
'Setup for Identity Protection Test Cases. DCNL As well as the usual housekeeping, create a set of domains, DCNL users, roles and projects for the subsequent tests: DCNL - Three domains: A,B & C.  C is disabled. DCNL - DomainA has user1, DomainB has user2 and user3 DCNL - DomainA has group1 and group2, DomainB has group3 DCNL - User1 has a role on DomainA DCNL Remember that there will also be a fourth domain in existence, DCNL the default domain.'
'GET /users (unprotected) DCNL Test Plan: DCNL - Update policy so api is unprotected DCNL - Use an un-scoped token to make sure we can get back all DCNL the users independent of domain'
'GET /users?domain_id=mydomain (filtered) DCNL Test Plan: DCNL - Update policy so api is unprotected DCNL - Use an un-scoped token to make sure we can filter the DCNL users by domainB, getting back the 2 users in that domain'
'GET /users/{id} (match payload) DCNL Test Plan: DCNL - Update policy to protect api by user_id DCNL - List users with user_id of user1 as filter, to check that DCNL this will correctly match user_id in the flattened DCNL payload'
'GET /users?domain_id=mydomain (protected) DCNL Test Plan: DCNL - Update policy to protect api by domain_id DCNL - List groups using a token scoped to domainA with a filter DCNL specifying domainA - we should only get back the one user DCNL that is in domainA. DCNL - Try and read the users from domainB - this should fail since DCNL we don\'t have a token scoped for domainB'
'GET /groups?domain_id=mydomain (protected) DCNL Test Plan: DCNL - Update policy to protect api by domain_id DCNL - List groups using a token scoped to domainA and make sure DCNL we only get back the two groups that are in domainA DCNL - Try and read the groups from domainB - this should fail since DCNL we don\'t have a token scoped for domainB'
'GET /groups?domain_id=mydomain&name=myname (protected) DCNL Test Plan: DCNL - Update policy to protect api by domain_id DCNL - List groups using a token scoped to domainA with a filter DCNL specifying both domainA and the name of group. DCNL - We should only get back the group in domainA that matches DCNL the name'
'GET /domains?enabled=0 DCNL Test Plan: DCNL - Update policy for no protection on api DCNL - Filter by the \'enabled\' boolean to get disabled domains, which DCNL should return just domainC DCNL - Try the filter using different ways of specifying \'true\' DCNL to test that our handling of booleans in filter matching is DCNL correct'
'GET /domains?enabled&name=myname DCNL Test Plan: DCNL - Update policy for no protection on api DCNL - Filter by the \'enabled\' boolean and name - this should DCNL return a single domain'
'You should be able to cleanly undo and re-apply all upgrades. DCNL Upgrades are run in the following order:: DCNL 0 -> 1 -> 0 -> 1 -> 2 -> 1 -> 2 -> 3 -> 2 -> 3 ...'
'Asserts that the table contains the expected set of columns.'
'Naively inserts key-value pairs into a table, given a dictionary.'
'Asserts that a given table exists cannot be selected by name.'
'Assert that two tokens are equal. DCNL Compare two tokens except for their ids. This also truncates DCNL the time in the comparison.'
'Verify that _authenticate_external() raises exception if DCNL not applicable'
'Verity that _authenticate_token() raises exception if no token'
'Verity that _authenticate_local() raises exception if no creds'
'Verify sending empty json dict raises the right exception.'
'Verify sending blank \'auth\' raises the right exception.'
'Verify sending invalid \'auth\' raises the right exception.'
'Verify sending large \'userId\' raises the right exception.'
'Verify sending large \'username\' raises the right exception.'
'Verify sending large \'tenantId\' raises the right exception.'
'Verify sending large \'tenantName\' raises the right exception.'
'Verify sending large \'token\' raises the right exception.'
'Verify sending large \'password\' raises the right exception.'
'Verify getting an unscoped token with password creds'
'Verify exception is raised if invalid token'
'Verify exception is raised if invalid token'
'Verify getting an unscoped token with an unscoped token'
'Verify getting a token in a tenant with an unscoped token'
'Verify getting a token in a tenant with group roles'
'Verify getting a token in cross domain group/project roles'
'Verify exception is raised if invalid user'
'Verify exception is raised if invalid password'
'Verify exception is raised if empty password'
'Verify exception is raised if empty password'
'Verify sending empty json dict as passwordCredentials raises the DCNL right exception.'
'Verify skipping username raises the right exception.'
'Verify getting an unscoped token with external authn'
'Verify that external auth with invalid request fails'
'Verify getting a token with external authn'
'Verify getting a token with external authn and no metadata'
'Verify that external auth with invalid user fails'
'Token expiration should be maintained after re-auth & validation.'
'Setup for v3 Restful Test Cases. DCNL If a child class wants to create their own sample data DCNL and provide their own auth data to obtain tokens, then DCNL load_sample_data should be set to false.'
'Populates a ref with attributes common to all API entities.'
'Translates XML responses to dicts. DCNL This implies that we only have to write assertions for JSON.'
'Convenience method so that we can test authenticated requests.'
'Request the specific token we want.'
'Make assertions common to all API list responses. DCNL If a reference is provided, it\'s ID will be searched for in the DCNL response, and asserted to be equal.'
'Make assertions common to all API responses.'
'Make assertions common to all API entities. DCNL If a reference is provided, the entity will also be compared against DCNL the reference.'
'Assert that two tokens are equal. DCNL Compare two tokens except for their ids. This also truncates DCNL the time in the comparison.'
'Build auth dictionary. DCNL It will create an auth dictionary based on all the arguments DCNL that it receives.'
'Regression test for building the tree names'
'Kill running servers and release references to avoid leaks.'
'Perform request and fetch httplib.HTTPResponse from the server.'
'Asserts that a status code lies inside the 2xx range. DCNL :param response: :py:class:`httplib.HTTPResponse` to be DCNL verified to have a status code between 200 and 299. DCNL example:: DCNL >>> self.assertResponseSuccessful(response, 203)'
'Asserts a specific status code on the response. DCNL :param response: :py:class:`httplib.HTTPResponse` DCNL :param assert_status: The specific ``status`` result expected DCNL example:: DCNL >>> self.assertResponseStatus(response, 203)'
'Ensures that response headers appear as expected.'
'Attempt to encode JSON and XML automatically.'
'Attempt to decode JSON and XML automatically, if detected.'
'Serializes/deserializes json/xml as request/response body. DCNL .. WARNING:: DCNL * Existing Accept header will be overwritten. DCNL * Existing Content-Type header will be overwritten.'
'Convenience method so that we can test authenticated requests.'
'Helper method to return a token ID from a response. DCNL This needs to be overridden by child classes for on their content type.'
'Applicable to XML and JSON.'
'Applicable to XML and JSON. DCNL However, navigating links and media-types differs between content DCNL types so they need to be validated separately.'
'Applicable to XML and JSON. DCNL However, navigating extension links differs between content types. DCNL They need to be validated separately with assertValidExtensionLink.'
'Applicable to XML and JSON.'
'Applicable to XML and JSON.'
'Applicable to XML and JSON.'
'Applicable to XML and JSON.'
'The same call as above, except using HEAD. DCNL There\'s no response to validate here, but this is included for the DCNL sake of completely covering the core API.'
'This triggers assertValidErrorResponse by convention.'
'Applicable only to JSON.'
'Service CRUD should 401 without an X-Auth-Token (bug 1006822).'
'User role list should 401 without an X-Auth-Token (bug 1006815).'
'Helper method to build an namespaced element name.'
'Raise if we see a keyword arg called \'condition\' or \'methods\''
'Clients requesting XML should get what they ask for.'
'Clients requesting JSON should definitely not get XML back.'
'If client does not specify an Accept header, default to JSON.'
'XML requests should be replaced by JSON requests.'
'JSON-only requests should be unnaffected by the XML middleware.'
'Setup for Token Revoking Test Cases. DCNL As well as the usual housekeeping, create a set of domains, DCNL users, groups, roles and projects for the subsequent tests: DCNL - Two domains: A & B DCNL - DomainA has user1, domainB has user2 and user3 DCNL - DomainA has group1 and group2, domainB has group3 DCNL - User1 has a role on domainA DCNL - Two projects: A & B, both in domainA DCNL - All users have a role on projectA DCNL - Two groups: 1 & 2 DCNL - User1 and user2 are members of group1 DCNL - User3 is a member of group2'
'Test deleting a user grant revokes token. DCNL Test Plan: DCNL - Get a token for user1, scoped to ProjectA DCNL - Delete the grant user1 has on ProjectA DCNL - Check token is no longer valid'
'Test creating a user grant revokes token. DCNL Test Plan: DCNL - Get a token for user1, scoped to ProjectA DCNL - Create a grant for user1 on DomainB DCNL - Check token is no longer valid'
'Test deleting a group grant revokes tokens. DCNL Test Plan: DCNL - Get a token for user1, scoped to ProjectA DCNL - Get a token for user2, scoped to ProjectA DCNL - Get a token for user3, scoped to ProjectA DCNL - Delete the grant group1 has on ProjectA DCNL - Check tokens for user1 & user2 are no longer valid, DCNL since user1 and user2 are members of group1 DCNL - Check token for user3 is still valid'
'Test creating a group grant revokes token. DCNL Test Plan: DCNL - Get a token for user1, scoped to ProjectA DCNL - Create a grant for group1 on DomainB DCNL - Check token is no longer valid'
'Test add/removal to/from group revokes token. DCNL Test Plan: DCNL - Get a token for user1, scoped to ProjectA DCNL - Get a token for user2, scoped to ProjectA DCNL - Remove user1 from group1 DCNL - Check token for user1 is no longer valid DCNL - Check token for user2 is still valid, even though DCNL user2 is also part of group1 DCNL - Add user2 to group2 DCNL - Check token for user2 is now no longer valid'
'Everything callable in the exception module should be renderable. DCNL ... except for the base error class (exception.Error), which is not DCNL user-facing. DCNL This test provides a custom message to bypass docstring parsing, which DCNL should be tested separately.'
'Make sure both public and admin API work with ipv6.'
'POST /policies'
'GET /policies'
'GET /policies (xml data)'
'GET /policies/{policy_id}'
'PATCH /policies/{policy_id}'
'DELETE /policies/{policy_id}'
'Parses two XML documents from strings and compares the results. DCNL This provides easy-to-read failures from nose.'
'Ignores the passed in args.'
'Retrieves the value for a key or None.'
'Sets the value for a key.'
'Test for getting roles for user on a domain. DCNL Test Plan: DCNL - Create a domain, with 2 users DCNL - Check no roles yet exit DCNL - Give user1 two roles on the domain, user2 one role DCNL - Get roles on user1 and the domain - maybe sure we only DCNL get back the 2 roles on user1 DCNL - Delete both roles from user1 DCNL - Check we get no roles back for user1 on domain'
'Test errors raised when getting roles for user on a domain. DCNL Test Plan: DCNL - Check non-existing user gives UserNotFound DCNL - Check non-existing domain gives DomainNotFound'
'Regression test for building the tree names'
'Don\'t bind in case the user and password are blank'
'Tests /v2.0/tokens and /v2.0/tokens/ normalized URLs match.'
'Tests empty path is rewritten to root.'
'Make sure both public and admin API work with 1-way SSL.'
'Make sure both public and admin API work with 2-way SSL.  Requires DCNL client certificate.'
'Make sure both public and admin API work with 1-way ipv6 & SSL.'
'Make sure both public and admin API work with 2-way ipv6 & SSL. DCNL Requires client certificate.'
'Expect to fail when client does not present proper certificate.'
'Asserts that a given method raises 501 Not Implemented. DCNL Provides each argument with a value of None, ignoring optional DCNL arguments.'
'Public methods on an interface class should not be implemented.'
'POST /domains'
'GET /domains'
'GET /domains (xml data)'
'GET /domains/{domain_id}'
'PATCH /domains/{domain_id}'
'PATCH /domains/{domain_id} (set enabled=False)'
'DELETE /domains/{domain_id}...(when domain enabled)'
'DELETE /domains/{domain_id} DCNL The sample data set up already has a user, group, project DCNL and credential that is part of self.domain. Since the user DCNL we will authenticate with is in this domain, we create a DCNL another set of entities in a second domain.  Deleting this DCNL second domain should delete all these new entities. In addition, DCNL all the entities in the regular self.domain should be unaffected DCNL by the delete. DCNL Test Plan: DCNL - Create domain2 and a 2nd set of entities DCNL - Disable domain2 DCNL - Delete domain2 DCNL - Check entities in domain2 have been deleted DCNL - Check entities in self.domain are unaffected'
'GET /projects'
'GET /projects (xml data)'
'POST /projects'
'GET /projects/{project_id}'
'PATCH /projects/{project_id}'
'DELETE /projects/{project_id} DCNL As well as making sure the delete succeeds, we ensure DCNL that any credentials that reference this projects are DCNL also deleted, while other credentials are unaffected.'
'POST /users'
'GET /users'
'GET /users (xml data)'
'GET /users/{user_id}'
'PUT /groups/{group_id}/users/{user_id}'
'HEAD /groups/{group_id}/users/{user_id}'
'GET /groups/{group_id}/users'
'DELETE /groups/{group_id}/users/{user_id}'
'PATCH /users/{user_id}'
'DELETE /users/{user_id} DCNL As well as making sure the delete succeeds, we ensure DCNL that any credentials that reference this user are DCNL also deleted, while other credentials are unaffected. DCNL In addition, no tokens should remain valid for this user.'
'POST /groups'
'GET /groups'
'GET /groups (xml data)'
'GET /groups/{group_id}'
'PATCH /groups/{group_id}'
'DELETE /groups/{group_id}'
'GET /credentials'
'GET /credentials (xml data)'
'POST /credentials'
'GET /credentials/{credential_id}'
'PATCH /credentials/{credential_id}'
'DELETE /credentials/{credential_id}'
'POST /roles'
'GET /roles'
'GET /roles (xml data)'
'GET /roles/{role_id}'
'PATCH /roles/{role_id}'
'DELETE /roles/{role_id}'
'POST /services'
'GET /services'
'GET /services (xml data)'
'GET /services/{service_id}'
'PATCH /services/{service_id}'
'DELETE /services/{service_id}'
'GET /endpoints'
'GET /endpoints (xml data)'
'POST /endpoints'
'POST /endpoints'
'GET /endpoints/{endpoint_id}'
'PATCH /endpoints/{endpoint_id}'
'DELETE /endpoints/{endpoint_id}'
'This tests for backwards-compatibility with an essex/folsom bug. DCNL Non-indexed attributes were returned in an \'extra\' attribute, instead DCNL of on the entity itself; for consistency and backwards compatibility, DCNL those attributes should be included twice. DCNL This behavior is specific to the SQL driver.'
'This tests for backwards-compatibility with an essex/folsom bug. DCNL Non-indexed attributes were returned in an \'extra\' attribute, instead DCNL of on the entity itself; for consistency and backwards compatibility, DCNL those attributes should be included twice. DCNL This behavior is specific to the SQL driver.'
'Use the doc string as the error message by default.'
'Builds and returns an exception message. DCNL :raises: KeyError given insufficient kwargs'
'Cleans up line breaks and indentation from doc strings.'
'Only returns detailed messages in debug mode.'
'Ensure ImportError for the specified module.'
'Create shortcut references to each driver for data manipulation.'
'Hacky basic and naive fixture loading based on a python module. DCNL Expects that the various APIs into the various services are already DCNL defined on `self`.'
'Asserts that two datetimes are nearly equal within a small delta. DCNL :param delta: Maximum allowable time delta, defined in seconds.'
'Returns a dictionary populated by decoding the given xml string.'
'Returns a tag name. DCNL The tag name may contain the namespace prefix or not, which can DCNL be determined by specifying the parameter namespace.'
'Populates a dictionary by walking an etree element.'
'Returns an xml etree populated by the given dictionary. DCNL Optionally, namespace the etree by specifying an ``xmlns``.'
'Populates an element with a key & list value.'
'Populates an element with a key & dictionary value.'
'Populates an element with a key & boolean value.'
'Populates an element with a key & string value.'
'Populates an element with a key & numeric value.'
'Populates an etree with the given value.'
'Populates an etree with a sequence of elements, given a list.'
'Populates an etree with attributes & elements, given a dict.'
':param data: Underlying data object DCNL :param limit: maximum number of bytes the reader should allow'
'Deletes an item, returning True on success, False otherwise.'
'Forward calls to the underlying driver.'
'This method is ignored, but provided for compatibility.'
'This method is ignored, but provided for compatibility.'
'Add an object with the specified attributes at dn.'
'Remove the ldap object at specified dn.'
'Remove the ldap object at specified dn.'
'Modify the object at dn using the attribute list. DCNL :param dn: an LDAP DN DCNL :param attrs: a list of tuples in the following form: DCNL ([MOD_ADD | MOD_DELETE | MOD_REPACE], attribute, value)'
'Search for all matching objects under dn using the query. DCNL Args: DCNL dn -- dn to search under DCNL scope -- only SCOPE_BASE and SCOPE_SUBTREE are supported DCNL query -- query to filter objects by DCNL fields -- fields to return. Returns all fields if not specified'
'Run a WSGI server with the given application.'
'Wait until all servers have completed running.'
'Start a WSGI server in a new green thread.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = nova.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import nova.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = nova.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import nova.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response, based on the request.'
'Iterator that prints the contents of a wrapper string.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be an object that can route DCNL the request to the action-specific method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, \'/svrlist\', controller=sc, action=\'list\') DCNL # Actions are all implicitly defined DCNL mapper.resource(\'server\', \'servers\', controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, \'/v1.0/{path_info:.*}\', controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Dispatch the request to the appropriate controller. DCNL Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Add routes to given mapper.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = nova.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import nova.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Returns the model\'s attributes as a dictionary. DCNL If include_extra_dict is True, \'extra\' attributes are literally DCNL included in the resulting dictionary twice, for backwards-compatibility DCNL with a broken implementation.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Return a SQLAlchemy session.'
'Return a SQLAlchemy engine. DCNL If allow_global_engine is True and an in-memory sqlite connection DCNL string is provided by CONF, all backends will share a global sqlalchemy DCNL engine.'
'Return a SQLAlchemy sessionmaker using the given engine.'
'Generate the contents of a catalog templates file.'
'Ensures the reference contains the specified attribute.'
'Fill in domain_id since v2 calls are not domain-aware. DCNL This will overwrite any domain_id that was inadvertently DCNL specified in the v2 call.'
'Remove domain_id since v2 calls are not domain-aware.'
'Paginates a list of references by page & per_page query strings.'
'Filters a list of references by query string value.'
'Ensures the value matches the reference\'s ID, if any.'
'Generates and assigns a unique identifer to a reference.'
'Fill in domain_id if not specified in a v3 call.'
'Override v2 filter to let domain_id out for v3 calls.'
'Verify that a user is authorized to perform action. DCNL For more information on a full implementation of this see: DCNL `keystone.common.policy.enforce`.'
'Store a policy blob. DCNL :raises: keystone.exception.Conflict'
'List all policies.'
'Retrieve a specific policy blob. DCNL :raises: keystone.exception.PolicyNotFound'
'Update a policy blob. DCNL :raises: keystone.exception.PolicyNotFound'
'Remove a policy blob. DCNL :raises: keystone.exception.PolicyNotFound'
'Private method to get a policy model object (NOT a dictionary).'
'Transform the request from XML to JSON.'
'Transform the response from JSON to XML.'
'Normalizes URLs.'
'Common initialization code.'
'Handle incoming request. authenticate and send downstream.'
'Get a token by id. DCNL :param token_id: identity of the token DCNL :type token_id: string DCNL :returns: token_ref DCNL :raises: keystone.exception.TokenNotFound'
'Create a token by id and data. DCNL :param token_id: identity of the token DCNL :type token_id: string DCNL :param data: dictionary with additional reference information DCNL expires=\'\' DCNL id=token_id, DCNL user=user_ref, DCNL tenant=tenant_ref, DCNL metadata=metadata_ref DCNL :type data: dict DCNL :returns: token_ref or None.'
'Deletes a token by id. DCNL :param token_id: identity of the token DCNL :type token_id: string DCNL :returns: None. DCNL :raises: keystone.exception.TokenNotFound'
'Returns a list of current token_id\'s for a user DCNL :param user_id: identity of the user DCNL :type user_id: string DCNL :param tenant_id: identity of the tenant DCNL :type tenant_id: string DCNL :param trust_id: identified of the trust DCNL :type trust_id: string DCNL :returns: list of token_id\'s'
'Returns a list of all revoked tokens DCNL :returns: list of token_id\'s'
'Authenticate credentials and return a token. DCNL Accept auth as a dict that looks like:: DCNL "auth":{ DCNL "passwordCredentials":{ DCNL "username":"test_user", DCNL "password":"mypass" DCNL "tenantName":"customer-x" DCNL In this case, tenant is optional, if not provided the token will be DCNL considered "unscoped" and can later be used to get a scoped token. DCNL Alternatively, this call accepts auth with only a token and tenant DCNL that will return a token that is scoped to that tenant.'
'Try to authenticate using an already existing token. DCNL Returns auth_token_data, (user_ref, tenant_ref, metadata_ref)'
'Try to authenticate against the identity backend. DCNL Returns auth_token_data, (user_ref, tenant_ref, metadata_ref)'
'Try to authenticate an external user via REMOTE_USER variable. DCNL Returns auth_token_data, (user_ref, tenant_ref, metadata_ref)'
'Extract tenant information from auth dict. DCNL Returns a valid tenant_id if it exists, or None if not specified.'
'Extract domain information from v3 auth dict. DCNL Returns a valid domain_id if it exists, or None if not specified.'
'Returns the tenant_ref for the user\'s tenant'
'Returns metadata_ref for a user or group in a tenant or domain'
'Return any metadata for this project/domain due to group grants'
'Update the roles in metadata to be the union of the roles from DCNL both of the passed metadatas'
'Returns a token if a valid one exists. DCNL Optionally, limited to a token owned by a specific tenant.'
'Make sure we are operating on default domain only.'
'Check that a token is valid. DCNL Optionally, also ensure that it is owned by a specific tenant. DCNL Identical to ``validate_token``, except does not return a response.'
'Check that a token is valid. DCNL Optionally, also ensure that it is owned by a specific tenant. DCNL Returns metadata about the token along any associated roles.'
'Delete a token, effectively invalidating it for authz.'
'Return a list of endpoints available to the token.'
'Munge catalogs from internal to output format DCNL Internal catalogs look like: DCNL {$REGION: { DCNL {$SERVICE: { DCNL $key1: $value1, DCNL The legacy api wants them to look like DCNL [{\'name\': $SERVICE[name], DCNL \'type\': $SERVICE, DCNL \'endpoints\': [{ DCNL \'tenantId\': $tenant_id, DCNL \'region\': $REGION, DCNL \'endpoints_links\': [],'
'Formats a list of endpoints according to Identity API v2. DCNL The v2.0 API wants an endpoint list to look like:: DCNL \'endpoints\': [ DCNL \'id\': $endpoint_id, DCNL \'name\': $SERVICE[name], DCNL \'type\': $SERVICE, DCNL \'tenantId\': $tenant_id, DCNL \'region\': $REGION, DCNL \'endpoints_links\': [],'
'Create a new trust. DCNL :returns: a new trust'
'The user creating the trust must be trustor'
'Checks if a role has been assigned to a trust.'
'Checks if a role has been assigned to a trust.'
'Returns a URL to keystone\'s own endpoint.'
'The list of versions is dependent on the context.'
'Allow loading of JSON rule data.'
'Initialize the Rules store.'
'Implements the default rule handling.'
'Dumps a string representation of the rules.'
'Retrieve a string representation of the Check tree rooted at DCNL this node.'
'Perform the check.  Returns False to reject the access or a DCNL true value (not necessary True) to accept the access.'
'Return a string representation of this check.'
'Check the policy.'
'Return a string representation of this check.'
'Check the policy.'
':param kind: The kind of the check, i.e., the field before the DCNL :param match: The match of the check, i.e., the field after DCNL the \':\'.'
'Return a string representation of this check.'
'Initialize the \'not\' check. DCNL :param rule: The rule to negate.  Must be a Check.'
'Return a string representation of this check.'
'Check the policy.  Returns the logical inverse of the wrapped DCNL check.'
'Initialize the \'and\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that all rules accept in order to DCNL return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the AndCheck object for convenience.'
'Initialize the \'or\' check. DCNL :param rules: A list of rules that will be tested.'
'Return a string representation of this check.'
'Check the policy.  Requires that at least one rule accept in DCNL order to return True.'
'Allows addition of another rule to the list of rules that will DCNL be tested.  Returns the OrCheck object for convenience.'
'Create the class.  Injects the \'reducers\' list, a list of DCNL tuples matching token sequences to the names of the DCNL corresponding reduction methods.'
'Initialize the ParseState.'
'Perform a greedy reduction of the token stream.  If a reducer DCNL method matches, it will be executed, then the reduce() method DCNL will be called recursively to search for any more possible DCNL reductions.'
'Adds one more token to the state.  Calls reduce().'
'Obtain the final result of the parse.  Raises ValueError if DCNL the parse failed to reduce to a single result.'
'Turn parenthesized expressions into a \'check\' token.'
'Create an \'and_expr\' from two checks joined by the \'and\' DCNL operator.'
'Extend an \'and_expr\' by adding one more check.'
'Create an \'or_expr\' from two checks joined by the \'or\' DCNL operator.'
'Extend an \'or_expr\' by adding one more check.'
'Invert the result of another check.'
'Recursively checks credentials based on the defined rules.'
'Check that there is a matching role in the cred dict.'
'Check http: rules by calling to a remote server. DCNL This example implementation simply verifies that the response DCNL is exactly \'True\'.'
'Check an individual match. DCNL Matches look like: DCNL tenant:%(tenant_id)s DCNL role:compute:admin'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Authenticate a given user, tenant and password. DCNL :returns: (user_ref, tenant_ref, metadata_ref) DCNL :raises: AssertionError'
'Get a tenant by id. DCNL :returns: tenant_ref DCNL :raises: keystone.exception.ProjectNotFound'
'Get a tenant by name. DCNL :returns: tenant_ref DCNL :raises: keystone.exception.ProjectNotFound'
'Get a user by name. DCNL :returns: user_ref DCNL :raises: keystone.exception.UserNotFound'
'Add user to a tenant by creating a default role relationship. DCNL :raises: keystone.exception.ProjectNotFound, DCNL keystone.exception.UserNotFound'
'Remove user from a tenant DCNL :raises: keystone.exception.ProjectNotFound, DCNL keystone.exception.UserNotFound'
'Lists all users with a relationship to the specified project. DCNL :returns: a list of user_refs or an empty set. DCNL :raises: keystone.exception.ProjectNotFound'
'Get the tenants associated with a given user. DCNL :returns: a list of tenant_id\'s. DCNL :raises: keystone.exception.UserNotFound'
'Get the roles associated with a user within given tenant. DCNL :returns: a list of role ids. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.ProjectNotFound'
'Get the roles associated with a user within given domain. DCNL :returns: a list of role ids. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.ProjectNotFound'
'Add a role to a user within given tenant. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.ProjectNotFound, DCNL keystone.exception.RoleNotFound'
'Remove a role from a user within given tenant. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.ProjectNotFound, DCNL keystone.exception.RoleNotFound'
'Creates a new tenant. DCNL :raises: keystone.exception.Conflict'
'Updates an existing tenant. DCNL :raises: keystone.exception.ProjectNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing tenant. DCNL :raises: keystone.exception.ProjectNotFound'
'Gets the metadata for the specified user/group on project/domain. DCNL :raises: keystone.exception.MetadataNotFound DCNL :returns: metadata'
'Creates the metadata for the specified user/group on project/domain. DCNL :returns: metadata created'
'Updates the metadata for the specified user/group on project/domain. DCNL :returns: metadata updated'
'Creates a new domain. DCNL :raises: keystone.exception.Conflict'
'List all domains in the system. DCNL :returns: a list of domain_refs or an empty list.'
'Get a domain by ID. DCNL :returns: domain_ref DCNL :raises: keystone.exception.DomainNotFound'
'Get a domain by name. DCNL :returns: domain_ref DCNL :raises: keystone.exception.DomainNotFound'
'Updates an existing domain. DCNL :raises: keystone.exception.DomainNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing domain. DCNL :raises: keystone.exception.DomainNotFound'
'Creates a new project. DCNL :raises: keystone.exception.Conflict'
'List all projects in the system. DCNL :returns: a list of project_refs or an empty list.'
'List all projects associated with a given user. DCNL :returns: a list of project_refs or an empty list.'
'Get a project by ID. DCNL :returns: user_ref DCNL :raises: keystone.exception.ProjectNotFound'
'Updates an existing project. DCNL :raises: keystone.exception.ProjectNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing project. DCNL :raises: keystone.exception.ProjectNotFound'
'Creates a new user. DCNL :raises: keystone.exception.Conflict'
'List all users in the system. DCNL :returns: a list of user_refs or an empty list.'
'List all users in a group. DCNL :returns: a list of user_refs or an empty list.'
'Get a user by ID. DCNL :returns: user_ref DCNL :raises: keystone.exception.UserNotFound'
'Updates an existing user. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.Conflict'
'Adds a user to a group. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.GroupNotFound'
'Checks if a user is a member of a group. DCNL :raises: keystone.exception.UserNotFound, DCNL keystone.exception.GroupNotFound'
'Removes a user from a group. DCNL :raises: keystone.exception.NotFound'
'Deletes an existing user. DCNL :raises: keystone.exception.UserNotFound'
'Creates a new credential. DCNL :raises: keystone.exception.Conflict'
'List all credentials in the system. DCNL :returns: a list of credential_refs or an empty list.'
'Get a credential by ID. DCNL :returns: credential_ref DCNL :raises: keystone.exception.CredentialNotFound'
'Updates an existing credential. DCNL :raises: keystone.exception.CredentialNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing credential. DCNL :raises: keystone.exception.CredentialNotFound'
'Creates a new role. DCNL :raises: keystone.exception.Conflict'
'List all roles in the system. DCNL :returns: a list of role_refs or an empty list.'
'Get a role by ID. DCNL :returns: role_ref DCNL :raises: keystone.exception.RoleNotFound'
'Updates an existing role. DCNL :raises: keystone.exception.RoleNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing role. DCNL :raises: keystone.exception.RoleNotFound'
'Creates a new group. DCNL :raises: keystone.exception.Conflict'
'List all groups in the system. DCNL :returns: a list of group_refs or an empty list.'
'List all groups a user is in DCNL :returns: a list of group_refs or an empty list.'
'Get a group by ID. DCNL :returns: group_ref DCNL :raises: keystone.exception.GroupNotFound'
'Updates an existing group. DCNL :raises: keystone.exceptionGroupNotFound, DCNL keystone.exception.Conflict'
'Deletes an existing group. DCNL :raises: keystone.exception.GroupNotFound'
'Override parent to_dict() method with a simpler implementation. DCNL Grant tables don\'t have non-indexed \'extra\' attributes, so the DCNL parent implementation is not applicable.'
'Check the specified password against the data store. DCNL This is modeled on ldap/core.py.  The idea is to make it easier to DCNL subclass Identity so that you can still use it to store all the data, DCNL but use some other means to check the password. DCNL Note that we\'ll pass in the entire user_ref in case the subclass DCNL needs things like user_ref.get(\'name\') DCNL For further justification, please see the follow up suggestion at DCNL https://blueprints.launchpad.net/keystone/+spec/sql-identiy-pam'
'Authenticate based on a user, tenant and password. DCNL Expects the user object to have a password field and the tenant to be DCNL in the list of tenants on the user.'
'Authenticate based on a user, tenant and password. DCNL Expects the user object to have a password field and the tenant to be DCNL in the list of tenants on the user.'
'Authenticate based on a user, tenant and password. DCNL Expects the user object to have a password field and the tenant to be DCNL in the list of tenants on the user.'
'Returns list of tenants a user has access to'
'Returns a list of groups a user has access to'
'Returns a list of users that belong to a group'
'Replaces exception.NotFound with exception.DomainNotFound.'
'Gets a list of all tenants for an admin user.'
'Get valid tenants for token based on token used to authenticate. DCNL Pulls the token from the context, validates it and gets the valid DCNL tenants for the user in the token. DCNL Doesn\'t care about token scopedness.'
'Update the default tenant.'
'Get the roles for a user and tenant pair. DCNL Since we\'re trying to ignore the idea of user-only roles we\'re DCNL not implementing them in hopes that the idea will die off.'
'Add a role to a user and tenant pair. DCNL Since we\'re trying to ignore the idea of user-only roles we\'re DCNL not implementing them in hopes that the idea will die off.'
'Remove a role from a user and tenant pair. DCNL Since we\'re trying to ignore the idea of user-only roles we\'re DCNL not implementing them in hopes that the idea will die off.'
'Ultimate hack to get around having to make role_refs first-class. DCNL This will basically iterate over the various roles the user has in DCNL all tenants the user is a member of and create fake role_refs where DCNL the id encodes the user-tenant-role information so we can look DCNL up the appropriate data when we need to delete them.'
'This is actually used for adding a user to a tenant. DCNL In the legacy data model adding a user to a tenant required setting DCNL a role.'
'This is actually used for deleting a user from a tenant. DCNL In the legacy data model removing a user from a tenant required DCNL deleting a role. DCNL To emulate this, we encode the tenant and role in the role_ref_id, DCNL and if this happens to be the last role for the user-tenant pair, DCNL we remove the user from the tenant.'
'Delete the contents of a domain. DCNL Before we delete a domain, we need to remove all the entities DCNL that are owned by it, i.e. Users, Groups & Projects. To do this we DCNL call the respective delete functions for these entities, which are DCNL themselves responsible for deleting any credentials and role grants DCNL associated with them as well as revoking any relevant tokens. DCNL The order we delete entities is also important since some types DCNL of backend may need to maintain referential integrity DCNL throughout, and many of the entities have relationship with each DCNL other. The following deletion order is therefore used: DCNL Projects: Reference user and groups for grants DCNL Groups: Reference users for membership and domains for grants DCNL Users: Reference domains for grants'
'Get the domain via its unique name. DCNL For use by token authentication - not for hooking to the identity DCNL router as a public api.'
'Grants a role to a user or group on either a domain or project.'
'Lists roles granted to user/group on either a domain or project.'
'Checks if a role has been granted on either a domain or project.'
'Revokes a role from user/group on either a domain or project.'
'Creates a new service. DCNL :raises: keystone.exception.Conflict'
'List all services. DCNL :returns: list of service_refs or an empty list.'
'Get service by id. DCNL :returns: service_ref dict DCNL :raises: keystone.exception.ServiceNotFound'
'Update service by id. DCNL :returns: service_ref dict DCNL :raises: keystone.exception.ServiceNotFound'
'Deletes an existing service. DCNL :raises: keystone.exception.ServiceNotFound'
'Creates a new endpoint for a service. DCNL :raises: keystone.exception.Conflict, DCNL keystone.exception.ServiceNotFound'
'Get endpoint by id. DCNL :returns: endpoint_ref dict DCNL :raises: keystone.exception.EndpointNotFound'
'List all endpoints. DCNL :returns: list of endpoint_refs or an empty list.'
'Get endpoint by id. DCNL :returns: endpoint_ref dict DCNL :raises: keystone.exception.EndpointNotFound DCNL keystone.exception.ServiceNotFound'
'Deletes an endpoint for a service. DCNL :raises: keystone.exception.EndpointNotFound'
'Retrieve and format the current service catalog. DCNL Example:: DCNL { \'RegionOne\': DCNL {\'compute\': { DCNL \'adminURL\': u\'http://host:8774/v1.1/tenantid\', DCNL \'internalURL\': u\'http://host:8774/v1.1/tenant_id\', DCNL \'name\': \'Compute Service\', DCNL \'publicURL\': u\'http://host:8774/v1.1/tenantid\'}, DCNL \'ec2\': { DCNL \'adminURL\': \'http://host:8773/services/Admin\', DCNL \'internalURL\': \'http://host:8773/services/Cloud\', DCNL \'name\': \'EC2 Service\', DCNL \'publicURL\': \'http://host:8773/services/Cloud\'}} DCNL :returns: A nested dict representing the service catalog or an DCNL empty dict. DCNL :raises: keystone.exception.NotFound'
'Retrieve and format the current V3 service catalog. DCNL Example:: DCNL "endpoints": [ DCNL "interface": "public", DCNL "id": "--endpoint-id--", DCNL "region": "RegionOne", DCNL "url": "http://external:8776/v1/--project-id--" DCNL "interface": "internal", DCNL "id": "--endpoint-id--", DCNL "region": "RegionOne", DCNL "url": "http://internal:8776/v1/--project-id--" DCNL "id": "--service-id--", DCNL "type": "volume" DCNL :returns: A list representing the service catalog or an empty list DCNL :raises: keystone.exception.NotFound'
'Merge matching v3 endpoint refs into legacy refs.'
'Create three v3 endpoint refs based on a legacy ref.'
'Delete up to three v3 endpoint refs based on a legacy ref ID.'
'Authenticate user and return an authentication context. DCNL :param context: keystone\'s request context DCNL :auth_payload: the content of the authentication for a given method DCNL :auth_context: user authentication context, a dictionary shared DCNL by all plugins. It contains "method_names" and "extras" DCNL by default. "method_names" is a list and "extras" is DCNL a dictionary. DCNL If successful, plugin must set "user_id" in "auth_context". DCNL "method_name" is used to convey any additional authentication methods DCNL in case authentication is for re-scoping. For example, DCNL if the authentication is for re-scoping, plugin must append the DCNL previous method names into "method_names". Also, plugin may add DCNL any additional information into "extras". Anything in "extras" DCNL will be conveyed in the token\'s "extras" field. Here\'s an example of DCNL "auth_context" on successful authentication. DCNL {"user_id": "abc123", DCNL "methods": ["password", "token"], DCNL "extras": {}} DCNL Plugins are invoked in the order in which they are specified in the DCNL "methods" attribute of the "identity" object. DCNL For example, with the following authentication request, DCNL {"auth": { DCNL "identity": { DCNL "methods": ["custom-plugin", "password", "token"], DCNL "token": { DCNL "id": "sdfafasdfsfasfasdfds" DCNL "custom-plugin": { DCNL "custom-data": "sdfdfsfsfsdfsf" DCNL "password": { DCNL "user": { DCNL "id": "s23sfad1", DCNL "password": "secrete" DCNL plugins will be invoked in this order: DCNL 1. custom-plugin DCNL 2. password DCNL 3. token DCNL :returns: None if authentication is successful. DCNL Authentication payload in the form of a dictionary for the DCNL next authentication step if this is a multi step DCNL authentication. DCNL :raises: exception.Unauthorized for authentication failure'
'Validate and normalize scope data'
'Make sure "auth" is valid.'
'Returns the identity method names. DCNL :returns: list of auth method names'
'Get the auth method payload. DCNL :returns: auth method payload'
'Get scope information. DCNL Verify and return the scoping information. DCNL :returns: (domain_id, project_id, trust_ref). DCNL If scope to a project, (None, project_id, None) DCNL will be returned. DCNL If scoped to a domain, (domain_id, None,None) DCNL will be returned. DCNL If scoped to a trust, (None, project_id, trust_ref), DCNL Will be returned, where the project_id comes from the DCNL trust definition. DCNL If unscoped, (None, None, None) will be returned.'
'Set scope information.'
'Authenticate user and issue a token.'
'Authenticate user.'
'Try to authenticate against the identity backend.'
'Validate a signed EC2 request and provide a token. DCNL Other services (such as Nova) use this **admin** call to determine DCNL if a request they signed received is from a valid user. DCNL If it is a valid signature, an openstack token that maps DCNL to the user/tenant is returned to the caller, along with DCNL all the other details returned from a normal token validation DCNL call. DCNL The returned token is useful for making calls to other DCNL OpenStack services within the context of the request. DCNL :param context: standard context DCNL :param credentials: dict of ec2 signature DCNL :param ec2Credentials: DEPRECATED dict of ec2 signature DCNL :returns: token: openstack token equivalent to access key along DCNL with the corresponding service catalog and roles'
'Create a secret/access pair for use with ec2 style auth. DCNL Generates a new set of credentials that map the the user/tenant DCNL pair. DCNL :param context: standard context DCNL :param user_id: id of user DCNL :param tenant_id: id of tenant DCNL :returns: credential: dict of ec2 credential'
'List all credentials for a user. DCNL :param context: standard context DCNL :param user_id: id of user DCNL :returns: credentials: list of ec2 credential dicts'
'Retrieve a user\'s access/secret pair by the access key. DCNL Grab the full access/secret pair for a given access key. DCNL :param context: standard context DCNL :param user_id: id of user DCNL :param credential_id: access key for credentials DCNL :returns: credential: dict of ec2 credential'
'Delete a user\'s access/secret pair. DCNL Used to revoke a user\'s access/secret pair DCNL :param context: standard context DCNL :param user_id: id of user DCNL :param credential_id: access key for credentials DCNL :returns: bool: success'
'Return credentials from an ID. DCNL :param context: standard context DCNL :param credential_id: id of credential DCNL :raises exception.Unauthorized: when credential id is invalid DCNL :returns: credential: dict of ec2 credential.'
'Check that the provided token belongs to the user. DCNL :param context: standard context DCNL :param user_id: id of user DCNL :raises exception.Forbidden: when token is invalid'
'Wrap admin assertion error return statement. DCNL :param context: standard context DCNL :returns: bool: success'
'Ensure the provided user owns the credential. DCNL :param context: standard context DCNL :param user_id: expected credential owner DCNL :param credential_id: id of credential object DCNL :raises exception.Forbidden: on failure'
'Ensure a valid user id. DCNL :param context: standard context DCNL :param user_id: expected credential owner DCNL :raises exception.UserNotFound: on failure'
'Ensure a valid tenant id. DCNL :param context: standard context DCNL :param tenant_id: expected tenant DCNL :raises exception.ProjectNotFound: on failure'
'Retrieve all previously-captured statistics for an interface.'
'Update statistics for an interface.'
'Increment the counter for an individual statistic.'
'Collect each attribute from the given object.'
'Monitor incoming request attributes.'
'Monitor outgoing response attributes.'
'Increment a statistic counter, or create it if it doesn\'t exist.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'The completion cache store items that can be used for bash DCNL autocompletion, like UUIDs or human-friendly IDs. DCNL A resource listing will clear and repopulate the cache. DCNL A resource create will append to the cache. DCNL Delete is not handled because listings are assumed to be performed DCNL often enough to keep the cache reasonably up-to-date.'
'Find a single item with attributes matching ``**kwargs``. DCNL This isn\'t very efficient: it loads the entire list then filters on DCNL the Python side.'
'Find all items with attributes matching ``**kwargs``. DCNL This isn\'t very efficient: it loads the entire list then filters on DCNL the Python side.'
'Subclasses may override this provide a pretty ID which can be used DCNL for bash completion.'
'Determine the api version that we should use.'
'Remove headers so a user can\'t fake authentication. DCNL :param env: wsgi request environment'
'Get token id from request. DCNL :param env: wsgi request environment DCNL :return token id DCNL :raises InvalidUserToken if no token is provided in request'
'Redirect client to auth server. DCNL :param env: wsgi request environment DCNL :param start_response: wsgi response callback DCNL :returns HTTPUnauthorized http response'
'Return admin token, possibly fetching a new one. DCNL if self.admin_token_expiry is set from fetching an admin token, check DCNL it for expiration, and request a new token is the existing token DCNL is about to expire. DCNL :return admin token id DCNL :raise ServiceError when unable to retrieve token from monitor'
'HTTP request helper used to make unspecified content type requests. DCNL :param method: http method DCNL :param path: relative request url DCNL :return (http response object, response body) DCNL :raise ServerError when unable to communicate with monitor'
'HTTP request helper used to make json requests. DCNL :param method: http method DCNL :param path: relative request url DCNL :param body: dict to encode to json as request body. Optional. DCNL :param additional_headers: dict of additional headers to send with DCNL http request. Optional. DCNL :return (http response object, response body parsed as json) DCNL :raise ServerError when unable to communicate with monitor'
'Retrieve new token as admin user from monitor. DCNL :return token id upon success DCNL :raises ServerError when unable to communicate with monitor DCNL Irrespective of the auth version we are going to use for the DCNL user token, for simplicity we always use a v2 admin token to DCNL validate the user token.'
'Authenticate user using PKI DCNL :param user_token: user\'s token id DCNL :param retry: Ignored, as it is not longer relevant DCNL :return uncrypted body of the token if the token is valid DCNL :raise InvalidUserToken if token is rejected DCNL :no longer raises ServiceError since it no longer makes RPC'
'Convert token object into headers. DCNL Build headers that represent authenticated user - see main DCNL doc info at start of file for details of headers to be defined. DCNL :param token_info: token object returned by monitor on authentication DCNL :raise InvalidUserToken when unable to parse token object'
'Convert header to wsgi env variable. DCNL :param key: http header name (ex. \'X-Auth-Token\') DCNL :return wsgi env variable name (ex. \'HTTP_X_AUTH_TOKEN\')'
'Add http headers to environment.'
'Remove http headers from environment.'
'Get http header from environment.'
'Encrypt or sign data if necessary.'
'Decrypt or verify signed data if necessary.'
'Return the cache key. DCNL Do not use clear token as key if memcache protection is on.'
'Return token information from cache. DCNL If token is invalid raise InvalidUserToken DCNL return token only if fresh (not expired).'
'Store value into memcache.'
'Put token data into the cache. DCNL Stores the parsed expire date in cache allowing DCNL quick check of token freshness on retrieval.'
'Store invalid token in cache.'
'Authenticate user token with monitor. DCNL :param user_token: user\'s token id DCNL :param retry: flag that forces the middleware to retry DCNL user authentication when an indeterminate DCNL response is received. Optional. DCNL :return token object received from monitor on success DCNL :raise InvalidUserToken if token is rejected DCNL :raise ServiceError if unable to authenticate token'
'Indicate whether the token appears in the revocation list.'
'Verifies the signature of the provided data\'s IAW CMS syntax. DCNL If either of the certificate files are missing, fetch them and DCNL retry.'
'Check that the token is unrevoked and has a valid signature.'
'Save a revocation list to memory and to disk. DCNL :param value: A json-encoded revocation list'
'See what the auth service told us and process the response. DCNL We may get redirected to another site, fail or actually get DCNL back a service catalog with a token and our endpoints.'
'We have a token, but don\'t know the final endpoint for DCNL the region. We have to go back to the auth service and DCNL ask again. This request requires an admin-level token DCNL to work. The proxy token supplied could be from a low-level enduser. DCNL We can\'t get this from the keystone service endpoint, we have to use DCNL the admin endpoint. DCNL This will overwrite our admin token with the user token.'
'Authenticate against a v2.0 auth service.'
'Authenticate against the Rackspace auth service.'
'Authenticate and extract the service catalog.'
'error(message: string) DCNL Prints a usage message incorporating the message to stderr and DCNL exits.'
'Run hooks for all registered extensions.'
'Print arguments for bash_completion. DCNL Prints all of the commands and options to stdout so that the DCNL monitor.bash_completion script doesn\'t have to hard code them.'
'Display help about this program or one of its subcommands.'
'Ignores the passed in args.'
'Retrieves the value for a key or None. DCNL this expunges expired keys during each get'
'Sets the value for a key.'
'Sets the value for a key if it doesn\'t exist.'
'Increments the value for a key.'
'Deletes the value associated with a key.'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Restore a backup to a monitor. DCNL :param backup_id: The ID of the backup to restore. DCNL :param monitor_id: The ID of the monitor to restore the backup to. DCNL :rtype: :class:`Restore`'
'QuotaClassSet does not have a \'id\' attribute but base.Resource DCNL needs it to self-refresh and QuotaSet is indexed by class_name'
'Authenticate against the server. DCNL Normally this is called automatically when you first access the API, DCNL but you can call this method to force authentication right now. DCNL Returns on success; raises :exc:`exceptions.Unauthorized` if the DCNL credentials are wrong.'
'Get extra specs from a monitor type. DCNL :param vol_type: The :class:`ServiceManageType` to get extra specs from'
'Set extra specs on a monitor type. DCNL :param type : The :class:`ServiceManageType` to set extra spec on DCNL :param metadata: A dict of key/value pairs to be set'
'Unset extra specs on a volue type. DCNL :param type_id: The :class:`ServiceManageType` to unset extra spec on DCNL :param keys: A list of keys to be unset'
'Get a list of all monitor types. DCNL :rtype: list of :class:`ServiceManageType`.'
'Get a specific monitor type. DCNL :param monitor_type: The ID of the :class:`ServiceManageType` to get. DCNL :rtype: :class:`ServiceManageType`'
'Delete a specific monitor_type. DCNL :param monitor_type: The ID of the :class:`ServiceManageType` to get.'
'Create a monitor type. DCNL :param name: Descriptive name of the monitor type DCNL :rtype: :class:`ServiceManageType`'
'Delete this monitor backup.'
'Create a monitor backup. DCNL :param monitor_id: The ID of the monitor to backup. DCNL :param container: The name of the backup service container. DCNL :param name: The name of the backup. DCNL :param description: The description of the backup. DCNL :rtype: :class:`ServiceManageBackup`'
'Show details of a monitor backup. DCNL :param backup_id: The ID of the backup to display. DCNL :rtype: :class:`ServiceManageBackup`'
'Get a list of all monitor backups. DCNL :rtype: list of :class:`ServiceManageBackup`'
'Delete a monitor backup. DCNL :param backup: The :class:`ServiceManageBackup` to delete.'
'Delete this snapshot.'
'Update the display_name or display_description for this snapshot.'
'Create a snapshot of the given monitor. DCNL :param monitor_id: The ID of the monitor to snapshot. DCNL :param force: If force is True, create a snapshot even if the monitor is DCNL attached to an instance. Default is False. DCNL :param display_name: Name of the snapshot DCNL :param display_description: Description of the snapshot DCNL :rtype: :class:`Snapshot`'
'Get a snapshot. DCNL :param snapshot_id: The ID of the snapshot to get. DCNL :rtype: :class:`Snapshot`'
'Get a list of all snapshots. DCNL :rtype: list of :class:`Snapshot`'
'Delete a snapshot. DCNL :param snapshot: The :class:`Snapshot` to delete.'
'Update the display_name or display_description for a snapshot. DCNL :param snapshot: The :class:`Snapshot` to delete.'
'QuotaSet does not have a \'id\' attribute but base.Resource needs it DCNL to self-refresh and QuotaSet is indexed by tenant_id'
'Delete this monitor.'
'Update the display_name or display_description for this monitor.'
'Set attachment metadata. DCNL :param instance_uuid: uuid of the attaching instance. DCNL :param mountpoint: mountpoint on the attaching instance.'
'Clear attachment metadata.'
'Reserve this monitor.'
'Unreserve this monitor.'
'Begin detaching monitor.'
'Roll detaching monitor.'
'Initialize a monitor connection. DCNL :param connector: connector dict from nova.'
'Terminate a monitor connection. DCNL :param connector: connector dict from nova.'
'Set or Append metadata to a monitor. DCNL :param type : The :class: `ServiceManage` to set metadata on DCNL :param metadata: A dict of key/value pairs to set'
'Upload a monitor to image service as an image.'
'Delete the specified monitor ignoring its current state. DCNL :param monitor: The UUID of the monitor to force-delete.'
'Create a monitor. DCNL :param size: Size of monitor in GB DCNL :param snapshot_id: ID of the snapshot DCNL :param display_name: Name of the monitor DCNL :param display_description: Description of the monitor DCNL :param monitor_type: Type of monitor DCNL :rtype: :class:`ServiceManage` DCNL :param user_id: User id derived from context DCNL :param project_id: Project id derived from context DCNL :param availability_zone: Availability Zone to use DCNL :param metadata: Optional metadata to set on monitor creation DCNL :param imageRef: reference to an image stored in glance DCNL :param source_volid: ID of source monitor to clone from'
'Get a monitor. DCNL :param monitor_id: The ID of the monitor to delete. DCNL :rtype: :class:`ServiceManage`'
'Get a list of all monitors. DCNL :rtype: list of :class:`ServiceManage`'
'Delete a monitor. DCNL :param monitor: The :class:`ServiceManage` to delete.'
'Update the display_name or display_description for a monitor. DCNL :param monitor: The :class:`ServiceManage` to delete.'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a pas "action."'
'Set attachment metadata. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to attach. DCNL :param instance_uuid: uuid of the attaching instance. DCNL :param mountpoint: mountpoint on the attaching instance.'
'Clear attachment metadata. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to detach.'
'Reserve this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to reserve.'
'Unreserve this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to unreserve.'
'Begin detaching this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to detach.'
'Roll detaching this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to roll detaching.'
'Initialize a monitor connection. DCNL :param monitor: The :class:`ServiceManage` (or its ID). DCNL :param connector: connector dict from nova.'
'Terminate a monitor connection. DCNL :param monitor: The :class:`ServiceManage` (or its ID). DCNL :param connector: connector dict from nova.'
'Update/Set a monitors metadata. DCNL :param monitor: The :class:`ServiceManage`. DCNL :param metadata: A list of keys to be set.'
'Delete specified keys from monitors metadata. DCNL :param monitor: The :class:`ServiceManage`. DCNL :param metadata: A list of keys to be removed.'
'Upload monitor to image service as image. DCNL :param monitor: The :class:`ServiceManage` to upload.'
'Get a specific extension. DCNL :rtype: :class:`Limits`'
'Fetch the public URL from the Compute service for DCNL a particular endpoint attribute. If none given, return DCNL the first. See tests for sample service catalog.'
'Run before each test.'
'Run before each test.'
'Assert than an API method was just called.'
'Assert than an API method was called anytime in the test.'
'The completion cache store items that can be used for bash DCNL autocompletion, like UUIDs or human-friendly IDs. DCNL A resource listing will clear and repopulate the cache. DCNL A resource create will append to the cache. DCNL Delete is not handled because listings are assumed to be performed DCNL often enough to keep the cache reasonably up-to-date.'
'Find a single item with attributes matching ``**kwargs``. DCNL This isn\'t very efficient: it loads the entire list then filters on DCNL the Python side.'
'Find all items with attributes matching ``**kwargs``. DCNL This isn\'t very efficient: it loads the entire list then filters on DCNL the Python side.'
'Subclasses may override this provide a pretty ID which can be used DCNL for bash completion.'
'Determine the api version that we should use.'
'Remove headers so a user can\'t fake authentication. DCNL :param env: wsgi request environment'
'Get token id from request. DCNL :param env: wsgi request environment DCNL :return token id DCNL :raises InvalidUserToken if no token is provided in request'
'Redirect client to auth server. DCNL :param env: wsgi request environment DCNL :param start_response: wsgi response callback DCNL :returns HTTPUnauthorized http response'
'Return admin token, possibly fetching a new one. DCNL if self.admin_token_expiry is set from fetching an admin token, check DCNL it for expiration, and request a new token is the existing token DCNL is about to expire. DCNL :return admin token id DCNL :raise ServiceError when unable to retrieve token from monitor'
'HTTP request helper used to make unspecified content type requests. DCNL :param method: http method DCNL :param path: relative request url DCNL :return (http response object, response body) DCNL :raise ServerError when unable to communicate with monitor'
'HTTP request helper used to make json requests. DCNL :param method: http method DCNL :param path: relative request url DCNL :param body: dict to encode to json as request body. Optional. DCNL :param additional_headers: dict of additional headers to send with DCNL http request. Optional. DCNL :return (http response object, response body parsed as json) DCNL :raise ServerError when unable to communicate with monitor'
'Retrieve new token as admin user from monitor. DCNL :return token id upon success DCNL :raises ServerError when unable to communicate with monitor DCNL Irrespective of the auth version we are going to use for the DCNL user token, for simplicity we always use a v2 admin token to DCNL validate the user token.'
'Authenticate user using PKI DCNL :param user_token: user\'s token id DCNL :param retry: Ignored, as it is not longer relevant DCNL :return uncrypted body of the token if the token is valid DCNL :raise InvalidUserToken if token is rejected DCNL :no longer raises ServiceError since it no longer makes RPC'
'Convert token object into headers. DCNL Build headers that represent authenticated user - see main DCNL doc info at start of file for details of headers to be defined. DCNL :param token_info: token object returned by monitor on authentication DCNL :raise InvalidUserToken when unable to parse token object'
'Convert header to wsgi env variable. DCNL :param key: http header name (ex. \'X-Auth-Token\') DCNL :return wsgi env variable name (ex. \'HTTP_X_AUTH_TOKEN\')'
'Add http headers to environment.'
'Remove http headers from environment.'
'Get http header from environment.'
'Encrypt or sign data if necessary.'
'Decrypt or verify signed data if necessary.'
'Return the cache key. DCNL Do not use clear token as key if memcache protection is on.'
'Return token information from cache. DCNL If token is invalid raise InvalidUserToken DCNL return token only if fresh (not expired).'
'Store value into memcache.'
'Put token data into the cache. DCNL Stores the parsed expire date in cache allowing DCNL quick check of token freshness on retrieval.'
'Store invalid token in cache.'
'Authenticate user token with monitor. DCNL :param user_token: user\'s token id DCNL :param retry: flag that forces the middleware to retry DCNL user authentication when an indeterminate DCNL response is received. Optional. DCNL :return token object received from monitor on success DCNL :raise InvalidUserToken if token is rejected DCNL :raise ServiceError if unable to authenticate token'
'Indicate whether the token appears in the revocation list.'
'Verifies the signature of the provided data\'s IAW CMS syntax. DCNL If either of the certificate files are missing, fetch them and DCNL retry.'
'Check that the token is unrevoked and has a valid signature.'
'Save a revocation list to memory and to disk. DCNL :param value: A json-encoded revocation list'
'See what the auth service told us and process the response. DCNL We may get redirected to another site, fail or actually get DCNL back a service catalog with a token and our endpoints.'
'We have a token, but don\'t know the final endpoint for DCNL the region. We have to go back to the auth service and DCNL ask again. This request requires an admin-level token DCNL to work. The proxy token supplied could be from a low-level enduser. DCNL We can\'t get this from the keystone service endpoint, we have to use DCNL the admin endpoint. DCNL This will overwrite our admin token with the user token.'
'Authenticate against a v2.0 auth service.'
'Authenticate against the Rackspace auth service.'
'Authenticate and extract the service catalog.'
'error(message: string) DCNL Prints a usage message incorporating the message to stderr and DCNL exits.'
'Run hooks for all registered extensions.'
'Print arguments for bash_completion. DCNL Prints all of the commands and options to stdout so that the DCNL monitor.bash_completion script doesn\'t have to hard code them.'
'Display help about this program or one of its subcommands.'
'Ignores the passed in args.'
'Retrieves the value for a key or None. DCNL this expunges expired keys during each get'
'Sets the value for a key.'
'Sets the value for a key if it doesn\'t exist.'
'Increments the value for a key.'
'Deletes the value associated with a key.'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'Restore a backup to a monitor. DCNL :param backup_id: The ID of the backup to restore. DCNL :param monitor_id: The ID of the monitor to restore the backup to. DCNL :rtype: :class:`Restore`'
'QuotaClassSet does not have a \'id\' attribute but base.Resource DCNL needs it to self-refresh and QuotaSet is indexed by class_name'
'Authenticate against the server. DCNL Normally this is called automatically when you first access the API, DCNL but you can call this method to force authentication right now. DCNL Returns on success; raises :exc:`exceptions.Unauthorized` if the DCNL credentials are wrong.'
'Get extra specs from a monitor type. DCNL :param vol_type: The :class:`ServiceManageType` to get extra specs from'
'Set extra specs on a monitor type. DCNL :param type : The :class:`ServiceManageType` to set extra spec on DCNL :param metadata: A dict of key/value pairs to be set'
'Unset extra specs on a volue type. DCNL :param type_id: The :class:`ServiceManageType` to unset extra spec on DCNL :param keys: A list of keys to be unset'
'Get a list of all monitor types. DCNL :rtype: list of :class:`ServiceManageType`.'
'Get a specific monitor type. DCNL :param monitor_type: The ID of the :class:`ServiceManageType` to get. DCNL :rtype: :class:`ServiceManageType`'
'Delete a specific monitor_type. DCNL :param monitor_type: The ID of the :class:`ServiceManageType` to get.'
'Create a monitor type. DCNL :param name: Descriptive name of the monitor type DCNL :rtype: :class:`ServiceManageType`'
'Delete this monitor backup.'
'Create a monitor backup. DCNL :param monitor_id: The ID of the monitor to backup. DCNL :param container: The name of the backup service container. DCNL :param name: The name of the backup. DCNL :param description: The description of the backup. DCNL :rtype: :class:`ServiceManageBackup`'
'Show details of a monitor backup. DCNL :param backup_id: The ID of the backup to display. DCNL :rtype: :class:`ServiceManageBackup`'
'Get a list of all monitor backups. DCNL :rtype: list of :class:`ServiceManageBackup`'
'Delete a monitor backup. DCNL :param backup: The :class:`ServiceManageBackup` to delete.'
'Delete this snapshot.'
'Update the display_name or display_description for this snapshot.'
'Create a snapshot of the given monitor. DCNL :param monitor_id: The ID of the monitor to snapshot. DCNL :param force: If force is True, create a snapshot even if the monitor is DCNL attached to an instance. Default is False. DCNL :param display_name: Name of the snapshot DCNL :param display_description: Description of the snapshot DCNL :rtype: :class:`Snapshot`'
'Get a snapshot. DCNL :param snapshot_id: The ID of the snapshot to get. DCNL :rtype: :class:`Snapshot`'
'Get a list of all snapshots. DCNL :rtype: list of :class:`Snapshot`'
'Delete a snapshot. DCNL :param snapshot: The :class:`Snapshot` to delete.'
'Update the display_name or display_description for a snapshot. DCNL :param snapshot: The :class:`Snapshot` to delete.'
'QuotaSet does not have a \'id\' attribute but base.Resource needs it DCNL to self-refresh and QuotaSet is indexed by tenant_id'
'Delete this monitor.'
'Update the display_name or display_description for this monitor.'
'Set attachment metadata. DCNL :param instance_uuid: uuid of the attaching instance. DCNL :param mountpoint: mountpoint on the attaching instance.'
'Clear attachment metadata.'
'Reserve this monitor.'
'Unreserve this monitor.'
'Begin detaching monitor.'
'Roll detaching monitor.'
'Initialize a monitor connection. DCNL :param connector: connector dict from nova.'
'Terminate a monitor connection. DCNL :param connector: connector dict from nova.'
'Set or Append metadata to a monitor. DCNL :param type : The :class: `ServiceManage` to set metadata on DCNL :param metadata: A dict of key/value pairs to set'
'Upload a monitor to image service as an image.'
'Delete the specified monitor ignoring its current state. DCNL :param monitor: The UUID of the monitor to force-delete.'
'Create a monitor. DCNL :param size: Size of monitor in GB DCNL :param snapshot_id: ID of the snapshot DCNL :param display_name: Name of the monitor DCNL :param display_description: Description of the monitor DCNL :param monitor_type: Type of monitor DCNL :rtype: :class:`ServiceManage` DCNL :param user_id: User id derived from context DCNL :param project_id: Project id derived from context DCNL :param availability_zone: Availability Zone to use DCNL :param metadata: Optional metadata to set on monitor creation DCNL :param imageRef: reference to an image stored in glance DCNL :param source_volid: ID of source monitor to clone from'
'Get a monitor. DCNL :param monitor_id: The ID of the monitor to delete. DCNL :rtype: :class:`ServiceManage`'
'Get a list of all monitors. DCNL :rtype: list of :class:`ServiceManage`'
'Delete a monitor. DCNL :param monitor: The :class:`ServiceManage` to delete.'
'Update the display_name or display_description for a monitor. DCNL :param monitor: The :class:`ServiceManage` to delete.'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a monitor "action."'
'Perform a pas "action."'
'Set attachment metadata. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to attach. DCNL :param instance_uuid: uuid of the attaching instance. DCNL :param mountpoint: mountpoint on the attaching instance.'
'Clear attachment metadata. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to detach.'
'Reserve this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to reserve.'
'Unreserve this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to unreserve.'
'Begin detaching this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to detach.'
'Roll detaching this monitor. DCNL :param monitor: The :class:`ServiceManage` (or its ID) DCNL you would like to roll detaching.'
'Initialize a monitor connection. DCNL :param monitor: The :class:`ServiceManage` (or its ID). DCNL :param connector: connector dict from nova.'
'Terminate a monitor connection. DCNL :param monitor: The :class:`ServiceManage` (or its ID). DCNL :param connector: connector dict from nova.'
'Update/Set a monitors metadata. DCNL :param monitor: The :class:`ServiceManage`. DCNL :param metadata: A list of keys to be set.'
'Delete specified keys from monitors metadata. DCNL :param monitor: The :class:`ServiceManage`. DCNL :param metadata: A list of keys to be removed.'
'Upload monitor to image service as image. DCNL :param monitor: The :class:`ServiceManage` to upload.'
'Get a specific extension. DCNL :rtype: :class:`Limits`'
'Fetch the public URL from the Compute service for DCNL a particular endpoint attribute. If none given, return DCNL the first. See tests for sample service catalog.'
'Runs a command in an out-of-process shell. DCNL Returns the output of that command. Working directory is self.root.'
'Creates the virtual environment and installs PIP. DCNL Creates the virtual environment and installs PIP only into the DCNL virtual environment.'
'Parses command-line arguments.'
'Any distribution-specific post-processing gets done here. DCNL In particular, this is useful for applying patches to code inside DCNL the venv.'
'Workaround for a bug in eventlet. DCNL This currently affects RHEL6.1, but the fix can safely be DCNL applied to all RHEL and Fedora distributions. DCNL This can be removed when the fix is applied upstream. DCNL Nova: https://bugs.launchpad.net/nova/+bug/884915 DCNL Upstream: https://bitbucket.org/which_linden/eventlet/issue/89'
':param data: Underlying data object DCNL :param limit: maximum number of bytes the reader should allow'
'Register extension with the extension manager.'
'List of extensions.ResourceExtension extension objects. DCNL Resources define new nouns, and are accessible through URLs.'
'List of extensions.ControllerExtension extension objects. DCNL Controller extensions are used to extend existing controllers.'
'Synthesize a namespace map from extension.'
'Synthesize element and attribute names.'
'Returns a list of ResourceExtension objects.'
'Returns a list of ControllerExtension objects.'
'Checks for required methods in extension objects.'
'Execute an extension factory. DCNL Loads an extension.  The \'ext_factory\' is the name of a DCNL callable that will be imported and called with one DCNL argument--the extension manager.  The factory callable is DCNL expected to call the register() method at least once.'
'Load extensions specified on the command line.'
'Return href string with proper limit and marker params.'
'Return an href string pointing to this object.'
'Create a URL that refers to a specific resource.'
'Retrieve \'next\' link, if applicable.'
'Marshal the metadata attribute of a parsed request'
'Initialize view builder.'
'Show a list of backups without many details.'
'Detailed view of a list of backups .'
'Generic, non-detailed view of a backup.'
'Generic, non-detailed view of a restore.'
'Detailed view of a single backup.'
'Provide a view for a list of backups.'
'Trim away extraneous servicemanage type attributes.'
'Index over trimmed servicemanage types'
'Builder for absolute limits DCNL absolute_limits should be given as a dict of limits. DCNL For example: {"ram": 512, "gigabytes": 1024}.'
':param base_url: url of the root wsgi application'
'Generate a container of links that refer to the provided version.'
'Create an url that refers to a specific version_number.'
'Initialize the selector. DCNL Each argument is a subsequent index into the object.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Selects the relevant datum within the object. DCNL :param obj: The object from which to select the object. DCNL :param do_raise: If False (the default), return None if the DCNL indexed datum does not exist.  Otherwise, DCNL raise a KeyError.'
'Returns empty string if the selected value does not exist.'
'Initialize the selector. DCNL :param value: The value to return.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Returns a constant value.  Compatible with DCNL Selector.__call__().'
'Initialize an element. DCNL Initializes an element in the template.  Keyword arguments DCNL specify attributes to be set on the element; values must be DCNL callables.  See TemplateElement.set() for more information. DCNL :param tag: The name of the tag to create. DCNL :param attrib: An optional dictionary of element attributes. DCNL :param selector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL :param subselector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL This is used to further refine the datum DCNL object returned by selector in the event DCNL that it is a list of objects.'
'Return a representation of the template element.'
'Return the number of child elements.'
'Determine whether a child node named by key exists.'
'Retrieve a child node by index or name.'
'Append a child to the element.'
'Append children to the element.'
'Insert a child element at the given index.'
'Remove a child element.'
'Get an attribute. DCNL Returns a callable which performs datum selection. DCNL :param key: The name of the attribute to get.'
'Set an attribute. DCNL :param key: The name of the attribute to set. DCNL :param value: A callable taking an object and optional boolean DCNL do_raise indicator and returning the datum bound DCNL to the attribute.  If None, a Selector() will be DCNL constructed from the key.  If a string, a DCNL Selector() will be constructed from the string.'
'Return the attribute names.'
'Return the attribute names and values.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Apply text and attributes to an etree.Element. DCNL Applies the text and attribute instructions in the template DCNL element to an etree.Element instance. DCNL :param elem: An etree.Element instance. DCNL :param obj: The base object associated with this template DCNL element.'
'Internal rendering. DCNL Renders the template node into an etree.Element object. DCNL Returns the etree.Element object. DCNL :param parent: The parent etree.Element instance. DCNL :param datum: The datum associated with this template element. DCNL :param patches: A list of other template elements that must DCNL also be applied. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance.'
'Render an object. DCNL Renders an object against this template node.  Returns a list DCNL of two-item tuples, where the first item is an etree.Element DCNL instance and the second item is the datum associated with that DCNL instance. DCNL :param parent: The parent for the etree.Element instances. DCNL :param obj: The object to render this template element DCNL against. DCNL :param patches: A list of other template elements to apply DCNL when rendering this template element. DCNL :param nsmap: An optional namespace dictionary to attach to DCNL the etree.Element instances.'
'Hook method. DCNL An overridable hook method to determine whether this template DCNL element will be rendered at all.  By default, returns False DCNL (inhibiting rendering) if the datum is None. DCNL :param datum: The datum associated with this template element.'
'Template element text. DCNL Either None or a callable taking an object and optional DCNL boolean do_raise indicator and returning the datum bound to DCNL the text of the template element.'
'Return string representation of the template tree. DCNL Returns a representation of the template rooted at this DCNL element as a string, suitable for inclusion in debug logs.'
'Initialize a template. DCNL :param root: The root element of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Internal serialization. DCNL Recursive routine to build a tree of etree.Element instances DCNL from an object based on the template.  Returns the first DCNL etree.Element instance rendered, or None. DCNL :param parent: The parent etree.Element instance.  Can be DCNL None. DCNL :param obj: The object to render. DCNL :param siblings: The TemplateElement instances against which DCNL to render the object. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance DCNL rendered.'
'Serialize an object. DCNL Serializes an object against the template.  Returns a string DCNL with the serialized XML.  Positional and keyword arguments are DCNL passed to etree.tostring(). DCNL :param obj: The object to serialize.'
'Create a tree. DCNL Serializes an object against the template.  Returns an Element DCNL node with appropriate children. DCNL :param obj: The object to serialize.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  By default, this is the root element itself.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template. DCNL :param master: The master template to test.'
'Return string representation of the template tree. DCNL Returns a representation of the template as a string, suitable DCNL for inclusion in debug logs.'
'Initialize a master template. DCNL :param root: The root element of the template. DCNL :param version: The version number of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  This is the root element plus the root elements of DCNL all the slave templates.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary. DCNL The namespace dictionary is computed by taking the master DCNL template\'s namespace dictionary and updating it from all the DCNL slave templates.'
'Attach one or more slave templates. DCNL Attaches one or more slave templates to the master template. DCNL Slave templates must have a root element with the same tag as DCNL the master template.  The slave template\'s apply() method will DCNL be called to determine if the slave should be applied to this DCNL master; if it returns False, that slave will be skipped. DCNL (This allows filtering of slaves based on the version of the DCNL master template.)'
'Return a copy of this master template.'
'Initialize a slave template. DCNL :param root: The root element of the template. DCNL :param min_vers: The minimum permissible version of the master DCNL template for this slave template to apply. DCNL :param max_vers: An optional upper bound for the master DCNL template version. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template.  This DCNL version requires the master template to have a version number DCNL between min_vers and max_vers. DCNL :param master: The master template to test.'
'Construct and return a template. DCNL :param copy: If True (the default), a copy of the template DCNL will be constructed and returned, if possible.'
'Construct a template. DCNL Called to construct a template instance, which it must return. DCNL Only called once.'
'Simple paste factory, :class:`monitor.wsgi.Router` doesn\'t have'
'Determine the requested response content-type.'
'Determine content type of the request body. DCNL Does not do any body introspection, only checks header'
'Find and call local method.'
':param metadata: information needed to deserialize xml into DCNL a dictionary.'
'Convert a minidom node to a simple Python type. DCNL :param listnames: list of XML node names whose subnodes should DCNL be considered list items.'
'Search a nodes children for the first child with a given name'
'Return all of a nodes children who have the given name'
'Get the text field contained by the given node'
'Get an attribute value; fallback to an element if not found'
'Marshal the metadata attribute of a parsed request'
':param metadata: information needed to deserialize xml into DCNL a dictionary. DCNL :param xmlns: XML namespace to include with serialized xml'
'Recursive method to convert data members to XML nodes.'
'Convert the xml object to an xml string.'
'Binds serializers with an object. DCNL Takes keyword arguments akin to the @serializer() decorator DCNL for specifying serializers.  Serializers specified will be DCNL given preference over default serializers or method-specific DCNL serializers on return.'
'Retrieves a header with the given name.'
'Sets a header with the given name to the given value.'
'Deletes the header with the given name.'
'Binds method serializers with the response object. DCNL Binds the method serializers with the response object. DCNL Serializers specified to the constructor will take precedence DCNL over serializers specified to this method. DCNL :param meth_serializers: A dictionary with keys mapping to DCNL response types and values containing DCNL serializer objects.'
'Returns the serializer for the wrapped object. DCNL Returns the serializer for the wrapped object subject to the DCNL indicated content type.  If no serializer matching the content DCNL type is attached, an appropriate serializer drawn from the DCNL default serializers will be used.  If no appropriate DCNL serializer is available, raises InvalidContentType.'
'Prepares the serializer that will be used to serialize. DCNL Determines the serializer that will be used and prepares an DCNL instance of it for later call.  This allows the serializer to DCNL be accessed by extensions for, e.g., template extension.'
'Attach slave templates to serializers.'
'Serializes the wrapped object. DCNL Utility method for serializing the wrapped object.  Returns a DCNL webob.Response object.'
'Retrieve the response status.'
'Retrieve the headers.'
':param controller: object that implement methods created by routes lib DCNL :param action_peek: dictionary of routines for peeking into an action DCNL request body to determine the desired action'
'Registers controller actions with this resource.'
'Registers controller extensions with this resource.'
'Parse dictionary created by routes library.'
'WSGI method that controls (de)serialization and method dispatch.'
'Implement the processing stack.'
'Look up the action-specific method and its extensions.'
'Dispatch a call to the action-specific method.'
'Adds the wsgi_actions dictionary to the class.'
'Initialize controller with a view builder instance.'
'Create a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Initialize new `OverLimitFault` with relevant information.'
'Return the wrapped exception with a serialized body conforming to our DCNL error format.'
'Returns the list of servicemanage types.'
'Return a single servicemanage type item.'
'Return all global and rate limit information.'
'Initialize a new `Limit`. DCNL @param verb: HTTP verb (POST, PUT, etc.) DCNL @param uri: Human-readable URI DCNL @param regex: Regular expression format for this limit DCNL @param value: Integer number of requests which can be made DCNL @param unit: Unit of measure for the value parameter'
'Represents a call to this limit from a relevant request. DCNL @param verb: string http verb (POST, GET, etc.) DCNL @param url: string URL'
'Retrieve the current time. Broken out for testability.'
'Display the string name of the unit.'
'Return a useful representation of this class.'
'Initialize new `RateLimitingMiddleware`, which wraps the given WSGI DCNL application and sets up the given limits. DCNL @param application: WSGI application to wrap DCNL @param limits: String describing limits DCNL @param limiter: String identifying class for representing limits DCNL Other parameters are passed to the constructor for the limiter.'
'Represents a single call through this middleware. We should record the DCNL request if we have a limit relevant to it. If no limit is relevant to DCNL the request, ignore it. DCNL If the request should be rate limited, return a fault telling the user DCNL they are over the limit and need to retry later.'
'Initialize the new `Limiter`. DCNL @param limits: List of `Limit` objects'
'Return the limits for a given user.'
'Check the given verb/user/user triplet for limit. DCNL @return: Tuple of delay (in seconds) and error message (or None, None)'
'Convert a string into a list of Limit instances.  This DCNL implementation expects a semicolon-separated sequence of DCNL parenthesized groups, where each group contains a DCNL comma-separated sequence consisting of HTTP method, DCNL user-readable URI, a URI reg-exp, an integer number of DCNL requests which can be made, and a unit of measure.  Valid DCNL values for the latter are "SECOND", "MINUTE", "HOUR", and DCNL "DAY". DCNL @return: List of Limit instances.'
'Initialize the new `WsgiLimiter`. DCNL @param limits: List of `Limit` objects'
'Handles a call to this application. Returns 204 if the request is DCNL acceptable to the limiter, else a 403 is returned with a relevant DCNL header indicating when the request *will* succeed.'
'Initialize the new `WsgiLimiterProxy`. DCNL @param limiter_address: IP/port combination of where to request limit'
'Ignore a limits string--simply doesn\'t apply for the limit DCNL proxy. DCNL @return: Empty list.'
'Find parameters in Accept header for given content type.'
'Find longest match for a given URL path.'
'Check path suffix for MIME type and path prefix for API version.'
'Check Content-Type header for API version.'
'Check Accept header for best matching MIME type and API version.'
'Sets the specified host\'s ability to accept new servicemanages.'
'Shows the servicemanage usage info given by hosts. DCNL :param context: security context DCNL :param host: hostname DCNL :returns: expected to use HostShowTemplate. DCNL ex.:: DCNL {\'host\': {\'resource\':D},..} DCNL D: {\'host\': \'hostname\',\'project\': \'admin\', DCNL \'servicemanage_count\': 1, \'total_servicemanage_gb\': 2048}'
'Returns the list of extra specs for a given servicemanage type'
'Return a single extra spec item.'
'Deletes an existing extra spec'
'Convert the quota object to a result dict'
'Return a list of all running services. Filter by host & service name.'
'Enable/Disable scheduling for a service'
'Convert the quota object to a result dict'
'Return data about the given backup.'
'Delete a backup.'
'Returns a summary list of backups.'
'Returns a detailed list of backups.'
'Returns a list of backups, transformed through view builder.'
'Create a new backup.'
'Restore an existing backup to a servicemanage.'
'Creates a new servicemanage type.'
'Deletes an existing servicemanage type.'
'Add attachment metadata.'
'Clear attachment metadata.'
'Mark servicemanage as reserved.'
'Unmark servicemanage as reserved.'
'Update servicemanage status to \'detaching\'.'
'Roll back servicemanage status to \'in-use\'.'
'Initialize servicemanage attachment.'
'Terminate servicemanage attachment.'
'Uploads the specified servicemanage to image service.'
'Reset status on the resource.'
'Delete a resource, bypassing the check that it must be available.'
'Roll back a bad detach after the servicemanage been disconnected from DCNL the hypervisor.'
'Return all versions.'
'Return multiple choices.'
'Parse dictionary created by routes library.'
'Save this object.'
'Delete this object.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Return an item from the pool, when one is available.  This may DCNL cause the calling greenthread to block. Check if a connection is active DCNL before returning it. For dead connections create and return a new DCNL connection.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Rollback a series of actions then re-raise the exception. DCNL .. note:: (sirp) This should only be called within an DCNL exception handler.'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a server to finish. DCNL :param service: Server to run and wait for. DCNL :returns: None'
'Load and start the given server. DCNL :param server: The server you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary.'
'Instantiates class and passes back application object. DCNL :param host: defaults to FLAGS.host DCNL :param binary: defaults to basename of executable DCNL :param topic: defaults to bin_name - \'monitor-\' part DCNL :param manager: defaults to FLAGS.<topic>_manager DCNL :param report_interval: defaults to FLAGS.report_interval DCNL :param periodic_interval: defaults to FLAGS.periodic_interval DCNL :param periodic_fuzzy_delay: defaults to FLAGS.periodic_fuzzy_delay'
'Destroy the service object in the datastore.'
'Tasks to be run at a periodic interval.'
'Update the state of this service in the datastore.'
'Initialize, but do not start the WSGI server. DCNL :param name: The name of the WSGI server given to the loader. DCNL :param loader: Loads the WSGI application using the given name. DCNL :returns: None'
'Initialize a Manager object appropriate for this service. DCNL Use the service name to look up a Manager subclass from the DCNL configuration and initialize an instance. If no class name DCNL is configured, just return None. DCNL :returns: a Manager instance, or None.'
'Start serving this service using loaded configuration. DCNL Also, retrieve updated port number in case \'0\' was passed in, which DCNL indicates a random port should be used. DCNL :returns: None'
'Stop serving this API. DCNL :returns: None'
'Wait for the service to stop serving this API. DCNL :returns: None'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool'
'When with ConnectionContext() is used, return self'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
':param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending" flag'
'The consume() callback will call this.  Store the result.'
'Return a result until we get a \'None\' response from consumer'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute.'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect'
'Fetch the message and pass it to the callback object'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection'
'Send a message'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection'
'Send a message'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params DCNL should be used for the connection (if any)'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Init a brain using json instead of a rules dictionary.'
'Checks authorization of some rules against credentials. DCNL Detailed description of the check with examples in policy.enforce(). DCNL :param match_list: nested tuples of data to match against DCNL :param target_dict: dict of object properties DCNL :param credentials_dict: dict of actor properties DCNL :returns: True if the check passes'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'How weighted this weigher should be.  Normally this would DCNL be overriden in a subclass based on a config value.'
'Override in a subclass to specify a weight for a specific DCNL object.'
'Weigh multiple objects.  Override in a subclass if you need DCNL need access to all objects in order to manipulate weights.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Return a sorted (highest score first) list of WeighedObjects.'
'Return True if the object passes the filter, otherwise False.'
'Return True if the HostState passes the filter, otherwise False. DCNL Override this in a subclass.'
'Check that the capabilities provided by the services DCNL satisfy the extra specs associated with the instance type'
'Return a list of hosts that can create instance_type.'
'Returns True if the specified operator can successfully DCNL compare the first item in the args with all the rest. Will DCNL return False if only one item is in the list.'
'First term is == all the other terms.'
'First term is < all the other terms.'
'First term is > all the other terms.'
'First term is in set of remaining terms'
'First term is <= all the other terms.'
'First term is >= all the other terms.'
'Flip each of the arguments.'
'True if any arg is True.'
'True if all args are True.'
'Strings prefixed with $ are capability lookups in the DCNL form \'$variable\' where \'variable\' is an attribute in the DCNL HostState class.  If $variable is a dictionary, you may DCNL use: $variable.dictkey'
'Recursively parse the query structure.'
'Return a list of hosts that can fulfill the requirements DCNL specified in the query.'
'Return True if it passes the filter, False otherwise. DCNL Override this in a subclass.'
'Yield objects that pass the filter. DCNL Can be overriden in a subclass, if you need to base filtering DCNL decisions on all objects.  Otherwise, one can just override DCNL _filter_one() to filter a single object.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Returns existing executable, or empty string if none found'
'Only check that the first argument (command) matches exec_path'
'Returns command to execute (with sudo -u if run_as != root).'
'Returns specific environment to set, None if none'
'Metaclass that allows us to collect decorated periodic tasks.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Tasks to be run at a periodic interval.'
'Handle initialization if this is a standalone service. DCNL Child classes should override this method.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Given a list of resources, retrieve the default quotas. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources.'
'Given a list of resources, retrieve the quotas for the given DCNL quota class. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Given a list of resources, retrieve the quotas for the given DCNL project. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified.  It DCNL will be ignored if project_id == DCNL context.project_id. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve. DCNL :param has_sync: If True, indicates that the resource must DCNL have a sync attribute; if False, indicates DCNL that the resource must NOT have a sync DCNL attribute. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param deltas: A dictionary of the proposed delta changes. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initializes a Resource. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Given a driver and context, obtain the quota for this DCNL resource. DCNL :param driver: A quota driver. DCNL :param context: The request context. DCNL :param project_id: The project to obtain the quota value for. DCNL If not provided, it is taken from the DCNL context.  If it is given as None, no DCNL project-specific quota will be searched DCNL for. DCNL :param quota_class: The quota class corresponding to the DCNL project, or for which the quota is to be DCNL looked up.  If not provided, it is taken DCNL from the context.  If it is given as None, DCNL no quota class-specific quota will be DCNL searched for.  Note that the quota class DCNL defaults to the value in the context, DCNL which may not correspond to the project if DCNL project_id is not the same as the one in DCNL the context.'
'Return the default value of the quota.'
'Initializes a ReservableResource. DCNL Reservable resources are those resources which directly DCNL correspond to objects in the database, i.e., servicemanages, gigabytes, DCNL etc.  A ReservableResource must be constructed with a usage DCNL synchronization function, which will be called to determine the DCNL current counts of one or more resources. DCNL The usage synchronization function will be passed three DCNL arguments: an admin context, the project ID, and an opaque DCNL session object, which should in turn be passed to the DCNL underlying database function.  Synchronization functions DCNL should return a dictionary mapping resource names to the DCNL current in_use count for those resources; more than one DCNL resource and resource count may be returned.  Note that DCNL synchronization functions may be associated with more than one DCNL ReservableResource. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param sync: A callable which returns a dictionary to DCNL resynchronize the in_use count for one or more DCNL resources, as described above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initializes a CountableResource. DCNL Countable resources are those resources which directly DCNL correspond to objects in the database, i.e., servicemanages, gigabytes, DCNL etc., but for which a count by project ID is inappropriate.  A DCNL CountableResource must be constructed with a counting DCNL function, which will be called to determine the current counts DCNL of the resource. DCNL The counting function will be passed the context, along with DCNL the extra positional and keyword arguments that are passed to DCNL Quota.count().  It should return an integer specifying the DCNL count. DCNL Note that this counting is not performed in a transaction-safe DCNL manner.  This resource class is a temporary measure to provide DCNL required functionality, until a better approach to solving DCNL this problem can be evolved. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param count: A callable which returns the count of the DCNL resource.  The arguments passed are as described DCNL above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initialize a Quota object.'
'Register a resource.'
'Register a list of resources.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Retrieve the default quotas. DCNL :param context: The request context, for access checks.'
'Retrieve the quotas for the given quota class. DCNL :param context: The request context, for access checks. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Retrieve the quotas for the given project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'Count a resource. DCNL For countable resources, invokes the count() function and DCNL returns its result.  Arguments following the context and DCNL resource are passed directly to the count function declared by DCNL the resource. DCNL :param context: The request context, for access checks. DCNL :param resource: The name of the resource, as a string.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction.  The DCNL values to check are given as keyword arguments, where the key DCNL identifies the specific quota limit to check, and the value is DCNL the proposed value. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas.  The deltas are given as DCNL keyword arguments, and current usage and other reservations DCNL are factored into the quota check. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initialize, but do not start, a WSGI server. DCNL :param name: Pretty name for logging. DCNL :param app: The WSGI application to serve. DCNL :param host: IP address to serve the application. DCNL :param port: Port number to server the application. DCNL :param pool_size: Maximum number of eventlets to spawn concurrently. DCNL :returns: None'
'Run the blocking eventlet WSGI server. DCNL :returns: None'
'Start serving a WSGI application. DCNL :param backlog: Maximum number of queued connections. DCNL :returns: None DCNL :raises: monitor.exception.InvalidInput'
'Stop this server. DCNL This is not a very nice action, as currently the method by which a DCNL server is stopped is by killing its eventlet. DCNL :returns: None'
'Block, until the server has stopped. DCNL Waits on the server\'s eventlet to finish, then returns. DCNL :returns: None'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = monitor.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import monitor.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = monitor.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import monitor.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Iterator that prints the contents of a wrapper string.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be an object that can route DCNL the request to the action-specific method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, \'/svrlist\', controller=sc, action=\'list\') DCNL # Actions are all implicitly defined DCNL mapper.resource(\'server\', \'servers\', controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, \'/v1.0/{path_info:.*}\', controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Dispatch the request to the appropriate controller. DCNL Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Initialize the loader, and attempt to find the config. DCNL :param config_path: Full or relative path to the paste config. DCNL :returns: None'
'Return the paste URLMap wrapped WSGI application. DCNL :param name: Name of the application to load. DCNL :returns: Paste URLMap object wrapping the requested application. DCNL :raises: `monitor.exception.PasteAppNotFound`'
':param read_deleted: \'no\' indicates deleted records are hidden, \'yes\' DCNL indicates deleted records are visible, \'only\' indicates that DCNL *only* deleted records are visible. DCNL :param overwrite: Set to False to ensure that the greenthread local DCNL copy of the index is not overwritten. DCNL :param kwargs: Extra arguments that might be present, but we ignore DCNL because they possibly came in from older rpc messages.'
'Return a version of this context with admin flag set.'
':param data: Underlying data object DCNL :param limit: maximum number of bytes the reader should allow'
'Register extension with the extension manager.'
'List of extensions.ResourceExtension extension objects. DCNL Resources define new nouns, and are accessible through URLs.'
'List of extensions.ControllerExtension extension objects. DCNL Controller extensions are used to extend existing controllers.'
'Synthesize a namespace map from extension.'
'Synthesize element and attribute names.'
'Returns a list of ResourceExtension objects.'
'Returns a list of ControllerExtension objects.'
'Checks for required methods in extension objects.'
'Execute an extension factory. DCNL Loads an extension.  The \'ext_factory\' is the name of a DCNL callable that will be imported and called with one DCNL argument--the extension manager.  The factory callable is DCNL expected to call the register() method at least once.'
'Load extensions specified on the command line.'
'Return href string with proper limit and marker params.'
'Return an href string pointing to this object.'
'Create a URL that refers to a specific resource.'
'Retrieve \'next\' link, if applicable.'
'Marshal the metadata attribute of a parsed request'
'Initialize view builder.'
'Show a list of backups without many details.'
'Detailed view of a list of backups .'
'Generic, non-detailed view of a backup.'
'Generic, non-detailed view of a restore.'
'Detailed view of a single backup.'
'Provide a view for a list of backups.'
'Trim away extraneous servicemanage type attributes.'
'Index over trimmed servicemanage types'
'Builder for absolute limits DCNL absolute_limits should be given as a dict of limits. DCNL For example: {"ram": 512, "gigabytes": 1024}.'
':param base_url: url of the root wsgi application'
'Generate a container of links that refer to the provided version.'
'Create an url that refers to a specific version_number.'
'Initialize the selector. DCNL Each argument is a subsequent index into the object.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Selects the relevant datum within the object. DCNL :param obj: The object from which to select the object. DCNL :param do_raise: If False (the default), return None if the DCNL indexed datum does not exist.  Otherwise, DCNL raise a KeyError.'
'Returns empty string if the selected value does not exist.'
'Initialize the selector. DCNL :param value: The value to return.'
'Return a representation of the selector.'
'Select a datum to operate on. DCNL Returns a constant value.  Compatible with DCNL Selector.__call__().'
'Initialize an element. DCNL Initializes an element in the template.  Keyword arguments DCNL specify attributes to be set on the element; values must be DCNL callables.  See TemplateElement.set() for more information. DCNL :param tag: The name of the tag to create. DCNL :param attrib: An optional dictionary of element attributes. DCNL :param selector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL :param subselector: An optional callable taking an object and DCNL optional boolean do_raise indicator and DCNL returning the object bound to the element. DCNL This is used to further refine the datum DCNL object returned by selector in the event DCNL that it is a list of objects.'
'Return a representation of the template element.'
'Return the number of child elements.'
'Determine whether a child node named by key exists.'
'Retrieve a child node by index or name.'
'Append a child to the element.'
'Append children to the element.'
'Insert a child element at the given index.'
'Remove a child element.'
'Get an attribute. DCNL Returns a callable which performs datum selection. DCNL :param key: The name of the attribute to get.'
'Set an attribute. DCNL :param key: The name of the attribute to set. DCNL :param value: A callable taking an object and optional boolean DCNL do_raise indicator and returning the datum bound DCNL to the attribute.  If None, a Selector() will be DCNL constructed from the key.  If a string, a DCNL Selector() will be constructed from the string.'
'Return the attribute names.'
'Return the attribute names and values.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Apply text and attributes to an etree.Element. DCNL Applies the text and attribute instructions in the template DCNL element to an etree.Element instance. DCNL :param elem: An etree.Element instance. DCNL :param obj: The base object associated with this template DCNL element.'
'Internal rendering. DCNL Renders the template node into an etree.Element object. DCNL Returns the etree.Element object. DCNL :param parent: The parent etree.Element instance. DCNL :param datum: The datum associated with this template element. DCNL :param patches: A list of other template elements that must DCNL also be applied. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance.'
'Render an object. DCNL Renders an object against this template node.  Returns a list DCNL of two-item tuples, where the first item is an etree.Element DCNL instance and the second item is the datum associated with that DCNL instance. DCNL :param parent: The parent for the etree.Element instances. DCNL :param obj: The object to render this template element DCNL against. DCNL :param patches: A list of other template elements to apply DCNL when rendering this template element. DCNL :param nsmap: An optional namespace dictionary to attach to DCNL the etree.Element instances.'
'Hook method. DCNL An overridable hook method to determine whether this template DCNL element will be rendered at all.  By default, returns False DCNL (inhibiting rendering) if the datum is None. DCNL :param datum: The datum associated with this template element.'
'Template element text. DCNL Either None or a callable taking an object and optional DCNL boolean do_raise indicator and returning the datum bound to DCNL the text of the template element.'
'Return string representation of the template tree. DCNL Returns a representation of the template rooted at this DCNL element as a string, suitable for inclusion in debug logs.'
'Initialize a template. DCNL :param root: The root element of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Internal serialization. DCNL Recursive routine to build a tree of etree.Element instances DCNL from an object based on the template.  Returns the first DCNL etree.Element instance rendered, or None. DCNL :param parent: The parent etree.Element instance.  Can be DCNL None. DCNL :param obj: The object to render. DCNL :param siblings: The TemplateElement instances against which DCNL to render the object. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the etree.Element instance DCNL rendered.'
'Serialize an object. DCNL Serializes an object against the template.  Returns a string DCNL with the serialized XML.  Positional and keyword arguments are DCNL passed to etree.tostring(). DCNL :param obj: The object to serialize.'
'Create a tree. DCNL Serializes an object against the template.  Returns an Element DCNL node with appropriate children. DCNL :param obj: The object to serialize.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  By default, this is the root element itself.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary.'
'Unwraps a template to return a template element.'
'Wraps a template element to return a template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template. DCNL :param master: The master template to test.'
'Return string representation of the template tree. DCNL Returns a representation of the template as a string, suitable DCNL for inclusion in debug logs.'
'Initialize a master template. DCNL :param root: The root element of the template. DCNL :param version: The version number of the template. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for computing root siblings. DCNL An overridable hook method to return the siblings of the root DCNL element.  This is the root element plus the root elements of DCNL all the slave templates.'
'Hook method for computing the namespace dictionary. DCNL An overridable hook method to return the namespace dictionary. DCNL The namespace dictionary is computed by taking the master DCNL template\'s namespace dictionary and updating it from all the DCNL slave templates.'
'Attach one or more slave templates. DCNL Attaches one or more slave templates to the master template. DCNL Slave templates must have a root element with the same tag as DCNL the master template.  The slave template\'s apply() method will DCNL be called to determine if the slave should be applied to this DCNL master; if it returns False, that slave will be skipped. DCNL (This allows filtering of slaves based on the version of the DCNL master template.)'
'Return a copy of this master template.'
'Initialize a slave template. DCNL :param root: The root element of the template. DCNL :param min_vers: The minimum permissible version of the master DCNL template for this slave template to apply. DCNL :param max_vers: An optional upper bound for the master DCNL template version. DCNL :param nsmap: An optional namespace dictionary to be DCNL associated with the root element of the DCNL template.'
'Return string representation of the template.'
'Hook method for determining slave applicability. DCNL An overridable hook method used to determine if this template DCNL is applicable as a slave to a given master template.  This DCNL version requires the master template to have a version number DCNL between min_vers and max_vers. DCNL :param master: The master template to test.'
'Construct and return a template. DCNL :param copy: If True (the default), a copy of the template DCNL will be constructed and returned, if possible.'
'Construct a template. DCNL Called to construct a template instance, which it must return. DCNL Only called once.'
'Simple paste factory, :class:`monitor.wsgi.Router` doesn\'t have'
'Determine the requested response content-type.'
'Determine content type of the request body. DCNL Does not do any body introspection, only checks header'
'Find and call local method.'
':param metadata: information needed to deserialize xml into DCNL a dictionary.'
'Convert a minidom node to a simple Python type. DCNL :param listnames: list of XML node names whose subnodes should DCNL be considered list items.'
'Search a nodes children for the first child with a given name'
'Return all of a nodes children who have the given name'
'Get the text field contained by the given node'
'Get an attribute value; fallback to an element if not found'
'Marshal the metadata attribute of a parsed request'
':param metadata: information needed to deserialize xml into DCNL a dictionary. DCNL :param xmlns: XML namespace to include with serialized xml'
'Recursive method to convert data members to XML nodes.'
'Convert the xml object to an xml string.'
'Binds serializers with an object. DCNL Takes keyword arguments akin to the @serializer() decorator DCNL for specifying serializers.  Serializers specified will be DCNL given preference over default serializers or method-specific DCNL serializers on return.'
'Retrieves a header with the given name.'
'Sets a header with the given name to the given value.'
'Deletes the header with the given name.'
'Binds method serializers with the response object. DCNL Binds the method serializers with the response object. DCNL Serializers specified to the constructor will take precedence DCNL over serializers specified to this method. DCNL :param meth_serializers: A dictionary with keys mapping to DCNL response types and values containing DCNL serializer objects.'
'Returns the serializer for the wrapped object. DCNL Returns the serializer for the wrapped object subject to the DCNL indicated content type.  If no serializer matching the content DCNL type is attached, an appropriate serializer drawn from the DCNL default serializers will be used.  If no appropriate DCNL serializer is available, raises InvalidContentType.'
'Prepares the serializer that will be used to serialize. DCNL Determines the serializer that will be used and prepares an DCNL instance of it for later call.  This allows the serializer to DCNL be accessed by extensions for, e.g., template extension.'
'Attach slave templates to serializers.'
'Serializes the wrapped object. DCNL Utility method for serializing the wrapped object.  Returns a DCNL webob.Response object.'
'Retrieve the response status.'
'Retrieve the headers.'
':param controller: object that implement methods created by routes lib DCNL :param action_peek: dictionary of routines for peeking into an action DCNL request body to determine the desired action'
'Registers controller actions with this resource.'
'Registers controller extensions with this resource.'
'Parse dictionary created by routes library.'
'WSGI method that controls (de)serialization and method dispatch.'
'Implement the processing stack.'
'Look up the action-specific method and its extensions.'
'Dispatch a call to the action-specific method.'
'Adds the wsgi_actions dictionary to the class.'
'Initialize controller with a view builder instance.'
'Create a Fault for the given webob.exc.exception.'
'Generate a WSGI response based on the exception passed to ctor.'
'Initialize new `OverLimitFault` with relevant information.'
'Return the wrapped exception with a serialized body conforming to our DCNL error format.'
'Returns the list of servicemanage types.'
'Return a single servicemanage type item.'
'Return all global and rate limit information.'
'Initialize a new `Limit`. DCNL @param verb: HTTP verb (POST, PUT, etc.) DCNL @param uri: Human-readable URI DCNL @param regex: Regular expression format for this limit DCNL @param value: Integer number of requests which can be made DCNL @param unit: Unit of measure for the value parameter'
'Represents a call to this limit from a relevant request. DCNL @param verb: string http verb (POST, GET, etc.) DCNL @param url: string URL'
'Retrieve the current time. Broken out for testability.'
'Display the string name of the unit.'
'Return a useful representation of this class.'
'Initialize new `RateLimitingMiddleware`, which wraps the given WSGI DCNL application and sets up the given limits. DCNL @param application: WSGI application to wrap DCNL @param limits: String describing limits DCNL @param limiter: String identifying class for representing limits DCNL Other parameters are passed to the constructor for the limiter.'
'Represents a single call through this middleware. We should record the DCNL request if we have a limit relevant to it. If no limit is relevant to DCNL the request, ignore it. DCNL If the request should be rate limited, return a fault telling the user DCNL they are over the limit and need to retry later.'
'Initialize the new `Limiter`. DCNL @param limits: List of `Limit` objects'
'Return the limits for a given user.'
'Check the given verb/user/user triplet for limit. DCNL @return: Tuple of delay (in seconds) and error message (or None, None)'
'Convert a string into a list of Limit instances.  This DCNL implementation expects a semicolon-separated sequence of DCNL parenthesized groups, where each group contains a DCNL comma-separated sequence consisting of HTTP method, DCNL user-readable URI, a URI reg-exp, an integer number of DCNL requests which can be made, and a unit of measure.  Valid DCNL values for the latter are "SECOND", "MINUTE", "HOUR", and DCNL "DAY". DCNL @return: List of Limit instances.'
'Initialize the new `WsgiLimiter`. DCNL @param limits: List of `Limit` objects'
'Handles a call to this application. Returns 204 if the request is DCNL acceptable to the limiter, else a 403 is returned with a relevant DCNL header indicating when the request *will* succeed.'
'Initialize the new `WsgiLimiterProxy`. DCNL @param limiter_address: IP/port combination of where to request limit'
'Ignore a limits string--simply doesn\'t apply for the limit DCNL proxy. DCNL @return: Empty list.'
'Marshal the conductor attribute of a parsed request.'
'Deserialize an xml-formatted conductor create request.'
'Return data about the given conductor.'
'Delete a conductor.'
'Returns a detailed list of conductors.'
'Returns a summary list of conductors.'
'Returns a detailed list of conductors.'
'Returns a list of conductors, transformed through entity_maker.'
'Return conductor search options allowed by non-admin.'
'Find parameters in Accept header for given content type.'
'Find longest match for a given URL path.'
'Check path suffix for MIME type and path prefix for API version.'
'Check Content-Type header for API version.'
'Check Accept header for best matching MIME type and API version.'
'Sets the specified host\'s ability to accept new servicemanages.'
'Shows the servicemanage usage info given by hosts. DCNL :param context: security context DCNL :param host: hostname DCNL :returns: expected to use HostShowTemplate. DCNL ex.:: DCNL {\'host\': {\'resource\':D},..} DCNL D: {\'host\': \'hostname\',\'project\': \'admin\', DCNL \'servicemanage_count\': 1, \'total_servicemanage_gb\': 2048}'
'Returns the list of extra specs for a given servicemanage type'
'Return a single extra spec item.'
'Deletes an existing extra spec'
'Convert the quota object to a result dict'
'Return a list of all running services. Filter by host & service name.'
'Enable/Disable scheduling for a service'
'Convert the quota object to a result dict'
'Return data about the given backup.'
'Delete a backup.'
'Returns a summary list of backups.'
'Returns a detailed list of backups.'
'Returns a list of backups, transformed through view builder.'
'Create a new backup.'
'Restore an existing backup to a servicemanage.'
'Creates a new servicemanage type.'
'Deletes an existing servicemanage type.'
'Add attachment metadata.'
'Clear attachment metadata.'
'Mark servicemanage as reserved.'
'Unmark servicemanage as reserved.'
'Update servicemanage status to \'detaching\'.'
'Roll back servicemanage status to \'in-use\'.'
'Initialize servicemanage attachment.'
'Terminate servicemanage attachment.'
'Uploads the specified servicemanage to image service.'
'Reset status on the resource.'
'Delete a resource, bypassing the check that it must be available.'
'Roll back a bad detach after the servicemanage been disconnected from DCNL the hypervisor.'
'Return all versions.'
'Return multiple choices.'
'Parse dictionary created by routes library.'
'Save this object.'
'Delete this object.'
'Make the model object behave like a dict.'
'Make the model object behave like a dict. DCNL Includes attributes from joins.'
'Return an item from the pool, when one is available.  This may DCNL cause the calling greenthread to block. Check if a connection is active DCNL before returning it. For dead connections create and return a new DCNL connection.'
':param retvalue: Value that LoopingCall.wait() should return.'
'Rollback a series of actions then re-raise the exception. DCNL .. note:: (sirp) This should only be called within an DCNL exception handler.'
'Initialize the service launcher. DCNL :returns: None'
'Start and wait for a server to finish. DCNL :param service: Server to run and wait for. DCNL :returns: None'
'Load and start the given server. DCNL :param server: The server you would like to start. DCNL :returns: None'
'Stop all services which are currently running. DCNL :returns: None'
'Waits until all services have been stopped, and then returns. DCNL :returns: None'
'Loop waiting on children to die and respawning as necessary.'
'Instantiates class and passes back application object. DCNL :param host: defaults to FLAGS.host DCNL :param binary: defaults to basename of executable DCNL :param topic: defaults to bin_name - \'monitor-\' part DCNL :param manager: defaults to FLAGS.<topic>_manager DCNL :param report_interval: defaults to FLAGS.report_interval DCNL :param periodic_interval: defaults to FLAGS.periodic_interval DCNL :param periodic_fuzzy_delay: defaults to FLAGS.periodic_fuzzy_delay'
'Destroy the service object in the datastore.'
'Tasks to be run at a periodic interval.'
'Update the state of this service in the datastore.'
'Initialize, but do not start the WSGI server. DCNL :param name: The name of the WSGI server given to the loader. DCNL :param loader: Loads the WSGI application using the given name. DCNL :returns: None'
'Initialize a Manager object appropriate for this service. DCNL Use the service name to look up a Manager subclass from the DCNL configuration and initialize an instance. If no class name DCNL is configured, just return None. DCNL :returns: a Manager instance, or None.'
'Start serving this service using loaded configuration. DCNL Also, retrieve updated port number in case \'0\' was passed in, which DCNL indicates a random port should be used. DCNL :returns: None'
'Stop serving this API. DCNL :returns: None'
'Wait for the service to stop serving this API. DCNL :returns: None'
'Uses contextstring if request_id is set, otherwise default.'
'Format exception output with CONF.logging_exception_prefix.'
'Initialize an RpcProxy. DCNL :param topic: The topic to use for all messages. DCNL :param default_version: The default API version to request in all DCNL outgoing messages.  This can be overridden on a per-message DCNL basis.'
'Helper method to set the version in a message. DCNL :param msg: The message having a version added to it. DCNL :param vers: The version number to add to the message.'
'Return the topic to use for a message.'
'rpc.call() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: The return value from the remote method.'
'rpc.multicall() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param timeout: (Optional) A timeout to use when waiting for the DCNL response.  If no timeout is specified, a default timeout will be DCNL used that is usually sufficient. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: An iterator that lets you process each of the returned values DCNL from the remote method as they arrive.'
'rpc.cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast() does not wait on any return value from the DCNL remote method.'
'rpc.fanout_cast() a remote method. DCNL :param context: The request context DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast() does not wait on any return value DCNL from the remote method.'
'rpc.cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.cast_to_server() does not wait on any DCNL return values.'
'rpc.fanout_cast_to_server() a remote method. DCNL :param context: The request context DCNL :param server_params: Server parameters.  See rpc.cast_to_server() for DCNL details. DCNL :param msg: The message to send, including the method and args. DCNL :param topic: Override the topic for this message. DCNL :param version: (Optional) Override the requested API version in this DCNL message. DCNL :returns: None.  rpc.fanout_cast_to_server() does not wait on any DCNL return values.'
'Create a new connection, or get one from the pool'
'When with ConnectionContext() is used, return self'
'If the connection came from a pool, clean it up and put it back. DCNL If it did not come from a pool, close it.'
'End of \'with\' statement.  We\'re done here.'
'Caller is done with this connection.  Make sure we cleaned up.'
'Caller is done with this connection.'
'Proxy all other calls to the Connection instance'
'AMQP consumers may read same message twice when exceptions occur DCNL before ack is returned. This method prevents doing it.'
'Wait for all callback threads to exit.'
':param conf: cfg.CONF instance DCNL :param callback: a callable (probably a function) DCNL :param connection_pool: connection pool as returned by DCNL get_connection_pool()'
'Consumer callback to call a method on a proxy object. DCNL Parses the message for validity and fires off a thread to call the DCNL proxy object method. DCNL Message data should be a dictionary with two keys: DCNL method: string representing the method to call DCNL args: dictionary of arg: value DCNL Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}'
'Process a message in a new thread. DCNL If the proxy object we have has a dispatch method DCNL (see rpc.dispatcher.RpcDispatcher), pass it the version, DCNL method, and args and let it dispatch as appropriate.  If not, use DCNL the old behavior of magically calling the specified method on the DCNL proxy we have here.'
'Return a result until we get a reply with an \'ending" flag'
'The consume() callback will call this.  Store the result.'
'Return a result until we get a \'None\' response from consumer'
'Initialize the rpc dispatcher. DCNL :param callbacks: List of proxy objects that are an instance DCNL of a class with rpc methods exposed.  Each proxy DCNL object should have an RPC_API_VERSION attribute.'
'Dispatch a message based on a requested version. DCNL :param ctxt: The request context DCNL :param version: The requested API version from the incoming message DCNL :param method: The method requested to be called by the incoming DCNL message. DCNL :param kwargs: A dict of keyword arguments to be passed to the method. DCNL :returns: Whatever is returned by the underlying method that gets DCNL called.'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Acknowledge that a key.host is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Checks if a host is alive.'
'Explicitly expire a host\'s registration.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Unregister a topic.'
'Spawn heartbeat greenthread.'
'Destroys the heartbeat greenthread.'
'Send all heartbeats. DCNL Use start_heartbeat to spawn a heartbeat greenthread, DCNL which loops this method.'
'Acknowledge that a host.topic is alive. DCNL Used internally for updating heartbeats, DCNL but may also be used publically to acknowledge DCNL a system is alive (i.e. rpc message successfully DCNL sent to host)'
'Implements registration logic. DCNL Called by register(self,key,host)'
'Implements de-registration logic. DCNL Called by unregister(self,key,host)'
'Register a host on a backend. DCNL Heartbeats, if applicable, may keepalive registration.'
'Unregister a topic.'
'Implementation of MatchMakerBase.start_heartbeat DCNL Launches greenthread looping send_heartbeats(), DCNL yielding for CONF.matchmaker_heartbeat_freq seconds DCNL between iterations.'
'Destroys the heartbeat greenthread.'
'Declare a queue on an amqp session. DCNL \'session\' is the amqp session to use DCNL \'callback\' is the callback to call when messages are received DCNL \'node_name\' is the first part of the Qpid address string, before \';\' DCNL \'node_opts\' will be applied to the "x-declare" section of "node" DCNL in the address string. DCNL \'link_name\' goes into the "name" field of the "link" in the address DCNL string DCNL \'link_opts\' will be applied to the "x-declare" section of "link" DCNL in the address string.'
'Re-declare the receiver after a qpid reconnect'
'Fetch the message and pass it to the callback object'
'Init a \'direct\' queue. DCNL \'session\' is the amqp session to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init a \'topic\' queue. DCNL :param session: the amqp session to use DCNL :param topic: is the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param name: optional queue name, defaults to topic'
'Init a \'fanout\' queue. DCNL \'session\' is the amqp session to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Sender after a reconnection'
'Send a message'
'Init a \'direct\' publisher.'
'init a \'topic\' publisher.'
'init a \'fanout\' publisher.'
'init a \'topic\' publisher.'
'Handles reconnecting and re-establishing sessions and queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Get socket type as string.'
'Subscribe.'
'Unsubscribe.'
'Process a curried message and cast the result to topic.'
'Reply to a casted call.'
'Runs the ZmqProxy service'
'Close the connection. DCNL This method must be called when the connection will no longer be used. DCNL It will ensure that any resources associated with the connection, such DCNL as a network connection, and cleaned up.'
'Create a consumer on this connection. DCNL A consumer is associated with a message queue on the backend message DCNL bus.  The consumer will read messages from the queue, unpack them, and DCNL dispatch them to the proxy object.  The contents of the message pulled DCNL off of the queue will determine which method gets called on the proxy DCNL object. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. For example, all instances of nova-compute consume DCNL from a queue called "compute".  In that case, the DCNL messages will get distributed amongst the consumers in a DCNL round-robin fashion if fanout=False.  If fanout=True, DCNL every consumer associated with this topic will get a DCNL copy of every message. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param fanout: Whether or not this is a fanout topic.  See the DCNL documentation for the topic parameter for some DCNL additional comments on this.'
'Create a worker on this connection. DCNL A worker is like a regular consumer of messages directed to a DCNL topic, except that it is part of a set of such consumers (the DCNL "pool") which may run in parallel. Every pool of workers will DCNL receive a given message, but only one worker in the pool will DCNL be asked to process it. Load is distributed across the members DCNL of the pool in round-robin fashion. DCNL :param topic: This is a name associated with what to consume from. DCNL Multiple instances of a service may consume from the same DCNL topic. DCNL :param proxy: The object that will handle all incoming messages. DCNL :param pool_name: String containing the name of the pool of workers'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created. DCNL :param callback: Callable to be invoked for each message. DCNL :type callback: callable accepting one argument DCNL :param pool_name: The name of the consumer pool. DCNL :type pool_name: str DCNL :param topic: The routing topic for desired messages. DCNL :type topic: str DCNL :param exchange_name: The name of the message exchange where DCNL the client should attach. Defaults to DCNL the configured exchange. DCNL :type exchange_name: str'
'Spawn a thread to handle incoming messages. DCNL Spawn a thread that will be responsible for handling all incoming DCNL messages for consumers that were set up on this connection. DCNL Message dispatching inside of this is expected to be implemented in a DCNL non-blocking manner.  An example implementation would be having this DCNL thread pull messages in for all of the consumers, but utilize a thread DCNL pool for dispatching the messages to the proxy objects.'
'Return a version of this context with admin flag set.'
'Declare a queue on an amqp channel. DCNL \'channel\' is the amqp channel to use DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL queue name, exchange name, and other kombu options are DCNL passed in here as a dictionary.'
'Re-declare the queue after a rabbit reconnect'
'Actually declare the consumer on the amqp channel.  This will DCNL start the flow of messages from the queue.  Using the DCNL Connection.iterconsume() iterator will process the messages, DCNL calling the appropriate callback. DCNL If a callback is specified in kwargs, use that.  Otherwise, DCNL use the callback passed during __init__() DCNL If kwargs[\'nowait\'] is True, then this call will block until DCNL a message is read. DCNL Messages will automatically be acked if the callback doesn\'t DCNL raise an exception'
'Cancel the consuming from the queue, if it has started'
'Init a \'direct\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'msg_id\' is the msg_id to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init a \'topic\' queue. DCNL :param channel: the amqp channel to use DCNL :param topic: the topic to listen on DCNL :paramtype topic: str DCNL :param callback: the callback to call when messages are received DCNL :param tag: a unique ID for the consumer on the channel DCNL :param name: optional queue name, defaults to topic DCNL :paramtype name: str DCNL Other kombu options may be passed as keyword arguments'
'Init a \'fanout\' queue. DCNL \'channel\' is the amqp channel to use DCNL \'topic\' is the topic to listen on DCNL \'callback\' is the callback to call when messages are received DCNL \'tag\' is a unique ID for the consumer on the channel DCNL Other kombu options may be passed'
'Init the Publisher class with the exchange_name, routing_key, DCNL and other options'
'Re-establish the Producer after a rabbit reconnection'
'Send a message'
'init a \'direct\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'topic\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'init a \'fanout\' publisher. DCNL Kombu options may be passed as keyword args to override defaults'
'Handles fetching what ssl params DCNL should be used for the connection (if any)'
'Connect to rabbit.  Re-establish any queues that may have DCNL been declared before if we are reconnecting.  Exceptions should DCNL be handled by the caller.'
'Handles reconnecting and re-establishing queues. DCNL Will retry up to self.max_retries number of times. DCNL self.max_retries = 0 means to retry forever. DCNL Sleep between tries, starting at self.interval_start DCNL seconds, backing off self.interval_stepping number of seconds DCNL each attempt.'
'Convenience call for bin/clear_rabbit_queues'
'Close/release this connection'
'Reset a connection so it can be used again'
'Create a Consumer using the class that was passed in and DCNL add it to our list of consumers'
'Return an iterator that will consume from all queues/consumers'
'Cancel a consumer thread'
'Wait for all proxy callback threads to exit.'
'Send to a publisher based on the publisher class'
'Create a \'direct\' queue. DCNL In nova\'s use, this is generally a msg_id queue used for DCNL responses for call/multicall'
'Create a \'topic\' consumer.'
'Create a \'fanout\' consumer'
'Send a \'direct\' message'
'Send a \'topic\' message'
'Send a \'fanout\' message'
'Send a notify message on a topic'
'Consume from all queues/consumers'
'Consumer from all queues/consumers in a greenthread'
'Create a consumer that calls a method in a proxy object'
'Create a worker that calls a method in a proxy object'
'Register as a member of a group of consumers for a given topic from DCNL the specified exchange. DCNL Exactly one member of a given pool will receive each message. DCNL A message will be delivered to multiple pools, if more than DCNL one is created.'
'Init a brain using json instead of a rules dictionary.'
'Checks authorization of some rules against credentials. DCNL Detailed description of the check with examples in policy.enforce(). DCNL :param match_list: nested tuples of data to match against DCNL :param target_dict: dict of object properties DCNL :param credentials_dict: dict of actor properties DCNL :returns: True if the check passes'
'Object that understands versioning for a package DCNL :param package: name of the python package, such as glance, or DCNL python-glanceclient'
'Make the VersionInfo object behave like a string.'
'Include the name.'
'Get the version of the package from the pkg_resources record DCNL associated with the package.'
'Return the full version of the package including suffixes indicating DCNL VCS status.'
'Return the short version minus any alpha/beta tags.'
'Generate an object which will expand in a string context to DCNL the results of version_string(). We do this so that don\'t DCNL call into pkg_resources every time we start up a program when DCNL passing version information into the CONF constructor, but DCNL rather only do the calculation when and if a version is requested'
'How weighted this weigher should be.  Normally this would DCNL be overriden in a subclass based on a config value.'
'Override in a subclass to specify a weight for a specific DCNL object.'
'Weigh multiple objects.  Override in a subclass if you need DCNL need access to all objects in order to manipulate weights.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Return a sorted (highest score first) list of WeighedObjects.'
'Return True if the object passes the filter, otherwise False.'
'Return True if the HostState passes the filter, otherwise False. DCNL Override this in a subclass.'
'Check that the capabilities provided by the services DCNL satisfy the extra specs associated with the instance type'
'Return a list of hosts that can create instance_type.'
'Returns True if the specified operator can successfully DCNL compare the first item in the args with all the rest. Will DCNL return False if only one item is in the list.'
'First term is == all the other terms.'
'First term is < all the other terms.'
'First term is > all the other terms.'
'First term is in set of remaining terms'
'First term is <= all the other terms.'
'First term is >= all the other terms.'
'Flip each of the arguments.'
'True if any arg is True.'
'True if all args are True.'
'Strings prefixed with $ are capability lookups in the DCNL form \'$variable\' where \'variable\' is an attribute in the DCNL HostState class.  If $variable is a dictionary, you may DCNL use: $variable.dictkey'
'Recursively parse the query structure.'
'Return a list of hosts that can fulfill the requirements DCNL specified in the query.'
'Return True if it passes the filter, False otherwise. DCNL Override this in a subclass.'
'Yield objects that pass the filter. DCNL Can be overriden in a subclass, if you need to base filtering DCNL decisions on all objects.  Otherwise, one can just override DCNL _filter_one() to filter a single object.'
'Return whether an object is a class of the correct type and DCNL is not prefixed with an underscore.'
'Returns existing executable, or empty string if none found'
'Only check that the first argument (command) matches exec_path'
'Returns command to execute (with sudo -u if run_as != root).'
'Returns specific environment to set, None if none'
'Metaclass that allows us to collect decorated periodic tasks.'
'Get the rpc dispatcher for this manager. DCNL If a manager would like to set an rpc API version, or support more than DCNL one class as the target of rpc messages, override this method.'
'Tasks to be run at a periodic interval.'
'Handle initialization if this is a standalone service. DCNL Child classes should override this method.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Given a list of resources, retrieve the default quotas. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources.'
'Given a list of resources, retrieve the quotas for the given DCNL quota class. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Given a list of resources, retrieve the quotas for the given DCNL project. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified.  It DCNL will be ignored if project_id == DCNL context.project_id. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'A helper method which retrieves the quotas for the specific DCNL resources identified by keys, and which apply to the current DCNL context. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param keys: A list of the desired quotas to retrieve. DCNL :param has_sync: If True, indicates that the resource must DCNL have a sync attribute; if False, indicates DCNL that the resource must NOT have a sync DCNL attribute. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param values: A dictionary of the values to check against the DCNL quota. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param resources: A dictionary of the registered resources. DCNL :param deltas: A dictionary of the proposed delta changes. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initializes a Resource. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Given a driver and context, obtain the quota for this DCNL resource. DCNL :param driver: A quota driver. DCNL :param context: The request context. DCNL :param project_id: The project to obtain the quota value for. DCNL If not provided, it is taken from the DCNL context.  If it is given as None, no DCNL project-specific quota will be searched DCNL for. DCNL :param quota_class: The quota class corresponding to the DCNL project, or for which the quota is to be DCNL looked up.  If not provided, it is taken DCNL from the context.  If it is given as None, DCNL no quota class-specific quota will be DCNL searched for.  Note that the quota class DCNL defaults to the value in the context, DCNL which may not correspond to the project if DCNL project_id is not the same as the one in DCNL the context.'
'Return the default value of the quota.'
'Initializes a ReservableResource. DCNL Reservable resources are those resources which directly DCNL correspond to objects in the database, i.e., servicemanages, gigabytes, DCNL etc.  A ReservableResource must be constructed with a usage DCNL synchronization function, which will be called to determine the DCNL current counts of one or more resources. DCNL The usage synchronization function will be passed three DCNL arguments: an admin context, the project ID, and an opaque DCNL session object, which should in turn be passed to the DCNL underlying database function.  Synchronization functions DCNL should return a dictionary mapping resource names to the DCNL current in_use count for those resources; more than one DCNL resource and resource count may be returned.  Note that DCNL synchronization functions may be associated with more than one DCNL ReservableResource. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param sync: A callable which returns a dictionary to DCNL resynchronize the in_use count for one or more DCNL resources, as described above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initializes a CountableResource. DCNL Countable resources are those resources which directly DCNL correspond to objects in the database, i.e., servicemanages, gigabytes, DCNL etc., but for which a count by project ID is inappropriate.  A DCNL CountableResource must be constructed with a counting DCNL function, which will be called to determine the current counts DCNL of the resource. DCNL The counting function will be passed the context, along with DCNL the extra positional and keyword arguments that are passed to DCNL Quota.count().  It should return an integer specifying the DCNL count. DCNL Note that this counting is not performed in a transaction-safe DCNL manner.  This resource class is a temporary measure to provide DCNL required functionality, until a better approach to solving DCNL this problem can be evolved. DCNL :param name: The name of the resource, i.e., "servicemanages". DCNL :param count: A callable which returns the count of the DCNL resource.  The arguments passed are as described DCNL above. DCNL :param flag: The name of the flag or configuration option DCNL which specifies the default value of the quota DCNL for this resource.'
'Initialize a Quota object.'
'Register a resource.'
'Register a list of resources.'
'Get a specific quota by project.'
'Get a specific quota by quota class.'
'Retrieve the default quotas. DCNL :param context: The request context, for access checks.'
'Retrieve the quotas for the given quota class. DCNL :param context: The request context, for access checks. DCNL :param quota_class: The name of the quota class to return DCNL quotas for. DCNL :param defaults: If True, the default value will be reported DCNL if there is no specific value for the DCNL resource.'
'Retrieve the quotas for the given project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project to return quotas for. DCNL :param quota_class: If project_id != context.project_id, the DCNL quota class cannot be determined.  This DCNL parameter allows it to be specified. DCNL :param defaults: If True, the quota class value (or the DCNL default value, if there is no value from the DCNL quota class) will be reported if there is no DCNL specific value for the resource. DCNL :param usages: If True, the current in_use and reserved counts DCNL will also be returned.'
'Count a resource. DCNL For countable resources, invokes the count() function and DCNL returns its result.  Arguments following the context and DCNL resource are passed directly to the count function declared by DCNL the resource. DCNL :param context: The request context, for access checks. DCNL :param resource: The name of the resource, as a string.'
'Check simple quota limits. DCNL For limits--those quotas for which there is no usage DCNL synchronization function--this method checks that a set of DCNL proposed values are permitted by the limit restriction.  The DCNL values to check are given as keyword arguments, where the key DCNL identifies the specific quota limit to check, and the value is DCNL the proposed value. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it is not a simple limit DCNL resource. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns DCNL nothing. DCNL :param context: The request context, for access checks. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Check quotas and reserve resources. DCNL For counting quotas--those quotas for which there is a usage DCNL synchronization function--this method checks quotas against DCNL current usage and the desired deltas.  The deltas are given as DCNL keyword arguments, and current usage and other reservations DCNL are factored into the quota check. DCNL This method will raise a QuotaResourceUnknown exception if a DCNL given resource is unknown or if it does not have a usage DCNL synchronization function. DCNL If any of the proposed values is over the defined quota, an DCNL OverQuota exception will be raised with the sorted list of the DCNL resources which are too high.  Otherwise, the method returns a DCNL list of reservation UUIDs which were created. DCNL :param context: The request context, for access checks. DCNL :param expire: An optional parameter specifying an expiration DCNL time for the reservations.  If it is a simple DCNL number, it is interpreted as a number of DCNL seconds and added to the current time; if it is DCNL a datetime.timedelta object, it will also be DCNL added to the current time.  A datetime.datetime DCNL object will be interpreted as the absolute DCNL expiration time.  If None is specified, the DCNL default expiration time set by DCNL --default-reservation-expire will be used (this DCNL value will be treated as a number of seconds). DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Commit reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Roll back reservations. DCNL :param context: The request context, for access checks. DCNL :param reservations: A list of the reservation UUIDs, as DCNL returned by the reserve() method. DCNL :param project_id: Specify the project_id if current context DCNL is admin and admin wants to impact on DCNL common user\'s tenant.'
'Destroy all quotas, usages, and reservations associated with a DCNL project. DCNL :param context: The request context, for access checks. DCNL :param project_id: The ID of the project being deleted.'
'Expire reservations. DCNL Explores all currently existing reservations and rolls back DCNL any that have expired. DCNL :param context: The request context, for access checks.'
'Initialize, but do not start, a WSGI server. DCNL :param name: Pretty name for logging. DCNL :param app: The WSGI application to serve. DCNL :param host: IP address to serve the application. DCNL :param port: Port number to server the application. DCNL :param pool_size: Maximum number of eventlets to spawn concurrently. DCNL :returns: None'
'Run the blocking eventlet WSGI server. DCNL :returns: None'
'Start serving a WSGI application. DCNL :param backlog: Maximum number of queued connections. DCNL :returns: None DCNL :raises: monitor.exception.InvalidInput'
'Stop this server. DCNL This is not a very nice action, as currently the method by which a DCNL server is stopped is by killing its eventlet. DCNL :returns: None'
'Block, until the server has stopped. DCNL Waits on the server\'s eventlet to finish, then returns. DCNL :returns: None'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [app:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [app:wadl] DCNL latest_version = 1.3 DCNL paste.app_factory = monitor.api.fancy_api:Wadl.factory DCNL which would result in a call to the `Wadl` class as DCNL import monitor.api.fancy_api DCNL fancy_api.Wadl(latest_version=\'1.3\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Subclasses will probably want to implement __call__ like this: DCNL @webob.dec.wsgify(RequestClass=Request) DCNL def __call__(self, req): DCNL # Any of the following objects work as responses: DCNL # Option 1: simple string DCNL res = \'message\n\' DCNL # Option 2: a nicely formatted HTTP exception page DCNL res = exc.HTTPForbidden(detail=\'Nice try\') DCNL # Option 3: a webob Response object (in case you need to play with DCNL # headers, or you want to be treated like an iterable, or or or) DCNL res = Response(); DCNL res.app_iter = open(\'somefile\') DCNL # Option 4: any wsgi app to be run next DCNL res = self.application DCNL # Option 5: you can get a Response object for a wsgi app, too, to DCNL # play with headers etc DCNL res = req.get_response(self.application) DCNL # You can then just return your response... DCNL return res DCNL # ... or set req.response and return None. DCNL req.response = res DCNL See the end of http://pythonpaste.org/webob/modules/dec.html DCNL for more info.'
'Used for paste app factories in paste.deploy config files. DCNL Any local configuration (that is, values under the [filter:APPNAME] DCNL section of the paste config) will be passed into the `__init__` method DCNL as kwargs. DCNL A hypothetical configuration would look like: DCNL [filter:analytics] DCNL redis_host = 127.0.0.1 DCNL paste.filter_factory = monitor.api.analytics:Analytics.factory DCNL which would result in a call to the `Analytics` class as DCNL import monitor.api.analytics DCNL analytics.Analytics(app_from_paste, redis_host=\'127.0.0.1\') DCNL You could of course re-implement the `factory` method in subclasses, DCNL but using the kwarg passing it shouldn\'t be necessary.'
'Called on each request. DCNL If this returns None, the next application down the stack will be DCNL executed. If it returns a response then that response will be returned DCNL and execution will stop here.'
'Do whatever you\'d like to the response.'
'Iterator that prints the contents of a wrapper string.'
'Create a router for the given routes.Mapper. DCNL Each route in `mapper` must specify a \'controller\', which is a DCNL WSGI app to call.  You\'ll probably want to specify an \'action\' as DCNL well and have your controller be an object that can route DCNL the request to the action-specific method. DCNL Examples: DCNL mapper = routes.Mapper() DCNL sc = ServerController() DCNL # Explicit mapping of one route to a controller+action DCNL mapper.connect(None, \'/svrlist\', controller=sc, action=\'list\') DCNL # Actions are all implicitly defined DCNL mapper.resource(\'server\', \'servers\', controller=sc) DCNL # Pointing to an arbitrary WSGI app.  You can specify the DCNL # {path_info:.*} parameter so the target app can be handed just that DCNL # section of the URL. DCNL mapper.connect(None, \'/v1.0/{path_info:.*}\', controller=BlogApp())'
'Route the incoming request to a controller based on self.map. DCNL If no match, return a 404.'
'Dispatch the request to the appropriate controller. DCNL Called by self._router after matching the incoming request to a route DCNL and putting the information into req.environ.  Either returns 404 DCNL or the routed WSGI app\'s response.'
'Initialize the loader, and attempt to find the config. DCNL :param config_path: Full or relative path to the paste config. DCNL :returns: None'
'Return the paste URLMap wrapped WSGI application. DCNL :param name: Name of the application to load. DCNL :returns: Paste URLMap object wrapping the requested application. DCNL :raises: `monitor.exception.PasteAppNotFound`'
':param read_deleted: \'no\' indicates deleted records are hidden, \'yes\' DCNL indicates deleted records are visible, \'only\' indicates that DCNL *only* deleted records are visible. DCNL :param overwrite: Set to False to ensure that the greenthread local DCNL copy of the index is not overwritten. DCNL :param kwargs: Extra arguments that might be present, but we ignore DCNL because they possibly came in from older rpc messages.'
'Return a version of this context with admin flag set.'
