def test_default_param(self): DCNL 'Assert that the TPOT driver stores correct default values for all parameters.'
def test_print_args(self): DCNL 'Assert that _print_args prints correct values for all parameters.'
@property DCNL def __name__(self): DCNL 'Instance name is the same as the class name.'
def fit(self, X, y=None): DCNL 'Dummy function to fit in with the sklearn API.'
def transform(self, X, y=None): DCNL 'Transform data by adding two virtual features. DCNL Parameters DCNL X: numpy ndarray, {n_samples, n_components} DCNL New data, where n_samples is the number of samples and n_components DCNL is the number of components. DCNL y: None DCNL Unused DCNL Returns DCNL X_transformed: array-like, shape (n_samples, n_features) DCNL The transformed feature set'
def __init__(self, estimator): DCNL 'Create a StackingEstimator object. DCNL Parameters DCNL estimator: object with fit, predict, and predict_proba methods. DCNL The estimator to generate synthetic features from.'
def fit(self, X, y=None, **fit_params): DCNL 'Fit the StackingEstimator meta-transformer. DCNL Parameters DCNL X: array-like of shape (n_samples, n_features) DCNL The training input samples. DCNL y: array-like, shape (n_samples,) DCNL The target values (integers that correspond to classes in classification, real numbers in regression). DCNL fit_params: DCNL Other estimator-specific parameters. DCNL Returns DCNL self: object DCNL Returns a copy of the estimator'
def transform(self, X): DCNL 'Transform data by adding two synthetic feature(s). DCNL Parameters DCNL X: numpy ndarray, {n_samples, n_components} DCNL New data, where n_samples is the number of samples and n_components is the number of components. DCNL Returns DCNL X_transformed: array-like, shape (n_samples, n_features + 1) or (n_samples, n_features + 1 + n_classes) for classifier with predict_proba attribute DCNL The transformed feature set.'
def __init__(self, generations=100, population_size=100, offspring_size=None, mutation_rate=0.9, crossover_rate=0.1, scoring=None, cv=5, subsample=1.0, n_jobs=1, max_time_mins=None, max_eval_time_mins=5, random_state=None, config_dict=None, warm_start=False, verbosity=0, disable_update_check=False): DCNL 'Set up the genetic programming algorithm for pipeline optimization. DCNL Parameters DCNL generations: int, optional (default: 100) DCNL Number of iterations to the run pipeline optimization process. DCNL Generally, TPOT will work better when you give it more generations (and DCNL therefore time) to optimize the pipeline. TPOT will evaluate DCNL POPULATION_SIZE + GENERATIONS x OFFSPRING_SIZE pipelines in total. DCNL population_size: int, optional (default: 100) DCNL Number of individuals to retain in the GP population every generation. DCNL Generally, TPOT will work better when you give it more individuals DCNL (and therefore time) to optimize the pipeline. TPOT will evaluate DCNL POPULATION_SIZE + GENERATIONS x OFFSPRING_SIZE pipelines in total. DCNL offspring_size: int, optional (default: None) DCNL Number of offspring to produce in each GP generation. DCNL By default, offspring_size = population_size. DCNL mutation_rate: float, optional (default: 0.9) DCNL Mutation rate for the genetic programming algorithm in the range [0.0, 1.0]. DCNL This parameter tells the GP algorithm how many pipelines to apply random DCNL changes to every generation. We recommend using the default parameter unless DCNL you understand how the mutation rate affects GP algorithms. DCNL crossover_rate: float, optional (default: 0.1) DCNL Crossover rate for the genetic programming algorithm in the range [0.0, 1.0]. DCNL This parameter tells the genetic programming algorithm how many pipelines to DCNL "breed" every generation. We recommend using the default parameter unless you DCNL understand how the mutation rate affects GP algorithms. DCNL scoring: string or callable, optional DCNL Function used to evaluate the quality of a given pipeline for the DCNL problem. By default, accuracy is used for classification problems and DCNL mean squared error (MSE) for regression problems. DCNL Offers the same options as sklearn.model_selection.cross_val_score as well as DCNL a built-in score \'balanced_accuracy\'. Classification metrics: DCNL [\'accuracy\', \'adjusted_rand_score\', \'average_precision\', \'balanced_accuracy\', DCNL \'f1\', \'f1_macro\', \'f1_micro\', \'f1_samples\', \'f1_weighted\', DCNL \'precision\', \'precision_macro\', \'precision_micro\', \'precision_samples\', DCNL \'precision_weighted\', \'recall\', \'recall_macro\', \'recall_micro\', DCNL \'recall_samples\', \'recall_weighted\', \'roc_auc\'] DCNL Regression metrics: DCNL [\'neg_median_absolute_error\', \'neg_mean_absolute_error\', DCNL \'neg_mean_squared_error\', \'r2\'] DCNL If you would like to use a custom scoring function, you can pass a callable DCNL function to this parameter with the signature scorer(y_true, y_pred). DCNL See the section on scoring functions in the documentation for more details. DCNL TPOT assumes that any custom scoring function with "error" or "loss" in the DCNL name is meant to be minimized, whereas any other functions will be maximized. DCNL cv: int or cross-validation generator, optional (default: 5) DCNL If CV is a number, then it is the number of folds to evaluate each DCNL pipeline over in k-fold cross-validation during the TPOT optimization DCNL process. If it is an object then it is an object to be used as a DCNL cross-validation generator. DCNL subsample: float, optional (default: 1.0) DCNL Subsample ratio of the training instance. Setting it to 0.5 means that TPOT DCNL randomly collects half of training samples for pipeline optimization process. DCNL n_jobs: int, optional (default: 1) DCNL Number of CPUs for evaluating pipelines in parallel during the TPOT DCNL optimization process. Assigning this to -1 will use as many cores as available DCNL on the computer. DCNL max_time_mins: int, optional (default: None) DCNL How many minutes TPOT has to optimize the pipeline. DCNL If provided, this setting will override the "generations" parameter and allow DCNL TPOT to run until it runs out of time. DCNL max_eval_time_mins: int, optional (default: 5) DCNL How many minutes TPOT has to optimize a single pipeline. DCNL Setting this parameter to higher values will allow TPOT to explore more DCNL complex pipelines, but will also allow TPOT to run longer. DCNL random_state: int, optional (default: None) DCNL Random number generator seed for TPOT. Use this parameter to make sure DCNL that TPOT will give you the same results each time you run it against the DCNL same data set with that seed. DCNL config_dict: a Python dictionary or string, optional (default: None) DCNL Python dictionary: DCNL A dictionary customizing the operators and parameters that DCNL TPOT uses in the optimization process. DCNL For examples, see config_regressor.py and config_classifier.py DCNL Path for configuration file: DCNL A path to a configuration file for customizing the operators and parameters that DCNL TPOT uses in the optimization process. DCNL For examples, see config_regressor.py and config_classifier.py DCNL String \'TPOT light\': DCNL TPOT uses a light version of operator configuration dictionary instead of DCNL the default one. DCNL String \'TPOT MDR\': DCNL TPOT uses a list of TPOT-MDR operator configuration dictionary instead of DCNL the default one. DCNL warm_start: bool, optional (default: False) DCNL Flag indicating whether the TPOT instance will reuse the population from DCNL previous calls to fit(). DCNL verbosity: int, optional (default: 0) DCNL How much information TPOT communicates while it\'s running. DCNL 0 = none, 1 = minimal, 2 = high, 3 = all. DCNL A setting of 2 or higher will add a progress bar during the optimization procedure. DCNL disable_update_check: bool, optional (default: False) DCNL Flag indicating whether the TPOT version checker should be disabled. DCNL Returns DCNL None'
def fit(self, features, target, sample_weight=None, groups=None): DCNL 'Fit an optimized machine learning pipeline. DCNL Uses genetic programming to optimize a machine learning pipeline that DCNL maximizes score on the provided features and target. Performs internal DCNL k-fold cross-validaton to avoid overfitting on the training data. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL Feature matrix DCNL TPOT and all scikit-learn algorithms assume that the features will be numerical DCNL and there will be no missing values. As such, when a feature matrix is provided DCNL to TPOT, all missing values will automatically be replaced (i.e., imputed) using DCNL median value imputation. DCNL If you wish to use a different imputation strategy than median imputation, please DCNL make sure to apply imputation to your feature set prior to passing it to TPOT. DCNL target: array-like {n_samples} DCNL List of class labels for prediction DCNL sample_weight: array-like {n_samples}, optional DCNL Per-sample weights. Higher weights force TPOT to put more emphasis on those points DCNL groups: array-like, with shape {n_samples, }, optional DCNL Group labels for the samples used when performing cross-validation. DCNL This parameter should only be used in conjunction with sklearn\'s Group cross-validation DCNL functions, such as sklearn.model_selection.GroupKFold DCNL Returns DCNL self: object DCNL Returns a copy of the fitted TPOT object'
def _update_top_pipeline(self): DCNL 'Helper function to update the _optimized_pipeline field.'
def predict(self, features): DCNL 'Use the optimized pipeline to predict the target for a feature set. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL Feature matrix DCNL Returns DCNL array-like: {n_samples} DCNL Predicted target for the samples in the feature matrix'
def fit_predict(self, features, target): DCNL 'Call fit and predict in sequence. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL Feature matrix DCNL target: array-like {n_samples} DCNL List of class labels for prediction DCNL Returns DCNL array-like: {n_samples} DCNL Predicted target for the provided features'
def score(self, testing_features, testing_target): DCNL 'Returns the score on the given testing data using the user-specified scoring function. DCNL Parameters DCNL testing_features: array-like {n_samples, n_features} DCNL Feature matrix of the testing set DCNL testing_target: array-like {n_samples} DCNL List of class labels for prediction in the testing set DCNL Returns DCNL accuracy_score: float DCNL The estimated test set accuracy'
def predict_proba(self, features): DCNL 'Use the optimized pipeline to estimate the class probabilities for a feature set. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL Feature matrix of the testing set DCNL Returns DCNL array-like: {n_samples, n_target} DCNL The class probabilities of the input samples'
def set_params(self, **params): DCNL 'Set the parameters of TPOT. DCNL Returns DCNL self'
def export(self, output_file_name): DCNL 'Export the optimized pipeline as Python code. DCNL Parameters DCNL output_file_name: string DCNL String containing the path and file name of the desired output file DCNL Returns DCNL None'
def _impute_values(self, features): DCNL 'Impute missing values in a feature set. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL A feature matrix DCNL Returns DCNL array-like {n_samples, n_features}'
def _check_dataset(self, features, target): DCNL 'Check if a dataset has a valid feature set and labels. DCNL Parameters DCNL features: array-like {n_samples, n_features} DCNL Feature matrix DCNL target: array-like {n_samples} DCNL List of class labels for prediction DCNL Returns DCNL None'
def _compile_to_sklearn(self, expr): DCNL 'Compile a DEAP pipeline into a sklearn pipeline. DCNL Parameters DCNL expr: DEAP individual DCNL The DEAP pipeline to be compiled DCNL Returns DCNL sklearn_pipeline: sklearn.pipeline.Pipeline'
def _set_param_recursive(self, pipeline_steps, parameter, value): DCNL 'Recursively iterate through all objects in the pipeline and set a given parameter. DCNL Parameters DCNL pipeline_steps: array-like DCNL List of (str, obj) tuples from a scikit-learn pipeline or related object DCNL parameter: str DCNL The parameter to assign a value for in each pipeline object DCNL value: any DCNL The value to assign the parameter to in each pipeline object DCNL Returns DCNL None'
def _evaluate_individuals(self, individuals, features, target, sample_weight=None, groups=None): DCNL 'Determine the fit of the provided individuals. DCNL Parameters DCNL individuals: a list of DEAP individual DCNL One individual is a list of pipeline operators and model parameters that can be DCNL compiled by DEAP into a callable function DCNL features: numpy.ndarray {n_samples, n_features} DCNL A numpy matrix containing the training and testing features for the individual\'s evaluation DCNL target: numpy.ndarray {n_samples} DCNL A numpy matrix containing the training and testing target for the individual\'s evaluation DCNL sample_weight: array-like {n_samples}, optional DCNL List of sample weights to balance (or un-balanace) the dataset target as needed DCNL groups: array-like {n_samples, }, optional DCNL Group labels for the samples used while splitting the dataset into train/test set DCNL Returns DCNL fitnesses_ordered: float DCNL Returns a list of tuple value indicating the individual\'s fitness DCNL according to its performance on the provided data'
@_pre_test DCNL def _random_mutation_operator(self, individual): DCNL 'Perform a replacement, insertion, or shrink mutation on an individual. DCNL Parameters DCNL individual: DEAP individual DCNL A list of pipeline operators and model parameters that can be DCNL compiled by DEAP into a callable function DCNL Returns DCNL mut_ind: DEAP individual DCNL Returns the individual with one of the mutations applied to it'
def _gen_grow_safe(self, pset, min_, max_, type_=None): DCNL 'Generate an expression where each leaf might have a different depth between min_ and max_. DCNL Parameters DCNL pset: PrimitiveSetTyped DCNL Primitive set from which primitives are selected. DCNL min_: int DCNL Minimum height of the produced trees. DCNL max_: int DCNL Maximum Height of the produced trees. DCNL type_: class DCNL The type that should return the tree when called, when DCNL :obj:None (default) the type of :pset: (pset.ret) DCNL is assumed. DCNL Returns DCNL individual: list DCNL A grown tree with leaves at possibly different depths.'
@_pre_test DCNL def _generate(self, pset, min_, max_, condition, type_=None): DCNL 'Generate a Tree as a list of lists. DCNL The tree is build from the root to the leaves, and it stop growing when DCNL the condition is fulfilled. DCNL Parameters DCNL pset: PrimitiveSetTyped DCNL Primitive set from which primitives are selected. DCNL min_: int DCNL Minimum height of the produced trees. DCNL max_: int DCNL Maximum Height of the produced trees. DCNL condition: function DCNL The condition is a function that takes two arguments, DCNL the height of the tree to build and the current DCNL depth in the tree. DCNL type_: class DCNL The type that should return the tree when called, when DCNL :obj:None (default) no return type is enforced. DCNL Returns DCNL individual: list DCNL A grown tree with leaves at possibly different depths DCNL dependending on the condition function.'
def add_rule(self, rule): DCNL ':type rule: :class:`boto.s3.website.RoutingRule` DCNL :param rule: A routing rule. DCNL :return: This ``RoutingRules`` object is returned, DCNL so that it can chain subsequent calls.'
def to_xml(self): DCNL 'Returns a string containing the XML version of the Lifecycle DCNL configuration as defined by S3.'
def add_transition(self, days=None, date=None, storage_class=None): DCNL 'Add a transition to this Lifecycle configuration.  This only adds DCNL the rule to the local copy.  To install the new rule(s) on DCNL the bucket, you need to pass this Lifecycle config object DCNL to the configure_lifecycle method of the Bucket object. DCNL :ivar days: The number of days until the object should be moved. DCNL :ivar date: The date when the object should be moved.  Should be DCNL in ISO 8601 format. DCNL :ivar storage_class: The storage class to transition to.  Valid DCNL values are GLACIER, STANDARD_IA.'
def to_xml(self): DCNL 'Returns a string containing the XML version of the Lifecycle DCNL configuration as defined by S3.'
def add_rule(self, id=None, prefix='', status='Enabled', expiration=None, transition=None): DCNL 'Add a rule to this Lifecycle configuration.  This only adds DCNL the rule to the local copy.  To install the new rule(s) on DCNL the bucket, you need to pass this Lifecycle config object DCNL to the configure_lifecycle method of the Bucket object. DCNL :type id: str DCNL :param id: Unique identifier for the rule. The value cannot be longer DCNL than 255 characters. This value is optional. The server will DCNL generate a unique value for the rule if no value is provided. DCNL :type prefix: str DCNL :iparam prefix: Prefix identifying one or more objects to which the DCNL rule applies. DCNL :type status: str DCNL :param status: If \'Enabled\', the rule is currently being applied. DCNL If \'Disabled\', the rule is not currently being applied. DCNL :type expiration: int DCNL :param expiration: Indicates the lifetime, in days, of the objects DCNL that are subject to the rule. The value must be a non-zero DCNL positive integer. A Expiration object instance is also perfect. DCNL :type transition: Transitions DCNL :param transition: Indicates when an object transitions to a DCNL different storage class.'
def connect(self, **kw_params): DCNL 'Connect to this Region\'s endpoint. Returns an connection DCNL object pointing to the endpoint associated with this region. DCNL You may pass any of the arguments accepted by the connection DCNL class\'s constructor as keyword arguments and they will be DCNL passed along to the connection object. DCNL :rtype: Connection object DCNL :return: The connection to this regions endpoint'
def set_key_class(self, key_class): DCNL 'Set the Key class associated with this bucket.  By default, this DCNL would be the boto.s3.key.Key class but if you want to subclass that DCNL for some reason this allows you to associate your new class with a DCNL bucket so that when you call bucket.new_key() or when you get a listing DCNL of keys in the bucket you will get an instances of your key class DCNL rather than the default. DCNL :type key_class: class DCNL :param key_class: A subclass of Key that can be more specific'
def lookup(self, key_name, headers=None): DCNL 'Deprecated: Please use get_key method. DCNL :type key_name: string DCNL :param key_name: The name of the key to retrieve DCNL :rtype: :class:`boto.s3.key.Key` DCNL :returns: A Key object from this bucket.'
def get_key(self, key_name, headers=None, version_id=None, response_headers=None, validate=True): DCNL 'Check to see if a particular key exists within the bucket.  This DCNL method uses a HEAD request to check for the existence of the key. DCNL Returns: An instance of a Key object or None DCNL :param key_name: The name of the key to retrieve DCNL :type key_name: string DCNL :param headers: The headers to send when retrieving the key DCNL :type headers: dict DCNL :param version_id: DCNL :type version_id: string DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type response_headers: dict DCNL :param validate: Verifies whether the key exists. If ``False``, this DCNL will not hit the service, constructing an in-memory object. DCNL Default is ``True``. DCNL :type validate: bool DCNL :rtype: :class:`boto.s3.key.Key` DCNL :returns: A Key object from this bucket.'
def list(self, prefix='', delimiter='', marker='', headers=None, encoding_type=None): DCNL 'List key objects within a bucket.  This returns an instance of an DCNL BucketListResultSet that automatically handles all of the result DCNL paging, etc. from S3.  You just need to keep iterating until DCNL there are no more results. DCNL Called with no arguments, this will return an iterator object across DCNL all keys within the bucket. DCNL The Key objects returned by the iterator are obtained by parsing DCNL the results of a GET on the bucket, also known as the List Objects DCNL request.  The XML returned by this request contains only a subset DCNL of the information about each key.  Certain metadata fields such DCNL as Content-Type and user metadata are not available in the XML. DCNL Therefore, if you want these additional metadata fields you will DCNL have to do a HEAD request on the Key in the bucket. DCNL :type prefix: string DCNL :param prefix: allows you to limit the listing to a particular DCNL prefix.  For example, if you call the method with DCNL prefix=\'/foo/\' then the iterator will only cycle through DCNL the keys that begin with the string \'/foo/\'. DCNL :type delimiter: string DCNL :param delimiter: can be used in conjunction with the prefix DCNL to allow you to organize and browse your keys DCNL hierarchically. See http://goo.gl/Xx63h for more details. DCNL :type marker: string DCNL :param marker: The "marker" of where you are in the result set DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type encoding_type: string DCNL :rtype: :class:`boto.s3.bucketlistresultset.BucketListResultSet` DCNL :return: an instance of a BucketListResultSet that handles paging, etc'
def list_versions(self, prefix='', delimiter='', key_marker='', version_id_marker='', headers=None, encoding_type=None): DCNL 'List version objects within a bucket.  This returns an DCNL instance of an VersionedBucketListResultSet that automatically DCNL handles all of the result paging, etc. from S3.  You just need DCNL to keep iterating until there are no more results.  Called DCNL with no arguments, this will return an iterator object across DCNL all keys within the bucket. DCNL :type prefix: string DCNL :param prefix: allows you to limit the listing to a particular DCNL prefix.  For example, if you call the method with DCNL prefix=\'/foo/\' then the iterator will only cycle through DCNL the keys that begin with the string \'/foo/\'. DCNL :type delimiter: string DCNL :param delimiter: can be used in conjunction with the prefix DCNL to allow you to organize and browse your keys DCNL hierarchically. See: DCNL http://aws.amazon.com/releasenotes/Amazon-S3/213 DCNL for more details. DCNL :type key_marker: string DCNL :param key_marker: The "marker" of where you are in the result set DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type encoding_type: string DCNL :rtype: :class:`boto.s3.bucketlistresultset.BucketListResultSet` DCNL :return: an instance of a BucketListResultSet that handles paging, etc'
def list_multipart_uploads(self, key_marker='', upload_id_marker='', headers=None, encoding_type=None): DCNL 'List multipart upload objects within a bucket.  This returns an DCNL instance of an MultiPartUploadListResultSet that automatically DCNL handles all of the result paging, etc. from S3.  You just need DCNL to keep iterating until there are no more results. DCNL :type key_marker: string DCNL :param key_marker: The "marker" of where you are in the result set DCNL :type upload_id_marker: string DCNL :param upload_id_marker: The upload identifier DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type encoding_type: string DCNL :rtype: :class:`boto.s3.bucketlistresultset.MultiPartUploadListResultSet` DCNL :return: an instance of a BucketListResultSet that handles paging, etc'
def validate_kwarg_names(self, kwargs, names): DCNL 'Checks that all named arguments are in the specified list of names. DCNL :type kwargs: dict DCNL :param kwargs: Dictionary of kwargs to validate. DCNL :type names: list DCNL :param names: List of possible named arguments.'
def get_all_keys(self, headers=None, **params): DCNL 'A lower-level method for listing contents of a bucket.  This DCNL closely models the actual S3 API and requires you to manually DCNL handle the paging of results.  For a higher-level method that DCNL handles the details of paging for you, you can use the list DCNL method. DCNL :type max_keys: int DCNL :param max_keys: The maximum number of keys to retrieve DCNL :type prefix: string DCNL :param prefix: The prefix of the keys you want to retrieve DCNL :type marker: string DCNL :param marker: The "marker" of where you are in the result set DCNL :type delimiter: string DCNL :param delimiter: If this optional, Unicode string parameter DCNL is included with your request, then keys that contain the DCNL same string between the prefix and the first occurrence of DCNL the delimiter will be rolled up into a single result DCNL element in the CommonPrefixes collection. These rolled-up DCNL keys are not returned elsewhere in the response. DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type encoding_type: string DCNL :rtype: ResultSet DCNL :return: The result from S3 listing the keys requested'
def get_all_versions(self, headers=None, **params): DCNL 'A lower-level, version-aware method for listing contents of a DCNL bucket.  This closely models the actual S3 API and requires DCNL you to manually handle the paging of results.  For a DCNL higher-level method that handles the details of paging for DCNL you, you can use the list method. DCNL :type max_keys: int DCNL :param max_keys: The maximum number of keys to retrieve DCNL :type prefix: string DCNL :param prefix: The prefix of the keys you want to retrieve DCNL :type key_marker: string DCNL :param key_marker: The "marker" of where you are in the result set DCNL with respect to keys. DCNL :type version_id_marker: string DCNL :param version_id_marker: The "marker" of where you are in the result DCNL set with respect to version-id\'s. DCNL :type delimiter: string DCNL :param delimiter: If this optional, Unicode string parameter DCNL is included with your request, then keys that contain the DCNL same string between the prefix and the first occurrence of DCNL the delimiter will be rolled up into a single result DCNL element in the CommonPrefixes collection. These rolled-up DCNL keys are not returned elsewhere in the response. DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type encoding_type: string DCNL :rtype: ResultSet DCNL :return: The result from S3 listing the keys requested'
def validate_get_all_versions_params(self, params): DCNL 'Validate that the parameters passed to get_all_versions are valid. DCNL Overridden by subclasses that allow a different set of parameters. DCNL :type params: dict DCNL :param params: Parameters to validate.'
def get_all_multipart_uploads(self, headers=None, **params): DCNL 'A lower-level, version-aware method for listing active DCNL MultiPart uploads for a bucket.  This closely models the DCNL actual S3 API and requires you to manually handle the paging DCNL of results.  For a higher-level method that handles the DCNL details of paging for you, you can use the list method. DCNL :type max_uploads: int DCNL :param max_uploads: The maximum number of uploads to retrieve. DCNL Default value is 1000. DCNL :type key_marker: string DCNL :param key_marker: Together with upload_id_marker, this DCNL parameter specifies the multipart upload after which DCNL listing should begin.  If upload_id_marker is not DCNL specified, only the keys lexicographically greater than DCNL the specified key_marker will be included in the list. DCNL If upload_id_marker is specified, any multipart uploads DCNL for a key equal to the key_marker might also be included, DCNL provided those multipart uploads have upload IDs DCNL lexicographically greater than the specified DCNL upload_id_marker. DCNL :type upload_id_marker: string DCNL :param upload_id_marker: Together with key-marker, specifies DCNL the multipart upload after which listing should begin. If DCNL key_marker is not specified, the upload_id_marker DCNL parameter is ignored.  Otherwise, any multipart uploads DCNL for a key equal to the key_marker might be included in the DCNL list only if they have an upload ID lexicographically DCNL greater than the specified upload_id_marker. DCNL :type encoding_type: string DCNL :param encoding_type: Requests Amazon S3 to encode the response and DCNL specifies the encoding method to use. DCNL An object key can contain any Unicode character; however, XML 1.0 DCNL parser cannot parse some characters, such as characters with an DCNL ASCII value from 0 to 10. For characters that are not supported in DCNL XML 1.0, you can add this parameter to request that Amazon S3 DCNL encode the keys in the response. DCNL Valid options: ``url`` DCNL :type delimiter: string DCNL :param delimiter: Character you use to group keys. DCNL All keys that contain the same string between the prefix, if DCNL specified, and the first occurrence of the delimiter after the DCNL prefix are grouped under a single result element, CommonPrefixes. DCNL If you don\'t specify the prefix parameter, then the substring DCNL starts at the beginning of the key. The keys that are grouped DCNL under CommonPrefixes result element are not returned elsewhere DCNL in the response. DCNL :type prefix: string DCNL :param prefix: Lists in-progress uploads only for those keys that DCNL begin with the specified prefix. You can use prefixes to separate DCNL a bucket into different grouping of keys. (You can think of using DCNL prefix to make groups in the same way you\'d use a folder in a DCNL file system.) DCNL :rtype: ResultSet DCNL :return: The result from S3 listing the uploads requested'
def new_key(self, key_name=None): DCNL 'Creates a new key DCNL :type key_name: string DCNL :param key_name: The name of the key to create DCNL :rtype: :class:`boto.s3.key.Key` or subclass DCNL :returns: An instance of the newly created key object'
def delete_keys(self, keys, quiet=False, mfa_token=None, headers=None): DCNL 'Deletes a set of keys using S3\'s Multi-object delete API. If a DCNL VersionID is specified for that key then that version is removed. DCNL Returns a MultiDeleteResult Object, which contains Deleted DCNL and Error elements for each key you ask to delete. DCNL :type keys: list DCNL :param keys: A list of either key_names or (key_name, versionid) pairs DCNL or a list of Key instances. DCNL :type quiet: boolean DCNL :param quiet: In quiet mode the response includes only keys DCNL where the delete operation encountered an error. For a DCNL successful deletion, the operation does not return any DCNL information about the delete in the response body. DCNL :type mfa_token: tuple or list of strings DCNL :param mfa_token: A tuple or list consisting of the serial DCNL number from the MFA device and the current value of the DCNL six-digit token associated with the device.  This value is DCNL required anytime you are deleting versioned objects from a DCNL bucket that has the MFADelete option on the bucket. DCNL :returns: An instance of MultiDeleteResult'
def delete_key(self, key_name, headers=None, version_id=None, mfa_token=None): DCNL 'Deletes a key from the bucket.  If a version_id is provided, DCNL only that version of the key will be deleted. DCNL :type key_name: string DCNL :param key_name: The key name to delete DCNL :type version_id: string DCNL :param version_id: The version ID (optional) DCNL :type mfa_token: tuple or list of strings DCNL :param mfa_token: A tuple or list consisting of the serial DCNL number from the MFA device and the current value of the DCNL six-digit token associated with the device.  This value is DCNL required anytime you are deleting versioned objects from a DCNL bucket that has the MFADelete option on the bucket. DCNL :rtype: :class:`boto.s3.key.Key` or subclass DCNL :returns: A key object holding information on what was DCNL deleted.  The Caller can see if a delete_marker was DCNL created or removed and what version_id the delete created DCNL or removed.'
def copy_key(self, new_key_name, src_bucket_name, src_key_name, metadata=None, src_version_id=None, storage_class='STANDARD', preserve_acl=False, encrypt_key=False, headers=None, query_args=None): DCNL 'Create a new key in the bucket by copying another existing key. DCNL :type new_key_name: string DCNL :param new_key_name: The name of the new key DCNL :type src_bucket_name: string DCNL :param src_bucket_name: The name of the source bucket DCNL :type src_key_name: string DCNL :param src_key_name: The name of the source key DCNL :type src_version_id: string DCNL :param src_version_id: The version id for the key.  This param DCNL is optional.  If not specified, the newest version of the DCNL key will be copied. DCNL :type metadata: dict DCNL :param metadata: Metadata to be associated with new key.  If DCNL metadata is supplied, it will replace the metadata of the DCNL source key being copied.  If no metadata is supplied, the DCNL source key\'s metadata will be copied to the new key. DCNL :type storage_class: string DCNL :param storage_class: The storage class of the new key.  By DCNL default, the new key will use the standard storage class. DCNL Possible values are: STANDARD | REDUCED_REDUNDANCY DCNL :type preserve_acl: bool DCNL :param preserve_acl: If True, the ACL from the source key will DCNL be copied to the destination key.  If False, the DCNL destination key will have the default ACL.  Note that DCNL preserving the ACL in the new key object will require two DCNL additional API calls to S3, one to retrieve the current DCNL ACL and one to set that ACL on the new object.  If you DCNL don\'t care about the ACL, a value of False will be DCNL significantly more efficient. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3. DCNL :type headers: dict DCNL :param headers: A dictionary of header name/value pairs. DCNL :type query_args: string DCNL :param query_args: A string of additional querystring arguments DCNL to append to the request DCNL :rtype: :class:`boto.s3.key.Key` or subclass DCNL :returns: An instance of the newly created key object'
def set_subresource(self, subresource, value, key_name='', headers=None, version_id=None): DCNL 'Set a subresource for a bucket or key. DCNL :type subresource: string DCNL :param subresource: The subresource to set. DCNL :type value: string DCNL :param value: The value of the subresource. DCNL :type key_name: string DCNL :param key_name: The key to operate on, or None to operate on the DCNL bucket. DCNL :type headers: dict DCNL :param headers: Additional HTTP headers to include in the request. DCNL :type src_version_id: string DCNL :param src_version_id: Optional. The version id of the key to DCNL operate on. If not specified, operate on the newest DCNL version.'
def get_subresource(self, subresource, key_name='', headers=None, version_id=None): DCNL 'Get a subresource for a bucket or key. DCNL :type subresource: string DCNL :param subresource: The subresource to get. DCNL :type key_name: string DCNL :param key_name: The key to operate on, or None to operate on the DCNL bucket. DCNL :type headers: dict DCNL :param headers: Additional HTTP headers to include in the request. DCNL :type src_version_id: string DCNL :param src_version_id: Optional. The version id of the key to DCNL operate on. If not specified, operate on the newest DCNL version. DCNL :rtype: string DCNL :returns: The value of the subresource.'
def add_email_grant(self, permission, email_address, recursive=False, headers=None): DCNL 'Convenience method that provides a quick way to add an email grant DCNL to a bucket. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL DCNL and then PUT\'s the new ACL back to S3. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL (READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL). DCNL :type email_address: string DCNL :param email_address: The email address associated with the AWS DCNL account your are granting the permission to. DCNL :type recursive: boolean DCNL :param recursive: A boolean value to controls whether the DCNL command will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a True DCNL value, the call will iterate through all keys in the DCNL bucket and apply the same grant to each key.  CAUTION: If DCNL you have a lot of keys, this could take a long time!'
def add_user_grant(self, permission, user_id, recursive=False, headers=None, display_name=None): DCNL 'Convenience method that provides a quick way to add a canonical DCNL user grant to a bucket.  This method retrieves the current ACL, DCNL creates a new grant based on the parameters passed in, adds that DCNL grant to the ACL and then PUT\'s the new ACL back to S3. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL (READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL). DCNL :type user_id: string DCNL :param user_id:     The canonical user id associated with the AWS DCNL account your are granting the permission to. DCNL :type recursive: boolean DCNL :param recursive: A boolean value to controls whether the DCNL command will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a True DCNL value, the call will iterate through all keys in the DCNL bucket and apply the same grant to each key.  CAUTION: If DCNL you have a lot of keys, this could take a long time! DCNL :type display_name: string DCNL :param display_name: An option string containing the user\'s DCNL Display Name.  Only required on Walrus.'
def get_location(self): DCNL 'Returns the LocationConstraint for the bucket. DCNL :rtype: str DCNL :return: The LocationConstraint for the bucket or the empty DCNL string if no constraint was specified when bucket was created.'
def set_xml_logging(self, logging_str, headers=None): DCNL 'Set logging on a bucket directly to the given xml string. DCNL :type logging_str: unicode string DCNL :param logging_str: The XML for the bucketloggingstatus which DCNL will be set.  The string will be converted to utf-8 before DCNL it is sent.  Usually, you will obtain this XML from the DCNL BucketLogging object. DCNL :rtype: bool DCNL :return: True if ok or raises an exception.'
def enable_logging(self, target_bucket, target_prefix='', grants=None, headers=None): DCNL 'Enable logging on a bucket. DCNL :type target_bucket: bucket or string DCNL :param target_bucket: The bucket to log to. DCNL :type target_prefix: string DCNL :param target_prefix: The prefix which should be prepended to the DCNL generated log files written to the target_bucket. DCNL :type grants: list of Grant objects DCNL :param grants: A list of extra permissions which will be granted on DCNL the log files which are created. DCNL :rtype: bool DCNL :return: True if ok or raises an exception.'
def disable_logging(self, headers=None): DCNL 'Disable logging on a bucket. DCNL :rtype: bool DCNL :return: True if ok or raises an exception.'
def get_logging_status(self, headers=None): DCNL 'Get the logging status for this bucket. DCNL :rtype: :class:`boto.s3.bucketlogging.BucketLogging` DCNL :return: A BucketLogging object for this bucket.'
def set_as_logging_target(self, headers=None): DCNL 'Setup the current bucket as a logging target by granting the necessary DCNL permissions to the LogDelivery group to write log files to this bucket.'
def configure_versioning(self, versioning, mfa_delete=False, mfa_token=None, headers=None): DCNL 'Configure versioning for this bucket. DCNL ..note:: This feature is currently in beta. DCNL :type versioning: bool DCNL :param versioning: A boolean indicating whether version is DCNL enabled (True) or disabled (False). DCNL :type mfa_delete: bool DCNL :param mfa_delete: A boolean indicating whether the DCNL Multi-Factor Authentication Delete feature is enabled DCNL (True) or disabled (False).  If mfa_delete is enabled then DCNL all Delete operations will require the token from your MFA DCNL device to be passed in the request. DCNL :type mfa_token: tuple or list of strings DCNL :param mfa_token: A tuple or list consisting of the serial DCNL number from the MFA device and the current value of the DCNL six-digit token associated with the device.  This value is DCNL required when you are changing the status of the MfaDelete DCNL property of the bucket.'
def get_versioning_status(self, headers=None): DCNL 'Returns the current status of versioning on the bucket. DCNL :rtype: dict DCNL :returns: A dictionary containing a key named \'Versioning\' DCNL that can have a value of either Enabled, Disabled, or DCNL Suspended. Also, if MFADelete has ever been enabled on the DCNL bucket, the dictionary will contain a key named DCNL \'MFADelete\' which will have a value of either Enabled or DCNL Suspended.'
def configure_lifecycle(self, lifecycle_config, headers=None): DCNL 'Configure lifecycle for this bucket. DCNL :type lifecycle_config: :class:`boto.s3.lifecycle.Lifecycle` DCNL :param lifecycle_config: The lifecycle configuration you want DCNL to configure for this bucket.'
def get_lifecycle_config(self, headers=None): DCNL 'Returns the current lifecycle configuration on the bucket. DCNL :rtype: :class:`boto.s3.lifecycle.Lifecycle` DCNL :returns: A LifecycleConfig object that describes all current DCNL lifecycle rules in effect for the bucket.'
def delete_lifecycle_configuration(self, headers=None): DCNL 'Removes all lifecycle configuration from the bucket.'
def configure_website(self, suffix=None, error_key=None, redirect_all_requests_to=None, routing_rules=None, headers=None): DCNL 'Configure this bucket to act as a website DCNL :type suffix: str DCNL :param suffix: Suffix that is appended to a request that is for a DCNL "directory" on the website endpoint (e.g. if the suffix is DCNL index.html and you make a request to samplebucket/images/ DCNL the data that is returned will be for the object with the DCNL key name images/index.html).  The suffix must not be empty DCNL and must not include a slash character. DCNL :type error_key: str DCNL :param error_key: The object key name to use when a 4XX class DCNL error occurs.  This is optional. DCNL :type redirect_all_requests_to: :class:`boto.s3.website.RedirectLocation` DCNL :param redirect_all_requests_to: Describes the redirect behavior for DCNL every request to this bucket\'s website endpoint. If this value is DCNL non None, no other values are considered when configuring the DCNL website configuration for the bucket. This is an instance of DCNL ``RedirectLocation``. DCNL :type routing_rules: :class:`boto.s3.website.RoutingRules` DCNL :param routing_rules: Object which specifies conditions DCNL and redirects that apply when the conditions are met.'
def set_website_configuration(self, config, headers=None): DCNL ':type config: boto.s3.website.WebsiteConfiguration DCNL :param config: Configuration data'
def set_website_configuration_xml(self, xml, headers=None): DCNL 'Upload xml website configuration'
def get_website_configuration(self, headers=None): DCNL 'Returns the current status of website configuration on the bucket. DCNL :rtype: dict DCNL :returns: A dictionary containing a Python representation DCNL of the XML response from S3. The overall structure is: DCNL * WebsiteConfiguration DCNL * IndexDocument DCNL * Suffix : suffix that is appended to request that DCNL is for a "directory" on the website endpoint DCNL * ErrorDocument DCNL * Key : name of object to serve when an error occurs'
def get_website_configuration_obj(self, headers=None): DCNL 'Get the website configuration as a DCNL :class:`boto.s3.website.WebsiteConfiguration` object.'
def get_website_configuration_with_xml(self, headers=None): DCNL 'Returns the current status of website configuration on the bucket as DCNL unparsed XML. DCNL :rtype: 2-Tuple DCNL :returns: 2-tuple containing: DCNL 1) A dictionary containing a Python representation                 of the XML response. The overall structure is: DCNL * WebsiteConfiguration DCNL * IndexDocument DCNL * Suffix : suffix that is appended to request that                     is for a "directory" on the website endpoint DCNL * ErrorDocument DCNL * Key : name of object to serve when an error occurs DCNL 2) unparsed XML describing the bucket\'s website configuration'
def get_website_configuration_xml(self, headers=None): DCNL 'Get raw website configuration xml'
def delete_website_configuration(self, headers=None): DCNL 'Removes all website configuration from the bucket.'
def get_website_endpoint(self): DCNL 'Returns the fully qualified hostname to use is you want to access this DCNL bucket as a website.  This doesn\'t validate whether the bucket has DCNL been correctly configured as a website or not.'
def get_policy(self, headers=None): DCNL 'Returns the JSON policy associated with the bucket.  The policy DCNL is returned as an uninterpreted JSON string.'
def set_policy(self, policy, headers=None): DCNL 'Add or replace the JSON policy associated with the bucket. DCNL :type policy: str DCNL :param policy: The JSON policy as a string.'
def set_cors_xml(self, cors_xml, headers=None): DCNL 'Set the CORS (Cross-Origin Resource Sharing) for a bucket. DCNL :type cors_xml: str DCNL :param cors_xml: The XML document describing your desired DCNL CORS configuration.  See the S3 documentation for details DCNL of the exact syntax required.'
def set_cors(self, cors_config, headers=None): DCNL 'Set the CORS for this bucket given a boto CORSConfiguration DCNL object. DCNL :type cors_config: :class:`boto.s3.cors.CORSConfiguration` DCNL :param cors_config: The CORS configuration you want DCNL to configure for this bucket.'
def get_cors_xml(self, headers=None): DCNL 'Returns the current CORS configuration on the bucket as an DCNL XML document.'
def get_cors(self, headers=None): DCNL 'Returns the current CORS configuration on the bucket. DCNL :rtype: :class:`boto.s3.cors.CORSConfiguration` DCNL :returns: A CORSConfiguration object that describes all current DCNL CORS rules in effect for the bucket.'
def delete_cors(self, headers=None): DCNL 'Removes all CORS configuration from the bucket.'
def initiate_multipart_upload(self, key_name, headers=None, reduced_redundancy=False, metadata=None, encrypt_key=False, policy=None): DCNL 'Start a multipart upload operation. DCNL .. note:: DCNL Note: After you initiate multipart upload and upload one or more DCNL parts, you must either complete or abort multipart upload in order DCNL to stop getting charged for storage of the uploaded parts. Only DCNL after you either complete or abort multipart upload, Amazon S3 DCNL frees up the parts storage and stops charging you for the parts DCNL storage. DCNL :type key_name: string DCNL :param key_name: The name of the key that will ultimately DCNL result from this multipart upload operation.  This will be DCNL exactly as the key appears in the bucket after the upload DCNL process has been completed. DCNL :type headers: dict DCNL :param headers: Additional HTTP headers to send and store with the DCNL resulting key in S3. DCNL :type reduced_redundancy: boolean DCNL :param reduced_redundancy: In multipart uploads, the storage DCNL class is specified when initiating the upload, not when DCNL uploading individual parts.  So if you want the resulting DCNL key to use the reduced redundancy storage class set this DCNL flag when you initiate the upload. DCNL :type metadata: dict DCNL :param metadata: Any metadata that you would like to set on the key DCNL that results from the multipart upload. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key (once completed) in S3.'
def complete_multipart_upload(self, key_name, upload_id, xml_body, headers=None): DCNL 'Complete a multipart upload operation.'
def cancel_multipart_upload(self, key_name, upload_id, headers=None): DCNL 'To verify that all parts have been removed, so you don\'t get charged DCNL for the part storage, you should call the List Parts operation and DCNL ensure the parts list is empty.'
def __init__(self, tracker_file_name=None, num_retries=None): DCNL 'Constructor. Instantiate once for each downloaded file. DCNL :type tracker_file_name: string DCNL :param tracker_file_name: optional file name to save tracking info DCNL about this download. If supplied and the current process fails DCNL the download, it can be retried in a new process. If called DCNL with an existing file containing an unexpired timestamp, DCNL we\'ll resume the transfer for this file; else we\'ll start a DCNL new resumable download. DCNL :type num_retries: int DCNL :param num_retries: the number of times we\'ll re-try a resumable DCNL download making no progress. (Count resets every time we get DCNL progress, so download can span many more than this number of DCNL retries.)'
def _attempt_resumable_download(self, key, fp, headers, cb, num_cb, torrent, version_id, hash_algs): DCNL 'Attempts a resumable download. DCNL Raises ResumableDownloadException if any problems occur.'
def get_file(self, key, fp, headers, cb=None, num_cb=10, torrent=False, version_id=None, hash_algs=None): DCNL 'Retrieves a file from a Key DCNL :type key: :class:`boto.s3.key.Key` or subclass DCNL :param key: The Key object from which upload is to be downloaded DCNL :type fp: file DCNL :param fp: File pointer into which data should be downloaded DCNL :type headers: string DCNL :param: headers to send when retrieving the files DCNL :type cb: function DCNL :param cb: (optional) a callback function that will be called to report DCNL progress on the download.  The callback should accept two integer DCNL parameters, the first representing the number of bytes that have DCNL been successfully transmitted from the storage service and DCNL the second representing the total number of bytes that need DCNL to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the cb DCNL parameter this parameter determines the granularity of the callback DCNL by defining the maximum number of times the callback will be DCNL called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: Flag for whether to get a torrent for the file DCNL :type version_id: string DCNL :param version_id: The version ID (optional) DCNL :type hash_algs: dictionary DCNL :param hash_algs: (optional) Dictionary of hash algorithms and DCNL corresponding hashing class that implements update() and digest(). DCNL Defaults to {\'md5\': hashlib/md5.md5}. DCNL Raises ResumableDownloadException if a problem occurs during DCNL the transfer.'
def set_bucket_class(self, bucket_class): DCNL 'Set the Bucket class associated with this bucket.  By default, this DCNL would be the boto.s3.key.Bucket class but if you want to subclass that DCNL for some reason this allows you to associate your new class. DCNL :type bucket_class: class DCNL :param bucket_class: A subclass of Bucket that can be more specific'
def build_post_policy(self, expiration_time, conditions): DCNL 'Taken from the AWS book Python examples and modified for use with boto'
def build_post_form_args(self, bucket_name, key, expires_in=6000, acl=None, success_action_redirect=None, max_content_length=None, http_method='http', fields=None, conditions=None, storage_class='STANDARD', server_side_encryption=None): DCNL 'Taken from the AWS book Python examples and modified for use with boto DCNL This only returns the arguments required for the post form, not the DCNL actual form.  This does not return the file input field which also DCNL needs to be added DCNL :type bucket_name: string DCNL :param bucket_name: Bucket to submit to DCNL :type key: string DCNL :param key:  Key name, optionally add ${filename} to the end to DCNL attach the submitted filename DCNL :type expires_in: integer DCNL :param expires_in: Time (in seconds) before this expires, defaults DCNL to 6000 DCNL :type acl: string DCNL :param acl: A canned ACL.  One of: DCNL * private DCNL * public-read DCNL * public-read-write DCNL * authenticated-read DCNL * bucket-owner-read DCNL * bucket-owner-full-control DCNL :type success_action_redirect: string DCNL :param success_action_redirect: URL to redirect to on success DCNL :type max_content_length: integer DCNL :param max_content_length: Maximum size for this file DCNL :type http_method: string DCNL :param http_method:  HTTP Method to use, "http" or "https" DCNL :type storage_class: string DCNL :param storage_class: Storage class to use for storing the object. DCNL Valid values: STANDARD | REDUCED_REDUNDANCY DCNL :type server_side_encryption: string DCNL :param server_side_encryption: Specifies server-side encryption DCNL algorithm to use when Amazon S3 creates an object. DCNL Valid values: None | AES256 DCNL :rtype: dict DCNL :return: A dictionary containing field names/values as well as DCNL a url to POST to DCNL .. code-block:: python'
def get_canonical_user_id(self, headers=None): DCNL 'Convenience method that returns the "CanonicalUserID" of the DCNL user who\'s credentials are associated with the connection. DCNL The only way to get this value is to do a GET request on the DCNL service which returns all buckets associated with the account. DCNL As part of that response, the canonical userid is returned. DCNL This method simply does all of that and then returns just the DCNL user id. DCNL :rtype: string DCNL :return: A string containing the canonical user id.'
def get_bucket(self, bucket_name, validate=True, headers=None): DCNL 'Retrieves a bucket by name. DCNL If the bucket does not exist, an ``S3ResponseError`` will be raised. If DCNL you are unsure if the bucket exists or not, you can use the DCNL ``S3Connection.lookup`` method, which will either return a valid bucket DCNL or ``None``. DCNL If ``validate=False`` is passed, no request is made to the service (no DCNL charge/communication delay). This is only safe to do if you are **sure** DCNL the bucket exists. DCNL If the default ``validate=True`` is passed, a request is made to the DCNL service to ensure the bucket exists. Prior to Boto v2.25.0, this fetched DCNL a list of keys (but with a max limit set to ``0``, always returning an empty DCNL list) in the bucket (& included better error messages), at an DCNL increased expense. As of Boto v2.25.0, this now performs a HEAD request DCNL (less expensive but worse error messages). DCNL If you were relying on parsing the error message before, you should call DCNL something like:: DCNL bucket = conn.get_bucket(\'<bucket_name>\', validate=False) DCNL bucket.get_all_keys(maxkeys=0) DCNL :type bucket_name: string DCNL :param bucket_name: The name of the bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to DCNL AWS. DCNL :type validate: boolean DCNL :param validate: If ``True``, it will try to verify the bucket exists DCNL on the service-side. (Default: ``True``)'
def head_bucket(self, bucket_name, headers=None): DCNL 'Determines if a bucket exists by name. DCNL If the bucket does not exist, an ``S3ResponseError`` will be raised. DCNL :type bucket_name: string DCNL :param bucket_name: The name of the bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to DCNL AWS. DCNL :returns: A <Bucket> object'
def lookup(self, bucket_name, validate=True, headers=None): DCNL 'Attempts to get a bucket from S3. DCNL Works identically to ``S3Connection.get_bucket``, save for that it DCNL will return ``None`` if the bucket does not exist instead of throwing DCNL an exception. DCNL :type bucket_name: string DCNL :param bucket_name: The name of the bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to DCNL AWS. DCNL :type validate: boolean DCNL :param validate: If ``True``, it will try to fetch all keys within the DCNL given bucket. (Default: ``True``)'
def create_bucket(self, bucket_name, headers=None, location=Location.DEFAULT, policy=None): DCNL 'Creates a new located bucket. By default it\'s in the USA. You can pass DCNL Location.EU to create a European bucket (S3) or European Union bucket DCNL (GCS). DCNL :type bucket_name: string DCNL :param bucket_name: The name of the new bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to AWS. DCNL :type location: str DCNL :param location: The location of the new bucket.  You can use one of the DCNL constants in :class:`boto.s3.connection.Location` (e.g. Location.EU, DCNL Location.USWest, etc.). DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in S3.'
def delete_bucket(self, bucket, headers=None): DCNL 'Removes an S3 bucket. DCNL In order to remove the bucket, it must first be empty. If the bucket is DCNL not empty, an ``S3ResponseError`` will be raised. DCNL :type bucket_name: string DCNL :param bucket_name: The name of the bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to DCNL AWS.'
def get_md5_from_hexdigest(self, md5_hexdigest): DCNL 'A utility function to create the 2-tuple (md5hexdigest, base64md5) DCNL from just having a precalculated md5_hexdigest.'
def handle_addl_headers(self, headers): DCNL 'Used by Key subclasses to do additional, provider-specific DCNL processing of response headers. No-op for this base class.'
def open_read(self, headers=None, query_args='', override_num_retries=None, response_headers=None): DCNL 'Open this key for reading DCNL :type headers: dict DCNL :param headers: Headers to pass in the web request DCNL :type query_args: string DCNL :param query_args: Arguments to pass in the query string DCNL (ie, \'torrent\') DCNL :type override_num_retries: int DCNL :param override_num_retries: If not None will override configured DCNL num_retries parameter for underlying GET. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details.'
def open_write(self, headers=None, override_num_retries=None): DCNL 'Open this key for writing. DCNL Not yet implemented DCNL :type headers: dict DCNL :param headers: Headers to pass in the write request DCNL :type override_num_retries: int DCNL :param override_num_retries: If not None will override configured DCNL num_retries parameter for underlying PUT.'
def close(self, fast=False): DCNL 'Close this key. DCNL :type fast: bool DCNL :param fast: True if you want the connection to be closed without first DCNL reading the content. This should only be used in cases where subsequent DCNL calls don\'t need to return the content from the open HTTP connection. DCNL Note: As explained at DCNL http://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.getresponse, DCNL callers must read the whole response before sending a new request to the DCNL server. Calling Key.close(fast=True) and making a subsequent request to DCNL the server will work because boto will get an httplib exception and DCNL close/reopen the connection.'
def next(self): DCNL 'By providing a next method, the key object supports use as an iterator. DCNL For example, you can now say: DCNL for bytes in key: DCNL write bytes to a file or whatever DCNL All of the HTTP connection stuff is handled for you.'
def change_storage_class(self, new_storage_class, dst_bucket=None, validate_dst_bucket=True): DCNL 'Change the storage class of an existing key. DCNL Depending on whether a different destination bucket is supplied DCNL or not, this will either move the item within the bucket, preserving DCNL all metadata and ACL info bucket changing the storage class or it DCNL will copy the item to the provided destination bucket, also DCNL preserving metadata and ACL info. DCNL :type new_storage_class: string DCNL :param new_storage_class: The new storage class for the Key. DCNL Possible values are: DCNL * STANDARD DCNL * REDUCED_REDUNDANCY DCNL :type dst_bucket: string DCNL :param dst_bucket: The name of a destination bucket.  If not DCNL provided the current bucket of the key will be used. DCNL :type validate_dst_bucket: bool DCNL :param validate_dst_bucket: If True, will validate the dst_bucket DCNL by using an extra list request.'
def copy(self, dst_bucket, dst_key, metadata=None, reduced_redundancy=False, preserve_acl=False, encrypt_key=False, validate_dst_bucket=True): DCNL 'Copy this Key to another bucket. DCNL :type dst_bucket: string DCNL :param dst_bucket: The name of the destination bucket DCNL :type dst_key: string DCNL :param dst_key: The name of the destination key DCNL :type metadata: dict DCNL :param metadata: Metadata to be associated with new key.  If DCNL metadata is supplied, it will replace the metadata of the DCNL source key being copied.  If no metadata is supplied, the DCNL source key\'s metadata will be copied to the new key. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will force the DCNL storage class of the new Key to be REDUCED_REDUNDANCY DCNL regardless of the storage class of the key being copied. DCNL The Reduced Redundancy Storage (RRS) feature of S3, DCNL provides lower redundancy at lower storage cost. DCNL :type preserve_acl: bool DCNL :param preserve_acl: If True, the ACL from the source key will DCNL be copied to the destination key.  If False, the DCNL destination key will have the default ACL.  Note that DCNL preserving the ACL in the new key object will require two DCNL additional API calls to S3, one to retrieve the current DCNL ACL and one to set that ACL on the new object.  If you DCNL don\'t care about the ACL, a value of False will be DCNL significantly more efficient. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3. DCNL :type validate_dst_bucket: bool DCNL :param validate_dst_bucket: If True, will validate the dst_bucket DCNL by using an extra list request. DCNL :rtype: :class:`boto.s3.key.Key` or subclass DCNL :returns: An instance of the newly created key object'
def exists(self, headers=None): DCNL 'Returns True if the key exists DCNL :rtype: bool DCNL :return: Whether the key exists on S3'
def delete(self, headers=None): DCNL 'Delete this key from S3'
def get_redirect(self): DCNL 'Return the redirect location configured for this key. DCNL If no redirect is configured (via set_redirect), then None DCNL will be returned.'
def set_redirect(self, redirect_location, headers=None): DCNL 'Configure this key to redirect to another location. DCNL When the bucket associated with this key is accessed from the website DCNL endpoint, a 301 redirect will be issued to the specified DCNL `redirect_location`. DCNL :type redirect_location: string DCNL :param redirect_location: The location to redirect.'
def generate_url(self, expires_in, method='GET', headers=None, query_auth=True, force_http=False, response_headers=None, expires_in_absolute=False, version_id=None, policy=None, reduced_redundancy=False, encrypt_key=False): DCNL 'Generate a URL to access this key. DCNL :type expires_in: int DCNL :param expires_in: How long the url is valid for, in seconds. DCNL :type method: string DCNL :param method: The method to use for retrieving the file DCNL (default is GET). DCNL :type headers: dict DCNL :param headers: Any headers to pass along in the request. DCNL :type query_auth: bool DCNL :param query_auth: If True, signs the request in the URL. DCNL :type force_http: bool DCNL :param force_http: If True, http will be used instead of https. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type expires_in_absolute: bool DCNL :param expires_in_absolute: DCNL :type version_id: string DCNL :param version_id: The version_id of the object to GET. If specified DCNL this overrides any value in the key. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in S3. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will set the storage DCNL class of the new Key to be REDUCED_REDUNDANCY. The Reduced DCNL Redundancy Storage (RRS) feature of S3, provides lower DCNL redundancy at lower storage cost. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3. DCNL :rtype: string DCNL :return: The URL to access the key'
def send_file(self, fp, headers=None, cb=None, num_cb=10, query_args=None, chunked_transfer=False, size=None): DCNL 'Upload a file to a key into a bucket on S3. DCNL :type fp: file DCNL :param fp: The file pointer to upload. The file pointer must DCNL point at the offset from which you wish to upload. DCNL ie. if uploading the full file, it should point at the DCNL start of the file. Normally when a file is opened for DCNL reading, the fp will point at the first byte.  See the DCNL bytes parameter below for more info. DCNL :type headers: dict DCNL :param headers: The headers to pass along with the PUT request DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file DCNL transfer. Providing a negative integer will cause your DCNL callback to be called with each buffer read. DCNL :type query_args: string DCNL :param query_args: (optional) Arguments to pass in the query string. DCNL :type chunked_transfer: boolean DCNL :param chunked_transfer: (optional) If true, we use chunked DCNL Transfer-Encoding. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read DCNL from the file pointer (fp). This is useful when uploading DCNL a file in multiple parts where you are splitting the file DCNL up into different ranges to be uploaded. If not specified, DCNL the default behaviour is to read all bytes from the file DCNL pointer. Less bytes may be available.'
def compute_md5(self, fp, size=None): DCNL ':type fp: file DCNL :param fp: File pointer to the file to MD5 hash.  The file DCNL pointer will be reset to the same position before the DCNL method returns. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read DCNL from the file pointer (fp). This is useful when uploading DCNL a file in multiple parts where the file is being split DCNL in place into different parts. Less bytes may be available.'
def set_contents_from_stream(self, fp, headers=None, replace=True, cb=None, num_cb=10, policy=None, reduced_redundancy=False, query_args=None, size=None): DCNL 'Store an object using the name of the Key object as the key in DCNL cloud and the contents of the data stream pointed to by \'fp\' as DCNL the contents. DCNL The stream object is not seekable and total size is not known. DCNL This has the implication that we can\'t specify the DCNL Content-Size and Content-MD5 in the header. So for huge DCNL uploads, the delay in calculating MD5 is avoided but with a DCNL penalty of inability to verify the integrity of the uploaded DCNL data. DCNL :type fp: file DCNL :param fp: the file whose contents are to be uploaded DCNL :type headers: dict DCNL :param headers: additional HTTP headers to be sent with the DCNL PUT request. DCNL :type replace: bool DCNL :param replace: If this parameter is False, the method will first check DCNL to see if an object exists in the bucket with the same key. If it DCNL does, it won\'t overwrite it. The default value is True which will DCNL overwrite the object. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload. The callback should accept two integer DCNL parameters, the first representing the number of bytes that have DCNL been successfully transmitted to GS and the second representing the DCNL total number of bytes that need to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter, this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type policy: :class:`boto.gs.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the new key DCNL in GS. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will set the storage DCNL class of the new Key to be REDUCED_REDUNDANCY. The Reduced DCNL Redundancy Storage (RRS) feature of S3, provides lower DCNL redundancy at lower storage cost. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read from DCNL the file pointer (fp). This is useful when uploading a DCNL file in multiple parts where you are splitting the file up DCNL into different ranges to be uploaded. If not specified, DCNL the default behaviour is to read all bytes from the file DCNL pointer. Less bytes may be available.'
def set_contents_from_file(self, fp, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, reduced_redundancy=False, query_args=None, encrypt_key=False, size=None, rewind=False): DCNL 'Store an object in S3 using the name of the Key object as the DCNL key in S3 and the contents of the file pointed to by \'fp\' as the DCNL contents. The data is read from \'fp\' from its current position until DCNL \'size\' bytes have been read or EOF. DCNL :type fp: file DCNL :param fp: the file whose contents to upload DCNL :type headers: dict DCNL :param headers: Additional HTTP headers that will be sent with DCNL the PUT request. DCNL :type replace: bool DCNL :param replace: If this parameter is False, the method will DCNL first check to see if an object exists in the bucket with DCNL the same key.  If it does, it won\'t overwrite it.  The DCNL default value is True which will overwrite the object. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in S3. DCNL :type md5: A tuple containing the hexdigest version of the MD5 DCNL checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the second DCNL element.  This is the same format returned by the DCNL compute_md5 method. DCNL :param md5: If you need to compute the MD5 for any reason DCNL prior to upload, it\'s silly to have to do it twice so this DCNL param, if present, will be used as the MD5 values of the DCNL file.  Otherwise, the checksum will be computed. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will set the storage DCNL class of the new Key to be REDUCED_REDUNDANCY. The Reduced DCNL Redundancy Storage (RRS) feature of S3, provides lower DCNL redundancy at lower storage cost. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read DCNL from the file pointer (fp). This is useful when uploading DCNL a file in multiple parts where you are splitting the file DCNL up into different ranges to be uploaded. If not specified, DCNL the default behaviour is to read all bytes from the file DCNL pointer. Less bytes may be available. DCNL :type rewind: bool DCNL :param rewind: (optional) If True, the file pointer (fp) will DCNL be rewound to the start before any bytes are read from DCNL it. The default behaviour is False which reads from the DCNL current position of the file pointer (fp). DCNL :rtype: int DCNL :return: The number of bytes written to the key.'
def set_contents_from_filename(self, filename, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, reduced_redundancy=False, encrypt_key=False): DCNL 'Store an object in S3 using the name of the Key object as the DCNL key in S3 and the contents of the file named by \'filename\'. DCNL See set_contents_from_file method for details about the DCNL parameters. DCNL :type filename: string DCNL :param filename: The name of the file that you want to put onto S3 DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the DCNL request to AWS. DCNL :type replace: bool DCNL :param replace: If True, replaces the contents of the file DCNL if it already exists. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in S3. DCNL :type md5: A tuple containing the hexdigest version of the MD5 DCNL checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the second DCNL element.  This is the same format returned by the DCNL compute_md5 method. DCNL :param md5: If you need to compute the MD5 for any reason DCNL prior to upload, it\'s silly to have to do it twice so this DCNL param, if present, will be used as the MD5 values of the DCNL file.  Otherwise, the checksum will be computed. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will set the storage DCNL class of the new Key to be REDUCED_REDUNDANCY. The Reduced DCNL Redundancy Storage (RRS) feature of S3, provides lower DCNL redundancy at lower storage cost.  :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object DCNL will be encrypted on the server-side by S3 and will be DCNL stored in an encrypted form while at rest in S3. DCNL :rtype: int DCNL :return: The number of bytes written to the key.'
def set_contents_from_string(self, string_data, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, reduced_redundancy=False, encrypt_key=False): DCNL 'Store an object in S3 using the name of the Key object as the DCNL key in S3 and the string \'s\' as the contents. DCNL See set_contents_from_file method for details about the DCNL parameters. DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the DCNL request to AWS. DCNL :type replace: bool DCNL :param replace: If True, replaces the contents of the file if DCNL it already exists. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL num_cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in S3. DCNL :type md5: A tuple containing the hexdigest version of the MD5 DCNL checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the second DCNL element.  This is the same format returned by the DCNL compute_md5 method. DCNL :param md5: If you need to compute the MD5 for any reason DCNL prior to upload, it\'s silly to have to do it twice so this DCNL param, if present, will be used as the MD5 values of the DCNL file.  Otherwise, the checksum will be computed. DCNL :type reduced_redundancy: bool DCNL :param reduced_redundancy: If True, this will set the storage DCNL class of the new Key to be REDUCED_REDUNDANCY. The Reduced DCNL Redundancy Storage (RRS) feature of S3, provides lower DCNL redundancy at lower storage cost. DCNL :type encrypt_key: bool DCNL :param encrypt_key: If True, the new copy of the object will DCNL be encrypted on the server-side by S3 and will be stored DCNL in an encrypted form while at rest in S3.'
def get_file(self, fp, headers=None, cb=None, num_cb=10, torrent=False, version_id=None, override_num_retries=None, response_headers=None): DCNL 'Retrieves a file from an S3 Key DCNL :type fp: file DCNL :param fp: File pointer to put the data into DCNL :type headers: string DCNL :param: headers to send when retrieving the files DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: Flag for whether to get a torrent for the file DCNL :type override_num_retries: int DCNL :param override_num_retries: If not None will override configured DCNL num_retries parameter for underlying GET. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type version_id: str DCNL :param version_id: The ID of a particular version of the object. DCNL If this parameter is not supplied but the Key object has DCNL a ``version_id`` attribute, that value will be used when DCNL retrieving the object.  You can set the Key object\'s DCNL ``version_id`` attribute to None to always grab the latest DCNL version from a version-enabled bucket.'
def get_torrent_file(self, fp, headers=None, cb=None, num_cb=10): DCNL 'Get a torrent file (see to get_file) DCNL :type fp: file DCNL :param fp: The file pointer of where to put the torrent DCNL :type headers: dict DCNL :param headers: Headers to be passed DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer.'
def get_contents_to_file(self, fp, headers=None, cb=None, num_cb=10, torrent=False, version_id=None, res_download_handler=None, response_headers=None): DCNL 'Retrieve an object from S3 using the name of the Key object as the DCNL key in S3.  Write the contents of the object to the file pointed DCNL to by \'fp\'. DCNL :type fp: File -like object DCNL :param fp: DCNL :type headers: dict DCNL :param headers: additional HTTP headers that will be sent with DCNL the GET request. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: If True, returns the contents of a torrent DCNL file as a string. DCNL :type res_upload_handler: ResumableDownloadHandler DCNL :param res_download_handler: If provided, this handler will DCNL perform the download. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type version_id: str DCNL :param version_id: The ID of a particular version of the object. DCNL If this parameter is not supplied but the Key object has DCNL a ``version_id`` attribute, that value will be used when DCNL retrieving the object.  You can set the Key object\'s DCNL ``version_id`` attribute to None to always grab the latest DCNL version from a version-enabled bucket.'
def get_contents_to_filename(self, filename, headers=None, cb=None, num_cb=10, torrent=False, version_id=None, res_download_handler=None, response_headers=None): DCNL 'Retrieve an object from S3 using the name of the Key object as the DCNL key in S3.  Store contents of the object to a file named by \'filename\'. DCNL See get_contents_to_file method for details about the DCNL parameters. DCNL :type filename: string DCNL :param filename: The filename of where to put the file contents DCNL :type headers: dict DCNL :param headers: Any additional headers to send in the request DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: If True, returns the contents of a torrent file DCNL as a string. DCNL :type res_upload_handler: ResumableDownloadHandler DCNL :param res_download_handler: If provided, this handler will DCNL perform the download. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type version_id: str DCNL :param version_id: The ID of a particular version of the object. DCNL If this parameter is not supplied but the Key object has DCNL a ``version_id`` attribute, that value will be used when DCNL retrieving the object.  You can set the Key object\'s DCNL ``version_id`` attribute to None to always grab the latest DCNL version from a version-enabled bucket.'
def get_contents_as_string(self, headers=None, cb=None, num_cb=10, torrent=False, version_id=None, response_headers=None, encoding=None): DCNL 'Retrieve an object from S3 using the name of the Key object as the DCNL key in S3.  Return the contents of the object as a string. DCNL See get_contents_to_file method for details about the DCNL parameters. DCNL :type headers: dict DCNL :param headers: Any additional headers to send in the request DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload.  The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to S3 and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: If True, returns the contents of a torrent file DCNL as a string. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details. DCNL :type version_id: str DCNL :param version_id: The ID of a particular version of the object. DCNL If this parameter is not supplied but the Key object has DCNL a ``version_id`` attribute, that value will be used when DCNL retrieving the object.  You can set the Key object\'s DCNL ``version_id`` attribute to None to always grab the latest DCNL version from a version-enabled bucket. DCNL :type encoding: str DCNL :param encoding: The text encoding to use, such as ``utf-8`` DCNL or ``iso-8859-1``. If set, then a string will be returned. DCNL Defaults to ``None`` and returns bytes. DCNL :rtype: bytes or str DCNL :returns: The contents of the file as bytes or a string'
def add_email_grant(self, permission, email_address, headers=None): DCNL 'Convenience method that provides a quick way to add an email grant DCNL to a key. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL DCNL and then PUT\'s the new ACL back to S3. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL (READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL). DCNL :type email_address: string DCNL :param email_address: The email address associated with the AWS DCNL account your are granting the permission to. DCNL :type recursive: boolean DCNL :param recursive: A boolean value to controls whether the DCNL command will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a True DCNL value, the call will iterate through all keys in the DCNL bucket and apply the same grant to each key.  CAUTION: If DCNL you have a lot of keys, this could take a long time!'
def add_user_grant(self, permission, user_id, headers=None, display_name=None): DCNL 'Convenience method that provides a quick way to add a canonical DCNL user grant to a key.  This method retrieves the current ACL, DCNL creates a new grant based on the parameters passed in, adds that DCNL grant to the ACL and then PUT\'s the new ACL back to S3. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL (READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL). DCNL :type user_id: string DCNL :param user_id: The canonical user id associated with the AWS DCNL account your are granting the permission to. DCNL :type display_name: string DCNL :param display_name: An option string containing the user\'s DCNL Display Name.  Only required on Walrus.'
def _get_remote_metadata(self, headers=None): DCNL 'Extracts metadata from existing URI into a dict, so we can DCNL overwrite/delete from it to form the new set of metadata to apply to a DCNL key.'
def restore(self, days, headers=None): DCNL 'Restore an object from an archive. DCNL :type days: int DCNL :param days: The lifetime of the restored object (must DCNL be at least 1 day).  If the object is already restored DCNL then this parameter can be used to readjust the lifetime DCNL of the restored object.  In this case, the days DCNL param is with respect to the initial time of the request. DCNL If the object has not been restored, this param is with DCNL respect to the completion time of the request.'
def to_xml(self): DCNL 'Returns a string containing the XML version of the Lifecycle DCNL configuration as defined by S3.'
def add_rule(self, allowed_method, allowed_origin, id=None, allowed_header=None, max_age_seconds=None, expose_header=None): DCNL 'Add a rule to this CORS configuration.  This only adds DCNL the rule to the local copy.  To install the new rule(s) on DCNL the bucket, you need to pass this CORS config object DCNL to the set_cors method of the Bucket object. DCNL :type allowed_methods: list of str DCNL :param allowed_methods: An HTTP method that you want to allow the DCNL origin to execute.  Each CORSRule must identify at least one DCNL origin and one method. Valid values are: DCNL GET|PUT|HEAD|POST|DELETE DCNL :type allowed_origin: list of str DCNL :param allowed_origin: An origin that you want to allow cross-domain DCNL requests from. This can contain at most one * wild character. DCNL Each CORSRule must identify at least one origin and one method. DCNL The origin value can include at most one \'*\' wild character. DCNL For example, "http://*.example.com". You can also specify DCNL only * as the origin value allowing all origins DCNL cross-domain access. DCNL :type id: str DCNL :param id: A unique identifier for the rule.  The ID value can be DCNL up to 255 characters long.  The IDs help you find a rule in DCNL the configuration. DCNL :type allowed_header: list of str DCNL :param allowed_header: Specifies which headers are allowed in a DCNL pre-flight OPTIONS request via the DCNL Access-Control-Request-Headers header. Each header name DCNL specified in the Access-Control-Request-Headers header must DCNL have a corresponding entry in the rule. Amazon S3 will send DCNL only the allowed headers in a response that were requested. DCNL This can contain at most one * wild character. DCNL :type max_age_seconds: int DCNL :param max_age_seconds: The time in seconds that your browser is to DCNL cache the preflight response for the specified resource. DCNL :type expose_header: list of str DCNL :param expose_header: One or more headers in the response that you DCNL want customers to be able to access from their applications DCNL (for example, from a JavaScript XMLHttpRequest object).  You DCNL add one ExposeHeader element in the rule for each header.'
def get_all_parts(self, max_parts=None, part_number_marker=None, encoding_type=None): DCNL 'Return the uploaded parts of this MultiPart Upload.  This is DCNL a lower-level method that requires you to manually page through DCNL results.  To simplify this process, you can just use the DCNL object itself as an iterator and it will automatically handle DCNL all of the paging with S3.'
def upload_part_from_file(self, fp, part_num, headers=None, replace=True, cb=None, num_cb=10, md5=None, size=None): DCNL 'Upload another part of this MultiPart Upload. DCNL .. note:: DCNL After you initiate multipart upload and upload one or more parts, DCNL you must either complete or abort multipart upload in order to stop DCNL getting charged for storage of the uploaded parts. Only after you DCNL either complete or abort multipart upload, Amazon S3 frees up the DCNL parts storage and stops charging you for the parts storage. DCNL :type fp: file DCNL :param fp: The file object you want to upload. DCNL :type part_num: int DCNL :param part_num: The number of this part. DCNL The other parameters are exactly as defined for the DCNL :class:`boto.s3.key.Key` set_contents_from_file method. DCNL :rtype: :class:`boto.s3.key.Key` or subclass DCNL :returns: The uploaded part containing the etag.'
def copy_part_from_key(self, src_bucket_name, src_key_name, part_num, start=None, end=None, src_version_id=None, headers=None): DCNL 'Copy another part of this MultiPart Upload. DCNL :type src_bucket_name: string DCNL :param src_bucket_name: Name of the bucket containing the source key DCNL :type src_key_name: string DCNL :param src_key_name: Name of the source key DCNL :type part_num: int DCNL :param part_num: The number of this part. DCNL :type start: int DCNL :param start: Zero-based byte offset to start copying from DCNL :type end: int DCNL :param end: Zero-based byte offset to copy to DCNL :type src_version_id: string DCNL :param src_version_id: version_id of source object to copy from DCNL :type headers: dict DCNL :param headers: Any headers to pass along in the request'
def complete_upload(self): DCNL 'Complete the MultiPart Upload operation.  This method should DCNL be called when all parts of the file have been successfully DCNL uploaded to S3. DCNL :rtype: :class:`boto.s3.multipart.CompletedMultiPartUpload` DCNL :returns: An object representing the completed upload.'
def cancel_upload(self): DCNL 'Cancels a MultiPart Upload operation.  The storage consumed by DCNL any previously uploaded parts will be freed. However, if any DCNL part uploads are currently in progress, those part uploads DCNL might or might not succeed. As a result, it might be necessary DCNL to abort a given multipart upload multiple times in order to DCNL completely free all storage consumed by all parts.'
def add_event_source(self, event_source, function_name, role, batch_size=None, parameters=None): DCNL 'Identifies an Amazon Kinesis stream as the event source for an DCNL AWS Lambda function. AWS Lambda invokes the specified function DCNL when records are posted to the stream. DCNL This is the pull model, where AWS Lambda invokes the function. DCNL For more information, go to `AWS LambdaL How it Works`_ in the DCNL AWS Lambda Developer Guide. DCNL This association between an Amazon Kinesis stream and an AWS DCNL Lambda function is called the event source mapping. You DCNL provide the configuration information (for example, which DCNL stream to read from and which AWS Lambda function to invoke) DCNL for the event source mapping in the request body. DCNL This operation requires permission for the `iam:PassRole` DCNL action for the IAM role. It also requires permission for the DCNL `lambda:AddEventSource` action. DCNL :type event_source: string DCNL :param event_source: The Amazon Resource Name (ARN) of the Amazon DCNL Kinesis stream that is the event source. Any record added to this DCNL stream causes AWS Lambda to invoke your Lambda function. AWS Lambda DCNL POSTs the Amazon Kinesis event, containing records, to your Lambda DCNL function as JSON. DCNL :type function_name: string DCNL :param function_name: The Lambda function to invoke when AWS Lambda DCNL detects an event on the stream. DCNL :type role: string DCNL :param role: The ARN of the IAM role (invocation role) that AWS Lambda DCNL can assume to read from the stream and invoke the function. DCNL :type batch_size: integer DCNL :param batch_size: The largest number of records that AWS Lambda will DCNL give to your function in a single event. The default is 100 DCNL records. DCNL :type parameters: map DCNL :param parameters: A map (key-value pairs) defining the configuration DCNL for AWS Lambda to use when reading the event source. Currently, AWS DCNL Lambda supports only the `InitialPositionInStream` key. The valid DCNL values are: "TRIM_HORIZON" and "LATEST". The default value is DCNL "TRIM_HORIZON". For more information, go to `ShardIteratorType`_ in DCNL the Amazon Kinesis Service API Reference.'
def delete_function(self, function_name): DCNL 'Deletes the specified Lambda function code and configuration. DCNL This operation requires permission for the DCNL `lambda:DeleteFunction` action. DCNL :type function_name: string DCNL :param function_name: The Lambda function to delete.'
def get_event_source(self, uuid): DCNL 'Returns configuration information for the specified event DCNL source mapping (see AddEventSource). DCNL This operation requires permission for the DCNL `lambda:GetEventSource` action. DCNL :type uuid: string DCNL :param uuid: The AWS Lambda assigned ID of the event source mapping.'
def get_function(self, function_name): DCNL 'Returns the configuration information of the Lambda function DCNL and a presigned URL link to the .zip file you uploaded with DCNL UploadFunction so you can download the .zip file. Note that DCNL the URL is valid for up to 10 minutes. The configuration DCNL information is the same information you provided as parameters DCNL when uploading the function. DCNL This operation requires permission for the DCNL `lambda:GetFunction` action. DCNL :type function_name: string DCNL :param function_name: The Lambda function name.'
def get_function_configuration(self, function_name): DCNL 'Returns the configuration information of the Lambda function. DCNL This the same information you provided as parameters when DCNL uploading the function by using UploadFunction. DCNL This operation requires permission for the DCNL `lambda:GetFunctionConfiguration` operation. DCNL :type function_name: string DCNL :param function_name: The name of the Lambda function for which you DCNL want to retrieve the configuration information.'
def invoke_async(self, function_name, invoke_args): DCNL 'Submits an invocation request to AWS Lambda. Upon receiving DCNL the request, Lambda executes the specified function DCNL asynchronously. To see the logs generated by the Lambda DCNL function execution, see the CloudWatch logs console. DCNL This operation requires permission for the DCNL `lambda:InvokeAsync` action. DCNL :type function_name: string DCNL :param function_name: The Lambda function name. DCNL :type invoke_args: blob DCNL :param invoke_args: JSON that you want to provide to your Lambda DCNL function as input.'
def list_event_sources(self, event_source_arn=None, function_name=None, marker=None, max_items=None): DCNL 'Returns a list of event source mappings. For each mapping, the DCNL API returns configuration information (see AddEventSource). DCNL You can optionally specify filters to retrieve specific event DCNL source mappings. DCNL This operation requires permission for the DCNL `lambda:ListEventSources` action. DCNL :type event_source_arn: string DCNL :param event_source_arn: The Amazon Resource Name (ARN) of the Amazon DCNL Kinesis stream. DCNL :type function_name: string DCNL :param function_name: The name of the AWS Lambda function. DCNL :type marker: string DCNL :param marker: Optional string. An opaque pagination token returned DCNL from a previous `ListEventSources` operation. If present, specifies DCNL to continue the list from where the returning call left off. DCNL :type max_items: integer DCNL :param max_items: Optional integer. Specifies the maximum number of DCNL event sources to return in response. This value must be greater DCNL than 0.'
def list_functions(self, marker=None, max_items=None): DCNL 'Returns a list of your Lambda functions. For each function, DCNL the response includes the function configuration information. DCNL You must use GetFunction to retrieve the code for your DCNL function. DCNL This operation requires permission for the DCNL `lambda:ListFunctions` action. DCNL :type marker: string DCNL :param marker: Optional string. An opaque pagination token returned DCNL from a previous `ListFunctions` operation. If present, indicates DCNL where to continue the listing. DCNL :type max_items: integer DCNL :param max_items: Optional integer. Specifies the maximum number of AWS DCNL Lambda functions to return in response. This parameter value must DCNL be greater than 0.'
def remove_event_source(self, uuid): DCNL 'Removes an event source mapping. This means AWS Lambda will no DCNL longer invoke the function for events in the associated DCNL source. DCNL This operation requires permission for the DCNL `lambda:RemoveEventSource` action. DCNL :type uuid: string DCNL :param uuid: The event source mapping ID.'
def update_function_configuration(self, function_name, role=None, handler=None, description=None, timeout=None, memory_size=None): DCNL 'Updates the configuration parameters for the specified Lambda DCNL function by using the values provided in the request. You DCNL provide only the parameters you want to change. This operation DCNL must only be used on an existing Lambda function and cannot be DCNL used to update the function\'s code. DCNL This operation requires permission for the DCNL `lambda:UpdateFunctionConfiguration` action. DCNL :type function_name: string DCNL :param function_name: The name of the Lambda function. DCNL :type role: string DCNL :param role: The Amazon Resource Name (ARN) of the IAM role that Lambda DCNL will assume when it executes your function. DCNL :type handler: string DCNL :param handler: The function that Lambda calls to begin executing your DCNL function. For Node.js, it is the module-name.export value in your DCNL function. DCNL :type description: string DCNL :param description: A short user-defined function description. Lambda DCNL does not use this value. Assign a meaningful description as you see DCNL fit. DCNL :type timeout: integer DCNL :param timeout: The function execution time at which Lambda should DCNL terminate the function. Because the execution time has cost DCNL implications, we recommend you set this value based on your DCNL expected execution time. The default is 3 seconds. DCNL :type memory_size: integer DCNL :param memory_size: The amount of memory, in MB, your Lambda function DCNL is given. Lambda uses this memory size to infer the amount of CPU DCNL allocated to your function. Your function use-case determines your DCNL CPU and memory requirements. For example, a database operation DCNL might need less memory compared to an image processing function. DCNL The default value is 128 MB. The value must be a multiple of 64 MB.'
def upload_function(self, function_name, function_zip, runtime, role, handler, mode, description=None, timeout=None, memory_size=None): DCNL 'Creates a new Lambda function or updates an existing function. DCNL The function metadata is created from the request parameters, DCNL and the code for the function is provided by a .zip file in DCNL the request body. If the function name already exists, the DCNL existing Lambda function is updated with the new code and DCNL metadata. DCNL This operation requires permission for the DCNL `lambda:UploadFunction` action. DCNL :type function_name: string DCNL :param function_name: The name you want to assign to the function you DCNL are uploading. The function names appear in the console and are DCNL returned in the ListFunctions API. Function names are used to DCNL specify functions to other AWS Lambda APIs, such as InvokeAsync. DCNL :type function_zip: blob DCNL :param function_zip: A .zip file containing your packaged source code. DCNL For more information about creating a .zip file, go to `AWS LambdaL DCNL How it Works`_ in the AWS Lambda Developer Guide. DCNL :type runtime: string DCNL :param runtime: The runtime environment for the Lambda function you are DCNL uploading. Currently, Lambda supports only "nodejs" as the runtime. DCNL :type role: string DCNL :param role: The Amazon Resource Name (ARN) of the IAM role that Lambda DCNL assumes when it executes your function to access any other Amazon DCNL Web Services (AWS) resources. DCNL :type handler: string DCNL :param handler: The function that Lambda calls to begin execution. For DCNL Node.js, it is the module-name . export value in your function. DCNL :type mode: string DCNL :param mode: How the Lambda function will be invoked. Lambda supports DCNL only the "event" mode. DCNL :type description: string DCNL :param description: A short, user-defined function description. Lambda DCNL does not use this value. Assign a meaningful description as you see DCNL fit. DCNL :type timeout: integer DCNL :param timeout: The function execution time at which Lambda should DCNL terminate the function. Because the execution time has cost DCNL implications, we recommend you set this value based on your DCNL expected execution time. The default is 3 seconds. DCNL :type memory_size: integer DCNL :param memory_size: The amount of memory, in MB, your Lambda function DCNL is given. Lambda uses this memory size to infer the amount of CPU DCNL allocated to your function. Your function use-case determines your DCNL CPU and memory requirements. For example, database operation might DCNL need less memory compared to image processing function. The default DCNL value is 128 MB. The value must be a multiple of 64 MB.'
def load_credential_file(self, path): DCNL 'Load a credential file as is setup like the Java utilities'
def save_option(self, path, section, option, value): DCNL 'Write the specified Section.Option to the config file specified by path. DCNL Replace any previous value.  If the path doesn\'t exist, create it. DCNL Also add the option the the in-memory config.'
def add_cron(self, name, minute, hour, mday, month, wday, who, command, env=None): DCNL 'Add an entry to the system crontab.'
def add_env(self, key, value): DCNL 'Add an environemnt variable'
def stop(self, service_name): DCNL 'Stop a service.'
def start(self, service_name): DCNL 'Start a service.'
def install(self): DCNL 'Do whatever is necessary to "install" the package.'
def add_cron(self, name, command, minute='*', hour='*', mday='*', month='*', wday='*', who='root', env=None): DCNL 'Write a file to /etc/cron.d to schedule a command DCNL env is a dict containing environment variables you want to set in the file DCNL name will be used as the name of the file'
def add_init_script(self, file, name): DCNL 'Add this file to the init.d directory'
def add_env(self, key, value): DCNL 'Add an environemnt variable DCNL For Ubuntu, the best place is /etc/environment.  Values placed here do DCNL not need to be exported.'
def create_user(self, user): DCNL 'Create a user on the local system'
def install(self): DCNL 'This is the only method you need to override'
def validateStartTag(self, tag, parent): DCNL 'Verify parent of the start tag.'
def validateEndTag(self, tag): DCNL 'Verify end tag against the start tag.'
def validate(self): DCNL 'Validate the rule.'
def to_xml(self): DCNL 'Convert the rule into XML string representation.'
def to_xml(self): DCNL 'Convert LifecycleConfig object into XML string representation.'
def add_rule(self, action, action_text, conditions): DCNL 'Add a rule to this Lifecycle configuration.  This only adds the rule to DCNL the local copy.  To install the new rule(s) on the bucket, you need to DCNL pass this Lifecycle config object to the configure_lifecycle method of DCNL the Bucket object. DCNL :type action: str DCNL :param action: Action to be taken. DCNL :type action_text: str DCNL :param action_text: Value for the specified action. DCNL :type conditions: dict DCNL :param conditions: A dictionary of conditions that specify when the DCNL action should be taken. Each item in the dictionary represents the name DCNL and value of a condition.'
def get_key(self, key_name, headers=None, version_id=None, response_headers=None, generation=None): DCNL 'Returns a Key instance for an object in this bucket. DCNL Note that this method uses a HEAD request to check for the existence of DCNL the key. DCNL :type key_name: string DCNL :param key_name: The name of the key to retrieve DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/06N3b for details. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type generation: int DCNL :param generation: A specific generation number to fetch the key at. If DCNL not specified, the latest generation is fetched. DCNL :rtype: :class:`boto.gs.key.Key` DCNL :returns: A Key object from this bucket.'
def copy_key(self, new_key_name, src_bucket_name, src_key_name, metadata=None, src_version_id=None, storage_class='STANDARD', preserve_acl=False, encrypt_key=False, headers=None, query_args=None, src_generation=None): DCNL 'Create a new key in the bucket by copying an existing key. DCNL :type new_key_name: string DCNL :param new_key_name: The name of the new key DCNL :type src_bucket_name: string DCNL :param src_bucket_name: The name of the source bucket DCNL :type src_key_name: string DCNL :param src_key_name: The name of the source key DCNL :type src_generation: int DCNL :param src_generation: The generation number of the source key to copy. DCNL If not specified, the latest generation is copied. DCNL :type metadata: dict DCNL :param metadata: Metadata to be associated with new key.  If DCNL metadata is supplied, it will replace the metadata of the DCNL source key being copied.  If no metadata is supplied, the DCNL source key\'s metadata will be copied to the new key. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type storage_class: string DCNL :param storage_class: The storage class of the new key.  By DCNL default, the new key will use the standard storage class. DCNL Possible values are: STANDARD | DURABLE_REDUCED_AVAILABILITY DCNL :type preserve_acl: bool DCNL :param preserve_acl: If True, the ACL from the source key will DCNL be copied to the destination key.  If False, the DCNL destination key will have the default ACL.  Note that DCNL preserving the ACL in the new key object will require two DCNL additional API calls to GCS, one to retrieve the current DCNL ACL and one to set that ACL on the new object.  If you DCNL don\'t care about the ACL (or if you have a default ACL set DCNL on the bucket), a value of False will be significantly more DCNL efficient. DCNL :type encrypt_key: bool DCNL :param encrypt_key: Included for compatibility with S3. This argument is DCNL ignored. DCNL :type headers: dict DCNL :param headers: A dictionary of header name/value pairs. DCNL :type query_args: string DCNL :param query_args: A string of additional querystring arguments DCNL to append to the request DCNL :rtype: :class:`boto.gs.key.Key` DCNL :returns: An instance of the newly created key object'
def list_versions(self, prefix='', delimiter='', marker='', generation_marker='', headers=None): DCNL 'List versioned objects within a bucket.  This returns an DCNL instance of an VersionedBucketListResultSet that automatically DCNL handles all of the result paging, etc. from GCS.  You just need DCNL to keep iterating until there are no more results.  Called DCNL with no arguments, this will return an iterator object across DCNL all keys within the bucket. DCNL :type prefix: string DCNL :param prefix: allows you to limit the listing to a particular DCNL prefix.  For example, if you call the method with DCNL prefix=\'/foo/\' then the iterator will only cycle through DCNL the keys that begin with the string \'/foo/\'. DCNL :type delimiter: string DCNL :param delimiter: can be used in conjunction with the prefix DCNL to allow you to organize and browse your keys DCNL hierarchically. See: DCNL https://developers.google.com/storage/docs/reference-headers#delimiter DCNL for more details. DCNL :type marker: string DCNL :param marker: The "marker" of where you are in the result set DCNL :type generation_marker: string DCNL :param generation_marker: The "generation marker" of where you are in DCNL the result set. DCNL :type headers: dict DCNL :param headers: A dictionary of header name/value pairs. DCNL :rtype: DCNL :class:`boto.gs.bucketlistresultset.VersionedBucketListResultSet` DCNL :return: an instance of a BucketListResultSet that handles paging, etc.'
def validate_get_all_versions_params(self, params): DCNL 'See documentation in boto/s3/bucket.py.'
def delete_key(self, key_name, headers=None, version_id=None, mfa_token=None, generation=None): DCNL 'Deletes a key from the bucket. DCNL :type key_name: string DCNL :param key_name: The key name to delete DCNL :type headers: dict DCNL :param headers: A dictionary of header name/value pairs. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type mfa_token: tuple or list of strings DCNL :param mfa_token: Unused in this subclass. DCNL :type generation: int DCNL :param generation: The generation number of the key to delete. If not DCNL specified, the latest generation number will be deleted. DCNL :rtype: :class:`boto.gs.key.Key` DCNL :returns: A key object holding information on what was DCNL deleted.'
def set_acl(self, acl_or_str, key_name='', headers=None, version_id=None, generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets or changes a bucket\'s or key\'s ACL. DCNL :type acl_or_str: string or :class:`boto.gs.acl.ACL` DCNL :param acl_or_str: A canned ACL string (see DCNL :data:`~.gs.acl.CannedACLStrings`) or an ACL object. DCNL :type key_name: string DCNL :param key_name: A key name within the bucket to set the ACL for. If not DCNL specified, the ACL for the bucket will be set. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def set_def_acl(self, acl_or_str, headers=None): DCNL 'Sets or changes a bucket\'s default ACL. DCNL :type acl_or_str: string or :class:`boto.gs.acl.ACL` DCNL :param acl_or_str: A canned ACL string (see DCNL :data:`~.gs.acl.CannedACLStrings`) or an ACL object. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request.'
def _get_xml_acl_helper(self, key_name, headers, query_args): DCNL 'Provides common functionality for get_xml_acl and _get_acl_helper.'
def _get_acl_helper(self, key_name, headers, query_args): DCNL 'Provides common functionality for get_acl and get_def_acl.'
def get_acl(self, key_name='', headers=None, version_id=None, generation=None): DCNL 'Returns the ACL of the bucket or an object in the bucket. DCNL :param str key_name: The name of the object to get the ACL for. If not DCNL specified, the ACL for the bucket will be returned. DCNL :param dict headers: Additional headers to set during the request. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :param int generation: If specified, gets the ACL for a specific DCNL generation of a versioned object. If not specified, the current DCNL version is returned. This parameter is only valid when retrieving DCNL the ACL of an object, not a bucket. DCNL :rtype: :class:`.gs.acl.ACL`'
def get_xml_acl(self, key_name='', headers=None, version_id=None, generation=None): DCNL 'Returns the ACL string of the bucket or an object in the bucket. DCNL :param str key_name: The name of the object to get the ACL for. If not DCNL specified, the ACL for the bucket will be returned. DCNL :param dict headers: Additional headers to set during the request. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :param int generation: If specified, gets the ACL for a specific DCNL generation of a versioned object. If not specified, the current DCNL version is returned. This parameter is only valid when retrieving DCNL the ACL of an object, not a bucket. DCNL :rtype: str'
def get_def_acl(self, headers=None): DCNL 'Returns the bucket\'s default ACL. DCNL :param dict headers: Additional headers to set during the request. DCNL :rtype: :class:`.gs.acl.ACL`'
def _set_acl_helper(self, acl_or_str, key_name, headers, query_args, generation, if_generation, if_metageneration, canned=False): DCNL 'Provides common functionality for set_acl, set_xml_acl, DCNL set_canned_acl, set_def_acl, set_def_xml_acl, and DCNL set_def_canned_acl().'
def set_xml_acl(self, acl_str, key_name='', headers=None, version_id=None, query_args='acl', generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets a bucket\'s or objects\'s ACL to an XML string. DCNL :type acl_str: string DCNL :param acl_str: A string containing the ACL XML. DCNL :type key_name: string DCNL :param key_name: A key name within the bucket to set the ACL for. If not DCNL specified, the ACL for the bucket will be set. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type query_args: str DCNL :param query_args: The query parameters to pass with the request. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def set_canned_acl(self, acl_str, key_name='', headers=None, version_id=None, generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets a bucket\'s or objects\'s ACL using a predefined (canned) value. DCNL :type acl_str: string DCNL :param acl_str: A canned ACL string. See DCNL :data:`~.gs.acl.CannedACLStrings`. DCNL :type key_name: string DCNL :param key_name: A key name within the bucket to set the ACL for. If not DCNL specified, the ACL for the bucket will be set. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def set_def_canned_acl(self, acl_str, headers=None): DCNL 'Sets a bucket\'s default ACL using a predefined (canned) value. DCNL :type acl_str: string DCNL :param acl_str: A canned ACL string. See DCNL :data:`~.gs.acl.CannedACLStrings`. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request.'
def set_def_xml_acl(self, acl_str, headers=None): DCNL 'Sets a bucket\'s default ACL to an XML string. DCNL :type acl_str: string DCNL :param acl_str: A string containing the ACL XML. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request.'
def get_cors(self, headers=None): DCNL 'Returns a bucket\'s CORS XML document. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: :class:`~.cors.Cors`'
def set_cors(self, cors, headers=None): DCNL 'Sets a bucket\'s CORS XML document. DCNL :param str cors: A string containing the CORS XML. DCNL :param dict headers: Additional headers to send with the request.'
def get_storage_class(self): DCNL 'Returns the StorageClass for the bucket. DCNL :rtype: str DCNL :return: The StorageClass for the bucket.'
def set_storage_class(self, storage_class, headers=None): DCNL 'Sets a bucket\'s storage class. DCNL :param str storage_class: A string containing the storage class. DCNL :param dict headers: Additional headers to send with the request.'
def add_email_grant(self, permission, email_address, recursive=False, headers=None): DCNL 'Convenience method that provides a quick way to add an email grant DCNL to a bucket. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL DCNL and then PUT\'s the new ACL back to GCS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL (READ, WRITE, FULL_CONTROL). DCNL :type email_address: string DCNL :param email_address: The email address associated with the GS DCNL account your are granting the permission to. DCNL :type recursive: bool DCNL :param recursive: A boolean value to controls whether the call DCNL will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a DCNL True value, the call will iterate through all keys DCNL in the bucket and apply the same grant to each key. DCNL CAUTION: If you have a lot of keys, this could take DCNL a long time!'
def add_user_grant(self, permission, user_id, recursive=False, headers=None): DCNL 'Convenience method that provides a quick way to add a canonical user DCNL grant to a bucket. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL and DCNL then PUTs the new ACL back to GCS. DCNL :type permission: string DCNL :param permission:  The permission being granted.  Should be one of: DCNL (READ|WRITE|FULL_CONTROL) DCNL :type user_id: string DCNL :param user_id:     The canonical user id associated with the GS account DCNL you are granting the permission to. DCNL :type recursive: bool DCNL :param recursive: A boolean value to controls whether the call DCNL will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a DCNL True value, the call will iterate through all keys DCNL in the bucket and apply the same grant to each key. DCNL CAUTION: If you have a lot of keys, this could take DCNL a long time!'
def add_group_email_grant(self, permission, email_address, recursive=False, headers=None): DCNL 'Convenience method that provides a quick way to add an email group DCNL grant to a bucket. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL and DCNL then PUT\'s the new ACL back to GCS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL READ|WRITE|FULL_CONTROL DCNL See http://code.google.com/apis/storage/docs/developer-guide.html#authorization DCNL for more details on permissions. DCNL :type email_address: string DCNL :param email_address: The email address associated with the Google DCNL Group to which you are granting the permission. DCNL :type recursive: bool DCNL :param recursive: A boolean value to controls whether the call DCNL will apply the grant to all keys within the bucket DCNL or not.  The default value is False.  By passing a DCNL True value, the call will iterate through all keys DCNL in the bucket and apply the same grant to each key. DCNL CAUTION: If you have a lot of keys, this could take DCNL a long time!'
def list_grants(self, headers=None): DCNL 'Returns the ACL entries applied to this bucket. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: list containing :class:`~.gs.acl.Entry` objects.'
def disable_logging(self, headers=None): DCNL 'Disable logging on this bucket. DCNL :param dict headers: Additional headers to send with the request.'
def enable_logging(self, target_bucket, target_prefix=None, headers=None): DCNL 'Enable logging on a bucket. DCNL :type target_bucket: bucket or string DCNL :param target_bucket: The bucket to log to. DCNL :type target_prefix: string DCNL :param target_prefix: The prefix which should be prepended to the DCNL generated log files written to the target_bucket. DCNL :param dict headers: Additional headers to send with the request.'
def get_logging_config_with_xml(self, headers=None): DCNL 'Returns the current status of logging configuration on the bucket as DCNL unparsed XML. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: 2-Tuple DCNL :returns: 2-tuple containing: DCNL 1) A dictionary containing the parsed XML response from GCS. The DCNL overall structure is: DCNL * Logging DCNL * LogObjectPrefix: Prefix that is prepended to log objects. DCNL * LogBucket: Target bucket for log objects. DCNL 2) Unparsed XML describing the bucket\'s logging configuration.'
def get_logging_config(self, headers=None): DCNL 'Returns the current status of logging configuration on the bucket. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: dict DCNL :returns: A dictionary containing the parsed XML response from GCS. The DCNL overall structure is: DCNL * Logging DCNL * LogObjectPrefix: Prefix that is prepended to log objects. DCNL * LogBucket: Target bucket for log objects.'
def configure_website(self, main_page_suffix=None, error_key=None, headers=None): DCNL 'Configure this bucket to act as a website DCNL :type main_page_suffix: str DCNL :param main_page_suffix: Suffix that is appended to a request that is DCNL for a "directory" on the website endpoint (e.g. if the suffix is DCNL index.html and you make a request to samplebucket/images/ the data DCNL that is returned will be for the object with the key name DCNL images/index.html). The suffix must not be empty and must not DCNL include a slash character. This parameter is optional and the DCNL property is disabled if excluded. DCNL :type error_key: str DCNL :param error_key: The object key name to use when a 400 error occurs. DCNL This parameter is optional and the property is disabled if excluded. DCNL :param dict headers: Additional headers to send with the request.'
def get_website_configuration(self, headers=None): DCNL 'Returns the current status of website configuration on the bucket. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: dict DCNL :returns: A dictionary containing the parsed XML response from GCS. The DCNL overall structure is: DCNL * WebsiteConfiguration DCNL * MainPageSuffix: suffix that is appended to request that DCNL is for a "directory" on the website endpoint. DCNL * NotFoundPage: name of an object to serve when site visitors DCNL encounter a 404.'
def get_website_configuration_with_xml(self, headers=None): DCNL 'Returns the current status of website configuration on the bucket as DCNL unparsed XML. DCNL :param dict headers: Additional headers to send with the request. DCNL :rtype: 2-Tuple DCNL :returns: 2-tuple containing: DCNL 1) A dictionary containing the parsed XML response from GCS. The DCNL overall structure is: DCNL * WebsiteConfiguration DCNL * MainPageSuffix: suffix that is appended to request that is for DCNL a "directory" on the website endpoint. DCNL * NotFoundPage: name of an object to serve when site visitors DCNL encounter a 404 DCNL 2) Unparsed XML describing the bucket\'s website configuration.'
def delete_website_configuration(self, headers=None): DCNL 'Remove the website configuration from this bucket. DCNL :param dict headers: Additional headers to send with the request.'
def get_versioning_status(self, headers=None): DCNL 'Returns the current status of versioning configuration on the bucket. DCNL :rtype: bool'
def configure_versioning(self, enabled, headers=None): DCNL 'Configure versioning for this bucket. DCNL :param bool enabled: If set to True, enables versioning on this bucket. DCNL If set to False, disables versioning. DCNL :param dict headers: Additional headers to send with the request.'
def get_lifecycle_config(self, headers=None): DCNL 'Returns the current lifecycle configuration on the bucket. DCNL :rtype: :class:`boto.gs.lifecycle.LifecycleConfig` DCNL :returns: A LifecycleConfig object that describes all current DCNL lifecycle rules in effect for the bucket.'
def configure_lifecycle(self, lifecycle_config, headers=None): DCNL 'Configure lifecycle for this bucket. DCNL :type lifecycle_config: :class:`boto.gs.lifecycle.LifecycleConfig` DCNL :param lifecycle_config: The lifecycle configuration you want DCNL to configure for this bucket.'
def __init__(self, tracker_file_name=None, num_retries=None): DCNL 'Constructor. Instantiate once for each uploaded file. DCNL :type tracker_file_name: string DCNL :param tracker_file_name: optional file name to save tracker URI. DCNL If supplied and the current process fails the upload, it can be DCNL retried in a new process. If called with an existing file containing DCNL a valid tracker URI, we\'ll resume the upload from this URI; else DCNL we\'ll start a new resumable upload (and write the URI to this DCNL tracker file). DCNL :type num_retries: int DCNL :param num_retries: the number of times we\'ll re-try a resumable upload DCNL making no progress. (Count resets every time we get progress, so DCNL upload can span many more than this number of retries.)'
def _save_tracker_uri_to_file(self): DCNL 'Saves URI to tracker file if one was passed to constructor.'
def _set_tracker_uri(self, uri): DCNL 'Called when we start a new resumable upload or get a new tracker DCNL URI for the upload. Saves URI and resets upload state. DCNL Raises InvalidUriError if URI is syntactically invalid.'
def get_tracker_uri(self): DCNL 'Returns upload tracker URI, or None if the upload has not yet started.'
def get_upload_id(self): DCNL 'Returns the upload ID for the resumable upload, or None if the upload DCNL has not yet started.'
def _query_server_state(self, conn, file_length): DCNL 'Queries server to find out state of given upload. DCNL Note that this method really just makes special case use of the DCNL fact that the upload server always returns the current start/end DCNL state whenever a PUT doesn\'t complete. DCNL Returns HTTP response from sending request. DCNL Raises ResumableUploadException if problem querying server.'
def _query_server_pos(self, conn, file_length): DCNL 'Queries server to find out what bytes it currently has. DCNL Returns (server_start, server_end), where the values are inclusive. DCNL For example, (0, 2) would mean that the server has bytes 0, 1, *and* 2. DCNL Raises ResumableUploadException if problem querying server.'
def _start_new_resumable_upload(self, key, headers=None): DCNL 'Starts a new resumable upload. DCNL Raises ResumableUploadException if any errors occur.'
def _upload_file_bytes(self, conn, http_conn, fp, file_length, total_bytes_uploaded, cb, num_cb, headers): DCNL 'Makes one attempt to upload file bytes, using an existing resumable DCNL upload connection. DCNL Returns (etag, generation, metageneration) from server upon success. DCNL Raises ResumableUploadException if any problems occur.'
def _attempt_resumable_upload(self, key, fp, file_length, headers, cb, num_cb): DCNL 'Attempts a resumable upload. DCNL Returns (etag, generation, metageneration) from server upon success. DCNL Raises ResumableUploadException if any problems occur.'
def _check_final_md5(self, key, etag): DCNL 'Checks that etag from server agrees with md5 computed before upload. DCNL This is important, since the upload could have spanned a number of DCNL hours and multiple processes (e.g., gsutil runs), and the user could DCNL change some of the file and not realize they have inconsistent data.'
def send_file(self, key, fp, headers, cb=None, num_cb=10, hash_algs=None): DCNL 'Upload a file to a key into a bucket on GS, using GS resumable upload DCNL protocol. DCNL :type key: :class:`boto.s3.key.Key` or subclass DCNL :param key: The Key object to which data is to be uploaded DCNL :type fp: file-like object DCNL :param fp: The file pointer to upload DCNL :type headers: dict DCNL :param headers: The headers to pass along with the PUT request DCNL :type cb: function DCNL :param cb: a callback function that will be called to report progress on DCNL the upload.  The callback should accept two integer parameters, the DCNL first representing the number of bytes that have been successfully DCNL transmitted to GS, and the second representing the total number of DCNL bytes that need to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the cb DCNL parameter, this parameter determines the granularity of the callback DCNL by defining the maximum number of times the callback will be called DCNL during the file transfer. Providing a negative integer will cause DCNL your callback to be called with each buffer read. DCNL :type hash_algs: dictionary DCNL :param hash_algs: (optional) Dictionary mapping hash algorithm DCNL descriptions to corresponding state-ful hashing objects that DCNL implement update(), digest(), and copy() (e.g. hashlib.md5()). DCNL Defaults to {\'md5\': md5()}. DCNL Raises ResumableUploadException if a problem occurs during the transfer.'
def create_bucket(self, bucket_name, headers=None, location=Location.DEFAULT, policy=None, storage_class='STANDARD'): DCNL 'Creates a new bucket. By default it\'s located in the USA. You can DCNL pass Location.EU to create bucket in the EU. You can also pass DCNL a LocationConstraint for where the bucket should be located, and DCNL a StorageClass describing how the data should be stored. DCNL :type bucket_name: string DCNL :param bucket_name: The name of the new bucket. DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to GCS. DCNL :type location: :class:`boto.gs.connection.Location` DCNL :param location: The location of the new bucket. DCNL :type policy: :class:`boto.gs.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the new key DCNL in GCS. DCNL :type storage_class: string DCNL :param storage_class: Either \'STANDARD\' or \'DURABLE_REDUCED_AVAILABILITY\'.'
def get_bucket(self, bucket_name, validate=True, headers=None): DCNL 'Retrieves a bucket by name. DCNL If the bucket does not exist, an ``S3ResponseError`` will be raised. If DCNL you are unsure if the bucket exists or not, you can use the DCNL ``S3Connection.lookup`` method, which will either return a valid bucket DCNL or ``None``. DCNL :type bucket_name: string DCNL :param bucket_name: The name of the bucket DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the request to DCNL AWS. DCNL :type validate: boolean DCNL :param validate: If ``True``, it will try to fetch all keys within the DCNL given bucket. (Default: ``True``)'
def open_read(self, headers=None, query_args='', override_num_retries=None, response_headers=None): DCNL 'Open this key for reading DCNL :type headers: dict DCNL :param headers: Headers to pass in the web request DCNL :type query_args: string DCNL :param query_args: Arguments to pass in the query string DCNL (ie, \'torrent\') DCNL :type override_num_retries: int DCNL :param override_num_retries: If not None will override configured DCNL num_retries parameter for underlying GET. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response.  See DCNL http://goo.gl/EWOPb for details.'
def get_contents_to_file(self, fp, headers=None, cb=None, num_cb=10, torrent=False, version_id=None, res_download_handler=None, response_headers=None, hash_algs=None): DCNL 'Retrieve an object from GCS using the name of the Key object as the DCNL key in GCS. Write the contents of the object to the file pointed DCNL to by \'fp\'. DCNL :type fp: File -like object DCNL :param fp: DCNL :type headers: dict DCNL :param headers: additional HTTP headers that will be sent with DCNL the GET request. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload. The callback should accept two DCNL integer parameters, the first representing the number of DCNL bytes that have been successfully transmitted to GCS and DCNL the second representing the size of the to be transmitted DCNL object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type torrent: bool DCNL :param torrent: If True, returns the contents of a torrent DCNL file as a string. DCNL :type res_upload_handler: ResumableDownloadHandler DCNL :param res_download_handler: If provided, this handler will DCNL perform the download. DCNL :type response_headers: dict DCNL :param response_headers: A dictionary containing HTTP DCNL headers/values that will override any headers associated DCNL with the stored object in the response. See DCNL http://goo.gl/sMkcC for details.'
def compute_hash(self, fp, algorithm, size=None): DCNL ':type fp: file DCNL :param fp: File pointer to the file to hash. The file DCNL pointer will be reset to the same position before the DCNL method returns. DCNL :type algorithm: zero-argument constructor for hash objects that DCNL implements update() and digest() (e.g. hashlib.md5) DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read DCNL from the file pointer (fp). This is useful when uploading DCNL a file in multiple parts where the file is being split DCNL in place into different parts. Less bytes may be available.'
def send_file(self, fp, headers=None, cb=None, num_cb=10, query_args=None, chunked_transfer=False, size=None, hash_algs=None): DCNL 'Upload a file to GCS. DCNL :type fp: file DCNL :param fp: The file pointer to upload. The file pointer must DCNL point at the offset from which you wish to upload. DCNL ie. if uploading the full file, it should point at the DCNL start of the file. Normally when a file is opened for DCNL reading, the fp will point at the first byte. See the DCNL bytes parameter below for more info. DCNL :type headers: dict DCNL :param headers: The headers to pass along with the PUT request DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file DCNL transfer. Providing a negative integer will cause your DCNL callback to be called with each buffer read. DCNL :type query_args: string DCNL :param query_args: Arguments to pass in the query string. DCNL :type chunked_transfer: boolean DCNL :param chunked_transfer: (optional) If true, we use chunked DCNL Transfer-Encoding. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read DCNL from the file pointer (fp). This is useful when uploading DCNL a file in multiple parts where you are splitting the file DCNL up into different ranges to be uploaded. If not specified, DCNL the default behaviour is to read all bytes from the file DCNL pointer. Less bytes may be available. DCNL :type hash_algs: dictionary DCNL :param hash_algs: (optional) Dictionary of hash algorithms and DCNL corresponding hashing class that implements update() and digest(). DCNL Defaults to {\'md5\': hashlib.md5}.'
def add_email_grant(self, permission, email_address): DCNL 'Convenience method that provides a quick way to add an email grant to a DCNL key. This method retrieves the current ACL, creates a new grant based on DCNL the parameters passed in, adds that grant to the ACL and then PUT\'s the DCNL new ACL back to GS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL READ|FULL_CONTROL DCNL See http://code.google.com/apis/storage/docs/developer-guide.html#authorization DCNL for more details on permissions. DCNL :type email_address: string DCNL :param email_address: The email address associated with the Google DCNL account to which you are granting the permission.'
def add_user_grant(self, permission, user_id): DCNL 'Convenience method that provides a quick way to add a canonical user DCNL grant to a key. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL and DCNL then PUT\'s the new ACL back to GS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL READ|FULL_CONTROL DCNL See http://code.google.com/apis/storage/docs/developer-guide.html#authorization DCNL for more details on permissions. DCNL :type user_id: string DCNL :param user_id: The canonical user id associated with the GS account to DCNL which you are granting the permission.'
def add_group_email_grant(self, permission, email_address, headers=None): DCNL 'Convenience method that provides a quick way to add an email group DCNL grant to a key. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL and DCNL then PUT\'s the new ACL back to GS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL READ|FULL_CONTROL DCNL See http://code.google.com/apis/storage/docs/developer-guide.html#authorization DCNL for more details on permissions. DCNL :type email_address: string DCNL :param email_address: The email address associated with the Google DCNL Group to which you are granting the permission.'
def add_group_grant(self, permission, group_id): DCNL 'Convenience method that provides a quick way to add a canonical group DCNL grant to a key. This method retrieves the current ACL, creates a new DCNL grant based on the parameters passed in, adds that grant to the ACL and DCNL then PUT\'s the new ACL back to GS. DCNL :type permission: string DCNL :param permission: The permission being granted. Should be one of: DCNL READ|FULL_CONTROL DCNL See http://code.google.com/apis/storage/docs/developer-guide.html#authorization DCNL for more details on permissions. DCNL :type group_id: string DCNL :param group_id: The canonical group id associated with the Google DCNL Groups account you are granting the permission to.'
def set_contents_from_file(self, fp, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, res_upload_handler=None, size=None, rewind=False, if_generation=None): DCNL 'Store an object in GS using the name of the Key object as the DCNL key in GS and the contents of the file pointed to by \'fp\' as the DCNL contents. DCNL :type fp: file DCNL :param fp: The file whose contents are to be uploaded. DCNL :type headers: dict DCNL :param headers: (optional) Additional HTTP headers to be sent with the DCNL PUT request. DCNL :type replace: bool DCNL :param replace: (optional) If this parameter is False, the method will DCNL first check to see if an object exists in the bucket with the same DCNL key. If it does, it won\'t overwrite it. The default value is True DCNL which will overwrite the object. DCNL :type cb: function DCNL :param cb: (optional) Callback function that will be called to report DCNL progress on the upload. The callback should accept two integer DCNL parameters, the first representing the number of bytes that have DCNL been successfully transmitted to GS and the second representing the DCNL total number of bytes that need to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the cb DCNL parameter, this parameter determines the granularity of the callback DCNL by defining the maximum number of times the callback will be called DCNL during the file transfer. DCNL :type policy: :class:`boto.gs.acl.CannedACLStrings` DCNL :param policy: (optional) A canned ACL policy that will be applied to DCNL the new key in GS. DCNL :type md5: tuple DCNL :param md5: (optional) A tuple containing the hexdigest version of the DCNL MD5 checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the second element. DCNL This is the same format returned by the compute_md5 method. DCNL If you need to compute the MD5 for any reason prior to upload, it\'s DCNL silly to have to do it twice so this param, if present, will be DCNL used as the MD5 values of the file. Otherwise, the checksum will be DCNL computed. DCNL :type res_upload_handler: :py:class:`boto.gs.resumable_upload_handler.ResumableUploadHandler` DCNL :param res_upload_handler: (optional) If provided, this handler will DCNL perform the upload. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read from the DCNL file pointer (fp). This is useful when uploading a file in multiple DCNL parts where you are splitting the file up into different ranges to DCNL be uploaded. If not specified, the default behaviour is to read all DCNL bytes from the file pointer. Less bytes may be available. DCNL Notes: DCNL 1. The "size" parameter currently cannot be used when a DCNL resumable upload handler is given but is still useful for DCNL uploading part of a file as implemented by the parent class. DCNL 2. At present Google Cloud Storage does not support multipart DCNL uploads. DCNL :type rewind: bool DCNL :param rewind: (optional) If True, the file pointer (fp) will be DCNL rewound to the start before any bytes are read from it. The default DCNL behaviour is False which reads from the current position of the DCNL file pointer (fp). DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the DCNL object will only be written to if its current generation number is DCNL this value. If set to the value 0, the object will only be written DCNL if it doesn\'t already exist. DCNL :rtype: int DCNL :return: The number of bytes written to the key. DCNL TODO: At some point we should refactor the Bucket and Key classes, DCNL to move functionality common to all providers into a parent class, DCNL and provider-specific functionality into subclasses (rather than DCNL just overriding/sharing code the way it currently works).'
def set_contents_from_filename(self, filename, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, reduced_redundancy=None, res_upload_handler=None, if_generation=None): DCNL 'Store an object in GS using the name of the Key object as the DCNL key in GS and the contents of the file named by \'filename\'. DCNL See set_contents_from_file method for details about the DCNL parameters. DCNL :type filename: string DCNL :param filename: The name of the file that you want to put onto GS. DCNL :type headers: dict DCNL :param headers: (optional) Additional headers to pass along with the DCNL request to GS. DCNL :type replace: bool DCNL :param replace: (optional) If True, replaces the contents of the file DCNL if it already exists. DCNL :type cb: function DCNL :param cb: (optional) Callback function that will be called to report DCNL progress on the upload. The callback should accept two integer DCNL parameters, the first representing the number of bytes that have DCNL been successfully transmitted to GS and the second representing the DCNL total number of bytes that need to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the cb DCNL parameter this parameter determines the granularity of the callback DCNL by defining the maximum number of times the callback will be called DCNL during the file transfer. DCNL :type policy: :py:attribute:`boto.gs.acl.CannedACLStrings` DCNL :param policy: (optional) A canned ACL policy that will be applied to DCNL the new key in GS. DCNL :type md5: tuple DCNL :param md5: (optional) A tuple containing the hexdigest version of the DCNL MD5 checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the second element. DCNL This is the same format returned by the compute_md5 method. DCNL If you need to compute the MD5 for any reason prior to upload, it\'s DCNL silly to have to do it twice so this param, if present, will be DCNL used as the MD5 values of the file. Otherwise, the checksum will be DCNL computed. DCNL :type res_upload_handler: :py:class:`boto.gs.resumable_upload_handler.ResumableUploadHandler` DCNL :param res_upload_handler: (optional) If provided, this handler will DCNL perform the upload. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the DCNL object will only be written to if its current generation number is DCNL this value. If set to the value 0, the object will only be written DCNL if it doesn\'t already exist.'
def set_contents_from_string(self, s, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None, if_generation=None): DCNL 'Store an object in GCS using the name of the Key object as the DCNL key in GCS and the string \'s\' as the contents. DCNL See set_contents_from_file method for details about the DCNL parameters. DCNL :type headers: dict DCNL :param headers: Additional headers to pass along with the DCNL request to AWS. DCNL :type replace: bool DCNL :param replace: If True, replaces the contents of the file if DCNL it already exists. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload. The callback should accept DCNL two integer parameters, the first representing the DCNL number of bytes that have been successfully DCNL transmitted to GCS and the second representing the DCNL size of the to be transmitted object. DCNL :type cb: int DCNL :param num_cb: (optional) If a callback is specified with DCNL the cb parameter this parameter determines the DCNL granularity of the callback by defining DCNL the maximum number of times the callback will DCNL be called during the file transfer. DCNL :type policy: :class:`boto.gs.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the DCNL new key in GCS. DCNL :type md5: A tuple containing the hexdigest version of the MD5 DCNL checksum of the file as the first element and the DCNL Base64-encoded version of the plain checksum as the DCNL second element. This is the same format returned by DCNL the compute_md5 method. DCNL :param md5: If you need to compute the MD5 for any reason prior DCNL to upload, it\'s silly to have to do it twice so this DCNL param, if present, will be used as the MD5 values DCNL of the file. Otherwise, the checksum will be computed. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the DCNL object will only be written to if its current generation number is DCNL this value. If set to the value 0, the object will only be written DCNL if it doesn\'t already exist.'
def set_contents_from_stream(self, *args, **kwargs): DCNL 'Store an object using the name of the Key object as the key in DCNL cloud and the contents of the data stream pointed to by \'fp\' as DCNL the contents. DCNL The stream object is not seekable and total size is not known. DCNL This has the implication that we can\'t specify the DCNL Content-Size and Content-MD5 in the header. So for huge DCNL uploads, the delay in calculating MD5 is avoided but with a DCNL penalty of inability to verify the integrity of the uploaded DCNL data. DCNL :type fp: file DCNL :param fp: the file whose contents are to be uploaded DCNL :type headers: dict DCNL :param headers: additional HTTP headers to be sent with the DCNL PUT request. DCNL :type replace: bool DCNL :param replace: If this parameter is False, the method will first check DCNL to see if an object exists in the bucket with the same key. If it DCNL does, it won\'t overwrite it. The default value is True which will DCNL overwrite the object. DCNL :type cb: function DCNL :param cb: a callback function that will be called to report DCNL progress on the upload. The callback should accept two integer DCNL parameters, the first representing the number of bytes that have DCNL been successfully transmitted to GS and the second representing the DCNL total number of bytes that need to be transmitted. DCNL :type num_cb: int DCNL :param num_cb: (optional) If a callback is specified with the DCNL cb parameter, this parameter determines the granularity of DCNL the callback by defining the maximum number of times the DCNL callback will be called during the file transfer. DCNL :type policy: :class:`boto.gs.acl.CannedACLStrings` DCNL :param policy: A canned ACL policy that will be applied to the new key DCNL in GS. DCNL :type size: int DCNL :param size: (optional) The Maximum number of bytes to read from DCNL the file pointer (fp). This is useful when uploading a DCNL file in multiple parts where you are splitting the file up DCNL into different ranges to be uploaded. If not specified, DCNL the default behaviour is to read all bytes from the file DCNL pointer. Less bytes may be available. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the DCNL object will only be written to if its current generation number is DCNL this value. If set to the value 0, the object will only be written DCNL if it doesn\'t already exist.'
def set_acl(self, acl_or_str, headers=None, generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets the ACL for this object. DCNL :type acl_or_str: string or :class:`boto.gs.acl.ACL` DCNL :param acl_or_str: A canned ACL string (see DCNL :data:`~.gs.acl.CannedACLStrings`) or an ACL object. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def get_acl(self, headers=None, generation=None): DCNL 'Returns the ACL of this object. DCNL :param dict headers: Additional headers to set during the request. DCNL :param int generation: If specified, gets the ACL for a specific DCNL generation of a versioned object. If not specified, the current DCNL version is returned. DCNL :rtype: :class:`.gs.acl.ACL`'
def get_xml_acl(self, headers=None, generation=None): DCNL 'Returns the ACL string of this object. DCNL :param dict headers: Additional headers to set during the request. DCNL :param int generation: If specified, gets the ACL for a specific DCNL generation of a versioned object. If not specified, the current DCNL version is returned. DCNL :rtype: str'
def set_xml_acl(self, acl_str, headers=None, generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets this objects\'s ACL to an XML string. DCNL :type acl_str: string DCNL :param acl_str: A string containing the ACL XML. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def set_canned_acl(self, acl_str, headers=None, generation=None, if_generation=None, if_metageneration=None): DCNL 'Sets this objects\'s ACL using a predefined (canned) value. DCNL :type acl_str: string DCNL :param acl_str: A canned ACL string. See DCNL :data:`~.gs.acl.CannedACLStrings`. DCNL :type headers: dict DCNL :param headers: Additional headers to set during the request. DCNL :type generation: int DCNL :param generation: If specified, sets the ACL for a specific generation DCNL of a versioned object. If not specified, the current version is DCNL modified. DCNL :type if_generation: int DCNL :param if_generation: (optional) If set to a generation number, the acl DCNL will only be updated if its current generation number is this value. DCNL :type if_metageneration: int DCNL :param if_metageneration: (optional) If set to a metageneration number, DCNL the acl will only be updated if its current metageneration number is DCNL this value.'
def compose(self, components, content_type=None, headers=None): DCNL 'Create a new object from a sequence of existing objects. DCNL The content of the object representing this Key will be the DCNL concatenation of the given object sequence. For more detail, visit DCNL https://developers.google.com/storage/docs/composite-objects DCNL :type components list of Keys DCNL :param components List of gs.Keys representing the component objects DCNL :type content_type (optional) string DCNL :param content_type Content type for the new composite object.'
def validateParseLevel(self, tag, level): DCNL 'Verify parse level for a given tag.'
def startElement(self, name, attrs, connection): DCNL 'SAX XML logic for parsing new element found.'
def endElement(self, name, value, connection): DCNL 'SAX XML logic for parsing new element found.'
def to_xml(self): DCNL 'Convert CORS object into XML string representation.'
def allocate_connection_on_interconnect(self, bandwidth, connection_name, owner_account, interconnect_id, vlan): DCNL 'Creates a hosted connection on an interconnect. DCNL Allocates a VLAN number and a specified amount of bandwidth DCNL for use by a hosted connection on the given interconnect. DCNL :type bandwidth: string DCNL :param bandwidth: Bandwidth of the connection. DCNL Example: " 500Mbps " DCNL Default: None DCNL :type connection_name: string DCNL :param connection_name: Name of the provisioned connection. DCNL Example: " 500M Connection to AWS " DCNL Default: None DCNL :type owner_account: string DCNL :param owner_account: Numeric account Id of the customer for whom the DCNL connection will be provisioned. DCNL Example: 123443215678 DCNL Default: None DCNL :type interconnect_id: string DCNL :param interconnect_id: ID of the interconnect on which the connection DCNL will be provisioned. DCNL Example: dxcon-456abc78 DCNL Default: None DCNL :type vlan: integer DCNL :param vlan: The dedicated VLAN provisioned to the connection. DCNL Example: 101 DCNL Default: None'
def allocate_private_virtual_interface(self, connection_id, owner_account, new_private_virtual_interface_allocation): DCNL 'Provisions a private virtual interface to be owned by a DCNL different customer. DCNL The owner of a connection calls this function to provision a DCNL private virtual interface which will be owned by another AWS DCNL customer. DCNL Virtual interfaces created using this function must be DCNL confirmed by the virtual interface owner by calling DCNL ConfirmPrivateVirtualInterface. Until this step has been DCNL completed, the virtual interface will be in \'Confirming\' DCNL state, and will not be available for handling traffic. DCNL :type connection_id: string DCNL :param connection_id: The connection ID on which the private virtual DCNL interface is provisioned. DCNL Default: None DCNL :type owner_account: string DCNL :param owner_account: The AWS account that will own the new private DCNL virtual interface. DCNL Default: None DCNL :type new_private_virtual_interface_allocation: dict DCNL :param new_private_virtual_interface_allocation: Detailed information DCNL for the private virtual interface to be provisioned. DCNL Default: None'
def allocate_public_virtual_interface(self, connection_id, owner_account, new_public_virtual_interface_allocation): DCNL 'Provisions a public virtual interface to be owned by a DCNL different customer. DCNL The owner of a connection calls this function to provision a DCNL public virtual interface which will be owned by another AWS DCNL customer. DCNL Virtual interfaces created using this function must be DCNL confirmed by the virtual interface owner by calling DCNL ConfirmPublicVirtualInterface. Until this step has been DCNL completed, the virtual interface will be in \'Confirming\' DCNL state, and will not be available for handling traffic. DCNL :type connection_id: string DCNL :param connection_id: The connection ID on which the public virtual DCNL interface is provisioned. DCNL Default: None DCNL :type owner_account: string DCNL :param owner_account: The AWS account that will own the new public DCNL virtual interface. DCNL Default: None DCNL :type new_public_virtual_interface_allocation: dict DCNL :param new_public_virtual_interface_allocation: Detailed information DCNL for the public virtual interface to be provisioned. DCNL Default: None'
def confirm_connection(self, connection_id): DCNL 'Confirm the creation of a hosted connection on an DCNL interconnect. DCNL Upon creation, the hosted connection is initially in the DCNL \'Ordering\' state, and will remain in this state until the DCNL owner calls ConfirmConnection to confirm creation of the DCNL hosted connection. DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None'
def confirm_private_virtual_interface(self, virtual_interface_id, virtual_gateway_id): DCNL 'Accept ownership of a private virtual interface created by DCNL another customer. DCNL After the virtual interface owner calls this function, the DCNL virtual interface will be created and attached to the given DCNL virtual private gateway, and will be available for handling DCNL traffic. DCNL :type virtual_interface_id: string DCNL :param virtual_interface_id: ID of the virtual interface. DCNL Example: dxvif-123dfg56 DCNL Default: None DCNL :type virtual_gateway_id: string DCNL :param virtual_gateway_id: ID of the virtual private gateway that will DCNL be attached to the virtual interface. DCNL A virtual private gateway can be managed via the Amazon Virtual Private DCNL Cloud (VPC) console or the `EC2 CreateVpnGateway`_ action. DCNL Default: None'
def confirm_public_virtual_interface(self, virtual_interface_id): DCNL 'Accept ownership of a public virtual interface created by DCNL another customer. DCNL After the virtual interface owner calls this function, the DCNL specified virtual interface will be created and made available DCNL for handling traffic. DCNL :type virtual_interface_id: string DCNL :param virtual_interface_id: ID of the virtual interface. DCNL Example: dxvif-123dfg56 DCNL Default: None'
def create_connection(self, location, bandwidth, connection_name): DCNL 'Creates a new connection between the customer network and a DCNL specific AWS Direct Connect location. DCNL A connection links your internal network to an AWS Direct DCNL Connect location over a standard 1 gigabit or 10 gigabit DCNL Ethernet fiber-optic cable. One end of the cable is connected DCNL to your router, the other to an AWS Direct Connect router. An DCNL AWS Direct Connect location provides access to Amazon Web DCNL Services in the region it is associated with. You can DCNL establish connections with AWS Direct Connect locations in DCNL multiple regions, but a connection in one region does not DCNL provide connectivity to other regions. DCNL :type location: string DCNL :param location: Where the connection is located. DCNL Example: EqSV5 DCNL Default: None DCNL :type bandwidth: string DCNL :param bandwidth: Bandwidth of the connection. DCNL Example: 1Gbps DCNL Default: None DCNL :type connection_name: string DCNL :param connection_name: The name of the connection. DCNL Example: " My Connection to AWS " DCNL Default: None'
def create_interconnect(self, interconnect_name, bandwidth, location): DCNL 'Creates a new interconnect between a AWS Direct Connect DCNL partner\'s network and a specific AWS Direct Connect location. DCNL An interconnect is a connection which is capable of hosting DCNL other connections. The AWS Direct Connect partner can use an DCNL interconnect to provide sub-1Gbps AWS Direct Connect service DCNL to tier 2 customers who do not have their own connections. DCNL Like a standard connection, an interconnect links the AWS DCNL Direct Connect partner\'s network to an AWS Direct Connect DCNL location over a standard 1 Gbps or 10 Gbps Ethernet fiber- DCNL optic cable. One end is connected to the partner\'s router, the DCNL other to an AWS Direct Connect router. DCNL For each end customer, the AWS Direct Connect partner DCNL provisions a connection on their interconnect by calling DCNL AllocateConnectionOnInterconnect. The end customer can then DCNL connect to AWS resources by creating a virtual interface on DCNL their connection, using the VLAN assigned to them by the AWS DCNL Direct Connect partner. DCNL :type interconnect_name: string DCNL :param interconnect_name: The name of the interconnect. DCNL Example: " 1G Interconnect to AWS " DCNL Default: None DCNL :type bandwidth: string DCNL :param bandwidth: The port bandwidth DCNL Example: 1Gbps DCNL Default: None DCNL Available values: 1Gbps,10Gbps DCNL :type location: string DCNL :param location: Where the interconnect is located DCNL Example: EqSV5 DCNL Default: None'
def create_private_virtual_interface(self, connection_id, new_private_virtual_interface): DCNL 'Creates a new private virtual interface. A virtual interface DCNL is the VLAN that transports AWS Direct Connect traffic. A DCNL private virtual interface supports sending traffic to a single DCNL virtual private cloud (VPC). DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None DCNL :type new_private_virtual_interface: dict DCNL :param new_private_virtual_interface: Detailed information for the DCNL private virtual interface to be created. DCNL Default: None'
def create_public_virtual_interface(self, connection_id, new_public_virtual_interface): DCNL 'Creates a new public virtual interface. A virtual interface is DCNL the VLAN that transports AWS Direct Connect traffic. A public DCNL virtual interface supports sending traffic to public services DCNL of AWS such as Amazon Simple Storage Service (Amazon S3). DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None DCNL :type new_public_virtual_interface: dict DCNL :param new_public_virtual_interface: Detailed information for the DCNL public virtual interface to be created. DCNL Default: None'
def delete_connection(self, connection_id): DCNL 'Deletes the connection. DCNL Deleting a connection only stops the AWS Direct Connect port DCNL hour and data transfer charges. You need to cancel separately DCNL with the providers any services or charges for cross-connects DCNL or network circuits that connect you to the AWS Direct Connect DCNL location. DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None'
def delete_interconnect(self, interconnect_id): DCNL 'Deletes the specified interconnect. DCNL :type interconnect_id: string DCNL :param interconnect_id: The ID of the interconnect. DCNL Example: dxcon-abc123'
def delete_virtual_interface(self, virtual_interface_id): DCNL 'Deletes a virtual interface. DCNL :type virtual_interface_id: string DCNL :param virtual_interface_id: ID of the virtual interface. DCNL Example: dxvif-123dfg56 DCNL Default: None'
def describe_connections(self, connection_id=None): DCNL 'Displays all connections in this region. DCNL If a connection ID is provided, the call returns only that DCNL particular connection. DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None'
def describe_connections_on_interconnect(self, interconnect_id): DCNL 'Return a list of connections that have been provisioned on the DCNL given interconnect. DCNL :type interconnect_id: string DCNL :param interconnect_id: ID of the interconnect on which a list of DCNL connection is provisioned. DCNL Example: dxcon-abc123 DCNL Default: None'
def describe_interconnects(self, interconnect_id=None): DCNL 'Returns a list of interconnects owned by the AWS account. DCNL If an interconnect ID is provided, it will only return this DCNL particular interconnect. DCNL :type interconnect_id: string DCNL :param interconnect_id: The ID of the interconnect. DCNL Example: dxcon-abc123'
def describe_locations(self): DCNL 'Returns the list of AWS Direct Connect locations in the DCNL current AWS region. These are the locations that may be DCNL selected when calling CreateConnection or CreateInterconnect.'
def describe_virtual_gateways(self): DCNL 'Returns a list of virtual private gateways owned by the AWS DCNL account. DCNL You can create one or more AWS Direct Connect private virtual DCNL interfaces linking to a virtual private gateway. A virtual DCNL private gateway can be managed via Amazon Virtual Private DCNL Cloud (VPC) console or the `EC2 CreateVpnGateway`_ action.'
def describe_virtual_interfaces(self, connection_id=None, virtual_interface_id=None): DCNL 'Displays all virtual interfaces for an AWS account. Virtual DCNL interfaces deleted fewer than 15 minutes before DCNL DescribeVirtualInterfaces is called are also returned. If a DCNL connection ID is included then only virtual interfaces DCNL associated with this connection will be returned. If a virtual DCNL interface ID is included then only a single virtual interface DCNL will be returned. DCNL A virtual interface (VLAN) transmits the traffic between the DCNL AWS Direct Connect location and the customer. DCNL If a connection ID is provided, only virtual interfaces DCNL provisioned on the specified connection will be returned. If a DCNL virtual interface ID is provided, only this particular virtual DCNL interface will be returned. DCNL :type connection_id: string DCNL :param connection_id: ID of the connection. DCNL Example: dxcon-fg5678gh DCNL Default: None DCNL :type virtual_interface_id: string DCNL :param virtual_interface_id: ID of the virtual interface. DCNL Example: dxvif-123dfg56 DCNL Default: None'
def __init__(self, table_name, schema=None, throughput=None, indexes=None, global_indexes=None, connection=None): DCNL 'Sets up a new in-memory ``Table``. DCNL This is useful if the table already exists within DynamoDB & you simply DCNL want to use it for additional interactions. The only required parameter DCNL is the ``table_name``. However, under the hood, the object will call DCNL ``describe_table`` to determine the schema/indexes/throughput. You DCNL can avoid this extra call by passing in ``schema`` & ``indexes``. DCNL **IMPORTANT** - If you\'re creating a new ``Table`` for the first time, DCNL you should use the ``Table.create`` method instead, as it will DCNL persist the table structure to DynamoDB. DCNL Requires a ``table_name`` parameter, which should be a simple string DCNL of the name of the table. DCNL Optionally accepts a ``schema`` parameter, which should be a list of DCNL ``BaseSchemaField`` subclasses representing the desired schema. DCNL Optionally accepts a ``throughput`` parameter, which should be a DCNL dictionary. If provided, it should specify a ``read`` & ``write`` key, DCNL both of which should have an integer value associated with them. DCNL Optionally accepts a ``indexes`` parameter, which should be a list of DCNL ``BaseIndexField`` subclasses representing the desired indexes. DCNL Optionally accepts a ``global_indexes`` parameter, which should be a DCNL list of ``GlobalBaseIndexField`` subclasses representing the desired DCNL indexes. DCNL Optionally accepts a ``connection`` parameter, which should be a DCNL ``DynamoDBConnection`` instance (or subclass). This is primarily useful DCNL for specifying alternate connection parameters. DCNL Example:: DCNL # The simple, it-already-exists case. DCNL >>> conn = Table(\'users\') DCNL # The full, minimum-extra-calls case. DCNL >>> from boto import dynamodb2 DCNL >>> users = Table(\'users\', schema=[ DCNL ...     HashKey(\'username\'), DCNL ...     RangeKey(\'date_joined\', data_type=NUMBER) DCNL ... ], throughput={ DCNL ...     \'read\':20, DCNL ...     \'write\': 10, DCNL ... }, indexes=[ DCNL ...     KeysOnlyIndex(\'MostRecentlyJoined\', parts=[ DCNL ...         HashKey(\'username\') DCNL ...         RangeKey(\'date_joined\') DCNL ... ], global_indexes=[ DCNL ...     GlobalAllIndex(\'UsersByZipcode\', parts=[ DCNL ...         HashKey(\'zipcode\'), DCNL ...         RangeKey(\'username\'), DCNL ...     throughput={ DCNL ...       \'read\':10, DCNL ...       \'write\':10, DCNL ... ], connection=dynamodb2.connect_to_region(\'us-west-2\', DCNL ...     aws_access_key_id=\'key\', DCNL ...     aws_secret_access_key=\'key\','
@classmethod DCNL def create(cls, table_name, schema, throughput=None, indexes=None, global_indexes=None, connection=None): DCNL 'Creates a new table in DynamoDB & returns an in-memory ``Table`` object. DCNL This will setup a brand new table within DynamoDB. The ``table_name`` DCNL must be unique for your AWS account. The ``schema`` is also required DCNL to define the key structure of the table. DCNL **IMPORTANT** - You should consider the usage pattern of your table DCNL up-front, as the schema can **NOT** be modified once the table is DCNL created, requiring the creation of a new table & migrating the data DCNL should you wish to revise it. DCNL **IMPORTANT** - If the table already exists in DynamoDB, additional DCNL calls to this method will result in an error. If you just need DCNL a ``Table`` object to interact with the existing table, you should DCNL just initialize a new ``Table`` object, which requires only the DCNL ``table_name``. DCNL Requires a ``table_name`` parameter, which should be a simple string DCNL of the name of the table. DCNL Requires a ``schema`` parameter, which should be a list of DCNL ``BaseSchemaField`` subclasses representing the desired schema. DCNL Optionally accepts a ``throughput`` parameter, which should be a DCNL dictionary. If provided, it should specify a ``read`` & ``write`` key, DCNL both of which should have an integer value associated with them. DCNL Optionally accepts a ``indexes`` parameter, which should be a list of DCNL ``BaseIndexField`` subclasses representing the desired indexes. DCNL Optionally accepts a ``global_indexes`` parameter, which should be a DCNL list of ``GlobalBaseIndexField`` subclasses representing the desired DCNL indexes. DCNL Optionally accepts a ``connection`` parameter, which should be a DCNL ``DynamoDBConnection`` instance (or subclass). This is primarily useful DCNL for specifying alternate connection parameters. DCNL Example:: DCNL >>> users = Table.create(\'users\', schema=[ DCNL ...     HashKey(\'username\'), DCNL ...     RangeKey(\'date_joined\', data_type=NUMBER) DCNL ... ], throughput={ DCNL ...     \'read\':20, DCNL ...     \'write\': 10, DCNL ... }, indexes=[ DCNL ...     KeysOnlyIndex(\'MostRecentlyJoined\', parts=[ DCNL ...         HashKey(\'username\'), DCNL ...         RangeKey(\'date_joined\'), DCNL ... ]), global_indexes=[ DCNL ...     GlobalAllIndex(\'UsersByZipcode\', parts=[ DCNL ...         HashKey(\'zipcode\'), DCNL ...         RangeKey(\'username\'), DCNL ...     throughput={ DCNL ...       \'read\':10, DCNL ...       \'write\':10,'
def _introspect_schema(self, raw_schema, raw_attributes=None): DCNL 'Given a raw schema structure back from a DynamoDB response, parse DCNL out & build the high-level Python objects that represent them.'
def _introspect_all_indexes(self, raw_indexes, map_indexes_projection): DCNL 'Given a raw index/global index structure back from a DynamoDB response, DCNL parse out & build the high-level Python objects that represent them.'
def _introspect_indexes(self, raw_indexes): DCNL 'Given a raw index structure back from a DynamoDB response, parse DCNL out & build the high-level Python objects that represent them.'
def _introspect_global_indexes(self, raw_global_indexes): DCNL 'Given a raw global index structure back from a DynamoDB response, parse DCNL out & build the high-level Python objects that represent them.'
def describe(self): DCNL 'Describes the current structure of the table in DynamoDB. DCNL This information will be used to update the ``schema``, ``indexes``, DCNL ``global_indexes`` and ``throughput`` information on the ``Table``. Some DCNL calls, such as those involving creating keys or querying, will require DCNL this information to be populated. DCNL It also returns the full raw data structure from DynamoDB, in the DCNL event you\'d like to parse out additional information (such as the DCNL ``ItemCount`` or usage information). DCNL Example:: DCNL >>> users.describe() DCNL # Lots of keys here... DCNL >>> len(users.schema) DCNL 2'
def update(self, throughput=None, global_indexes=None): DCNL 'Updates table attributes and global indexes in DynamoDB. DCNL Optionally accepts a ``throughput`` parameter, which should be a DCNL dictionary. If provided, it should specify a ``read`` & ``write`` key, DCNL both of which should have an integer value associated with them. DCNL Optionally accepts a ``global_indexes`` parameter, which should be a DCNL dictionary. If provided, it should specify the index name, which is also DCNL a dict containing a ``read`` & ``write`` key, both of which DCNL should have an integer value associated with them. If you are writing DCNL new code, please use ``Table.update_global_secondary_index``. DCNL Returns ``True`` on success. DCNL Example:: DCNL # For a read-heavier application... DCNL >>> users.update(throughput={ DCNL ...     \'read\': 20, DCNL ...     \'write\': 10, DCNL True DCNL # To also update the global index(es) throughput. DCNL >>> users.update(throughput={ DCNL ...     \'read\': 20, DCNL ...     \'write\': 10, DCNL ... global_secondary_indexes={ DCNL ...     \'TheIndexNameHere\': { DCNL ...         \'read\': 15, DCNL ...         \'write\': 5, DCNL True'
def create_global_secondary_index(self, global_index): DCNL 'Creates a global index in DynamoDB after the table has been created. DCNL Requires a ``global_indexes`` parameter, which should be a DCNL ``GlobalBaseIndexField`` subclass representing the desired index. DCNL To update ``global_indexes`` information on the ``Table``, you\'ll need DCNL to call ``Table.describe``. DCNL Returns ``True`` on success. DCNL Example:: DCNL # To create a global index DCNL >>> users.create_global_secondary_index( DCNL ...     global_index=GlobalAllIndex( DCNL ...         \'TheIndexNameHere\', parts=[ DCNL ...             HashKey(\'requiredHashkey\', data_type=STRING), DCNL ...             RangeKey(\'optionalRangeKey\', data_type=STRING) DCNL ...         throughput={ DCNL ...             \'read\': 2, DCNL ...             \'write\': 1, DCNL True'
def delete_global_secondary_index(self, global_index_name): DCNL 'Deletes a global index in DynamoDB after the table has been created. DCNL Requires a ``global_index_name`` parameter, which should be a simple DCNL string of the name of the global secondary index. DCNL To update ``global_indexes`` information on the ``Table``, you\'ll need DCNL to call ``Table.describe``. DCNL Returns ``True`` on success. DCNL Example:: DCNL # To delete a global index DCNL >>> users.delete_global_secondary_index(\'TheIndexNameHere\') DCNL True'
def update_global_secondary_index(self, global_indexes): DCNL 'Updates a global index(es) in DynamoDB after the table has been created. DCNL Requires a ``global_indexes`` parameter, which should be a DCNL dictionary. If provided, it should specify the index name, which is also DCNL a dict containing a ``read`` & ``write`` key, both of which DCNL should have an integer value associated with them. DCNL To update ``global_indexes`` information on the ``Table``, you\'ll need DCNL to call ``Table.describe``. DCNL Returns ``True`` on success. DCNL Example:: DCNL # To update a global index DCNL >>> users.update_global_secondary_index(global_indexes={ DCNL ...     \'TheIndexNameHere\': { DCNL ...         \'read\': 15, DCNL ...         \'write\': 5, DCNL True'
def delete(self): DCNL 'Deletes a table in DynamoDB. DCNL **IMPORTANT** - Be careful when using this method, there is no undo. DCNL Returns ``True`` on success. DCNL Example:: DCNL >>> users.delete() DCNL True'
def _encode_keys(self, keys): DCNL 'Given a flat Python dictionary of keys/values, converts it into the DCNL nested dictionary DynamoDB expects. DCNL Converts:: DCNL \'username\': \'john\', DCNL \'tags\': [1, 2, 5], DCNL ...to...:: DCNL \'username\': {\'S\': \'john\'}, DCNL \'tags\': {\'NS\': [\'1\', \'2\', \'5\']},'
def get_item(self, consistent=False, attributes=None, **kwargs): DCNL 'Fetches an item (record) from a table in DynamoDB. DCNL To specify the key of the item you\'d like to get, you can specify the DCNL key attributes as kwargs. DCNL Optionally accepts a ``consistent`` parameter, which should be a DCNL boolean. If you provide ``True``, it will perform DCNL a consistent (but more expensive) read from DynamoDB. DCNL (Default: ``False``) DCNL Optionally accepts an ``attributes`` parameter, which should be a DCNL list of fieldname to fetch. (Default: ``None``, which means all fields DCNL should be fetched) DCNL Returns an ``Item`` instance containing all the data for that record. DCNL Raises an ``ItemNotFound`` exception if the item is not found. DCNL Example:: DCNL # A simple hash key. DCNL >>> john = users.get_item(username=\'johndoe\') DCNL >>> john[\'first_name\'] DCNL \'John\' DCNL # A complex hash+range key. DCNL >>> john = users.get_item(username=\'johndoe\', last_name=\'Doe\') DCNL >>> john[\'first_name\'] DCNL \'John\' DCNL # A consistent read (assuming the data might have just changed). DCNL >>> john = users.get_item(username=\'johndoe\', consistent=True) DCNL >>> john[\'first_name\'] DCNL \'Johann\' DCNL # With a key that is an invalid variable name in Python. DCNL # Also, assumes a different schema than previous examples. DCNL >>> john = users.get_item(**{ DCNL ...     \'date-joined\': 127549192, DCNL >>> john[\'first_name\'] DCNL \'John\''
def has_item(self, **kwargs): DCNL 'Return whether an item (record) exists within a table in DynamoDB. DCNL To specify the key of the item you\'d like to get, you can specify the DCNL key attributes as kwargs. DCNL Optionally accepts a ``consistent`` parameter, which should be a DCNL boolean. If you provide ``True``, it will perform DCNL a consistent (but more expensive) read from DynamoDB. DCNL (Default: ``False``) DCNL Optionally accepts an ``attributes`` parameter, which should be a DCNL list of fieldnames to fetch. (Default: ``None``, which means all fields DCNL should be fetched) DCNL Returns ``True`` if an ``Item`` is present, ``False`` if not. DCNL Example:: DCNL # Simple, just hash-key schema. DCNL >>> users.has_item(username=\'johndoe\') DCNL True DCNL # Complex schema, item not present. DCNL >>> users.has_item( DCNL ...     username=\'johndoe\', DCNL ...     date_joined=\'2014-01-07\' DCNL False'
def lookup(self, *args, **kwargs): DCNL 'Look up an entry in DynamoDB. This is mostly backwards compatible DCNL with boto.dynamodb. Unlike get_item, it takes hash_key and range_key first, DCNL although you may still specify keyword arguments instead. DCNL Also unlike the get_item command, if the returned item has no keys DCNL (i.e., it does not exist in DynamoDB), a None result is returned, instead DCNL of an empty key object. DCNL Example:: DCNL >>> user = users.lookup(username) DCNL >>> user = users.lookup(username, consistent=True) DCNL >>> app = apps.lookup(\'my_customer_id\', \'my_app_id\')'
def new_item(self, *args): DCNL 'Returns a new, blank item DCNL This is mostly for consistency with boto.dynamodb'
def put_item(self, data, overwrite=False): DCNL 'Saves an entire item to DynamoDB. DCNL By default, if any part of the ``Item``\'s original data doesn\'t match DCNL what\'s currently in DynamoDB, this request will fail. This prevents DCNL other processes from updating the data in between when you read the DCNL item & when your request to update the item\'s data is processed, which DCNL would typically result in some data loss. DCNL Requires a ``data`` parameter, which should be a dictionary of the data DCNL you\'d like to store in DynamoDB. DCNL Optionally accepts an ``overwrite`` parameter, which should be a DCNL boolean. If you provide ``True``, this will tell DynamoDB to blindly DCNL overwrite whatever data is present, if any. DCNL Returns ``True`` on success. DCNL Example:: DCNL >>> users.put_item(data={ DCNL ...     \'username\': \'jane\', DCNL ...     \'first_name\': \'Jane\', DCNL ...     \'last_name\': \'Doe\', DCNL ...     \'date_joined\': 126478915, DCNL True'
def _put_item(self, item_data, expects=None): DCNL 'The internal variant of ``put_item`` (full data). This is used by the DCNL ``Item`` objects, since that operation is represented at the DCNL table-level by the API, but conceptually maps better to telling an DCNL individual ``Item`` to save itself.'
def _update_item(self, key, item_data, expects=None): DCNL 'The internal variant of ``put_item`` (partial data). This is used by the DCNL ``Item`` objects, since that operation is represented at the DCNL table-level by the API, but conceptually maps better to telling an DCNL individual ``Item`` to save itself.'
def delete_item(self, expected=None, conditional_operator=None, **kwargs): DCNL 'Deletes a single item. You can perform a conditional delete operation DCNL that deletes the item if it exists, or if it has an expected attribute DCNL value. DCNL Conditional deletes are useful for only deleting items if specific DCNL conditions are met. If those conditions are met, DynamoDB performs DCNL the delete. Otherwise, the item is not deleted. DCNL To specify the expected attribute values of the item, you can pass a DCNL dictionary of conditions to ``expected``. Each condition should follow DCNL the pattern ``<attributename>__<comparison_operator>=<value_to_expect>``. DCNL **IMPORTANT** - Be careful when using this method, there is no undo. DCNL To specify the key of the item you\'d like to get, you can specify the DCNL key attributes as kwargs. DCNL Optionally accepts an ``expected`` parameter which is a dictionary of DCNL expected attribute value conditions. DCNL Optionally accepts a ``conditional_operator`` which applies to the DCNL expected attribute value conditions: DCNL + `AND` - If all of the conditions evaluate to true (default) DCNL + `OR` - True if at least one condition evaluates to true DCNL Returns ``True`` on success, ``False`` on failed conditional delete. DCNL Example:: DCNL # A simple hash key. DCNL >>> users.delete_item(username=\'johndoe\') DCNL True DCNL # A complex hash+range key. DCNL >>> users.delete_item(username=\'jane\', last_name=\'Doe\') DCNL True DCNL # With a key that is an invalid variable name in Python. DCNL # Also, assumes a different schema than previous examples. DCNL >>> users.delete_item(**{ DCNL ...     \'date-joined\': 127549192, DCNL True DCNL # Conditional delete DCNL >>> users.delete_item(username=\'johndoe\', DCNL ...                   expected={\'balance__eq\': 0}) DCNL True'
def get_key_fields(self): DCNL 'Returns the fields necessary to make a key for a table. DCNL If the ``Table`` does not already have a populated ``schema``, DCNL this will request it via a ``Table.describe`` call. DCNL Returns a list of fieldnames (strings). DCNL Example:: DCNL # A simple hash key. DCNL >>> users.get_key_fields() DCNL [\'username\'] DCNL # A complex hash+range key. DCNL >>> users.get_key_fields() DCNL [\'username\', \'last_name\']'
def batch_write(self): DCNL 'Allows the batching of writes to DynamoDB. DCNL Since each write/delete call to DynamoDB has a cost associated with it, DCNL when loading lots of data, it makes sense to batch them, creating as DCNL few calls as possible. DCNL This returns a context manager that will transparently handle creating DCNL these batches. The object you get back lightly-resembles a ``Table`` DCNL object, sharing just the ``put_item`` & ``delete_item`` methods DCNL (which are all that DynamoDB can batch in terms of writing data). DCNL DynamoDB\'s maximum batch size is 25 items per request. If you attempt DCNL to put/delete more than that, the context manager will batch as many DCNL as it can up to that number, then flush them to DynamoDB & continue DCNL batching as more calls come in. DCNL Example:: DCNL # Assuming a table with one record... DCNL >>> with users.batch_write() as batch: DCNL ...     batch.put_item(data={ DCNL ...         \'username\': \'johndoe\', DCNL ...         \'first_name\': \'John\', DCNL ...         \'last_name\': \'Doe\', DCNL ...         \'owner\': 1, DCNL ...     # Nothing across the wire yet. DCNL ...     batch.delete_item(username=\'bob\') DCNL ...     # Still no requests sent. DCNL ...     batch.put_item(data={ DCNL ...         \'username\': \'jane\', DCNL ...         \'first_name\': \'Jane\', DCNL ...         \'last_name\': \'Doe\', DCNL ...         \'date_joined\': 127436192, DCNL ...     # Nothing yet, but once we leave the context, the DCNL ...     # put/deletes will be sent.'
def _build_filters(self, filter_kwargs, using=QUERY_OPERATORS): DCNL 'An internal method for taking query/scan-style ``**kwargs`` & turning DCNL them into the raw structure DynamoDB expects for filtering.'
def query(self, limit=None, index=None, reverse=False, consistent=False, attributes=None, max_page_size=None, **filter_kwargs): DCNL '**WARNING:** This method is provided **strictly** for DCNL backward-compatibility. It returns results in an incorrect order. DCNL If you are writing new code, please use ``Table.query_2``.'
def query_2(self, limit=None, index=None, reverse=False, consistent=False, attributes=None, max_page_size=None, query_filter=None, conditional_operator=None, **filter_kwargs): DCNL 'Queries for a set of matching items in a DynamoDB table. DCNL Queries can be performed against a hash key, a hash+range key or DCNL against any data stored in your local secondary indexes. Query filters DCNL can be used to filter on arbitrary fields. DCNL **Note** - You can not query against arbitrary fields within the data DCNL stored in DynamoDB unless you specify ``query_filter`` values. DCNL To specify the filters of the items you\'d like to get, you can specify DCNL the filters as kwargs. Each filter kwarg should follow the pattern DCNL ``<fieldname>__<filter_operation>=<value_to_look_for>``. Query filters DCNL are specified in the same way. DCNL Optionally accepts a ``limit`` parameter, which should be an integer DCNL count of the total number of items to return. (Default: ``None`` - DCNL all results) DCNL Optionally accepts an ``index`` parameter, which should be a string of DCNL name of the local secondary index you want to query against. DCNL (Default: ``None``) DCNL Optionally accepts a ``reverse`` parameter, which will present the DCNL results in reverse order. (Default: ``False`` - normal order) DCNL Optionally accepts a ``consistent`` parameter, which should be a DCNL boolean. If you provide ``True``, it will force a consistent read of DCNL the data (more expensive). (Default: ``False`` - use eventually DCNL consistent reads) DCNL Optionally accepts a ``attributes`` parameter, which should be a DCNL tuple. If you provide any attributes only these will be fetched DCNL from DynamoDB. This uses the ``AttributesToGet`` and set\'s DCNL ``Select`` to ``SPECIFIC_ATTRIBUTES`` API. DCNL Optionally accepts a ``max_page_size`` parameter, which should be an DCNL integer count of the maximum number of items to retrieve DCNL **per-request**. This is useful in making faster requests & prevent DCNL the scan from drowning out other queries. (Default: ``None`` - DCNL fetch as many as DynamoDB will return) DCNL Optionally accepts a ``query_filter`` which is a dictionary of filter DCNL conditions against any arbitrary field in the returned data. DCNL Optionally accepts a ``conditional_operator`` which applies to the DCNL query filter conditions: DCNL + `AND` - True if all filter conditions evaluate to true (default) DCNL + `OR` - True if at least one filter condition evaluates to true DCNL Returns a ``ResultSet`` containing ``Item``s, which transparently handles the pagination of DCNL results you get back. DCNL Example:: DCNL # Look for last names equal to "Doe". DCNL >>> results = users.query(last_name__eq=\'Doe\') DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'John\' DCNL \'Jane\' DCNL # Look for last names beginning with "D", in reverse order, limit 3. DCNL >>> results = users.query( DCNL ...     last_name__beginswith=\'D\', DCNL ...     reverse=True, DCNL ...     limit=3 DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'Alice\' DCNL \'Jane\' DCNL \'John\' DCNL # Use an LSI & a consistent read. DCNL >>> results = users.query( DCNL ...     date_joined__gte=1236451000, DCNL ...     owner__eq=1, DCNL ...     index=\'DateJoinedIndex\', DCNL ...     consistent=True DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'Alice\' DCNL \'Bob\' DCNL \'John\' DCNL \'Fred\' DCNL # Filter by non-indexed field(s) DCNL >>> results = users.query( DCNL ...     last_name__eq=\'Doe\', DCNL ...     reverse=True, DCNL ...     query_filter={ DCNL ...         \'first_name__beginswith\': \'A\' DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] + \' \' + res[\'last_name\'] DCNL \'Alice Doe\''
def query_count(self, index=None, consistent=False, conditional_operator=None, query_filter=None, scan_index_forward=True, limit=None, exclusive_start_key=None, **filter_kwargs): DCNL 'Queries the exact count of matching items in a DynamoDB table. DCNL Queries can be performed against a hash key, a hash+range key or DCNL against any data stored in your local secondary indexes. Query filters DCNL can be used to filter on arbitrary fields. DCNL To specify the filters of the items you\'d like to get, you can specify DCNL the filters as kwargs. Each filter kwarg should follow the pattern DCNL ``<fieldname>__<filter_operation>=<value_to_look_for>``. Query filters DCNL are specified in the same way. DCNL Optionally accepts an ``index`` parameter, which should be a string of DCNL name of the local secondary index you want to query against. DCNL (Default: ``None``) DCNL Optionally accepts a ``consistent`` parameter, which should be a DCNL boolean. If you provide ``True``, it will force a consistent read of DCNL the data (more expensive). (Default: ``False`` - use eventually DCNL consistent reads) DCNL Optionally accepts a ``query_filter`` which is a dictionary of filter DCNL conditions against any arbitrary field in the returned data. DCNL Optionally accepts a ``conditional_operator`` which applies to the DCNL query filter conditions: DCNL + `AND` - True if all filter conditions evaluate to true (default) DCNL + `OR` - True if at least one filter condition evaluates to true DCNL Optionally accept a ``exclusive_start_key`` which is used to get DCNL the remaining items when a query cannot return the complete count. DCNL Returns an integer which represents the exact amount of matched DCNL items. DCNL :type scan_index_forward: boolean DCNL :param scan_index_forward: Specifies ascending (true) or descending DCNL (false) traversal of the index. DynamoDB returns results reflecting DCNL the requested order determined by the range key. If the data type DCNL is Number, the results are returned in numeric order. For String, DCNL the results are returned in order of ASCII character code values. DCNL For Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values. DCNL If ScanIndexForward is not specified, the results are returned in DCNL ascending order. DCNL :type limit: integer DCNL :param limit: The maximum number of items to evaluate (not necessarily DCNL the number of matching items). DCNL Example:: DCNL # Look for last names equal to "Doe". DCNL >>> users.query_count(last_name__eq=\'Doe\') DCNL 5 DCNL # Use an LSI & a consistent read. DCNL >>> users.query_count( DCNL ...     date_joined__gte=1236451000, DCNL ...     owner__eq=1, DCNL ...     index=\'DateJoinedIndex\', DCNL ...     consistent=True DCNL 2'
def _query(self, limit=None, index=None, reverse=False, consistent=False, exclusive_start_key=None, select=None, attributes_to_get=None, query_filter=None, conditional_operator=None, **filter_kwargs): DCNL 'The internal method that performs the actual queries. Used extensively DCNL by ``ResultSet`` to perform each (paginated) request.'
def scan(self, limit=None, segment=None, total_segments=None, max_page_size=None, attributes=None, conditional_operator=None, **filter_kwargs): DCNL 'Scans across all items within a DynamoDB table. DCNL Scans can be performed against a hash key or a hash+range key. You can DCNL additionally filter the results after the table has been read but DCNL before the response is returned by using query filters. DCNL To specify the filters of the items you\'d like to get, you can specify DCNL the filters as kwargs. Each filter kwarg should follow the pattern DCNL ``<fieldname>__<filter_operation>=<value_to_look_for>``. DCNL Optionally accepts a ``limit`` parameter, which should be an integer DCNL count of the total number of items to return. (Default: ``None`` - DCNL all results) DCNL Optionally accepts a ``segment`` parameter, which should be an integer DCNL of the segment to retrieve on. Please see the documentation about DCNL Parallel Scans (Default: ``None`` - no segments) DCNL Optionally accepts a ``total_segments`` parameter, which should be an DCNL integer count of number of segments to divide the table into. DCNL Please see the documentation about Parallel Scans (Default: ``None`` - DCNL no segments) DCNL Optionally accepts a ``max_page_size`` parameter, which should be an DCNL integer count of the maximum number of items to retrieve DCNL **per-request**. This is useful in making faster requests & prevent DCNL the scan from drowning out other queries. (Default: ``None`` - DCNL fetch as many as DynamoDB will return) DCNL Optionally accepts an ``attributes`` parameter, which should be a DCNL tuple. If you provide any attributes only these will be fetched DCNL from DynamoDB. This uses the ``AttributesToGet`` and set\'s DCNL ``Select`` to ``SPECIFIC_ATTRIBUTES`` API. DCNL Returns a ``ResultSet``, which transparently handles the pagination of DCNL results you get back. DCNL Example:: DCNL # All results. DCNL >>> everything = users.scan() DCNL # Look for last names beginning with "D". DCNL >>> results = users.scan(last_name__beginswith=\'D\') DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'Alice\' DCNL \'John\' DCNL \'Jane\' DCNL # Use an ``IN`` filter & limit. DCNL >>> results = users.scan( DCNL ...     age__in=[25, 26, 27, 28, 29], DCNL ...     limit=1 DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'Alice\''
def _scan(self, limit=None, exclusive_start_key=None, segment=None, total_segments=None, attributes=None, conditional_operator=None, **filter_kwargs): DCNL 'The internal method that performs the actual scan. Used extensively DCNL by ``ResultSet`` to perform each (paginated) request.'
def batch_get(self, keys, consistent=False, attributes=None): DCNL 'Fetches many specific items in batch from a table. DCNL Requires a ``keys`` parameter, which should be a list of dictionaries. DCNL Each dictionary should consist of the keys values to specify. DCNL Optionally accepts a ``consistent`` parameter, which should be a DCNL boolean. If you provide ``True``, a strongly consistent read will be DCNL used. (Default: False) DCNL Optionally accepts an ``attributes`` parameter, which should be a DCNL tuple. If you provide any attributes only these will be fetched DCNL from DynamoDB. DCNL Returns a ``ResultSet``, which transparently handles the pagination of DCNL results you get back. DCNL Example:: DCNL >>> results = users.batch_get(keys=[ DCNL ...         \'username\': \'johndoe\', DCNL ...         \'username\': \'jane\', DCNL ...         \'username\': \'fred\', DCNL >>> for res in results: DCNL ...     print res[\'first_name\'] DCNL \'John\' DCNL \'Jane\' DCNL \'Fred\''
def _batch_get(self, keys, consistent=False, attributes=None): DCNL 'The internal method that performs the actual batch get. Used extensively DCNL by ``BatchGetResultSet`` to perform each (paginated) request.'
def count(self): DCNL 'Returns a (very) eventually consistent count of the number of items DCNL in a table. DCNL Lag time is about 6 hours, so don\'t expect a high degree of accuracy. DCNL Example:: DCNL >>> users.count() DCNL 6'
def __init__(self, name, data_type=STRING): DCNL 'Creates a Python schema field, to represent the data to pass to DCNL DynamoDB. DCNL Requires a ``name`` parameter, which should be a string name of the DCNL field. DCNL Optionally accepts a ``data_type`` parameter, which should be a DCNL constant from ``boto.dynamodb2.types``. (Default: ``STRING``)'
def definition(self): DCNL 'Returns the attribute definition structure DynamoDB expects. DCNL Example:: DCNL >>> field.definition() DCNL \'AttributeName\': \'username\', DCNL \'AttributeType\': \'S\','
def schema(self): DCNL 'Returns the schema structure DynamoDB expects. DCNL Example:: DCNL >>> field.schema() DCNL \'AttributeName\': \'username\', DCNL \'KeyType\': \'HASH\','
def definition(self): DCNL 'Returns the attribute definition structure DynamoDB expects. DCNL Example:: DCNL >>> index.definition() DCNL \'AttributeName\': \'username\', DCNL \'AttributeType\': \'S\','
def schema(self): DCNL 'Returns the schema structure DynamoDB expects. DCNL Example:: DCNL >>> index.schema() DCNL \'IndexName\': \'LastNameIndex\', DCNL \'KeySchema\': [ DCNL \'AttributeName\': \'username\', DCNL \'KeyType\': \'HASH\', DCNL \'Projection\': { DCNL \'ProjectionType\': \'KEYS_ONLY\','
def schema(self): DCNL 'Returns the schema structure DynamoDB expects. DCNL Example:: DCNL >>> index.schema() DCNL \'IndexName\': \'LastNameIndex\', DCNL \'KeySchema\': [ DCNL \'AttributeName\': \'username\', DCNL \'KeyType\': \'HASH\', DCNL \'Projection\': { DCNL \'ProjectionType\': \'KEYS_ONLY\', DCNL \'ProvisionedThroughput\': { DCNL \'ReadCapacityUnits\': 5, DCNL \'WriteCapacityUnits\': 5'
def batch_get_item(self, request_items, return_consumed_capacity=None): DCNL 'The BatchGetItem operation returns the attributes of one or DCNL more items from one or more tables. You identify requested DCNL items by primary key. DCNL A single operation can retrieve up to 16 MB of data, which can DCNL contain as many as 100 items. BatchGetItem will return a DCNL partial result if the response size limit is exceeded, the DCNL table\'s provisioned throughput is exceeded, or an internal DCNL processing failure occurs. If a partial result is returned, DCNL the operation returns a value for UnprocessedKeys . You can DCNL use this value to retry the operation starting with the next DCNL item to get. DCNL For example, if you ask to retrieve 100 items, but each DCNL individual item is 300 KB in size, the system returns 52 items DCNL (so as not to exceed the 16 MB limit). It also returns an DCNL appropriate UnprocessedKeys value so you can get the next page DCNL of results. If desired, your application can include its own DCNL logic to assemble the pages of results into one data set. DCNL If none of the items can be processed due to insufficient DCNL provisioned throughput on all of the tables in the request, DCNL then BatchGetItem will return a DCNL ProvisionedThroughputExceededException . If at least one of DCNL the items is successfully processed, then BatchGetItem DCNL completes successfully, while returning the keys of the unread DCNL items in UnprocessedKeys . DCNL If DynamoDB returns any unprocessed items, you should retry DCNL the batch operation on those items. However, we strongly DCNL recommend that you use an exponential backoff algorithm . If DCNL you retry the batch operation immediately, the underlying read DCNL or write requests can still fail due to throttling on the DCNL individual tables. If you delay the batch operation using DCNL exponential backoff, the individual requests in the batch are DCNL much more likely to succeed. DCNL For more information, go to `Batch Operations and Error DCNL Handling`_ in the Amazon DynamoDB Developer Guide . DCNL By default, BatchGetItem performs eventually consistent reads DCNL on every table in the request. If you want strongly consistent DCNL reads instead, you can set ConsistentRead to `True` for any or DCNL all tables. DCNL In order to minimize response latency, BatchGetItem retrieves DCNL items in parallel. DCNL When designing your application, keep in mind that DynamoDB DCNL does not return attributes in any particular order. To help DCNL parse the response by item, include the primary key values for DCNL the items in your request in the AttributesToGet parameter. DCNL If a requested item does not exist, it is not returned in the DCNL result. Requests for nonexistent items consume the minimum DCNL read capacity units according to the type of read. For more DCNL information, see `Capacity Units Calculations`_ in the Amazon DCNL DynamoDB Developer Guide . DCNL :type request_items: map DCNL :param request_items: DCNL A map of one or more table names and, for each table, the corresponding DCNL primary keys for the items to retrieve. Each table name can be DCNL invoked only once. DCNL Each element in the map consists of the following: DCNL + Keys - An array of primary key attribute values that define specific DCNL items in the table. For each primary key, you must provide all of DCNL the key attributes. For example, with a hash type primary key, you DCNL only need to specify the hash attribute. For a hash-and-range type DCNL primary key, you must specify both the hash attribute and the range DCNL attribute. DCNL + AttributesToGet - One or more attributes to be retrieved from the DCNL table. By default, all attributes are returned. If a specified DCNL attribute is not found, it does not appear in the result. Note that DCNL AttributesToGet has no effect on provisioned throughput DCNL consumption. DynamoDB determines capacity units consumed based on DCNL item size, not on the amount of data that is returned to an DCNL application. DCNL + ConsistentRead - If `True`, a strongly consistent read is used; if DCNL `False` (the default), an eventually consistent read is used. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response.'
def batch_write_item(self, request_items, return_consumed_capacity=None, return_item_collection_metrics=None): DCNL 'The BatchWriteItem operation puts or deletes multiple items in DCNL one or more tables. A single call to BatchWriteItem can write DCNL up to 16 MB of data, which can comprise as many as 25 put or DCNL delete requests. Individual items to be written can be as DCNL large as 400 KB. DCNL BatchWriteItem cannot update items. To update items, use the DCNL UpdateItem API. DCNL The individual PutItem and DeleteItem operations specified in DCNL BatchWriteItem are atomic; however BatchWriteItem as a whole DCNL is not. If any requested operations fail because the table\'s DCNL provisioned throughput is exceeded or an internal processing DCNL failure occurs, the failed operations are returned in the DCNL UnprocessedItems response parameter. You can investigate and DCNL optionally resend the requests. Typically, you would call DCNL BatchWriteItem in a loop. Each iteration would check for DCNL unprocessed items and submit a new BatchWriteItem request with DCNL those unprocessed items until all items have been processed. DCNL Note that if none of the items can be processed due to DCNL insufficient provisioned throughput on all of the tables in DCNL the request, then BatchWriteItem will return a DCNL ProvisionedThroughputExceededException . DCNL If DynamoDB returns any unprocessed items, you should retry DCNL the batch operation on those items. However, we strongly DCNL recommend that you use an exponential backoff algorithm . If DCNL you retry the batch operation immediately, the underlying read DCNL or write requests can still fail due to throttling on the DCNL individual tables. If you delay the batch operation using DCNL exponential backoff, the individual requests in the batch are DCNL much more likely to succeed. DCNL For more information, go to `Batch Operations and Error DCNL Handling`_ in the Amazon DynamoDB Developer Guide . DCNL With BatchWriteItem , you can efficiently write or delete DCNL large amounts of data, such as from Amazon Elastic MapReduce DCNL (EMR), or copy data from another database into DynamoDB. In DCNL order to improve performance with these large-scale DCNL operations, BatchWriteItem does not behave in the same way as DCNL individual PutItem and DeleteItem calls would For example, you DCNL cannot specify conditions on individual put and delete DCNL requests, and BatchWriteItem does not return deleted items in DCNL the response. DCNL If you use a programming language that supports concurrency, DCNL such as Java, you can use threads to write items in parallel. DCNL Your application must include the necessary logic to manage DCNL the threads. With languages that don\'t support threading, such DCNL as PHP, you must update or delete the specified items one at a DCNL time. In both situations, BatchWriteItem provides an DCNL alternative where the API performs the specified put and DCNL delete operations in parallel, giving you the power of the DCNL thread pool approach without having to introduce complexity DCNL into your application. DCNL Parallel processing reduces latency, but each specified put DCNL and delete request consumes the same number of write capacity DCNL units whether it is processed in parallel or not. Delete DCNL operations on nonexistent items consume one write capacity DCNL unit. DCNL If one or more of the following is true, DynamoDB rejects the DCNL entire batch write operation: DCNL + One or more tables specified in the BatchWriteItem request DCNL does not exist. DCNL + Primary key attributes specified on an item in the request DCNL do not match those in the corresponding table\'s primary key DCNL schema. DCNL + You try to perform multiple operations on the same item in DCNL the same BatchWriteItem request. For example, you cannot put DCNL and delete the same item in the same BatchWriteItem request. DCNL + There are more than 25 requests in the batch. DCNL + Any individual item in a batch exceeds 400 KB. DCNL + The total request size exceeds 16 MB. DCNL :type request_items: map DCNL :param request_items: DCNL A map of one or more table names and, for each table, a list of DCNL operations to be performed ( DeleteRequest or PutRequest ). Each DCNL element in the map consists of the following: DCNL + DeleteRequest - Perform a DeleteItem operation on the specified item. DCNL The item to be deleted is identified by a Key subelement: DCNL + Key - A map of primary key attribute values that uniquely identify DCNL the ! item. Each entry in this map consists of an attribute name DCNL and an attribute value. For each primary key, you must provide all DCNL of the key attributes. For example, with a hash type primary key, DCNL you only need to specify the hash attribute. For a hash-and-range DCNL type primary key, you must specify both the hash attribute and the DCNL range attribute. DCNL + PutRequest - Perform a PutItem operation on the specified item. The DCNL item to be put is identified by an Item subelement: DCNL + Item - A map of attributes and their values. Each entry in this map DCNL consists of an attribute name and an attribute value. Attribute DCNL values must not be null; string and binary type attributes must DCNL have lengths greater than zero; and set type attributes must not be DCNL empty. Requests that contain empty values will be rejected with a DCNL ValidationException exception. If you specify any attributes that DCNL are part of an index key, then the data types for those attributes DCNL must match those of the schema in the table\'s attribute definition. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type return_item_collection_metrics: string DCNL :param return_item_collection_metrics: A value that if set to `SIZE`, DCNL the response includes statistics about item collections, if any, DCNL that were modified during the operation are returned in the DCNL response. If set to `NONE` (the default), no statistics are DCNL returned.'
def create_table(self, attribute_definitions, table_name, key_schema, provisioned_throughput, local_secondary_indexes=None, global_secondary_indexes=None): DCNL 'The CreateTable operation adds a new table to your account. In DCNL an AWS account, table names must be unique within each region. DCNL That is, you can have two tables with same name if you create DCNL the tables in different regions. DCNL CreateTable is an asynchronous operation. Upon receiving a DCNL CreateTable request, DynamoDB immediately returns a response DCNL with a TableStatus of `CREATING`. After the table is created, DCNL DynamoDB sets the TableStatus to `ACTIVE`. You can perform DCNL read and write operations only on an `ACTIVE` table. DCNL You can optionally define secondary indexes on the new table, DCNL as part of the CreateTable operation. If you want to create DCNL multiple tables with secondary indexes on them, you must DCNL create the tables sequentially. Only one table with secondary DCNL indexes can be in the `CREATING` state at any given time. DCNL You can use the DescribeTable API to check the table status. DCNL :type attribute_definitions: list DCNL :param attribute_definitions: An array of attributes that describe the DCNL key schema for the table and indexes. DCNL :type table_name: string DCNL :param table_name: The name of the table to create. DCNL :type key_schema: list DCNL :param key_schema: Specifies the attributes that make up the primary DCNL key for a table or an index. The attributes in KeySchema must also DCNL be defined in the AttributeDefinitions array. For more information, DCNL see `Data Model`_ in the Amazon DynamoDB Developer Guide . DCNL Each KeySchemaElement in the array is composed of: DCNL + AttributeName - The name of this key attribute. DCNL + KeyType - Determines whether the key attribute is `HASH` or `RANGE`. DCNL For a primary key that consists of a hash attribute, you must specify DCNL exactly one element with a KeyType of `HASH`. DCNL For a primary key that consists of hash and range attributes, you must DCNL specify exactly two elements, in this order: The first element must DCNL have a KeyType of `HASH`, and the second element must have a DCNL KeyType of `RANGE`. DCNL For more information, see `Specifying the Primary Key`_ in the Amazon DCNL DynamoDB Developer Guide . DCNL :type local_secondary_indexes: list DCNL :param local_secondary_indexes: DCNL One or more local secondary indexes (the maximum is five) to be created DCNL on the table. Each index is scoped to a given hash key value. There DCNL is a 10 GB size limit per hash key; otherwise, the size of a local DCNL secondary index is unconstrained. DCNL Each local secondary index in the array includes the following: DCNL + IndexName - The name of the local secondary index. Must be unique DCNL only for this table. DCNL + KeySchema - Specifies the key schema for the local secondary index. DCNL The key schema must begin with the same hash key attribute as the DCNL table. DCNL + Projection - Specifies attributes that are copied (projected) from DCNL the table into the index. These are in addition to the primary key DCNL attributes and index key attributes, which are automatically DCNL projected. Each attribute specification is composed of: DCNL + ProjectionType - One of the following: DCNL + `KEYS_ONLY` - Only the index and primary keys are projected into the DCNL index. DCNL + `INCLUDE` - Only the specified table attributes are projected into DCNL the index. The list of projected attributes are in NonKeyAttributes DCNL + `ALL` - All of the table attributes are projected into the index. DCNL + NonKeyAttributes - A list of one or more non-key attribute names that DCNL are projected into the secondary index. The total count of DCNL attributes specified in NonKeyAttributes , summed across all of the DCNL secondary indexes, must not exceed 20. If you project the same DCNL attribute into two different indexes, this counts as two distinct DCNL attributes when determining the total. DCNL :type global_secondary_indexes: list DCNL :param global_secondary_indexes: DCNL One or more global secondary indexes (the maximum is five) to be DCNL created on the table. Each global secondary index in the array DCNL includes the following: DCNL + IndexName - The name of the global secondary index. Must be unique DCNL only for this table. DCNL + KeySchema - Specifies the key schema for the global secondary index. DCNL + Projection - Specifies attributes that are copied (projected) from DCNL the table into the index. These are in addition to the primary key DCNL attributes and index key attributes, which are automatically DCNL projected. Each attribute specification is composed of: DCNL + ProjectionType - One of the following: DCNL + `KEYS_ONLY` - Only the index and primary keys are projected into the DCNL index. DCNL + `INCLUDE` - Only the specified table attributes are projected into DCNL the index. The list of projected attributes are in NonKeyAttributes DCNL + `ALL` - All of the table attributes are projected into the index. DCNL + NonKeyAttributes - A list of one or more non-key attribute names that DCNL are projected into the secondary index. The total count of DCNL attributes specified in NonKeyAttributes , summed across all of the DCNL secondary indexes, must not exceed 20. If you project the same DCNL attribute into two different indexes, this counts as two distinct DCNL attributes when determining the total. DCNL + ProvisionedThroughput - The provisioned throughput settings for the DCNL global secondary index, consisting of read and write capacity DCNL units. DCNL :type provisioned_throughput: dict DCNL :param provisioned_throughput: Represents the provisioned throughput DCNL settings for a specified table or index. The settings can be DCNL modified using the UpdateTable operation. DCNL For current minimum and maximum provisioned throughput values, see DCNL `Limits`_ in the Amazon DynamoDB Developer Guide .'
def delete_item(self, table_name, key, expected=None, conditional_operator=None, return_values=None, return_consumed_capacity=None, return_item_collection_metrics=None, condition_expression=None, expression_attribute_names=None, expression_attribute_values=None): DCNL 'Deletes a single item in a table by primary key. You can DCNL perform a conditional delete operation that deletes the item DCNL if it exists, or if it has an expected attribute value. DCNL In addition to deleting an item, you can also return the DCNL item\'s attribute values in the same operation, using the DCNL ReturnValues parameter. DCNL Unless you specify conditions, the DeleteItem is an idempotent DCNL operation; running it multiple times on the same item or DCNL attribute does not result in an error response. DCNL Conditional deletes are useful for deleting items only if DCNL specific conditions are met. If those conditions are met, DCNL DynamoDB performs the delete. Otherwise, the item is not DCNL deleted. DCNL :type table_name: string DCNL :param table_name: The name of the table from which to delete the item. DCNL :type key: map DCNL :param key: A map of attribute names to AttributeValue objects, DCNL representing the primary key of the item to delete. DCNL For the primary key, you must provide all of the attributes. For DCNL example, with a hash type primary key, you only need to specify the DCNL hash attribute. For a hash-and-range type primary key, you must DCNL specify both the hash attribute and the range attribute. DCNL :type expected: map DCNL :param expected: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use Expected and ConditionExpression at the same DCNL time, DynamoDB will return a ValidationException exception. DCNL This parameter does not support lists or maps. DCNL A map of attribute/condition pairs. Expected provides a conditional DCNL block for the DeleteItem operation. DCNL Each element of Expected consists of an attribute name, a comparison DCNL operator, and one or more values. DynamoDB compares the attribute DCNL with the value(s) you supplied, using the comparison operator. For DCNL each Expected element, the result of the evaluation is either true DCNL or false. DCNL If you specify more than one element in the Expected map, then by DCNL default all of the conditions must evaluate to true. In other DCNL words, the conditions are ANDed together. (You can use the DCNL ConditionalOperator parameter to OR the conditions instead. If you DCNL do this, then at least one of the conditions must evaluate to true, DCNL rather than all of them.) DCNL If the Expected map evaluates to true, then the conditional operation DCNL succeeds; otherwise, it fails. DCNL Expected contains the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL ComparisonOperator being used. For type Number, value comparisons DCNL are numeric. String value comparisons for greater than, equals, or DCNL less than are based on ASCII character code values. For example, DCNL `a` is greater than `A`, and `a` is greater than `B`. For a list of DCNL code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For type Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. DCNL + ComparisonOperator - A comparator for evaluating attributes in the DCNL AttributeValueList . When performing the comparison, DynamoDB uses DCNL strongly consistent reads. The following comparison operators are DCNL available: `EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | DCNL CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN` The following DCNL are descriptions of each comparison operator. DCNL + `EQ` : Equal. `EQ` is supported for all datatypes, including lists DCNL and maps. AttributeValueList can contain only one AttributeValue DCNL element of type String, Number, Binary, String Set, Number Set, or DCNL Binary Set. If an item contains an AttributeValue element of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `NE` : Not equal. `NE` is supported for all datatypes, including DCNL lists and maps. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, Binary, String Set, Number DCNL Set, or Binary Set. If an item contains an AttributeValue of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `LE` : Less than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `LT` : Less than. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, or Binary (not a set type). DCNL If an item contains an AttributeValue element of a different type DCNL than the one specified in the request, the value does not match. DCNL For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GE` : Greater than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GT` : Greater than. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `NOT_NULL` : The attribute exists. `NOT_NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL existence of an attribute, not its data type. If the data type of DCNL attribute " `a`" is null, and you evaluate it using `NOT_NULL`, the DCNL result is a Boolean true . This result is because the attribute " DCNL `a`" exists; its data type is not relevant to the `NOT_NULL` DCNL comparison operator. DCNL + `NULL` : The attribute does not exist. `NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL nonexistence of an attribute, not its data type. If the data type DCNL of attribute " `a`" is null, and you evaluate it using `NULL`, the DCNL result is a Boolean false . This is because the attribute " `a`" DCNL exists; its data type is not relevant to the `NULL` comparison DCNL operator. DCNL + `CONTAINS` : Checks for a subsequence, or value in a set. DCNL AttributeValueList can contain only one AttributeValue element of DCNL type String, Number, or Binary (not a set type). If the target DCNL attribute of the comparison is of type String, then the operator DCNL checks for a substring match. If the target attribute of the DCNL comparison is of type Binary, then the operator looks for a DCNL subsequence of the target that matches the input. If the target DCNL attribute of the comparison is a set (" `SS`", " `NS`", or " DCNL `BS`"), then the operator evaluates to true if it finds an exact DCNL match with any member of the set. CONTAINS is supported for lists: DCNL When evaluating " `a CONTAINS b`", " `a`" can be a list; however, " DCNL `b`" cannot be a set, a map, or a list. DCNL + `NOT_CONTAINS` : Checks for absence of a subsequence, or absence of a DCNL value in a set. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If the target attribute of the comparison is a String, then DCNL the operator checks for the absence of a substring match. If the DCNL target attribute of the comparison is Binary, then the operator DCNL checks for the absence of a subsequence of the target that matches DCNL the input. If the target attribute of the comparison is a set (" DCNL `SS`", " `NS`", or " `BS`"), then the operator evaluates to true if DCNL it does not find an exact match with any member of the set. DCNL NOT_CONTAINS is supported for lists: When evaluating " `a NOT DCNL CONTAINS b`", " `a`" can be a list; however, " `b`" cannot be a DCNL set, a map, or a list. DCNL + `BEGINS_WITH` : Checks for a prefix. AttributeValueList can contain DCNL only one AttributeValue of type String or Binary (not a Number or a DCNL set type). The target attribute of the comparison must be of type DCNL String or Binary (not a Number or a set type). > <li> DCNL + `IN` : Checks for matching elements within two sets. DCNL AttributeValueList can contain one or more AttributeValue elements DCNL of type String, Number, or Binary (not a set type). These DCNL attributes are compared against an existing set type attribute of DCNL an item. If any elements of the input set are present in the item DCNL attribute, the expression evaluates to true. DCNL + `BETWEEN` : Greater than or equal to the first value, and less than DCNL or equal to the second value. AttributeValueList must contain two DCNL AttributeValue elements of the same type, either String, Number, or DCNL Binary (not a set type). A target attribute matches if the target DCNL value is greater than, or equal to, the first element and less DCNL than, or equal to, the second element. If an item contains an DCNL AttributeValue element of a different type than the one specified DCNL in the request, the value does not match. For example, `{"S":"6"}` DCNL does not compare to `{"N":"6"}`. Also, `{"N":"6"}` does not compare DCNL to `{"NS":["6", "2", "1"]}` DCNL For usage examples of AttributeValueList and ComparisonOperator , see DCNL `Legacy Conditional Parameters`_ in the Amazon DynamoDB Developer DCNL Guide . DCNL For backward compatibility with previous DynamoDB releases, the DCNL following parameters can be used instead of AttributeValueList and DCNL ComparisonOperator : DCNL + Value - A value for DynamoDB to compare with an attribute. DCNL + Exists - A Boolean value that causes DynamoDB to evaluate the value DCNL before attempting the conditional operation: DCNL + If Exists is `True`, DynamoDB will check to see if that attribute DCNL value already exists in the table. If it is found, then the DCNL condition evaluates to true; otherwise the condition evaluate to DCNL false. DCNL + If Exists is `False`, DynamoDB assumes that the attribute value does DCNL not exist in the table. If in fact the value does not exist, then DCNL the assumption is valid and the condition evaluates to true. If the DCNL value is found, despite the assumption that it does not exist, the DCNL condition evaluates to false. DCNL Note that the default value for Exists is `True`. DCNL The Value and Exists parameters are incompatible with DCNL AttributeValueList and ComparisonOperator . Note that if you use DCNL both sets of parameters at once, DynamoDB will return a DCNL ValidationException exception. DCNL :type conditional_operator: string DCNL :param conditional_operator: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use ConditionalOperator and ConditionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter does not support lists or maps. DCNL A logical operator to apply to the conditions in the Expected map: DCNL + `AND` - If all of the conditions evaluate to true, then the entire DCNL map evaluates to true. DCNL + `OR` - If at least one of the conditions evaluate to true, then the DCNL entire map evaluates to true. DCNL If you omit ConditionalOperator , then `AND` is the default. DCNL The operation will succeed only if the entire map evaluates to true. DCNL :type return_values: string DCNL :param return_values: DCNL Use ReturnValues if you want to get the item attributes as they DCNL appeared before they were deleted. For DeleteItem , the valid DCNL values are: DCNL + `NONE` - If ReturnValues is not specified, or if its value is `NONE`, DCNL then nothing is returned. (This setting is the default for DCNL ReturnValues .) DCNL + `ALL_OLD` - The content of the old item is returned. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type return_item_collection_metrics: string DCNL :param return_item_collection_metrics: A value that if set to `SIZE`, DCNL the response includes statistics about item collections, if any, DCNL that were modified during the operation are returned in the DCNL response. If set to `NONE` (the default), no statistics are DCNL returned. DCNL :type condition_expression: string DCNL :param condition_expression: A condition that must be satisfied in DCNL order for a conditional DeleteItem to succeed. DCNL An expression can contain any of the following: DCNL + Boolean functions: `attribute_exists | attribute_not_exists | DCNL contains | begins_with` These function names are case-sensitive. DCNL + Comparison operators: ` = | <> | < | > | <= DCNL | >= | BETWEEN | IN` DCNL + Logical operators: `AND | OR | NOT` DCNL For more information on condition expressions, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_values: map DCNL :param expression_attribute_values: One or more values that can be DCNL substituted in an expression. DCNL Use the **:** (colon) character in an expression to dereference an DCNL attribute value. For example, suppose that you wanted to check DCNL whether the value of the ProductStatus attribute was one of the DCNL following: DCNL `Available | Backordered | Discontinued` DCNL You would first need to specify ExpressionAttributeValues as follows: DCNL `{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, DCNL ":disc":{"S":"Discontinued"} }` DCNL You could then use these values in an expression, such as this: DCNL `ProductStatus IN (:avail, :back, :disc)` DCNL For more information on expression attribute values, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide .'
def delete_table(self, table_name): DCNL 'The DeleteTable operation deletes a table and all of its DCNL items. After a DeleteTable request, the specified table is in DCNL the `DELETING` state until DynamoDB completes the deletion. If DCNL the table is in the `ACTIVE` state, you can delete it. If a DCNL table is in `CREATING` or `UPDATING` states, then DynamoDB DCNL returns a ResourceInUseException . If the specified table does DCNL not exist, DynamoDB returns a ResourceNotFoundException . If DCNL table is already in the `DELETING` state, no error is DCNL returned. DCNL DynamoDB might continue to accept data read and write DCNL operations, such as GetItem and PutItem , on a table in the DCNL `DELETING` state until the table deletion is complete. DCNL When you delete a table, any indexes on that table are also DCNL deleted. DCNL Use the DescribeTable API to check the status of the table. DCNL :type table_name: string DCNL :param table_name: The name of the table to delete.'
def describe_table(self, table_name): DCNL 'Returns information about the table, including the current DCNL status of the table, when it was created, the primary key DCNL schema, and any indexes on the table. DCNL If you issue a DescribeTable request immediately after a DCNL CreateTable request, DynamoDB might return a DCNL ResourceNotFoundException. This is because DescribeTable uses DCNL an eventually consistent query, and the metadata for your DCNL table might not be available at that moment. Wait for a few DCNL seconds, and then try the DescribeTable request again. DCNL :type table_name: string DCNL :param table_name: The name of the table to describe.'
def get_item(self, table_name, key, attributes_to_get=None, consistent_read=None, return_consumed_capacity=None, projection_expression=None, expression_attribute_names=None): DCNL 'The GetItem operation returns a set of attributes for the item DCNL with the given primary key. If there is no matching item, DCNL GetItem does not return any data. DCNL GetItem provides an eventually consistent read by default. If DCNL your application requires a strongly consistent read, set DCNL ConsistentRead to `True`. Although a strongly consistent read DCNL might take more time than an eventually consistent read, it DCNL always returns the last updated value. DCNL :type table_name: string DCNL :param table_name: The name of the table containing the requested item. DCNL :type key: map DCNL :param key: A map of attribute names to AttributeValue objects, DCNL representing the primary key of the item to retrieve. DCNL For the primary key, you must provide all of the attributes. For DCNL example, with a hash type primary key, you only need to specify the DCNL hash attribute. For a hash-and-range type primary key, you must DCNL specify both the hash attribute and the range attribute. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: DCNL There is a newer parameter available. Use ProjectionExpression instead. DCNL Note that if you use AttributesToGet and ProjectionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter allows you to retrieve lists or maps; however, it cannot DCNL retrieve individual list or map elements. DCNL The names of one or more attributes to retrieve. If no attribute names DCNL are specified, then all attributes will be returned. If any of the DCNL requested attributes are not found, they will not appear in the DCNL result. DCNL Note that AttributesToGet has no effect on provisioned throughput DCNL consumption. DynamoDB determines capacity units consumed based on DCNL item size, not on the amount of data that is returned to an DCNL application. DCNL :type consistent_read: boolean DCNL :param consistent_read: A value that if set to `True`, then the DCNL operation uses strongly consistent reads; otherwise, eventually DCNL consistent reads are used. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type projection_expression: string DCNL :param projection_expression: A string that identifies one or more DCNL attributes to retrieve from the table. These attributes can include DCNL scalars, sets, or elements of a JSON document. The attributes in DCNL the expression must be separated by commas. DCNL If no attribute names are specified, then all attributes will be DCNL returned. If any of the requested attributes are not found, they DCNL will not appear in the result. DCNL For more information on projection expressions, go to `Accessing Item DCNL Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide .'
def list_tables(self, exclusive_start_table_name=None, limit=None): DCNL 'Returns an array of table names associated with the current DCNL account and endpoint. The output from ListTables is paginated, DCNL with each page returning a maximum of 100 table names. DCNL :type exclusive_start_table_name: string DCNL :param exclusive_start_table_name: The first table name that this DCNL operation will evaluate. Use the value that was returned for DCNL LastEvaluatedTableName in a previous operation, so that you can DCNL obtain the next page of results. DCNL :type limit: integer DCNL :param limit: A maximum number of table names to return. If this DCNL parameter is not specified, the limit is 100.'
def put_item(self, table_name, item, expected=None, return_values=None, return_consumed_capacity=None, return_item_collection_metrics=None, conditional_operator=None, condition_expression=None, expression_attribute_names=None, expression_attribute_values=None): DCNL 'Creates a new item, or replaces an old item with a new item. DCNL If an item that has the same primary key as the new item DCNL already exists in the specified table, the new item completely DCNL replaces the existing item. You can perform a conditional put DCNL operation (add a new item if one with the specified primary DCNL key doesn\'t exist), or replace an existing item if it has DCNL certain attribute values. DCNL In addition to putting an item, you can also return the item\'s DCNL attribute values in the same operation, using the ReturnValues DCNL parameter. DCNL When you add an item, the primary key attribute(s) are the DCNL only required attributes. Attribute values cannot be null. DCNL String and Binary type attributes must have lengths greater DCNL than zero. Set type attributes cannot be empty. Requests with DCNL empty values will be rejected with a ValidationException DCNL exception. DCNL You can request that PutItem return either a copy of the DCNL original item (before the update) or a copy of the updated DCNL item (after the update). For more information, see the DCNL ReturnValues description below. DCNL To prevent a new item from replacing an existing item, use a DCNL conditional put operation with ComparisonOperator set to DCNL `NULL` for the primary key attribute, or attributes. DCNL For more information about using this API, see `Working with DCNL Items`_ in the Amazon DynamoDB Developer Guide . DCNL :type table_name: string DCNL :param table_name: The name of the table to contain the item. DCNL :type item: map DCNL :param item: A map of attribute name/value pairs, one for each DCNL attribute. Only the primary key attributes are required; you can DCNL optionally provide other attribute name-value pairs for the item. DCNL You must provide all of the attributes for the primary key. For DCNL example, with a hash type primary key, you only need to specify the DCNL hash attribute. For a hash-and-range type primary key, you must DCNL specify both the hash attribute and the range attribute. DCNL If you specify any attributes that are part of an index key, then the DCNL data types for those attributes must match those of the schema in DCNL the table\'s attribute definition. DCNL For more information about primary keys, see `Primary Key`_ in the DCNL Amazon DynamoDB Developer Guide . DCNL Each element in the Item map is an AttributeValue object. DCNL :type expected: map DCNL :param expected: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use Expected and ConditionExpression at the same DCNL time, DynamoDB will return a ValidationException exception. DCNL This parameter does not support lists or maps. DCNL A map of attribute/condition pairs. Expected provides a conditional DCNL block for the PutItem operation. DCNL Each element of Expected consists of an attribute name, a comparison DCNL operator, and one or more values. DynamoDB compares the attribute DCNL with the value(s) you supplied, using the comparison operator. For DCNL each Expected element, the result of the evaluation is either true DCNL or false. DCNL If you specify more than one element in the Expected map, then by DCNL default all of the conditions must evaluate to true. In other DCNL words, the conditions are ANDed together. (You can use the DCNL ConditionalOperator parameter to OR the conditions instead. If you DCNL do this, then at least one of the conditions must evaluate to true, DCNL rather than all of them.) DCNL If the Expected map evaluates to true, then the conditional operation DCNL succeeds; otherwise, it fails. DCNL Expected contains the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL ComparisonOperator being used. For type Number, value comparisons DCNL are numeric. String value comparisons for greater than, equals, or DCNL less than are based on ASCII character code values. For example, DCNL `a` is greater than `A`, and `a` is greater than `B`. For a list of DCNL code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For type Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. DCNL + ComparisonOperator - A comparator for evaluating attributes in the DCNL AttributeValueList . When performing the comparison, DynamoDB uses DCNL strongly consistent reads. The following comparison operators are DCNL available: `EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | DCNL CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN` The following DCNL are descriptions of each comparison operator. DCNL + `EQ` : Equal. `EQ` is supported for all datatypes, including lists DCNL and maps. AttributeValueList can contain only one AttributeValue DCNL element of type String, Number, Binary, String Set, Number Set, or DCNL Binary Set. If an item contains an AttributeValue element of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `NE` : Not equal. `NE` is supported for all datatypes, including DCNL lists and maps. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, Binary, String Set, Number DCNL Set, or Binary Set. If an item contains an AttributeValue of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `LE` : Less than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `LT` : Less than. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, or Binary (not a set type). DCNL If an item contains an AttributeValue element of a different type DCNL than the one specified in the request, the value does not match. DCNL For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GE` : Greater than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GT` : Greater than. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `NOT_NULL` : The attribute exists. `NOT_NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL existence of an attribute, not its data type. If the data type of DCNL attribute " `a`" is null, and you evaluate it using `NOT_NULL`, the DCNL result is a Boolean true . This result is because the attribute " DCNL `a`" exists; its data type is not relevant to the `NOT_NULL` DCNL comparison operator. DCNL + `NULL` : The attribute does not exist. `NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL nonexistence of an attribute, not its data type. If the data type DCNL of attribute " `a`" is null, and you evaluate it using `NULL`, the DCNL result is a Boolean false . This is because the attribute " `a`" DCNL exists; its data type is not relevant to the `NULL` comparison DCNL operator. DCNL + `CONTAINS` : Checks for a subsequence, or value in a set. DCNL AttributeValueList can contain only one AttributeValue element of DCNL type String, Number, or Binary (not a set type). If the target DCNL attribute of the comparison is of type String, then the operator DCNL checks for a substring match. If the target attribute of the DCNL comparison is of type Binary, then the operator looks for a DCNL subsequence of the target that matches the input. If the target DCNL attribute of the comparison is a set (" `SS`", " `NS`", or " DCNL `BS`"), then the operator evaluates to true if it finds an exact DCNL match with any member of the set. CONTAINS is supported for lists: DCNL When evaluating " `a CONTAINS b`", " `a`" can be a list; however, " DCNL `b`" cannot be a set, a map, or a list. DCNL + `NOT_CONTAINS` : Checks for absence of a subsequence, or absence of a DCNL value in a set. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If the target attribute of the comparison is a String, then DCNL the operator checks for the absence of a substring match. If the DCNL target attribute of the comparison is Binary, then the operator DCNL checks for the absence of a subsequence of the target that matches DCNL the input. If the target attribute of the comparison is a set (" DCNL `SS`", " `NS`", or " `BS`"), then the operator evaluates to true if DCNL it does not find an exact match with any member of the set. DCNL NOT_CONTAINS is supported for lists: When evaluating " `a NOT DCNL CONTAINS b`", " `a`" can be a list; however, " `b`" cannot be a DCNL set, a map, or a list. DCNL + `BEGINS_WITH` : Checks for a prefix. AttributeValueList can contain DCNL only one AttributeValue of type String or Binary (not a Number or a DCNL set type). The target attribute of the comparison must be of type DCNL String or Binary (not a Number or a set type). > <li> DCNL + `IN` : Checks for matching elements within two sets. DCNL AttributeValueList can contain one or more AttributeValue elements DCNL of type String, Number, or Binary (not a set type). These DCNL attributes are compared against an existing set type attribute of DCNL an item. If any elements of the input set are present in the item DCNL attribute, the expression evaluates to true. DCNL + `BETWEEN` : Greater than or equal to the first value, and less than DCNL or equal to the second value. AttributeValueList must contain two DCNL AttributeValue elements of the same type, either String, Number, or DCNL Binary (not a set type). A target attribute matches if the target DCNL value is greater than, or equal to, the first element and less DCNL than, or equal to, the second element. If an item contains an DCNL AttributeValue element of a different type than the one specified DCNL in the request, the value does not match. For example, `{"S":"6"}` DCNL does not compare to `{"N":"6"}`. Also, `{"N":"6"}` does not compare DCNL to `{"NS":["6", "2", "1"]}` DCNL For usage examples of AttributeValueList and ComparisonOperator , see DCNL `Legacy Conditional Parameters`_ in the Amazon DynamoDB Developer DCNL Guide . DCNL For backward compatibility with previous DynamoDB releases, the DCNL following parameters can be used instead of AttributeValueList and DCNL ComparisonOperator : DCNL + Value - A value for DynamoDB to compare with an attribute. DCNL + Exists - A Boolean value that causes DynamoDB to evaluate the value DCNL before attempting the conditional operation: DCNL + If Exists is `True`, DynamoDB will check to see if that attribute DCNL value already exists in the table. If it is found, then the DCNL condition evaluates to true; otherwise the condition evaluate to DCNL false. DCNL + If Exists is `False`, DynamoDB assumes that the attribute value does DCNL not exist in the table. If in fact the value does not exist, then DCNL the assumption is valid and the condition evaluates to true. If the DCNL value is found, despite the assumption that it does not exist, the DCNL condition evaluates to false. DCNL Note that the default value for Exists is `True`. DCNL The Value and Exists parameters are incompatible with DCNL AttributeValueList and ComparisonOperator . Note that if you use DCNL both sets of parameters at once, DynamoDB will return a DCNL ValidationException exception. DCNL :type return_values: string DCNL :param return_values: DCNL Use ReturnValues if you want to get the item attributes as they DCNL appeared before they were updated with the PutItem request. For DCNL PutItem , the valid values are: DCNL + `NONE` - If ReturnValues is not specified, or if its value is `NONE`, DCNL then nothing is returned. (This setting is the default for DCNL ReturnValues .) DCNL + `ALL_OLD` - If PutItem overwrote an attribute name-value pair, then DCNL the content of the old item is returned. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type return_item_collection_metrics: string DCNL :param return_item_collection_metrics: A value that if set to `SIZE`, DCNL the response includes statistics about item collections, if any, DCNL that were modified during the operation are returned in the DCNL response. If set to `NONE` (the default), no statistics are DCNL returned. DCNL :type conditional_operator: string DCNL :param conditional_operator: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use ConditionalOperator and ConditionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter does not support lists or maps. DCNL A logical operator to apply to the conditions in the Expected map: DCNL + `AND` - If all of the conditions evaluate to true, then the entire DCNL map evaluates to true. DCNL + `OR` - If at least one of the conditions evaluate to true, then the DCNL entire map evaluates to true. DCNL If you omit ConditionalOperator , then `AND` is the default. DCNL The operation will succeed only if the entire map evaluates to true. DCNL :type condition_expression: string DCNL :param condition_expression: A condition that must be satisfied in DCNL order for a conditional PutItem operation to succeed. DCNL An expression can contain any of the following: DCNL + Boolean functions: `attribute_exists | attribute_not_exists | DCNL contains | begins_with` These function names are case-sensitive. DCNL + Comparison operators: ` = | <> | < | > | <= DCNL | >= | BETWEEN | IN` DCNL + Logical operators: `AND | OR | NOT` DCNL For more information on condition expressions, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_values: map DCNL :param expression_attribute_values: One or more values that can be DCNL substituted in an expression. DCNL Use the **:** (colon) character in an expression to dereference an DCNL attribute value. For example, suppose that you wanted to check DCNL whether the value of the ProductStatus attribute was one of the DCNL following: DCNL `Available | Backordered | Discontinued` DCNL You would first need to specify ExpressionAttributeValues as follows: DCNL `{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, DCNL ":disc":{"S":"Discontinued"} }` DCNL You could then use these values in an expression, such as this: DCNL `ProductStatus IN (:avail, :back, :disc)` DCNL For more information on expression attribute values, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide .'
def query(self, table_name, key_conditions, index_name=None, select=None, attributes_to_get=None, limit=None, consistent_read=None, query_filter=None, conditional_operator=None, scan_index_forward=None, exclusive_start_key=None, return_consumed_capacity=None, projection_expression=None, filter_expression=None, expression_attribute_names=None, expression_attribute_values=None): DCNL 'A Query operation directly accesses items from a table using DCNL the table primary key, or from an index using the index key. DCNL You must provide a specific hash key value. You can narrow the DCNL scope of the query by using comparison operators on the range DCNL key value, or on the index key. You can use the DCNL ScanIndexForward parameter to get results in forward or DCNL reverse order, by range key or by index key. DCNL Queries that do not return results consume the minimum number DCNL of read capacity units for that type of read operation. DCNL If the total number of items meeting the query criteria DCNL exceeds the result set size limit of 1 MB, the query stops and DCNL results are returned to the user with LastEvaluatedKey to DCNL continue the query in a subsequent operation. Unlike a Scan DCNL operation, a Query operation never returns both an empty DCNL result set and a LastEvaluatedKey . The LastEvaluatedKey is DCNL only provided if the results exceed 1 MB, or if you have used DCNL Limit . DCNL You can query a table, a local secondary index, or a global DCNL secondary index. For a query on a table or on a local DCNL secondary index, you can set ConsistentRead to true and obtain DCNL a strongly consistent result. Global secondary indexes support DCNL eventually consistent reads only, so do not specify DCNL ConsistentRead when querying a global secondary index. DCNL :type table_name: string DCNL :param table_name: The name of the table containing the requested DCNL items. DCNL :type index_name: string DCNL :param index_name: The name of an index to query. This index can be any DCNL local secondary index or global secondary index on the table. DCNL :type select: string DCNL :param select: The attributes to be returned in the result. You can DCNL retrieve all item attributes, specific item attributes, the count DCNL of matching items, or in the case of an index, some or all of the DCNL attributes projected into the index. DCNL + `ALL_ATTRIBUTES` - Returns all of the item attributes from the DCNL specified table or index. If you query a local secondary index, DCNL then for each matching item in the index DynamoDB will fetch the DCNL entire item from the parent table. If the index is configured to DCNL project all item attributes, then all of the data can be obtained DCNL from the local secondary index, and no fetching is required. DCNL + `ALL_PROJECTED_ATTRIBUTES` - Allowed only when querying an index. DCNL Retrieves all attributes that have been projected into the index. DCNL If the index is configured to project all attributes, this return DCNL value is equivalent to specifying `ALL_ATTRIBUTES`. DCNL + `COUNT` - Returns the number of matching items, rather than the DCNL matching items themselves. DCNL + `SPECIFIC_ATTRIBUTES` - Returns only the attributes listed in DCNL AttributesToGet . This return value is equivalent to specifying DCNL AttributesToGet without specifying any value for Select . If you DCNL query a local secondary index and request only attributes that are DCNL projected into that index, the operation will read only the index DCNL and not the table. If any of the requested attributes are not DCNL projected into the local secondary index, DynamoDB will fetch each DCNL of these attributes from the parent table. This extra fetching DCNL incurs additional throughput cost and latency. If you query a DCNL global secondary index, you can only request attributes that are DCNL projected into the index. Global secondary index queries cannot DCNL fetch attributes from the parent table. DCNL If neither Select nor AttributesToGet are specified, DynamoDB defaults DCNL to `ALL_ATTRIBUTES` when accessing a table, and DCNL `ALL_PROJECTED_ATTRIBUTES` when accessing an index. You cannot use DCNL both Select and AttributesToGet together in a single request, DCNL unless the value for Select is `SPECIFIC_ATTRIBUTES`. (This usage DCNL is equivalent to specifying AttributesToGet without any value for DCNL Select .) DCNL :type attributes_to_get: list DCNL :param attributes_to_get: DCNL There is a newer parameter available. Use ProjectionExpression instead. DCNL Note that if you use AttributesToGet and ProjectionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter allows you to retrieve lists or maps; however, it cannot DCNL retrieve individual list or map elements. DCNL The names of one or more attributes to retrieve. If no attribute names DCNL are specified, then all attributes will be returned. If any of the DCNL requested attributes are not found, they will not appear in the DCNL result. DCNL Note that AttributesToGet has no effect on provisioned throughput DCNL consumption. DynamoDB determines capacity units consumed based on DCNL item size, not on the amount of data that is returned to an DCNL application. DCNL You cannot use both AttributesToGet and Select together in a Query DCNL request, unless the value for Select is `SPECIFIC_ATTRIBUTES`. DCNL (This usage is equivalent to specifying AttributesToGet without any DCNL value for Select .) DCNL If you query a local secondary index and request only attributes that DCNL are projected into that index, the operation will read only the DCNL index and not the table. If any of the requested attributes are not DCNL projected into the local secondary index, DynamoDB will fetch each DCNL of these attributes from the parent table. This extra fetching DCNL incurs additional throughput cost and latency. DCNL If you query a global secondary index, you can only request attributes DCNL that are projected into the index. Global secondary index queries DCNL cannot fetch attributes from the parent table. DCNL :type limit: integer DCNL :param limit: The maximum number of items to evaluate (not necessarily DCNL the number of matching items). If DynamoDB processes the number of DCNL items up to the limit while processing the results, it stops the DCNL operation and returns the matching values up to that point, and a DCNL key in LastEvaluatedKey to apply in a subsequent operation, so that DCNL you can pick up where you left off. Also, if the processed data set DCNL size exceeds 1 MB before DynamoDB reaches this limit, it stops the DCNL operation and returns the matching values up to the limit, and a DCNL key in LastEvaluatedKey to apply in a subsequent operation to DCNL continue the operation. For more information, see `Query and Scan`_ DCNL in the Amazon DynamoDB Developer Guide . DCNL :type consistent_read: boolean DCNL :param consistent_read: A value that if set to `True`, then the DCNL operation uses strongly consistent reads; otherwise, eventually DCNL consistent reads are used. DCNL Strongly consistent reads are not supported on global secondary DCNL indexes. If you query a global secondary index with ConsistentRead DCNL set to `True`, you will receive an error message. DCNL :type key_conditions: map DCNL :param key_conditions: The selection criteria for the query. For a DCNL query on a table, you can have conditions only on the table primary DCNL key attributes. You must specify the hash key attribute name and DCNL value as an `EQ` condition. You can optionally specify a second DCNL condition, referring to the range key attribute. If you do not DCNL specify a range key condition, all items under the hash key will be DCNL fetched and processed. Any filters will applied after this. DCNL For a query on an index, you can have conditions only on the index key DCNL attributes. You must specify the index hash attribute name and DCNL value as an EQ condition. You can optionally specify a second DCNL condition, referring to the index key range attribute. DCNL Each KeyConditions element consists of an attribute name to compare, DCNL along with the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL ComparisonOperator being used. For type Number, value comparisons DCNL are numeric. String value comparisons for greater than, equals, or DCNL less than are based on ASCII character code values. For example, DCNL `a` is greater than `A`, and `a` is greater than `B`. For a list of DCNL code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. DCNL + ComparisonOperator - A comparator for evaluating attributes, for DCNL example, equals, greater than, less than, and so on. For DCNL KeyConditions , only the following comparison operators are DCNL supported: `EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN` The DCNL following are descriptions of these comparison operators. DCNL + `EQ` : Equal. AttributeValueList can contain only one AttributeValue DCNL of type String, Number, or Binary (not a set type). If an item DCNL contains an AttributeValue element of a different type than the one DCNL specified in the request, the value does not match. For example, DCNL `{"S":"6"}` does not equal `{"N":"6"}`. Also, `{"N":"6"}` does not DCNL equal `{"NS":["6", "2", "1"]}`. DCNL + `LE` : Less than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `LT` : Less than. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, or Binary (not a set type). DCNL If an item contains an AttributeValue element of a different type DCNL than the one specified in the request, the value does not match. DCNL For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GE` : Greater than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GT` : Greater than. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `BEGINS_WITH` : Checks for a prefix. AttributeValueList can contain DCNL only one AttributeValue of type String or Binary (not a Number or a DCNL set type). The target attribute of the comparison must be of type DCNL String or Binary (not a Number or a set type). > <li> DCNL + `BETWEEN` : Greater than or equal to the first value, and less than DCNL or equal to the second value. AttributeValueList must contain two DCNL AttributeValue elements of the same type, either String, Number, or DCNL Binary (not a set type). A target attribute matches if the target DCNL value is greater than, or equal to, the first element and less DCNL than, or equal to, the second element. If an item contains an DCNL AttributeValue element of a different type than the one specified DCNL in the request, the value does not match. For example, `{"S":"6"}` DCNL does not compare to `{"N":"6"}`. Also, `{"N":"6"}` does not compare DCNL to `{"NS":["6", "2", "1"]}` DCNL For usage examples of AttributeValueList and ComparisonOperator , see DCNL `Legacy Conditional Parameters`_ in the Amazon DynamoDB Developer DCNL Guide . DCNL :type query_filter: map DCNL :param query_filter: DCNL There is a newer parameter available. Use FilterExpression instead. DCNL Note that if you use QueryFilter and FilterExpression at the same DCNL time, DynamoDB will return a ValidationException exception. DCNL This parameter does not support lists or maps. DCNL A condition that evaluates the query results after the items are read DCNL and returns only the desired values. DCNL Query filters are applied after the items are read, so they do not DCNL limit the capacity used. DCNL If you specify more than one condition in the QueryFilter map, then by DCNL default all of the conditions must evaluate to true. In other DCNL words, the conditions are ANDed together. (You can use the DCNL ConditionalOperator parameter to OR the conditions instead. If you DCNL do this, then at least one of the conditions must evaluate to true, DCNL rather than all of them.) DCNL QueryFilter does not allow key attributes. You cannot define a filter DCNL condition on a hash key or range key. DCNL Each QueryFilter element consists of an attribute name to compare, DCNL along with the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL operator specified in ComparisonOperator . For type Number, value DCNL comparisons are numeric. String value comparisons for greater than, DCNL equals, or less than are based on ASCII character code values. For DCNL example, `a` is greater than `A`, and `a` is greater than `B`. For DCNL a list of code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For type Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. For information on specifying data DCNL types in JSON, see `JSON Data Format`_ in the Amazon DynamoDB DCNL Developer Guide . DCNL + ComparisonOperator - A comparator for evaluating attributes. For DCNL example, equals, greater than, less than, etc. The following DCNL comparison operators are available: `EQ | NE | LE | LT | GE | GT | DCNL NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | DCNL BETWEEN` For complete descriptions of all comparison operators, see DCNL `API_Condition.html`_. DCNL :type conditional_operator: string DCNL :param conditional_operator: DCNL This parameter does not support lists or maps. DCNL A logical operator to apply to the conditions in the QueryFilter map: DCNL + `AND` - If all of the conditions evaluate to true, then the entire DCNL map evaluates to true. DCNL + `OR` - If at least one of the conditions evaluate to true, then the DCNL entire map evaluates to true. DCNL If you omit ConditionalOperator , then `AND` is the default. DCNL The operation will succeed only if the entire map evaluates to true. DCNL :type scan_index_forward: boolean DCNL :param scan_index_forward: A value that specifies ascending (true) or DCNL descending (false) traversal of the index. DynamoDB returns results DCNL reflecting the requested order determined by the range key. If the DCNL data type is Number, the results are returned in numeric order. For DCNL type String, the results are returned in order of ASCII character DCNL code values. For type Binary, DynamoDB treats each byte of the DCNL binary data as unsigned when it compares binary values. DCNL If ScanIndexForward is not specified, the results are returned in DCNL ascending order. DCNL :type exclusive_start_key: map DCNL :param exclusive_start_key: The primary key of the first item that this DCNL operation will evaluate. Use the value that was returned for DCNL LastEvaluatedKey in the previous operation. DCNL The data type for ExclusiveStartKey must be String, Number or Binary. DCNL No set data types are allowed. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type projection_expression: string DCNL :param projection_expression: A string that identifies one or more DCNL attributes to retrieve from the table. These attributes can include DCNL scalars, sets, or elements of a JSON document. The attributes in DCNL the expression must be separated by commas. DCNL If no attribute names are specified, then all attributes will be DCNL returned. If any of the requested attributes are not found, they DCNL will not appear in the result. DCNL For more information on projection expressions, go to `Accessing Item DCNL Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type filter_expression: string DCNL :param filter_expression: A condition that evaluates the query results DCNL after the items are read and returns only the desired values. DCNL The condition you specify is applied to the items queried; any items DCNL that do not match the expression are not returned. DCNL Filter expressions are applied after the items are read, so they do not DCNL limit the capacity used. DCNL A FilterExpression has the same syntax as a ConditionExpression . For DCNL more information on expression syntax, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_values: map DCNL :param expression_attribute_values: One or more values that can be DCNL substituted in an expression. DCNL Use the **:** (colon) character in an expression to dereference an DCNL attribute value. For example, suppose that you wanted to check DCNL whether the value of the ProductStatus attribute was one of the DCNL following: DCNL `Available | Backordered | Discontinued` DCNL You would first need to specify ExpressionAttributeValues as follows: DCNL `{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, DCNL ":disc":{"S":"Discontinued"} }` DCNL You could then use these values in an expression, such as this: DCNL `ProductStatus IN (:avail, :back, :disc)` DCNL For more information on expression attribute values, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide .'
def scan(self, table_name, attributes_to_get=None, limit=None, select=None, scan_filter=None, conditional_operator=None, exclusive_start_key=None, return_consumed_capacity=None, total_segments=None, segment=None, projection_expression=None, filter_expression=None, expression_attribute_names=None, expression_attribute_values=None): DCNL 'The Scan operation returns one or more items and item DCNL attributes by accessing every item in the table. To have DCNL DynamoDB return fewer items, you can provide a ScanFilter DCNL operation. DCNL If the total number of scanned items exceeds the maximum data DCNL set size limit of 1 MB, the scan stops and results are DCNL returned to the user as a LastEvaluatedKey value to continue DCNL the scan in a subsequent operation. The results also include DCNL the number of items exceeding the limit. A scan can result in DCNL no table data meeting the filter criteria. DCNL The result set is eventually consistent. DCNL By default, Scan operations proceed sequentially; however, for DCNL faster performance on large tables, applications can request a DCNL parallel Scan operation by specifying the Segment and DCNL TotalSegments parameters. For more information, see `Parallel DCNL Scan`_ in the Amazon DynamoDB Developer Guide . DCNL :type table_name: string DCNL :param table_name: The name of the table containing the requested DCNL items. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: DCNL There is a newer parameter available. Use ProjectionExpression instead. DCNL Note that if you use AttributesToGet and ProjectionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter allows you to retrieve lists or maps; however, it cannot DCNL retrieve individual list or map elements. DCNL The names of one or more attributes to retrieve. If no attribute names DCNL are specified, then all attributes will be returned. If any of the DCNL requested attributes are not found, they will not appear in the DCNL result. DCNL Note that AttributesToGet has no effect on provisioned throughput DCNL consumption. DynamoDB determines capacity units consumed based on DCNL item size, not on the amount of data that is returned to an DCNL application. DCNL :type limit: integer DCNL :param limit: The maximum number of items to evaluate (not necessarily DCNL the number of matching items). If DynamoDB processes the number of DCNL items up to the limit while processing the results, it stops the DCNL operation and returns the matching values up to that point, and a DCNL key in LastEvaluatedKey to apply in a subsequent operation, so that DCNL you can pick up where you left off. Also, if the processed data set DCNL size exceeds 1 MB before DynamoDB reaches this limit, it stops the DCNL operation and returns the matching values up to the limit, and a DCNL key in LastEvaluatedKey to apply in a subsequent operation to DCNL continue the operation. For more information, see `Query and Scan`_ DCNL in the Amazon DynamoDB Developer Guide . DCNL :type select: string DCNL :param select: The attributes to be returned in the result. You can DCNL retrieve all item attributes, specific item attributes, or the DCNL count of matching items. DCNL + `ALL_ATTRIBUTES` - Returns all of the item attributes. DCNL + `COUNT` - Returns the number of matching items, rather than the DCNL matching items themselves. DCNL + `SPECIFIC_ATTRIBUTES` - Returns only the attributes listed in DCNL AttributesToGet . This return value is equivalent to specifying DCNL AttributesToGet without specifying any value for Select . DCNL If neither Select nor AttributesToGet are specified, DynamoDB defaults DCNL to `ALL_ATTRIBUTES`. You cannot use both AttributesToGet and Select DCNL together in a single request, unless the value for Select is DCNL `SPECIFIC_ATTRIBUTES`. (This usage is equivalent to specifying DCNL AttributesToGet without any value for Select .) DCNL :type scan_filter: map DCNL :param scan_filter: DCNL There is a newer parameter available. Use FilterExpression instead. DCNL Note that if you use ScanFilter and FilterExpression at the same DCNL time, DynamoDB will return a ValidationException exception. DCNL This parameter does not support lists or maps. DCNL A condition that evaluates the scan results and returns only the DCNL desired values. DCNL If you specify more than one condition in the ScanFilter map, then by DCNL default all of the conditions must evaluate to true. In other DCNL words, the conditions are ANDed together. (You can use the DCNL ConditionalOperator parameter to OR the conditions instead. If you DCNL do this, then at least one of the conditions must evaluate to true, DCNL rather than all of them.) DCNL Each ScanFilter element consists of an attribute name to compare, along DCNL with the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL operator specified in ComparisonOperator . For type Number, value DCNL comparisons are numeric. String value comparisons for greater than, DCNL equals, or less than are based on ASCII character code values. For DCNL example, `a` is greater than `A`, and `a` is greater than `B`. For DCNL a list of code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. For information on specifying data DCNL types in JSON, see `JSON Data Format`_ in the Amazon DynamoDB DCNL Developer Guide . DCNL + ComparisonOperator - A comparator for evaluating attributes. For DCNL example, equals, greater than, less than, etc. The following DCNL comparison operators are available: `EQ | NE | LE | LT | GE | GT | DCNL NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | DCNL BETWEEN` For complete descriptions of all comparison operators, see DCNL `Condition`_. DCNL :type conditional_operator: string DCNL :param conditional_operator: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use ConditionalOperator and ConditionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter does not support lists or maps. DCNL A logical operator to apply to the conditions in the ScanFilter map: DCNL + `AND` - If all of the conditions evaluate to true, then the entire DCNL map evaluates to true. DCNL + `OR` - If at least one of the conditions evaluate to true, then the DCNL entire map evaluates to true. DCNL If you omit ConditionalOperator , then `AND` is the default. DCNL The operation will succeed only if the entire map evaluates to true. DCNL :type exclusive_start_key: map DCNL :param exclusive_start_key: The primary key of the first item that this DCNL operation will evaluate. Use the value that was returned for DCNL LastEvaluatedKey in the previous operation. DCNL The data type for ExclusiveStartKey must be String, Number or Binary. DCNL No set data types are allowed. DCNL In a parallel scan, a Scan request that includes ExclusiveStartKey must DCNL specify the same segment whose previous Scan returned the DCNL corresponding value of LastEvaluatedKey . DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type total_segments: integer DCNL :param total_segments: For a parallel Scan request, TotalSegments DCNL represents the total number of segments into which the Scan DCNL operation will be divided. The value of TotalSegments corresponds DCNL to the number of application workers that will perform the parallel DCNL scan. For example, if you want to scan a table using four DCNL application threads, specify a TotalSegments value of 4. DCNL The value for TotalSegments must be greater than or equal to 1, and DCNL less than or equal to 1000000. If you specify a TotalSegments value DCNL of 1, the Scan operation will be sequential rather than parallel. DCNL If you specify TotalSegments , you must also specify Segment . DCNL :type segment: integer DCNL :param segment: For a parallel Scan request, Segment identifies an DCNL individual segment to be scanned by an application worker. DCNL Segment IDs are zero-based, so the first segment is always 0. For DCNL example, if you want to scan a table using four application DCNL threads, the first thread specifies a Segment value of 0, the DCNL second thread specifies 1, and so on. DCNL The value of LastEvaluatedKey returned from a parallel Scan request DCNL must be used as ExclusiveStartKey with the same segment ID in a DCNL subsequent Scan operation. DCNL The value for Segment must be greater than or equal to 0, and less than DCNL the value provided for TotalSegments . DCNL If you specify Segment , you must also specify TotalSegments . DCNL :type projection_expression: string DCNL :param projection_expression: A string that identifies one or more DCNL attributes to retrieve from the table. These attributes can include DCNL scalars, sets, or elements of a JSON document. The attributes in DCNL the expression must be separated by commas. DCNL If no attribute names are specified, then all attributes will be DCNL returned. If any of the requested attributes are not found, they DCNL will not appear in the result. DCNL For more information on projection expressions, go to `Accessing Item DCNL Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type filter_expression: string DCNL :param filter_expression: A condition that evaluates the scan results DCNL and returns only the desired values. DCNL The condition you specify is applied to the items scanned; any items DCNL that do not match the expression are not returned. DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_values: map DCNL :param expression_attribute_values: One or more values that can be DCNL substituted in an expression. DCNL Use the **:** (colon) character in an expression to dereference an DCNL attribute value. For example, suppose that you wanted to check DCNL whether the value of the ProductStatus attribute was one of the DCNL following: DCNL `Available | Backordered | Discontinued` DCNL You would first need to specify ExpressionAttributeValues as follows: DCNL `{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, DCNL ":disc":{"S":"Discontinued"} }` DCNL You could then use these values in an expression, such as this: DCNL `ProductStatus IN (:avail, :back, :disc)` DCNL For more information on expression attribute values, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide .'
def update_item(self, table_name, key, attribute_updates=None, expected=None, conditional_operator=None, return_values=None, return_consumed_capacity=None, return_item_collection_metrics=None, update_expression=None, condition_expression=None, expression_attribute_names=None, expression_attribute_values=None): DCNL 'Edits an existing item\'s attributes, or adds a new item to the DCNL table if it does not already exist. You can put, delete, or DCNL add attribute values. You can also perform a conditional DCNL update (insert a new attribute name-value pair if it doesn\'t DCNL exist, or replace an existing name-value pair if it has DCNL certain expected attribute values). DCNL You can also return the item\'s attribute values in the same DCNL UpdateItem operation using the ReturnValues parameter. DCNL :type table_name: string DCNL :param table_name: The name of the table containing the item to update. DCNL :type key: map DCNL :param key: The primary key of the item to be updated. Each element DCNL consists of an attribute name and a value for that attribute. DCNL For the primary key, you must provide all of the attributes. For DCNL example, with a hash type primary key, you only need to specify the DCNL hash attribute. For a hash-and-range type primary key, you must DCNL specify both the hash attribute and the range attribute. DCNL :type attribute_updates: map DCNL :param attribute_updates: DCNL There is a newer parameter available. Use UpdateExpression instead. DCNL Note that if you use AttributeUpdates and UpdateExpression at the DCNL same time, DynamoDB will return a ValidationException exception. DCNL This parameter can be used for modifying top-level attributes; however, DCNL it does not support individual list or map elements. DCNL The names of attributes to be modified, the action to perform on each, DCNL and the new value for each. If you are updating an attribute that DCNL is an index key attribute for any indexes on that table, the DCNL attribute type must match the index key type defined in the DCNL AttributesDefinition of the table description. You can use DCNL UpdateItem to update any nonkey attributes. DCNL Attribute values cannot be null. String and Binary type attributes must DCNL have lengths greater than zero. Set type attributes must not be DCNL empty. Requests with empty values will be rejected with a DCNL ValidationException exception. DCNL Each AttributeUpdates element consists of an attribute name to modify, DCNL along with the following: DCNL + Value - The new value, if applicable, for this attribute. DCNL + Action - A value that specifies how to perform the update. This DCNL action is only valid for an existing attribute whose data type is DCNL Number or is a set; do not use `ADD` for other data types. If an DCNL item with the specified primary key is found in the table, the DCNL following values perform the following actions: DCNL + `PUT` - Adds the specified attribute to the item. If the attribute DCNL already exists, it is replaced by the new value. DCNL + `DELETE` - Removes the attribute and its value, if no value is DCNL specified for `DELETE`. The data type of the specified value must DCNL match the existing value\'s data type. If a set of values is DCNL specified, then those values are subtracted from the old set. For DCNL example, if the attribute value was the set `[a,b,c]` and the DCNL `DELETE` action specifies `[a,c]`, then the final attribute value DCNL is `[b]`. Specifying an empty set is an error. DCNL + `ADD` - Adds the specified value to the item, if the attribute does DCNL not already exist. If the attribute does exist, then the behavior DCNL of `ADD` depends on the data type of the attribute: DCNL + If the existing attribute is a number, and if Value is also a number, DCNL then Value is mathematically added to the existing attribute. If DCNL Value is a negative number, then it is subtracted from the existing DCNL attribute. If you use `ADD` to increment or decrement a number DCNL value for an item that doesn\'t exist before the update, DynamoDB DCNL uses 0 as the initial value. Similarly, if you use `ADD` for an DCNL existing item to increment or decrement an attribute value that DCNL doesn\'t exist before the update, DynamoDB uses `0` as the initial DCNL value. For example, suppose that the item you want to update DCNL doesn\'t have an attribute named itemcount , but you decide to `ADD` DCNL the number `3` to this attribute anyway. DynamoDB will create the DCNL itemcount attribute, set its initial value to `0`, and finally add DCNL `3` to it. The result will be a new itemcount attribute, with a DCNL value of `3`. DCNL + If the existing data type is a set, and if Value is also a set, then DCNL Value is appended to the existing set. For example, if the DCNL attribute value is the set `[1,2]`, and the `ADD` action specified DCNL `[3]`, then the final attribute value is `[1,2,3]`. An error occurs DCNL if an `ADD` action is specified for a set attribute and the DCNL attribute type specified does not match the existing set type. Both DCNL sets must have the same primitive data type. For example, if the DCNL existing data type is a set of strings, Value must also be a set of DCNL strings. DCNL If no item with the specified key is found in the table, the following DCNL values perform the following actions: DCNL + `PUT` - Causes DynamoDB to create a new item with the specified DCNL primary key, and then adds the attribute. DCNL + `DELETE` - Nothing happens, because attributes cannot be deleted from DCNL a nonexistent item. The operation succeeds, but DynamoDB does not DCNL create a new item. DCNL + `ADD` - Causes DynamoDB to create an item with the supplied primary DCNL key and number (or set of numbers) for the attribute value. The DCNL only data types allowed are Number and Number Set. DCNL If you specify any attributes that are part of an index key, then the DCNL data types for those attributes must match those of the schema in DCNL the table\'s attribute definition. DCNL :type expected: map DCNL :param expected: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use Expected and ConditionExpression at the same DCNL time, DynamoDB will return a ValidationException exception. DCNL This parameter does not support lists or maps. DCNL A map of attribute/condition pairs. Expected provides a conditional DCNL block for the UpdateItem operation. DCNL Each element of Expected consists of an attribute name, a comparison DCNL operator, and one or more values. DynamoDB compares the attribute DCNL with the value(s) you supplied, using the comparison operator. For DCNL each Expected element, the result of the evaluation is either true DCNL or false. DCNL If you specify more than one element in the Expected map, then by DCNL default all of the conditions must evaluate to true. In other DCNL words, the conditions are ANDed together. (You can use the DCNL ConditionalOperator parameter to OR the conditions instead. If you DCNL do this, then at least one of the conditions must evaluate to true, DCNL rather than all of them.) DCNL If the Expected map evaluates to true, then the conditional operation DCNL succeeds; otherwise, it fails. DCNL Expected contains the following: DCNL + AttributeValueList - One or more values to evaluate against the DCNL supplied attribute. The number of values in the list depends on the DCNL ComparisonOperator being used. For type Number, value comparisons DCNL are numeric. String value comparisons for greater than, equals, or DCNL less than are based on ASCII character code values. For example, DCNL `a` is greater than `A`, and `a` is greater than `B`. For a list of DCNL code values, see DCNL `http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters`_. DCNL For type Binary, DynamoDB treats each byte of the binary data as DCNL unsigned when it compares binary values, for example when DCNL evaluating query expressions. DCNL + ComparisonOperator - A comparator for evaluating attributes in the DCNL AttributeValueList . When performing the comparison, DynamoDB uses DCNL strongly consistent reads. The following comparison operators are DCNL available: `EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | DCNL CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN` The following DCNL are descriptions of each comparison operator. DCNL + `EQ` : Equal. `EQ` is supported for all datatypes, including lists DCNL and maps. AttributeValueList can contain only one AttributeValue DCNL element of type String, Number, Binary, String Set, Number Set, or DCNL Binary Set. If an item contains an AttributeValue element of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `NE` : Not equal. `NE` is supported for all datatypes, including DCNL lists and maps. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, Binary, String Set, Number DCNL Set, or Binary Set. If an item contains an AttributeValue of a DCNL different type than the one specified in the request, the value DCNL does not match. For example, `{"S":"6"}` does not equal DCNL `{"N":"6"}`. Also, `{"N":"6"}` does not equal `{"NS":["6", "2", DCNL "1"]}`. > <li> DCNL + `LE` : Less than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `LT` : Less than. AttributeValueList can contain only one DCNL AttributeValue of type String, Number, or Binary (not a set type). DCNL If an item contains an AttributeValue element of a different type DCNL than the one specified in the request, the value does not match. DCNL For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GE` : Greater than or equal. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `GT` : Greater than. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If an item contains an AttributeValue element of a different DCNL type than the one specified in the request, the value does not DCNL match. For example, `{"S":"6"}` does not equal `{"N":"6"}`. Also, DCNL `{"N":"6"}` does not compare to `{"NS":["6", "2", "1"]}`. > <li> DCNL + `NOT_NULL` : The attribute exists. `NOT_NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL existence of an attribute, not its data type. If the data type of DCNL attribute " `a`" is null, and you evaluate it using `NOT_NULL`, the DCNL result is a Boolean true . This result is because the attribute " DCNL `a`" exists; its data type is not relevant to the `NOT_NULL` DCNL comparison operator. DCNL + `NULL` : The attribute does not exist. `NULL` is supported for all DCNL datatypes, including lists and maps. This operator tests for the DCNL nonexistence of an attribute, not its data type. If the data type DCNL of attribute " `a`" is null, and you evaluate it using `NULL`, the DCNL result is a Boolean false . This is because the attribute " `a`" DCNL exists; its data type is not relevant to the `NULL` comparison DCNL operator. DCNL + `CONTAINS` : Checks for a subsequence, or value in a set. DCNL AttributeValueList can contain only one AttributeValue element of DCNL type String, Number, or Binary (not a set type). If the target DCNL attribute of the comparison is of type String, then the operator DCNL checks for a substring match. If the target attribute of the DCNL comparison is of type Binary, then the operator looks for a DCNL subsequence of the target that matches the input. If the target DCNL attribute of the comparison is a set (" `SS`", " `NS`", or " DCNL `BS`"), then the operator evaluates to true if it finds an exact DCNL match with any member of the set. CONTAINS is supported for lists: DCNL When evaluating " `a CONTAINS b`", " `a`" can be a list; however, " DCNL `b`" cannot be a set, a map, or a list. DCNL + `NOT_CONTAINS` : Checks for absence of a subsequence, or absence of a DCNL value in a set. AttributeValueList can contain only one DCNL AttributeValue element of type String, Number, or Binary (not a set DCNL type). If the target attribute of the comparison is a String, then DCNL the operator checks for the absence of a substring match. If the DCNL target attribute of the comparison is Binary, then the operator DCNL checks for the absence of a subsequence of the target that matches DCNL the input. If the target attribute of the comparison is a set (" DCNL `SS`", " `NS`", or " `BS`"), then the operator evaluates to true if DCNL it does not find an exact match with any member of the set. DCNL NOT_CONTAINS is supported for lists: When evaluating " `a NOT DCNL CONTAINS b`", " `a`" can be a list; however, " `b`" cannot be a DCNL set, a map, or a list. DCNL + `BEGINS_WITH` : Checks for a prefix. AttributeValueList can contain DCNL only one AttributeValue of type String or Binary (not a Number or a DCNL set type). The target attribute of the comparison must be of type DCNL String or Binary (not a Number or a set type). > <li> DCNL + `IN` : Checks for matching elements within two sets. DCNL AttributeValueList can contain one or more AttributeValue elements DCNL of type String, Number, or Binary (not a set type). These DCNL attributes are compared against an existing set type attribute of DCNL an item. If any elements of the input set are present in the item DCNL attribute, the expression evaluates to true. DCNL + `BETWEEN` : Greater than or equal to the first value, and less than DCNL or equal to the second value. AttributeValueList must contain two DCNL AttributeValue elements of the same type, either String, Number, or DCNL Binary (not a set type). A target attribute matches if the target DCNL value is greater than, or equal to, the first element and less DCNL than, or equal to, the second element. If an item contains an DCNL AttributeValue element of a different type than the one specified DCNL in the request, the value does not match. For example, `{"S":"6"}` DCNL does not compare to `{"N":"6"}`. Also, `{"N":"6"}` does not compare DCNL to `{"NS":["6", "2", "1"]}` DCNL For usage examples of AttributeValueList and ComparisonOperator , see DCNL `Legacy Conditional Parameters`_ in the Amazon DynamoDB Developer DCNL Guide . DCNL For backward compatibility with previous DynamoDB releases, the DCNL following parameters can be used instead of AttributeValueList and DCNL ComparisonOperator : DCNL + Value - A value for DynamoDB to compare with an attribute. DCNL + Exists - A Boolean value that causes DynamoDB to evaluate the value DCNL before attempting the conditional operation: DCNL + If Exists is `True`, DynamoDB will check to see if that attribute DCNL value already exists in the table. If it is found, then the DCNL condition evaluates to true; otherwise the condition evaluate to DCNL false. DCNL + If Exists is `False`, DynamoDB assumes that the attribute value does DCNL not exist in the table. If in fact the value does not exist, then DCNL the assumption is valid and the condition evaluates to true. If the DCNL value is found, despite the assumption that it does not exist, the DCNL condition evaluates to false. DCNL Note that the default value for Exists is `True`. DCNL The Value and Exists parameters are incompatible with DCNL AttributeValueList and ComparisonOperator . Note that if you use DCNL both sets of parameters at once, DynamoDB will return a DCNL ValidationException exception. DCNL :type conditional_operator: string DCNL :param conditional_operator: DCNL There is a newer parameter available. Use ConditionExpression instead. DCNL Note that if you use ConditionalOperator and ConditionExpression at DCNL the same time, DynamoDB will return a ValidationException DCNL exception. DCNL This parameter does not support lists or maps. DCNL A logical operator to apply to the conditions in the Expected map: DCNL + `AND` - If all of the conditions evaluate to true, then the entire DCNL map evaluates to true. DCNL + `OR` - If at least one of the conditions evaluate to true, then the DCNL entire map evaluates to true. DCNL If you omit ConditionalOperator , then `AND` is the default. DCNL The operation will succeed only if the entire map evaluates to true. DCNL :type return_values: string DCNL :param return_values: DCNL Use ReturnValues if you want to get the item attributes as they DCNL appeared either before or after they were updated. For UpdateItem , DCNL the valid values are: DCNL + `NONE` - If ReturnValues is not specified, or if its value is `NONE`, DCNL then nothing is returned. (This setting is the default for DCNL ReturnValues .) DCNL + `ALL_OLD` - If UpdateItem overwrote an attribute name-value pair, DCNL then the content of the old item is returned. DCNL + `UPDATED_OLD` - The old versions of only the updated attributes are DCNL returned. DCNL + `ALL_NEW` - All of the attributes of the new version of the item are DCNL returned. DCNL + `UPDATED_NEW` - The new versions of only the updated attributes are DCNL returned. DCNL :type return_consumed_capacity: string DCNL :param return_consumed_capacity: A value that if set to `TOTAL`, the DCNL response includes ConsumedCapacity data for tables and indexes. If DCNL set to `INDEXES`, the response includes ConsumedCapacity for DCNL indexes. If set to `NONE` (the default), ConsumedCapacity is not DCNL included in the response. DCNL :type return_item_collection_metrics: string DCNL :param return_item_collection_metrics: A value that if set to `SIZE`, DCNL the response includes statistics about item collections, if any, DCNL that were modified during the operation are returned in the DCNL response. If set to `NONE` (the default), no statistics are DCNL returned. DCNL :type update_expression: string DCNL :param update_expression: An expression that defines one or more DCNL attributes to be updated, the action to be performed on them, and DCNL new value(s) for them. DCNL The following action values are available for UpdateExpression . DCNL + `SET` - Adds one or more attributes and values to an item. If any of DCNL these attribute already exist, they are replaced by the new values. DCNL You can also use `SET` to add or subtract from an attribute that is DCNL of type Number. `SET` supports the following functions: DCNL + `if_not_exists (path, operand)` - if the item does not contain an DCNL attribute at the specified path, then `if_not_exists` evaluates to DCNL operand; otherwise, it evaluates to path. You can use this function DCNL to avoid overwriting an attribute that may already be present in DCNL the item. DCNL + `list_append (operand, operand)` - evaluates to a list with a new DCNL element added to it. You can append the new element to the start or DCNL the end of the list by reversing the order of the operands. DCNL These function names are case-sensitive. DCNL + `REMOVE` - Removes one or more attributes from an item. DCNL + `ADD` - Adds the specified value to the item, if the attribute does DCNL not already exist. If the attribute does exist, then the behavior DCNL of `ADD` depends on the data type of the attribute: DCNL + If the existing attribute is a number, and if Value is also a number, DCNL then Value is mathematically added to the existing attribute. If DCNL Value is a negative number, then it is subtracted from the existing DCNL attribute. If you use `ADD` to increment or decrement a number DCNL value for an item that doesn\'t exist before the update, DynamoDB DCNL uses `0` as the initial value. Similarly, if you use `ADD` for an DCNL existing item to increment or decrement an attribute value that DCNL doesn\'t exist before the update, DynamoDB uses `0` as the initial DCNL value. For example, suppose that the item you want to update DCNL doesn\'t have an attribute named itemcount , but you decide to `ADD` DCNL the number `3` to this attribute anyway. DynamoDB will create the DCNL itemcount attribute, set its initial value to `0`, and finally add DCNL `3` to it. The result will be a new itemcount attribute in the DCNL item, with a value of `3`. DCNL + If the existing data type is a set and if Value is also a set, then DCNL Value is added to the existing set. For example, if the attribute DCNL value is the set `[1,2]`, and the `ADD` action specified `[3]`, DCNL then the final attribute value is `[1,2,3]`. An error occurs if an DCNL `ADD` action is specified for a set attribute and the attribute DCNL type specified does not match the existing set type. Both sets must DCNL have the same primitive data type. For example, if the existing DCNL data type is a set of strings, the Value must also be a set of DCNL strings. DCNL The `ADD` action only supports Number and set data types. In addition, DCNL `ADD` can only be used on top-level attributes, not nested DCNL attributes. DCNL + `DELETE` - Deletes an element from a set. If a set of values is DCNL specified, then those values are subtracted from the old set. For DCNL example, if the attribute value was the set `[a,b,c]` and the DCNL `DELETE` action specifies `[a,c]`, then the final attribute value DCNL is `[b]`. Specifying an empty set is an error. The `DELETE` action DCNL only supports Number and set data types. In addition, `DELETE` can DCNL only be used on top-level attributes, not nested attributes. DCNL You can have many actions in a single expression, such as the DCNL following: `SET a=:value1, b=:value2 DELETE :value3, :value4, DCNL :value5` DCNL For more information on update expressions, go to `Modifying Items and DCNL Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type condition_expression: string DCNL :param condition_expression: A condition that must be satisfied in DCNL order for a conditional update to succeed. DCNL An expression can contain any of the following: DCNL + Boolean functions: `attribute_exists | attribute_not_exists | DCNL contains | begins_with` These function names are case-sensitive. DCNL + Comparison operators: ` = | <> | < | > | <= DCNL | >= | BETWEEN | IN` DCNL + Logical operators: `AND | OR | NOT` DCNL For more information on condition expressions, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_names: map DCNL :param expression_attribute_names: One or more substitution tokens for DCNL simplifying complex expressions. The following are some use cases DCNL for using ExpressionAttributeNames : DCNL + To shorten an attribute name that is very long or unwieldy in an DCNL expression. DCNL + To create a placeholder for repeating occurrences of an attribute DCNL name in an expression. DCNL + To prevent special characters in an attribute name from being DCNL misinterpreted in an expression. DCNL Use the **#** character in an expression to dereference an attribute DCNL name. For example, consider the following expression: DCNL + `order.customerInfo.LastName = "Smith" OR order.customerInfo.LastName DCNL = "Jones"` DCNL Now suppose that you specified the following for DCNL ExpressionAttributeNames : DCNL + `{"#name":"order.customerInfo.LastName"}` DCNL The expression can now be simplified as follows: DCNL + `#name = "Smith" OR #name = "Jones"` DCNL For more information on expression attribute names, go to `Accessing DCNL Item Attributes`_ in the Amazon DynamoDB Developer Guide . DCNL :type expression_attribute_values: map DCNL :param expression_attribute_values: One or more values that can be DCNL substituted in an expression. DCNL Use the **:** (colon) character in an expression to dereference an DCNL attribute value. For example, suppose that you wanted to check DCNL whether the value of the ProductStatus attribute was one of the DCNL following: DCNL `Available | Backordered | Discontinued` DCNL You would first need to specify ExpressionAttributeValues as follows: DCNL `{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, DCNL ":disc":{"S":"Discontinued"} }` DCNL You could then use these values in an expression, such as this: DCNL `ProductStatus IN (:avail, :back, :disc)` DCNL For more information on expression attribute values, go to `Specifying DCNL Conditions`_ in the Amazon DynamoDB Developer Guide .'
def update_table(self, table_name, provisioned_throughput=None, global_secondary_index_updates=None, attribute_definitions=None): DCNL 'Updates the provisioned throughput for the given table, or DCNL manages the global secondary indexes on the table. DCNL You can increase or decrease the table\'s provisioned DCNL throughput values within the maximums and minimums listed in DCNL the `Limits`_ section in the Amazon DynamoDB Developer Guide . DCNL In addition, you can use UpdateTable to add, modify or delete DCNL global secondary indexes on the table. For more information, DCNL see `Managing Global Secondary Indexes`_ in the Amazon DCNL DynamoDB Developer Guide . DCNL The table must be in the `ACTIVE` state for UpdateTable to DCNL succeed. UpdateTable is an asynchronous operation; while DCNL executing the operation, the table is in the `UPDATING` state. DCNL While the table is in the `UPDATING` state, the table still DCNL has the provisioned throughput from before the call. The DCNL table\'s new provisioned throughput settings go into effect DCNL when the table returns to the `ACTIVE` state; at that point, DCNL the UpdateTable operation is complete. DCNL :type attribute_definitions: list DCNL :param attribute_definitions: An array of attributes that describe the DCNL key schema for the table and indexes. If you are adding a new DCNL global secondary index to the table, AttributeDefinitions must DCNL include the key element(s) of the new index. DCNL :type table_name: string DCNL :param table_name: The name of the table to be updated. DCNL :type provisioned_throughput: dict DCNL :param provisioned_throughput: Represents the provisioned throughput DCNL settings for a specified table or index. The settings can be DCNL modified using the UpdateTable operation. DCNL For current minimum and maximum provisioned throughput values, see DCNL `Limits`_ in the Amazon DynamoDB Developer Guide . DCNL :type global_secondary_index_updates: list DCNL :param global_secondary_index_updates: DCNL An array of one or more global secondary indexes for the table. For DCNL each index in the array, you can specify one action: DCNL + Create - add a new global secondary index to the table. DCNL + Update - modify the provisioned throughput settings of an existing DCNL global secondary index. DCNL + Delete - remove a global secondary index from the table.'
def __init__(self, table, data=None, loaded=False): DCNL 'Constructs an (unsaved) ``Item`` instance. DCNL To persist the data in DynamoDB, you\'ll need to call the ``Item.save`` DCNL (or ``Item.partial_save``) on the instance. DCNL Requires a ``table`` parameter, which should be a ``Table`` instance. DCNL This is required, as DynamoDB\'s API is focus around all operations DCNL being table-level. It\'s also for persisting schema around many objects. DCNL Optionally accepts a ``data`` parameter, which should be a dictionary DCNL of the fields & values of the item. Alternatively, an ``Item`` instance DCNL may be provided from which to extract the data. DCNL Optionally accepts a ``loaded`` parameter, which should be a boolean. DCNL ``True`` if it was preexisting data loaded from DynamoDB, ``False`` if DCNL it\'s new data from the user. Default is ``False``. DCNL Example:: DCNL >>> users = Table(\'users\') DCNL >>> user = Item(users, data={ DCNL ...     \'username\': \'johndoe\', DCNL ...     \'first_name\': \'John\', DCNL ...     \'date_joined\': 1248o61592, DCNL # Change existing data. DCNL >>> user[\'first_name\'] = \'Johann\' DCNL # Add more data. DCNL >>> user[\'last_name\'] = \'Doe\' DCNL # Delete data. DCNL >>> del user[\'date_joined\'] DCNL # Iterate over all the data. DCNL >>> for field, val in user.items(): DCNL ...     print "%s: %s" % (field, val) DCNL username: johndoe DCNL first_name: John DCNL date_joined: 1248o61592'
def _determine_alterations(self): DCNL 'Checks the ``-orig_data`` against the ``_data`` to determine what DCNL changes to the data are present. DCNL Returns a dictionary containing the keys ``adds``, ``changes`` & DCNL ``deletes``, containing the updated data.'
def needs_save(self, data=None): DCNL 'Returns whether or not the data has changed on the ``Item``. DCNL Optionally accepts a ``data`` argument, which accepts the output from DCNL ``self._determine_alterations()`` if you\'ve already called it. Typically DCNL unnecessary to do. Default is ``None``. DCNL Example: DCNL >>> user.needs_save() DCNL False DCNL >>> user[\'first_name\'] = \'Johann\' DCNL >>> user.needs_save() DCNL True'
def mark_clean(self): DCNL 'Marks an ``Item`` instance as no longer needing to be saved. DCNL Example: DCNL >>> user.needs_save() DCNL False DCNL >>> user[\'first_name\'] = \'Johann\' DCNL >>> user.needs_save() DCNL True DCNL >>> user.mark_clean() DCNL >>> user.needs_save() DCNL False'
def mark_dirty(self): DCNL 'DEPRECATED: Marks an ``Item`` instance as needing to be saved. DCNL This method is no longer necessary, as the state tracking on ``Item`` DCNL has been improved to automatically detect proper state.'
def load(self, data): DCNL 'This is only useful when being handed raw data from DynamoDB directly. DCNL If you have a Python datastructure already, use the ``__init__`` or DCNL manually set the data instead. DCNL Largely internal, unless you know what you\'re doing or are trying to DCNL mix the low-level & high-level APIs.'
def get_keys(self): DCNL 'Returns a Python-style dict of the keys/values. DCNL Largely internal.'
def get_raw_keys(self): DCNL 'Returns a DynamoDB-style dict of the keys/values. DCNL Largely internal.'
def build_expects(self, fields=None): DCNL 'Builds up a list of expecations to hand off to DynamoDB on save. DCNL Largely internal.'
def prepare_full(self): DCNL 'Runs through all fields & encodes them to be handed off to DynamoDB DCNL as part of an ``save`` (``put_item``) call. DCNL Largely internal.'
def prepare_partial(self): DCNL 'Runs through **ONLY** the changed/deleted fields & encodes them to be DCNL handed off to DynamoDB as part of an ``partial_save`` (``update_item``) DCNL call. DCNL Largely internal.'
def partial_save(self): DCNL 'Saves only the changed data to DynamoDB. DCNL Extremely useful for high-volume/high-write data sets, this allows DCNL you to update only a handful of fields rather than having to push DCNL entire items. This prevents many accidental overwrite situations as DCNL well as saves on the amount of data to transfer over the wire. DCNL Returns ``True`` on success, ``False`` if no save was performed or DCNL the write failed. DCNL Example:: DCNL >>> user[\'last_name\'] = \'Doh!\' DCNL # Only the last name field will be sent to DynamoDB. DCNL >>> user.partial_save()'
def save(self, overwrite=False): DCNL 'Saves all data to DynamoDB. DCNL By default, this attempts to ensure that none of the underlying DCNL data has changed. If any fields have changed in between when the DCNL ``Item`` was constructed & when it is saved, this call will fail so DCNL as not to cause any data loss. DCNL If you\'re sure possibly overwriting data is acceptable, you can pass DCNL an ``overwrite=True``. If that\'s not acceptable, you may be able to use DCNL ``Item.partial_save`` to only write the changed field data. DCNL Optionally accepts an ``overwrite`` parameter, which should be a DCNL boolean. If you provide ``True``, the item will be forcibly overwritten DCNL within DynamoDB, even if another process changed the data in the DCNL meantime. (Default: ``False``) DCNL Returns ``True`` on success, ``False`` if no save was performed. DCNL Example:: DCNL >>> user[\'last_name\'] = \'Doh!\' DCNL # All data on the Item is sent to DynamoDB. DCNL >>> user.save() DCNL # If it fails, you can overwrite. DCNL >>> user.save(overwrite=True)'
def delete(self): DCNL 'Deletes the item\'s data to DynamoDB. DCNL Returns ``True`` on success. DCNL Example:: DCNL # Buh-bye now. DCNL >>> user.delete()'
def _reset(self): DCNL 'Resets the internal state of the ``ResultSet``. DCNL This prevents results from being cached long-term & consuming DCNL excess memory. DCNL Largely internal.'
def to_call(self, the_callable, *args, **kwargs): DCNL 'Sets up the callable & any arguments to run it with. DCNL This is stored for subsequent calls so that those queries can be DCNL run without requiring user intervention. DCNL Example:: DCNL # Just an example callable. DCNL >>> def squares_to(y): DCNL ...     for x in range(1, y): DCNL ...         yield x**2 DCNL >>> rs = ResultSet() DCNL # Set up what to call & arguments. DCNL >>> rs.to_call(squares_to, y=3)'
def fetch_more(self): DCNL 'When the iterator runs out of results, this method is run to re-execute DCNL the callable (& arguments) to fetch the next page. DCNL Largely internal.'
def authorize_cluster_security_group_ingress(self, cluster_security_group_name, cidrip=None, ec2_security_group_name=None, ec2_security_group_owner_id=None): DCNL 'Adds an inbound (ingress) rule to an Amazon Redshift security DCNL group. Depending on whether the application accessing your DCNL cluster is running on the Internet or an EC2 instance, you can DCNL authorize inbound access to either a Classless Interdomain DCNL Routing (CIDR) IP address range or an EC2 security group. You DCNL can add as many as 20 ingress rules to an Amazon Redshift DCNL security group. DCNL For an overview of CIDR blocks, see the Wikipedia article on DCNL `Classless Inter-Domain Routing`_. DCNL You must also associate the security group with a cluster so DCNL that clients running on these IP addresses or the EC2 instance DCNL are authorized to connect to the cluster. For information DCNL about managing security groups, go to `Working with Security DCNL Groups`_ in the Amazon Redshift Management Guide . DCNL :type cluster_security_group_name: string DCNL :param cluster_security_group_name: The name of the security group to DCNL which the ingress rule is added. DCNL :type cidrip: string DCNL :param cidrip: The IP range to be added the Amazon Redshift security DCNL group. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The EC2 security group to be added the DCNL Amazon Redshift security group. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The AWS account number of the owner DCNL of the security group specified by the EC2SecurityGroupName DCNL parameter. The AWS Access Key ID is not an acceptable value. DCNL Example: `111122223333`'
def authorize_snapshot_access(self, snapshot_identifier, account_with_restore_access, snapshot_cluster_identifier=None): DCNL 'Authorizes the specified AWS customer account to restore the DCNL specified snapshot. DCNL For more information about working with snapshots, go to DCNL `Amazon Redshift Snapshots`_ in the Amazon Redshift Management DCNL Guide . DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: The identifier of the snapshot the account DCNL is authorized to restore. DCNL :type snapshot_cluster_identifier: string DCNL :param snapshot_cluster_identifier: The identifier of the cluster the DCNL snapshot was created from. This parameter is required if your IAM DCNL user has a policy containing a snapshot resource element that DCNL specifies anything other than * for the cluster name. DCNL :type account_with_restore_access: string DCNL :param account_with_restore_access: The identifier of the AWS customer DCNL account authorized to restore the specified snapshot.'
def copy_cluster_snapshot(self, source_snapshot_identifier, target_snapshot_identifier, source_snapshot_cluster_identifier=None): DCNL 'Copies the specified automated cluster snapshot to a new DCNL manual cluster snapshot. The source must be an automated DCNL snapshot and it must be in the available state. DCNL When you delete a cluster, Amazon Redshift deletes any DCNL automated snapshots of the cluster. Also, when the retention DCNL period of the snapshot expires, Amazon Redshift automatically DCNL deletes it. If you want to keep an automated snapshot for a DCNL longer period, you can make a manual copy of the snapshot. DCNL Manual snapshots are retained until you delete them. DCNL For more information about working with snapshots, go to DCNL `Amazon Redshift Snapshots`_ in the Amazon Redshift Management DCNL Guide . DCNL :type source_snapshot_identifier: string DCNL :param source_snapshot_identifier: DCNL The identifier for the source snapshot. DCNL Constraints: DCNL + Must be the identifier for a valid automated snapshot whose state is DCNL `available`. DCNL :type source_snapshot_cluster_identifier: string DCNL :param source_snapshot_cluster_identifier: DCNL The identifier of the cluster the source snapshot was created from. DCNL This parameter is required if your IAM user has a policy containing DCNL a snapshot resource element that specifies anything other than * DCNL for the cluster name. DCNL Constraints: DCNL + Must be the identifier for a valid cluster. DCNL :type target_snapshot_identifier: string DCNL :param target_snapshot_identifier: DCNL The identifier given to the new manual snapshot. DCNL Constraints: DCNL + Cannot be null, empty, or blank. DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL + Must be unique for the AWS account that is making the request.'
def create_cluster(self, cluster_identifier, node_type, master_username, master_user_password, db_name=None, cluster_type=None, cluster_security_groups=None, vpc_security_group_ids=None, cluster_subnet_group_name=None, availability_zone=None, preferred_maintenance_window=None, cluster_parameter_group_name=None, automated_snapshot_retention_period=None, port=None, cluster_version=None, allow_version_upgrade=None, number_of_nodes=None, publicly_accessible=None, encrypted=None, hsm_client_certificate_identifier=None, hsm_configuration_identifier=None, elastic_ip=None): DCNL 'Creates a new cluster. To create the cluster in virtual DCNL private cloud (VPC), you must provide cluster subnet group DCNL name. If you don\'t provide a cluster subnet group name or the DCNL cluster security group parameter, Amazon Redshift creates a DCNL non-VPC cluster, it associates the default cluster security DCNL group with the cluster. For more information about managing DCNL clusters, go to `Amazon Redshift Clusters`_ in the Amazon DCNL Redshift Management Guide . DCNL :type db_name: string DCNL :param db_name: DCNL The name of the first database to be created when the cluster is DCNL created. DCNL To create additional databases after the cluster is created, connect to DCNL the cluster with a SQL client and use SQL commands to create a DCNL database. For more information, go to `Create a Database`_ in the DCNL Amazon Redshift Database Developer Guide. DCNL Default: `dev` DCNL Constraints: DCNL + Must contain 1 to 64 alphanumeric characters. DCNL + Must contain only lowercase letters. DCNL + Cannot be a word that is reserved by the service. A list of reserved DCNL words can be found in `Reserved Words`_ in the Amazon Redshift DCNL Database Developer Guide. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: A unique identifier for the cluster. You use DCNL this identifier to refer to the cluster for any subsequent cluster DCNL operations such as deleting or modifying. The identifier also DCNL appears in the Amazon Redshift console. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens. DCNL + Alphabetic characters must be lowercase. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL + Must be unique for all clusters within an AWS account. DCNL Example: `myexamplecluster` DCNL :type cluster_type: string DCNL :param cluster_type: The type of the cluster. When cluster type is DCNL specified as DCNL + `single-node`, the **NumberOfNodes** parameter is not required. DCNL + `multi-node`, the **NumberOfNodes** parameter is required. DCNL Valid Values: `multi-node` | `single-node` DCNL Default: `multi-node` DCNL :type node_type: string DCNL :param node_type: The node type to be provisioned for the cluster. For DCNL information about node types, go to ` Working with Clusters`_ in DCNL the Amazon Redshift Management Guide . DCNL Valid Values: `dw1.xlarge` | `dw1.8xlarge` | `dw2.large` | DCNL `dw2.8xlarge`. DCNL :type master_username: string DCNL :param master_username: DCNL The user name associated with the master user account for the cluster DCNL that is being created. DCNL Constraints: DCNL + Must be 1 - 128 alphanumeric characters. DCNL + First character must be a letter. DCNL + Cannot be a reserved word. A list of reserved words can be found in DCNL `Reserved Words`_ in the Amazon Redshift Database Developer Guide. DCNL :type master_user_password: string DCNL :param master_user_password: DCNL The password associated with the master user account for the cluster DCNL that is being created. DCNL Constraints: DCNL + Must be between 8 and 64 characters in length. DCNL + Must contain at least one uppercase letter. DCNL + Must contain at least one lowercase letter. DCNL + Must contain one number. DCNL + Can be any printable ASCII character (ASCII code 33 to 126) except \' DCNL (single quote), " (double quote), \, /, @, or space. DCNL :type cluster_security_groups: list DCNL :param cluster_security_groups: A list of security groups to be DCNL associated with this cluster. DCNL Default: The default cluster security group for Amazon Redshift. DCNL :type vpc_security_group_ids: list DCNL :param vpc_security_group_ids: A list of Virtual Private Cloud (VPC) DCNL security groups to be associated with the cluster. DCNL Default: The default VPC security group is associated with the cluster. DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name of a cluster subnet group to DCNL be associated with this cluster. DCNL If this parameter is not provided the resulting cluster will be DCNL deployed outside virtual private cloud (VPC). DCNL :type availability_zone: string DCNL :param availability_zone: The EC2 Availability Zone (AZ) in which you DCNL want Amazon Redshift to provision the cluster. For example, if you DCNL have several EC2 instances running in a specific Availability Zone, DCNL then you might want the cluster to be provisioned in the same zone DCNL in order to decrease network latency. DCNL Default: A random, system-chosen Availability Zone in the region that DCNL is specified by the endpoint. DCNL Example: `us-east-1d` DCNL Constraint: The specified Availability Zone must be in the same region DCNL as the current endpoint. DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which automated cluster maintenance can occur. DCNL Format: `ddd:hh24:mi-ddd:hh24:mi` DCNL Default: A 30-minute window selected at random from an 8-hour block of DCNL time per region, occurring on a random day of the week. The DCNL following list shows the time blocks for each region from which the DCNL default maintenance windows are assigned. DCNL + **US-East (Northern Virginia) Region:** 03:00-11:00 UTC DCNL + **US-West (Oregon) Region** 06:00-14:00 UTC DCNL + **EU (Ireland) Region** 22:00-06:00 UTC DCNL + **Asia Pacific (Singapore) Region** 14:00-22:00 UTC DCNL + **Asia Pacific (Sydney) Region** 12:00-20:00 UTC DCNL + **Asia Pacific (Tokyo) Region** 17:00-03:00 UTC DCNL Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun DCNL Constraints: Minimum 30-minute window. DCNL :type cluster_parameter_group_name: string DCNL :param cluster_parameter_group_name: DCNL The name of the parameter group to be associated with this cluster. DCNL Default: The default Amazon Redshift cluster parameter group. For DCNL information about the default parameter group, go to `Working with DCNL Amazon Redshift Parameter Groups`_ DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type automated_snapshot_retention_period: integer DCNL :param automated_snapshot_retention_period: The number of days that DCNL automated snapshots are retained. If the value is 0, automated DCNL snapshots are disabled. Even if automated snapshots are disabled, DCNL you can still create manual snapshots when you want with DCNL CreateClusterSnapshot. DCNL Default: `1` DCNL Constraints: Must be a value from 0 to 35. DCNL :type port: integer DCNL :param port: The port number on which the cluster accepts incoming DCNL connections. DCNL The cluster is accessible only via the JDBC and ODBC connection DCNL strings. Part of the connection string requires the port on which DCNL the cluster will listen for incoming connections. DCNL Default: `5439` DCNL Valid Values: `1150-65535` DCNL :type cluster_version: string DCNL :param cluster_version: The version of the Amazon Redshift engine DCNL software that you want to deploy on the cluster. DCNL The version selected runs on all the nodes in the cluster. DCNL Constraints: Only version 1.0 is currently available. DCNL Example: `1.0` DCNL :type allow_version_upgrade: boolean DCNL :param allow_version_upgrade: If `True`, upgrades can be applied during DCNL the maintenance window to the Amazon Redshift engine that is DCNL running on the cluster. DCNL When a new version of the Amazon Redshift engine is released, you can DCNL request that the service automatically apply upgrades during the DCNL maintenance window to the Amazon Redshift engine that is running on DCNL your cluster. DCNL Default: `True` DCNL :type number_of_nodes: integer DCNL :param number_of_nodes: The number of compute nodes in the cluster. DCNL This parameter is required when the **ClusterType** parameter is DCNL specified as `multi-node`. DCNL For information about determining how many nodes you need, go to ` DCNL Working with Clusters`_ in the Amazon Redshift Management Guide . DCNL If you don\'t specify this parameter, you get a single-node cluster. DCNL When requesting a multi-node cluster, you must specify the number DCNL of nodes that you want in the cluster. DCNL Default: `1` DCNL Constraints: Value must be at least 1 and no more than 100. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: If `True`, the cluster can be accessed from DCNL a public network. DCNL :type encrypted: boolean DCNL :param encrypted: If `True`, the data in the cluster is encrypted at DCNL rest. DCNL Default: false DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: Specifies the name of the HSM DCNL client certificate the Amazon Redshift cluster uses to retrieve the DCNL data encryption keys stored in an HSM. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: Specifies the name of the HSM DCNL configuration that contains the information the Amazon Redshift DCNL cluster can use to retrieve and store keys in an HSM. DCNL :type elastic_ip: string DCNL :param elastic_ip: The Elastic IP (EIP) address for the cluster. DCNL Constraints: The cluster must be provisioned in EC2-VPC and publicly- DCNL accessible through an Internet gateway. For more information about DCNL provisioning clusters in EC2-VPC, go to `Supported Platforms to DCNL Launch Your Cluster`_ in the Amazon Redshift Management Guide.'
def create_cluster_parameter_group(self, parameter_group_name, parameter_group_family, description): DCNL 'Creates an Amazon Redshift parameter group. DCNL Creating parameter groups is independent of creating clusters. DCNL You can associate a cluster with a parameter group when you DCNL create the cluster. You can also associate an existing cluster DCNL with a parameter group after the cluster is created by using DCNL ModifyCluster. DCNL Parameters in the parameter group define specific behavior DCNL that applies to the databases you create on the cluster. For DCNL more information about managing parameter groups, go to DCNL `Amazon Redshift Parameter Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type parameter_group_name: string DCNL :param parameter_group_name: DCNL The name of the cluster parameter group. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL + Must be unique within your AWS account. DCNL This value is stored as a lower-case string. DCNL :type parameter_group_family: string DCNL :param parameter_group_family: The Amazon Redshift engine version to DCNL which the cluster parameter group applies. The cluster engine DCNL version determines the set of parameters. DCNL To get a list of valid parameter group family names, you can call DCNL DescribeClusterParameterGroups. By default, Amazon Redshift returns DCNL a list of all the parameter groups that are owned by your AWS DCNL account, including the default parameter groups for each Amazon DCNL Redshift engine version. The parameter group family names DCNL associated with the default parameter groups provide you the valid DCNL values. For example, a valid family name is "redshift-1.0". DCNL :type description: string DCNL :param description: A description of the parameter group.'
def create_cluster_security_group(self, cluster_security_group_name, description): DCNL 'Creates a new Amazon Redshift security group. You use security DCNL groups to control access to non-VPC clusters. DCNL For information about managing security groups, go to `Amazon DCNL Redshift Cluster Security Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type cluster_security_group_name: string DCNL :param cluster_security_group_name: The name for the security group. DCNL Amazon Redshift stores the value as a lowercase string. DCNL Constraints: DCNL + Must contain no more than 255 alphanumeric characters or hyphens. DCNL + Must not be "Default". DCNL + Must be unique for all security groups that are created by your AWS DCNL account. DCNL Example: `examplesecuritygroup` DCNL :type description: string DCNL :param description: A description for the security group.'
def create_cluster_snapshot(self, snapshot_identifier, cluster_identifier): DCNL 'Creates a manual snapshot of the specified cluster. The DCNL cluster must be in the `available` state. DCNL For more information about working with snapshots, go to DCNL `Amazon Redshift Snapshots`_ in the Amazon Redshift Management DCNL Guide . DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: A unique identifier for the snapshot that DCNL you are requesting. This identifier must be unique for all DCNL snapshots within the AWS account. DCNL Constraints: DCNL + Cannot be null, empty, or blank DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: `my-snapshot-id` DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The cluster identifier for which you want a DCNL snapshot.'
def create_cluster_subnet_group(self, cluster_subnet_group_name, description, subnet_ids): DCNL 'Creates a new Amazon Redshift subnet group. You must provide a DCNL list of one or more subnets in your existing Amazon Virtual DCNL Private Cloud (Amazon VPC) when creating Amazon Redshift DCNL subnet group. DCNL For information about subnet groups, go to `Amazon Redshift DCNL Cluster Subnet Groups`_ in the Amazon Redshift Management DCNL Guide . DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name for the subnet group. Amazon DCNL Redshift stores the value as a lowercase string. DCNL Constraints: DCNL + Must contain no more than 255 alphanumeric characters or hyphens. DCNL + Must not be "Default". DCNL + Must be unique for all subnet groups that are created by your AWS DCNL account. DCNL Example: `examplesubnetgroup` DCNL :type description: string DCNL :param description: A description for the subnet group. DCNL :type subnet_ids: list DCNL :param subnet_ids: An array of VPC subnet IDs. A maximum of 20 subnets DCNL can be modified in a single request.'
def create_event_subscription(self, subscription_name, sns_topic_arn, source_type=None, source_ids=None, event_categories=None, severity=None, enabled=None): DCNL 'Creates an Amazon Redshift event notification subscription. DCNL This action requires an ARN (Amazon Resource Name) of an DCNL Amazon SNS topic created by either the Amazon Redshift DCNL console, the Amazon SNS console, or the Amazon SNS API. To DCNL obtain an ARN with Amazon SNS, you must create a topic in DCNL Amazon SNS and subscribe to the topic. The ARN is displayed in DCNL the SNS console. DCNL You can specify the source type, and lists of Amazon Redshift DCNL source IDs, event categories, and event severities. DCNL Notifications will be sent for all events you want that match DCNL those criteria. For example, you can specify source type = DCNL cluster, source ID = my-cluster-1 and mycluster2, event DCNL categories = Availability, Backup, and severity = ERROR. The DCNL subscription will only send notifications for those ERROR DCNL events in the Availability and Backup categories for the DCNL specified clusters. DCNL If you specify both the source type and source IDs, such as DCNL source type = cluster and source identifier = my-cluster-1, DCNL notifications will be sent for all the cluster events for my- DCNL cluster-1. If you specify a source type but do not specify a DCNL source identifier, you will receive notice of the events for DCNL the objects of that type in your AWS account. If you do not DCNL specify either the SourceType nor the SourceIdentifier, you DCNL will be notified of events generated from all Amazon Redshift DCNL sources belonging to your AWS account. You must specify a DCNL source type if you specify a source ID. DCNL :type subscription_name: string DCNL :param subscription_name: DCNL The name of the event subscription to be created. DCNL Constraints: DCNL + Cannot be null, empty, or blank. DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type sns_topic_arn: string DCNL :param sns_topic_arn: The Amazon Resource Name (ARN) of the Amazon SNS DCNL topic used to transmit the event notifications. The ARN is created DCNL by Amazon SNS when you create a topic and subscribe to it. DCNL :type source_type: string DCNL :param source_type: The type of source that will be generating the DCNL events. For example, if you want to be notified of events generated DCNL by a cluster, you would set this parameter to cluster. If this DCNL value is not specified, events are returned for all Amazon Redshift DCNL objects in your AWS account. You must specify a source type in DCNL order to specify source IDs. DCNL Valid values: cluster, cluster-parameter-group, cluster-security-group, DCNL and cluster-snapshot. DCNL :type source_ids: list DCNL :param source_ids: A list of one or more identifiers of Amazon Redshift DCNL source objects. All of the objects must be of the same type as was DCNL specified in the source type parameter. The event subscription will DCNL return only events generated by the specified objects. If not DCNL specified, then events are returned for all objects within the DCNL source type specified. DCNL Example: my-cluster-1, my-cluster-2 DCNL Example: my-snapshot-20131010 DCNL :type event_categories: list DCNL :param event_categories: Specifies the Amazon Redshift event categories DCNL to be published by the event notification subscription. DCNL Values: Configuration, Management, Monitoring, Security DCNL :type severity: string DCNL :param severity: Specifies the Amazon Redshift event severity to be DCNL published by the event notification subscription. DCNL Values: ERROR, INFO DCNL :type enabled: boolean DCNL :param enabled: A Boolean value; set to `True` to activate the DCNL subscription, set to `False` to create the subscription but not DCNL active it.'
def create_hsm_client_certificate(self, hsm_client_certificate_identifier): DCNL 'Creates an HSM client certificate that an Amazon Redshift DCNL cluster will use to connect to the client\'s HSM in order to DCNL store and retrieve the keys used to encrypt the cluster DCNL databases. DCNL The command returns a public key, which you must store in the DCNL HSM. In addition to creating the HSM certificate, you must DCNL create an Amazon Redshift HSM configuration that provides a DCNL cluster the information needed to store and use encryption DCNL keys in the HSM. For more information, go to `Hardware DCNL Security Modules`_ in the Amazon Redshift Management Guide. DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: The identifier to be assigned DCNL to the new HSM client certificate that the cluster will use to DCNL connect to the HSM to use the database encryption keys.'
def create_hsm_configuration(self, hsm_configuration_identifier, description, hsm_ip_address, hsm_partition_name, hsm_partition_password, hsm_server_public_certificate): DCNL 'Creates an HSM configuration that contains the information DCNL required by an Amazon Redshift cluster to store and use DCNL database encryption keys in a Hardware Security Module (HSM). DCNL After creating the HSM configuration, you can specify it as a DCNL parameter when creating a cluster. The cluster will then store DCNL its encryption keys in the HSM. DCNL In addition to creating an HSM configuration, you must also DCNL create an HSM client certificate. For more information, go to DCNL `Hardware Security Modules`_ in the Amazon Redshift Management DCNL Guide. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: The identifier to be assigned to DCNL the new Amazon Redshift HSM configuration. DCNL :type description: string DCNL :param description: A text description of the HSM configuration to be DCNL created. DCNL :type hsm_ip_address: string DCNL :param hsm_ip_address: The IP address that the Amazon Redshift cluster DCNL must use to access the HSM. DCNL :type hsm_partition_name: string DCNL :param hsm_partition_name: The name of the partition in the HSM where DCNL the Amazon Redshift clusters will store their database encryption DCNL keys. DCNL :type hsm_partition_password: string DCNL :param hsm_partition_password: The password required to access the HSM DCNL partition. DCNL :type hsm_server_public_certificate: string DCNL :param hsm_server_public_certificate: The HSMs public certificate file. DCNL When using Cloud HSM, the file name is server.pem.'
def delete_cluster(self, cluster_identifier, skip_final_cluster_snapshot=None, final_cluster_snapshot_identifier=None): DCNL 'Deletes a previously provisioned cluster. A successful DCNL response from the web service indicates that the request was DCNL received correctly. If a final cluster snapshot is requested DCNL the status of the cluster will be "final-snapshot" while the DCNL snapshot is being taken, then it\'s "deleting" once Amazon DCNL Redshift begins deleting the cluster. Use DescribeClusters to DCNL monitor the status of the deletion. The delete operation DCNL cannot be canceled or reverted once submitted. For more DCNL information about managing clusters, go to `Amazon Redshift DCNL Clusters`_ in the Amazon Redshift Management Guide . DCNL :type cluster_identifier: string DCNL :param cluster_identifier: DCNL The identifier of the cluster to be deleted. DCNL Constraints: DCNL + Must contain lowercase characters. DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type skip_final_cluster_snapshot: boolean DCNL :param skip_final_cluster_snapshot: Determines whether a final snapshot DCNL of the cluster is created before Amazon Redshift deletes the DCNL cluster. If `True`, a final cluster snapshot is not created. If DCNL `False`, a final cluster snapshot is created before the cluster is DCNL deleted. DCNL Default: `False` DCNL :type final_cluster_snapshot_identifier: string DCNL :param final_cluster_snapshot_identifier: DCNL The identifier of the final snapshot that is to be created immediately DCNL before deleting the cluster. If this parameter is provided, DCNL SkipFinalClusterSnapshot must be `False`. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens.'
def delete_cluster_parameter_group(self, parameter_group_name): DCNL 'Deletes a specified Amazon Redshift parameter group. DCNL :type parameter_group_name: string DCNL :param parameter_group_name: DCNL The name of the parameter group to be deleted. DCNL Constraints: DCNL + Must be the name of an existing cluster parameter group. DCNL + Cannot delete a default cluster parameter group.'
def delete_cluster_security_group(self, cluster_security_group_name): DCNL 'Deletes an Amazon Redshift security group. DCNL For information about managing security groups, go to `Amazon DCNL Redshift Cluster Security Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type cluster_security_group_name: string DCNL :param cluster_security_group_name: The name of the cluster security DCNL group to be deleted.'
def delete_cluster_snapshot(self, snapshot_identifier, snapshot_cluster_identifier=None): DCNL 'Deletes the specified manual snapshot. The snapshot must be in DCNL the `available` state, with no other users authorized to DCNL access the snapshot. DCNL Unlike automated snapshots, manual snapshots are retained even DCNL after you delete your cluster. Amazon Redshift does not delete DCNL your manual snapshots. You must delete manual snapshot DCNL explicitly to avoid getting charged. If other accounts are DCNL authorized to access the snapshot, you must revoke all of the DCNL authorizations before you can delete the snapshot. DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: The unique identifier of the manual DCNL snapshot to be deleted. DCNL Constraints: Must be the name of an existing snapshot that is in the DCNL `available` state. DCNL :type snapshot_cluster_identifier: string DCNL :param snapshot_cluster_identifier: The unique identifier of the DCNL cluster the snapshot was created from. This parameter is required DCNL if your IAM user has a policy containing a snapshot resource DCNL element that specifies anything other than * for the cluster name. DCNL Constraints: Must be the name of valid cluster.'
def delete_cluster_subnet_group(self, cluster_subnet_group_name): DCNL 'Deletes the specified cluster subnet group. DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name of the cluster subnet group DCNL name to be deleted.'
def delete_event_subscription(self, subscription_name): DCNL 'Deletes an Amazon Redshift event notification subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the Amazon Redshift event DCNL notification subscription to be deleted.'
def delete_hsm_client_certificate(self, hsm_client_certificate_identifier): DCNL 'Deletes the specified HSM client certificate. DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: The identifier of the HSM DCNL client certificate to be deleted.'
def delete_hsm_configuration(self, hsm_configuration_identifier): DCNL 'Deletes the specified Amazon Redshift HSM configuration. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: The identifier of the Amazon DCNL Redshift HSM configuration to be deleted.'
def describe_cluster_parameter_groups(self, parameter_group_name=None, max_records=None, marker=None): DCNL 'Returns a list of Amazon Redshift parameter groups, including DCNL parameter groups you created and the default parameter group. DCNL For each parameter group, the response includes the parameter DCNL group name, description, and parameter group family name. You DCNL can optionally specify a name to retrieve the description of a DCNL specific parameter group. DCNL For more information about managing parameter groups, go to DCNL `Amazon Redshift Parameter Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type parameter_group_name: string DCNL :param parameter_group_name: The name of a specific parameter group for DCNL which to return details. By default, details about all parameter DCNL groups and the default parameter group are returned. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterParameterGroups request exceed the value specified DCNL in `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_cluster_parameters(self, parameter_group_name, source=None, max_records=None, marker=None): DCNL 'Returns a detailed list of parameters contained within the DCNL specified Amazon Redshift parameter group. For each parameter DCNL the response includes information such as parameter name, DCNL description, data type, value, whether the parameter value is DCNL modifiable, and so on. DCNL You can specify source filter to retrieve parameters of only DCNL specific type. For example, to retrieve parameters that were DCNL modified by a user action such as from DCNL ModifyClusterParameterGroup, you can specify source equal to DCNL user . DCNL For more information about managing parameter groups, go to DCNL `Amazon Redshift Parameter Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type parameter_group_name: string DCNL :param parameter_group_name: The name of a cluster parameter group for DCNL which to return details. DCNL :type source: string DCNL :param source: The parameter types to return. Specify `user` to show DCNL parameters that are different form the default. Similarly, specify DCNL `engine-default` to show parameters that are the same as the DCNL default parameter group. DCNL Default: All parameter types returned. DCNL Valid Values: `user` | `engine-default` DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterParameters request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_cluster_security_groups(self, cluster_security_group_name=None, max_records=None, marker=None): DCNL 'Returns information about Amazon Redshift security groups. If DCNL the name of a security group is specified, the response will DCNL contain only information about only that security group. DCNL For information about managing security groups, go to `Amazon DCNL Redshift Cluster Security Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type cluster_security_group_name: string DCNL :param cluster_security_group_name: The name of a cluster security DCNL group for which you are requesting details. You can specify either DCNL the **Marker** parameter or a **ClusterSecurityGroupName** DCNL parameter, but not both. DCNL Example: `securitygroup1` DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterSecurityGroups request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request. DCNL Constraints: You can specify either the **ClusterSecurityGroupName** DCNL parameter or the **Marker** parameter, but not both.'
def describe_cluster_snapshots(self, cluster_identifier=None, snapshot_identifier=None, snapshot_type=None, start_time=None, end_time=None, max_records=None, marker=None, owner_account=None): DCNL 'Returns one or more snapshot objects, which contain metadata DCNL about your cluster snapshots. By default, this operation DCNL returns information about all snapshots of all clusters that DCNL are owned by you AWS customer account. No information is DCNL returned for snapshots owned by inactive AWS customer DCNL accounts. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The identifier of the cluster for which DCNL information about snapshots is requested. DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: The snapshot identifier of the snapshot DCNL about which to return information. DCNL :type snapshot_type: string DCNL :param snapshot_type: The type of snapshots for which you are DCNL requesting information. By default, snapshots of all types are DCNL returned. DCNL Valid Values: `automated` | `manual` DCNL :type start_time: timestamp DCNL :param start_time: A value that requests only snapshots created at or DCNL after the specified time. The time value is specified in ISO 8601 DCNL format. For more information about ISO 8601, go to the `ISO8601 DCNL Wikipedia page.`_ DCNL Example: `2012-07-16T18:00:00Z` DCNL :type end_time: timestamp DCNL :param end_time: A time value that requests only snapshots created at DCNL or before the specified time. The time value is specified in ISO DCNL 8601 format. For more information about ISO 8601, go to the DCNL `ISO8601 Wikipedia page.`_ DCNL Example: `2012-07-16T18:00:00Z` DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterSnapshots request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request. DCNL :type owner_account: string DCNL :param owner_account: The AWS customer account used to create or copy DCNL the snapshot. Use this field to filter the results to snapshots DCNL owned by a particular account. To describe snapshots you own, DCNL either specify your AWS customer account, or do not specify the DCNL parameter.'
def describe_cluster_subnet_groups(self, cluster_subnet_group_name=None, max_records=None, marker=None): DCNL 'Returns one or more cluster subnet group objects, which DCNL contain metadata about your cluster subnet groups. By default, DCNL this operation returns information about all cluster subnet DCNL groups that are defined in you AWS account. DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name of the cluster subnet group DCNL for which information is requested. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterSubnetGroups request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_cluster_versions(self, cluster_version=None, cluster_parameter_group_family=None, max_records=None, marker=None): DCNL 'Returns descriptions of the available Amazon Redshift cluster DCNL versions. You can call this operation even before creating any DCNL clusters to learn more about the Amazon Redshift versions. For DCNL more information about managing clusters, go to `Amazon DCNL Redshift Clusters`_ in the Amazon Redshift Management Guide DCNL :type cluster_version: string DCNL :param cluster_version: The specific cluster version to return. DCNL Example: `1.0` DCNL :type cluster_parameter_group_family: string DCNL :param cluster_parameter_group_family: DCNL The name of a specific cluster parameter group family to return details DCNL for. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusterVersions request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_clusters(self, cluster_identifier=None, max_records=None, marker=None): DCNL 'Returns properties of provisioned clusters including general DCNL cluster properties, cluster database properties, maintenance DCNL and backup properties, and security and access properties. DCNL This operation supports pagination. For more information about DCNL managing clusters, go to `Amazon Redshift Clusters`_ in the DCNL Amazon Redshift Management Guide . DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of a cluster whose DCNL properties you are requesting. This parameter is case sensitive. DCNL The default is that all clusters defined for an account are returned. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeClusters request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request. DCNL Constraints: You can specify either the **ClusterIdentifier** parameter DCNL or the **Marker** parameter, but not both.'
def describe_default_cluster_parameters(self, parameter_group_family, max_records=None, marker=None): DCNL 'Returns a list of parameter settings for the specified DCNL parameter group family. DCNL For more information about managing parameter groups, go to DCNL `Amazon Redshift Parameter Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type parameter_group_family: string DCNL :param parameter_group_family: The name of the cluster parameter group DCNL family. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeDefaultClusterParameters request exceed the value specified DCNL in `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_event_categories(self, source_type=None): DCNL 'Displays a list of event categories for all event source DCNL types, or for a specified source type. For a list of the event DCNL categories and source types, go to `Amazon Redshift Event DCNL Notifications`_. DCNL :type source_type: string DCNL :param source_type: The source type, such as cluster or parameter DCNL group, to which the described event categories apply. DCNL Valid values: cluster, snapshot, parameter group, and security group.'
def describe_event_subscriptions(self, subscription_name=None, max_records=None, marker=None): DCNL 'Lists descriptions of all the Amazon Redshift event DCNL notifications subscription for a customer account. If you DCNL specify a subscription name, lists the description for that DCNL subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the Amazon Redshift event DCNL notification subscription to be described. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeEventSubscriptions request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_events(self, source_identifier=None, source_type=None, start_time=None, end_time=None, duration=None, max_records=None, marker=None): DCNL 'Returns events related to clusters, security groups, DCNL snapshots, and parameter groups for the past 14 days. Events DCNL specific to a particular cluster, security group, snapshot or DCNL parameter group can be obtained by providing the name as a DCNL parameter. By default, the past hour of events are returned. DCNL :type source_identifier: string DCNL :param source_identifier: DCNL The identifier of the event source for which events will be returned. DCNL If this parameter is not specified, then all sources are included DCNL in the response. DCNL Constraints: DCNL If SourceIdentifier is supplied, SourceType must also be provided. DCNL + Specify a cluster identifier when SourceType is `cluster`. DCNL + Specify a cluster security group name when SourceType is `cluster- DCNL security-group`. DCNL + Specify a cluster parameter group name when SourceType is `cluster- DCNL parameter-group`. DCNL + Specify a cluster snapshot identifier when SourceType is `cluster- DCNL snapshot`. DCNL :type source_type: string DCNL :param source_type: DCNL The event source to retrieve events for. If no value is specified, all DCNL events are returned. DCNL Constraints: DCNL If SourceType is supplied, SourceIdentifier must also be provided. DCNL + Specify `cluster` when SourceIdentifier is a cluster identifier. DCNL + Specify `cluster-security-group` when SourceIdentifier is a cluster DCNL security group name. DCNL + Specify `cluster-parameter-group` when SourceIdentifier is a cluster DCNL parameter group name. DCNL + Specify `cluster-snapshot` when SourceIdentifier is a cluster DCNL snapshot identifier. DCNL :type start_time: timestamp DCNL :param start_time: The beginning of the time interval to retrieve DCNL events for, specified in ISO 8601 format. For more information DCNL about ISO 8601, go to the `ISO8601 Wikipedia page.`_ DCNL Example: `2009-07-08T18:00Z` DCNL :type end_time: timestamp DCNL :param end_time: The end of the time interval for which to retrieve DCNL events, specified in ISO 8601 format. For more information about DCNL ISO 8601, go to the `ISO8601 Wikipedia page.`_ DCNL Example: `2009-07-08T18:00Z` DCNL :type duration: integer DCNL :param duration: The number of minutes prior to the time of the request DCNL for which to retrieve events. For example, if the request is sent DCNL at 18:00 and you specify a duration of 60, then only events which DCNL have occurred after 17:00 will be returned. DCNL Default: `60` DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeEvents request exceed the value specified in `MaxRecords`, DCNL AWS returns a value in the `Marker` field of the response. You can DCNL retrieve the next set of response records by providing the returned DCNL marker value in the `Marker` parameter and retrying the request.'
def describe_hsm_client_certificates(self, hsm_client_certificate_identifier=None, max_records=None, marker=None): DCNL 'Returns information about the specified HSM client DCNL certificate. If no certificate ID is specified, returns DCNL information about all the HSM certificates owned by your AWS DCNL customer account. DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: The identifier of a specific DCNL HSM client certificate for which you want information. If no DCNL identifier is specified, information is returned for all HSM client DCNL certificates owned by your AWS customer account. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeHsmClientCertificates request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_hsm_configurations(self, hsm_configuration_identifier=None, max_records=None, marker=None): DCNL 'Returns information about the specified Amazon Redshift HSM DCNL configuration. If no configuration ID is specified, returns DCNL information about all the HSM configurations owned by your AWS DCNL customer account. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: The identifier of a specific DCNL Amazon Redshift HSM configuration to be described. If no identifier DCNL is specified, information is returned for all HSM configurations DCNL owned by your AWS customer account. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeHsmConfigurations request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_logging_status(self, cluster_identifier): DCNL 'Describes whether information, such as queries and connection DCNL attempts, is being logged for the specified Amazon Redshift DCNL cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The identifier of the cluster to get the DCNL logging status from. DCNL Example: `examplecluster`'
def describe_orderable_cluster_options(self, cluster_version=None, node_type=None, max_records=None, marker=None): DCNL 'Returns a list of orderable cluster options. Before you create DCNL a new cluster you can use this operation to find what options DCNL are available, such as the EC2 Availability Zones (AZ) in the DCNL specific AWS region that you can specify, and the node types DCNL you can request. The node types differ by available storage, DCNL memory, CPU and price. With the cost involved you might want DCNL to obtain a list of cluster options in the specific region and DCNL specify values when creating a cluster. For more information DCNL about managing clusters, go to `Amazon Redshift Clusters`_ in DCNL the Amazon Redshift Management Guide DCNL :type cluster_version: string DCNL :param cluster_version: The version filter value. Specify this DCNL parameter to show only the available offerings matching the DCNL specified version. DCNL Default: All versions. DCNL Constraints: Must be one of the version returned from DCNL DescribeClusterVersions. DCNL :type node_type: string DCNL :param node_type: The node type filter value. Specify this parameter to DCNL show only the available offerings matching the specified node type. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeOrderableClusterOptions request exceed the value specified DCNL in `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_reserved_node_offerings(self, reserved_node_offering_id=None, max_records=None, marker=None): DCNL 'Returns a list of the available reserved node offerings by DCNL Amazon Redshift with their descriptions including the node DCNL type, the fixed and recurring costs of reserving the node and DCNL duration the node will be reserved for you. These descriptions DCNL help you determine which reserve node offering you want to DCNL purchase. You then use the unique offering ID in you call to DCNL PurchaseReservedNodeOffering to reserve one or more nodes for DCNL your Amazon Redshift cluster. DCNL For more information about managing parameter groups, go to DCNL `Purchasing Reserved Nodes`_ in the Amazon Redshift Management DCNL Guide . DCNL :type reserved_node_offering_id: string DCNL :param reserved_node_offering_id: The unique identifier for the DCNL offering. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeReservedNodeOfferings request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_reserved_nodes(self, reserved_node_id=None, max_records=None, marker=None): DCNL 'Returns the descriptions of the reserved nodes. DCNL :type reserved_node_id: string DCNL :param reserved_node_id: Identifier for the node reservation. DCNL :type max_records: integer DCNL :param max_records: The maximum number of response records to return in DCNL each call. If the number of remaining response records exceeds the DCNL specified `MaxRecords` value, a value is returned in a `marker` DCNL field of the response. You can retrieve the next set of records by DCNL retrying the command with the returned marker value. DCNL Default: `100` DCNL Constraints: minimum 20, maximum 100. DCNL :type marker: string DCNL :param marker: An optional parameter that specifies the starting point DCNL to return a set of response records. When the results of a DCNL DescribeReservedNodes request exceed the value specified in DCNL `MaxRecords`, AWS returns a value in the `Marker` field of the DCNL response. You can retrieve the next set of response records by DCNL providing the returned marker value in the `Marker` parameter and DCNL retrying the request.'
def describe_resize(self, cluster_identifier): DCNL 'Returns information about the last resize operation for the DCNL specified cluster. If no resize operation has ever been DCNL initiated for the specified cluster, a `HTTP 404` error is DCNL returned. If a resize operation was initiated and completed, DCNL the status of the resize remains as `SUCCEEDED` until the next DCNL resize. DCNL A resize operation can be requested using ModifyCluster and DCNL specifying a different number or type of nodes for the DCNL cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of a cluster whose DCNL resize progress you are requesting. This parameter isn\'t case- DCNL sensitive. DCNL By default, resize operations for all clusters defined for an AWS DCNL account are returned.'
def disable_logging(self, cluster_identifier): DCNL 'Stops logging information, such as queries and connection DCNL attempts, for the specified Amazon Redshift cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The identifier of the cluster on which DCNL logging is to be stopped. DCNL Example: `examplecluster`'
def disable_snapshot_copy(self, cluster_identifier): DCNL 'Disables the automatic copying of snapshots from one region to DCNL another region for a specified cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of the source cluster DCNL that you want to disable copying of snapshots to a destination DCNL region. DCNL Constraints: Must be the valid name of an existing cluster that has DCNL cross-region snapshot copy enabled.'
def enable_logging(self, cluster_identifier, bucket_name, s3_key_prefix=None): DCNL 'Starts logging information, such as queries and connection DCNL attempts, for the specified Amazon Redshift cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The identifier of the cluster on which DCNL logging is to be started. DCNL Example: `examplecluster` DCNL :type bucket_name: string DCNL :param bucket_name: DCNL The name of an existing S3 bucket where the log files are to be stored. DCNL Constraints: DCNL + Must be in the same region as the cluster DCNL + The cluster must have read bucket and put object permissions DCNL :type s3_key_prefix: string DCNL :param s3_key_prefix: DCNL The prefix applied to the log file names. DCNL Constraints: DCNL + Cannot exceed 512 characters DCNL + Cannot contain spaces( ), double quotes ("), single quotes (\'), a DCNL backslash (\), or control characters. The hexadecimal codes for DCNL invalid characters are: DCNL + x00 to x20 DCNL + x22 DCNL + x27 DCNL + x5c DCNL + x7f or larger'
def enable_snapshot_copy(self, cluster_identifier, destination_region, retention_period=None): DCNL 'Enables the automatic copy of snapshots from one region to DCNL another region for a specified cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of the source cluster DCNL to copy snapshots from. DCNL Constraints: Must be the valid name of an existing cluster that does DCNL not already have cross-region snapshot copy enabled. DCNL :type destination_region: string DCNL :param destination_region: The destination region that you want to copy DCNL snapshots to. DCNL Constraints: Must be the name of a valid region. For more information, DCNL see `Regions and Endpoints`_ in the Amazon Web Services General DCNL Reference. DCNL :type retention_period: integer DCNL :param retention_period: The number of days to retain automated DCNL snapshots in the destination region after they are copied from the DCNL source region. DCNL Default: 7. DCNL Constraints: Must be at least 1 and no more than 35.'
def modify_cluster(self, cluster_identifier, cluster_type=None, node_type=None, number_of_nodes=None, cluster_security_groups=None, vpc_security_group_ids=None, master_user_password=None, cluster_parameter_group_name=None, automated_snapshot_retention_period=None, preferred_maintenance_window=None, cluster_version=None, allow_version_upgrade=None, hsm_client_certificate_identifier=None, hsm_configuration_identifier=None, new_cluster_identifier=None): DCNL 'Modifies the settings for a cluster. For example, you can add DCNL another security or parameter group, update the preferred DCNL maintenance window, or change the master user password. DCNL Resetting a cluster password or modifying the security groups DCNL associated with a cluster do not need a reboot. However, DCNL modifying a parameter group requires a reboot for parameters DCNL to take effect. For more information about managing clusters, DCNL go to `Amazon Redshift Clusters`_ in the Amazon Redshift DCNL Management Guide DCNL You can also change node type and the number of nodes to scale DCNL up or down the cluster. When resizing a cluster, you must DCNL specify both the number of nodes and the node type even if one DCNL of the parameters does not change. If you specify the same DCNL number of nodes and node type that are already configured for DCNL the cluster, an error is returned. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of the cluster to be DCNL modified. DCNL Example: `examplecluster` DCNL :type cluster_type: string DCNL :param cluster_type: The new cluster type. DCNL When you submit your cluster resize request, your existing cluster goes DCNL into a read-only mode. After Amazon Redshift provisions a new DCNL cluster based on your resize requirements, there will be outage for DCNL a period while the old cluster is deleted and your connection is DCNL switched to the new cluster. You can use DescribeResize to track DCNL the progress of the resize request. DCNL Valid Values: ` multi-node | single-node ` DCNL :type node_type: string DCNL :param node_type: The new node type of the cluster. If you specify a DCNL new node type, you must also specify the number of nodes parameter DCNL also. DCNL When you submit your request to resize a cluster, Amazon Redshift sets DCNL access permissions for the cluster to read-only. After Amazon DCNL Redshift provisions a new cluster according to your resize DCNL requirements, there will be a temporary outage while the old DCNL cluster is deleted and your connection is switched to the new DCNL cluster. When the new connection is complete, the original access DCNL permissions for the cluster are restored. You can use the DCNL DescribeResize to track the progress of the resize request. DCNL Valid Values: ` dw1.xlarge` | `dw1.8xlarge` | `dw2.large` | DCNL `dw2.8xlarge`. DCNL :type number_of_nodes: integer DCNL :param number_of_nodes: The new number of nodes of the cluster. If you DCNL specify a new number of nodes, you must also specify the node type DCNL parameter also. DCNL When you submit your request to resize a cluster, Amazon Redshift sets DCNL access permissions for the cluster to read-only. After Amazon DCNL Redshift provisions a new cluster according to your resize DCNL requirements, there will be a temporary outage while the old DCNL cluster is deleted and your connection is switched to the new DCNL cluster. When the new connection is complete, the original access DCNL permissions for the cluster are restored. You can use DCNL DescribeResize to track the progress of the resize request. DCNL Valid Values: Integer greater than `0`. DCNL :type cluster_security_groups: list DCNL :param cluster_security_groups: DCNL A list of cluster security groups to be authorized on this cluster. DCNL This change is asynchronously applied as soon as possible. DCNL Security groups currently associated with the cluster, and not in the DCNL list of groups to apply, will be revoked from the cluster. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type vpc_security_group_ids: list DCNL :param vpc_security_group_ids: A list of virtual private cloud (VPC) DCNL security groups to be associated with the cluster. DCNL :type master_user_password: string DCNL :param master_user_password: DCNL The new password for the cluster master user. This change is DCNL asynchronously applied as soon as possible. Between the time of the DCNL request and the completion of the request, the `MasterUserPassword` DCNL element exists in the `PendingModifiedValues` element of the DCNL operation response. DCNL Default: Uses existing setting. DCNL Constraints: DCNL + Must be between 8 and 64 characters in length. DCNL + Must contain at least one uppercase letter. DCNL + Must contain at least one lowercase letter. DCNL + Must contain one number. DCNL + Can be any printable ASCII character (ASCII code 33 to 126) except \' DCNL (single quote), " (double quote), \, /, @, or space. DCNL :type cluster_parameter_group_name: string DCNL :param cluster_parameter_group_name: The name of the cluster parameter DCNL group to apply to this cluster. This change is applied only after DCNL the cluster is rebooted. To reboot a cluster use RebootCluster. DCNL Default: Uses existing setting. DCNL Constraints: The cluster parameter group must be in the same parameter DCNL group family that matches the cluster version. DCNL :type automated_snapshot_retention_period: integer DCNL :param automated_snapshot_retention_period: The number of days that DCNL automated snapshots are retained. If the value is 0, automated DCNL snapshots are disabled. Even if automated snapshots are disabled, DCNL you can still create manual snapshots when you want with DCNL CreateClusterSnapshot. DCNL If you decrease the automated snapshot retention period from its DCNL current value, existing automated snapshots that fall outside of DCNL the new retention period will be immediately deleted. DCNL Default: Uses existing setting. DCNL Constraints: Must be a value from 0 to 35. DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which system maintenance can occur, if necessary. If system DCNL maintenance is necessary during the window, it may result in an DCNL outage. DCNL This maintenance window change is made immediately. If the new DCNL maintenance window indicates the current time, there must be at DCNL least 120 minutes between the current time and end of the window in DCNL order to ensure that pending changes are applied. DCNL Default: Uses existing setting. DCNL Format: ddd:hh24:mi-ddd:hh24:mi, for example `wed:07:30-wed:08:00`. DCNL Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun DCNL Constraints: Must be at least 30 minutes. DCNL :type cluster_version: string DCNL :param cluster_version: The new version number of the Amazon Redshift DCNL engine to upgrade to. DCNL For major version upgrades, if a non-default cluster parameter group is DCNL currently in use, a new cluster parameter group in the cluster DCNL parameter group family for the new version must be specified. The DCNL new cluster parameter group can be the default for that cluster DCNL parameter group family. For more information about managing DCNL parameter groups, go to `Amazon Redshift Parameter Groups`_ in the DCNL Amazon Redshift Management Guide . DCNL Example: `1.0` DCNL :type allow_version_upgrade: boolean DCNL :param allow_version_upgrade: If `True`, upgrades will be applied DCNL automatically to the cluster during the maintenance window. DCNL Default: `False` DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: Specifies the name of the HSM DCNL client certificate the Amazon Redshift cluster uses to retrieve the DCNL data encryption keys stored in an HSM. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: Specifies the name of the HSM DCNL configuration that contains the information the Amazon Redshift DCNL cluster can use to retrieve and store keys in an HSM. DCNL :type new_cluster_identifier: string DCNL :param new_cluster_identifier: The new identifier for the cluster. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens. DCNL + Alphabetic characters must be lowercase. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL + Must be unique for all clusters within an AWS account. DCNL Example: `examplecluster`'
def modify_cluster_parameter_group(self, parameter_group_name, parameters): DCNL 'Modifies the parameters of a parameter group. DCNL For more information about managing parameter groups, go to DCNL `Amazon Redshift Parameter Groups`_ in the Amazon Redshift DCNL Management Guide . DCNL :type parameter_group_name: string DCNL :param parameter_group_name: The name of the parameter group to be DCNL modified. DCNL :type parameters: list DCNL :param parameters: An array of parameters to be modified. A maximum of DCNL 20 parameters can be modified in a single request. DCNL For each parameter to be modified, you must supply at least the DCNL parameter name and parameter value; other name-value pairs of the DCNL parameter are optional. DCNL For the workload management (WLM) configuration, you must supply all DCNL the name-value pairs in the wlm_json_configuration parameter.'
def modify_cluster_subnet_group(self, cluster_subnet_group_name, subnet_ids, description=None): DCNL 'Modifies a cluster subnet group to include the specified list DCNL of VPC subnets. The operation replaces the existing list of DCNL subnets with the new list of subnets. DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name of the subnet group to be DCNL modified. DCNL :type description: string DCNL :param description: A text description of the subnet group to be DCNL modified. DCNL :type subnet_ids: list DCNL :param subnet_ids: An array of VPC subnet IDs. A maximum of 20 subnets DCNL can be modified in a single request.'
def modify_event_subscription(self, subscription_name, sns_topic_arn=None, source_type=None, source_ids=None, event_categories=None, severity=None, enabled=None): DCNL 'Modifies an existing Amazon Redshift event notification DCNL subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the modified Amazon Redshift DCNL event notification subscription. DCNL :type sns_topic_arn: string DCNL :param sns_topic_arn: The Amazon Resource Name (ARN) of the SNS topic DCNL to be used by the event notification subscription. DCNL :type source_type: string DCNL :param source_type: The type of source that will be generating the DCNL events. For example, if you want to be notified of events generated DCNL by a cluster, you would set this parameter to cluster. If this DCNL value is not specified, events are returned for all Amazon Redshift DCNL objects in your AWS account. You must specify a source type in DCNL order to specify source IDs. DCNL Valid values: cluster, cluster-parameter-group, cluster-security-group, DCNL and cluster-snapshot. DCNL :type source_ids: list DCNL :param source_ids: A list of one or more identifiers of Amazon Redshift DCNL source objects. All of the objects must be of the same type as was DCNL specified in the source type parameter. The event subscription will DCNL return only events generated by the specified objects. If not DCNL specified, then events are returned for all objects within the DCNL source type specified. DCNL Example: my-cluster-1, my-cluster-2 DCNL Example: my-snapshot-20131010 DCNL :type event_categories: list DCNL :param event_categories: Specifies the Amazon Redshift event categories DCNL to be published by the event notification subscription. DCNL Values: Configuration, Management, Monitoring, Security DCNL :type severity: string DCNL :param severity: Specifies the Amazon Redshift event severity to be DCNL published by the event notification subscription. DCNL Values: ERROR, INFO DCNL :type enabled: boolean DCNL :param enabled: A Boolean value indicating if the subscription is DCNL enabled. `True` indicates the subscription is enabled'
def modify_snapshot_copy_retention_period(self, cluster_identifier, retention_period): DCNL 'Modifies the number of days to retain automated snapshots in DCNL the destination region after they are copied from the source DCNL region. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of the cluster for DCNL which you want to change the retention period for automated DCNL snapshots that are copied to a destination region. DCNL Constraints: Must be the valid name of an existing cluster that has DCNL cross-region snapshot copy enabled. DCNL :type retention_period: integer DCNL :param retention_period: The number of days to retain automated DCNL snapshots in the destination region after they are copied from the DCNL source region. DCNL If you decrease the retention period for automated snapshots that are DCNL copied to a destination region, Amazon Redshift will delete any DCNL existing automated snapshots that were copied to the destination DCNL region and that fall outside of the new retention period. DCNL Constraints: Must be at least 1 and no more than 35.'
def purchase_reserved_node_offering(self, reserved_node_offering_id, node_count=None): DCNL 'Allows you to purchase reserved nodes. Amazon Redshift offers DCNL a predefined set of reserved node offerings. You can purchase DCNL one of the offerings. You can call the DCNL DescribeReservedNodeOfferings API to obtain the available DCNL reserved node offerings. You can call this API by providing a DCNL specific reserved node offering and the number of nodes you DCNL want to reserve. DCNL For more information about managing parameter groups, go to DCNL `Purchasing Reserved Nodes`_ in the Amazon Redshift Management DCNL Guide . DCNL :type reserved_node_offering_id: string DCNL :param reserved_node_offering_id: The unique identifier of the reserved DCNL node offering you want to purchase. DCNL :type node_count: integer DCNL :param node_count: The number of reserved nodes you want to purchase. DCNL Default: `1`'
def reboot_cluster(self, cluster_identifier): DCNL 'Reboots a cluster. This action is taken as soon as possible. DCNL It results in a momentary outage to the cluster, during which DCNL the cluster status is set to `rebooting`. A cluster event is DCNL created when the reboot is completed. Any pending cluster DCNL modifications (see ModifyCluster) are applied at this reboot. DCNL For more information about managing clusters, go to `Amazon DCNL Redshift Clusters`_ in the Amazon Redshift Management Guide DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The cluster identifier.'
def reset_cluster_parameter_group(self, parameter_group_name, reset_all_parameters=None, parameters=None): DCNL 'Sets one or more parameters of the specified parameter group DCNL to their default values and sets the source values of the DCNL parameters to "engine-default". To reset the entire parameter DCNL group specify the ResetAllParameters parameter. For parameter DCNL changes to take effect you must reboot any associated DCNL clusters. DCNL :type parameter_group_name: string DCNL :param parameter_group_name: The name of the cluster parameter group to DCNL be reset. DCNL :type reset_all_parameters: boolean DCNL :param reset_all_parameters: If `True`, all parameters in the specified DCNL parameter group will be reset to their default values. DCNL Default: `True` DCNL :type parameters: list DCNL :param parameters: An array of names of parameters to be reset. If DCNL ResetAllParameters option is not used, then at least one parameter DCNL name must be supplied. DCNL Constraints: A maximum of 20 parameters can be reset in a single DCNL request.'
def restore_from_cluster_snapshot(self, cluster_identifier, snapshot_identifier, snapshot_cluster_identifier=None, port=None, availability_zone=None, allow_version_upgrade=None, cluster_subnet_group_name=None, publicly_accessible=None, owner_account=None, hsm_client_certificate_identifier=None, hsm_configuration_identifier=None, elastic_ip=None, cluster_parameter_group_name=None, cluster_security_groups=None, vpc_security_group_ids=None, preferred_maintenance_window=None, automated_snapshot_retention_period=None): DCNL 'Creates a new cluster from a snapshot. Amazon Redshift creates DCNL the resulting cluster with the same configuration as the DCNL original cluster from which the snapshot was created, except DCNL that the new cluster is created with the default cluster DCNL security and parameter group. After Amazon Redshift creates DCNL the cluster you can use the ModifyCluster API to associate a DCNL different security group and different parameter group with DCNL the restored cluster. DCNL If you restore a cluster into a VPC, you must provide a DCNL cluster subnet group where you want the cluster restored. DCNL For more information about working with snapshots, go to DCNL `Amazon Redshift Snapshots`_ in the Amazon Redshift Management DCNL Guide . DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The identifier of the cluster that will be DCNL created from restoring the snapshot. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens. DCNL + Alphabetic characters must be lowercase. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL + Must be unique for all clusters within an AWS account. DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: The name of the snapshot from which to DCNL create the new cluster. This parameter isn\'t case sensitive. DCNL Example: `my-snapshot-id` DCNL :type snapshot_cluster_identifier: string DCNL :param snapshot_cluster_identifier: The name of the cluster the source DCNL snapshot was created from. This parameter is required if your IAM DCNL user has a policy containing a snapshot resource element that DCNL specifies anything other than * for the cluster name. DCNL :type port: integer DCNL :param port: The port number on which the cluster accepts connections. DCNL Default: The same port as the original cluster. DCNL Constraints: Must be between `1115` and `65535`. DCNL :type availability_zone: string DCNL :param availability_zone: The Amazon EC2 Availability Zone in which to DCNL restore the cluster. DCNL Default: A random, system-chosen Availability Zone. DCNL Example: `us-east-1a` DCNL :type allow_version_upgrade: boolean DCNL :param allow_version_upgrade: If `True`, upgrades can be applied during DCNL the maintenance window to the Amazon Redshift engine that is DCNL running on the cluster. DCNL Default: `True` DCNL :type cluster_subnet_group_name: string DCNL :param cluster_subnet_group_name: The name of the subnet group where DCNL you want to cluster restored. DCNL A snapshot of cluster in VPC can be restored only in VPC. Therefore, DCNL you must provide subnet group name where you want the cluster DCNL restored. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: If `True`, the cluster can be accessed from DCNL a public network. DCNL :type owner_account: string DCNL :param owner_account: The AWS customer account used to create or copy DCNL the snapshot. Required if you are restoring a snapshot you do not DCNL own, optional if you own the snapshot. DCNL :type hsm_client_certificate_identifier: string DCNL :param hsm_client_certificate_identifier: Specifies the name of the HSM DCNL client certificate the Amazon Redshift cluster uses to retrieve the DCNL data encryption keys stored in an HSM. DCNL :type hsm_configuration_identifier: string DCNL :param hsm_configuration_identifier: Specifies the name of the HSM DCNL configuration that contains the information the Amazon Redshift DCNL cluster can use to retrieve and store keys in an HSM. DCNL :type elastic_ip: string DCNL :param elastic_ip: The elastic IP (EIP) address for the cluster. DCNL :type cluster_parameter_group_name: string DCNL :param cluster_parameter_group_name: DCNL The name of the parameter group to be associated with this cluster. DCNL Default: The default Amazon Redshift cluster parameter group. For DCNL information about the default parameter group, go to `Working with DCNL Amazon Redshift Parameter Groups`_. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type cluster_security_groups: list DCNL :param cluster_security_groups: A list of security groups to be DCNL associated with this cluster. DCNL Default: The default cluster security group for Amazon Redshift. DCNL Cluster security groups only apply to clusters outside of VPCs. DCNL :type vpc_security_group_ids: list DCNL :param vpc_security_group_ids: A list of Virtual Private Cloud (VPC) DCNL security groups to be associated with the cluster. DCNL Default: The default VPC security group is associated with the cluster. DCNL VPC security groups only apply to clusters in VPCs. DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which automated cluster maintenance can occur. DCNL Format: `ddd:hh24:mi-ddd:hh24:mi` DCNL Default: The value selected for the cluster from which the snapshot was DCNL taken. The following list shows the time blocks for each region DCNL from which the default maintenance windows are assigned. DCNL + **US-East (Northern Virginia) Region:** 03:00-11:00 UTC DCNL + **US-West (Oregon) Region** 06:00-14:00 UTC DCNL + **EU (Ireland) Region** 22:00-06:00 UTC DCNL + **Asia Pacific (Singapore) Region** 14:00-22:00 UTC DCNL + **Asia Pacific (Sydney) Region** 12:00-20:00 UTC DCNL + **Asia Pacific (Tokyo) Region** 17:00-03:00 UTC DCNL Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun DCNL Constraints: Minimum 30-minute window. DCNL :type automated_snapshot_retention_period: integer DCNL :param automated_snapshot_retention_period: The number of days that DCNL automated snapshots are retained. If the value is 0, automated DCNL snapshots are disabled. Even if automated snapshots are disabled, DCNL you can still create manual snapshots when you want with DCNL CreateClusterSnapshot. DCNL Default: The value selected for the cluster from which the snapshot was DCNL taken. DCNL Constraints: Must be a value from 0 to 35.'
def revoke_cluster_security_group_ingress(self, cluster_security_group_name, cidrip=None, ec2_security_group_name=None, ec2_security_group_owner_id=None): DCNL 'Revokes an ingress rule in an Amazon Redshift security group DCNL for a previously authorized IP range or Amazon EC2 security DCNL group. To add an ingress rule, see DCNL AuthorizeClusterSecurityGroupIngress. For information about DCNL managing security groups, go to `Amazon Redshift Cluster DCNL Security Groups`_ in the Amazon Redshift Management Guide . DCNL :type cluster_security_group_name: string DCNL :param cluster_security_group_name: The name of the security Group from DCNL which to revoke the ingress rule. DCNL :type cidrip: string DCNL :param cidrip: The IP range for which to revoke access. This range must DCNL be a valid Classless Inter-Domain Routing (CIDR) block of IP DCNL addresses. If `CIDRIP` is specified, `EC2SecurityGroupName` and DCNL `EC2SecurityGroupOwnerId` cannot be provided. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The name of the EC2 Security Group DCNL whose access is to be revoked. If `EC2SecurityGroupName` is DCNL specified, `EC2SecurityGroupOwnerId` must also be provided and DCNL `CIDRIP` cannot be provided. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The AWS account number of the owner DCNL of the security group specified in the `EC2SecurityGroupName` DCNL parameter. The AWS access key ID is not an acceptable value. If DCNL `EC2SecurityGroupOwnerId` is specified, `EC2SecurityGroupName` must DCNL also be provided. and `CIDRIP` cannot be provided. DCNL Example: `111122223333`'
def revoke_snapshot_access(self, snapshot_identifier, account_with_restore_access, snapshot_cluster_identifier=None): DCNL 'Removes the ability of the specified AWS customer account to DCNL restore the specified snapshot. If the account is currently DCNL restoring the snapshot, the restore will run to completion. DCNL For more information about working with snapshots, go to DCNL `Amazon Redshift Snapshots`_ in the Amazon Redshift Management DCNL Guide . DCNL :type snapshot_identifier: string DCNL :param snapshot_identifier: The identifier of the snapshot that the DCNL account can no longer access. DCNL :type snapshot_cluster_identifier: string DCNL :param snapshot_cluster_identifier: The identifier of the cluster the DCNL snapshot was created from. This parameter is required if your IAM DCNL user has a policy containing a snapshot resource element that DCNL specifies anything other than * for the cluster name. DCNL :type account_with_restore_access: string DCNL :param account_with_restore_access: The identifier of the AWS customer DCNL account that can no longer restore the specified snapshot.'
def rotate_encryption_key(self, cluster_identifier): DCNL 'Rotates the encryption keys for a cluster. DCNL :type cluster_identifier: string DCNL :param cluster_identifier: The unique identifier of the cluster that DCNL you want to rotate the encryption keys for. DCNL Constraints: Must be the name of valid cluster that has encryption DCNL enabled.'
def create_log_group(self, log_group_name): DCNL 'Creates a new log group with the specified name. The name of DCNL the log group must be unique within a region for an AWS DCNL account. You can create up to 100 log groups per account. DCNL You must use the following guidelines when naming a log group: DCNL + Log group names can be between 1 and 512 characters long. DCNL + Allowed characters are az, AZ, 09, \'_\' (underscore), \'-\' DCNL (hyphen), \'/\' (forward slash), and \'.\' (period). DCNL Log groups are created with a default retention of 14 days. DCNL The retention attribute allow you to configure the number of DCNL days you want to retain log events in the specified log group. DCNL See the `SetRetention` operation on how to modify the DCNL retention of your log groups. DCNL :type log_group_name: string DCNL :param log_group_name:'
def create_log_stream(self, log_group_name, log_stream_name): DCNL 'Creates a new log stream in the specified log group. The name DCNL of the log stream must be unique within the log group. There DCNL is no limit on the number of log streams that can exist in a DCNL log group. DCNL You must use the following guidelines when naming a log DCNL stream: DCNL + Log stream names can be between 1 and 512 characters long. DCNL + The \':\' colon character is not allowed. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type log_stream_name: string DCNL :param log_stream_name:'
def delete_log_group(self, log_group_name): DCNL 'Deletes the log group with the specified name. Amazon DCNL CloudWatch Logs will delete a log group only if there are no DCNL log streams and no metric filters associated with the log DCNL group. If this condition is not satisfied, the request will DCNL fail and the log group will not be deleted. DCNL :type log_group_name: string DCNL :param log_group_name:'
def delete_log_stream(self, log_group_name, log_stream_name): DCNL 'Deletes a log stream and permanently deletes all the archived DCNL log events associated with it. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type log_stream_name: string DCNL :param log_stream_name:'
def delete_metric_filter(self, log_group_name, filter_name): DCNL 'Deletes a metric filter associated with the specified log DCNL group. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type filter_name: string DCNL :param filter_name: The name of the metric filter.'
def delete_retention_policy(self, log_group_name): DCNL ':type log_group_name: string DCNL :param log_group_name:'
def describe_log_groups(self, log_group_name_prefix=None, next_token=None, limit=None): DCNL 'Returns all the log groups that are associated with the AWS DCNL account making the request. The list returned in the response DCNL is ASCII-sorted by log group name. DCNL By default, this operation returns up to 50 log groups. If DCNL there are more log groups to list, the response would contain DCNL a `nextToken` value in the response body. You can also limit DCNL the number of log groups returned in the response by DCNL specifying the `limit` parameter in the request. DCNL :type log_group_name_prefix: string DCNL :param log_group_name_prefix: DCNL :type next_token: string DCNL :param next_token: A string token used for pagination that points to DCNL the next page of results. It must be a value obtained from the DCNL response of the previous `DescribeLogGroups` request. DCNL :type limit: integer DCNL :param limit: The maximum number of items returned in the response. If DCNL you don\'t specify a value, the request would return up to 50 items.'
def describe_log_streams(self, log_group_name, log_stream_name_prefix=None, next_token=None, limit=None): DCNL 'Returns all the log streams that are associated with the DCNL specified log group. The list returned in the response is DCNL ASCII-sorted by log stream name. DCNL By default, this operation returns up to 50 log streams. If DCNL there are more log streams to list, the response would contain DCNL a `nextToken` value in the response body. You can also limit DCNL the number of log streams returned in the response by DCNL specifying the `limit` parameter in the request. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type log_stream_name_prefix: string DCNL :param log_stream_name_prefix: DCNL :type next_token: string DCNL :param next_token: A string token used for pagination that points to DCNL the next page of results. It must be a value obtained from the DCNL response of the previous `DescribeLogStreams` request. DCNL :type limit: integer DCNL :param limit: The maximum number of items returned in the response. If DCNL you don\'t specify a value, the request would return up to 50 items.'
def describe_metric_filters(self, log_group_name, filter_name_prefix=None, next_token=None, limit=None): DCNL 'Returns all the metrics filters associated with the specified DCNL log group. The list returned in the response is ASCII-sorted DCNL by filter name. DCNL By default, this operation returns up to 50 metric filters. If DCNL there are more metric filters to list, the response would DCNL contain a `nextToken` value in the response body. You can also DCNL limit the number of metric filters returned in the response by DCNL specifying the `limit` parameter in the request. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type filter_name_prefix: string DCNL :param filter_name_prefix: The name of the metric filter. DCNL :type next_token: string DCNL :param next_token: A string token used for pagination that points to DCNL the next page of results. It must be a value obtained from the DCNL response of the previous `DescribeMetricFilters` request. DCNL :type limit: integer DCNL :param limit: The maximum number of items returned in the response. If DCNL you don\'t specify a value, the request would return up to 50 items.'
def get_log_events(self, log_group_name, log_stream_name, start_time=None, end_time=None, next_token=None, limit=None, start_from_head=None): DCNL 'Retrieves log events from the specified log stream. You can DCNL provide an optional time range to filter the results on the DCNL event `timestamp`. DCNL By default, this operation returns as much log events as can DCNL fit in a response size of 1MB, up to 10,000 log events. The DCNL response will always include a `nextForwardToken` and a DCNL `nextBackwardToken` in the response body. You can use any of DCNL these tokens in subsequent `GetLogEvents` requests to paginate DCNL through events in either forward or backward direction. You DCNL can also limit the number of log events returned in the DCNL response by specifying the `limit` parameter in the request. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type log_stream_name: string DCNL :param log_stream_name: DCNL :type start_time: long DCNL :param start_time: A point in time expressed as the number milliseconds DCNL since Jan 1, 1970 00:00:00 UTC. DCNL :type end_time: long DCNL :param end_time: A point in time expressed as the number milliseconds DCNL since Jan 1, 1970 00:00:00 UTC. DCNL :type next_token: string DCNL :param next_token: A string token used for pagination that points to DCNL the next page of results. It must be a value obtained from the DCNL `nextForwardToken` or `nextBackwardToken` fields in the response of DCNL the previous `GetLogEvents` request. DCNL :type limit: integer DCNL :param limit: The maximum number of log events returned in the DCNL response. If you don\'t specify a value, the request would return as DCNL much log events as can fit in a response size of 1MB, up to 10,000 DCNL log events. DCNL :type start_from_head: boolean DCNL :param start_from_head:'
def put_log_events(self, log_group_name, log_stream_name, log_events, sequence_token=None): DCNL 'Uploads a batch of log events to the specified log stream. DCNL Every PutLogEvents request must include the `sequenceToken` DCNL obtained from the response of the previous request. An upload DCNL in a newly created log stream does not require a DCNL `sequenceToken`. DCNL The batch of events must satisfy the following constraints: DCNL + The maximum batch size is 32,768 bytes, and this size is DCNL calculated as the sum of all event messages in UTF-8, plus 26 DCNL bytes for each log event. DCNL + None of the log events in the batch can be more than 2 hours DCNL in the future. DCNL + None of the log events in the batch can be older than 14 DCNL days or the retention period of the log group. DCNL + The log events in the batch must be in chronological ordered DCNL by their `timestamp`. DCNL + The maximum number of log events in a batch is 1,000. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type log_stream_name: string DCNL :param log_stream_name: DCNL :type log_events: list DCNL :param log_events: A list of events belonging to a log stream. DCNL :type sequence_token: string DCNL :param sequence_token: A string token that must be obtained from the DCNL response of the previous `PutLogEvents` request.'
def put_metric_filter(self, log_group_name, filter_name, filter_pattern, metric_transformations): DCNL 'Creates or updates a metric filter and associates it with the DCNL specified log group. Metric filters allow you to configure DCNL rules to extract metric data from log events ingested through DCNL `PutLogEvents` requests. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type filter_name: string DCNL :param filter_name: The name of the metric filter. DCNL :type filter_pattern: string DCNL :param filter_pattern: DCNL :type metric_transformations: list DCNL :param metric_transformations:'
def put_retention_policy(self, log_group_name, retention_in_days): DCNL ':type log_group_name: string DCNL :param log_group_name: DCNL :type retention_in_days: integer DCNL :param retention_in_days: Specifies the number of days you want to DCNL retain log events in the specified log group. Possible values are: DCNL 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 547, 730.'
def set_retention(self, log_group_name, retention_in_days): DCNL 'Sets the retention of the specified log group. Log groups are DCNL created with a default retention of 14 days. The retention DCNL attribute allow you to configure the number of days you want DCNL to retain log events in the specified log group. DCNL :type log_group_name: string DCNL :param log_group_name: DCNL :type retention_in_days: integer DCNL :param retention_in_days: Specifies the number of days you want to DCNL retain log events in the specified log group. Possible values are: DCNL 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 547, 730.'
def test_metric_filter(self, filter_pattern, log_event_messages): DCNL 'Tests the filter pattern of a metric filter against a sample DCNL of log event messages. You can use this operation to validate DCNL the correctness of a metric filter pattern. DCNL :type filter_pattern: string DCNL :param filter_pattern: DCNL :type log_event_messages: list DCNL :param log_event_messages:'
def create_cluster(self, cluster_name=None): DCNL 'Creates a new Amazon ECS cluster. By default, your account DCNL will receive a `default` cluster when you launch your first DCNL container instance. However, you can create your own cluster DCNL with a unique name with the `CreateCluster` action. DCNL During the preview, each account is limited to two clusters. DCNL :type cluster_name: string DCNL :param cluster_name: The name of your cluster. If you do not specify a DCNL name for your cluster, you will create a cluster named `default`.'
def delete_cluster(self, cluster): DCNL 'Deletes the specified cluster. You must deregister all DCNL container instances from this cluster before you may delete DCNL it. You can list the container instances in a cluster with DCNL ListContainerInstances and deregister them with DCNL DeregisterContainerInstance. DCNL :type cluster: string DCNL :param cluster: The cluster you want to delete.'
def deregister_container_instance(self, container_instance, cluster=None, force=None): DCNL 'Deregisters an Amazon ECS container instance from the DCNL specified cluster. This instance will no longer be available DCNL to run tasks. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the container instance you want to DCNL deregister. If you do not specify a cluster, the default cluster is DCNL assumed. DCNL :type container_instance: string DCNL :param container_instance: The container instance UUID or full Amazon DCNL Resource Name (ARN) of the container instance you want to DCNL deregister. The ARN contains the `arn:aws:ecs` namespace, followed DCNL by the region of the container instance, the AWS account ID of the DCNL container instance owner, the `container-instance` namespace, and DCNL then the container instance UUID. For example, arn:aws:ecs: region DCNL : aws_account_id :container-instance/ container_instance_UUID . DCNL :type force: boolean DCNL :param force: Force the deregistration of the container instance. You DCNL can use the `force` parameter if you have several tasks running on DCNL a container instance and you don\'t want to run `StopTask` for each DCNL task before deregistering the container instance.'
def deregister_task_definition(self, task_definition): DCNL 'Deregisters the specified task definition. You will no longer DCNL be able to run tasks from this definition after DCNL deregistration. DCNL :type task_definition: string DCNL :param task_definition: The `family` and `revision` ( DCNL `family:revision`) or full Amazon Resource Name (ARN) of the task DCNL definition that you want to deregister.'
def describe_clusters(self, clusters=None): DCNL 'Describes one or more of your clusters. DCNL :type clusters: list DCNL :param clusters: A space-separated list of cluster names or full DCNL cluster Amazon Resource Name (ARN) entries. If you do not specify a DCNL cluster, the default cluster is assumed.'
def describe_container_instances(self, container_instances, cluster=None): DCNL 'Describes Amazon EC2 Container Service container instances. DCNL Returns metadata about registered and remaining resources on DCNL each container instance requested. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the container instances you want to DCNL describe. If you do not specify a cluster, the default cluster is DCNL assumed. DCNL :type container_instances: list DCNL :param container_instances: A space-separated list of container DCNL instance UUIDs or full Amazon Resource Name (ARN) entries.'
def describe_task_definition(self, task_definition): DCNL 'Describes a task definition. DCNL :type task_definition: string DCNL :param task_definition: The `family` and `revision` ( DCNL `family:revision`) or full Amazon Resource Name (ARN) of the task DCNL definition that you want to describe.'
def describe_tasks(self, tasks, cluster=None): DCNL 'Describes a specified task or tasks. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the task you want to describe. If you do not DCNL specify a cluster, the default cluster is assumed. DCNL :type tasks: list DCNL :param tasks: A space-separated list of task UUIDs or full Amazon DCNL Resource Name (ARN) entries.'
def discover_poll_endpoint(self, container_instance=None): DCNL 'This action is only used by the Amazon EC2 Container Service DCNL agent, and it is not intended for use outside of the agent. DCNL Returns an endpoint for the Amazon EC2 Container Service agent DCNL to poll for updates. DCNL :type container_instance: string DCNL :param container_instance: The container instance UUID or full Amazon DCNL Resource Name (ARN) of the container instance. The ARN contains the DCNL `arn:aws:ecs` namespace, followed by the region of the container DCNL instance, the AWS account ID of the container instance owner, the DCNL `container-instance` namespace, and then the container instance DCNL UUID. For example, arn:aws:ecs: region : aws_account_id :container- DCNL instance/ container_instance_UUID .'
def list_clusters(self, next_token=None, max_results=None): DCNL 'Returns a list of existing clusters. DCNL :type next_token: string DCNL :param next_token: The `nextToken` value returned from a previous DCNL paginated `ListClusters` request where `maxResults` was used and DCNL the results exceeded the value of that parameter. Pagination DCNL continues from the end of the previous results that returned the DCNL `nextToken` value. This value is `null` when there are no more DCNL results to return. DCNL :type max_results: integer DCNL :param max_results: The maximum number of cluster results returned by DCNL `ListClusters` in paginated output. When this parameter is used, DCNL `ListClusters` only returns `maxResults` results in a single page DCNL along with a `nextToken` response element. The remaining results of DCNL the initial request can be seen by sending another `ListClusters` DCNL request with the returned `nextToken` value. This value can be DCNL between 1 and 100. If this parameter is not used, then DCNL `ListClusters` returns up to 100 results and a `nextToken` value if DCNL applicable.'
def list_container_instances(self, cluster=None, next_token=None, max_results=None): DCNL 'Returns a list of container instances in a specified cluster. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the container instances you want to list. If DCNL you do not specify a cluster, the default cluster is assumed.. DCNL :type next_token: string DCNL :param next_token: The `nextToken` value returned from a previous DCNL paginated `ListContainerInstances` request where `maxResults` was DCNL used and the results exceeded the value of that parameter. DCNL Pagination continues from the end of the previous results that DCNL returned the `nextToken` value. This value is `null` when there are DCNL no more results to return. DCNL :type max_results: integer DCNL :param max_results: The maximum number of container instance results DCNL returned by `ListContainerInstances` in paginated output. When this DCNL parameter is used, `ListContainerInstances` only returns DCNL `maxResults` results in a single page along with a `nextToken` DCNL response element. The remaining results of the initial request can DCNL be seen by sending another `ListContainerInstances` request with DCNL the returned `nextToken` value. This value can be between 1 and DCNL 100. If this parameter is not used, then `ListContainerInstances` DCNL returns up to 100 results and a `nextToken` value if applicable.'
def list_task_definitions(self, family_prefix=None, next_token=None, max_results=None): DCNL 'Returns a list of task definitions that are registered to your DCNL account. You can filter the results by family name with the DCNL `familyPrefix` parameter. DCNL :type family_prefix: string DCNL :param family_prefix: The name of the family that you want to filter DCNL the `ListTaskDefinitions` results with. Specifying a `familyPrefix` DCNL will limit the listed task definitions to definitions that belong DCNL to that family. DCNL :type next_token: string DCNL :param next_token: The `nextToken` value returned from a previous DCNL paginated `ListTaskDefinitions` request where `maxResults` was used DCNL and the results exceeded the value of that parameter. Pagination DCNL continues from the end of the previous results that returned the DCNL `nextToken` value. This value is `null` when there are no more DCNL results to return. DCNL :type max_results: integer DCNL :param max_results: The maximum number of task definition results DCNL returned by `ListTaskDefinitions` in paginated output. When this DCNL parameter is used, `ListTaskDefinitions` only returns `maxResults` DCNL results in a single page along with a `nextToken` response element. DCNL The remaining results of the initial request can be seen by sending DCNL another `ListTaskDefinitions` request with the returned `nextToken` DCNL value. This value can be between 1 and 100. If this parameter is DCNL not used, then `ListTaskDefinitions` returns up to 100 results and DCNL a `nextToken` value if applicable.'
def list_tasks(self, cluster=None, container_instance=None, family=None, next_token=None, max_results=None): DCNL 'Returns a list of tasks for a specified cluster. You can DCNL filter the results by family name or by a particular container DCNL instance with the `family` and `containerInstance` parameters. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the tasks you want to list. If you do not DCNL specify a cluster, the default cluster is assumed.. DCNL :type container_instance: string DCNL :param container_instance: The container instance UUID or full Amazon DCNL Resource Name (ARN) of the container instance that you want to DCNL filter the `ListTasks` results with. Specifying a DCNL `containerInstance` will limit the results to tasks that belong to DCNL that container instance. DCNL :type family: string DCNL :param family: The name of the family that you want to filter the DCNL `ListTasks` results with. Specifying a `family` will limit the DCNL results to tasks that belong to that family. DCNL :type next_token: string DCNL :param next_token: The `nextToken` value returned from a previous DCNL paginated `ListTasks` request where `maxResults` was used and the DCNL results exceeded the value of that parameter. Pagination continues DCNL from the end of the previous results that returned the `nextToken` DCNL value. This value is `null` when there are no more results to DCNL return. DCNL :type max_results: integer DCNL :param max_results: The maximum number of task results returned by DCNL `ListTasks` in paginated output. When this parameter is used, DCNL `ListTasks` only returns `maxResults` results in a single page DCNL along with a `nextToken` response element. The remaining results of DCNL the initial request can be seen by sending another `ListTasks` DCNL request with the returned `nextToken` value. This value can be DCNL between 1 and 100. If this parameter is not used, then `ListTasks` DCNL returns up to 100 results and a `nextToken` value if applicable.'
def register_container_instance(self, cluster=None, instance_identity_document=None, instance_identity_document_signature=None, total_resources=None): DCNL 'This action is only used by the Amazon EC2 Container Service DCNL agent, and it is not intended for use outside of the agent. DCNL Registers an Amazon EC2 instance into the specified cluster. DCNL This instance will become available to place containers on. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that you want to register your container instance with. DCNL If you do not specify a cluster, the default cluster is assumed.. DCNL :type instance_identity_document: string DCNL :param instance_identity_document: DCNL :type instance_identity_document_signature: string DCNL :param instance_identity_document_signature: DCNL :type total_resources: list DCNL :param total_resources:'
def register_task_definition(self, family, container_definitions): DCNL 'Registers a new task definition from the supplied `family` and DCNL `containerDefinitions`. DCNL :type family: string DCNL :param family: You can specify a `family` for a task definition, which DCNL allows you to track multiple versions of the same task definition. DCNL You can think of the `family` as a name for your task definition. DCNL :type container_definitions: list DCNL :param container_definitions: A list of container definitions in JSON DCNL format that describe the different containers that make up your DCNL task.'
def run_task(self, task_definition, cluster=None, overrides=None, count=None): DCNL 'Start a task using random placement and the default Amazon ECS DCNL scheduler. If you want to use your own scheduler or place a DCNL task on a specific container instance, use `StartTask` DCNL instead. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that you want to run your task on. If you do not DCNL specify a cluster, the default cluster is assumed.. DCNL :type task_definition: string DCNL :param task_definition: The `family` and `revision` ( DCNL `family:revision`) or full Amazon Resource Name (ARN) of the task DCNL definition that you want to run. DCNL :type overrides: dict DCNL :param overrides: DCNL :type count: integer DCNL :param count: The number of instances of the specified task that you DCNL would like to place on your cluster.'
def start_task(self, task_definition, container_instances, cluster=None, overrides=None): DCNL 'Starts a new task from the specified task definition on the DCNL specified container instance or instances. If you want to use DCNL the default Amazon ECS scheduler to place your task, use DCNL `RunTask` instead. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that you want to start your task on. If you do not DCNL specify a cluster, the default cluster is assumed.. DCNL :type task_definition: string DCNL :param task_definition: The `family` and `revision` ( DCNL `family:revision`) or full Amazon Resource Name (ARN) of the task DCNL definition that you want to start. DCNL :type overrides: dict DCNL :param overrides: DCNL :type container_instances: list DCNL :param container_instances: The container instance UUIDs or full Amazon DCNL Resource Name (ARN) entries for the container instances on which DCNL you would like to place your task.'
def stop_task(self, task, cluster=None): DCNL 'Stops a running task. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the task you want to stop. If you do not DCNL specify a cluster, the default cluster is assumed.. DCNL :type task: string DCNL :param task: The task UUIDs or full Amazon Resource Name (ARN) entry of DCNL the task you would like to stop.'
def submit_container_state_change(self, cluster=None, task=None, container_name=None, status=None, exit_code=None, reason=None, network_bindings=None): DCNL 'This action is only used by the Amazon EC2 Container Service DCNL agent, and it is not intended for use outside of the agent. DCNL Sent to acknowledge that a container changed states. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the container. DCNL :type task: string DCNL :param task: The task UUID or full Amazon Resource Name (ARN) of the DCNL task that hosts the container. DCNL :type container_name: string DCNL :param container_name: The name of the container. DCNL :type status: string DCNL :param status: The status of the state change request. DCNL :type exit_code: integer DCNL :param exit_code: The exit code returned for the state change request. DCNL :type reason: string DCNL :param reason: The reason for the state change request. DCNL :type network_bindings: list DCNL :param network_bindings: The network bindings of the container.'
def submit_task_state_change(self, cluster=None, task=None, status=None, reason=None): DCNL 'This action is only used by the Amazon EC2 Container Service DCNL agent, and it is not intended for use outside of the agent. DCNL Sent to acknowledge that a task changed states. DCNL :type cluster: string DCNL :param cluster: The short name or full Amazon Resource Name (ARN) of DCNL the cluster that hosts the task. DCNL :type task: string DCNL :param task: The task UUID or full Amazon Resource Name (ARN) of the DCNL task in the state change request. DCNL :type status: string DCNL :param status: The status of the state change request. DCNL :type reason: string DCNL :param reason: The reason for the state change request.'
def __init__(self, mailhost, username, password, fromaddr, toaddrs, subject): DCNL 'Initialize the handler. DCNL We have extended the constructor to accept a username/password DCNL for SMTP authentication.'
def emit(self, record): DCNL 'Emit a record. DCNL Format the record and send it to the specified addressees. DCNL It would be really nice if I could add authorization to this class DCNL without having to resort to cut and paste inheritance but, no.'
def __init__(self, str=None, hashfunc=None): DCNL 'Load the string from an initial value, this should be the DCNL raw hashed password.'
def create_trail(self, name, s3_bucket_name, s3_key_prefix=None, sns_topic_name=None, include_global_service_events=None, cloud_watch_logs_log_group_arn=None, cloud_watch_logs_role_arn=None): DCNL 'From the command line, use `create-subscription`. DCNL Creates a trail that specifies the settings for delivery of DCNL log data to an Amazon S3 bucket. DCNL :type name: string DCNL :param name: Specifies the name of the trail. DCNL :type s3_bucket_name: string DCNL :param s3_bucket_name: Specifies the name of the Amazon S3 bucket DCNL designated for publishing log files. DCNL :type s3_key_prefix: string DCNL :param s3_key_prefix: Specifies the Amazon S3 key prefix that precedes DCNL the name of the bucket you have designated for log file delivery. DCNL :type sns_topic_name: string DCNL :param sns_topic_name: Specifies the name of the Amazon SNS topic DCNL defined for notification of log file delivery. DCNL :type include_global_service_events: boolean DCNL :param include_global_service_events: Specifies whether the trail is DCNL publishing events from global services such as IAM to the log DCNL files. DCNL :type cloud_watch_logs_log_group_arn: string DCNL :param cloud_watch_logs_log_group_arn: Specifies a log group name using DCNL an Amazon Resource Name (ARN), a unique identifier that represents DCNL the log group to which CloudTrail logs will be delivered. Not DCNL required unless you specify CloudWatchLogsRoleArn. DCNL :type cloud_watch_logs_role_arn: string DCNL :param cloud_watch_logs_role_arn: Specifies the role for the CloudWatch DCNL Logs endpoint to assume to write to a users log group.'
def delete_trail(self, name): DCNL 'Deletes a trail. DCNL :type name: string DCNL :param name: The name of a trail to be deleted.'
def describe_trails(self, trail_name_list=None): DCNL 'Retrieves settings for the trail associated with the current DCNL region for your account. DCNL :type trail_name_list: list DCNL :param trail_name_list: The trail returned.'
def get_trail_status(self, name): DCNL 'Returns a JSON-formatted list of information about the DCNL specified trail. Fields include information on delivery DCNL errors, Amazon SNS and Amazon S3 errors, and start and stop DCNL logging times for each trail. DCNL :type name: string DCNL :param name: The name of the trail for which you are requesting the DCNL current status.'
def lookup_events(self, lookup_attributes=None, start_time=None, end_time=None, max_results=None, next_token=None): DCNL 'Looks up API activity events captured by CloudTrail that DCNL create, update, or delete resources in your account. Events DCNL for a region can be looked up for the times in which you had DCNL CloudTrail turned on in that region during the last seven DCNL days. Lookup supports five different attributes: time range DCNL (defined by a start time and end time), user name, event name, DCNL resource type, and resource name. All attributes are optional. DCNL The maximum number of attributes that can be specified in any DCNL one lookup request are time range and one other attribute. The DCNL default number of results returned is 10, with a maximum of 50 DCNL possible. The response includes a token that you can use to DCNL get the next page of results. DCNL The rate of lookup requests is limited to one per second per DCNL account. If this limit is exceeded, a throttling error occurs. DCNL Events that occurred during the selected time range will not DCNL be available for lookup if CloudTrail logging was not enabled DCNL when the events occurred. DCNL :type lookup_attributes: list DCNL :param lookup_attributes: Contains a list of lookup attributes. DCNL Currently the list can contain only one item. DCNL :type start_time: timestamp DCNL :param start_time: Specifies that only events that occur after or at DCNL the specified time are returned. If the specified start time is DCNL after the specified end time, an error is returned. DCNL :type end_time: timestamp DCNL :param end_time: Specifies that only events that occur before or at the DCNL specified time are returned. If the specified end time is before DCNL the specified start time, an error is returned. DCNL :type max_results: integer DCNL :param max_results: The number of events to return. Possible values are DCNL 1 through 50. The default is 10. DCNL :type next_token: string DCNL :param next_token: The token to use to get the next page of results DCNL after a previous API call. This token must be passed in with the DCNL same parameters that were specified in the the original call. For DCNL example, if the original call specified an AttributeKey of DCNL \'Username\' with a value of \'root\', the call with NextToken should DCNL include those same parameters.'
def start_logging(self, name): DCNL 'Starts the recording of AWS API calls and log file delivery DCNL for a trail. DCNL :type name: string DCNL :param name: The name of the trail for which CloudTrail logs AWS API DCNL calls.'
def stop_logging(self, name): DCNL 'Suspends the recording of AWS API calls and log file delivery DCNL for the specified trail. Under most circumstances, there is no DCNL need to use this action. You can update a trail without DCNL stopping it first. This action is the only way to stop DCNL recording. DCNL :type name: string DCNL :param name: Communicates to CloudTrail the name of the trail for which DCNL to stop logging AWS API calls.'
def update_trail(self, name, s3_bucket_name=None, s3_key_prefix=None, sns_topic_name=None, include_global_service_events=None, cloud_watch_logs_log_group_arn=None, cloud_watch_logs_role_arn=None): DCNL 'From the command line, use `update-subscription`. DCNL Updates the settings that specify delivery of log files. DCNL Changes to a trail do not require stopping the CloudTrail DCNL service. Use this action to designate an existing bucket for DCNL log delivery. If the existing bucket has previously been a DCNL target for CloudTrail log files, an IAM policy exists for the DCNL bucket. DCNL :type name: string DCNL :param name: Specifies the name of the trail. DCNL :type s3_bucket_name: string DCNL :param s3_bucket_name: Specifies the name of the Amazon S3 bucket DCNL designated for publishing log files. DCNL :type s3_key_prefix: string DCNL :param s3_key_prefix: Specifies the Amazon S3 key prefix that precedes DCNL the name of the bucket you have designated for log file delivery. DCNL :type sns_topic_name: string DCNL :param sns_topic_name: Specifies the name of the Amazon SNS topic DCNL defined for notification of log file delivery. DCNL :type include_global_service_events: boolean DCNL :param include_global_service_events: Specifies whether the trail is DCNL publishing events from global services such as IAM to the log DCNL files. DCNL :type cloud_watch_logs_log_group_arn: string DCNL :param cloud_watch_logs_log_group_arn: Specifies a log group name using DCNL an Amazon Resource Name (ARN), a unique identifier that represents DCNL the log group to which CloudTrail logs will be delivered. Not DCNL required unless you specify CloudWatchLogsRoleArn. DCNL :type cloud_watch_logs_role_arn: string DCNL :param cloud_watch_logs_role_arn: Specifies the role for the CloudWatch DCNL Logs endpoint to assume to write to a users log group.'
@classmethod DCNL def _normalize_request_dict(cls, data): DCNL 'This class method recurses through request data dictionary and removes DCNL any default values. DCNL :type data: dict DCNL :param data: Specifies request parameters with default values to be removed.'
def json_request(self, action, data, object_hook=None): DCNL 'This method wraps around make_request() to normalize and serialize the DCNL dictionary with request parameters. DCNL :type action: string DCNL :param action: Specifies an SWF action. DCNL :type data: dict DCNL :param data: Specifies request parameters associated with the action.'
def make_request(self, action, body='', object_hook=None): DCNL ':raises: ``SWFResponseError`` if response status is not 200.'
def poll_for_activity_task(self, domain, task_list, identity=None): DCNL 'Used by workers to get an ActivityTask from the specified DCNL activity taskList. This initiates a long poll, where the DCNL service holds the HTTP connection open and responds as soon as DCNL a task becomes available. The maximum time the service holds DCNL on to the request before responding is 60 seconds. If no task DCNL is available within 60 seconds, the poll will return an empty DCNL result. An empty result, in this context, means that an DCNL ActivityTask is returned, but that the value of taskToken is DCNL an empty string. If a task is returned, the worker should use DCNL its type to identify and process it correctly. DCNL :type domain: string DCNL :param domain: The name of the domain that contains the task DCNL lists being polled. DCNL :type task_list: string DCNL :param task_list: Specifies the task list to poll for activity tasks. DCNL :type identity: string DCNL :param identity: Identity of the worker making the request, which DCNL is recorded in the ActivityTaskStarted event in the workflow DCNL history. This enables diagnostic tracing when problems arise. DCNL The form of this identity is user defined. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def respond_activity_task_completed(self, task_token, result=None): DCNL 'Used by workers to tell the service that the ActivityTask DCNL identified by the taskToken completed successfully with a DCNL result (if provided). DCNL :type task_token: string DCNL :param task_token: The taskToken of the ActivityTask. DCNL :type result: string DCNL :param result: The result of the activity task. It is a free DCNL form string that is implementation specific. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def respond_activity_task_failed(self, task_token, details=None, reason=None): DCNL 'Used by workers to tell the service that the ActivityTask DCNL identified by the taskToken has failed with reason (if DCNL specified). DCNL :type task_token: string DCNL :param task_token: The taskToken of the ActivityTask. DCNL :type details: string DCNL :param details: Optional detailed information about the failure. DCNL :type reason: string DCNL :param reason: Description of the error that may assist in diagnostics. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def respond_activity_task_canceled(self, task_token, details=None): DCNL 'Used by workers to tell the service that the ActivityTask DCNL identified by the taskToken was successfully DCNL canceled. Additional details can be optionally provided using DCNL the details argument. DCNL :type task_token: string DCNL :param task_token: The taskToken of the ActivityTask. DCNL :type details: string DCNL :param details: Optional detailed information about the failure. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def record_activity_task_heartbeat(self, task_token, details=None): DCNL 'Used by activity workers to report to the service that the DCNL ActivityTask represented by the specified taskToken is still DCNL making progress. The worker can also (optionally) specify DCNL details of the progress, for example percent complete, using DCNL the details parameter. This action can also be used by the DCNL worker as a mechanism to check if cancellation is being DCNL requested for the activity task. If a cancellation is being DCNL attempted for the specified task, then the boolean DCNL cancelRequested flag returned by the service is set to true. DCNL :type task_token: string DCNL :param task_token: The taskToken of the ActivityTask. DCNL :type details: string DCNL :param details: If specified, contains details about the DCNL progress of the task. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def poll_for_decision_task(self, domain, task_list, identity=None, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Used by deciders to get a DecisionTask from the specified DCNL decision taskList. A decision task may be returned for any DCNL open workflow execution that is using the specified task DCNL list. The task includes a paginated view of the history of the DCNL workflow execution. The decider should use the workflow type DCNL and the history to determine how to properly handle the task. DCNL :type domain: string DCNL :param domain: The name of the domain containing the task DCNL lists to poll. DCNL :type task_list: string DCNL :param task_list: Specifies the task list to poll for decision tasks. DCNL :type identity: string DCNL :param identity: Identity of the decider making the request, DCNL which is recorded in the DecisionTaskStarted event in the DCNL workflow history. This enables diagnostic tracing when DCNL problems arise. The form of this identity is user defined. DCNL :type maximum_page_size: integer :param maximum_page_size: The DCNL maximum number of history events returned in each page. The DCNL default is 100, but the caller can override this value to a DCNL page size smaller than the default. You cannot specify a page DCNL size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextPageToken was returned, the results are being paginated. DCNL To get the next page of results, repeat the call with the DCNL returned token and all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the events in DCNL reverse order. By default the results are returned in DCNL ascending order of the eventTimestamp of the events. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def respond_decision_task_completed(self, task_token, decisions=None, execution_context=None): DCNL 'Used by deciders to tell the service that the DecisionTask DCNL identified by the taskToken has successfully completed. DCNL The decisions argument specifies the list of decisions DCNL made while processing the task. DCNL :type task_token: string DCNL :param task_token: The taskToken of the ActivityTask. DCNL :type decisions: list DCNL :param decisions: The list of decisions (possibly empty) made by DCNL the decider while processing this decision task. See the docs DCNL for the Decision structure for details. DCNL :type execution_context: string DCNL :param execution_context: User defined context to add to DCNL workflow execution. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def request_cancel_workflow_execution(self, domain, workflow_id, run_id=None): DCNL 'Records a WorkflowExecutionCancelRequested event in the DCNL currently running workflow execution identified by the given DCNL domain, workflowId, and runId. This logically requests the DCNL cancellation of the workflow execution as a whole. It is up to DCNL the decider to take appropriate actions when it receives an DCNL execution history with this event. DCNL :type domain: string DCNL :param domain: The name of the domain containing the workflow DCNL execution to cancel. DCNL :type run_id: string DCNL :param run_id: The runId of the workflow execution to cancel. DCNL :type workflow_id: string DCNL :param workflow_id: The workflowId of the workflow execution DCNL to cancel. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def start_workflow_execution(self, domain, workflow_id, workflow_name, workflow_version, task_list=None, child_policy=None, execution_start_to_close_timeout=None, input=None, tag_list=None, task_start_to_close_timeout=None): DCNL 'Starts an execution of the workflow type in the specified DCNL domain using the provided workflowId and input data. DCNL :type domain: string DCNL :param domain: The name of the domain in which the workflow DCNL execution is created. DCNL :type workflow_id: string DCNL :param workflow_id: The user defined identifier associated with DCNL the workflow execution. You can use this to associate a DCNL custom identifier with the workflow execution. You may DCNL specify the same identifier if a workflow execution is DCNL logically a restart of a previous execution. You cannot DCNL have two open workflow executions with the same workflowId DCNL at the same time. DCNL :type workflow_name: string DCNL :param workflow_name: The name of the workflow type. DCNL :type workflow_version: string DCNL :param workflow_version: The version of the workflow type. DCNL :type task_list: string DCNL :param task_list: The task list to use for the decision tasks DCNL generated for this workflow execution. This overrides the DCNL defaultTaskList specified when registering the workflow type. DCNL :type child_policy: string DCNL :param child_policy: If set, specifies the policy to use for the DCNL child workflow executions of this workflow execution if it DCNL is terminated, by calling the TerminateWorkflowExecution DCNL action explicitly or due to an expired timeout. This policy DCNL overrides the default child policy specified when registering DCNL the workflow type using RegisterWorkflowType. The supported DCNL child policies are: DCNL * TERMINATE: the child executions will be terminated. DCNL * REQUEST_CANCEL: a request to cancel will be attempted DCNL for each child execution by recording a DCNL WorkflowExecutionCancelRequested event in its history. DCNL It is up to the decider to take appropriate actions DCNL when it receives an execution history with this event. DCNL * ABANDON: no action will be taken. The child executions DCNL will continue to run. DCNL :type execution_start_to_close_timeout: string DCNL :param execution_start_to_close_timeout: The total duration for DCNL this workflow execution. This overrides the DCNL defaultExecutionStartToCloseTimeout specified when DCNL registering the workflow type. DCNL :type input: string DCNL :param input: The input for the workflow DCNL execution. This is a free form string which should be DCNL meaningful to the workflow you are starting. This input is DCNL made available to the new workflow execution in the DCNL WorkflowExecutionStarted history event. DCNL :type tag_list: list :param tag_list: The list of tags to DCNL associate with the workflow execution. You can specify a DCNL maximum of 5 tags. You can list workflow executions with a DCNL specific tag by calling list_open_workflow_executions or DCNL list_closed_workflow_executions and specifying a TagFilter. DCNL :type task_start_to_close_timeout: string :param DCNL task_start_to_close_timeout: Specifies the maximum duration of DCNL decision tasks for this workflow execution. This parameter DCNL overrides the defaultTaskStartToCloseTimout specified when DCNL registering the workflow type using register_workflow_type. DCNL :raises: UnknownResourceFault, TypeDeprecatedFault, DCNL SWFWorkflowExecutionAlreadyStartedError, SWFLimitExceededError, DCNL SWFOperationNotPermittedError, DefaultUndefinedFault'
def signal_workflow_execution(self, domain, signal_name, workflow_id, input=None, run_id=None): DCNL 'Records a WorkflowExecutionSignaled event in the workflow DCNL execution history and creates a decision task for the workflow DCNL execution identified by the given domain, workflowId and DCNL runId. The event is recorded with the specified user defined DCNL signalName and input (if provided). DCNL :type domain: string DCNL :param domain: The name of the domain containing the workflow DCNL execution to signal. DCNL :type signal_name: string DCNL :param signal_name: The name of the signal. This name must be DCNL meaningful to the target workflow. DCNL :type workflow_id: string DCNL :param workflow_id: The workflowId of the workflow execution DCNL to signal. DCNL :type input: string DCNL :param input: Data to attach to the WorkflowExecutionSignaled DCNL event in the target workflow execution\'s history. DCNL :type run_id: string DCNL :param run_id: The runId of the workflow execution to signal. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def terminate_workflow_execution(self, domain, workflow_id, child_policy=None, details=None, reason=None, run_id=None): DCNL 'Records a WorkflowExecutionTerminated event and forces closure DCNL of the workflow execution identified by the given domain, DCNL runId, and workflowId. The child policy, registered with the DCNL workflow type or specified when starting this execution, is DCNL applied to any open child workflow executions of this workflow DCNL execution. DCNL :type domain: string DCNL :param domain: The domain of the workflow execution to terminate. DCNL :type workflow_id: string DCNL :param workflow_id: The workflowId of the workflow execution DCNL to terminate. DCNL :type child_policy: string DCNL :param child_policy: If set, specifies the policy to use for DCNL the child workflow executions of the workflow execution being DCNL terminated. This policy overrides the child policy specified DCNL for the workflow execution at registration time or when DCNL starting the execution. The supported child policies are: DCNL * TERMINATE: the child executions will be terminated. DCNL * REQUEST_CANCEL: a request to cancel will be attempted DCNL for each child execution by recording a DCNL WorkflowExecutionCancelRequested event in its DCNL history. It is up to the decider to take appropriate DCNL actions when it receives an execution history with this DCNL event. DCNL * ABANDON: no action will be taken. The child executions DCNL will continue to run. DCNL :type details: string DCNL :param details: Optional details for terminating the DCNL workflow execution. DCNL :type reason: string DCNL :param reason: An optional descriptive reason for terminating DCNL the workflow execution. DCNL :type run_id: string DCNL :param run_id: The runId of the workflow execution to terminate. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def register_activity_type(self, domain, name, version, task_list=None, default_task_heartbeat_timeout=None, default_task_schedule_to_close_timeout=None, default_task_schedule_to_start_timeout=None, default_task_start_to_close_timeout=None, description=None): DCNL 'Registers a new activity type along with its configuration DCNL settings in the specified domain. DCNL :type domain: string DCNL :param domain: The name of the domain in which this activity is DCNL to be registered. DCNL :type name: string DCNL :param name: The name of the activity type within the domain. DCNL :type version: string DCNL :param version: The version of the activity type. DCNL :type task_list: string DCNL :param task_list: If set, specifies the default task list to DCNL use for scheduling tasks of this activity type. This default DCNL task list is used if a task list is not provided when a task DCNL is scheduled through the schedule_activity_task Decision. DCNL :type default_task_heartbeat_timeout: string DCNL :param default_task_heartbeat_timeout: If set, specifies the DCNL default maximum time before which a worker processing a task DCNL of this type must report progress by calling DCNL RecordActivityTaskHeartbeat. If the timeout is exceeded, the DCNL activity task is automatically timed out. This default can be DCNL overridden when scheduling an activity task using the DCNL ScheduleActivityTask Decision. If the activity worker DCNL subsequently attempts to record a heartbeat or returns a DCNL result, the activity worker receives an UnknownResource DCNL fault. In this case, Amazon SWF no longer considers the DCNL activity task to be valid; the activity worker should clean up DCNL the activity task.no docs DCNL :type default_task_schedule_to_close_timeout: string DCNL :param default_task_schedule_to_close_timeout: If set, DCNL specifies the default maximum duration for a task of this DCNL activity type. This default can be overridden when scheduling DCNL an activity task using the ScheduleActivityTask Decision.no DCNL docs DCNL :type default_task_schedule_to_start_timeout: string DCNL :param default_task_schedule_to_start_timeout: If set, DCNL specifies the default maximum duration that a task of this DCNL activity type can wait before being assigned to a worker. This DCNL default can be overridden when scheduling an activity task DCNL using the ScheduleActivityTask Decision. DCNL :type default_task_start_to_close_timeout: string DCNL :param default_task_start_to_close_timeout: If set, specifies DCNL the default maximum duration that a worker can take to process DCNL tasks of this activity type. This default can be overridden DCNL when scheduling an activity task using the DCNL ScheduleActivityTask Decision. DCNL :type description: string DCNL :param description: A textual description of the activity type. DCNL :raises: SWFTypeAlreadyExistsError, SWFLimitExceededError, DCNL UnknownResourceFault, SWFOperationNotPermittedError'
def deprecate_activity_type(self, domain, activity_name, activity_version): DCNL 'Deprecates the specified activity type. After an activity DCNL type has been deprecated, you cannot create new tasks of DCNL that activity type. Tasks of this type that were scheduled DCNL before the type was deprecated will continue to run. DCNL :type domain: string DCNL :param domain: The name of the domain in which the activity DCNL type is registered. DCNL :type activity_name: string DCNL :param activity_name: The name of this activity. DCNL :type activity_version: string DCNL :param activity_version: The version of this activity. DCNL :raises: UnknownResourceFault, TypeDeprecatedFault, DCNL SWFOperationNotPermittedError'
def register_workflow_type(self, domain, name, version, task_list=None, default_child_policy=None, default_execution_start_to_close_timeout=None, default_task_start_to_close_timeout=None, description=None): DCNL 'Registers a new workflow type and its configuration settings DCNL in the specified domain. DCNL :type domain: string DCNL :param domain: The name of the domain in which to register DCNL the workflow type. DCNL :type name: string DCNL :param name: The name of the workflow type. DCNL :type version: string DCNL :param version: The version of the workflow type. DCNL :type task_list: list of name, version of tasks DCNL :param task_list: If set, specifies the default task list to use DCNL for scheduling decision tasks for executions of this workflow DCNL type. This default is used only if a task list is not provided DCNL when starting the execution through the StartWorkflowExecution DCNL Action or StartChildWorkflowExecution Decision. DCNL :type default_child_policy: string DCNL :param default_child_policy: If set, specifies the default DCNL policy to use for the child workflow executions when a DCNL workflow execution of this type is terminated, by calling the DCNL TerminateWorkflowExecution action explicitly or due to an DCNL expired timeout. This default can be overridden when starting DCNL a workflow execution using the StartWorkflowExecution action DCNL or the StartChildWorkflowExecution Decision. The supported DCNL child policies are: DCNL * TERMINATE: the child executions will be terminated. DCNL * REQUEST_CANCEL: a request to cancel will be attempted DCNL for each child execution by recording a DCNL WorkflowExecutionCancelRequested event in its DCNL history. It is up to the decider to take appropriate DCNL actions when it receives an execution history with this DCNL event. DCNL * ABANDON: no action will be taken. The child executions DCNL will continue to run.no docs DCNL :type default_execution_start_to_close_timeout: string DCNL :param default_execution_start_to_close_timeout: If set, DCNL specifies the default maximum duration for executions of this DCNL workflow type. You can override this default when starting an DCNL execution through the StartWorkflowExecution Action or DCNL StartChildWorkflowExecution Decision. DCNL :type default_task_start_to_close_timeout: string DCNL :param default_task_start_to_close_timeout: If set, specifies DCNL the default maximum duration of decision tasks for this DCNL workflow type. This default can be overridden when starting a DCNL workflow execution using the StartWorkflowExecution action or DCNL the StartChildWorkflowExecution Decision. DCNL :type description: string DCNL :param description: Textual description of the workflow type. DCNL :raises: SWFTypeAlreadyExistsError, SWFLimitExceededError, DCNL UnknownResourceFault, SWFOperationNotPermittedError'
def deprecate_workflow_type(self, domain, workflow_name, workflow_version): DCNL 'Deprecates the specified workflow type. After a workflow type DCNL has been deprecated, you cannot create new executions of that DCNL type. Executions that were started before the type was DCNL deprecated will continue to run. A deprecated workflow type DCNL may still be used when calling visibility actions. DCNL :type domain: string DCNL :param domain: The name of the domain in which the workflow DCNL type is registered. DCNL :type workflow_name: string DCNL :param workflow_name: The name of the workflow type. DCNL :type workflow_version: string DCNL :param workflow_version: The version of the workflow type. DCNL :raises: UnknownResourceFault, TypeDeprecatedFault, DCNL SWFOperationNotPermittedError'
def register_domain(self, name, workflow_execution_retention_period_in_days, description=None): DCNL 'Registers a new domain. DCNL :type name: string DCNL :param name: Name of the domain to register. The name must be unique. DCNL :type workflow_execution_retention_period_in_days: string DCNL :param workflow_execution_retention_period_in_days: Specifies DCNL the duration *in days* for which the record (including the DCNL history) of workflow executions in this domain should be kept DCNL by the service. After the retention period, the workflow DCNL execution will not be available in the results of visibility DCNL calls. If a duration of NONE is specified, the records for DCNL workflow executions in this domain are not retained at all. DCNL :type description: string DCNL :param description: Textual description of the domain. DCNL :raises: SWFDomainAlreadyExistsError, SWFLimitExceededError, DCNL SWFOperationNotPermittedError'
def deprecate_domain(self, name): DCNL 'Deprecates the specified domain. After a domain has been DCNL deprecated it cannot be used to create new workflow executions DCNL or register new types. However, you can still use visibility DCNL actions on this domain. Deprecating a domain also deprecates DCNL all activity and workflow types registered in the DCNL domain. Executions that were started before the domain was DCNL deprecated will continue to run. DCNL :type name: string DCNL :param name: The name of the domain to deprecate. DCNL :raises: UnknownResourceFault, DomainDeprecatedFault, DCNL SWFOperationNotPermittedError'
def list_activity_types(self, domain, registration_status, name=None, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Returns information about all activities registered in the DCNL specified domain that match the specified name and DCNL registration status. The result includes information like DCNL creation date, current status of the activity, etc. The DCNL results may be split into multiple pages. To retrieve DCNL subsequent pages, make the call again using the nextPageToken DCNL returned by the initial call. DCNL :type domain: string DCNL :param domain: The name of the domain in which the activity DCNL types have been registered. DCNL :type registration_status: string DCNL :param registration_status: Specifies the registration status DCNL of the activity types to list.  Valid values are: DCNL * REGISTERED DCNL * DEPRECATED DCNL :type name: string DCNL :param name: If specified, only lists the activity types that DCNL have this name. DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: The maximum number of results DCNL returned in each page. The default is 100, but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextResultToken was returned, the results have more than one DCNL page. To get the next page of results, repeat the call with DCNL the nextPageToken and keep all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the results in DCNL reverse order. By default the results are returned in DCNL ascending alphabetical order of the name of the activity DCNL types. DCNL :raises: SWFOperationNotPermittedError, UnknownResourceFault'
def describe_activity_type(self, domain, activity_name, activity_version): DCNL 'Returns information about the specified activity type. This DCNL includes configuration settings provided at registration time DCNL as well as other general information about the type. DCNL :type domain: string DCNL :param domain: The name of the domain in which the activity DCNL type is registered. DCNL :type activity_name: string DCNL :param activity_name: The name of this activity. DCNL :type activity_version: string DCNL :param activity_version: The version of this activity. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def list_workflow_types(self, domain, registration_status, maximum_page_size=None, name=None, next_page_token=None, reverse_order=None): DCNL 'Returns information about workflow types in the specified DCNL domain. The results may be split into multiple pages that can DCNL be retrieved by making the call repeatedly. DCNL :type domain: string DCNL :param domain: The name of the domain in which the workflow DCNL types have been registered. DCNL :type registration_status: string DCNL :param registration_status: Specifies the registration status DCNL of the activity types to list.  Valid values are: DCNL * REGISTERED DCNL * DEPRECATED DCNL :type name: string DCNL :param name: If specified, lists the workflow type with this name. DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: The maximum number of results DCNL returned in each page. The default is 100, but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextPageToken was returned, the results are being DCNL paginated. To get the next page of results, repeat the call DCNL with the returned token and all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the results in DCNL reverse order. By default the results are returned in DCNL ascending alphabetical order of the name of the workflow DCNL types. DCNL :raises: SWFOperationNotPermittedError, UnknownResourceFault'
def describe_workflow_type(self, domain, workflow_name, workflow_version): DCNL 'Returns information about the specified workflow type. This DCNL includes configuration settings specified when the type was DCNL registered and other information such as creation date, DCNL current status, etc. DCNL :type domain: string DCNL :param domain: The name of the domain in which this workflow DCNL type is registered. DCNL :type workflow_name: string DCNL :param workflow_name: The name of the workflow type. DCNL :type workflow_version: string DCNL :param workflow_version: The version of the workflow type. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def describe_workflow_execution(self, domain, run_id, workflow_id): DCNL 'Returns information about the specified workflow execution DCNL including its type and some statistics. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow execution. DCNL :type run_id: string DCNL :param run_id: A system generated unique identifier for the DCNL workflow execution. DCNL :type workflow_id: string DCNL :param workflow_id: The user defined identifier associated DCNL with the workflow execution. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def get_workflow_execution_history(self, domain, run_id, workflow_id, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Returns the history of the specified workflow execution. The DCNL results may be split into multiple pages. To retrieve DCNL subsequent pages, make the call again using the nextPageToken DCNL returned by the initial call. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow execution. DCNL :type run_id: string DCNL :param run_id: A system generated unique identifier for the DCNL workflow execution. DCNL :type workflow_id: string DCNL :param workflow_id: The user defined identifier associated DCNL with the workflow execution. DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: Specifies the maximum number of DCNL history events returned in one page. The next page in the DCNL result is identified by the NextPageToken returned. By default DCNL 100 history events are returned in a page but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size larger than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If a NextPageToken is returned, the DCNL result has more than one pages. To get the next page, repeat DCNL the call and specify the nextPageToken with all other DCNL arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the events in DCNL reverse order. By default the results are returned in DCNL ascending order of the eventTimeStamp of the events. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def count_open_workflow_executions(self, domain, latest_date, oldest_date, tag=None, workflow_id=None, workflow_name=None, workflow_version=None): DCNL 'Returns the number of open workflow executions within the DCNL given domain that meet the specified filtering criteria. DCNL .. note: DCNL workflow_id, workflow_name/workflow_version and tag are mutually DCNL exclusive. You can specify at most one of these in a request. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow executions to count. DCNL :type latest_date: timestamp DCNL :param latest_date: Specifies the latest start or close date DCNL and time to return. DCNL :type oldest_date: timestamp DCNL :param oldest_date: Specifies the oldest start or close date DCNL and time to return. DCNL :type workflow_name: string DCNL :param workflow_name: Name of the workflow type to filter on. DCNL :type workflow_version: string DCNL :param workflow_version: Version of the workflow type to filter on. DCNL :type tag: string DCNL :param tag: If specified, only executions that have a tag DCNL that matches the filter are counted. DCNL :type workflow_id: string DCNL :param workflow_id: If specified, only workflow executions DCNL matching the workflow_id are counted. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def list_open_workflow_executions(self, domain, oldest_date, latest_date=None, tag=None, workflow_id=None, workflow_name=None, workflow_version=None, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Returns the list of open workflow executions within the DCNL given domain that meet the specified filtering criteria. DCNL .. note: DCNL workflow_id, workflow_name/workflow_version DCNL and tag are mutually exclusive. You can specify at most DCNL one of these in a request. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow executions to count. DCNL :type latest_date: timestamp DCNL :param latest_date: Specifies the latest start or close date DCNL and time to return. DCNL :type oldest_date: timestamp DCNL :param oldest_date: Specifies the oldest start or close date DCNL and time to return. DCNL :type tag: string DCNL :param tag: If specified, only executions that have a tag DCNL that matches the filter are counted. DCNL :type workflow_id: string DCNL :param workflow_id: If specified, only workflow executions DCNL matching the workflow_id are counted. DCNL :type workflow_name: string DCNL :param workflow_name: Name of the workflow type to filter on. DCNL :type workflow_version: string DCNL :param workflow_version: Version of the workflow type to filter on. DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: The maximum number of results DCNL returned in each page. The default is 100, but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextPageToken was returned, the results are being DCNL paginated. To get the next page of results, repeat the call DCNL with the returned token and all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the results in DCNL reverse order. By default the results are returned in DCNL descending order of the start or the close time of the DCNL executions. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def count_closed_workflow_executions(self, domain, start_latest_date=None, start_oldest_date=None, close_latest_date=None, close_oldest_date=None, close_status=None, tag=None, workflow_id=None, workflow_name=None, workflow_version=None): DCNL 'Returns the number of closed workflow executions within the DCNL given domain that meet the specified filtering criteria. DCNL .. note: DCNL close_status, workflow_id, workflow_name/workflow_version DCNL and tag are mutually exclusive. You can specify at most DCNL one of these in a request. DCNL .. note: DCNL start_latest_date/start_oldest_date and DCNL close_latest_date/close_oldest_date are mutually DCNL exclusive. You can specify at most one of these in a request. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow executions to count. DCNL :type start_latest_date: timestamp DCNL :param start_latest_date: If specified, only workflow executions DCNL that meet the start time criteria of the filter are counted. DCNL :type start_oldest_date: timestamp DCNL :param start_oldest_date: If specified, only workflow executions DCNL that meet the start time criteria of the filter are counted. DCNL :type close_latest_date: timestamp DCNL :param close_latest_date: If specified, only workflow executions DCNL that meet the close time criteria of the filter are counted. DCNL :type close_oldest_date: timestamp DCNL :param close_oldest_date: If specified, only workflow executions DCNL that meet the close time criteria of the filter are counted. DCNL :type close_status: string DCNL :param close_status: The close status that must match the close status DCNL of an execution for it to meet the criteria of this filter. DCNL Valid values are: DCNL * COMPLETED DCNL * FAILED DCNL * CANCELED DCNL * TERMINATED DCNL * CONTINUED_AS_NEW DCNL * TIMED_OUT DCNL :type tag: string DCNL :param tag: If specified, only executions that have a tag DCNL that matches the filter are counted. DCNL :type workflow_id: string DCNL :param workflow_id: If specified, only workflow executions DCNL matching the workflow_id are counted. DCNL :type workflow_name: string DCNL :param workflow_name: Name of the workflow type to filter on. DCNL :type workflow_version: string DCNL :param workflow_version: Version of the workflow type to filter on. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def list_closed_workflow_executions(self, domain, start_latest_date=None, start_oldest_date=None, close_latest_date=None, close_oldest_date=None, close_status=None, tag=None, workflow_id=None, workflow_name=None, workflow_version=None, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Returns the number of closed workflow executions within the DCNL given domain that meet the specified filtering criteria. DCNL .. note: DCNL close_status, workflow_id, workflow_name/workflow_version DCNL and tag are mutually exclusive. You can specify at most DCNL one of these in a request. DCNL .. note: DCNL start_latest_date/start_oldest_date and DCNL close_latest_date/close_oldest_date are mutually DCNL exclusive. You can specify at most one of these in a request. DCNL :type domain: string DCNL :param domain: The name of the domain containing the DCNL workflow executions to count. DCNL :type start_latest_date: timestamp DCNL :param start_latest_date: If specified, only workflow executions DCNL that meet the start time criteria of the filter are counted. DCNL :type start_oldest_date: timestamp DCNL :param start_oldest_date: If specified, only workflow executions DCNL that meet the start time criteria of the filter are counted. DCNL :type close_latest_date: timestamp DCNL :param close_latest_date: If specified, only workflow executions DCNL that meet the close time criteria of the filter are counted. DCNL :type close_oldest_date: timestamp DCNL :param close_oldest_date: If specified, only workflow executions DCNL that meet the close time criteria of the filter are counted. DCNL :type close_status: string DCNL :param close_status: The close status that must match the close status DCNL of an execution for it to meet the criteria of this filter. DCNL Valid values are: DCNL * COMPLETED DCNL * FAILED DCNL * CANCELED DCNL * TERMINATED DCNL * CONTINUED_AS_NEW DCNL * TIMED_OUT DCNL :type tag: string DCNL :param tag: If specified, only executions that have a tag DCNL that matches the filter are counted. DCNL :type workflow_id: string DCNL :param workflow_id: If specified, only workflow executions DCNL matching the workflow_id are counted. DCNL :type workflow_name: string DCNL :param workflow_name: Name of the workflow type to filter on. DCNL :type workflow_version: string DCNL :param workflow_version: Version of the workflow type to filter on. DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: The maximum number of results DCNL returned in each page. The default is 100, but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextPageToken was returned, the results are being DCNL paginated. To get the next page of results, repeat the call DCNL with the returned token and all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the results in DCNL reverse order. By default the results are returned in DCNL descending order of the start or the close time of the DCNL executions. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def list_domains(self, registration_status, maximum_page_size=None, next_page_token=None, reverse_order=None): DCNL 'Returns the list of domains registered in the account. The DCNL results may be split into multiple pages. To retrieve DCNL subsequent pages, make the call again using the nextPageToken DCNL returned by the initial call. DCNL :type registration_status: string DCNL :param registration_status: Specifies the registration status DCNL of the domains to list.  Valid Values: DCNL * REGISTERED DCNL * DEPRECATED DCNL :type maximum_page_size: integer DCNL :param maximum_page_size: The maximum number of results DCNL returned in each page. The default is 100, but the caller can DCNL override this value to a page size smaller than the DCNL default. You cannot specify a page size greater than 100. DCNL :type next_page_token: string DCNL :param next_page_token: If on a previous call to this method a DCNL NextPageToken was returned, the result has more than one DCNL page. To get the next page of results, repeat the call with DCNL the returned token and all other arguments unchanged. DCNL :type reverse_order: boolean DCNL :param reverse_order: When set to true, returns the results in DCNL reverse order. By default the results are returned in DCNL ascending alphabetical order of the name of the domains. DCNL :raises: SWFOperationNotPermittedError'
def describe_domain(self, name): DCNL 'Returns information about the specified domain including DCNL description and status. DCNL :type name: string DCNL :param name: The name of the domain to describe. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def count_pending_decision_tasks(self, domain, task_list): DCNL 'Returns the estimated number of decision tasks in the DCNL specified task list. The count returned is an approximation DCNL and is not guaranteed to be exact. If you specify a task list DCNL that no decision task was ever scheduled in then 0 will be DCNL returned. DCNL :type domain: string DCNL :param domain: The name of the domain that contains the task list. DCNL :type task_list: string DCNL :param task_list: The name of the task list. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def count_pending_activity_tasks(self, domain, task_list): DCNL 'Returns the estimated number of activity tasks in the DCNL specified task list. The count returned is an approximation DCNL and is not guaranteed to be exact. If you specify a task list DCNL that no activity task was ever scheduled in then 0 will be DCNL returned. DCNL :type domain: string DCNL :param domain: The name of the domain that contains the task list. DCNL :type task_list: string DCNL :param task_list: The name of the task list. DCNL :raises: UnknownResourceFault, SWFOperationNotPermittedError'
def schedule_activity_task(self, activity_id, activity_type_name, activity_type_version, task_list=None, control=None, heartbeat_timeout=None, schedule_to_close_timeout=None, schedule_to_start_timeout=None, start_to_close_timeout=None, input=None): DCNL 'Schedules an activity task. DCNL :type activity_id: string DCNL :param activity_id: The activityId of the type of the activity DCNL being scheduled. DCNL :type activity_type_name: string DCNL :param activity_type_name: The name of the type of the activity DCNL being scheduled. DCNL :type activity_type_version: string DCNL :param activity_type_version: The version of the type of the DCNL activity being scheduled. DCNL :type task_list: string DCNL :param task_list: If set, specifies the name of the task list in DCNL which to schedule the activity task. If not specified, the DCNL defaultTaskList registered with the activity type will be used. DCNL Note: a task list for this activity task must be specified either DCNL as a default for the activity type or through this field. If DCNL neither this field is set nor a default task list was specified DCNL at registration time then a fault will be returned.'
def request_cancel_activity_task(self, activity_id): DCNL 'Attempts to cancel a previously scheduled activity task. If DCNL the activity task was scheduled but has not been assigned to a DCNL worker, then it will be canceled. If the activity task was DCNL already assigned to a worker, then the worker will be informed DCNL that cancellation has been requested in the response to DCNL RecordActivityTaskHeartbeat.'
def record_marker(self, marker_name, details=None): DCNL 'Records a MarkerRecorded event in the history. Markers can be DCNL used for adding custom information in the history for instance DCNL to let deciders know that they do not need to look at the DCNL history beyond the marker event.'
def complete_workflow_execution(self, result=None): DCNL 'Closes the workflow execution and records a WorkflowExecutionCompleted DCNL event in the history'
def fail_workflow_execution(self, reason=None, details=None): DCNL 'Closes the workflow execution and records a DCNL WorkflowExecutionFailed event in the history.'
def cancel_workflow_executions(self, details=None): DCNL 'Closes the workflow execution and records a WorkflowExecutionCanceled DCNL event in the history.'
def continue_as_new_workflow_execution(self, child_policy=None, execution_start_to_close_timeout=None, input=None, tag_list=None, task_list=None, start_to_close_timeout=None, workflow_type_version=None): DCNL 'Closes the workflow execution and starts a new workflow execution of DCNL the same type using the same workflow id and a unique run Id. A DCNL WorkflowExecutionContinuedAsNew event is recorded in the history.'
def start_timer(self, start_to_fire_timeout, timer_id, control=None): DCNL 'Starts a timer for this workflow execution and records a TimerStarted DCNL event in the history.  This timer will fire after the specified delay DCNL and record a TimerFired event.'
def cancel_timer(self, timer_id): DCNL 'Cancels a previously started timer and records a TimerCanceled DCNL event in the history.'
def signal_external_workflow_execution(self, workflow_id, signal_name, run_id=None, control=None, input=None): DCNL 'Requests a signal to be delivered to the specified external workflow DCNL execution and records a SignalExternalWorkflowExecutionInitiated DCNL event in the history.'
def request_cancel_external_workflow_execution(self, workflow_id, control=None, run_id=None): DCNL 'Requests that a request be made to cancel the specified DCNL external workflow execution and records a DCNL RequestCancelExternalWorkflowExecutionInitiated event in the DCNL history.'
def start_child_workflow_execution(self, workflow_type_name, workflow_type_version, workflow_id, child_policy=None, control=None, execution_start_to_close_timeout=None, input=None, tag_list=None, task_list=None, task_start_to_close_timeout=None): DCNL 'Requests that a child workflow execution be started and DCNL records a StartChildWorkflowExecutionInitiated event in the DCNL history.  The child workflow execution is a separate workflow DCNL execution with its own history.'
@wraps(Layer1.describe_domain) DCNL def describe(self): DCNL 'DescribeDomain.'
@wraps(Layer1.deprecate_domain) DCNL def deprecate(self): DCNL 'DeprecateDomain'
@wraps(Layer1.register_domain) DCNL def register(self): DCNL 'RegisterDomain.'
@wraps(Layer1.list_activity_types) DCNL def activities(self, status='REGISTERED', **kwargs): DCNL 'ListActivityTypes.'
@wraps(Layer1.list_workflow_types) DCNL def workflows(self, status='REGISTERED', **kwargs): DCNL 'ListWorkflowTypes.'
def executions(self, closed=False, **kwargs): DCNL 'List list open/closed executions. DCNL For a full list of available parameters refer to DCNL :py:func:`boto.swf.layer1.Layer1.list_closed_workflow_executions` and DCNL :py:func:`boto.swf.layer1.Layer1.list_open_workflow_executions`'
@wraps(Layer1.count_pending_activity_tasks) DCNL def count_pending_activity_tasks(self, task_list): DCNL 'CountPendingActivityTasks.'
@wraps(Layer1.count_pending_decision_tasks) DCNL def count_pending_decision_tasks(self, task_list): DCNL 'CountPendingDecisionTasks.'
def run(self): DCNL 'To be overloaded by subclasses.'
@wraps(Layer1.respond_activity_task_canceled) DCNL def cancel(self, task_token=None, details=None): DCNL 'RespondActivityTaskCanceled.'
@wraps(Layer1.respond_activity_task_completed) DCNL def complete(self, task_token=None, result=None): DCNL 'RespondActivityTaskCompleted.'
@wraps(Layer1.respond_activity_task_failed) DCNL def fail(self, task_token=None, details=None, reason=None): DCNL 'RespondActivityTaskFailed.'
@wraps(Layer1.record_activity_task_heartbeat) DCNL def heartbeat(self, task_token=None, details=None): DCNL 'RecordActivityTaskHeartbeat.'
@wraps(Layer1.poll_for_activity_task) DCNL def poll(self, **kwargs): DCNL 'PollForActivityTask.'
@wraps(Layer1.respond_decision_task_completed) DCNL def complete(self, task_token=None, decisions=None, **kwargs): DCNL 'RespondDecisionTaskCompleted.'
@wraps(Layer1.poll_for_decision_task) DCNL def poll(self, **kwargs): DCNL 'PollForDecisionTask.'
@wraps(Layer1.describe_workflow_type) DCNL def describe(self): DCNL 'DescribeWorkflowType.'
@wraps(Layer1.register_workflow_type) DCNL def register(self, **kwargs): DCNL 'RegisterWorkflowType.'
@wraps(Layer1.deprecate_workflow_type) DCNL def deprecate(self): DCNL 'DeprecateWorkflowType.'
@wraps(Layer1.start_workflow_execution) DCNL def start(self, **kwargs): DCNL 'StartWorkflowExecution.'
@wraps(Layer1.signal_workflow_execution) DCNL def signal(self, signame, **kwargs): DCNL 'SignalWorkflowExecution.'
@wraps(Layer1.terminate_workflow_execution) DCNL def terminate(self, **kwargs): DCNL 'TerminateWorkflowExecution (p. 103).'
@wraps(Layer1.get_workflow_execution_history) DCNL def history(self, **kwargs): DCNL 'GetWorkflowExecutionHistory.'
@wraps(Layer1.describe_workflow_execution) DCNL def describe(self): DCNL 'DescribeWorkflowExecution.'
@wraps(Layer1.request_cancel_workflow_execution) DCNL def request_cancel(self): DCNL 'RequestCancelWorkflowExecution.'
@wraps(Layer1.deprecate_activity_type) DCNL def deprecate(self): DCNL 'DeprecateActivityType.'
@wraps(Layer1.describe_activity_type) DCNL def describe(self): DCNL 'DescribeActivityType.'
@wraps(Layer1.register_activity_type) DCNL def register(self, **kwargs): DCNL 'RegisterActivityType.'
@classmethod DCNL def Inventory(cls): DCNL 'Returns a list of Server instances, one for each Server object DCNL persisted in the db'
def set_config(self, config): DCNL 'Set SDB based config'
def attach_volume(self, volume, device='/dev/sdp'): DCNL 'Attach an EBS volume to this server DCNL :param volume: EBS Volume to attach DCNL :type volume: boto.ec2.volume.Volume DCNL :param device: Device to attach to (default to /dev/sdp) DCNL :type device: string'
def detach_volume(self, volume): DCNL 'Detach an EBS volume from this server DCNL :param volume: EBS Volume to detach DCNL :type volume: boto.ec2.volume.Volume'
def add_source_identifier_to_subscription(self, subscription_name, source_identifier): DCNL 'Adds a source identifier to an existing RDS event notification DCNL subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the RDS event notification DCNL subscription you want to add a source identifier to. DCNL :type source_identifier: string DCNL :param source_identifier: DCNL The identifier of the event source to be added. An identifier must DCNL begin with a letter and must contain only ASCII letters, digits, DCNL and hyphens; it cannot end with a hyphen or contain two consecutive DCNL hyphens. DCNL Constraints: DCNL + If the source type is a DB instance, then a `DBInstanceIdentifier` DCNL must be supplied. DCNL + If the source type is a DB security group, a `DBSecurityGroupName` DCNL must be supplied. DCNL + If the source type is a DB parameter group, a `DBParameterGroupName` DCNL must be supplied. DCNL + If the source type is a DB snapshot, a `DBSnapshotIdentifier` must be DCNL supplied.'
def add_tags_to_resource(self, resource_name, tags): DCNL 'Adds metadata tags to an Amazon RDS resource. These tags can DCNL also be used with cost allocation reporting to track cost DCNL associated with Amazon RDS resources, or used in Condition DCNL statement in IAM policy for Amazon RDS. DCNL For an overview on tagging Amazon RDS resources, see `Tagging DCNL Amazon RDS Resources`_. DCNL :type resource_name: string DCNL :param resource_name: The Amazon RDS resource the tags will be added DCNL to. This value is an Amazon Resource Name (ARN). For information DCNL about creating an ARN, see ` Constructing an RDS Amazon Resource DCNL Name (ARN)`_. DCNL :type tags: list DCNL :param tags: The tags to be assigned to the Amazon RDS resource. DCNL Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def authorize_db_security_group_ingress(self, db_security_group_name, cidrip=None, ec2_security_group_name=None, ec2_security_group_id=None, ec2_security_group_owner_id=None): DCNL 'Enables ingress to a DBSecurityGroup using one of two forms of DCNL authorization. First, EC2 or VPC security groups can be added DCNL to the DBSecurityGroup if the application using the database DCNL is running on EC2 or VPC instances. Second, IP ranges are DCNL available if the application accessing your database is DCNL running on the Internet. Required parameters for this API are DCNL one of CIDR range, EC2SecurityGroupId for VPC, or DCNL (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or DCNL EC2SecurityGroupId for non-VPC). DCNL You cannot authorize ingress from an EC2 security group in one DCNL Region to an Amazon RDS DB instance in another. You cannot DCNL authorize ingress from a VPC security group in one VPC to an DCNL Amazon RDS DB instance in another. DCNL For an overview of CIDR ranges, go to the `Wikipedia DCNL Tutorial`_. DCNL :type db_security_group_name: string DCNL :param db_security_group_name: The name of the DB security group to add DCNL authorization to. DCNL :type cidrip: string DCNL :param cidrip: The IP range to authorize. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: Name of the EC2 security group to DCNL authorize. For VPC DB security groups, `EC2SecurityGroupId` must be DCNL provided. Otherwise, EC2SecurityGroupOwnerId and either DCNL `EC2SecurityGroupName` or `EC2SecurityGroupId` must be provided. DCNL :type ec2_security_group_id: string DCNL :param ec2_security_group_id: Id of the EC2 security group to DCNL authorize. For VPC DB security groups, `EC2SecurityGroupId` must be DCNL provided. Otherwise, EC2SecurityGroupOwnerId and either DCNL `EC2SecurityGroupName` or `EC2SecurityGroupId` must be provided. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: AWS Account Number of the owner of DCNL the EC2 security group specified in the EC2SecurityGroupName DCNL parameter. The AWS Access Key ID is not an acceptable value. For DCNL VPC DB security groups, `EC2SecurityGroupId` must be provided. DCNL Otherwise, EC2SecurityGroupOwnerId and either DCNL `EC2SecurityGroupName` or `EC2SecurityGroupId` must be provided.'
def copy_db_snapshot(self, source_db_snapshot_identifier, target_db_snapshot_identifier, tags=None): DCNL 'Copies the specified DBSnapshot. The source DBSnapshot must be DCNL in the "available" state. DCNL :type source_db_snapshot_identifier: string DCNL :param source_db_snapshot_identifier: The identifier for the source DB DCNL snapshot. DCNL Constraints: DCNL + Must be the identifier for a valid system snapshot in the "available" DCNL state. DCNL Example: `rds:mydb-2012-04-02-00-01` DCNL :type target_db_snapshot_identifier: string DCNL :param target_db_snapshot_identifier: The identifier for the copied DCNL snapshot. DCNL Constraints: DCNL + Cannot be null, empty, or blank DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: `my-db-snapshot` DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_instance(self, db_instance_identifier, allocated_storage, db_instance_class, engine, master_username, master_user_password, db_name=None, db_security_groups=None, vpc_security_group_ids=None, availability_zone=None, db_subnet_group_name=None, preferred_maintenance_window=None, db_parameter_group_name=None, backup_retention_period=None, preferred_backup_window=None, port=None, multi_az=None, engine_version=None, auto_minor_version_upgrade=None, license_model=None, iops=None, option_group_name=None, character_set_name=None, publicly_accessible=None, tags=None): DCNL 'Creates a new DB instance. DCNL :type db_name: string DCNL :param db_name: The meaning of this parameter differs according to the DCNL database engine you use. DCNL **MySQL** DCNL The name of the database to create when the DB instance is created. If DCNL this parameter is not specified, no database is created in the DB DCNL instance. DCNL Constraints: DCNL + Must contain 1 to 64 alphanumeric characters DCNL + Cannot be a word reserved by the specified database engine DCNL Type: String DCNL **Oracle** DCNL The Oracle System ID (SID) of the created DB instance. DCNL Default: `ORCL` DCNL Constraints: DCNL + Cannot be longer than 8 characters DCNL **SQL Server** DCNL Not applicable. Must be null. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: The DB instance identifier. This DCNL parameter is stored as a lowercase string. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens (1 to 15 DCNL for SQL Server). DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL Example: `mydbinstance` DCNL :type allocated_storage: integer DCNL :param allocated_storage: The amount of storage (in gigabytes) to be DCNL initially allocated for the database instance. DCNL **MySQL** DCNL Constraints: Must be an integer from 5 to 1024. DCNL Type: Integer DCNL **Oracle** DCNL Constraints: Must be an integer from 10 to 1024. DCNL **SQL Server** DCNL Constraints: Must be an integer from 200 to 1024 (Standard Edition and DCNL Enterprise Edition) or from 30 to 1024 (Express Edition and Web DCNL Edition) DCNL :type db_instance_class: string DCNL :param db_instance_class: The compute and memory capacity of the DB DCNL instance. DCNL Valid Values: `db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | DCNL db.m1.xlarge | db.m2.xlarge |db.m2.2xlarge | db.m2.4xlarge` DCNL :type engine: string DCNL :param engine: The name of the database engine to be used for this DCNL instance. DCNL Valid Values: `MySQL` | `oracle-se1` | `oracle-se` | `oracle-ee` | DCNL `sqlserver-ee` | `sqlserver-se` | `sqlserver-ex` | `sqlserver-web` DCNL :type master_username: string DCNL :param master_username: DCNL The name of master user for the client DB instance. DCNL **MySQL** DCNL Constraints: DCNL + Must be 1 to 16 alphanumeric characters. DCNL + First character must be a letter. DCNL + Cannot be a reserved word for the chosen database engine. DCNL Type: String DCNL **Oracle** DCNL Constraints: DCNL + Must be 1 to 30 alphanumeric characters. DCNL + First character must be a letter. DCNL + Cannot be a reserved word for the chosen database engine. DCNL **SQL Server** DCNL Constraints: DCNL + Must be 1 to 128 alphanumeric characters. DCNL + First character must be a letter. DCNL + Cannot be a reserved word for the chosen database engine. DCNL :type master_user_password: string DCNL :param master_user_password: The password for the master database user. DCNL Can be any printable ASCII character except "/", \'"\', or "@". DCNL Type: String DCNL **MySQL** DCNL Constraints: Must contain from 8 to 41 characters. DCNL **Oracle** DCNL Constraints: Must contain from 8 to 30 characters. DCNL **SQL Server** DCNL Constraints: Must contain from 8 to 128 characters. DCNL :type db_security_groups: list DCNL :param db_security_groups: A list of DB security groups to associate DCNL with this DB instance. DCNL Default: The default DB security group for the database engine. DCNL :type vpc_security_group_ids: list DCNL :param vpc_security_group_ids: A list of EC2 VPC security groups to DCNL associate with this DB instance. DCNL Default: The default EC2 VPC security group for the DB subnet group\'s DCNL VPC. DCNL :type availability_zone: string DCNL :param availability_zone: The EC2 Availability Zone that the database DCNL instance will be created in. DCNL Default: A random, system-chosen Availability Zone in the endpoint\'s DCNL region. DCNL Example: `us-east-1d` DCNL Constraint: The AvailabilityZone parameter cannot be specified if the DCNL MultiAZ parameter is set to `True`. The specified Availability Zone DCNL must be in the same region as the current endpoint. DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: A DB subnet group to associate with this DCNL DB instance. DCNL If there is no DB subnet group, then it is a non-VPC DB instance. DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which system maintenance can occur. DCNL Format: `ddd:hh24:mi-ddd:hh24:mi` DCNL Default: A 30-minute window selected at random from an 8-hour block of DCNL time per region, occurring on a random day of the week. To see the DCNL time blocks available, see ` Adjusting the Preferred Maintenance DCNL Window`_ in the Amazon RDS User Guide. DCNL Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun DCNL Constraints: Minimum 30-minute window. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of the DB parameter group to associate with this DB instance. DCNL If this argument is omitted, the default DBParameterGroup for the DCNL specified engine will be used. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type backup_retention_period: integer DCNL :param backup_retention_period: DCNL The number of days for which automated backups are retained. Setting DCNL this parameter to a positive number enables backups. Setting this DCNL parameter to 0 disables automated backups. DCNL Default: 1 DCNL Constraints: DCNL + Must be a value from 0 to 8 DCNL + Cannot be set to 0 if the DB instance is a master instance with read DCNL replicas DCNL :type preferred_backup_window: string DCNL :param preferred_backup_window: The daily time range during which DCNL automated backups are created if automated backups are enabled, DCNL using the `BackupRetentionPeriod` parameter. DCNL Default: A 30-minute window selected at random from an 8-hour block of DCNL time per region. See the Amazon RDS User Guide for the time blocks DCNL for each region from which the default backup windows are assigned. DCNL Constraints: Must be in the format `hh24:mi-hh24:mi`. Times should be DCNL Universal Time Coordinated (UTC). Must not conflict with the DCNL preferred maintenance window. Must be at least 30 minutes. DCNL :type port: integer DCNL :param port: The port number on which the database accepts connections. DCNL **MySQL** DCNL Default: `3306` DCNL Valid Values: `1150-65535` DCNL Type: Integer DCNL **Oracle** DCNL Default: `1521` DCNL Valid Values: `1150-65535` DCNL **SQL Server** DCNL Default: `1433` DCNL Valid Values: `1150-65535` except for `1434` and `3389`. DCNL :type multi_az: boolean DCNL :param multi_az: Specifies if the DB instance is a Multi-AZ deployment. DCNL You cannot set the AvailabilityZone parameter if the MultiAZ DCNL parameter is set to true. DCNL :type engine_version: string DCNL :param engine_version: The version number of the database engine to DCNL use. DCNL **MySQL** DCNL Example: `5.1.42` DCNL Type: String DCNL **Oracle** DCNL Example: `11.2.0.2.v2` DCNL Type: String DCNL **SQL Server** DCNL Example: `10.50.2789.0.v1` DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Indicates that minor engine upgrades DCNL will be applied automatically to the DB instance during the DCNL maintenance window. DCNL Default: `True` DCNL :type license_model: string DCNL :param license_model: License model information for this DB instance. DCNL Valid values: `license-included` | `bring-your-own-license` | `general- DCNL public-license` DCNL :type iops: integer DCNL :param iops: The amount of Provisioned IOPS (input/output operations DCNL per second) to be initially allocated for the DB instance. DCNL Constraints: Must be an integer greater than 1000. DCNL :type option_group_name: string DCNL :param option_group_name: Indicates that the DB instance should be DCNL associated with the specified option group. DCNL Permanent options, such as the TDE option for Oracle Advanced Security DCNL TDE, cannot be removed from an option group, and that option group DCNL cannot be removed from a DB instance once it is associated with a DCNL DB instance DCNL :type character_set_name: string DCNL :param character_set_name: For supported engines, indicates that the DB DCNL instance should be associated with the specified CharacterSet. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: Specifies the accessibility options for the DCNL DB instance. A value of true specifies an Internet-facing instance DCNL with a publicly resolvable DNS name, which resolves to a public IP DCNL address. A value of false specifies an internal instance with a DNS DCNL name that resolves to a private IP address. DCNL Default: The default behavior varies depending on whether a VPC has DCNL been requested or not. The following list shows the default DCNL behavior in each case. DCNL + **Default VPC:**true DCNL + **VPC:**false DCNL If no DB subnet group has been specified as part of the request and the DCNL PubliclyAccessible value has not been set, the DB instance will be DCNL publicly accessible. If a specific DB subnet group has been DCNL specified as part of the request and the PubliclyAccessible value DCNL has not been set, the DB instance will be private. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_instance_read_replica(self, db_instance_identifier, source_db_instance_identifier, db_instance_class=None, availability_zone=None, port=None, auto_minor_version_upgrade=None, iops=None, option_group_name=None, publicly_accessible=None, tags=None): DCNL 'Creates a DB instance that acts as a read replica of a source DCNL DB instance. DCNL All read replica DB instances are created as Single-AZ DCNL deployments with backups disabled. All other DB instance DCNL attributes (including DB security groups and DB parameter DCNL groups) are inherited from the source DB instance, except as DCNL specified below. DCNL The source DB instance must have backup retention enabled. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: The DB instance identifier of the read DCNL replica. This is the unique key that identifies a DB instance. This DCNL parameter is stored as a lowercase string. DCNL :type source_db_instance_identifier: string DCNL :param source_db_instance_identifier: The identifier of the DB instance DCNL that will act as the source for the read replica. Each DB instance DCNL can have up to five read replicas. DCNL Constraints: Must be the identifier of an existing DB instance that is DCNL not already a read replica DB instance. DCNL :type db_instance_class: string DCNL :param db_instance_class: The compute and memory capacity of the read DCNL replica. DCNL Valid Values: `db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge DCNL | db.m2.xlarge |db.m2.2xlarge | db.m2.4xlarge` DCNL Default: Inherits from the source DB instance. DCNL :type availability_zone: string DCNL :param availability_zone: The Amazon EC2 Availability Zone that the DCNL read replica will be created in. DCNL Default: A random, system-chosen Availability Zone in the endpoint\'s DCNL region. DCNL Example: `us-east-1d` DCNL :type port: integer DCNL :param port: The port number that the DB instance uses for connections. DCNL Default: Inherits from the source DB instance DCNL Valid Values: `1150-65535` DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Indicates that minor engine upgrades DCNL will be applied automatically to the read replica during the DCNL maintenance window. DCNL Default: Inherits from the source DB instance DCNL :type iops: integer DCNL :param iops: The amount of Provisioned IOPS (input/output operations DCNL per second) to be initially allocated for the DB instance. DCNL :type option_group_name: string DCNL :param option_group_name: The option group the DB instance will be DCNL associated with. If omitted, the default option group for the DCNL engine specified will be used. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: Specifies the accessibility options for the DCNL DB instance. A value of true specifies an Internet-facing instance DCNL with a publicly resolvable DNS name, which resolves to a public IP DCNL address. A value of false specifies an internal instance with a DNS DCNL name that resolves to a private IP address. DCNL Default: The default behavior varies depending on whether a VPC has DCNL been requested or not. The following list shows the default DCNL behavior in each case. DCNL + **Default VPC:**true DCNL + **VPC:**false DCNL If no DB subnet group has been specified as part of the request and the DCNL PubliclyAccessible value has not been set, the DB instance will be DCNL publicly accessible. If a specific DB subnet group has been DCNL specified as part of the request and the PubliclyAccessible value DCNL has not been set, the DB instance will be private. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_parameter_group(self, db_parameter_group_name, db_parameter_group_family, description, tags=None): DCNL 'Creates a new DB parameter group. DCNL A DB parameter group is initially created with the default DCNL parameters for the database engine used by the DB instance. To DCNL provide custom values for any of the parameters, you must DCNL modify the group after creating it using DCNL ModifyDBParameterGroup . Once you\'ve created a DB parameter DCNL group, you need to associate it with your DB instance using DCNL ModifyDBInstance . When you associate a new DB parameter group DCNL with a running DB instance, you need to reboot the DB Instance DCNL for the new DB parameter group and associated settings to take DCNL effect. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of the DB parameter group. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL This value is stored as a lower-case string. DCNL :type db_parameter_group_family: string DCNL :param db_parameter_group_family: The DB parameter group family name. A DCNL DB parameter group can be associated with one and only one DB DCNL parameter group family, and can be applied only to a DB instance DCNL running a database engine and engine version compatible with that DCNL DB parameter group family. DCNL :type description: string DCNL :param description: The description for the DB parameter group. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_security_group(self, db_security_group_name, db_security_group_description, tags=None): DCNL 'Creates a new DB security group. DB security groups control DCNL access to a DB instance. DCNL :type db_security_group_name: string DCNL :param db_security_group_name: The name for the DB security group. This DCNL value is stored as a lowercase string. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL + Must not be "Default" DCNL + May not contain spaces DCNL Example: `mysecuritygroup` DCNL :type db_security_group_description: string DCNL :param db_security_group_description: The description for the DB DCNL security group. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_snapshot(self, db_snapshot_identifier, db_instance_identifier, tags=None): DCNL 'Creates a DBSnapshot. The source DBInstance must be in DCNL "available" state. DCNL :type db_snapshot_identifier: string DCNL :param db_snapshot_identifier: The identifier for the DB snapshot. DCNL Constraints: DCNL + Cannot be null, empty, or blank DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: `my-snapshot-id` DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The DB instance identifier. This is the unique key that identifies a DB DCNL instance. This parameter isn\'t case sensitive. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_db_subnet_group(self, db_subnet_group_name, db_subnet_group_description, subnet_ids, tags=None): DCNL 'Creates a new DB subnet group. DB subnet groups must contain DCNL at least one subnet in at least two AZs in the region. DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: The name for the DB subnet group. This DCNL value is stored as a lowercase string. DCNL Constraints: Must contain no more than 255 alphanumeric characters or DCNL hyphens. Must not be "Default". DCNL Example: `mySubnetgroup` DCNL :type db_subnet_group_description: string DCNL :param db_subnet_group_description: The description for the DB subnet DCNL group. DCNL :type subnet_ids: list DCNL :param subnet_ids: The EC2 Subnet IDs for the DB subnet group. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_event_subscription(self, subscription_name, sns_topic_arn, source_type=None, event_categories=None, source_ids=None, enabled=None, tags=None): DCNL 'Creates an RDS event notification subscription. This action DCNL requires a topic ARN (Amazon Resource Name) created by either DCNL the RDS console, the SNS console, or the SNS API. To obtain an DCNL ARN with SNS, you must create a topic in Amazon SNS and DCNL subscribe to the topic. The ARN is displayed in the SNS DCNL console. DCNL You can specify the type of source (SourceType) you want to be DCNL notified of, provide a list of RDS sources (SourceIds) that DCNL triggers the events, and provide a list of event categories DCNL (EventCategories) for events you want to be notified of. For DCNL example, you can specify SourceType = db-instance, SourceIds = DCNL mydbinstance1, mydbinstance2 and EventCategories = DCNL Availability, Backup. DCNL If you specify both the SourceType and SourceIds, such as DCNL SourceType = db-instance and SourceIdentifier = myDBInstance1, DCNL you will be notified of all the db-instance events for the DCNL specified source. If you specify a SourceType but do not DCNL specify a SourceIdentifier, you will receive notice of the DCNL events for that source type for all your RDS sources. If you DCNL do not specify either the SourceType nor the SourceIdentifier, DCNL you will be notified of events generated from all RDS sources DCNL belonging to your customer account. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the subscription. DCNL Constraints: The name must be less than 255 characters. DCNL :type sns_topic_arn: string DCNL :param sns_topic_arn: The Amazon Resource Name (ARN) of the SNS topic DCNL created for event notification. The ARN is created by Amazon SNS DCNL when you create a topic and subscribe to it. DCNL :type source_type: string DCNL :param source_type: The type of source that will be generating the DCNL events. For example, if you want to be notified of events generated DCNL by a DB instance, you would set this parameter to db-instance. if DCNL this value is not specified, all events are returned. DCNL Valid values: db-instance | db-parameter-group | db-security-group | DCNL db-snapshot DCNL :type event_categories: list DCNL :param event_categories: A list of event categories for a SourceType DCNL that you want to subscribe to. You can see a list of the categories DCNL for a given SourceType in the `Events`_ topic in the Amazon RDS DCNL User Guide or by using the **DescribeEventCategories** action. DCNL :type source_ids: list DCNL :param source_ids: DCNL The list of identifiers of the event sources for which events will be DCNL returned. If not specified, then all sources are included in the DCNL response. An identifier must begin with a letter and must contain DCNL only ASCII letters, digits, and hyphens; it cannot end with a DCNL hyphen or contain two consecutive hyphens. DCNL Constraints: DCNL + If SourceIds are supplied, SourceType must also be provided. DCNL + If the source type is a DB instance, then a `DBInstanceIdentifier` DCNL must be supplied. DCNL + If the source type is a DB security group, a `DBSecurityGroupName` DCNL must be supplied. DCNL + If the source type is a DB parameter group, a `DBParameterGroupName` DCNL must be supplied. DCNL + If the source type is a DB snapshot, a `DBSnapshotIdentifier` must be DCNL supplied. DCNL :type enabled: boolean DCNL :param enabled: A Boolean value; set to **true** to activate the DCNL subscription, set to **false** to create the subscription but not DCNL active it. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def create_option_group(self, option_group_name, engine_name, major_engine_version, option_group_description, tags=None): DCNL 'Creates a new option group. You can create up to 20 option DCNL groups. DCNL :type option_group_name: string DCNL :param option_group_name: Specifies the name of the option group to be DCNL created. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: `myoptiongroup` DCNL :type engine_name: string DCNL :param engine_name: Specifies the name of the engine that this option DCNL group should be associated with. DCNL :type major_engine_version: string DCNL :param major_engine_version: Specifies the major version of the engine DCNL that this option group should be associated with. DCNL :type option_group_description: string DCNL :param option_group_description: The description of the option group. DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def delete_db_instance(self, db_instance_identifier, skip_final_snapshot=None, final_db_snapshot_identifier=None): DCNL 'The DeleteDBInstance action deletes a previously provisioned DCNL DB instance. A successful response from the web service DCNL indicates the request was received correctly. When you delete DCNL a DB instance, all automated backups for that instance are DCNL deleted and cannot be recovered. Manual DB snapshots of the DB DCNL instance to be deleted are not deleted. DCNL If a final DB snapshot is requested the status of the RDS DCNL instance will be "deleting" until the DB snapshot is created. DCNL The API action `DescribeDBInstance` is used to monitor the DCNL status of this operation. The action cannot be canceled or DCNL reverted once submitted. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The DB instance identifier for the DB instance to be deleted. This DCNL parameter isn\'t case sensitive. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type skip_final_snapshot: boolean DCNL :param skip_final_snapshot: Determines whether a final DB snapshot is DCNL created before the DB instance is deleted. If `True` is specified, DCNL no DBSnapshot is created. If false is specified, a DB snapshot is DCNL created before the DB instance is deleted. DCNL The FinalDBSnapshotIdentifier parameter must be specified if DCNL SkipFinalSnapshot is `False`. DCNL Default: `False` DCNL :type final_db_snapshot_identifier: string DCNL :param final_db_snapshot_identifier: DCNL The DBSnapshotIdentifier of the new DBSnapshot created when DCNL SkipFinalSnapshot is set to `False`. DCNL Specifying this parameter and also setting the SkipFinalShapshot DCNL parameter to true results in an error. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens'
def delete_db_parameter_group(self, db_parameter_group_name): DCNL 'Deletes a specified DBParameterGroup. The DBParameterGroup DCNL cannot be associated with any RDS instances to be deleted. DCNL The specified DB parameter group cannot be associated with any DCNL DB instances. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of the DB parameter group. DCNL Constraints: DCNL + Must be the name of an existing DB parameter group DCNL + You cannot delete a default DB parameter group DCNL + Cannot be associated with any DB instances'
def delete_db_security_group(self, db_security_group_name): DCNL 'Deletes a DB security group. DCNL The specified DB security group must not be associated with DCNL any DB instances. DCNL :type db_security_group_name: string DCNL :param db_security_group_name: DCNL The name of the DB security group to delete. DCNL You cannot delete the default DB security group. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL + Must not be "Default" DCNL + May not contain spaces'
def delete_db_snapshot(self, db_snapshot_identifier): DCNL 'Deletes a DBSnapshot. DCNL The DBSnapshot must be in the `available` state to be deleted. DCNL :type db_snapshot_identifier: string DCNL :param db_snapshot_identifier: The DBSnapshot identifier. DCNL Constraints: Must be the name of an existing DB snapshot in the DCNL `available` state.'
def delete_db_subnet_group(self, db_subnet_group_name): DCNL 'Deletes a DB subnet group. DCNL The specified database subnet group must not be associated DCNL with any DB instances. DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: DCNL The name of the database subnet group to delete. DCNL You cannot delete the default subnet group. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens'
def delete_event_subscription(self, subscription_name): DCNL 'Deletes an RDS event notification subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the RDS event notification DCNL subscription you want to delete.'
def delete_option_group(self, option_group_name): DCNL 'Deletes an existing option group. DCNL :type option_group_name: string DCNL :param option_group_name: DCNL The name of the option group to be deleted. DCNL You cannot delete default option groups.'
def describe_db_engine_versions(self, engine=None, engine_version=None, db_parameter_group_family=None, max_records=None, marker=None, default_only=None, list_supported_character_sets=None): DCNL 'Returns a list of the available DB engines. DCNL :type engine: string DCNL :param engine: The database engine to return. DCNL :type engine_version: string DCNL :param engine_version: The database engine version to return. DCNL Example: `5.1.49` DCNL :type db_parameter_group_family: string DCNL :param db_parameter_group_family: DCNL The name of a specific DB parameter group family to return details for. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more than the `MaxRecords` value is available, a DCNL pagination token called a marker is included in the response so DCNL that the following results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL request. If this parameter is specified, the response includes only DCNL records beyond the marker, up to the value specified by DCNL `MaxRecords`. DCNL :type default_only: boolean DCNL :param default_only: Indicates that only the default version of the DCNL specified engine or engine and major version combination is DCNL returned. DCNL :type list_supported_character_sets: boolean DCNL :param list_supported_character_sets: If this parameter is specified, DCNL and if the requested engine supports the CharacterSetName parameter DCNL for CreateDBInstance, the response includes a list of supported DCNL character sets for each engine version.'
def describe_db_instances(self, db_instance_identifier=None, filters=None, max_records=None, marker=None): DCNL 'Returns information about provisioned RDS instances. This API DCNL supports pagination. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The user-supplied instance identifier. If this parameter is specified, DCNL information from only the specific DB instance is returned. This DCNL parameter isn\'t case sensitive. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeDBInstances request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords` .'
def describe_db_log_files(self, db_instance_identifier, filename_contains=None, file_last_written=None, file_size=None, max_records=None, marker=None): DCNL 'Returns a list of DB log files for the DB instance. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The customer-assigned name of the DB instance that contains the log DCNL files you want to list. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type filename_contains: string DCNL :param filename_contains: Filters the available log files for log file DCNL names that contain the specified string. DCNL :type file_last_written: long DCNL :param file_last_written: Filters the available log files for files DCNL written since the specified date, in POSIX timestamp format. DCNL :type file_size: long DCNL :param file_size: Filters the available log files for files larger than DCNL the specified size. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified MaxRecords DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results can be retrieved. DCNL :type marker: string DCNL :param marker: The pagination token provided in the previous request. DCNL If this parameter is specified the response includes only records DCNL beyond the marker, up to MaxRecords.'
def describe_db_parameter_groups(self, db_parameter_group_name=None, filters=None, max_records=None, marker=None): DCNL 'Returns a list of `DBParameterGroup` descriptions. If a DCNL `DBParameterGroupName` is specified, the list will contain DCNL only the description of the specified DB parameter group. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of a specific DB parameter group to return details for. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL `DescribeDBParameterGroups` request. If this parameter is DCNL specified, the response includes only records beyond the marker, up DCNL to the value specified by `MaxRecords`.'
def describe_db_parameters(self, db_parameter_group_name, source=None, max_records=None, marker=None): DCNL 'Returns the detailed parameter list for a particular DB DCNL parameter group. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of a specific DB parameter group to return details for. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type source: string DCNL :param source: The parameter types to return. DCNL Default: All parameter types returned DCNL Valid Values: `user | system | engine-default` DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL `DescribeDBParameters` request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords`.'
def describe_db_security_groups(self, db_security_group_name=None, filters=None, max_records=None, marker=None): DCNL 'Returns a list of `DBSecurityGroup` descriptions. If a DCNL `DBSecurityGroupName` is specified, the list will contain only DCNL the descriptions of the specified DB security group. DCNL :type db_security_group_name: string DCNL :param db_security_group_name: The name of the DB security group to DCNL return details for. DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeDBSecurityGroups request. If this parameter is specified, DCNL the response includes only records beyond the marker, up to the DCNL value specified by `MaxRecords`.'
def describe_db_snapshots(self, db_instance_identifier=None, db_snapshot_identifier=None, snapshot_type=None, filters=None, max_records=None, marker=None): DCNL 'Returns information about DB snapshots. This API supports DCNL pagination. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL A DB instance identifier to retrieve the list of DB snapshots for. DCNL Cannot be used in conjunction with `DBSnapshotIdentifier`. This DCNL parameter is not case sensitive. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type db_snapshot_identifier: string DCNL :param db_snapshot_identifier: DCNL A specific DB snapshot identifier to describe. Cannot be used in DCNL conjunction with `DBInstanceIdentifier`. This value is stored as a DCNL lowercase string. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL + If this is the identifier of an automated snapshot, the DCNL `SnapshotType` parameter must also be specified. DCNL :type snapshot_type: string DCNL :param snapshot_type: The type of snapshots that will be returned. DCNL Values can be "automated" or "manual." If not specified, the DCNL returned results will include all snapshots types. DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL `DescribeDBSnapshots` request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords`.'
def describe_db_subnet_groups(self, db_subnet_group_name=None, filters=None, max_records=None, marker=None): DCNL 'Returns a list of DBSubnetGroup descriptions. If a DCNL DBSubnetGroupName is specified, the list will contain only the DCNL descriptions of the specified DBSubnetGroup. DCNL For an overview of CIDR ranges, go to the `Wikipedia DCNL Tutorial`_. DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: The name of the DB subnet group to return DCNL details for. DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeDBSubnetGroups request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords`.'
def describe_engine_default_parameters(self, db_parameter_group_family, max_records=None, marker=None): DCNL 'Returns the default engine and system parameter information DCNL for the specified database engine. DCNL :type db_parameter_group_family: string DCNL :param db_parameter_group_family: The name of the DB parameter group DCNL family. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL `DescribeEngineDefaultParameters` request. If this parameter is DCNL specified, the response includes only records beyond the marker, up DCNL to the value specified by `MaxRecords`.'
def describe_event_categories(self, source_type=None): DCNL 'Displays a list of categories for all event source types, or, DCNL if specified, for a specified source type. You can see a list DCNL of the event categories and source types in the ` Events`_ DCNL topic in the Amazon RDS User Guide. DCNL :type source_type: string DCNL :param source_type: The type of source that will be generating the DCNL events. DCNL Valid values: db-instance | db-parameter-group | db-security-group | DCNL db-snapshot'
def describe_event_subscriptions(self, subscription_name=None, filters=None, max_records=None, marker=None): DCNL 'Lists all the subscription descriptions for a customer DCNL account. The description for a subscription includes DCNL SubscriptionName, SNSTopicARN, CustomerID, SourceType, DCNL SourceID, CreationTime, and Status. DCNL If you specify a SubscriptionName, lists the description for DCNL that subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the RDS event notification DCNL subscription you want to describe. DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeOrderableDBInstanceOptions request. If this parameter is DCNL specified, the response includes only records beyond the marker, up DCNL to the value specified by `MaxRecords` .'
def describe_events(self, source_identifier=None, source_type=None, start_time=None, end_time=None, duration=None, event_categories=None, max_records=None, marker=None): DCNL 'Returns events related to DB instances, DB security groups, DB DCNL snapshots, and DB parameter groups for the past 14 days. DCNL Events specific to a particular DB instance, DB security DCNL group, database snapshot, or DB parameter group can be DCNL obtained by providing the name as a parameter. By default, the DCNL past hour of events are returned. DCNL :type source_identifier: string DCNL :param source_identifier: DCNL The identifier of the event source for which events will be returned. DCNL If not specified, then all sources are included in the response. DCNL Constraints: DCNL + If SourceIdentifier is supplied, SourceType must also be provided. DCNL + If the source type is `DBInstance`, then a `DBInstanceIdentifier` DCNL must be supplied. DCNL + If the source type is `DBSecurityGroup`, a `DBSecurityGroupName` must DCNL be supplied. DCNL + If the source type is `DBParameterGroup`, a `DBParameterGroupName` DCNL must be supplied. DCNL + If the source type is `DBSnapshot`, a `DBSnapshotIdentifier` must be DCNL supplied. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type source_type: string DCNL :param source_type: The event source to retrieve events for. If no DCNL value is specified, all events are returned. DCNL :type start_time: timestamp DCNL :param start_time: The beginning of the time interval to retrieve DCNL events for, specified in ISO 8601 format. For more information DCNL about ISO 8601, go to the `ISO8601 Wikipedia page.`_ DCNL Example: 2009-07-08T18:00Z DCNL :type end_time: timestamp DCNL :param end_time: The end of the time interval for which to retrieve DCNL events, specified in ISO 8601 format. For more information about DCNL ISO 8601, go to the `ISO8601 Wikipedia page.`_ DCNL Example: 2009-07-08T18:00Z DCNL :type duration: integer DCNL :param duration: The number of minutes to retrieve events for. DCNL Default: 60 DCNL :type event_categories: list DCNL :param event_categories: A list of event categories that trigger DCNL notifications for a event notification subscription. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results may be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeEvents request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords`.'
def describe_option_group_options(self, engine_name, major_engine_version=None, max_records=None, marker=None): DCNL 'Describes all available options. DCNL :type engine_name: string DCNL :param engine_name: A required parameter. Options available for the DCNL given Engine name will be described. DCNL :type major_engine_version: string DCNL :param major_engine_version: If specified, filters the results to DCNL include only options for the specified major engine version. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL request. If this parameter is specified, the response includes only DCNL records beyond the marker, up to the value specified by DCNL `MaxRecords`.'
def describe_option_groups(self, option_group_name=None, filters=None, marker=None, max_records=None, engine_name=None, major_engine_version=None): DCNL 'Describes the available option groups. DCNL :type option_group_name: string DCNL :param option_group_name: The name of the option group to describe. DCNL Cannot be supplied together with EngineName or MajorEngineVersion. DCNL :type filters: list DCNL :param filters: DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeOptionGroups request. If this parameter is specified, the DCNL response includes only records beyond the marker, up to the value DCNL specified by `MaxRecords`. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type engine_name: string DCNL :param engine_name: Filters the list of option groups to only include DCNL groups associated with a specific database engine. DCNL :type major_engine_version: string DCNL :param major_engine_version: Filters the list of option groups to only DCNL include groups associated with a specific database engine version. DCNL If specified, then EngineName must also be specified.'
def describe_orderable_db_instance_options(self, engine, engine_version=None, db_instance_class=None, license_model=None, vpc=None, max_records=None, marker=None): DCNL 'Returns a list of orderable DB instance options for the DCNL specified engine. DCNL :type engine: string DCNL :param engine: The name of the engine to retrieve DB instance options DCNL for. DCNL :type engine_version: string DCNL :param engine_version: The engine version filter value. Specify this DCNL parameter to show only the available offerings matching the DCNL specified engine version. DCNL :type db_instance_class: string DCNL :param db_instance_class: The DB instance class filter value. Specify DCNL this parameter to show only the available offerings matching the DCNL specified DB instance class. DCNL :type license_model: string DCNL :param license_model: The license model filter value. Specify this DCNL parameter to show only the available offerings matching the DCNL specified license model. DCNL :type vpc: boolean DCNL :param vpc: The VPC filter value. Specify this parameter to show only DCNL the available VPC or non-VPC offerings. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a pagination token called a marker is included in the DCNL response so that the remaining results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL DescribeOrderableDBInstanceOptions request. If this parameter is DCNL specified, the response includes only records beyond the marker, up DCNL to the value specified by `MaxRecords` .'
def describe_reserved_db_instances(self, reserved_db_instance_id=None, reserved_db_instances_offering_id=None, db_instance_class=None, duration=None, product_description=None, offering_type=None, multi_az=None, filters=None, max_records=None, marker=None): DCNL 'Returns information about reserved DB instances for this DCNL account, or about a specified reserved DB instance. DCNL :type reserved_db_instance_id: string DCNL :param reserved_db_instance_id: The reserved DB instance identifier DCNL filter value. Specify this parameter to show only the reservation DCNL that matches the specified reservation ID. DCNL :type reserved_db_instances_offering_id: string DCNL :param reserved_db_instances_offering_id: The offering identifier DCNL filter value. Specify this parameter to show only purchased DCNL reservations matching the specified offering identifier. DCNL :type db_instance_class: string DCNL :param db_instance_class: The DB instance class filter value. Specify DCNL this parameter to show only those reservations matching the DCNL specified DB instances class. DCNL :type duration: string DCNL :param duration: The duration filter value, specified in years or DCNL seconds. Specify this parameter to show only reservations for this DCNL duration. DCNL Valid Values: `1 | 3 | 31536000 | 94608000` DCNL :type product_description: string DCNL :param product_description: The product description filter value. DCNL Specify this parameter to show only those reservations matching the DCNL specified product description. DCNL :type offering_type: string DCNL :param offering_type: The offering type filter value. Specify this DCNL parameter to show only the available offerings matching the DCNL specified offering type. DCNL Valid Values: `"Light Utilization" | "Medium Utilization" | "Heavy DCNL Utilization" ` DCNL :type multi_az: boolean DCNL :param multi_az: The Multi-AZ filter value. Specify this parameter to DCNL show only those reservations matching the specified Multi-AZ DCNL parameter. DCNL :type filters: list DCNL :param filters: DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more than the `MaxRecords` value is available, a DCNL pagination token called a marker is included in the response so DCNL that the following results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL request. If this parameter is specified, the response includes only DCNL records beyond the marker, up to the value specified by DCNL `MaxRecords`.'
def describe_reserved_db_instances_offerings(self, reserved_db_instances_offering_id=None, db_instance_class=None, duration=None, product_description=None, offering_type=None, multi_az=None, max_records=None, marker=None): DCNL 'Lists available reserved DB instance offerings. DCNL :type reserved_db_instances_offering_id: string DCNL :param reserved_db_instances_offering_id: The offering identifier DCNL filter value. Specify this parameter to show only the available DCNL offering that matches the specified reservation identifier. DCNL Example: `438012d3-4052-4cc7-b2e3-8d3372e0e706` DCNL :type db_instance_class: string DCNL :param db_instance_class: The DB instance class filter value. Specify DCNL this parameter to show only the available offerings matching the DCNL specified DB instance class. DCNL :type duration: string DCNL :param duration: Duration filter value, specified in years or seconds. DCNL Specify this parameter to show only reservations for this duration. DCNL Valid Values: `1 | 3 | 31536000 | 94608000` DCNL :type product_description: string DCNL :param product_description: Product description filter value. Specify DCNL this parameter to show only the available offerings matching the DCNL specified product description. DCNL :type offering_type: string DCNL :param offering_type: The offering type filter value. Specify this DCNL parameter to show only the available offerings matching the DCNL specified offering type. DCNL Valid Values: `"Light Utilization" | "Medium Utilization" | "Heavy DCNL Utilization" ` DCNL :type multi_az: boolean DCNL :param multi_az: The Multi-AZ filter value. Specify this parameter to DCNL show only the available offerings matching the specified Multi-AZ DCNL parameter. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more than the `MaxRecords` value is available, a DCNL pagination token called a marker is included in the response so DCNL that the following results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20, maximum 100 DCNL :type marker: string DCNL :param marker: An optional pagination token provided by a previous DCNL request. If this parameter is specified, the response includes only DCNL records beyond the marker, up to the value specified by DCNL `MaxRecords`.'
def download_db_log_file_portion(self, db_instance_identifier, log_file_name, marker=None, number_of_lines=None): DCNL 'Downloads the last line of the specified log file. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The customer-assigned name of the DB instance that contains the log DCNL files you want to list. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type log_file_name: string DCNL :param log_file_name: The name of the log file to be downloaded. DCNL :type marker: string DCNL :param marker: The pagination token provided in the previous request. DCNL If this parameter is specified the response includes only records DCNL beyond the marker, up to MaxRecords. DCNL :type number_of_lines: integer DCNL :param number_of_lines: The number of lines remaining to be downloaded.'
def list_tags_for_resource(self, resource_name): DCNL 'Lists all tags on an Amazon RDS resource. DCNL For an overview on tagging an Amazon RDS resource, see DCNL `Tagging Amazon RDS Resources`_. DCNL :type resource_name: string DCNL :param resource_name: The Amazon RDS resource with tags to be listed. DCNL This value is an Amazon Resource Name (ARN). For information about DCNL creating an ARN, see ` Constructing an RDS Amazon Resource Name DCNL (ARN)`_.'
def modify_db_instance(self, db_instance_identifier, allocated_storage=None, db_instance_class=None, db_security_groups=None, vpc_security_group_ids=None, apply_immediately=None, master_user_password=None, db_parameter_group_name=None, backup_retention_period=None, preferred_backup_window=None, preferred_maintenance_window=None, multi_az=None, engine_version=None, allow_major_version_upgrade=None, auto_minor_version_upgrade=None, iops=None, option_group_name=None, new_db_instance_identifier=None): DCNL 'Modify settings for a DB instance. You can change one or more DCNL database configuration parameters by specifying these DCNL parameters and the new values in the request. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The DB instance identifier. This value is stored as a lowercase string. DCNL Constraints: DCNL + Must be the identifier for an existing DB instance DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type allocated_storage: integer DCNL :param allocated_storage: The new storage capacity of the RDS instance. DCNL Changing this parameter does not result in an outage and the change DCNL is applied during the next maintenance window unless the DCNL `ApplyImmediately` parameter is set to `True` for this request. DCNL **MySQL** DCNL Default: Uses existing setting DCNL Valid Values: 5-1024 DCNL Constraints: Value supplied must be at least 10% greater than the DCNL current value. Values that are not at least 10% greater than the DCNL existing value are rounded up so that they are 10% greater than the DCNL current value. DCNL Type: Integer DCNL **Oracle** DCNL Default: Uses existing setting DCNL Valid Values: 10-1024 DCNL Constraints: Value supplied must be at least 10% greater than the DCNL current value. Values that are not at least 10% greater than the DCNL existing value are rounded up so that they are 10% greater than the DCNL current value. DCNL **SQL Server** DCNL Cannot be modified. DCNL If you choose to migrate your DB instance from using standard storage DCNL to using Provisioned IOPS, or from using Provisioned IOPS to using DCNL standard storage, the process can take time. The duration of the DCNL migration depends on several factors such as database load, storage DCNL size, storage type (standard or Provisioned IOPS), amount of IOPS DCNL provisioned (if any), and the number of prior scale storage DCNL operations. Typical migration times are under 24 hours, but the DCNL process can take up to several days in some cases. During the DCNL migration, the DB instance will be available for use, but may DCNL experience performance degradation. While the migration takes DCNL place, nightly backups for the instance will be suspended. No other DCNL Amazon RDS operations can take place for the instance, including DCNL modifying the instance, rebooting the instance, deleting the DCNL instance, creating a read replica for the instance, and creating a DCNL DB snapshot of the instance. DCNL :type db_instance_class: string DCNL :param db_instance_class: The new compute and memory capacity of the DB DCNL instance. To determine the instance classes that are available for DCNL a particular DB engine, use the DescribeOrderableDBInstanceOptions DCNL action. DCNL Passing a value for this parameter causes an outage during the change DCNL and is applied during the next maintenance window, unless the DCNL `ApplyImmediately` parameter is specified as `True` for this DCNL request. DCNL Default: Uses existing setting DCNL Valid Values: `db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | DCNL db.m1.xlarge | db.m2.xlarge | db.m2.2xlarge | db.m2.4xlarge` DCNL :type db_security_groups: list DCNL :param db_security_groups: DCNL A list of DB security groups to authorize on this DB instance. Changing DCNL this parameter does not result in an outage and the change is DCNL asynchronously applied as soon as possible. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type vpc_security_group_ids: list DCNL :param vpc_security_group_ids: DCNL A list of EC2 VPC security groups to authorize on this DB instance. DCNL This change is asynchronously applied as soon as possible. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type apply_immediately: boolean DCNL :param apply_immediately: Specifies whether or not the modifications in DCNL this request and any pending modifications are asynchronously DCNL applied as soon as possible, regardless of the DCNL `PreferredMaintenanceWindow` setting for the DB instance. DCNL If this parameter is passed as `False`, changes to the DB instance are DCNL applied on the next call to RebootDBInstance, the next maintenance DCNL reboot, or the next failure reboot, whichever occurs first. See DCNL each parameter to determine when a change is applied. DCNL Default: `False` DCNL :type master_user_password: string DCNL :param master_user_password: DCNL The new password for the DB instance master user. Can be any printable DCNL ASCII character except "/", \'"\', or "@". DCNL Changing this parameter does not result in an outage and the change is DCNL asynchronously applied as soon as possible. Between the time of the DCNL request and the completion of the request, the `MasterUserPassword` DCNL element exists in the `PendingModifiedValues` element of the DCNL operation response. DCNL Default: Uses existing setting DCNL Constraints: Must be 8 to 41 alphanumeric characters (MySQL), 8 to 30 DCNL alphanumeric characters (Oracle), or 8 to 128 alphanumeric DCNL characters (SQL Server). DCNL Amazon RDS API actions never return the password, so this action DCNL provides a way to regain access to a master instance user if the DCNL password is lost. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: The name of the DB parameter group to DCNL apply to this DB instance. Changing this parameter does not result DCNL in an outage and the change is applied during the next maintenance DCNL window unless the `ApplyImmediately` parameter is set to `True` for DCNL this request. DCNL Default: Uses existing setting DCNL Constraints: The DB parameter group must be in the same DB parameter DCNL group family as this DB instance. DCNL :type backup_retention_period: integer DCNL :param backup_retention_period: DCNL The number of days to retain automated backups. Setting this parameter DCNL to a positive number enables backups. Setting this parameter to 0 DCNL disables automated backups. DCNL Changing this parameter can result in an outage if you change from 0 to DCNL a non-zero value or from a non-zero value to 0. These changes are DCNL applied during the next maintenance window unless the DCNL `ApplyImmediately` parameter is set to `True` for this request. If DCNL you change the parameter from one non-zero value to another non- DCNL zero value, the change is asynchronously applied as soon as DCNL possible. DCNL Default: Uses existing setting DCNL Constraints: DCNL + Must be a value from 0 to 8 DCNL + Cannot be set to 0 if the DB instance is a master instance with read DCNL replicas or if the DB instance is a read replica DCNL :type preferred_backup_window: string DCNL :param preferred_backup_window: DCNL The daily time range during which automated backups are created if DCNL automated backups are enabled, as determined by the DCNL `BackupRetentionPeriod`. Changing this parameter does not result in DCNL an outage and the change is asynchronously applied as soon as DCNL possible. DCNL Constraints: DCNL + Must be in the format hh24:mi-hh24:mi DCNL + Times should be Universal Time Coordinated (UTC) DCNL + Must not conflict with the preferred maintenance window DCNL + Must be at least 30 minutes DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which system maintenance can occur, which may result in an DCNL outage. Changing this parameter does not result in an outage, DCNL except in the following situation, and the change is asynchronously DCNL applied as soon as possible. If there are pending actions that DCNL cause a reboot, and the maintenance window is changed to include DCNL the current time, then changing this parameter will cause a reboot DCNL of the DB instance. If moving this window to the current time, DCNL there must be at least 30 minutes between the current time and end DCNL of the window to ensure pending changes are applied. DCNL Default: Uses existing setting DCNL Format: ddd:hh24:mi-ddd:hh24:mi DCNL Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun DCNL Constraints: Must be at least 30 minutes DCNL :type multi_az: boolean DCNL :param multi_az: Specifies if the DB instance is a Multi-AZ deployment. DCNL Changing this parameter does not result in an outage and the change DCNL is applied during the next maintenance window unless the DCNL `ApplyImmediately` parameter is set to `True` for this request. DCNL Constraints: Cannot be specified if the DB instance is a read replica. DCNL :type engine_version: string DCNL :param engine_version: The version number of the database engine to DCNL upgrade to. Changing this parameter results in an outage and the DCNL change is applied during the next maintenance window unless the DCNL `ApplyImmediately` parameter is set to `True` for this request. DCNL For major version upgrades, if a non-default DB parameter group is DCNL currently in use, a new DB parameter group in the DB parameter DCNL group family for the new engine version must be specified. The new DCNL DB parameter group can be the default for that DB parameter group DCNL family. DCNL Example: `5.1.42` DCNL :type allow_major_version_upgrade: boolean DCNL :param allow_major_version_upgrade: Indicates that major version DCNL upgrades are allowed. Changing this parameter does not result in an DCNL outage and the change is asynchronously applied as soon as DCNL possible. DCNL Constraints: This parameter must be set to true when specifying a value DCNL for the EngineVersion parameter that is a different major version DCNL than the DB instance\'s current version. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Indicates that minor version DCNL upgrades will be applied automatically to the DB instance during DCNL the maintenance window. Changing this parameter does not result in DCNL an outage except in the following case and the change is DCNL asynchronously applied as soon as possible. An outage will result DCNL if this parameter is set to `True` during the maintenance window, DCNL and a newer minor version is available, and RDS has enabled auto DCNL patching for that engine version. DCNL :type iops: integer DCNL :param iops: The new Provisioned IOPS (I/O operations per second) value DCNL for the RDS instance. Changing this parameter does not result in an DCNL outage and the change is applied during the next maintenance window DCNL unless the `ApplyImmediately` parameter is set to `True` for this DCNL request. DCNL Default: Uses existing setting DCNL Constraints: Value supplied must be at least 10% greater than the DCNL current value. Values that are not at least 10% greater than the DCNL existing value are rounded up so that they are 10% greater than the DCNL current value. DCNL Type: Integer DCNL If you choose to migrate your DB instance from using standard storage DCNL to using Provisioned IOPS, or from using Provisioned IOPS to using DCNL standard storage, the process can take time. The duration of the DCNL migration depends on several factors such as database load, storage DCNL size, storage type (standard or Provisioned IOPS), amount of IOPS DCNL provisioned (if any), and the number of prior scale storage DCNL operations. Typical migration times are under 24 hours, but the DCNL process can take up to several days in some cases. During the DCNL migration, the DB instance will be available for use, but may DCNL experience performance degradation. While the migration takes DCNL place, nightly backups for the instance will be suspended. No other DCNL Amazon RDS operations can take place for the instance, including DCNL modifying the instance, rebooting the instance, deleting the DCNL instance, creating a read replica for the instance, and creating a DCNL DB snapshot of the instance. DCNL :type option_group_name: string DCNL :param option_group_name: Indicates that the DB instance should be DCNL associated with the specified option group. Changing this parameter DCNL does not result in an outage except in the following case and the DCNL change is applied during the next maintenance window unless the DCNL `ApplyImmediately` parameter is set to `True` for this request. If DCNL the parameter change results in an option group that enables OEM, DCNL this change can cause a brief (sub-second) period during which new DCNL connections are rejected but existing connections are not DCNL interrupted. DCNL Permanent options, such as the TDE option for Oracle Advanced Security DCNL TDE, cannot be removed from an option group, and that option group DCNL cannot be removed from a DB instance once it is associated with a DCNL DB instance DCNL :type new_db_instance_identifier: string DCNL :param new_db_instance_identifier: DCNL The new DB instance identifier for the DB instance when renaming a DB DCNL Instance. This value is stored as a lowercase string. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens'
def modify_db_parameter_group(self, db_parameter_group_name, parameters): DCNL 'Modifies the parameters of a DB parameter group. To modify DCNL more than one parameter, submit a list of the following: DCNL `ParameterName`, `ParameterValue`, and `ApplyMethod`. A DCNL maximum of 20 parameters can be modified in a single request. DCNL The `apply-immediate` method can be used only for dynamic DCNL parameters; the `pending-reboot` method can be used with MySQL DCNL and Oracle DB instances for either dynamic or static DCNL parameters. For Microsoft SQL Server DB instances, the DCNL `pending-reboot` method can be used only for static DCNL parameters. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of the DB parameter group. DCNL Constraints: DCNL + Must be the name of an existing DB parameter group DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type parameters: list DCNL :param parameters: DCNL An array of parameter names, values, and the apply method for the DCNL parameter update. At least one parameter name, value, and apply DCNL method must be supplied; subsequent arguments are optional. A DCNL maximum of 20 parameters may be modified in a single request. DCNL Valid Values (for the application method): `immediate | pending-reboot` DCNL You can use the immediate value with dynamic parameters only. You can DCNL use the pending-reboot value for both dynamic and static DCNL parameters, and changes are applied when DB instance reboots.'
def modify_db_subnet_group(self, db_subnet_group_name, subnet_ids, db_subnet_group_description=None): DCNL 'Modifies an existing DB subnet group. DB subnet groups must DCNL contain at least one subnet in at least two AZs in the region. DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: The name for the DB subnet group. This DCNL value is stored as a lowercase string. DCNL Constraints: Must contain no more than 255 alphanumeric characters or DCNL hyphens. Must not be "Default". DCNL Example: `mySubnetgroup` DCNL :type db_subnet_group_description: string DCNL :param db_subnet_group_description: The description for the DB subnet DCNL group. DCNL :type subnet_ids: list DCNL :param subnet_ids: The EC2 subnet IDs for the DB subnet group.'
def modify_event_subscription(self, subscription_name, sns_topic_arn=None, source_type=None, event_categories=None, enabled=None): DCNL 'Modifies an existing RDS event notification subscription. Note DCNL that you cannot modify the source identifiers using this call; DCNL to change source identifiers for a subscription, use the DCNL AddSourceIdentifierToSubscription and DCNL RemoveSourceIdentifierFromSubscription calls. DCNL You can see a list of the event categories for a given DCNL SourceType in the `Events`_ topic in the Amazon RDS User Guide DCNL or by using the **DescribeEventCategories** action. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the RDS event notification DCNL subscription. DCNL :type sns_topic_arn: string DCNL :param sns_topic_arn: The Amazon Resource Name (ARN) of the SNS topic DCNL created for event notification. The ARN is created by Amazon SNS DCNL when you create a topic and subscribe to it. DCNL :type source_type: string DCNL :param source_type: The type of source that will be generating the DCNL events. For example, if you want to be notified of events generated DCNL by a DB instance, you would set this parameter to db-instance. if DCNL this value is not specified, all events are returned. DCNL Valid values: db-instance | db-parameter-group | db-security-group | DCNL db-snapshot DCNL :type event_categories: list DCNL :param event_categories: A list of event categories for a SourceType DCNL that you want to subscribe to. You can see a list of the categories DCNL for a given SourceType in the `Events`_ topic in the Amazon RDS DCNL User Guide or by using the **DescribeEventCategories** action. DCNL :type enabled: boolean DCNL :param enabled: A Boolean value; set to **true** to activate the DCNL subscription.'
def modify_option_group(self, option_group_name, options_to_include=None, options_to_remove=None, apply_immediately=None): DCNL 'Modifies an existing option group. DCNL :type option_group_name: string DCNL :param option_group_name: The name of the option group to be modified. DCNL Permanent options, such as the TDE option for Oracle Advanced Security DCNL TDE, cannot be removed from an option group, and that option group DCNL cannot be removed from a DB instance once it is associated with a DCNL DB instance DCNL :type options_to_include: list DCNL :param options_to_include: Options in this list are added to the option DCNL group or, if already present, the specified configuration is used DCNL to update the existing configuration. DCNL :type options_to_remove: list DCNL :param options_to_remove: Options in this list are removed from the DCNL option group. DCNL :type apply_immediately: boolean DCNL :param apply_immediately: Indicates whether the changes should be DCNL applied immediately, or during the next maintenance window for each DCNL instance associated with the option group.'
def promote_read_replica(self, db_instance_identifier, backup_retention_period=None, preferred_backup_window=None): DCNL 'Promotes a read replica DB instance to a standalone DB DCNL instance. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: The DB instance identifier. This value DCNL is stored as a lowercase string. DCNL Constraints: DCNL + Must be the identifier for an existing read replica DB instance DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: mydbinstance DCNL :type backup_retention_period: integer DCNL :param backup_retention_period: DCNL The number of days to retain automated backups. Setting this parameter DCNL to a positive number enables backups. Setting this parameter to 0 DCNL disables automated backups. DCNL Default: 1 DCNL Constraints: DCNL + Must be a value from 0 to 8 DCNL :type preferred_backup_window: string DCNL :param preferred_backup_window: The daily time range during which DCNL automated backups are created if automated backups are enabled, DCNL using the `BackupRetentionPeriod` parameter. DCNL Default: A 30-minute window selected at random from an 8-hour block of DCNL time per region. See the Amazon RDS User Guide for the time blocks DCNL for each region from which the default backup windows are assigned. DCNL Constraints: Must be in the format `hh24:mi-hh24:mi`. Times should be DCNL Universal Time Coordinated (UTC). Must not conflict with the DCNL preferred maintenance window. Must be at least 30 minutes.'
def purchase_reserved_db_instances_offering(self, reserved_db_instances_offering_id, reserved_db_instance_id=None, db_instance_count=None, tags=None): DCNL 'Purchases a reserved DB instance offering. DCNL :type reserved_db_instances_offering_id: string DCNL :param reserved_db_instances_offering_id: The ID of the Reserved DB DCNL instance offering to purchase. DCNL Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 DCNL :type reserved_db_instance_id: string DCNL :param reserved_db_instance_id: Customer-specified identifier to track DCNL this reservation. DCNL Example: myreservationID DCNL :type db_instance_count: integer DCNL :param db_instance_count: The number of instances to reserve. DCNL Default: `1` DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def reboot_db_instance(self, db_instance_identifier, force_failover=None): DCNL 'Rebooting a DB instance restarts the database engine service. DCNL A reboot also applies to the DB instance any modifications to DCNL the associated DB parameter group that were pending. Rebooting DCNL a DB instance results in a momentary outage of the instance, DCNL during which the DB instance status is set to rebooting. If DCNL the RDS instance is configured for MultiAZ, it is possible DCNL that the reboot will be conducted through a failover. An DCNL Amazon RDS event is created when the reboot is completed. DCNL If your DB instance is deployed in multiple Availability DCNL Zones, you can force a failover from one AZ to the other DCNL during the reboot. You might force a failover to test the DCNL availability of your DB instance deployment or to restore DCNL operations to the original AZ after a failover occurs. DCNL The time required to reboot is a function of the specific DCNL database engine\'s crash recovery process. To improve the DCNL reboot time, we recommend that you reduce database activities DCNL as much as possible during the reboot process to reduce DCNL rollback activity for in-transit transactions. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The DB instance identifier. This parameter is stored as a lowercase DCNL string. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type force_failover: boolean DCNL :param force_failover: When `True`, the reboot will be conducted DCNL through a MultiAZ failover. DCNL Constraint: You cannot specify `True` if the instance is not configured DCNL for MultiAZ.'
def remove_source_identifier_from_subscription(self, subscription_name, source_identifier): DCNL 'Removes a source identifier from an existing RDS event DCNL notification subscription. DCNL :type subscription_name: string DCNL :param subscription_name: The name of the RDS event notification DCNL subscription you want to remove a source identifier from. DCNL :type source_identifier: string DCNL :param source_identifier: The source identifier to be removed from the DCNL subscription, such as the **DB instance identifier** for a DB DCNL instance or the name of a security group.'
def remove_tags_from_resource(self, resource_name, tag_keys): DCNL 'Removes metadata tags from an Amazon RDS resource. DCNL For an overview on tagging an Amazon RDS resource, see DCNL `Tagging Amazon RDS Resources`_. DCNL :type resource_name: string DCNL :param resource_name: The Amazon RDS resource the tags will be removed DCNL from. This value is an Amazon Resource Name (ARN). For information DCNL about creating an ARN, see ` Constructing an RDS Amazon Resource DCNL Name (ARN)`_. DCNL :type tag_keys: list DCNL :param tag_keys: The tag key (name) of the tag to be removed.'
def reset_db_parameter_group(self, db_parameter_group_name, reset_all_parameters=None, parameters=None): DCNL 'Modifies the parameters of a DB parameter group to the DCNL engine/system default value. To reset specific parameters DCNL submit a list of the following: `ParameterName` and DCNL `ApplyMethod`. To reset the entire DB parameter group, specify DCNL the `DBParameterGroup` name and `ResetAllParameters` DCNL parameters. When resetting the entire group, dynamic DCNL parameters are updated immediately and static parameters are DCNL set to `pending-reboot` to take effect on the next DB instance DCNL restart or `RebootDBInstance` request. DCNL :type db_parameter_group_name: string DCNL :param db_parameter_group_name: DCNL The name of the DB parameter group. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type reset_all_parameters: boolean DCNL :param reset_all_parameters: Specifies whether ( `True`) or not ( DCNL `False`) to reset all parameters in the DB parameter group to DCNL default values. DCNL Default: `True` DCNL :type parameters: list DCNL :param parameters: An array of parameter names, values, and the apply DCNL method for the parameter update. At least one parameter name, DCNL value, and apply method must be supplied; subsequent arguments are DCNL optional. A maximum of 20 parameters may be modified in a single DCNL request. DCNL **MySQL** DCNL Valid Values (for Apply method): `immediate` | `pending-reboot` DCNL You can use the immediate value with dynamic parameters only. You can DCNL use the `pending-reboot` value for both dynamic and static DCNL parameters, and changes are applied when DB instance reboots. DCNL **Oracle** DCNL Valid Values (for Apply method): `pending-reboot`'
def restore_db_instance_from_db_snapshot(self, db_instance_identifier, db_snapshot_identifier, db_instance_class=None, port=None, availability_zone=None, db_subnet_group_name=None, multi_az=None, publicly_accessible=None, auto_minor_version_upgrade=None, license_model=None, db_name=None, engine=None, iops=None, option_group_name=None, tags=None): DCNL 'Creates a new DB instance from a DB snapshot. The target DCNL database is created from the source database restore point DCNL with the same configuration as the original source database, DCNL except that the new RDS instance is created with the default DCNL security group. DCNL :type db_instance_identifier: string DCNL :param db_instance_identifier: DCNL The identifier for the DB snapshot to restore from. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type db_snapshot_identifier: string DCNL :param db_snapshot_identifier: Name of the DB instance to create from DCNL the DB snapshot. This parameter isn\'t case sensitive. DCNL Constraints: DCNL + Must contain from 1 to 255 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL Example: `my-snapshot-id` DCNL :type db_instance_class: string DCNL :param db_instance_class: The compute and memory capacity of the Amazon DCNL RDS DB instance. DCNL Valid Values: `db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | DCNL db.m1.xlarge | db.m2.2xlarge | db.m2.4xlarge` DCNL :type port: integer DCNL :param port: The port number on which the database accepts connections. DCNL Default: The same port as the original DB instance DCNL Constraints: Value must be `1150-65535` DCNL :type availability_zone: string DCNL :param availability_zone: The EC2 Availability Zone that the database DCNL instance will be created in. DCNL Default: A random, system-chosen Availability Zone. DCNL Constraint: You cannot specify the AvailabilityZone parameter if the DCNL MultiAZ parameter is set to `True`. DCNL Example: `us-east-1a` DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: The DB subnet group name to use for the DCNL new instance. DCNL :type multi_az: boolean DCNL :param multi_az: Specifies if the DB instance is a Multi-AZ deployment. DCNL Constraint: You cannot specify the AvailabilityZone parameter if the DCNL MultiAZ parameter is set to `True`. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: Specifies the accessibility options for the DCNL DB instance. A value of true specifies an Internet-facing instance DCNL with a publicly resolvable DNS name, which resolves to a public IP DCNL address. A value of false specifies an internal instance with a DNS DCNL name that resolves to a private IP address. DCNL Default: The default behavior varies depending on whether a VPC has DCNL been requested or not. The following list shows the default DCNL behavior in each case. DCNL + **Default VPC:**true DCNL + **VPC:**false DCNL If no DB subnet group has been specified as part of the request and the DCNL PubliclyAccessible value has not been set, the DB instance will be DCNL publicly accessible. If a specific DB subnet group has been DCNL specified as part of the request and the PubliclyAccessible value DCNL has not been set, the DB instance will be private. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Indicates that minor version DCNL upgrades will be applied automatically to the DB instance during DCNL the maintenance window. DCNL :type license_model: string DCNL :param license_model: License model information for the restored DB DCNL instance. DCNL Default: Same as source. DCNL Valid values: `license-included` | `bring-your-own-license` | `general- DCNL public-license` DCNL :type db_name: string DCNL :param db_name: DCNL The database name for the restored DB instance. DCNL This parameter doesn\'t apply to the MySQL engine. DCNL :type engine: string DCNL :param engine: The database engine to use for the new instance. DCNL Default: The same as source DCNL Constraint: Must be compatible with the engine of the source DCNL Example: `oracle-ee` DCNL :type iops: integer DCNL :param iops: Specifies the amount of provisioned IOPS for the DB DCNL instance, expressed in I/O operations per second. If this parameter DCNL is not specified, the IOPS value will be taken from the backup. If DCNL this parameter is set to 0, the new instance will be converted to a DCNL non-PIOPS instance, which will take additional time, though your DB DCNL instance will be available for connections before the conversion DCNL starts. DCNL Constraints: Must be an integer greater than 1000. DCNL :type option_group_name: string DCNL :param option_group_name: The name of the option group to be used for DCNL the restored DB instance. DCNL Permanent options, such as the TDE option for Oracle Advanced Security DCNL TDE, cannot be removed from an option group, and that option group DCNL cannot be removed from a DB instance once it is associated with a DCNL DB instance DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def restore_db_instance_to_point_in_time(self, source_db_instance_identifier, target_db_instance_identifier, restore_time=None, use_latest_restorable_time=None, db_instance_class=None, port=None, availability_zone=None, db_subnet_group_name=None, multi_az=None, publicly_accessible=None, auto_minor_version_upgrade=None, license_model=None, db_name=None, engine=None, iops=None, option_group_name=None, tags=None): DCNL 'Restores a DB instance to an arbitrary point-in-time. Users DCNL can restore to any point in time before the DCNL latestRestorableTime for up to backupRetentionPeriod days. The DCNL target database is created from the source database with the DCNL same configuration as the original database except that the DB DCNL instance is created with the default DB security group. DCNL :type source_db_instance_identifier: string DCNL :param source_db_instance_identifier: DCNL The identifier of the source DB instance from which to restore. DCNL Constraints: DCNL + Must be the identifier of an existing database instance DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type target_db_instance_identifier: string DCNL :param target_db_instance_identifier: DCNL The name of the new database instance to be created. DCNL Constraints: DCNL + Must contain from 1 to 63 alphanumeric characters or hyphens DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type restore_time: timestamp DCNL :param restore_time: The date and time to restore from. DCNL Valid Values: Value must be a UTC time DCNL Constraints: DCNL + Must be before the latest restorable time for the DB instance DCNL + Cannot be specified if UseLatestRestorableTime parameter is true DCNL Example: `2009-09-07T23:45:00Z` DCNL :type use_latest_restorable_time: boolean DCNL :param use_latest_restorable_time: Specifies whether ( `True`) or not ( DCNL `False`) the DB instance is restored from the latest backup time. DCNL Default: `False` DCNL Constraints: Cannot be specified if RestoreTime parameter is provided. DCNL :type db_instance_class: string DCNL :param db_instance_class: The compute and memory capacity of the Amazon DCNL RDS DB instance. DCNL Valid Values: `db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | DCNL db.m1.xlarge | db.m2.2xlarge | db.m2.4xlarge` DCNL Default: The same DBInstanceClass as the original DB instance. DCNL :type port: integer DCNL :param port: The port number on which the database accepts connections. DCNL Constraints: Value must be `1150-65535` DCNL Default: The same port as the original DB instance. DCNL :type availability_zone: string DCNL :param availability_zone: The EC2 Availability Zone that the database DCNL instance will be created in. DCNL Default: A random, system-chosen Availability Zone. DCNL Constraint: You cannot specify the AvailabilityZone parameter if the DCNL MultiAZ parameter is set to true. DCNL Example: `us-east-1a` DCNL :type db_subnet_group_name: string DCNL :param db_subnet_group_name: The DB subnet group name to use for the DCNL new instance. DCNL :type multi_az: boolean DCNL :param multi_az: Specifies if the DB instance is a Multi-AZ deployment. DCNL Constraint: You cannot specify the AvailabilityZone parameter if the DCNL MultiAZ parameter is set to `True`. DCNL :type publicly_accessible: boolean DCNL :param publicly_accessible: Specifies the accessibility options for the DCNL DB instance. A value of true specifies an Internet-facing instance DCNL with a publicly resolvable DNS name, which resolves to a public IP DCNL address. A value of false specifies an internal instance with a DNS DCNL name that resolves to a private IP address. DCNL Default: The default behavior varies depending on whether a VPC has DCNL been requested or not. The following list shows the default DCNL behavior in each case. DCNL + **Default VPC:**true DCNL + **VPC:**false DCNL If no DB subnet group has been specified as part of the request and the DCNL PubliclyAccessible value has not been set, the DB instance will be DCNL publicly accessible. If a specific DB subnet group has been DCNL specified as part of the request and the PubliclyAccessible value DCNL has not been set, the DB instance will be private. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Indicates that minor version DCNL upgrades will be applied automatically to the DB instance during DCNL the maintenance window. DCNL :type license_model: string DCNL :param license_model: License model information for the restored DB DCNL instance. DCNL Default: Same as source. DCNL Valid values: `license-included` | `bring-your-own-license` | `general- DCNL public-license` DCNL :type db_name: string DCNL :param db_name: DCNL The database name for the restored DB instance. DCNL This parameter is not used for the MySQL engine. DCNL :type engine: string DCNL :param engine: The database engine to use for the new instance. DCNL Default: The same as source DCNL Constraint: Must be compatible with the engine of the source DCNL Example: `oracle-ee` DCNL :type iops: integer DCNL :param iops: The amount of Provisioned IOPS (input/output operations DCNL per second) to be initially allocated for the DB instance. DCNL Constraints: Must be an integer greater than 1000. DCNL :type option_group_name: string DCNL :param option_group_name: The name of the option group to be used for DCNL the restored DB instance. DCNL Permanent options, such as the TDE option for Oracle Advanced Security DCNL TDE, cannot be removed from an option group, and that option group DCNL cannot be removed from a DB instance once it is associated with a DCNL DB instance DCNL :type tags: list DCNL :param tags: A list of tags. Tags must be passed as tuples in the form DCNL [(\'key1\', \'valueForKey1\'), (\'key2\', \'valueForKey2\')]'
def revoke_db_security_group_ingress(self, db_security_group_name, cidrip=None, ec2_security_group_name=None, ec2_security_group_id=None, ec2_security_group_owner_id=None): DCNL 'Revokes ingress from a DBSecurityGroup for previously DCNL authorized IP ranges or EC2 or VPC Security Groups. Required DCNL parameters for this API are one of CIDRIP, EC2SecurityGroupId DCNL for VPC, or (EC2SecurityGroupOwnerId and either DCNL EC2SecurityGroupName or EC2SecurityGroupId). DCNL :type db_security_group_name: string DCNL :param db_security_group_name: The name of the DB security group to DCNL revoke ingress from. DCNL :type cidrip: string DCNL :param cidrip: The IP range to revoke access from. Must be a valid CIDR DCNL range. If `CIDRIP` is specified, `EC2SecurityGroupName`, DCNL `EC2SecurityGroupId` and `EC2SecurityGroupOwnerId` cannot be DCNL provided. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The name of the EC2 security group to DCNL revoke access from. For VPC DB security groups, DCNL `EC2SecurityGroupId` must be provided. Otherwise, DCNL EC2SecurityGroupOwnerId and either `EC2SecurityGroupName` or DCNL `EC2SecurityGroupId` must be provided. DCNL :type ec2_security_group_id: string DCNL :param ec2_security_group_id: The id of the EC2 security group to DCNL revoke access from. For VPC DB security groups, DCNL `EC2SecurityGroupId` must be provided. Otherwise, DCNL EC2SecurityGroupOwnerId and either `EC2SecurityGroupName` or DCNL `EC2SecurityGroupId` must be provided. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The AWS Account Number of the owner DCNL of the EC2 security group specified in the `EC2SecurityGroupName` DCNL parameter. The AWS Access Key ID is not an acceptable value. For DCNL VPC DB security groups, `EC2SecurityGroupId` must be provided. DCNL Otherwise, EC2SecurityGroupOwnerId and either DCNL `EC2SecurityGroupName` or `EC2SecurityGroupId` must be provided.'
def put_attributes(self, item_name, attributes, replace=True, expected_value=None): DCNL 'Store attributes for a given item. DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are being stored. DCNL :type attribute_names: dict or dict-like object DCNL :param attribute_names: The name/value pairs to store as attributes DCNL :type expected_value: list DCNL :param expected_value: If supplied, this is a list or tuple consisting DCNL of a single attribute name and expected value. The list can be DCNL of the form: DCNL * [\'name\', \'value\'] DCNL In which case the call will first verify that the attribute DCNL "name" of this item has a value of "value".  If it does, the delete DCNL will proceed, otherwise a ConditionalCheckFailed error will be DCNL returned. The list can also be of the form: DCNL * [\'name\', True|False] DCNL which will simply check for the existence (True) or non-existence DCNL (False) of the attribute. DCNL :type replace: bool DCNL :param replace: Whether the attribute values passed in will replace DCNL existing values or will be added as addition values. DCNL Defaults to True. DCNL :rtype: bool DCNL :return: True if successful'
def batch_put_attributes(self, items, replace=True): DCNL 'Store attributes for multiple items. DCNL :type items: dict or dict-like object DCNL :param items: A dictionary-like object.  The keys of the dictionary are DCNL the item names and the values are themselves dictionaries DCNL of attribute names/values, exactly the same as the DCNL attribute_names parameter of the scalar put_attributes DCNL call. DCNL :type replace: bool DCNL :param replace: Whether the attribute values passed in will replace DCNL existing values or will be added as addition values. DCNL Defaults to True. DCNL :rtype: bool DCNL :return: True if successful'
def get_attributes(self, item_name, attribute_name=None, consistent_read=False, item=None): DCNL 'Retrieve attributes for a given item. DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are being retrieved. DCNL :type attribute_names: string or list of strings DCNL :param attribute_names: An attribute name or list of attribute names.  This DCNL parameter is optional.  If not supplied, all attributes DCNL will be retrieved for the item. DCNL :rtype: :class:`boto.sdb.item.Item` DCNL :return: An Item mapping type containing the requested attribute name/values'
def delete_attributes(self, item_name, attributes=None, expected_values=None): DCNL 'Delete attributes from a given item. DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are being deleted. DCNL :type attributes: dict, list or :class:`boto.sdb.item.Item` DCNL :param attributes: Either a list containing attribute names which will cause DCNL all values associated with that attribute name to be deleted or DCNL a dict or Item containing the attribute names and keys and list DCNL of values to delete as the value.  If no value is supplied, DCNL all attribute name/values for the item will be deleted. DCNL :type expected_value: list DCNL :param expected_value: If supplied, this is a list or tuple consisting DCNL of a single attribute name and expected value. The list can be of DCNL the form: DCNL * [\'name\', \'value\'] DCNL In which case the call will first verify that the attribute "name" DCNL of this item has a value of "value".  If it does, the delete DCNL will proceed, otherwise a ConditionalCheckFailed error will be DCNL returned. The list can also be of the form: DCNL * [\'name\', True|False] DCNL which will simply check for the existence (True) or DCNL non-existence (False) of the attribute. DCNL :rtype: bool DCNL :return: True if successful'
def batch_delete_attributes(self, items): DCNL 'Delete multiple items in this domain. DCNL :type items: dict or dict-like object DCNL :param items: A dictionary-like object.  The keys of the dictionary are DCNL the item names and the values are either: DCNL * dictionaries of attribute names/values, exactly the DCNL same as the attribute_names parameter of the scalar DCNL put_attributes call.  The attribute name/value pairs DCNL will only be deleted if they match the name/value DCNL pairs passed in. DCNL * None which means that all attributes associated DCNL with the item should be deleted. DCNL :rtype: bool DCNL :return: True if successful'
def select(self, query='', next_token=None, consistent_read=False, max_items=None): DCNL 'Returns a set of Attributes for item names within domain_name that match the query. DCNL The query must be expressed in using the SELECT style syntax rather than the DCNL original SimpleDB query language. DCNL :type query: string DCNL :param query: The SimpleDB query to be performed. DCNL :rtype: iter DCNL :return: An iterator containing the results.  This is actually a generator DCNL function that will iterate across all search results, not just the DCNL first page.'
def get_item(self, item_name, consistent_read=False): DCNL 'Retrieves an item from the domain, along with all of its attributes. DCNL :param string item_name: The name of the item to retrieve. DCNL :rtype: :class:`boto.sdb.item.Item` or ``None`` DCNL :keyword bool consistent_read: When set to true, ensures that the most DCNL recent data is returned. DCNL :return: The requested item, or ``None`` if there was no match found'
def to_xml(self, f=None): DCNL 'Get this domain as an XML DOM Document DCNL :param f: Optional File to dump directly to DCNL :type f: File or Stream DCNL :return: File object where the XML has been dumped to DCNL :rtype: file'
def from_xml(self, doc): DCNL 'Load this domain based on an XML document'
def delete(self): DCNL 'Delete this domain, and all items under it'
def __init__(self, sequence_string, rollover=False): DCNL 'Create a new SequenceGenerator using the sequence_string DCNL as how to generate the next item. DCNL :param sequence_string: The string or list that explains DCNL how to generate the next item in the sequence DCNL :type sequence_string: str,iterable DCNL :param rollover: Rollover instead of incrementing when DCNL we hit the end of the sequence DCNL :type rollover: bool'
def __call__(self, val, last=None): DCNL 'Get the next value in the sequence'
def _inc(self, val): DCNL 'Increment a single value'
def __init__(self, id=None, domain_name=None, fnc=increment_by_one, init_val=None): DCNL 'Create a new Sequence, using an optional function to DCNL increment to the next number, by default we just increment by one. DCNL Every parameter here is optional, if you don\'t specify any options DCNL then you\'ll get a new SequenceGenerator with a random ID stored in the DCNL default domain that increments by one and uses the default botoweb DCNL environment DCNL :param id: Optional ID (name) for this counter DCNL :type id: str DCNL :param domain_name: Optional domain name to use, by default we get this out of the DCNL environment configuration DCNL :type domain_name:str DCNL :param fnc: Optional function to use for the incrementation, by default we just increment by one DCNL There are several functions defined in this module. DCNL Your function must accept "None" to get the initial value DCNL :type fnc: function, str DCNL :param init_val: Initial value, by default this is the first element in your sequence, DCNL but you can pass in any value, even a string if you pass in a function that uses DCNL strings instead of ints to increment'
def set(self, val): DCNL 'Set the value'
def get(self): DCNL 'Get the value'
def _connect(self): DCNL 'Connect to our domain'
def delete(self): DCNL 'Remove this sequence'
def fetch(self, limit, offset=0): DCNL 'Not currently fully supported, but we can use this DCNL to allow them to set a limit in a chainable method'
def put(self, expected_value=None): DCNL 'Save this object as it is, with an optional expected value DCNL :param expected_value: Optional tuple of Attribute, and Value that DCNL must be the same in order to save this object. If this DCNL condition is not met, an SDBResponseError will be raised with a DCNL Confict status code. DCNL :type expected_value: tuple or list DCNL :return: This object DCNL :rtype: :class:`boto.sdb.db.model.Model`'
def put_attributes(self, attrs): DCNL 'Save just these few attributes, not the whole object DCNL :param attrs: Attributes to save, key->value dict DCNL :type attrs: dict DCNL :return: self DCNL :rtype: :class:`boto.sdb.db.model.Model`'
def delete_attributes(self, attrs): DCNL 'Delete just these attributes, not the whole object. DCNL :param attrs: Attributes to save, as a list of string names DCNL :type attrs: list DCNL :return: self DCNL :rtype: :class:`boto.sdb.db.model.Model`'
@classmethod DCNL def find_subclass(cls, name): DCNL 'Find a subclass with a given name'
def __init__(self, verbose_name=None, name=None, default='', required=False, validator=None, choices=None, unique=False, hashfunc=None): DCNL 'The hashfunc parameter overrides the default hashfunc in boto.utils.Password. DCNL The remaining parameters are passed through to StringProperty.__init__'
def __set__(self, obj, value): DCNL 'Don\'t allow this object to be associated to itself DCNL This causes bad things to happen'
def __get__(self, model_instance, model_class): DCNL 'Fetches collection of model instances of this collection property.'
def __set__(self, model_instance, value): DCNL 'Not possible to set a new collection.'
def __set__(self, obj, value): DCNL 'Not possible to set a new AutoID.'
def __set__(self, obj, value): DCNL 'Override the set method to allow them to set the property to an instance of the item_type instead of requiring a list to be passed in'
def _make_request(self, method, url, post_data=None, body=None): DCNL 'Make a request on this connection'
def get_props_from_doc(self, cls, id, doc): DCNL 'Pull out the properties from this document DCNL Returns the class, the properties in a hash, and the id if provided as a tuple DCNL :return: (cls, props, id)'
def save_object(self, obj, expected_value=None): DCNL 'Marshal the object and do a PUT'
def unmarshal_props(self, fp, cls=None, id=None): DCNL 'Same as unmarshalling an object, except it returns DCNL from "get_props_from_doc"'
def decode_map_element(self, item_type, value): DCNL 'Decode a single element for a map'
def encode_float(self, value): DCNL 'See http://tools.ietf.org/html/draft-wood-ldapext-float-00.'
def decode_datetime(self, value): DCNL 'Handles both Dates and DateTime objects'
def decode_time(self, value): DCNL 'converts strings in the form of HH:MM:SS.mmmmmm DCNL (created by datetime.time.isoformat()) to DCNL datetime.time objects. DCNL Timzone-aware strings ("HH:MM:SS.mmmmmm+HH:MM") won\'t DCNL be handled right now and will raise TimeDecodeError.'
def encode_string(self, value): DCNL 'Convert ASCII, Latin-1 or UTF-8 to pure Unicode'
def decode_string(self, value): DCNL 'Decoding a string is really nothing, just DCNL return the value as-is'
def count(self, cls, filters, quick=True, sort_by=None, select=None): DCNL 'Get the number of results that would DCNL be returned in this query'
def _build_filter_part(self, cls, filters, order_by=None, select=None): DCNL 'Build the filter part'
def _get_all_decendents(self, cls): DCNL 'Get all decendents for a given class'
def __init__(self, domain, name='', active=False): DCNL ':type domain: :py:class:`boto.sdb.domain.Domain` DCNL :param domain: The domain that this item belongs to. DCNL :param str name: The name of this item. This name will be used when DCNL querying for items using methods like DCNL :py:meth:`boto.sdb.domain.Domain.get_item`'
def load(self): DCNL 'Loads or re-loads this item\'s attributes from SDB. DCNL .. warning:: DCNL If you have changed attribute values on an Item instance, DCNL this method will over-write the values if they are different in DCNL SDB. For any local attributes that don\'t yet exist in SDB, DCNL they will be safe.'
def save(self, replace=True): DCNL 'Saves this item to SDB. DCNL :param bool replace: If ``True``, delete any attributes on the remote DCNL SDB item that have a ``None`` value on this object.'
def add_value(self, key, value): DCNL 'Helps set or add to attributes on this item. If you are adding a new DCNL attribute that has yet to be set, it will simply create an attribute DCNL named ``key`` with your given ``value`` as its value. If you are DCNL adding a value to an existing attribute, this method will convert the DCNL attribute to a list (if it isn\'t already) and append your new value DCNL to said list. DCNL For clarification, consider the following interactive session: DCNL .. code-block:: python DCNL >>> item = some_domain.get_item(\'some_item\') DCNL >>> item.has_key(\'some_attr\') DCNL False DCNL >>> item.add_value(\'some_attr\', 1) DCNL >>> item[\'some_attr\'] DCNL 1 DCNL >>> item.add_value(\'some_attr\', 2) DCNL >>> item[\'some_attr\'] DCNL [1, 2] DCNL :param str key: The attribute to add a value to. DCNL :param object value: The value to set or append to the attribute.'
def delete(self): DCNL 'Deletes this item in SDB. DCNL .. note:: This local Python object remains in its current state DCNL after deletion, this only deletes the remote item in SDB.'
def __init__(self, name, domain_name, item_names): DCNL ':param str name: A thread name. Used for identification. DCNL :param str domain_name: The name of a SimpleDB DCNL :class:`Domain <boto.sdb.domain.Domain>` DCNL :type item_names: string or list of strings DCNL :param item_names: The name(s) of the items to retrieve from the specified DCNL :class:`Domain <boto.sdb.domain.Domain>`. DCNL :ivar list items: A list of items retrieved. Starts as empty list.'
def run(self): DCNL 'Start the threaded retrieval of items. Populates the DCNL ``items`` list with :class:`Item <boto.sdb.item.Item>` objects.'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', converter=None, security_token=None, validate_certs=True, profile_name=None): DCNL 'For any keywords that aren\'t documented, refer to the parent class, DCNL :py:class:`boto.connection.AWSAuthConnection`. You can avoid having DCNL to worry about these keyword arguments by instantiating these objects DCNL via :py:func:`boto.connect_sdb`. DCNL :type region: :class:`boto.sdb.regioninfo.SDBRegionInfo` DCNL :keyword region: Explicitly specify a region. Defaults to ``us-east-1`` DCNL if not specified. You may also specify the region in your ``boto.cfg``: DCNL .. code-block:: cfg DCNL [SDB] DCNL region = eu-west-1'
def set_item_cls(self, cls): DCNL 'While the default item class is :py:class:`boto.sdb.item.Item`, this DCNL default may be overridden. Use this method to change a connection\'s DCNL item class. DCNL :param object cls: The new class to set as this connection\'s item DCNL class. See the default item class for inspiration as to what your DCNL replacement should/could look like.'
def get_usage(self): DCNL 'Returns the BoxUsage (in USD) accumulated on this specific SDBConnection DCNL instance. DCNL .. tip:: This can be out of date, and should only be treated as a DCNL rough estimate. Also note that this estimate only applies to the DCNL requests made on this specific connection instance. It is by DCNL no means an account-wide estimate. DCNL :rtype: float DCNL :return: The accumulated BoxUsage of all requests made on the connection.'
def print_usage(self): DCNL 'Print the BoxUsage and approximate costs of all requests made on DCNL this specific SDBConnection instance. DCNL .. tip:: This can be out of date, and should only be treated as a DCNL rough estimate. Also note that this estimate only applies to the DCNL requests made on this specific connection instance. It is by DCNL no means an account-wide estimate.'
def get_domain(self, domain_name, validate=True): DCNL 'Retrieves a :py:class:`boto.sdb.domain.Domain` object whose name DCNL matches ``domain_name``. DCNL :param str domain_name: The name of the domain to retrieve DCNL :keyword bool validate: When ``True``, check to see if the domain DCNL actually exists. If ``False``, blindly return a DCNL :py:class:`Domain <boto.sdb.domain.Domain>` object with the DCNL specified name set. DCNL :raises: DCNL :py:class:`boto.exception.SDBResponseError` if ``validate`` is DCNL ``True`` and no match could be found. DCNL :rtype: :py:class:`boto.sdb.domain.Domain` DCNL :return: The requested domain'
def lookup(self, domain_name, validate=True): DCNL 'Lookup an existing SimpleDB domain. This differs from DCNL :py:meth:`get_domain` in that ``None`` is returned if ``validate`` is DCNL ``True`` and no match was found (instead of raising an exception). DCNL :param str domain_name: The name of the domain to retrieve DCNL :param bool validate: If ``True``, a ``None`` value will be returned DCNL if the specified domain can\'t be found. If ``False``, a DCNL :py:class:`Domain <boto.sdb.domain.Domain>` object will be dumbly DCNL returned, regardless of whether it actually exists. DCNL :rtype: :class:`boto.sdb.domain.Domain` object or ``None`` DCNL :return: The Domain object or ``None`` if the domain does not exist.'
def get_all_domains(self, max_domains=None, next_token=None): DCNL 'Returns a :py:class:`boto.resultset.ResultSet` containing DCNL all :py:class:`boto.sdb.domain.Domain` objects associated with DCNL this connection\'s Access Key ID. DCNL :keyword int max_domains: Limit the returned DCNL :py:class:`ResultSet <boto.resultset.ResultSet>` to the specified DCNL number of members. DCNL :keyword str next_token: A token string that was returned in an DCNL earlier call to this method as the ``next_token`` attribute DCNL on the returned :py:class:`ResultSet <boto.resultset.ResultSet>` DCNL object. This attribute is set if there are more than Domains than DCNL the value specified in the ``max_domains`` keyword. Pass the DCNL ``next_token`` value from you earlier query in this keyword to DCNL get the next \'page\' of domains.'
def create_domain(self, domain_name): DCNL 'Create a SimpleDB domain. DCNL :type domain_name: string DCNL :param domain_name: The name of the new domain DCNL :rtype: :class:`boto.sdb.domain.Domain` object DCNL :return: The newly created domain'
def get_domain_and_name(self, domain_or_name): DCNL 'Given a ``str`` or :class:`boto.sdb.domain.Domain`, return a DCNL ``tuple`` with the following members (in order): DCNL * In instance of :class:`boto.sdb.domain.Domain` for the requested DCNL domain DCNL * The domain\'s name as a ``str`` DCNL :type domain_or_name: ``str`` or :class:`boto.sdb.domain.Domain` DCNL :param domain_or_name: The domain or domain name to get the domain DCNL and name for. DCNL :raises: :class:`boto.exception.SDBResponseError` when an invalid DCNL domain name is specified. DCNL :rtype: tuple DCNL :return: A ``tuple`` with contents outlined as per above.'
def delete_domain(self, domain_or_name): DCNL 'Delete a SimpleDB domain. DCNL .. caution:: This will delete the domain and all items within the domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :rtype: bool DCNL :return: True if successful'
def domain_metadata(self, domain_or_name): DCNL 'Get the Metadata for a SimpleDB domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :rtype: :class:`boto.sdb.domain.DomainMetaData` object DCNL :return: The newly created domain metadata object'
def put_attributes(self, domain_or_name, item_name, attributes, replace=True, expected_value=None): DCNL 'Store attributes for a given item in a domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are being DCNL stored. DCNL :type attribute_names: dict or dict-like object DCNL :param attribute_names: The name/value pairs to store as attributes DCNL :type expected_value: list DCNL :param expected_value: If supplied, this is a list or tuple consisting DCNL of a single attribute name and expected value. The list can be DCNL of the form: DCNL * [\'name\', \'value\'] DCNL In which case the call will first verify that the attribute "name" DCNL of this item has a value of "value".  If it does, the delete DCNL will proceed, otherwise a ConditionalCheckFailed error will be DCNL returned. The list can also be of the form: DCNL * [\'name\', True|False] DCNL which will simply check for the existence (True) or DCNL non-existence (False) of the attribute. DCNL :type replace: bool DCNL :param replace: Whether the attribute values passed in will replace DCNL existing values or will be added as addition values. DCNL Defaults to True. DCNL :rtype: bool DCNL :return: True if successful'
def batch_put_attributes(self, domain_or_name, items, replace=True): DCNL 'Store attributes for multiple items in a domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type items: dict or dict-like object DCNL :param items: A dictionary-like object.  The keys of the dictionary are DCNL the item names and the values are themselves dictionaries DCNL of attribute names/values, exactly the same as the DCNL attribute_names parameter of the scalar put_attributes DCNL call. DCNL :type replace: bool DCNL :param replace: Whether the attribute values passed in will replace DCNL existing values or will be added as addition values. DCNL Defaults to True. DCNL :rtype: bool DCNL :return: True if successful'
def get_attributes(self, domain_or_name, item_name, attribute_names=None, consistent_read=False, item=None): DCNL 'Retrieve attributes for a given item in a domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are DCNL being retrieved. DCNL :type attribute_names: string or list of strings DCNL :param attribute_names: An attribute name or list of attribute names. DCNL This parameter is optional.  If not supplied, all attributes will DCNL be retrieved for the item. DCNL :type consistent_read: bool DCNL :param consistent_read: When set to true, ensures that the most recent DCNL data is returned. DCNL :type item: :class:`boto.sdb.item.Item` DCNL :keyword item: Instead of instantiating a new Item object, you may DCNL specify one to update. DCNL :rtype: :class:`boto.sdb.item.Item` DCNL :return: An Item with the requested attribute name/values set on it'
def delete_attributes(self, domain_or_name, item_name, attr_names=None, expected_value=None): DCNL 'Delete attributes from a given item in a domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type item_name: string DCNL :param item_name: The name of the item whose attributes are being DCNL deleted. DCNL :type attributes: dict, list or :class:`boto.sdb.item.Item` DCNL :param attributes: Either a list containing attribute names which DCNL will cause all values associated with that attribute DCNL name to be deleted or a dict or Item containing the DCNL attribute names and keys and list of values to DCNL delete as the value.  If no value is supplied, DCNL all attribute name/values for the item will be DCNL deleted. DCNL :type expected_value: list DCNL :param expected_value: If supplied, this is a list or tuple consisting DCNL of a single attribute name and expected value. The list can be DCNL of the form: DCNL * [\'name\', \'value\'] DCNL In which case the call will first verify that the attribute "name" DCNL of this item has a value of "value".  If it does, the delete DCNL will proceed, otherwise a ConditionalCheckFailed error will be DCNL returned. The list can also be of the form: DCNL * [\'name\', True|False] DCNL which will simply check for the existence (True) or DCNL non-existence (False) of the attribute. DCNL :rtype: bool DCNL :return: True if successful'
def batch_delete_attributes(self, domain_or_name, items): DCNL 'Delete multiple items in a domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object. DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type items: dict or dict-like object DCNL :param items: A dictionary-like object.  The keys of the dictionary are DCNL the item names and the values are either: DCNL * dictionaries of attribute names/values, exactly the DCNL same as the attribute_names parameter of the scalar DCNL put_attributes call.  The attribute name/value pairs DCNL will only be deleted if they match the name/value DCNL pairs passed in. DCNL * None which means that all attributes associated DCNL with the item should be deleted. DCNL :return: True if successful'
def select(self, domain_or_name, query='', next_token=None, consistent_read=False): DCNL 'Returns a set of Attributes for item names within domain_name that DCNL match the query.  The query must be expressed in using the SELECT DCNL style syntax rather than the original SimpleDB query language. DCNL Even though the select request does not require a domain object, DCNL a domain object must be passed into this method so the Item objects DCNL returned can point to the appropriate domain. DCNL :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object DCNL :param domain_or_name: Either the name of a domain or a Domain object DCNL :type query: string DCNL :param query: The SimpleDB query to be performed. DCNL :type consistent_read: bool DCNL :param consistent_read: When set to true, ensures that the most recent DCNL data is returned. DCNL :rtype: ResultSet DCNL :return: An iterator containing the results.'
def __init__(self, host, cert, reason): DCNL 'Constructor. DCNL Args: DCNL host: The hostname the connection was made to. DCNL cert: The SSL certificate (as a dictionary) the host returned.'
def __init__(self, host, port=default_port, key_file=None, cert_file=None, ca_certs=None, strict=None, **kwargs): DCNL 'Constructor. DCNL Args: DCNL host: The hostname. Can be in \'host:port\' form. DCNL port: The port. Defaults to 443. DCNL key_file: A file containing the client\'s private key DCNL cert_file: A file containing the client\'s certificates DCNL ca_certs: A file contianing a set of concatenated certificate authority DCNL certs for validating the server against. DCNL strict: When true, causes BadStatusLine to be raised if the status line DCNL can\'t be parsed as a valid HTTP/1.0 or 1.1 status line.'
def connect(self): DCNL 'Connect to a host on a given (SSL) port.'
def _post_request(self, request, params, parser, body='', headers=None): DCNL 'Make a POST request, optionally with a content body, DCNL and return the response, optionally as raw text.'
def method_for(self, name): DCNL 'Return the MWS API method referred to in the argument. DCNL The named method can be in CamelCase or underlined_lower_case. DCNL This is the complement to MWSConnection.any_call.action'
def iter_call(self, call, *args, **kw): DCNL 'Pass a call name as the first argument and a generator DCNL is returned for the initial response and any continuation DCNL call responses made using the NextToken.'
def iter_response(self, response): DCNL 'Pass a call\'s response as the initial argument and a DCNL generator is returned for the initial response and any DCNL continuation call responses made using the NextToken.'
@requires(['FeedType']) DCNL @boolean_arguments('PurgeAndReplace') DCNL @http_body('FeedContent') DCNL @structured_lists('MarketplaceIdList.Id') DCNL @api_action('Feeds', 15, 120) DCNL def submit_feed(self, request, response, headers=None, body='', **kw): DCNL 'Uploads a feed for processing by Amazon MWS.'
@structured_lists('FeedSubmissionIdList.Id', 'FeedTypeList.Type', 'FeedProcessingStatusList.Status') DCNL @api_action('Feeds', 10, 45) DCNL def get_feed_submission_list(self, request, response, **kw): DCNL 'Returns a list of all feed submissions submitted in the DCNL previous 90 days.'
@requires(['NextToken']) DCNL @api_action('Feeds', 0, 0) DCNL def get_feed_submission_list_by_next_token(self, request, response, **kw): DCNL 'Returns a list of feed submissions using the NextToken parameter.'
@structured_lists('FeedTypeList.Type', 'FeedProcessingStatusList.Status') DCNL @api_action('Feeds', 10, 45) DCNL def get_feed_submission_count(self, request, response, **kw): DCNL 'Returns a count of the feeds submitted in the previous 90 days.'
@structured_lists('FeedSubmissionIdList.Id', 'FeedTypeList.Type') DCNL @api_action('Feeds', 10, 45) DCNL def cancel_feed_submissions(self, request, response, **kw): DCNL 'Cancels one or more feed submissions and returns a DCNL count of the feed submissions that were canceled.'
@requires(['FeedSubmissionId']) DCNL @api_action('Feeds', 15, 60) DCNL def get_feed_submission_result(self, request, response, **kw): DCNL 'Returns the feed processing report.'
def get_service_status(self, **kw): DCNL 'Instruct the user on how to get service status.'
@requires(['ReportType']) DCNL @structured_lists('MarketplaceIdList.Id') DCNL @boolean_arguments('ReportOptions=ShowSalesChannel') DCNL @api_action('Reports', 15, 60) DCNL def request_report(self, request, response, **kw): DCNL 'Creates a report request and submits the request to Amazon MWS.'
@structured_lists('ReportRequestIdList.Id', 'ReportTypeList.Type', 'ReportProcessingStatusList.Status') DCNL @api_action('Reports', 10, 45) DCNL def get_report_request_list(self, request, response, **kw): DCNL 'Returns a list of report requests that you can use to get the DCNL ReportRequestId for a report.'
@requires(['NextToken']) DCNL @api_action('Reports', 0, 0) DCNL def get_report_request_list_by_next_token(self, request, response, **kw): DCNL 'Returns a list of report requests using the NextToken, DCNL which was supplied by a previous request to either DCNL GetReportRequestListByNextToken or GetReportRequestList, where DCNL the value of HasNext was true in that previous request.'
@structured_lists('ReportTypeList.Type', 'ReportProcessingStatusList.Status') DCNL @api_action('Reports', 10, 45) DCNL def get_report_request_count(self, request, response, **kw): DCNL 'Returns a count of report requests that have been submitted DCNL to Amazon MWS for processing.'
@api_action('Reports', 10, 45) DCNL def cancel_report_requests(self, request, response, **kw): DCNL 'Cancel one or more report requests, returning the count of the DCNL canceled report requests and the report request information.'
@boolean_arguments('Acknowledged') DCNL @structured_lists('ReportRequestIdList.Id', 'ReportTypeList.Type') DCNL @api_action('Reports', 10, 60) DCNL def get_report_list(self, request, response, **kw): DCNL 'Returns a list of reports that were created in the previous DCNL 90 days that match the query parameters.'
@requires(['NextToken']) DCNL @api_action('Reports', 0, 0) DCNL def get_report_list_by_next_token(self, request, response, **kw): DCNL 'Returns a list of reports using the NextToken, which DCNL was supplied by a previous request to either DCNL GetReportListByNextToken or GetReportList, where the DCNL value of HasNext was true in the previous call.'
@boolean_arguments('Acknowledged') DCNL @structured_lists('ReportTypeList.Type') DCNL @api_action('Reports', 10, 45) DCNL def get_report_count(self, request, response, **kw): DCNL 'Returns a count of the reports, created in the previous 90 days, DCNL with a status of _DONE_ and that are available for download.'
@requires(['ReportId']) DCNL @api_action('Reports', 15, 60) DCNL def get_report(self, request, response, **kw): DCNL 'Returns the contents of a report.'
@requires(['ReportType', 'Schedule']) DCNL @api_action('Reports', 10, 45) DCNL def manage_report_schedule(self, request, response, **kw): DCNL 'Creates, updates, or deletes a report request schedule for DCNL a specified report type.'
@structured_lists('ReportTypeList.Type') DCNL @api_action('Reports', 10, 45) DCNL def get_report_schedule_list(self, request, response, **kw): DCNL 'Returns a list of order report requests that are scheduled DCNL to be submitted to Amazon MWS for processing.'
@requires(['NextToken']) DCNL @api_action('Reports', 0, 0) DCNL def get_report_schedule_list_by_next_token(self, request, response, **kw): DCNL 'Returns a list of report requests using the NextToken, DCNL which was supplied by a previous request to either DCNL GetReportScheduleListByNextToken or GetReportScheduleList, DCNL where the value of HasNext was true in that previous request.'
@structured_lists('ReportTypeList.Type') DCNL @api_action('Reports', 10, 45) DCNL def get_report_schedule_count(self, request, response, **kw): DCNL 'Returns a count of order report requests that are scheduled DCNL to be submitted to Amazon MWS.'
@requires(['ReportIdList']) DCNL @boolean_arguments('Acknowledged') DCNL @structured_lists('ReportIdList.Id') DCNL @api_action('Reports', 10, 45) DCNL def update_report_acknowledgements(self, request, response, **kw): DCNL 'Updates the acknowledged status of one or more reports.'
@requires(['ShipFromAddress', 'InboundShipmentPlanRequestItems']) DCNL @structured_objects('ShipFromAddress', 'InboundShipmentPlanRequestItems') DCNL @api_action('Inbound', 30, 0.5) DCNL def create_inbound_shipment_plan(self, request, response, **kw): DCNL 'Returns the information required to create an inbound shipment.'
@requires(['ShipmentId', 'InboundShipmentHeader', 'InboundShipmentItems']) DCNL @structured_objects('InboundShipmentHeader', 'InboundShipmentItems') DCNL @api_action('Inbound', 30, 0.5) DCNL def create_inbound_shipment(self, request, response, **kw): DCNL 'Creates an inbound shipment.'
@requires(['ShipmentId']) DCNL @structured_objects('InboundShipmentHeader', 'InboundShipmentItems') DCNL @api_action('Inbound', 30, 0.5) DCNL def update_inbound_shipment(self, request, response, **kw): DCNL 'Updates an existing inbound shipment.  Amazon documentation DCNL is ambiguous as to whether the InboundShipmentHeader and DCNL InboundShipmentItems arguments are required.'
@requires_some_of('ShipmentIdList', 'ShipmentStatusList') DCNL @structured_lists('ShipmentIdList.Id', 'ShipmentStatusList.Status') DCNL @api_action('Inbound', 30, 0.5) DCNL def list_inbound_shipments(self, request, response, **kw): DCNL 'Returns a list of inbound shipments based on criteria that DCNL you specify.'
@requires(['NextToken']) DCNL @api_action('Inbound', 30, 0.5) DCNL def list_inbound_shipments_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of inbound shipments using the NextToken DCNL parameter.'
@requires(['ShipmentId'], ['LastUpdatedAfter', 'LastUpdatedBefore']) DCNL @api_action('Inbound', 30, 0.5) DCNL def list_inbound_shipment_items(self, request, response, **kw): DCNL 'Returns a list of items in a specified inbound shipment, or a DCNL list of items that were updated within a specified time frame.'
@requires(['NextToken']) DCNL @api_action('Inbound', 30, 0.5) DCNL def list_inbound_shipment_items_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of inbound shipment items using the DCNL NextToken parameter.'
@api_action('Inbound', 2, 300, 'GetServiceStatus') DCNL def get_inbound_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Fulfillment Inbound DCNL Shipment API section.'
@requires(['SellerSkus'], ['QueryStartDateTime']) DCNL @structured_lists('SellerSkus.member') DCNL @api_action('Inventory', 30, 0.5) DCNL def list_inventory_supply(self, request, response, **kw): DCNL 'Returns information about the availability of a seller\'s DCNL inventory.'
@requires(['NextToken']) DCNL @api_action('Inventory', 30, 0.5) DCNL def list_inventory_supply_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of information about the availability DCNL of a seller\'s inventory using the NextToken parameter.'
@api_action('Inventory', 2, 300, 'GetServiceStatus') DCNL def get_inventory_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Fulfillment Inventory DCNL API section.'
@requires(['PackageNumber']) DCNL @api_action('Outbound', 30, 0.5) DCNL def get_package_tracking_details(self, request, response, **kw): DCNL 'Returns delivery tracking information for a package in DCNL an outbound shipment for a Multi-Channel Fulfillment order.'
@requires(['Address', 'Items']) DCNL @structured_objects('Address', 'Items') DCNL @api_action('Outbound', 30, 0.5) DCNL def get_fulfillment_preview(self, request, response, **kw): DCNL 'Returns a list of fulfillment order previews based on items DCNL and shipping speed categories that you specify.'
@requires(['SellerFulfillmentOrderId', 'DisplayableOrderId', 'ShippingSpeedCategory', 'DisplayableOrderDateTime', 'DestinationAddress', 'DisplayableOrderComment', 'Items']) DCNL @structured_objects('DestinationAddress', 'Items') DCNL @api_action('Outbound', 30, 0.5) DCNL def create_fulfillment_order(self, request, response, **kw): DCNL 'Requests that Amazon ship items from the seller\'s inventory DCNL to a destination address.'
@requires(['SellerFulfillmentOrderId']) DCNL @api_action('Outbound', 30, 0.5) DCNL def get_fulfillment_order(self, request, response, **kw): DCNL 'Returns a fulfillment order based on a specified DCNL SellerFulfillmentOrderId.'
@api_action('Outbound', 30, 0.5) DCNL def list_all_fulfillment_orders(self, request, response, **kw): DCNL 'Returns a list of fulfillment orders fulfilled after (or DCNL at) a specified date or by fulfillment method.'
@requires(['NextToken']) DCNL @api_action('Outbound', 30, 0.5) DCNL def list_all_fulfillment_orders_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of inbound shipment items using the DCNL NextToken parameter.'
@requires(['SellerFulfillmentOrderId']) DCNL @api_action('Outbound', 30, 0.5) DCNL def cancel_fulfillment_order(self, request, response, **kw): DCNL 'Requests that Amazon stop attempting to fulfill an existing DCNL fulfillment order.'
@api_action('Outbound', 2, 300, 'GetServiceStatus') DCNL def get_outbound_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Fulfillment Outbound DCNL API section.'
@requires(['CreatedAfter'], ['LastUpdatedAfter']) DCNL @requires(['MarketplaceId']) DCNL @exclusive(['CreatedAfter'], ['LastUpdatedAfter']) DCNL @dependent('CreatedBefore', ['CreatedAfter']) DCNL @exclusive(['LastUpdatedAfter'], ['BuyerEmail'], ['SellerOrderId']) DCNL @dependent('LastUpdatedBefore', ['LastUpdatedAfter']) DCNL @exclusive(['CreatedAfter'], ['LastUpdatedBefore']) DCNL @structured_objects('OrderTotal', 'ShippingAddress', 'PaymentExecutionDetail') DCNL @structured_lists('MarketplaceId.Id', 'OrderStatus.Status', 'FulfillmentChannel.Channel', 'PaymentMethod.') DCNL @api_action('Orders', 6, 60) DCNL def list_orders(self, request, response, **kw): DCNL 'Returns a list of orders created or updated during a time DCNL frame that you specify.'
@requires(['NextToken']) DCNL @api_action('Orders', 6, 60) DCNL def list_orders_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of orders using the NextToken value DCNL that was returned by your previous request to either DCNL ListOrders or ListOrdersByNextToken.'
@requires(['AmazonOrderId']) DCNL @structured_lists('AmazonOrderId.Id') DCNL @api_action('Orders', 6, 60) DCNL def get_order(self, request, response, **kw): DCNL 'Returns an order for each AmazonOrderId that you specify.'
@requires(['AmazonOrderId']) DCNL @api_action('Orders', 30, 2) DCNL def list_order_items(self, request, response, **kw): DCNL 'Returns order item information for an AmazonOrderId that DCNL you specify.'
@requires(['NextToken']) DCNL @api_action('Orders', 30, 2) DCNL def list_order_items_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of order items using the NextToken DCNL value that was returned by your previous request to either DCNL ListOrderItems or ListOrderItemsByNextToken.'
@api_action('Orders', 2, 300, 'GetServiceStatus') DCNL def get_orders_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Orders API section.'
@requires(['MarketplaceId', 'Query']) DCNL @api_action('Products', 20, 20) DCNL def list_matching_products(self, request, response, **kw): DCNL 'Returns a list of products and their attributes, ordered DCNL by relevancy, based on a search query that you specify.'
@requires(['MarketplaceId', 'ASINList']) DCNL @structured_lists('ASINList.ASIN') DCNL @api_action('Products', 20, 20) DCNL def get_matching_product(self, request, response, **kw): DCNL 'Returns a list of products and their attributes, based on DCNL a list of ASIN values that you specify.'
@requires(['MarketplaceId', 'IdType', 'IdList']) DCNL @structured_lists('IdList.Id') DCNL @api_action('Products', 20, 20) DCNL def get_matching_product_for_id(self, request, response, **kw): DCNL 'Returns a list of products and their attributes, based on DCNL a list of Product IDs that you specify.'
@requires(['MarketplaceId', 'SellerSKUList']) DCNL @structured_lists('SellerSKUList.SellerSKU') DCNL @api_action('Products', 20, 10, 'GetCompetitivePricingForSKU') DCNL def get_competitive_pricing_for_sku(self, request, response, **kw): DCNL 'Returns the current competitive pricing of a product, DCNL based on the SellerSKUs and MarketplaceId that you specify.'
@requires(['MarketplaceId', 'ASINList']) DCNL @structured_lists('ASINList.ASIN') DCNL @api_action('Products', 20, 10, 'GetCompetitivePricingForASIN') DCNL def get_competitive_pricing_for_asin(self, request, response, **kw): DCNL 'Returns the current competitive pricing of a product, DCNL based on the ASINs and MarketplaceId that you specify.'
@requires(['MarketplaceId', 'SellerSKUList']) DCNL @structured_lists('SellerSKUList.SellerSKU') DCNL @api_action('Products', 20, 5, 'GetLowestOfferListingsForSKU') DCNL def get_lowest_offer_listings_for_sku(self, request, response, **kw): DCNL 'Returns the lowest price offer listings for a specific DCNL product by item condition and SellerSKUs.'
@requires(['MarketplaceId', 'ASINList']) DCNL @structured_lists('ASINList.ASIN') DCNL @api_action('Products', 20, 5, 'GetLowestOfferListingsForASIN') DCNL def get_lowest_offer_listings_for_asin(self, request, response, **kw): DCNL 'Returns the lowest price offer listings for a specific DCNL product by item condition and ASINs.'
@requires(['MarketplaceId', 'SellerSKU']) DCNL @api_action('Products', 20, 20, 'GetProductCategoriesForSKU') DCNL def get_product_categories_for_sku(self, request, response, **kw): DCNL 'Returns the product categories that a SellerSKU belongs to.'
@requires(['MarketplaceId', 'ASIN']) DCNL @api_action('Products', 20, 20, 'GetProductCategoriesForASIN') DCNL def get_product_categories_for_asin(self, request, response, **kw): DCNL 'Returns the product categories that an ASIN belongs to.'
@api_action('Products', 2, 300, 'GetServiceStatus') DCNL def get_products_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Products API section.'
@requires(['MarketplaceId', 'SellerSKUList']) DCNL @structured_lists('SellerSKUList.SellerSKU') DCNL @api_action('Products', 20, 10, 'GetMyPriceForSKU') DCNL def get_my_price_for_sku(self, request, response, **kw): DCNL 'Returns pricing information for your own offer listings, based on SellerSKU.'
@requires(['MarketplaceId', 'ASINList']) DCNL @structured_lists('ASINList.ASIN') DCNL @api_action('Products', 20, 10, 'GetMyPriceForASIN') DCNL def get_my_price_for_asin(self, request, response, **kw): DCNL 'Returns pricing information for your own offer listings, based on ASIN.'
@api_action('Sellers', 15, 60) DCNL def list_marketplace_participations(self, request, response, **kw): DCNL 'Returns a list of marketplaces that the seller submitting DCNL the request can sell in, and a list of participations that DCNL include seller-specific information in that marketplace.'
@requires(['NextToken']) DCNL @api_action('Sellers', 15, 60) DCNL def list_marketplace_participations_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of marketplaces and participations DCNL using the NextToken value that was returned by your DCNL previous request to either ListMarketplaceParticipations DCNL or ListMarketplaceParticipationsByNextToken.'
@requires(['MarketplaceId']) DCNL @api_action('Recommendations', 5, 2) DCNL def get_last_updated_time_for_recommendations(self, request, response, **kw): DCNL 'Checks whether there are active recommendations for each category DCNL for the given marketplace, and if there are, returns the time when DCNL recommendations were last updated for each category.'
@requires(['MarketplaceId']) DCNL @structured_lists('CategoryQueryList.CategoryQuery') DCNL @api_action('Recommendations', 5, 2) DCNL def list_recommendations(self, request, response, **kw): DCNL 'Returns your active recommendations for a specific category or for DCNL all categories for a specific marketplace.'
@requires(['NextToken']) DCNL @api_action('Recommendations', 5, 2) DCNL def list_recommendations_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of recommendations using the NextToken DCNL parameter.'
@api_action('Recommendations', 2, 300, 'GetServiceStatus') DCNL def get_recommendations_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Recommendations API section.'
@api_action('CustomerInfo', 15, 12) DCNL def list_customers(self, request, response, **kw): DCNL 'Returns a list of customer accounts based on search criteria that DCNL you specify.'
@requires(['NextToken']) DCNL @api_action('CustomerInfo', 50, 3) DCNL def list_customers_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of customers using the NextToken parameter.'
@requires(['CustomerIdList']) DCNL @structured_lists('CustomerIdList.CustomerId') DCNL @api_action('CustomerInfo', 15, 12) DCNL def get_customers_for_customer_id(self, request, response, **kw): DCNL 'Returns a list of customer accounts based on search criteria that DCNL you specify.'
@api_action('CustomerInfo', 2, 300, 'GetServiceStatus') DCNL def get_customerinfo_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Customer Information API DCNL section.'
@requires(['DateRangeStart']) DCNL @api_action('CartInfo', 15, 12) DCNL def list_carts(self, request, response, **kw): DCNL 'Returns a list of shopping carts in your Webstore that were last DCNL updated during the time range that you specify.'
@requires(['NextToken']) DCNL @api_action('CartInfo', 50, 3) DCNL def list_carts_by_next_token(self, request, response, **kw): DCNL 'Returns the next page of shopping carts using the NextToken DCNL parameter.'
@requires(['CartIdList']) DCNL @structured_lists('CartIdList.CartId') DCNL @api_action('CartInfo', 15, 12) DCNL def get_carts(self, request, response, **kw): DCNL 'Returns shopping carts based on the CartId values that you specify.'
@api_action('CartInfo', 2, 300, 'GetServiceStatus') DCNL def get_cartinfo_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Cart Information API section.'
@requires(['MarketplaceId', 'Destination']) DCNL @structured_objects('Destination', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def register_destination(self, request, response, **kw): DCNL 'Specifies a new destination where you want to receive notifications.'
@requires(['MarketplaceId', 'Destination']) DCNL @structured_objects('Destination', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def deregister_destination(self, request, response, **kw): DCNL 'Removes an existing destination from the list of registered DCNL destinations.'
@requires(['MarketplaceId']) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def list_registered_destinations(self, request, response, **kw): DCNL 'Lists all current destinations that you have registered.'
@requires(['MarketplaceId', 'Destination']) DCNL @structured_objects('Destination', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def send_test_notification_to_destination(self, request, response, **kw): DCNL 'Sends a test notification to an existing destination.'
@requires(['MarketplaceId', 'Subscription']) DCNL @structured_objects('Subscription', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def create_subscription(self, request, response, **kw): DCNL 'Creates a new subscription for the specified notification type DCNL and destination.'
@requires(['MarketplaceId', 'NotificationType', 'Destination']) DCNL @structured_objects('Destination', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def get_subscription(self, request, response, **kw): DCNL 'Gets the subscription for the specified notification type and DCNL destination.'
@requires(['MarketplaceId', 'NotificationType', 'Destination']) DCNL @structured_objects('Destination', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def delete_subscription(self, request, response, **kw): DCNL 'Deletes the subscription for the specified notification type and DCNL destination.'
@requires(['MarketplaceId']) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def list_subscriptions(self, request, response, **kw): DCNL 'Returns a list of all your current subscriptions.'
@requires(['MarketplaceId', 'Subscription']) DCNL @structured_objects('Subscription', members=True) DCNL @api_action('Subscriptions', 25, 0.5) DCNL def update_subscription(self, request, response, **kw): DCNL 'Updates the subscription for the specified notification type and DCNL destination.'
@api_action('Subscriptions', 2, 300, 'GetServiceStatus') DCNL def get_subscriptions_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Subscriptions API section.'
@requires(['AmazonOrderReferenceId', 'OrderReferenceAttributes']) DCNL @structured_objects('OrderReferenceAttributes') DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def set_order_reference_details(self, request, response, **kw): DCNL 'Sets order reference details such as the order total and a DCNL description for the order.'
@requires(['AmazonOrderReferenceId']) DCNL @api_action('OffAmazonPayments', 20, 2) DCNL def get_order_reference_details(self, request, response, **kw): DCNL 'Returns details about the Order Reference object and its current DCNL state.'
@requires(['AmazonOrderReferenceId']) DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def confirm_order_reference(self, request, response, **kw): DCNL 'Confirms that the order reference is free of constraints and all DCNL required information has been set on the order reference.'
@requires(['AmazonOrderReferenceId']) DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def cancel_order_reference(self, request, response, **kw): DCNL 'Cancel an order reference; all authorizations associated with DCNL this order reference are also closed.'
@requires(['AmazonOrderReferenceId']) DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def close_order_reference(self, request, response, **kw): DCNL 'Confirms that an order reference has been fulfilled (fully DCNL or partially) and that you do not expect to create any new DCNL authorizations on this order reference.'
@requires(['AmazonOrderReferenceId', 'AuthorizationReferenceId', 'AuthorizationAmount']) DCNL @structured_objects('AuthorizationAmount') DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def authorize(self, request, response, **kw): DCNL 'Reserves a specified amount against the payment method(s) stored in DCNL the order reference.'
@requires(['AmazonAuthorizationId']) DCNL @api_action('OffAmazonPayments', 20, 2) DCNL def get_authorization_details(self, request, response, **kw): DCNL 'Returns the status of a particular authorization and the total DCNL amount captured on the authorization.'
@requires(['AmazonAuthorizationId', 'CaptureReferenceId', 'CaptureAmount']) DCNL @structured_objects('CaptureAmount') DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def capture(self, request, response, **kw): DCNL 'Captures funds from an authorized payment instrument.'
@requires(['AmazonCaptureId']) DCNL @api_action('OffAmazonPayments', 20, 2) DCNL def get_capture_details(self, request, response, **kw): DCNL 'Returns the status of a particular capture and the total amount DCNL refunded on the capture.'
@requires(['AmazonAuthorizationId']) DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def close_authorization(self, request, response, **kw): DCNL 'Closes an authorization.'
@requires(['AmazonCaptureId', 'RefundReferenceId', 'RefundAmount']) DCNL @structured_objects('RefundAmount') DCNL @api_action('OffAmazonPayments', 10, 1) DCNL def refund(self, request, response, **kw): DCNL 'Refunds a previously captured amount.'
@requires(['AmazonRefundId']) DCNL @api_action('OffAmazonPayments', 20, 2) DCNL def get_refund_details(self, request, response, **kw): DCNL 'Returns the status of a particular refund.'
@api_action('OffAmazonPayments', 2, 300, 'GetServiceStatus') DCNL def get_offamazonpayments_service_status(self, request, response, **kw): DCNL 'Returns the operational status of the Off-Amazon Payments API DCNL section.'
def __init__(self, layer1, data): DCNL 'Constructor - Create a domain object from a layer1 and data params DCNL :type layer1: :class:`boto.cloudsearch2.layer1.Layer1` object DCNL :param layer1: A :class:`boto.cloudsearch2.layer1.Layer1` object DCNL which is used to perform operations on the domain.'
def delete(self): DCNL 'Delete this domain and all index data associated with it.'
def get_analysis_schemes(self): DCNL 'Return a list of Analysis Scheme objects.'
def get_availability_options(self): DCNL 'Return a :class:`boto.cloudsearch2.option.AvailabilityOptionsStatus` DCNL object representing the currently defined availability options for DCNL the domain. DCNL :return: OptionsStatus object DCNL :rtype: :class:`boto.cloudsearch2.option.AvailabilityOptionsStatus` DCNL object'
def get_scaling_options(self): DCNL 'Return a :class:`boto.cloudsearch2.option.ScalingParametersStatus` DCNL object representing the currently defined scaling options for the DCNL domain. DCNL :return: ScalingParametersStatus object DCNL :rtype: :class:`boto.cloudsearch2.option.ScalingParametersStatus` DCNL object'
def get_access_policies(self): DCNL 'Return a :class:`boto.cloudsearch2.option.ServicePoliciesStatus` DCNL object representing the currently defined access policies for the DCNL domain. DCNL :return: ServicePoliciesStatus object DCNL :rtype: :class:`boto.cloudsearch2.option.ServicePoliciesStatus` object'
def index_documents(self): DCNL 'Tells the search domain to start indexing its documents using DCNL the latest text processing options and IndexFields. This DCNL operation must be invoked to make options whose OptionStatus DCNL has OptionState of RequiresIndexDocuments visible in search DCNL results.'
def get_index_fields(self, field_names=None): DCNL 'Return a list of index fields defined for this domain. DCNL :return: list of IndexFieldStatus objects DCNL :rtype: list of :class:`boto.cloudsearch2.option.IndexFieldStatus` DCNL object'
def create_index_field(self, field_name, field_type, default='', facet=False, returnable=False, searchable=False, sortable=False, highlight=False, source_field=None, analysis_scheme=None): DCNL 'Defines an ``IndexField``, either replacing an existing DCNL definition or creating a new one. DCNL :type field_name: string DCNL :param field_name: The name of a field in the search index. DCNL :type field_type: string DCNL :param field_type: The type of field.  Valid values are DCNL int | double | literal | text | date | latlon | DCNL int-array | double-array | literal-array | text-array | date-array DCNL :type default: string or int DCNL :param default: The default value for the field.  If the DCNL field is of type ``int`` this should be an integer value. DCNL Otherwise, it\'s a string. DCNL :type facet: bool DCNL :param facet: A boolean to indicate whether facets DCNL are enabled for this field or not.  Does not apply to DCNL fields of type ``int, int-array, text, text-array``. DCNL :type returnable: bool DCNL :param returnable: A boolean to indicate whether values DCNL of this field can be returned in search results or DCNL used in ranking. DCNL :type searchable: bool DCNL :param searchable: A boolean to indicate whether search DCNL is enabled for this field or not. DCNL :type sortable: bool DCNL :param sortable: A boolean to indicate whether sorting DCNL is enabled for this field or not. Does not apply to DCNL fields of array types. DCNL :type highlight: bool DCNL :param highlight: A boolean to indicate whether highlighting DCNL is enabled for this field or not. Does not apply to DCNL fields of type ``double, int, date, latlon`` DCNL :type source_field: list of strings or string DCNL :param source_field: For array types, this is the list of fields DCNL to treat as the source. For singular types, pass a string only. DCNL :type analysis_scheme: string DCNL :param analysis_scheme: The analysis scheme to use for this field. DCNL Only applies to ``text | text-array`` field types DCNL :return: IndexFieldStatus objects DCNL :rtype: :class:`boto.cloudsearch2.option.IndexFieldStatus` object DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def get_expressions(self, names=None): DCNL 'Return a list of rank expressions defined for this domain. DCNL :return: list of ExpressionStatus objects DCNL :rtype: list of :class:`boto.cloudsearch2.option.ExpressionStatus` DCNL object'
def create_expression(self, name, value): DCNL 'Create a new expression. DCNL :type name: string DCNL :param name: The name of an expression for processing DCNL during a search request. DCNL :type value: string DCNL :param value: The expression to evaluate for ranking DCNL or thresholding while processing a search request. The DCNL Expression syntax is based on JavaScript expressions DCNL and supports: DCNL * Single value, sort enabled numeric fields (int, double, date) DCNL * Other expressions DCNL * The _score variable, which references a document\'s relevance DCNL score DCNL * The _time variable, which references the current epoch time DCNL * Integer, floating point, hex, and octal literals DCNL * Arithmetic operators: + - * / % DCNL * Bitwise operators: | & ^ ~ << >> >>> DCNL * Boolean operators (including the ternary operator): && || ! ?: DCNL * Comparison operators: < <= == >= > DCNL * Mathematical functions: abs ceil exp floor ln log2 log10 logn DCNL max min pow sqrt pow DCNL * Trigonometric functions: acos acosh asin asinh atan atan2 atanh DCNL cos cosh sin sinh tanh tan DCNL * The haversin distance function DCNL Expressions always return an integer value from 0 to the maximum DCNL 64-bit signed integer value (2^63 - 1). Intermediate results are DCNL calculated as double-precision floating point values and the return DCNL value is rounded to the nearest integer. If the expression is DCNL invalid or evaluates to a negative value, it returns 0. If the DCNL expression evaluates to a value greater than the maximum, it DCNL returns the maximum value. DCNL The source data for an Expression can be the name of an DCNL IndexField of type int or double, another Expression or the DCNL reserved name _score. The _score source is DCNL defined to return as a double from 0 to 10.0 (inclusive) to DCNL indicate how relevant a document is to the search request, DCNL taking into account repetition of search terms in the DCNL document and proximity of search terms to each other in DCNL each matching IndexField in the document. DCNL For more information about using rank expressions to DCNL customize ranking, see the Amazon CloudSearch Developer DCNL Guide. DCNL :return: ExpressionStatus object DCNL :rtype: :class:`boto.cloudsearch2.option.ExpressionStatus` object DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def next_page(self): DCNL 'Call Cloudsearch to get the next page of search results DCNL :rtype: :class:`boto.cloudsearch2.search.SearchResults` DCNL :return: the following page of search results'
def to_params(self): DCNL 'Transform search parameters from instance properties to a dictionary DCNL :rtype: dict DCNL :return: search parameters'
def to_domain_connection_params(self): DCNL 'Transform search parameters from instance properties to a dictionary DCNL that CloudSearchDomainConnection can accept DCNL :rtype: dict DCNL :return: search parameters'
def search(self, q=None, parser=None, fq=None, rank=None, return_fields=None, size=10, start=0, facet=None, highlight=None, sort=None, partial=None, options=None): DCNL 'Send a query to CloudSearch DCNL Each search query should use at least the q or bq argument to specify DCNL the search parameter. The other options are used to specify the DCNL criteria of the search. DCNL :type q: string DCNL :param q: A string to search the default search fields for. DCNL :type parser: string DCNL :param parser: The parser to use. \'simple\', \'structured\', \'lucene\', \'dismax\' DCNL :type fq: string DCNL :param fq: The filter query to use. DCNL :type sort: List of strings DCNL :param sort: A list of fields or rank expressions used to order the DCNL search results. Order is handled by adding \'desc\' or \'asc\' after the field name. DCNL ``[\'year desc\', \'author asc\']`` DCNL :type return_fields: List of strings DCNL :param return_fields: A list of fields which should be returned by the DCNL search. If this field is not specified, only IDs will be returned. DCNL ``[\'headline\']`` DCNL :type size: int DCNL :param size: Number of search results to specify DCNL :type start: int DCNL :param start: Offset of the first search result to return (can be used DCNL for paging) DCNL :type facet: dict DCNL :param facet: Dictionary of fields for which facets should be returned DCNL The facet value is string of JSON options DCNL ``{\'year\': \'{sort:"bucket", size:3}\', \'genres\': \'{buckets:["Action","Adventure","Sci-Fi"]}\'}`` DCNL :type highlight: dict DCNL :param highlight: Dictionary of fields for which highlights should be returned DCNL The facet value is string of JSON options DCNL ``{\'genres\': \'{format:\'text\',max_phrases:2,pre_tag:\'<b>\',post_tag:\'</b>\'}\'}`` DCNL :type partial: bool DCNL :param partial: Should partial results from a partioned service be returned if DCNL one or more index partitions are unreachable. DCNL :type options: str DCNL :param options: Options for the query parser specified in *parser*. DCNL Specified as a string in JSON format. DCNL ``{fields: [\'title^5\', \'description\']}`` DCNL :rtype: :class:`boto.cloudsearch2.search.SearchResults` DCNL :return: Returns the results of this search DCNL The following examples all assume we have indexed a set of documents DCNL with fields: *author*, *date*, *headline* DCNL A simple search will look for documents whose default text search DCNL fields will contain the search word exactly: DCNL >>> search(q=\'Tim\') # Return documents with the word Tim in them (but not Timothy) DCNL A simple search with more keywords will return documents whose default DCNL text search fields contain the search strings together or separately. DCNL >>> search(q=\'Tim apple\') # Will match "tim" and "apple" DCNL More complex searches require the boolean search operator. DCNL Wildcard searches can be used to search for any words that start with DCNL the search string. DCNL >>> search(q="\'Tim*\'") # Return documents with words like Tim or Timothy) DCNL Search terms can also be combined. Allowed operators are "and", "or", DCNL "not", "field", "optional", "token", "phrase", or "filter" DCNL >>> search(q="(and \'Tim\' (field author \'John Smith\'))", parser=\'structured\') DCNL Facets allow you to show classification information about the search DCNL results. For example, you can retrieve the authors who have written DCNL about Tim with a max of 3 DCNL >>> search(q=\'Tim\', facet={\'Author\': \'{sort:"bucket", size:3}\'})'
def __call__(self, query): DCNL 'Make a call to CloudSearch DCNL :type query: :class:`boto.cloudsearch2.search.Query` DCNL :param query: A group of search criteria DCNL :rtype: :class:`boto.cloudsearch2.search.SearchResults` DCNL :return: search results'
def get_all_paged(self, query, per_page): DCNL 'Get a generator to iterate over all pages of search results DCNL :type query: :class:`boto.cloudsearch2.search.Query` DCNL :param query: A group of search criteria DCNL :type per_page: int DCNL :param per_page: Number of docs in each :class:`boto.cloudsearch2.search.SearchResults` object. DCNL :rtype: generator DCNL :return: Generator containing :class:`boto.cloudsearch2.search.SearchResults`'
def get_all_hits(self, query): DCNL 'Get a generator to iterate over all search results DCNL Transparently handles the results paging from Cloudsearch DCNL search results so even if you have many thousands of results DCNL you can iterate over all results in a reasonably efficient DCNL manner. DCNL :type query: :class:`boto.cloudsearch2.search.Query` DCNL :param query: A group of search criteria DCNL :rtype: generator DCNL :return: All docs matching query'
def get_num_hits(self, query): DCNL 'Return the total number of hits for query DCNL :type query: :class:`boto.cloudsearch2.search.Query` DCNL :param query: a group of search criteria DCNL :rtype: int DCNL :return: Total number of hits for query'
def build_suggesters(self, domain_name): DCNL 'Indexes the search suggestions. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen).'
def create_domain(self, domain_name): DCNL 'Creates a new search domain. For more information, see DCNL `Creating a Search Domain`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A name for the domain you are creating. Allowed DCNL characters are a-z (lower-case letters), 0-9, and hyphen (-). DCNL Domain names must start with a letter or number and be at least 3 DCNL and no more than 28 characters long.'
def define_analysis_scheme(self, domain_name, analysis_scheme): DCNL 'Configures an analysis scheme that can be applied to a `text` DCNL or `text-array` field to define language-specific text DCNL processing options. For more information, see `Configuring DCNL Analysis Schemes`_ in the Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type analysis_scheme: dict DCNL :param analysis_scheme: Configuration information for an analysis DCNL scheme. Each analysis scheme has a unique name and specifies the DCNL language of the text to be processed. The following options can be DCNL configured for an analysis scheme: `Synonyms`, `Stopwords`, DCNL `StemmingDictionary`, and `AlgorithmicStemming`.'
def define_expression(self, domain_name, expression): DCNL 'Configures an `Expression` for the search domain. Used to DCNL create new expressions and modify existing ones. If the DCNL expression exists, the new configuration replaces the old one. DCNL For more information, see `Configuring Expressions`_ in the DCNL Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type expression: dict DCNL :param expression: A named expression that can be evaluated at search DCNL time. Can be used to sort the search results, define other DCNL expressions, or return computed information in the search results.'
def define_index_field(self, domain_name, index_field): DCNL 'Configures an `IndexField` for the search domain. Used to DCNL create new fields and modify existing ones. You must specify DCNL the name of the domain you are configuring and an index field DCNL configuration. The index field configuration specifies a DCNL unique name, the index field type, and the options you want to DCNL configure for the field. The options you can specify depend on DCNL the `IndexFieldType`. If the field exists, the new DCNL configuration replaces the old one. For more information, see DCNL `Configuring Index Fields`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type index_field: dict DCNL :param index_field: The index field and field options you want to DCNL configure.'
def define_suggester(self, domain_name, suggester): DCNL 'Configures a suggester for a domain. A suggester enables you DCNL to display possible matches before users finish typing their DCNL queries. When you configure a suggester, you must specify the DCNL name of the text field you want to search for possible matches DCNL and a unique name for the suggester. For more information, see DCNL `Getting Search Suggestions`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type suggester: dict DCNL :param suggester: Configuration information for a search suggester. DCNL Each suggester has a unique name and specifies the text field you DCNL want to use for suggestions. The following options can be DCNL configured for a suggester: `FuzzyMatching`, `SortExpression`.'
def delete_analysis_scheme(self, domain_name, analysis_scheme_name): DCNL 'Deletes an analysis scheme. For more information, see DCNL `Configuring Analysis Schemes`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type analysis_scheme_name: string DCNL :param analysis_scheme_name: The name of the analysis scheme you want DCNL to delete.'
def delete_domain(self, domain_name): DCNL 'Permanently deletes a search domain and all of its data. Once DCNL a domain has been deleted, it cannot be recovered. For more DCNL information, see `Deleting a Search Domain`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to permanently DCNL delete.'
def delete_expression(self, domain_name, expression_name): DCNL 'Removes an `Expression` from the search domain. For more DCNL information, see `Configuring Expressions`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type expression_name: string DCNL :param expression_name: The name of the `Expression` to delete.'
def delete_index_field(self, domain_name, index_field_name): DCNL 'Removes an `IndexField` from the search domain. For more DCNL information, see `Configuring Index Fields`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type index_field_name: string DCNL :param index_field_name: The name of the index field your want to DCNL remove from the domain\'s indexing options.'
def delete_suggester(self, domain_name, suggester_name): DCNL 'Deletes a suggester. For more information, see `Getting Search DCNL Suggestions`_ in the Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type suggester_name: string DCNL :param suggester_name: Specifies the name of the suggester you want to DCNL delete.'
def describe_analysis_schemes(self, domain_name, analysis_scheme_names=None, deployed=None): DCNL 'Gets the analysis schemes configured for a domain. An analysis DCNL scheme defines language-specific text processing options for a DCNL `text` field. Can be limited to specific analysis schemes by DCNL name. By default, shows all analysis schemes and includes any DCNL pending changes to the configuration. Set the `Deployed` DCNL option to `True` to show the active configuration and exclude DCNL pending changes. For more information, see `Configuring DCNL Analysis Schemes`_ in the Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type analysis_scheme_names: list DCNL :param analysis_scheme_names: The analysis schemes you want to DCNL describe. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def describe_availability_options(self, domain_name, deployed=None): DCNL 'Gets the availability options configured for a domain. By DCNL default, shows the configuration with any pending changes. Set DCNL the `Deployed` option to `True` to show the active DCNL configuration and exclude pending changes. For more DCNL information, see `Configuring Availability Options`_ in the DCNL Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def describe_domains(self, domain_names=None): DCNL 'Gets information about the search domains owned by this DCNL account. Can be limited to specific domains. Shows all domains DCNL by default. To get the number of searchable documents in a DCNL domain, use the console or submit a `matchall` request to your DCNL domain\'s search endpoint: DCNL `q=matchall&q.parser=structured&size=0`. For more information, DCNL see `Getting Information about a Search Domain`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_names: list DCNL :param domain_names: The names of the domains you want to include in DCNL the response.'
def describe_expressions(self, domain_name, expression_names=None, deployed=None): DCNL 'Gets the expressions configured for the search domain. Can be DCNL limited to specific expressions by name. By default, shows all DCNL expressions and includes any pending changes to the DCNL configuration. Set the `Deployed` option to `True` to show the DCNL active configuration and exclude pending changes. For more DCNL information, see `Configuring Expressions`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type expression_names: list DCNL :param expression_names: Limits the `DescribeExpressions` response to DCNL the specified expressions. If not specified, all expressions are DCNL shown. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def describe_index_fields(self, domain_name, field_names=None, deployed=None): DCNL 'Gets information about the index fields configured for the DCNL search domain. Can be limited to specific fields by name. By DCNL default, shows all fields and includes any pending changes to DCNL the configuration. Set the `Deployed` option to `True` to show DCNL the active configuration and exclude pending changes. For more DCNL information, see `Getting Domain Information`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type field_names: list DCNL :param field_names: A list of the index fields you want to describe. If DCNL not specified, information is returned for all configured index DCNL fields. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def describe_scaling_parameters(self, domain_name): DCNL 'Gets the scaling parameters configured for a domain. A DCNL domain\'s scaling parameters specify the desired search DCNL instance type and replication count. For more information, see DCNL `Configuring Scaling Options`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen).'
def describe_service_access_policies(self, domain_name, deployed=None): DCNL 'Gets information about the access policies that control access DCNL to the domain\'s document and search endpoints. By default, DCNL shows the configuration with any pending changes. Set the DCNL `Deployed` option to `True` to show the active configuration DCNL and exclude pending changes. For more information, see DCNL `Configuring Access for a Search Domain`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def describe_suggesters(self, domain_name, suggester_names=None, deployed=None): DCNL 'Gets the suggesters configured for a domain. A suggester DCNL enables you to display possible matches before users finish DCNL typing their queries. Can be limited to specific suggesters by DCNL name. By default, shows all suggesters and includes any DCNL pending changes to the configuration. Set the `Deployed` DCNL option to `True` to show the active configuration and exclude DCNL pending changes. For more information, see `Getting Search DCNL Suggestions`_ in the Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: The name of the domain you want to describe. DCNL :type suggester_names: list DCNL :param suggester_names: The suggesters you want to describe. DCNL :type deployed: boolean DCNL :param deployed: Whether to display the deployed configuration ( DCNL `True`) or include any pending changes ( `False`). Defaults to DCNL `False`.'
def index_documents(self, domain_name): DCNL 'Tells the search domain to start indexing its documents using DCNL the latest indexing options. This operation must be invoked to DCNL activate options whose OptionStatus is DCNL `RequiresIndexDocuments`. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen).'
def list_domain_names(self): DCNL 'Lists all search domains owned by an account.'
def update_availability_options(self, domain_name, multi_az): DCNL 'Configures the availability options for a domain. Enabling the DCNL Multi-AZ option expands an Amazon CloudSearch domain to an DCNL additional Availability Zone in the same Region to increase DCNL fault tolerance in the event of a service disruption. Changes DCNL to the Multi-AZ option can take about half an hour to become DCNL active. For more information, see `Configuring Availability DCNL Options`_ in the Amazon CloudSearch Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type multi_az: boolean DCNL :param multi_az: You expand an existing search domain to a second DCNL Availability Zone by setting the Multi-AZ option to true. DCNL Similarly, you can turn off the Multi-AZ option to downgrade the DCNL domain to a single Availability Zone by setting the Multi-AZ option DCNL to `False`.'
def update_scaling_parameters(self, domain_name, scaling_parameters): DCNL 'Configures scaling parameters for a domain. A domain\'s scaling DCNL parameters specify the desired search instance type and DCNL replication count. Amazon CloudSearch will still automatically DCNL scale your domain based on the volume of data and traffic, but DCNL not below the desired instance type and replication count. If DCNL the Multi-AZ option is enabled, these values control the DCNL resources used per Availability Zone. For more information, DCNL see `Configuring Scaling Options`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type scaling_parameters: dict DCNL :param scaling_parameters: The desired instance type and desired number DCNL of replicas of each index partition.'
def update_service_access_policies(self, domain_name, access_policies): DCNL 'Configures the access rules that control access to the DCNL domain\'s document and search endpoints. For more information, DCNL see ` Configuring Access for an Amazon CloudSearch Domain`_. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a domain. DCNL Domain names are unique across the domains owned by an account DCNL within an AWS region. Domain names start with a letter or number DCNL and can contain the following characters: a-z (lowercase), 0-9, and DCNL - (hyphen). DCNL :type access_policies: string DCNL :param access_policies: The access rules you want to configure. These DCNL rules replace any existing rules.'
def build_complex_param(self, params, label, value): DCNL 'Serialize a structure. DCNL For example:: DCNL param_type = \'structure\' DCNL label = \'IndexField\' DCNL value = {\'IndexFieldName\': \'a\', \'IntOptions\': {\'DefaultValue\': 5}} DCNL would result in the params dict being updated with these params:: DCNL IndexField.IndexFieldName = a DCNL IndexField.IntOptions.DefaultValue = 5 DCNL :type params: dict DCNL :param params: The params dict.  The complex list params DCNL will be added to this dict. DCNL :type label: str DCNL :param label: String label for param key DCNL :type value: any DCNL :param value: The value to serialize'
def refresh(self, data=None): DCNL 'Refresh the local state of the object.  You can either pass DCNL new state data in as the parameter ``data`` or, if that parameter DCNL is omitted, the state data will be retrieved from CloudSearch.'
def to_json(self): DCNL 'Return the JSON representation of the options as a string.'
def save(self): DCNL 'Write the current state of the local object back to the DCNL CloudSearch service.'
def new_statement(self, arn, ip): DCNL 'Returns a new policy statement that will allow DCNL access to the service described by ``arn`` by the DCNL ip specified in ``ip``. DCNL :type arn: string DCNL :param arn: The Amazon Resource Notation identifier for the DCNL service you wish to provide access to.  This would be DCNL either the search service or the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def allow_search_ip(self, ip): DCNL 'Add the provided ip address or CIDR block to the list of DCNL allowable address for the search service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def allow_doc_ip(self, ip): DCNL 'Add the provided ip address or CIDR block to the list of DCNL allowable address for the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def disallow_search_ip(self, ip): DCNL 'Remove the provided ip address or CIDR block from the list of DCNL allowable address for the search service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def disallow_doc_ip(self, ip): DCNL 'Remove the provided ip address or CIDR block from the list of DCNL allowable address for the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def add(self, _id, fields): DCNL 'Add a document to be processed by the DocumentService DCNL The document will not actually be added until :func:`commit` is called DCNL :type _id: string DCNL :param _id: A unique ID used to refer to this document. DCNL :type fields: dict DCNL :param fields: A dictionary of key-value pairs to be uploaded .'
def delete(self, _id): DCNL 'Schedule a document to be removed from the CloudSearch service DCNL The document will not actually be scheduled for removal until DCNL :func:`commit` is called DCNL :type _id: string DCNL :param _id: The unique ID of this document.'
def get_sdf(self): DCNL 'Generate the working set of documents in Search Data Format (SDF) DCNL :rtype: string DCNL :returns: JSON-formatted string of the documents in SDF'
def clear_sdf(self): DCNL 'Clear the working documents from this DocumentServiceConnection DCNL This should be used after :func:`commit` if the connection will be DCNL reused for another set of documents.'
def add_sdf_from_s3(self, key_obj): DCNL 'Load an SDF from S3 DCNL Using this method will result in documents added through DCNL :func:`add` and :func:`delete` being ignored. DCNL :type key_obj: :class:`boto.s3.key.Key` DCNL :param key_obj: An S3 key which contains an SDF'
def commit(self): DCNL 'Actually send an SDF to CloudSearch for processing DCNL If an SDF file has been explicitly loaded it will be used. Otherwise, DCNL documents added through :func:`add` and :func:`delete` will be used. DCNL :rtype: :class:`CommitResponse` DCNL :returns: A summary of documents added and deleted'
def _check_num_ops(self, type_, response_num): DCNL 'Raise exception if number of ops in response doesn\'t match commit DCNL :type type_: str DCNL :param type_: Type of commit operation: \'add\' or \'delete\' DCNL :type response_num: int DCNL :param response_num: Number of adds or deletes in the response. DCNL :raises: :class:`boto.cloudsearch2.document.CommitMismatchError`'
def list_domains(self, domain_names=None): DCNL 'Return a list of objects for each domain defined in the DCNL current account. DCNL :rtype: list of :class:`boto.cloudsearch2.domain.Domain`'
def create_domain(self, domain_name): DCNL 'Create a new CloudSearch domain and return the corresponding object. DCNL :return: Domain object, or None if the domain isn\'t found DCNL :rtype: :class:`boto.cloudsearch2.domain.Domain`'
def lookup(self, domain_name): DCNL 'Lookup a single domain DCNL :param domain_name: The name of the domain to look up DCNL :type domain_name: str DCNL :return: Domain object, or None if the domain isn\'t found DCNL :rtype: :class:`boto.cloudsearch2.domain.Domain`'
def __init__(self, connection=None): DCNL ':type connection: :class:`boto.ec2.EC2Connection` DCNL :param connection: Optional connection.'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', security_token=None, validate_certs=True, profile_name=None): DCNL 'Init method to create a new connection to EC2 Monitoring Service. DCNL B{Note:} The host argument is overridden by the host specified in the DCNL boto configuration file.'
def get_metric_statistics(self, period, start_time, end_time, metric_name, namespace, statistics, dimensions=None, unit=None): DCNL 'Get time-series data for one or more statistics of a given metric. DCNL :type period: integer DCNL :param period: The granularity, in seconds, of the returned datapoints. DCNL Period must be at least 60 seconds and must be a multiple DCNL of 60. The default value is 60. DCNL :type start_time: datetime DCNL :param start_time: The time stamp to use for determining the DCNL first datapoint to return. The value specified is DCNL inclusive; results include datapoints with the time stamp DCNL specified. DCNL :type end_time: datetime DCNL :param end_time: The time stamp to use for determining the DCNL last datapoint to return. The value specified is DCNL exclusive; results will include datapoints up to the time DCNL stamp specified. DCNL :type metric_name: string DCNL :param metric_name: The metric name. DCNL :type namespace: string DCNL :param namespace: The metric\'s namespace. DCNL :type statistics: list DCNL :param statistics: A list of statistics names Valid values: DCNL Average | Sum | SampleCount | Maximum | Minimum DCNL :type dimensions: dict DCNL :param dimensions: A dictionary of dimension key/values where DCNL the key is the dimension name and the value DCNL is either a scalar value or an iterator DCNL of values to be associated with that DCNL dimension. DCNL :type unit: string DCNL :param unit: The unit for the metric.  Value values are: DCNL Seconds | Microseconds | Milliseconds | Bytes | Kilobytes | DCNL Megabytes | Gigabytes | Terabytes | Bits | Kilobits | DCNL Megabits | Gigabits | Terabits | Percent | Count | DCNL Bytes/Second | Kilobytes/Second | Megabytes/Second | DCNL Gigabytes/Second | Terabytes/Second | Bits/Second | DCNL Kilobits/Second | Megabits/Second | Gigabits/Second | DCNL Terabits/Second | Count/Second | None DCNL :rtype: list'
def list_metrics(self, next_token=None, dimensions=None, metric_name=None, namespace=None): DCNL 'Returns a list of the valid metrics for which there is recorded DCNL data available. DCNL :type next_token: str DCNL :param next_token: A maximum of 500 metrics will be returned DCNL at one time.  If more results are available, the ResultSet DCNL returned will contain a non-Null next_token attribute. DCNL Passing that token as a parameter to list_metrics will DCNL retrieve the next page of metrics. DCNL :type dimensions: dict DCNL :param dimensions: A dictionary containing name/value DCNL pairs that will be used to filter the results.  The key in DCNL the dictionary is the name of a Dimension.  The value in DCNL the dictionary is either a scalar value of that Dimension DCNL name that you want to filter on or None if you want all DCNL metrics with that Dimension name.  To be included in the DCNL result a metric must contain all specified dimensions, DCNL although the metric may contain additional dimensions beyond DCNL the requested metrics.  The Dimension names, and values must DCNL be strings between 1 and 250 characters long. A maximum of DCNL 10 dimensions are allowed. DCNL :type metric_name: str DCNL :param metric_name: The name of the Metric to filter against.  If None, DCNL all Metric names will be returned. DCNL :type namespace: str DCNL :param namespace: A Metric namespace to filter against (e.g. AWS/EC2). DCNL If None, Metrics from all namespaces will be returned.'
def put_metric_data(self, namespace, name, value=None, timestamp=None, unit=None, dimensions=None, statistics=None): DCNL 'Publishes metric data points to Amazon CloudWatch. Amazon Cloudwatch DCNL associates the data points with the specified metric. If the specified DCNL metric does not exist, Amazon CloudWatch creates the metric. If a list DCNL is specified for some, but not all, of the arguments, the remaining DCNL arguments are repeated a corresponding number of times. DCNL :type namespace: str DCNL :param namespace: The namespace of the metric. DCNL :type name: str or list DCNL :param name: The name of the metric. DCNL :type value: float or list DCNL :param value: The value for the metric. DCNL :type timestamp: datetime or list DCNL :param timestamp: The time stamp used for the metric. If not specified, DCNL the default value is set to the time the metric data was received. DCNL :type unit: string or list DCNL :param unit: The unit of the metric.  Valid Values: Seconds | DCNL Microseconds | Milliseconds | Bytes | Kilobytes | DCNL Megabytes | Gigabytes | Terabytes | Bits | Kilobits | DCNL Megabits | Gigabits | Terabits | Percent | Count | DCNL Bytes/Second | Kilobytes/Second | Megabytes/Second | DCNL Gigabytes/Second | Terabytes/Second | Bits/Second | DCNL Kilobits/Second | Megabits/Second | Gigabits/Second | DCNL Terabits/Second | Count/Second | None DCNL :type dimensions: dict DCNL :param dimensions: Add extra name value pairs to associate DCNL with the metric, i.e.: DCNL {\'name1\': value1, \'name2\': (value2, value3)} DCNL :type statistics: dict or list DCNL :param statistics: Use a statistic set instead of a value, for example:: DCNL {\'maximum\': 30, \'minimum\': 1, \'samplecount\': 100, \'sum\': 10000}'
def describe_alarms(self, action_prefix=None, alarm_name_prefix=None, alarm_names=None, max_records=None, state_value=None, next_token=None): DCNL 'Retrieves alarms with the specified names. If no name is specified, all DCNL alarms for the user are returned. Alarms can be retrieved by using only DCNL a prefix for the alarm name, the alarm state, or a prefix for any DCNL action. DCNL :type action_prefix: string DCNL :param action_prefix: The action name prefix. DCNL :type alarm_name_prefix: string DCNL :param alarm_name_prefix: The alarm name prefix. AlarmNames cannot DCNL be specified if this parameter is specified. DCNL :type alarm_names: list DCNL :param alarm_names: A list of alarm names to retrieve information for. DCNL :type max_records: int DCNL :param max_records: The maximum number of alarm descriptions DCNL to retrieve. DCNL :type state_value: string DCNL :param state_value: The state value to be used in matching alarms. DCNL :type next_token: string DCNL :param next_token: The token returned by a previous call to DCNL indicate that there is more data. DCNL :rtype list'
def describe_alarm_history(self, alarm_name=None, start_date=None, end_date=None, max_records=None, history_item_type=None, next_token=None): DCNL 'Retrieves history for the specified alarm. Filter alarms by date range DCNL or item type. If an alarm name is not specified, Amazon CloudWatch DCNL returns histories for all of the owner\'s alarms. DCNL Amazon CloudWatch retains the history of deleted alarms for a period of DCNL six weeks. If an alarm has been deleted, its history can still be DCNL queried. DCNL :type alarm_name: string DCNL :param alarm_name: The name of the alarm. DCNL :type start_date: datetime DCNL :param start_date: The starting date to retrieve alarm history. DCNL :type end_date: datetime DCNL :param end_date: The starting date to retrieve alarm history. DCNL :type history_item_type: string DCNL :param history_item_type: The type of alarm histories to retreive DCNL (ConfigurationUpdate | StateUpdate | Action) DCNL :type max_records: int DCNL :param max_records: The maximum number of alarm descriptions DCNL to retrieve. DCNL :type next_token: string DCNL :param next_token: The token returned by a previous call to indicate DCNL that there is more data. DCNL :rtype list'
def describe_alarms_for_metric(self, metric_name, namespace, period=None, statistic=None, dimensions=None, unit=None): DCNL 'Retrieves all alarms for a single metric. Specify a statistic, period, DCNL or unit to filter the set of alarms further. DCNL :type metric_name: string DCNL :param metric_name: The name of the metric. DCNL :type namespace: string DCNL :param namespace: The namespace of the metric. DCNL :type period: int DCNL :param period: The period in seconds over which the statistic DCNL is applied. DCNL :type statistic: string DCNL :param statistic: The statistic for the metric. DCNL :type dimensions: dict DCNL :param dimensions: A dictionary containing name/value DCNL pairs that will be used to filter the results. The key in DCNL the dictionary is the name of a Dimension. The value in DCNL the dictionary is either a scalar value of that Dimension DCNL name that you want to filter on, a list of values to DCNL filter on or None if you want all metrics with that DCNL Dimension name. DCNL :type unit: string DCNL :rtype list'
def put_metric_alarm(self, alarm): DCNL 'Creates or updates an alarm and associates it with the specified Amazon DCNL CloudWatch metric. Optionally, this operation can associate one or more DCNL Amazon Simple Notification Service resources with the alarm. DCNL When this operation creates an alarm, the alarm state is immediately DCNL set to INSUFFICIENT_DATA. The alarm is evaluated and its StateValue is DCNL set appropriately. Any actions associated with the StateValue is then DCNL executed. DCNL When updating an existing alarm, its StateValue is left unchanged. DCNL :type alarm: boto.ec2.cloudwatch.alarm.MetricAlarm DCNL :param alarm: MetricAlarm object.'
def delete_alarms(self, alarms): DCNL 'Deletes all specified alarms. In the event of an error, no DCNL alarms are deleted. DCNL :type alarms: list DCNL :param alarms: List of alarm names.'
def set_alarm_state(self, alarm_name, state_reason, state_value, state_reason_data=None): DCNL 'Temporarily sets the state of an alarm. When the updated StateValue DCNL differs from the previous value, the action configured for the DCNL appropriate state is invoked. This is not a permanent change. The next DCNL periodic alarm check (in about a minute) will set the alarm to its DCNL actual state. DCNL :type alarm_name: string DCNL :param alarm_name: Descriptive name for alarm. DCNL :type state_reason: string DCNL :param state_reason: Human readable reason. DCNL :type state_value: string DCNL :param state_value: OK | ALARM | INSUFFICIENT_DATA DCNL :type state_reason_data: string DCNL :param state_reason_data: Reason string (will be jsonified).'
def enable_alarm_actions(self, alarm_names): DCNL 'Enables actions for the specified alarms. DCNL :type alarms: list DCNL :param alarms: List of alarm names.'
def disable_alarm_actions(self, alarm_names): DCNL 'Disables actions for the specified alarms. DCNL :type alarms: list DCNL :param alarms: List of alarm names.'
def __init__(self, connection=None): DCNL 'Parses a list of MetricAlarms.'
def __init__(self, connection=None, name=None, metric=None, namespace=None, statistic=None, comparison=None, threshold=None, period=None, evaluation_periods=None, unit=None, description='', dimensions=None, alarm_actions=None, insufficient_data_actions=None, ok_actions=None): DCNL 'Creates a new Alarm. DCNL :type name: str DCNL :param name: Name of alarm. DCNL :type metric: str DCNL :param metric: Name of alarm\'s associated metric. DCNL :type namespace: str DCNL :param namespace: The namespace for the alarm\'s metric. DCNL :type statistic: str DCNL :param statistic: The statistic to apply to the alarm\'s associated DCNL metric. DCNL Valid values: SampleCount|Average|Sum|Minimum|Maximum DCNL :type comparison: str DCNL :param comparison: Comparison used to compare statistic with threshold. DCNL Valid values: >= | > | < | <= DCNL :type threshold: float DCNL :param threshold: The value against which the specified statistic DCNL is compared. DCNL :type period: int DCNL :param period: The period in seconds over which the specified DCNL statistic is applied. DCNL :type evaluation_periods: int DCNL :param evaluation_periods: The number of periods over which data is DCNL compared to the specified threshold. DCNL :type unit: str DCNL :param unit: Allowed Values are: DCNL Seconds|Microseconds|Milliseconds, DCNL Bytes|Kilobytes|Megabytes|Gigabytes|Terabytes, DCNL Bits|Kilobits|Megabits|Gigabits|Terabits, DCNL Percent|Count| DCNL Bytes/Second|Kilobytes/Second|Megabytes/Second| DCNL Gigabytes/Second|Terabytes/Second, DCNL Bits/Second|Kilobits/Second|Megabits/Second, DCNL Gigabits/Second|Terabits/Second|Count/Second|None DCNL :type description: str DCNL :param description: Description of MetricAlarm DCNL :type dimensions: dict DCNL :param dimensions: A dictionary of dimension key/values where DCNL the key is the dimension name and the value DCNL is either a scalar value or an iterator DCNL of values to be associated with that DCNL dimension. DCNL Example: { DCNL \'InstanceId\': [\'i-0123456\', \'i-0123457\'], DCNL \'LoadBalancerName\': \'test-lb\' DCNL :type alarm_actions: list of strs DCNL :param alarm_actions: A list of the ARNs of the actions to take in DCNL ALARM state DCNL :type insufficient_data_actions: list of strs DCNL :param insufficient_data_actions: A list of the ARNs of the actions to DCNL take in INSUFFICIENT_DATA state DCNL :type ok_actions: list of strs DCNL :param ok_actions: A list of the ARNs of the actions to take in OK state'
def set_state(self, value, reason, data=None): DCNL 'Temporarily sets the state of an alarm. DCNL :type value: str DCNL :param value: OK | ALARM | INSUFFICIENT_DATA DCNL :type reason: str DCNL :param reason: Reason alarm set (human readable). DCNL :type data: str DCNL :param data: Reason data (will be jsonified).'
def add_alarm_action(self, action_arn=None): DCNL 'Adds an alarm action, represented as an SNS topic, to this alarm. DCNL What do do when alarm is triggered. DCNL :type action_arn: str DCNL :param action_arn: SNS topics to which notification should be DCNL sent if the alarm goes to state ALARM.'
def add_insufficient_data_action(self, action_arn=None): DCNL 'Adds an insufficient_data action, represented as an SNS topic, to DCNL this alarm. What to do when the insufficient_data state is reached. DCNL :type action_arn: str DCNL :param action_arn: SNS topics to which notification should be DCNL sent if the alarm goes to state INSUFFICIENT_DATA.'
def add_ok_action(self, action_arn=None): DCNL 'Adds an ok action, represented as an SNS topic, to this alarm. What DCNL to do when the ok state is reached. DCNL :type action_arn: str DCNL :param action_arn: SNS topics to which notification should be DCNL sent if the alarm goes to state INSUFFICIENT_DATA.'
def query(self, start_time, end_time, statistics, unit=None, period=60): DCNL ':type start_time: datetime DCNL :param start_time: The time stamp to use for determining the DCNL first datapoint to return. The value specified is DCNL inclusive; results include datapoints with the time stamp DCNL specified. DCNL :type end_time: datetime DCNL :param end_time: The time stamp to use for determining the DCNL last datapoint to return. The value specified is DCNL exclusive; results will include datapoints up to the time DCNL stamp specified. DCNL :type statistics: list DCNL :param statistics: A list of statistics names Valid values: DCNL Average | Sum | SampleCount | Maximum | Minimum DCNL :type unit: string DCNL :param unit: The unit for the metric.  Value values are: DCNL Seconds | Microseconds | Milliseconds | Bytes | Kilobytes | DCNL Megabytes | Gigabytes | Terabytes | Bits | Kilobits | DCNL Megabits | Gigabits | Terabits | Percent | Count | DCNL Bytes/Second | Kilobytes/Second | Megabytes/Second | DCNL Gigabytes/Second | Terabytes/Second | Bits/Second | DCNL Kilobits/Second | Megabits/Second | Gigabits/Second | DCNL Terabits/Second | Count/Second | None DCNL :type period: integer DCNL :param period: The granularity, in seconds, of the returned datapoints. DCNL Period must be at least 60 seconds and must be a multiple DCNL of 60. The default value is 60.'
def create_alarm(self, name, comparison, threshold, period, evaluation_periods, statistic, enabled=True, description=None, dimensions=None, alarm_actions=None, ok_actions=None, insufficient_data_actions=None, unit=None): DCNL 'Creates or updates an alarm and associates it with this metric. DCNL Optionally, this operation can associate one or more DCNL Amazon Simple Notification Service resources with the alarm. DCNL When this operation creates an alarm, the alarm state is immediately DCNL set to INSUFFICIENT_DATA. The alarm is evaluated and its StateValue is DCNL set appropriately. Any actions associated with the StateValue is then DCNL executed. DCNL When updating an existing alarm, its StateValue is left unchanged. DCNL :type alarm: boto.ec2.cloudwatch.alarm.MetricAlarm DCNL :param alarm: MetricAlarm object.'
def describe_alarms(self, period=None, statistic=None, dimensions=None, unit=None): DCNL 'Retrieves all alarms for this metric. Specify a statistic, period, DCNL or unit to filter the set of alarms further. DCNL :type period: int DCNL :param period: The period in seconds over which the statistic DCNL is applied. DCNL :type statistic: string DCNL :param statistic: The statistic for the metric. DCNL :type dimensions: dict DCNL :param dimension: A dictionary containing name/value DCNL pairs that will be used to filter the results. The key in DCNL the dictionary is the name of a Dimension. The value in DCNL the dictionary is either a scalar value of that Dimension DCNL name that you want to filter on, a list of values to DCNL filter on or None if you want all metrics with that DCNL Dimension name. DCNL :type unit: string DCNL :rtype list'
def delete(self, dry_run=False): DCNL 'Delete the KeyPair. DCNL :rtype: bool DCNL :return: True if successful, otherwise False.'
def save(self, directory_path): DCNL 'Save the material (the unencrypted PEM encoded RSA private key) DCNL of a newly created KeyPair to a local file. DCNL :type directory_path: string DCNL :param directory_path: The fully qualified path to the directory DCNL in which the keypair will be saved.  The DCNL keypair file will be named using the name DCNL of the keypair as the base name and .pem DCNL for the file extension.  If a file of that DCNL name already exists in the directory, an DCNL exception will be raised and the old file DCNL will not be overwritten. DCNL :rtype: bool DCNL :return: True if successful.'
def copy_to_region(self, region, dry_run=False): DCNL 'Create a new key pair of the same new in another region. DCNL Note that the new key pair will use a different ssh DCNL cert than the this key pair.  After doing the copy, DCNL you will need to save the material associated with the DCNL new key pair (use the save method) to a local file. DCNL :type region: :class:`boto.ec2.regioninfo.RegionInfo` DCNL :param region: The region to which this security group will be copied. DCNL :rtype: :class:`boto.ec2.keypair.KeyPair` DCNL :return: The new key pair'
def add_tag(self, key, value='', dry_run=False): DCNL 'Add a tag to this object.  Tags are stored by AWS and can be used DCNL to organize and filter resources.  Adding a tag involves a round-trip DCNL to the EC2 service. DCNL :type key: str DCNL :param key: The key or name of the tag being stored. DCNL :type value: str DCNL :param value: An optional value that can be stored with the tag. DCNL If you want only the tag name and no value, the DCNL value should be the empty string.'
def add_tags(self, tags, dry_run=False): DCNL 'Add tags to this object.  Tags are stored by AWS and can be used DCNL to organize and filter resources.  Adding tags involves a round-trip DCNL to the EC2 service. DCNL :type tags: dict DCNL :param tags: A dictionary of key-value pairs for the tags being stored. DCNL If for some tags you want only the name and no value, the DCNL corresponding value for that tag name should be an empty DCNL string.'
def remove_tag(self, key, value=None, dry_run=False): DCNL 'Remove a tag from this object.  Removing a tag involves a round-trip DCNL to the EC2 service. DCNL :type key: str DCNL :param key: The key or name of the tag being stored. DCNL :type value: str DCNL :param value: An optional value that can be stored with the tag. DCNL If a value is provided, it must match the value currently DCNL stored in EC2.  If not, the tag will not be removed.  If DCNL a value of None is provided, the tag will be DCNL unconditionally deleted. DCNL NOTE: There is an important distinction between a value DCNL of \'\' and a value of None.'
def remove_tags(self, tags, dry_run=False): DCNL 'Removes tags from this object.  Removing tags involves a round-trip DCNL to the EC2 service. DCNL :type tags: dict DCNL :param tags: A dictionary of key-value pairs for the tags being removed. DCNL For each key, the provided value must match the value DCNL currently stored in EC2.  If not, that particular tag will DCNL not be removed.  However, if a value of None is provided, DCNL the tag will be unconditionally deleted. DCNL NOTE: There is an important distinction between a value of DCNL \'\' and a value of None.'
def __init__(self, connection=None, name=None, launch_config=None, availability_zones=None, load_balancers=None, default_cooldown=None, health_check_type=None, health_check_period=None, placement_group=None, vpc_zone_identifier=None, desired_capacity=None, min_size=None, max_size=None, tags=None, termination_policies=None, instance_id=None, **kwargs): DCNL 'Creates a new AutoScalingGroup with the specified name. DCNL You must not have already used up your entire quota of DCNL AutoScalingGroups in order for this call to be successful. Once the DCNL creation request is completed, the AutoScalingGroup is ready to be DCNL used in other calls. DCNL :type name: str DCNL :param name: Name of autoscaling group (required). DCNL :type availability_zones: list DCNL :param availability_zones: List of availability zones (required). DCNL :type default_cooldown: int DCNL :param default_cooldown: Number of seconds after a Scaling Activity DCNL completes before any further scaling activities can start. DCNL :type desired_capacity: int DCNL :param desired_capacity: The desired capacity for the group. DCNL :type health_check_period: str DCNL :param health_check_period: Length of time in seconds after a new DCNL EC2 instance comes into service that Auto Scaling starts DCNL checking its health. DCNL :type health_check_type: str DCNL :param health_check_type: The service you want the health status from, DCNL Amazon EC2 or Elastic Load Balancer. DCNL :type launch_config: str or LaunchConfiguration DCNL :param launch_config: Name of launch configuration (required). DCNL :type load_balancers: list DCNL :param load_balancers: List of load balancers. DCNL :type max_size: int DCNL :param max_size: Maximum size of group (required). DCNL :type min_size: int DCNL :param min_size: Minimum size of group (required). DCNL :type placement_group: str DCNL :param placement_group: Physical location of your cluster placement DCNL group created in Amazon EC2. DCNL :type vpc_zone_identifier: str or list DCNL :param vpc_zone_identifier: A comma-separated string or python list of DCNL the subnet identifiers of the Virtual Private Cloud. DCNL :type tags: list DCNL :param tags: List of :class:`boto.ec2.autoscale.tag.Tag`s DCNL :type termination_policies: list DCNL :param termination_policies: A list of termination policies. Valid values DCNL are: "OldestInstance", "NewestInstance", "OldestLaunchConfiguration", DCNL "ClosestToNextInstanceHour", "Default".  If no value is specified, DCNL the "Default" value is used. DCNL :type instance_id: str DCNL :param instance_id: The ID of the Amazon EC2 instance you want to use DCNL to create the Auto Scaling group. DCNL :rtype: :class:`boto.ec2.autoscale.group.AutoScalingGroup` DCNL :return: An autoscale group.'
def set_capacity(self, capacity): DCNL 'Set the desired capacity for the group.'
def update(self): DCNL 'Sync local changes with AutoScaling group.'
def shutdown_instances(self): DCNL 'Convenience method which shuts down all instances associated with DCNL this group.'
def delete(self, force_delete=False): DCNL 'Delete this auto-scaling group if no instances attached or no DCNL scaling activities in progress.'
def get_activities(self, activity_ids=None, max_records=50): DCNL 'Get all activies for this group.'
def put_notification_configuration(self, topic, notification_types): DCNL 'Configures an Auto Scaling group to send notifications when DCNL specified events take place. Valid notification types are: DCNL \'autoscaling:EC2_INSTANCE_LAUNCH\', DCNL \'autoscaling:EC2_INSTANCE_LAUNCH_ERROR\', DCNL \'autoscaling:EC2_INSTANCE_TERMINATE\', DCNL \'autoscaling:EC2_INSTANCE_TERMINATE_ERROR\', DCNL \'autoscaling:TEST_NOTIFICATION\''
def delete_notification_configuration(self, topic): DCNL 'Deletes notifications created by put_notification_configuration.'
def suspend_processes(self, scaling_processes=None): DCNL 'Suspends Auto Scaling processes for an Auto Scaling group.'
def resume_processes(self, scaling_processes=None): DCNL 'Resumes Auto Scaling processes for an Auto Scaling group.'
def build_params(self, params, i): DCNL 'Populates a dictionary with the name/value pairs necessary DCNL to identify this Tag in a request.'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', security_token=None, validate_certs=True, profile_name=None, use_block_device_types=False): DCNL 'Init method to create a new connection to the AutoScaling service. DCNL B{Note:} The host argument is overridden by the host specified in the DCNL boto configuration file.'
def build_list_params(self, params, items, label): DCNL 'Items is a list of dictionaries or strings:: DCNL \'Protocol\' : \'HTTP\', DCNL \'LoadBalancerPort\' : \'80\', DCNL \'InstancePort\' : \'80\' DCNL ] etc. DCNL or:: DCNL [\'us-east-1b\',...]'
def attach_instances(self, name, instance_ids): DCNL 'Attach instances to an autoscaling group.'
def detach_instances(self, name, instance_ids, decrement_capacity=True): DCNL 'Detach instances from an Auto Scaling group. DCNL :type name: str DCNL :param name: The name of the Auto Scaling group from which to detach instances. DCNL :type instance_ids: list DCNL :param instance_ids: Instance ids to be detached from the Auto Scaling group. DCNL :type decrement_capacity: bool DCNL :param decrement_capacity: Whether to decrement the size of the DCNL Auto Scaling group or not.'
def create_auto_scaling_group(self, as_group): DCNL 'Create auto scaling group.'
def delete_auto_scaling_group(self, name, force_delete=False): DCNL 'Deletes the specified auto scaling group if the group has no instances DCNL and no scaling activities in progress.'
def create_launch_configuration(self, launch_config): DCNL 'Creates a new Launch Configuration. DCNL :type launch_config: :class:`boto.ec2.autoscale.launchconfig.LaunchConfiguration` DCNL :param launch_config: LaunchConfiguration object.'
def get_account_limits(self): DCNL 'Returns the limits for the Auto Scaling resources currently granted for DCNL your AWS account.'
def create_scaling_policy(self, scaling_policy): DCNL 'Creates a new Scaling Policy. DCNL :type scaling_policy: :class:`boto.ec2.autoscale.policy.ScalingPolicy` DCNL :param scaling_policy: ScalingPolicy object.'
def delete_launch_configuration(self, launch_config_name): DCNL 'Deletes the specified LaunchConfiguration. DCNL The specified launch configuration must not be attached to an Auto DCNL Scaling group. Once this call completes, the launch configuration is no DCNL longer available for use.'
def get_all_groups(self, names=None, max_records=None, next_token=None): DCNL 'Returns a full description of each Auto Scaling group in the given DCNL list. This includes all Amazon EC2 instances that are members of the DCNL group. If a list of names is not provided, the service returns the full DCNL details of all Auto Scaling groups. DCNL This action supports pagination by returning a token if there are more DCNL pages to retrieve. To get the next page, call this action again with DCNL the returned token as the NextToken parameter. DCNL :type names: list DCNL :param names: List of group names which should be searched for. DCNL :type max_records: int DCNL :param max_records: Maximum amount of groups to return. DCNL :rtype: list DCNL :returns: List of :class:`boto.ec2.autoscale.group.AutoScalingGroup` DCNL instances.'
def get_all_launch_configurations(self, **kwargs): DCNL 'Returns a full description of the launch configurations given the DCNL specified names. DCNL If no names are specified, then the full details of all launch DCNL configurations are returned. DCNL :type names: list DCNL :param names: List of configuration names which should be searched for. DCNL :type max_records: int DCNL :param max_records: Maximum amount of configurations to return. DCNL :type next_token: str DCNL :param next_token: If you have more results than can be returned DCNL at once, pass in this  parameter to page through all results. DCNL :rtype: list DCNL :returns: List of DCNL :class:`boto.ec2.autoscale.launchconfig.LaunchConfiguration` DCNL instances.'
def get_all_activities(self, autoscale_group, activity_ids=None, max_records=None, next_token=None): DCNL 'Get all activities for the given autoscaling group. DCNL This action supports pagination by returning a token if there are more DCNL pages to retrieve. To get the next page, call this action again with DCNL the returned token as the NextToken parameter DCNL :type autoscale_group: str or DCNL :class:`boto.ec2.autoscale.group.AutoScalingGroup` object DCNL :param autoscale_group: The auto scaling group to get activities on. DCNL :type max_records: int DCNL :param max_records: Maximum amount of activities to return. DCNL :rtype: list DCNL :returns: List of DCNL :class:`boto.ec2.autoscale.activity.Activity` instances.'
def get_termination_policies(self): DCNL 'Gets all valid termination policies. DCNL These values can then be used as the termination_policies arg DCNL when creating and updating autoscale groups.'
def delete_scheduled_action(self, scheduled_action_name, autoscale_group=None): DCNL 'Deletes a previously scheduled action. DCNL :type scheduled_action_name: str DCNL :param scheduled_action_name: The name of the action you want DCNL to delete. DCNL :type autoscale_group: str DCNL :param autoscale_group: The name of the autoscale group.'
def terminate_instance(self, instance_id, decrement_capacity=True): DCNL 'Terminates the specified instance. The desired group size can DCNL also be adjusted, if desired. DCNL :type instance_id: str DCNL :param instance_id: The ID of the instance to be terminated. DCNL :type decrement_capability: bool DCNL :param decrement_capacity: Whether to decrement the size of the DCNL autoscaling group or not.'
def delete_policy(self, policy_name, autoscale_group=None): DCNL 'Delete a policy. DCNL :type policy_name: str DCNL :param policy_name: The name or ARN of the policy to delete. DCNL :type autoscale_group: str DCNL :param autoscale_group: The name of the autoscale group.'
def get_all_autoscaling_instances(self, instance_ids=None, max_records=None, next_token=None): DCNL 'Returns a description of each Auto Scaling instance in the instance_ids DCNL list. If a list is not provided, the service returns the full details DCNL of all instances up to a maximum of fifty. DCNL This action supports pagination by returning a token if there are more DCNL pages to retrieve. To get the next page, call this action again with DCNL the returned token as the NextToken parameter. DCNL :type instance_ids: list DCNL :param instance_ids: List of Autoscaling Instance IDs which should be DCNL searched for. DCNL :type max_records: int DCNL :param max_records: Maximum number of results to return. DCNL :rtype: list DCNL :returns: List of DCNL :class:`boto.ec2.autoscale.instance.Instance` objects.'
def get_all_metric_collection_types(self): DCNL 'Returns a list of metrics and a corresponding list of granularities DCNL for each metric.'
def get_all_policies(self, as_group=None, policy_names=None, max_records=None, next_token=None): DCNL 'Returns descriptions of what each policy does. This action supports DCNL pagination. If the response includes a token, there are more records DCNL available. To get the additional records, repeat the request with the DCNL response token as the NextToken parameter. DCNL If no group name or list of policy names are provided, all DCNL available policies are returned. DCNL :type as_group: str DCNL :param as_group: The name of the DCNL :class:`boto.ec2.autoscale.group.AutoScalingGroup` to filter for. DCNL :type policy_names: list DCNL :param policy_names: List of policy names which should be searched for. DCNL :type max_records: int DCNL :param max_records: Maximum amount of groups to return. DCNL :type next_token: str DCNL :param next_token: If you have more results than can be returned DCNL at once, pass in this  parameter to page through all results.'
def get_all_scaling_process_types(self): DCNL 'Returns scaling process types for use in the ResumeProcesses and DCNL SuspendProcesses actions.'
def suspend_processes(self, as_group, scaling_processes=None): DCNL 'Suspends Auto Scaling processes for an Auto Scaling group. DCNL :type as_group: string DCNL :param as_group: The auto scaling group to suspend processes on. DCNL :type scaling_processes: list DCNL :param scaling_processes: Processes you want to suspend. If omitted, DCNL all processes will be suspended.'
def resume_processes(self, as_group, scaling_processes=None): DCNL 'Resumes Auto Scaling processes for an Auto Scaling group. DCNL :type as_group: string DCNL :param as_group: The auto scaling group to resume processes on. DCNL :type scaling_processes: list DCNL :param scaling_processes: Processes you want to resume. If omitted, all DCNL processes will be resumed.'
def create_scheduled_group_action(self, as_group, name, time=None, desired_capacity=None, min_size=None, max_size=None, start_time=None, end_time=None, recurrence=None): DCNL 'Creates a scheduled scaling action for a Auto Scaling group. If you DCNL leave a parameter unspecified, the corresponding value remains DCNL unchanged in the affected Auto Scaling group. DCNL :type as_group: string DCNL :param as_group: The auto scaling group to get activities on. DCNL :type name: string DCNL :param name: Scheduled action name. DCNL :type time: datetime.datetime DCNL :param time: The time for this action to start. (Depracated) DCNL :type desired_capacity: int DCNL :param desired_capacity: The number of EC2 instances that should DCNL be running in this group. DCNL :type min_size: int DCNL :param min_size: The minimum size for the new auto scaling group. DCNL :type max_size: int DCNL :param max_size: The minimum size for the new auto scaling group. DCNL :type start_time: datetime.datetime DCNL :param start_time: The time for this action to start. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action will start and stop. DCNL :type end_time: datetime.datetime DCNL :param end_time: The time for this action to end. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action will start and stop. DCNL :type recurrence: string DCNL :param recurrence: The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. EXAMPLE: \'0 10 * * *\''
def disable_metrics_collection(self, as_group, metrics=None): DCNL 'Disables monitoring of group metrics for the Auto Scaling group DCNL specified in AutoScalingGroupName. You can specify the list of affected DCNL metrics with the Metrics parameter.'
def enable_metrics_collection(self, as_group, granularity, metrics=None): DCNL 'Enables monitoring of group metrics for the Auto Scaling group DCNL specified in AutoScalingGroupName. You can specify the list of enabled DCNL metrics with the Metrics parameter. DCNL Auto scaling metrics collection can be turned on only if the DCNL InstanceMonitoring.Enabled flag, in the Auto Scaling group\'s launch DCNL configuration, is set to true. DCNL :type autoscale_group: string DCNL :param autoscale_group: The auto scaling group to get activities on. DCNL :type granularity: string DCNL :param granularity: The granularity to associate with the metrics to DCNL collect. Currently, the only legal granularity is "1Minute". DCNL :type metrics: string list DCNL :param metrics: The list of metrics to collect. If no metrics are DCNL specified, all metrics are enabled.'
def put_notification_configuration(self, autoscale_group, topic, notification_types): DCNL 'Configures an Auto Scaling group to send notifications when DCNL specified events take place. DCNL :type autoscale_group: str or DCNL :class:`boto.ec2.autoscale.group.AutoScalingGroup` object DCNL :param autoscale_group: The Auto Scaling group to put notification DCNL configuration on. DCNL :type topic: str DCNL :param topic: The Amazon Resource Name (ARN) of the Amazon Simple DCNL Notification Service (SNS) topic. DCNL :type notification_types: list DCNL :param notification_types: The type of events that will trigger DCNL the notification. Valid types are: DCNL \'autoscaling:EC2_INSTANCE_LAUNCH\', DCNL \'autoscaling:EC2_INSTANCE_LAUNCH_ERROR\', DCNL \'autoscaling:EC2_INSTANCE_TERMINATE\', DCNL \'autoscaling:EC2_INSTANCE_TERMINATE_ERROR\', DCNL \'autoscaling:TEST_NOTIFICATION\''
def delete_notification_configuration(self, autoscale_group, topic): DCNL 'Deletes notifications created by put_notification_configuration. DCNL :type autoscale_group: str or DCNL :class:`boto.ec2.autoscale.group.AutoScalingGroup` object DCNL :param autoscale_group: The Auto Scaling group to put notification DCNL configuration on. DCNL :type topic: str DCNL :param topic: The Amazon Resource Name (ARN) of the Amazon Simple DCNL Notification Service (SNS) topic.'
def set_instance_health(self, instance_id, health_status, should_respect_grace_period=True): DCNL 'Explicitly set the health status of an instance. DCNL :type instance_id: str DCNL :param instance_id: The identifier of the EC2 instance. DCNL :type health_status: str DCNL :param health_status: The health status of the instance. DCNL "Healthy" means that the instance is healthy and should remain DCNL in service. "Unhealthy" means that the instance is unhealthy. DCNL Auto Scaling should terminate and replace it. DCNL :type should_respect_grace_period: bool DCNL :param should_respect_grace_period: If True, this call should DCNL respect the grace period associated with the group.'
def set_desired_capacity(self, group_name, desired_capacity, honor_cooldown=False): DCNL 'Adjusts the desired size of the AutoScalingGroup by initiating scaling DCNL activities. When reducing the size of the group, it is not possible to define DCNL which Amazon EC2 instances will be terminated. This applies to any Auto Scaling DCNL decisions that might result in terminating instances. DCNL :type group_name: string DCNL :param group_name: name of the auto scaling group DCNL :type desired_capacity: integer DCNL :param desired_capacity: new capacity setting for auto scaling group DCNL :type honor_cooldown: boolean DCNL :param honor_cooldown: by default, overrides any cooldown period'
def get_all_tags(self, filters=None, max_records=None, next_token=None): DCNL 'Lists the Auto Scaling group tags. DCNL This action supports pagination by returning a token if there DCNL are more pages to retrieve. To get the next page, call this DCNL action again with the returned token as the NextToken DCNL parameter. DCNL :type filters: dict DCNL :param filters: The value of the filter type used to identify DCNL the tags to be returned.  NOT IMPLEMENTED YET. DCNL :type max_records: int DCNL :param max_records: Maximum number of tags to return. DCNL :rtype: list DCNL :returns: List of :class:`boto.ec2.autoscale.tag.Tag` DCNL instances.'
def create_or_update_tags(self, tags): DCNL 'Creates new tags or updates existing tags for an Auto Scaling group. DCNL :type tags: List of :class:`boto.ec2.autoscale.tag.Tag` DCNL :param tags: The new or updated tags.'
def delete_tags(self, tags): DCNL 'Deletes existing tags for an Auto Scaling group. DCNL :type tags: List of :class:`boto.ec2.autoscale.tag.Tag` DCNL :param tags: The new or updated tags.'
def __init__(self, connection=None, **kwargs): DCNL 'Scaling Policy DCNL :type name: str DCNL :param name: Name of scaling policy. DCNL :type adjustment_type: str DCNL :param adjustment_type: Specifies the type of adjustment. Valid values are `ChangeInCapacity`, `ExactCapacity` and `PercentChangeInCapacity`. DCNL :type as_name: str or int DCNL :param as_name: Name or ARN of the Auto Scaling Group. DCNL :type scaling_adjustment: int DCNL :param scaling_adjustment: Value of adjustment (type specified in `adjustment_type`). DCNL :type min_adjustment_step: int DCNL :param min_adjustment_step: Value of min adjustment step required to DCNL apply the scaling policy (only make sense when use `PercentChangeInCapacity` as adjustment_type.). DCNL :type cooldown: int DCNL :param cooldown: Time (in seconds) before Alarm related Scaling Activities can start after the previous Scaling Activity ends.'
def __init__(self, connection=None, name=None, image_id=None, key_name=None, security_groups=None, user_data=None, instance_type='m1.small', kernel_id=None, ramdisk_id=None, block_device_mappings=None, instance_monitoring=False, spot_price=None, instance_profile_name=None, ebs_optimized=False, associate_public_ip_address=None, volume_type=None, delete_on_termination=True, iops=None, use_block_device_types=False, classic_link_vpc_id=None, classic_link_vpc_security_groups=None): DCNL 'A launch configuration. DCNL :type name: str DCNL :param name: Name of the launch configuration to create. DCNL :type image_id: str DCNL :param image_id: Unique ID of the Amazon Machine Image (AMI) which was DCNL assigned during registration. DCNL :type key_name: str DCNL :param key_name: The name of the EC2 key pair. DCNL :type security_groups: list DCNL :param security_groups: Names or security group id\'s of the security DCNL groups with which to associate the EC2 instances or VPC instances, DCNL respectively. DCNL :type user_data: str DCNL :param user_data: The user data available to launched EC2 instances. DCNL :type instance_type: str DCNL :param instance_type: The instance type DCNL :type kernel_id: str DCNL :param kernel_id: Kernel id for instance DCNL :type ramdisk_id: str DCNL :param ramdisk_id: RAM disk id for instance DCNL :type block_device_mappings: list DCNL :param block_device_mappings: Specifies how block devices are exposed DCNL for instances DCNL :type instance_monitoring: bool DCNL :param instance_monitoring: Whether instances in group are launched DCNL with detailed monitoring. DCNL :type spot_price: float DCNL :param spot_price: The spot price you are bidding.  Only applies DCNL if you are building an autoscaling group with spot instances. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: The name or the Amazon Resource DCNL Name (ARN) of the instance profile associated with the IAM DCNL role for the instance. DCNL :type ebs_optimized: bool DCNL :param ebs_optimized: Specifies whether the instance is optimized DCNL for EBS I/O (true) or not (false). DCNL :type associate_public_ip_address: bool DCNL :param associate_public_ip_address: Used for Auto Scaling groups that launch instances into an Amazon Virtual Private Cloud. DCNL Specifies whether to assign a public IP address to each instance launched in a Amazon VPC. DCNL :type classic_link_vpc_id: str DCNL :param classic_link_vpc_id: ID of ClassicLink enabled VPC. DCNL :type classic_link_vpc_security_groups: list DCNL :param classic_link_vpc_security_groups: Security group DCNL id\'s of the security groups with which to associate the DCNL ClassicLink VPC instances.'
def delete(self): DCNL 'Delete this launch configuration.'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, host=None, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', api_version=None, security_token=None, validate_certs=True, profile_name=None): DCNL 'Init method to create a new connection to EC2.'
def get_params(self): DCNL 'Returns a dictionary containing the value of all of the keyword DCNL arguments passed when constructing this connection.'
def get_all_images(self, image_ids=None, owners=None, executable_by=None, filters=None, dry_run=False): DCNL 'Retrieve all the EC2 images available on your account. DCNL :type image_ids: list DCNL :param image_ids: A list of strings with the image IDs wanted DCNL :type owners: list DCNL :param owners: A list of owner IDs, the special strings \'self\', DCNL \'amazon\', and \'aws-marketplace\', may be used to describe DCNL images owned by you, Amazon or AWS Marketplace DCNL respectively DCNL :type executable_by: list DCNL :param executable_by: Returns AMIs for which the specified DCNL user ID has explicit launch permissions DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.image.Image`'
def get_all_kernels(self, kernel_ids=None, owners=None, dry_run=False): DCNL 'Retrieve all the EC2 kernels available on your account. DCNL Constructs a filter to allow the processing to happen server side. DCNL :type kernel_ids: list DCNL :param kernel_ids: A list of strings with the image IDs wanted DCNL :type owners: list DCNL :param owners: A list of owner IDs DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.image.Image`'
def get_all_ramdisks(self, ramdisk_ids=None, owners=None, dry_run=False): DCNL 'Retrieve all the EC2 ramdisks available on your account. DCNL Constructs a filter to allow the processing to happen server side. DCNL :type ramdisk_ids: list DCNL :param ramdisk_ids: A list of strings with the image IDs wanted DCNL :type owners: list DCNL :param owners: A list of owner IDs DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.image.Image`'
def get_image(self, image_id, dry_run=False): DCNL 'Shortcut method to retrieve a specific image (AMI). DCNL :type image_id: string DCNL :param image_id: the ID of the Image to retrieve DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.image.Image` DCNL :return: The EC2 Image specified or None if the image is not found'
def register_image(self, name=None, description=None, image_location=None, architecture=None, kernel_id=None, ramdisk_id=None, root_device_name=None, block_device_map=None, dry_run=False, virtualization_type=None, sriov_net_support=None, snapshot_id=None, delete_root_volume_on_termination=False): DCNL 'Register an image. DCNL :type name: string DCNL :param name: The name of the AMI.  Valid only for EBS-based images. DCNL :type description: string DCNL :param description: The description of the AMI. DCNL :type image_location: string DCNL :param image_location: Full path to your AMI manifest in DCNL Amazon S3 storage.  Only used for S3-based AMI\'s. DCNL :type architecture: string DCNL :param architecture: The architecture of the AMI.  Valid choices are: DCNL * i386 DCNL * x86_64 DCNL :type kernel_id: string DCNL :param kernel_id: The ID of the kernel with which to launch DCNL the instances DCNL :type root_device_name: string DCNL :param root_device_name: The root device name (e.g. /dev/sdh) DCNL :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_map: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated with the Image. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type virtualization_type: string DCNL :param virtualization_type: The virutalization_type of the image. DCNL Valid choices are: DCNL * paravirtual DCNL * hvm DCNL :type sriov_net_support: string DCNL :param sriov_net_support: Advanced networking support. DCNL Valid choices are: DCNL * simple DCNL :type snapshot_id: string DCNL :param snapshot_id: A snapshot ID for the snapshot to be used DCNL as root device for the image. Mutually exclusive with DCNL block_device_map, requires root_device_name DCNL :type delete_root_volume_on_termination: bool DCNL :param delete_root_volume_on_termination: Whether to delete the root DCNL volume of the image after instance termination. Only applies when DCNL creating image from snapshot_id. Defaults to False.  Note that DCNL leaving volumes behind after instance termination is not free. DCNL :rtype: string DCNL :return: The new image id'
def deregister_image(self, image_id, delete_snapshot=False, dry_run=False): DCNL 'Unregister an AMI. DCNL :type image_id: string DCNL :param image_id: the ID of the Image to unregister DCNL :type delete_snapshot: bool DCNL :param delete_snapshot: Set to True if we should delete the DCNL snapshot associated with an EBS volume mounted at /dev/sda1 DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def create_image(self, instance_id, name, description=None, no_reboot=False, block_device_mapping=None, dry_run=False): DCNL 'Will create an AMI from the instance in the running or stopped DCNL state. DCNL :type instance_id: string DCNL :param instance_id: the ID of the instance to image. DCNL :type name: string DCNL :param name: The name of the new image DCNL :type description: string DCNL :param description: An optional human-readable string describing DCNL the contents and purpose of the AMI. DCNL :type no_reboot: bool DCNL :param no_reboot: An optional flag indicating that the DCNL bundling process should not attempt to shutdown the DCNL instance before bundling.  If this flag is True, the DCNL responsibility of maintaining file system integrity is DCNL left to the owner of the instance. DCNL :type block_device_mapping: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_mapping: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated with the Image. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: string DCNL :return: The new image id'
def get_image_attribute(self, image_id, attribute='launchPermission', dry_run=False): DCNL 'Gets an attribute from an image. DCNL :type image_id: string DCNL :param image_id: The Amazon image id for which you want info about DCNL :type attribute: string DCNL :param attribute: The attribute you need information about. DCNL Valid choices are: DCNL * launchPermission DCNL * productCodes DCNL * blockDeviceMapping DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.image.ImageAttribute` DCNL :return: An ImageAttribute object representing the value of the DCNL attribute requested'
def modify_image_attribute(self, image_id, attribute='launchPermission', operation='add', user_ids=None, groups=None, product_codes=None, dry_run=False): DCNL 'Changes an attribute of an image. DCNL :type image_id: string DCNL :param image_id: The image id you wish to change DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change DCNL :type operation: string DCNL :param operation: Either add or remove (this is required for changing DCNL launchPermissions) DCNL :type user_ids: list DCNL :param user_ids: The Amazon IDs of users to add/remove attributes DCNL :type groups: list DCNL :param groups: The groups to add/remove attributes DCNL :type product_codes: list DCNL :param product_codes: Amazon DevPay product code. Currently only one DCNL product code can be associated with an AMI. Once DCNL set, the product code cannot be changed or reset. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def reset_image_attribute(self, image_id, attribute='launchPermission', dry_run=False): DCNL 'Resets an attribute of an AMI to its default value. DCNL :type image_id: string DCNL :param image_id: ID of the AMI for which an attribute will be described DCNL :type attribute: string DCNL :param attribute: The attribute to reset DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def get_all_instances(self, instance_ids=None, filters=None, dry_run=False, max_results=None): DCNL 'Retrieve all the instance reservations associated with your account. DCNL .. note:: DCNL This method\'s current behavior is deprecated in favor of DCNL :meth:`get_all_reservations`.  A future major release will change DCNL :meth:`get_all_instances` to return a list of DCNL :class:`boto.ec2.instance.Instance` objects as its name suggests. DCNL To obtain that behavior today, use :meth:`get_only_instances`. DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :rtype: list DCNL :return: A list of  :class:`boto.ec2.instance.Reservation`'
def get_only_instances(self, instance_ids=None, filters=None, dry_run=False, max_results=None): DCNL 'Retrieve all the instances associated with your account. DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :rtype: list DCNL :return: A list of  :class:`boto.ec2.instance.Instance`'
def get_all_reservations(self, instance_ids=None, filters=None, dry_run=False, max_results=None, next_token=None): DCNL 'Retrieve all the instance reservations associated with your account. DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :type next_token: str DCNL :param next_token: A string specifying the next paginated set DCNL of results to return. DCNL :rtype: list DCNL :return: A list of  :class:`boto.ec2.instance.Reservation`'
def get_all_instance_status(self, instance_ids=None, max_results=None, next_token=None, filters=None, dry_run=False, include_all_instances=False): DCNL 'Retrieve all the instances in your account scheduled for maintenance. DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :type next_token: str DCNL :param next_token: A string specifying the next paginated set DCNL of results to return. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type include_all_instances: bool DCNL :param include_all_instances: Set to True if all DCNL instances should be returned. (Only running DCNL instances are included by default.) DCNL :rtype: list DCNL :return: A list of instances that have maintenance scheduled.'
def run_instances(self, image_id, min_count=1, max_count=1, key_name=None, security_groups=None, user_data=None, addressing_type=None, instance_type='m1.small', placement=None, kernel_id=None, ramdisk_id=None, monitoring_enabled=False, subnet_id=None, block_device_map=None, disable_api_termination=False, instance_initiated_shutdown_behavior=None, private_ip_address=None, placement_group=None, client_token=None, security_group_ids=None, additional_info=None, instance_profile_name=None, instance_profile_arn=None, tenancy=None, ebs_optimized=False, network_interfaces=None, dry_run=False): DCNL 'Runs an image on EC2. DCNL :type image_id: string DCNL :param image_id: The ID of the image to run. DCNL :type min_count: int DCNL :param min_count: The minimum number of instances to launch. DCNL :type max_count: int DCNL :param max_count: The maximum number of instances to launch. DCNL :type key_name: string DCNL :param key_name: The name of the key pair with which to DCNL launch instances. DCNL :type security_groups: list of strings DCNL :param security_groups: The names of the EC2 classic security groups DCNL with which to associate instances DCNL :type user_data: string DCNL :param user_data: The user data passed to the launched instances DCNL :type instance_type: string DCNL :param instance_type: The type of instance to run: DCNL * t1.micro DCNL * m1.small DCNL * m1.medium DCNL * m1.large DCNL * m1.xlarge DCNL * m3.medium DCNL * m3.large DCNL * m3.xlarge DCNL * m3.2xlarge DCNL * c1.medium DCNL * c1.xlarge DCNL * m2.xlarge DCNL * m2.2xlarge DCNL * m2.4xlarge DCNL * cr1.8xlarge DCNL * hi1.4xlarge DCNL * hs1.8xlarge DCNL * cc1.4xlarge DCNL * cg1.4xlarge DCNL * cc2.8xlarge DCNL * g2.2xlarge DCNL * c3.large DCNL * c3.xlarge DCNL * c3.2xlarge DCNL * c3.4xlarge DCNL * c3.8xlarge DCNL * c4.large DCNL * c4.xlarge DCNL * c4.2xlarge DCNL * c4.4xlarge DCNL * c4.8xlarge DCNL * i2.xlarge DCNL * i2.2xlarge DCNL * i2.4xlarge DCNL * i2.8xlarge DCNL * t2.micro DCNL * t2.small DCNL * t2.medium DCNL :type placement: string DCNL :param placement: The Availability Zone to launch the instance into. DCNL :type kernel_id: string DCNL :param kernel_id: The ID of the kernel with which to launch the DCNL instances. DCNL :type ramdisk_id: string DCNL :param ramdisk_id: The ID of the RAM disk with which to launch the DCNL instances. DCNL :type monitoring_enabled: bool DCNL :param monitoring_enabled: Enable detailed CloudWatch monitoring on DCNL the instance. DCNL :type subnet_id: string DCNL :param subnet_id: The subnet ID within which to launch the instances DCNL for VPC. DCNL :type private_ip_address: string DCNL :param private_ip_address: If you\'re using VPC, you can DCNL optionally use this parameter to assign the instance a DCNL specific available IP address from the subnet (e.g., DCNL 10.0.0.25). DCNL :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_map: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated with the Image. DCNL :type disable_api_termination: bool DCNL :param disable_api_termination: If True, the instances will be locked DCNL and will not be able to be terminated via the API. DCNL :type instance_initiated_shutdown_behavior: string DCNL :param instance_initiated_shutdown_behavior: Specifies whether the DCNL instance stops or terminates on instance-initiated shutdown. DCNL Valid values are: DCNL * stop DCNL * terminate DCNL :type placement_group: string DCNL :param placement_group: If specified, this is the name of the placement DCNL group in which the instance(s) will be launched. DCNL :type client_token: string DCNL :param client_token: Unique, case-sensitive identifier you provide DCNL to ensure idempotency of the request. Maximum 64 ASCII characters. DCNL :type security_group_ids: list of strings DCNL :param security_group_ids: The ID of the VPC security groups with DCNL which to associate instances. DCNL :type additional_info: string DCNL :param additional_info: Specifies additional information to make DCNL available to the instance(s). DCNL :type tenancy: string DCNL :param tenancy: The tenancy of the instance you want to DCNL launch. An instance with a tenancy of \'dedicated\' runs on DCNL single-tenant hardware and can only be launched into a DCNL VPC. Valid values are:"default" or "dedicated". DCNL NOTE: To use dedicated tenancy you MUST specify a VPC DCNL subnet-ID as well. DCNL :type instance_profile_arn: string DCNL :param instance_profile_arn: The Amazon resource name (ARN) of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: The name of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type ebs_optimized: bool DCNL :param ebs_optimized: Whether the instance is optimized for DCNL EBS I/O.  This optimization provides dedicated throughput DCNL to Amazon EBS and an optimized configuration stack to DCNL provide optimal EBS I/O performance.  This optimization DCNL isn\'t available with all instance types. DCNL :type network_interfaces: :class:`boto.ec2.networkinterface.NetworkInterfaceCollection` DCNL :param network_interfaces: A NetworkInterfaceCollection data DCNL structure containing the ENI specifications for the instance. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Reservation DCNL :return: The :class:`boto.ec2.instance.Reservation` associated with DCNL the request for machines'
def terminate_instances(self, instance_ids=None, dry_run=False): DCNL 'Terminate the instances specified DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of the Instance IDs to terminate DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of the instances terminated'
def stop_instances(self, instance_ids=None, force=False, dry_run=False): DCNL 'Stop the instances specified DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of the Instance IDs to stop DCNL :type force: bool DCNL :param force: Forces the instance to stop DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of the instances stopped'
def start_instances(self, instance_ids=None, dry_run=False): DCNL 'Start the instances specified DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of the Instance IDs to start DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of the instances started'
def get_console_output(self, instance_id, dry_run=False): DCNL 'Retrieves the console output for the specified instance. DCNL :type instance_id: string DCNL :param instance_id: The instance ID of a running instance on the cloud. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.instance.ConsoleOutput` DCNL :return: The console output as a ConsoleOutput object'
def reboot_instances(self, instance_ids=None, dry_run=False): DCNL 'Reboot the specified instances. DCNL :type instance_ids: list DCNL :param instance_ids: The instances to terminate and reboot DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def confirm_product_instance(self, product_code, instance_id, dry_run=False): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_instance_attribute(self, instance_id, attribute, dry_run=False): DCNL 'Gets an attribute from an instance. DCNL :type instance_id: string DCNL :param instance_id: The Amazon id of the instance DCNL :type attribute: string DCNL :param attribute: The attribute you need information about DCNL Valid choices are: DCNL * instanceType DCNL * kernel DCNL * ramdisk DCNL * userData DCNL * disableApiTermination DCNL * instanceInitiatedShutdownBehavior DCNL * rootDeviceName DCNL * blockDeviceMapping DCNL * productCodes DCNL * sourceDestCheck DCNL * groupSet DCNL * ebsOptimized DCNL * sriovNetSupport DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.image.InstanceAttribute` DCNL :return: An InstanceAttribute object representing the value of the DCNL attribute requested'
def modify_network_interface_attribute(self, interface_id, attr, value, attachment_id=None, dry_run=False): DCNL 'Changes an attribute of a network interface. DCNL :type interface_id: string DCNL :param interface_id: The interface id. Looks like \'eni-xxxxxxxx\' DCNL :type attr: string DCNL :param attr: The attribute you wish to change. DCNL Learn more at http://docs.aws.amazon.com/AWSEC2/latest/API            Reference/ApiReference-query-ModifyNetworkInterfaceAttribute.html DCNL * description - Textual description of interface DCNL * groupSet - List of security group ids or group objects DCNL * sourceDestCheck - Boolean DCNL * deleteOnTermination - Boolean. Must also specify attachment_id DCNL :type value: string DCNL :param value: The new value for the attribute DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not DCNL :type attachment_id: string DCNL :param attachment_id: If you\'re modifying DeleteOnTermination you must DCNL specify the attachment_id. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def modify_instance_attribute(self, instance_id, attribute, value, dry_run=False): DCNL 'Changes an attribute of an instance DCNL :type instance_id: string DCNL :param instance_id: The instance id you wish to change DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change. DCNL * instanceType - A valid instance type (m1.small) DCNL * kernel - Kernel ID (None) DCNL * ramdisk - Ramdisk ID (None) DCNL * userData - Base64 encoded String (None) DCNL * disableApiTermination - Boolean (true) DCNL * instanceInitiatedShutdownBehavior - stop|terminate DCNL * blockDeviceMapping - List of strings - ie: [\'/dev/sda=false\'] DCNL * sourceDestCheck - Boolean (true) DCNL * groupSet - Set of Security Groups or IDs DCNL * ebsOptimized - Boolean (false) DCNL * sriovNetSupport - String - ie: \'simple\' DCNL :type value: string DCNL :param value: The new value for the attribute DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def reset_instance_attribute(self, instance_id, attribute, dry_run=False): DCNL 'Resets an attribute of an instance to its default value. DCNL :type instance_id: string DCNL :param instance_id: ID of the instance DCNL :type attribute: string DCNL :param attribute: The attribute to reset. Valid values are: DCNL kernel|ramdisk DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def get_all_spot_instance_requests(self, request_ids=None, filters=None, dry_run=False): DCNL 'Retrieve all the spot instances requests associated with your account. DCNL :type request_ids: list DCNL :param request_ids: A list of strings of spot instance request IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of DCNL :class:`boto.ec2.spotinstancerequest.SpotInstanceRequest`'
def get_spot_price_history(self, start_time=None, end_time=None, instance_type=None, product_description=None, availability_zone=None, dry_run=False, max_results=None, next_token=None, filters=None): DCNL 'Retrieve the recent history of spot instances pricing. DCNL :type start_time: str DCNL :param start_time: An indication of how far back to provide price DCNL changes for. An ISO8601 DateTime string. DCNL :type end_time: str DCNL :param end_time: An indication of how far forward to provide price DCNL changes for.  An ISO8601 DateTime string. DCNL :type instance_type: str DCNL :param instance_type: Filter responses to a particular instance type. DCNL :type product_description: str DCNL :param product_description: Filter responses to a particular platform. DCNL Valid values are currently: DCNL * Linux/UNIX DCNL * SUSE Linux DCNL * Windows DCNL * Linux/UNIX (Amazon VPC) DCNL * SUSE Linux (Amazon VPC) DCNL * Windows (Amazon VPC) DCNL :type availability_zone: str DCNL :param availability_zone: The availability zone for which prices DCNL should be returned.  If not specified, data for all DCNL availability zones will be returned. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated items DCNL per response. DCNL :type next_token: str DCNL :param next_token: The next set of rows to return.  This should DCNL be the value of the ``next_token`` attribute from a previous DCNL call to ``get_spot_price_history``. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :rtype: list DCNL :return: A list tuples containing price and timestamp.'
def request_spot_instances(self, price, image_id, count=1, type='one-time', valid_from=None, valid_until=None, launch_group=None, availability_zone_group=None, key_name=None, security_groups=None, user_data=None, addressing_type=None, instance_type='m1.small', placement=None, kernel_id=None, ramdisk_id=None, monitoring_enabled=False, subnet_id=None, placement_group=None, block_device_map=None, instance_profile_arn=None, instance_profile_name=None, security_group_ids=None, ebs_optimized=False, network_interfaces=None, dry_run=False): DCNL 'Request instances on the spot market at a particular price. DCNL :type price: str DCNL :param price: The maximum price of your bid DCNL :type image_id: string DCNL :param image_id: The ID of the image to run DCNL :type count: int DCNL :param count: The of instances to requested DCNL :type type: str DCNL :param type: Type of request. Can be \'one-time\' or \'persistent\'. DCNL Default is one-time. DCNL :type valid_from: str DCNL :param valid_from: Start date of the request. An ISO8601 time string. DCNL :type valid_until: str DCNL :param valid_until: End date of the request.  An ISO8601 time string. DCNL :type launch_group: str DCNL :param launch_group: If supplied, all requests will be fulfilled DCNL as a group. DCNL :type availability_zone_group: str DCNL :param availability_zone_group: If supplied, all requests will be DCNL fulfilled within a single availability zone. DCNL :type key_name: string DCNL :param key_name: The name of the key pair with which to DCNL launch instances DCNL :type security_groups: list of strings DCNL :param security_groups: The names of the security groups with which to DCNL associate instances DCNL :type user_data: string DCNL :param user_data: The user data passed to the launched instances DCNL :type instance_type: string DCNL :param instance_type: The type of instance to run: DCNL * t1.micro DCNL * m1.small DCNL * m1.medium DCNL * m1.large DCNL * m1.xlarge DCNL * m3.medium DCNL * m3.large DCNL * m3.xlarge DCNL * m3.2xlarge DCNL * c1.medium DCNL * c1.xlarge DCNL * m2.xlarge DCNL * m2.2xlarge DCNL * m2.4xlarge DCNL * cr1.8xlarge DCNL * hi1.4xlarge DCNL * hs1.8xlarge DCNL * cc1.4xlarge DCNL * cg1.4xlarge DCNL * cc2.8xlarge DCNL * g2.2xlarge DCNL * c3.large DCNL * c3.xlarge DCNL * c3.2xlarge DCNL * c3.4xlarge DCNL * c3.8xlarge DCNL * c4.large DCNL * c4.xlarge DCNL * c4.2xlarge DCNL * c4.4xlarge DCNL * c4.8xlarge DCNL * i2.xlarge DCNL * i2.2xlarge DCNL * i2.4xlarge DCNL * i2.8xlarge DCNL * t2.micro DCNL * t2.small DCNL * t2.medium DCNL :type placement: string DCNL :param placement: The availability zone in which to launch DCNL the instances DCNL :type kernel_id: string DCNL :param kernel_id: The ID of the kernel with which to launch the DCNL instances DCNL :type ramdisk_id: string DCNL :param ramdisk_id: The ID of the RAM disk with which to launch the DCNL instances DCNL :type monitoring_enabled: bool DCNL :param monitoring_enabled: Enable detailed CloudWatch monitoring on DCNL the instance. DCNL :type subnet_id: string DCNL :param subnet_id: The subnet ID within which to launch the instances DCNL for VPC. DCNL :type placement_group: string DCNL :param placement_group: If specified, this is the name of the placement DCNL group in which the instance(s) will be launched. DCNL :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_map: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated with the Image. DCNL :type security_group_ids: list of strings DCNL :param security_group_ids: The ID of the VPC security groups with DCNL which to associate instances. DCNL :type instance_profile_arn: string DCNL :param instance_profile_arn: The Amazon resource name (ARN) of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: The name of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type ebs_optimized: bool DCNL :param ebs_optimized: Whether the instance is optimized for DCNL EBS I/O.  This optimization provides dedicated throughput DCNL to Amazon EBS and an optimized configuration stack to DCNL provide optimal EBS I/O performance.  This optimization DCNL isn\'t available with all instance types. DCNL :type network_interfaces: list DCNL :param network_interfaces: A list of DCNL :class:`boto.ec2.networkinterface.NetworkInterfaceSpecification` DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Reservation DCNL :return: The :class:`boto.ec2.spotinstancerequest.SpotInstanceRequest` DCNL associated with the request for machines'
def cancel_spot_instance_requests(self, request_ids, dry_run=False): DCNL 'Cancel the specified Spot Instance Requests. DCNL :type request_ids: list DCNL :param request_ids: A list of strings of the Request IDs to terminate DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of the instances terminated'
def get_spot_datafeed_subscription(self, dry_run=False): DCNL 'Return the current spot instance data feed subscription DCNL associated with this account, if any. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription` DCNL :return: The datafeed subscription object or None'
def create_spot_datafeed_subscription(self, bucket, prefix, dry_run=False): DCNL 'Create a spot instance datafeed subscription for this account. DCNL :type bucket: str or unicode DCNL :param bucket: The name of the bucket where spot instance data DCNL will be written.  The account issuing this request DCNL must have FULL_CONTROL access to the bucket DCNL specified in the request. DCNL :type prefix: str or unicode DCNL :param prefix: An optional prefix that will be pre-pended to all DCNL data files written to the bucket. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription` DCNL :return: The datafeed subscription object or None'
def delete_spot_datafeed_subscription(self, dry_run=False): DCNL 'Delete the current spot instance data feed subscription DCNL associated with this account DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_zones(self, zones=None, filters=None, dry_run=False): DCNL 'Get all Availability Zones associated with the current region. DCNL :type zones: list DCNL :param zones: Optional list of zones.  If this list is present, DCNL only the Zones associated with these zone names DCNL will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.zone.Zone` DCNL :return: The requested Zone objects'
def get_all_addresses(self, addresses=None, filters=None, allocation_ids=None, dry_run=False): DCNL 'Get all EIP\'s associated with the current credentials. DCNL :type addresses: list DCNL :param addresses: Optional list of addresses.  If this list is present, DCNL only the Addresses associated with these addresses DCNL will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type allocation_ids: list DCNL :param allocation_ids: Optional list of allocation IDs.  If this list is DCNL present, only the Addresses associated with the given DCNL allocation IDs will be returned. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.address.Address` DCNL :return: The requested Address objects'
def allocate_address(self, domain=None, dry_run=False): DCNL 'Allocate a new Elastic IP address and associate it with your account. DCNL :type domain: string DCNL :param domain: Optional string. If domain is set to "vpc" the address DCNL will be allocated to VPC . Will return address object with DCNL allocation_id. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.address.Address` DCNL :return: The newly allocated Address'
def assign_private_ip_addresses(self, network_interface_id=None, private_ip_addresses=None, secondary_private_ip_address_count=None, allow_reassignment=False, dry_run=False): DCNL 'Assigns one or more secondary private IP addresses to a network DCNL interface in Amazon VPC. DCNL :type network_interface_id: string DCNL :param network_interface_id: The network interface to which the IP DCNL address will be assigned. DCNL :type private_ip_addresses: list DCNL :param private_ip_addresses: Assigns the specified IP addresses as DCNL secondary IP addresses to the network interface. DCNL :type secondary_private_ip_address_count: int DCNL :param secondary_private_ip_address_count: The number of secondary IP DCNL addresses to assign to the network interface. You cannot specify DCNL this parameter when also specifying private_ip_addresses. DCNL :type allow_reassignment: bool DCNL :param allow_reassignment: Specifies whether to allow an IP address DCNL that is already assigned to another network interface or instance DCNL to be reassigned to the specified network interface. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def associate_address(self, instance_id=None, public_ip=None, allocation_id=None, network_interface_id=None, private_ip_address=None, allow_reassociation=False, dry_run=False): DCNL 'Associate an Elastic IP address with a currently running instance. DCNL This requires one of ``public_ip`` or ``allocation_id`` depending DCNL on if you\'re associating a VPC address or a plain EC2 address. DCNL When using an Allocation ID, make sure to pass ``None`` for ``public_ip`` DCNL as EC2 expects a single parameter and if ``public_ip`` is passed boto DCNL will preference that instead of ``allocation_id``. DCNL :type instance_id: string DCNL :param instance_id: The ID of the instance DCNL :type public_ip: string DCNL :param public_ip: The public IP address for EC2 based allocations. DCNL :type allocation_id: string DCNL :param allocation_id: The allocation ID for a VPC-based elastic IP. DCNL :type network_interface_id: string DCNL :param network_interface_id: The network interface ID to which DCNL elastic IP is to be assigned to DCNL :type private_ip_address: string DCNL :param private_ip_address: The primary or secondary private IP address DCNL to associate with the Elastic IP address. DCNL :type allow_reassociation: bool DCNL :param allow_reassociation: Specify this option to allow an Elastic IP DCNL address that is already associated with another network interface DCNL or instance to be re-associated with the specified instance or DCNL interface. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def associate_address_object(self, instance_id=None, public_ip=None, allocation_id=None, network_interface_id=None, private_ip_address=None, allow_reassociation=False, dry_run=False): DCNL 'Associate an Elastic IP address with a currently running instance. DCNL This requires one of ``public_ip`` or ``allocation_id`` depending DCNL on if you\'re associating a VPC address or a plain EC2 address. DCNL When using an Allocation ID, make sure to pass ``None`` for ``public_ip`` DCNL as EC2 expects a single parameter and if ``public_ip`` is passed boto DCNL will preference that instead of ``allocation_id``. DCNL :type instance_id: string DCNL :param instance_id: The ID of the instance DCNL :type public_ip: string DCNL :param public_ip: The public IP address for EC2 based allocations. DCNL :type allocation_id: string DCNL :param allocation_id: The allocation ID for a VPC-based elastic IP. DCNL :type network_interface_id: string DCNL :param network_interface_id: The network interface ID to which DCNL elastic IP is to be assigned to DCNL :type private_ip_address: string DCNL :param private_ip_address: The primary or secondary private IP address DCNL to associate with the Elastic IP address. DCNL :type allow_reassociation: bool DCNL :param allow_reassociation: Specify this option to allow an Elastic IP DCNL address that is already associated with another network interface DCNL or instance to be re-associated with the specified instance or DCNL interface. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: class:`boto.ec2.address.Address` DCNL :return: The associated address instance'
def disassociate_address(self, public_ip=None, association_id=None, dry_run=False): DCNL 'Disassociate an Elastic IP address from a currently running instance. DCNL :type public_ip: string DCNL :param public_ip: The public IP address for EC2 elastic IPs. DCNL :type association_id: string DCNL :param association_id: The association ID for a VPC based elastic ip. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def release_address(self, public_ip=None, allocation_id=None, dry_run=False): DCNL 'Free up an Elastic IP address.  Pass a public IP address to DCNL release an EC2 Elastic IP address and an AllocationId to DCNL release a VPC Elastic IP address.  You should only pass DCNL one value. DCNL This requires one of ``public_ip`` or ``allocation_id`` depending DCNL on if you\'re associating a VPC address or a plain EC2 address. DCNL When using an Allocation ID, make sure to pass ``None`` for ``public_ip`` DCNL as EC2 expects a single parameter and if ``public_ip`` is passed boto DCNL will preference that instead of ``allocation_id``. DCNL :type public_ip: string DCNL :param public_ip: The public IP address for EC2 elastic IPs. DCNL :type allocation_id: string DCNL :param allocation_id: The Allocation ID for VPC elastic IPs. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def unassign_private_ip_addresses(self, network_interface_id=None, private_ip_addresses=None, dry_run=False): DCNL 'Unassigns one or more secondary private IP addresses from a network DCNL interface in Amazon VPC. DCNL :type network_interface_id: string DCNL :param network_interface_id: The network interface from which the DCNL secondary private IP address will be unassigned. DCNL :type private_ip_addresses: list DCNL :param private_ip_addresses: Specifies the secondary private IP DCNL addresses that you want to unassign from the network interface. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_volumes(self, volume_ids=None, filters=None, dry_run=False): DCNL 'Get all Volumes associated with the current credentials. DCNL :type volume_ids: list DCNL :param volume_ids: Optional list of volume ids.  If this list DCNL is present, only the volumes associated with DCNL these volume ids will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.volume.Volume` DCNL :return: The requested Volume objects'
def get_all_volume_status(self, volume_ids=None, max_results=None, next_token=None, filters=None, dry_run=False): DCNL 'Retrieve the status of one or more volumes. DCNL :type volume_ids: list DCNL :param volume_ids: A list of strings of volume IDs DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :type next_token: str DCNL :param next_token: A string specifying the next paginated set DCNL of results to return. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of volume status.'
def enable_volume_io(self, volume_id, dry_run=False): DCNL 'Enables I/O operations for a volume that had I/O operations DCNL disabled because the data on the volume was potentially inconsistent. DCNL :type volume_id: str DCNL :param volume_id: The ID of the volume. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_volume_attribute(self, volume_id, attribute='autoEnableIO', dry_run=False): DCNL 'Describes attribute of the volume. DCNL :type volume_id: str DCNL :param volume_id: The ID of the volume. DCNL :type attribute: str DCNL :param attribute: The requested attribute.  Valid values are: DCNL * autoEnableIO DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.volume.VolumeAttribute` DCNL :return: The requested Volume attribute'
def modify_volume_attribute(self, volume_id, attribute, new_value, dry_run=False): DCNL 'Changes an attribute of an Volume. DCNL :type volume_id: string DCNL :param volume_id: The volume id you wish to change DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change.  Valid values are: DCNL AutoEnableIO. DCNL :type new_value: string DCNL :param new_value: The new value of the attribute. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def create_volume(self, size, zone, snapshot=None, volume_type=None, iops=None, encrypted=False, kms_key_id=None, dry_run=False): DCNL 'Create a new EBS Volume. DCNL :type size: int DCNL :param size: The size of the new volume, in GiB DCNL :type zone: string or :class:`boto.ec2.zone.Zone` DCNL :param zone: The availability zone in which the Volume will be created. DCNL :type snapshot: string or :class:`boto.ec2.snapshot.Snapshot` DCNL :param snapshot: The snapshot from which the new Volume will be DCNL created. DCNL :type volume_type: string DCNL :param volume_type: The type of the volume. (optional).  Valid DCNL values are: standard | io1 | gp2. DCNL :type iops: int DCNL :param iops: The provisioned IOPS you want to associate with DCNL this volume. (optional) DCNL :type encrypted: bool DCNL :param encrypted: Specifies whether the volume should be encrypted. DCNL (optional) DCNL :type kms_key_id: string DCNL :params kms_key_id: If encrypted is True, this KMS Key ID may be specified to DCNL encrypt volume with this key (optional) DCNL e.g.: arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def delete_volume(self, volume_id, dry_run=False): DCNL 'Delete an EBS volume. DCNL :type volume_id: str DCNL :param volume_id: The ID of the volume to be delete. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def attach_volume(self, volume_id, instance_id, device, dry_run=False): DCNL 'Attach an EBS volume to an EC2 instance. DCNL :type volume_id: str DCNL :param volume_id: The ID of the EBS volume to be attached. DCNL :type instance_id: str DCNL :param instance_id: The ID of the EC2 instance to which it will DCNL be attached. DCNL :type device: str DCNL :param device: The device on the instance through which the DCNL volume will be exposted (e.g. /dev/sdh) DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def detach_volume(self, volume_id, instance_id=None, device=None, force=False, dry_run=False): DCNL 'Detach an EBS volume from an EC2 instance. DCNL :type volume_id: str DCNL :param volume_id: The ID of the EBS volume to be attached. DCNL :type instance_id: str DCNL :param instance_id: The ID of the EC2 instance from which it will DCNL be detached. DCNL :type device: str DCNL :param device: The device on the instance through which the DCNL volume is exposted (e.g. /dev/sdh) DCNL :type force: bool DCNL :param force: Forces detachment if the previous detachment DCNL attempt did not occur cleanly.  This option can lead to DCNL data loss or a corrupted file system. Use this option only DCNL as a last resort to detach a volume from a failed DCNL instance. The instance will not have an opportunity to DCNL flush file system caches nor file system meta data. If you DCNL use this option, you must perform file system check and DCNL repair procedures. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_snapshots(self, snapshot_ids=None, owner=None, restorable_by=None, filters=None, dry_run=False): DCNL 'Get all EBS Snapshots associated with the current credentials. DCNL :type snapshot_ids: list DCNL :param snapshot_ids: Optional list of snapshot ids.  If this list is DCNL present, only the Snapshots associated with DCNL these snapshot ids will be returned. DCNL :type owner: str or list DCNL :param owner: If present, only the snapshots owned by the specified user(s) DCNL will be returned.  Valid values are: DCNL * self DCNL * amazon DCNL * AWS Account ID DCNL :type restorable_by: str or list DCNL :param restorable_by: If present, only the snapshots that are restorable DCNL by the specified account id(s) will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.snapshot.Snapshot` DCNL :return: The requested Snapshot objects'
def create_snapshot(self, volume_id, description=None, dry_run=False): DCNL 'Create a snapshot of an existing EBS Volume. DCNL :type volume_id: str DCNL :param volume_id: The ID of the volume to be snapshot\'ed DCNL :type description: str DCNL :param description: A description of the snapshot. DCNL Limited to 255 characters. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.snapshot.Snapshot` DCNL :return: The created Snapshot object'
def delete_snapshot(self, snapshot_id, dry_run=False): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def copy_snapshot(self, source_region, source_snapshot_id, description=None, dry_run=False): DCNL 'Copies a point-in-time snapshot of an Amazon Elastic Block Store DCNL (Amazon EBS) volume and stores it in Amazon Simple Storage Service DCNL (Amazon S3). You can copy the snapshot within the same region or from DCNL one region to another. You can use the snapshot to create new Amazon DCNL EBS volumes or Amazon Machine Images (AMIs). DCNL :type source_region: str DCNL :param source_region: The ID of the AWS region that contains the DCNL snapshot to be copied (e.g \'us-east-1\', \'us-west-2\', etc.). DCNL :type source_snapshot_id: str DCNL :param source_snapshot_id: The ID of the Amazon EBS snapshot to copy DCNL :type description: str DCNL :param description: A description of the new Amazon EBS snapshot. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: str DCNL :return: The snapshot ID'
def trim_snapshots(self, hourly_backups=8, daily_backups=7, weekly_backups=4, monthly_backups=True): DCNL 'Trim excess snapshots, based on when they were taken. More current DCNL snapshots are retained, with the number retained decreasing as you DCNL move back in time. DCNL If ebs volumes have a \'Name\' tag with a value, their snapshots DCNL will be assigned the same tag when they are created. The values DCNL of the \'Name\' tags for snapshots are used by this function to DCNL group snapshots taken from the same volume (or from a series DCNL of like-named volumes over time) for trimming. DCNL For every group of like-named snapshots, this function retains DCNL the newest and oldest snapshots, as well as, by default,  the DCNL first snapshots taken in each of the last eight hours, the first DCNL snapshots taken in each of the last seven days, the first snapshots DCNL taken in the last 4 weeks (counting Midnight Sunday morning as DCNL the start of the week), and the first snapshot from the first DCNL day of each month forever. DCNL :type hourly_backups: int DCNL :param hourly_backups: How many recent hourly backups should be saved. DCNL :type daily_backups: int DCNL :param daily_backups: How many recent daily backups should be saved. DCNL :type weekly_backups: int DCNL :param weekly_backups: How many recent weekly backups should be saved. DCNL :type monthly_backups: int DCNL :param monthly_backups: How many monthly backups should be saved. Use True for no limit.'
def get_snapshot_attribute(self, snapshot_id, attribute='createVolumePermission', dry_run=False): DCNL 'Get information about an attribute of a snapshot.  Only one attribute DCNL can be specified per call. DCNL :type snapshot_id: str DCNL :param snapshot_id: The ID of the snapshot. DCNL :type attribute: str DCNL :param attribute: The requested attribute.  Valid values are: DCNL * createVolumePermission DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list of :class:`boto.ec2.snapshotattribute.SnapshotAttribute` DCNL :return: The requested Snapshot attribute'
def modify_snapshot_attribute(self, snapshot_id, attribute='createVolumePermission', operation='add', user_ids=None, groups=None, dry_run=False): DCNL 'Changes an attribute of an image. DCNL :type snapshot_id: string DCNL :param snapshot_id: The snapshot id you wish to change DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change.  Valid values are: DCNL createVolumePermission DCNL :type operation: string DCNL :param operation: Either add or remove (this is required for changing DCNL snapshot ermissions) DCNL :type user_ids: list DCNL :param user_ids: The Amazon IDs of users to add/remove attributes DCNL :type groups: list DCNL :param groups: The groups to add/remove attributes.  The only valid DCNL value at this time is \'all\'. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def reset_snapshot_attribute(self, snapshot_id, attribute='createVolumePermission', dry_run=False): DCNL 'Resets an attribute of a snapshot to its default value. DCNL :type snapshot_id: string DCNL :param snapshot_id: ID of the snapshot DCNL :type attribute: string DCNL :param attribute: The attribute to reset DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def get_all_key_pairs(self, keynames=None, filters=None, dry_run=False): DCNL 'Get all key pairs associated with your account. DCNL :type keynames: list DCNL :param keynames: A list of the names of keypairs to retrieve. DCNL If not provided, all key pairs will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.keypair.KeyPair`'
def get_key_pair(self, keyname, dry_run=False): DCNL 'Convenience method to retrieve a specific keypair (KeyPair). DCNL :type keyname: string DCNL :param keyname: The name of the keypair to retrieve DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.keypair.KeyPair` DCNL :return: The KeyPair specified or None if it is not found'
def create_key_pair(self, key_name, dry_run=False): DCNL 'Create a new key pair for your account. DCNL This will create the key pair within the region you DCNL are currently connected to. DCNL :type key_name: string DCNL :param key_name: The name of the new keypair DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.keypair.KeyPair` DCNL :return: The newly created :class:`boto.ec2.keypair.KeyPair`. DCNL The material attribute of the new KeyPair object DCNL will contain the the unencrypted PEM encoded RSA private key.'
def delete_key_pair(self, key_name, dry_run=False): DCNL 'Delete a key pair from your account. DCNL :type key_name: string DCNL :param key_name: The name of the keypair to delete DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def import_key_pair(self, key_name, public_key_material, dry_run=False): DCNL 'imports the public key from an RSA key pair that you created DCNL with a third-party tool. DCNL Supported formats: DCNL * OpenSSH public key format (e.g., the format DCNL in ~/.ssh/authorized_keys) DCNL * Base64 encoded DER format DCNL * SSH public key file format as specified in RFC4716 DCNL DSA keys are not supported. Make sure your key generator is DCNL set up to create RSA keys. DCNL Supported lengths: 1024, 2048, and 4096. DCNL :type key_name: string DCNL :param key_name: The name of the new keypair DCNL :type public_key_material: string DCNL :param public_key_material: The public key. You must base64 encode DCNL the public key material before sending DCNL it to AWS. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.keypair.KeyPair` DCNL :return: A :class:`boto.ec2.keypair.KeyPair` object representing DCNL the newly imported key pair.  This object will contain only DCNL the key name and the fingerprint.'
def get_all_security_groups(self, groupnames=None, group_ids=None, filters=None, dry_run=False): DCNL 'Get all security groups associated with your account in a region. DCNL :type groupnames: list DCNL :param groupnames: A list of the names of security groups to retrieve. DCNL If not provided, all security groups will be DCNL returned. DCNL :type group_ids: list DCNL :param group_ids: A list of IDs of security groups to retrieve for DCNL security groups within a VPC. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.securitygroup.SecurityGroup`'
def create_security_group(self, name, description, vpc_id=None, dry_run=False): DCNL 'Create a new security group for your account. DCNL This will create the security group within the region you DCNL are currently connected to. DCNL :type name: string DCNL :param name: The name of the new security group DCNL :type description: string DCNL :param description: The description of the new security group DCNL :type vpc_id: string DCNL :param vpc_id: The ID of the VPC to create the security group in, DCNL if any. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.securitygroup.SecurityGroup` DCNL :return: The newly created :class:`boto.ec2.securitygroup.SecurityGroup`.'
def delete_security_group(self, name=None, group_id=None, dry_run=False): DCNL 'Delete a security group from your account. DCNL :type name: string DCNL :param name: The name of the security group to delete. DCNL :type group_id: string DCNL :param group_id: The ID of the security group to delete within DCNL a VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def authorize_security_group_deprecated(self, group_name, src_security_group_name=None, src_security_group_owner_id=None, ip_protocol=None, from_port=None, to_port=None, cidr_ip=None, dry_run=False): DCNL 'NOTE: This method uses the old-style request parameters DCNL that did not allow a port to be specified when DCNL authorizing a group. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are adding DCNL the rule to. DCNL :type src_security_group_name: string DCNL :param src_security_group_name: The name of the security group you are DCNL granting access to. DCNL :type src_security_group_owner_id: string DCNL :param src_security_group_owner_id: The ID of the owner of the security DCNL group you are granting access to. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp DCNL :type from_port: int DCNL :param from_port: The beginning port number you are enabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are enabling DCNL :type to_port: string DCNL :param to_port: The CIDR block you are providing access to. DCNL See http://goo.gl/Yj5QC DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def authorize_security_group(self, group_name=None, src_security_group_name=None, src_security_group_owner_id=None, ip_protocol=None, from_port=None, to_port=None, cidr_ip=None, group_id=None, src_security_group_group_id=None, dry_run=False): DCNL 'Add a new rule to an existing security group. DCNL You need to pass in either src_security_group_name and DCNL src_security_group_owner_id OR ip_protocol, from_port, to_port, DCNL and cidr_ip.  In other words, either you are authorizing another DCNL group or you are authorizing some ip-based rule. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are adding DCNL the rule to. DCNL :type src_security_group_name: string DCNL :param src_security_group_name: The name of the security group you are DCNL granting access to. DCNL :type src_security_group_owner_id: string DCNL :param src_security_group_owner_id: The ID of the owner of the security DCNL group you are granting access to. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp DCNL :type from_port: int DCNL :param from_port: The beginning port number you are enabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are enabling DCNL :type cidr_ip: string or list of strings DCNL :param cidr_ip: The CIDR block you are providing access to. DCNL See http://goo.gl/Yj5QC DCNL :type group_id: string DCNL :param group_id: ID of the EC2 or VPC security group to DCNL modify.  This is required for VPC security groups and can DCNL be used instead of group_name for EC2 security groups. DCNL :type src_security_group_group_id: string DCNL :param src_security_group_group_id: The ID of the security DCNL group you are granting access to.  Can be used instead of DCNL src_security_group_name DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def authorize_security_group_egress(self, group_id, ip_protocol, from_port=None, to_port=None, src_group_id=None, cidr_ip=None, dry_run=False): DCNL 'The action adds one or more egress rules to a VPC security DCNL group. Specifically, this action permits instances in a DCNL security group to send traffic to one or more destination DCNL CIDR IP address ranges, or to one or more destination DCNL security groups in the same VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def revoke_security_group_deprecated(self, group_name, src_security_group_name=None, src_security_group_owner_id=None, ip_protocol=None, from_port=None, to_port=None, cidr_ip=None, dry_run=False): DCNL 'NOTE: This method uses the old-style request parameters DCNL that did not allow a port to be specified when DCNL authorizing a group. DCNL Remove an existing rule from an existing security group. DCNL You need to pass in either src_security_group_name and DCNL src_security_group_owner_id OR ip_protocol, from_port, to_port, DCNL and cidr_ip.  In other words, either you are revoking another DCNL group or you are revoking some ip-based rule. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are removing DCNL the rule from. DCNL :type src_security_group_name: string DCNL :param src_security_group_name: The name of the security group you are DCNL revoking access to. DCNL :type src_security_group_owner_id: string DCNL :param src_security_group_owner_id: The ID of the owner of the security DCNL group you are revoking access to. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp DCNL :type from_port: int DCNL :param from_port: The beginning port number you are disabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are disabling DCNL :type to_port: string DCNL :param to_port: The CIDR block you are revoking access to. DCNL http://goo.gl/Yj5QC DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def revoke_security_group(self, group_name=None, src_security_group_name=None, src_security_group_owner_id=None, ip_protocol=None, from_port=None, to_port=None, cidr_ip=None, group_id=None, src_security_group_group_id=None, dry_run=False): DCNL 'Remove an existing rule from an existing security group. DCNL You need to pass in either src_security_group_name and DCNL src_security_group_owner_id OR ip_protocol, from_port, to_port, DCNL and cidr_ip.  In other words, either you are revoking another DCNL group or you are revoking some ip-based rule. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are removing DCNL the rule from. DCNL :type src_security_group_name: string DCNL :param src_security_group_name: The name of the security group you are DCNL revoking access to. DCNL :type src_security_group_owner_id: string DCNL :param src_security_group_owner_id: The ID of the owner of the security DCNL group you are revoking access to. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp DCNL :type from_port: int DCNL :param from_port: The beginning port number you are disabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are disabling DCNL :type cidr_ip: string DCNL :param cidr_ip: The CIDR block you are revoking access to. DCNL See http://goo.gl/Yj5QC DCNL :type group_id: string DCNL :param group_id: ID of the EC2 or VPC security group to DCNL modify.  This is required for VPC security groups and can DCNL be used instead of group_name for EC2 security groups. DCNL :type src_security_group_group_id: string DCNL :param src_security_group_group_id: The ID of the security group DCNL for which you are revoking access.  Can be used instead DCNL of src_security_group_name DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def revoke_security_group_egress(self, group_id, ip_protocol, from_port=None, to_port=None, src_group_id=None, cidr_ip=None, dry_run=False): DCNL 'Remove an existing egress rule from an existing VPC security DCNL group.  You need to pass in an ip_protocol, from_port and DCNL to_port range only if the protocol you are using is DCNL port-based. You also need to pass in either a src_group_id or DCNL cidr_ip. DCNL :type group_name: string DCNL :param group_id:  The name of the security group you are removing DCNL the rule from. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp | -1 DCNL :type from_port: int DCNL :param from_port: The beginning port number you are disabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are disabling DCNL :type src_group_id: src_group_id DCNL :param src_group_id: The source security group you are DCNL revoking access to. DCNL :type cidr_ip: string DCNL :param cidr_ip: The CIDR block you are revoking access to. DCNL See http://goo.gl/Yj5QC DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful.'
def get_all_regions(self, region_names=None, filters=None, dry_run=False): DCNL 'Get all available regions for the EC2 service. DCNL :type region_names: list of str DCNL :param region_names: Names of regions to limit output DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.regioninfo.RegionInfo`'
def get_all_reserved_instances_offerings(self, reserved_instances_offering_ids=None, instance_type=None, availability_zone=None, product_description=None, filters=None, instance_tenancy=None, offering_type=None, include_marketplace=None, min_duration=None, max_duration=None, max_instance_count=None, next_token=None, max_results=None, dry_run=False): DCNL 'Describes Reserved Instance offerings that are available for purchase. DCNL :type reserved_instances_offering_ids: list DCNL :param reserved_instances_id: One or more Reserved Instances DCNL offering IDs. DCNL :type instance_type: str DCNL :param instance_type: Displays Reserved Instances of the specified DCNL instance type. DCNL :type availability_zone: str DCNL :param availability_zone: Displays Reserved Instances within the DCNL specified Availability Zone. DCNL :type product_description: str DCNL :param product_description: Displays Reserved Instances with the DCNL specified product description. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type instance_tenancy: string DCNL :param instance_tenancy: The tenancy of the Reserved Instance offering. DCNL A Reserved Instance with tenancy of dedicated will run on DCNL single-tenant hardware and can only be launched within a VPC. DCNL :type offering_type: string DCNL :param offering_type: The Reserved Instance offering type.  Valid DCNL Values: `"Heavy Utilization" | "Medium Utilization" | "Light DCNL Utilization"` DCNL :type include_marketplace: bool DCNL :param include_marketplace: Include Marketplace offerings in the DCNL response. DCNL :type min_duration: int :param min_duration: Minimum duration (in DCNL seconds) to filter when searching for offerings. DCNL :type max_duration: int DCNL :param max_duration: Maximum duration (in seconds) to filter when DCNL searching for offerings. DCNL :type max_instance_count: int DCNL :param max_instance_count: Maximum number of instances to filter when DCNL searching for offerings. DCNL :type next_token: string DCNL :param next_token: Token to use when requesting the next paginated set DCNL of offerings. DCNL :type max_results: int DCNL :param max_results: Maximum number of offerings to return per call. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of DCNL :class:`boto.ec2.reservedinstance.ReservedInstancesOffering`.'
def get_all_reserved_instances(self, reserved_instances_id=None, filters=None, dry_run=False): DCNL 'Describes one or more of the Reserved Instances that you purchased. DCNL :type reserved_instance_ids: list DCNL :param reserved_instance_ids: A list of the reserved instance ids that DCNL will be returned. If not provided, all reserved instances DCNL will be returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.reservedinstance.ReservedInstance`'
def purchase_reserved_instance_offering(self, reserved_instances_offering_id, instance_count=1, limit_price=None, dry_run=False): DCNL 'Purchase a Reserved Instance for use with your account. DCNL ** CAUTION ** DCNL This request can result in large amounts of money being charged to your DCNL AWS account.  Use with caution! DCNL :type reserved_instances_offering_id: string DCNL :param reserved_instances_offering_id: The offering ID of the Reserved DCNL Instance to purchase DCNL :type instance_count: int DCNL :param instance_count: The number of Reserved Instances to purchase. DCNL Default value is 1. DCNL :type limit_price: tuple DCNL :param instance_count: Limit the price on the total order. DCNL Must be a tuple of (amount, currency_code), for example: DCNL (100.0, \'USD\'). DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.reservedinstance.ReservedInstance` DCNL :return: The newly created Reserved Instance'
def create_reserved_instances_listing(self, reserved_instances_id, instance_count, price_schedules, client_token, dry_run=False): DCNL 'Creates a new listing for Reserved Instances. DCNL Creates a new listing for Amazon EC2 Reserved Instances that will be DCNL sold in the Reserved Instance Marketplace. You can submit one Reserved DCNL Instance listing at a time. DCNL The Reserved Instance Marketplace matches sellers who want to resell DCNL Reserved Instance capacity that they no longer need with buyers who DCNL want to purchase additional capacity. Reserved Instances bought and DCNL sold through the Reserved Instance Marketplace work like any other DCNL Reserved Instances. DCNL If you want to sell your Reserved Instances, you must first register as DCNL a Seller in the Reserved Instance Marketplace. After completing the DCNL registration process, you can create a Reserved Instance Marketplace DCNL listing of some or all of your Reserved Instances, and specify the DCNL upfront price you want to receive for them. Your Reserved Instance DCNL listings then become available for purchase. DCNL :type reserved_instances_id: string DCNL :param reserved_instances_id: The ID of the Reserved Instance that DCNL will be listed. DCNL :type instance_count: int DCNL :param instance_count: The number of instances that are a part of a DCNL Reserved Instance account that will be listed in the Reserved DCNL Instance Marketplace. This number should be less than or equal to DCNL the instance count associated with the Reserved Instance ID DCNL specified in this call. DCNL :type price_schedules: List of tuples DCNL :param price_schedules: A list specifying the price of the Reserved DCNL Instance for each month remaining in the Reserved Instance term. DCNL Each tuple contains two elements, the price and the term.  For DCNL example, for an instance that 11 months remaining in its term, DCNL we can have a price schedule with an upfront price of $2.50. DCNL At 8 months remaining we can drop the price down to $2.00. DCNL This would be expressed as:: DCNL price_schedules=[(\'2.50\', 11), (\'2.00\', 8)] DCNL :type client_token: string DCNL :param client_token: Unique, case-sensitive identifier you provide DCNL to ensure idempotency of the request.  Maximum 64 ASCII characters. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of DCNL :class:`boto.ec2.reservedinstance.ReservedInstanceListing`'
def cancel_reserved_instances_listing(self, reserved_instances_listing_ids=None, dry_run=False): DCNL 'Cancels the specified Reserved Instance listing. DCNL :type reserved_instances_listing_ids: List of strings DCNL :param reserved_instances_listing_ids: The ID of the DCNL Reserved Instance listing to be cancelled. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of DCNL :class:`boto.ec2.reservedinstance.ReservedInstanceListing`'
def modify_reserved_instances(self, client_token, reserved_instance_ids, target_configurations): DCNL 'Modifies the specified Reserved Instances. DCNL :type client_token: string DCNL :param client_token: A unique, case-sensitive, token you provide to DCNL ensure idempotency of your modification request. DCNL :type reserved_instance_ids: List of strings DCNL :param reserved_instance_ids: The IDs of the Reserved Instances to DCNL modify. DCNL :type target_configurations: List of :class:`boto.ec2.reservedinstance.ReservedInstancesConfiguration` DCNL :param target_configurations: The configuration settings for the DCNL modified Reserved Instances. DCNL :rtype: string DCNL :return: The unique ID for the submitted modification request.'
def describe_reserved_instances_modifications(self, reserved_instances_modification_ids=None, next_token=None, filters=None): DCNL 'A request to describe the modifications made to Reserved Instances in DCNL your account. DCNL :type reserved_instances_modification_ids: list DCNL :param reserved_instances_modification_ids: An optional list of DCNL Reserved Instances modification IDs to describe. DCNL :type next_token: str DCNL :param next_token: A string specifying the next paginated set DCNL of results to return. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.reservedinstance.ReservedInstance`'
def monitor_instances(self, instance_ids, dry_run=False): DCNL 'Enable detailed CloudWatch monitoring for the supplied instances. DCNL :type instance_id: list of strings DCNL :param instance_id: The instance ids DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`'
def monitor_instance(self, instance_id, dry_run=False): DCNL 'Deprecated Version, maintained for backward compatibility. DCNL Enable detailed CloudWatch monitoring for the supplied instance. DCNL :type instance_id: string DCNL :param instance_id: The instance id DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`'
def unmonitor_instances(self, instance_ids, dry_run=False): DCNL 'Disable CloudWatch monitoring for the supplied instance. DCNL :type instance_id: list of string DCNL :param instance_id: The instance id DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`'
def unmonitor_instance(self, instance_id, dry_run=False): DCNL 'Deprecated Version, maintained for backward compatibility. DCNL Disable detailed CloudWatch monitoring for the supplied instance. DCNL :type instance_id: string DCNL :param instance_id: The instance id DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`'
def bundle_instance(self, instance_id, s3_bucket, s3_prefix, s3_upload_policy, dry_run=False): DCNL 'Bundle Windows instance. DCNL :type instance_id: string DCNL :param instance_id: The instance id DCNL :type s3_bucket: string DCNL :param s3_bucket: The bucket in which the AMI should be stored. DCNL :type s3_prefix: string DCNL :param s3_prefix: The beginning of the file name for the AMI. DCNL :type s3_upload_policy: string DCNL :param s3_upload_policy: Base64 encoded policy that specifies condition DCNL and permissions for Amazon EC2 to upload the DCNL user\'s image into Amazon S3. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_bundle_tasks(self, bundle_ids=None, filters=None, dry_run=False): DCNL 'Retrieve current bundling tasks. If no bundle id is specified, all DCNL tasks are retrieved. DCNL :type bundle_ids: list DCNL :param bundle_ids: A list of strings containing identifiers for DCNL previously created bundling tasks. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def cancel_bundle_task(self, bundle_id, dry_run=False): DCNL 'Cancel a previously submitted bundle task DCNL :type bundle_id: string DCNL :param bundle_id: The identifier of the bundle task to cancel. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_password_data(self, instance_id, dry_run=False): DCNL 'Get encrypted administrator password for a Windows instance. DCNL :type instance_id: string DCNL :param instance_id: The identifier of the instance to retrieve the DCNL password for. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_placement_groups(self, groupnames=None, filters=None, dry_run=False): DCNL 'Get all placement groups associated with your account in a region. DCNL :type groupnames: list DCNL :param groupnames: A list of the names of placement groups to retrieve. DCNL If not provided, all placement groups will be DCNL returned. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.placementgroup.PlacementGroup`'
def create_placement_group(self, name, strategy='cluster', dry_run=False): DCNL 'Create a new placement group for your account. DCNL This will create the placement group within the region you DCNL are currently connected to. DCNL :type name: string DCNL :param name: The name of the new placement group DCNL :type strategy: string DCNL :param strategy: The placement strategy of the new placement group. DCNL Currently, the only acceptable value is "cluster". DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def delete_placement_group(self, name, dry_run=False): DCNL 'Delete a placement group from your account. DCNL :type key_name: string DCNL :param key_name: The name of the keypair to delete DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_tags(self, filters=None, dry_run=False, max_results=None): DCNL 'Retrieve all the metadata tags associated with your account. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.tag.Tag` objects'
def create_tags(self, resource_ids, tags, dry_run=False): DCNL 'Create new metadata tags for the specified resource ids. DCNL :type resource_ids: list DCNL :param resource_ids: List of strings DCNL :type tags: dict DCNL :param tags: A dictionary containing the name/value pairs. DCNL If you want to create only a tag name, the DCNL value for that tag should be the empty string DCNL (e.g. \'\'). DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def delete_tags(self, resource_ids, tags, dry_run=False): DCNL 'Delete metadata tags for the specified resource ids. DCNL :type resource_ids: list DCNL :param resource_ids: List of strings DCNL :type tags: dict or list DCNL :param tags: Either a dictionary containing name/value pairs DCNL or a list containing just tag names. DCNL If you pass in a dictionary, the values must DCNL match the actual tag values or the tag will DCNL not be deleted.  If you pass in a value of None DCNL for the tag value, all tags with that name will DCNL be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_network_interfaces(self, network_interface_ids=None, filters=None, dry_run=False): DCNL 'Retrieve all of the Elastic Network Interfaces (ENI\'s) DCNL associated with your account. DCNL :type network_interface_ids: list DCNL :param network_interface_ids: a list of strings representing ENI IDs DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit DCNL the results returned.  Filters are provided DCNL in the form of a dictionary consisting of DCNL filter names as the key and filter values DCNL as the value.  The set of allowable filter DCNL names/values is dependent on the request DCNL being performed.  Check the EC2 API guide DCNL for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.networkinterface.NetworkInterface`'
def create_network_interface(self, subnet_id, private_ip_address=None, description=None, groups=None, dry_run=False): DCNL 'Creates a network interface in the specified subnet. DCNL :type subnet_id: str DCNL :param subnet_id: The ID of the subnet to associate with the DCNL network interface. DCNL :type private_ip_address: str DCNL :param private_ip_address: The private IP address of the DCNL network interface.  If not supplied, one will be chosen DCNL for you. DCNL :type description: str DCNL :param description: The description of the network interface. DCNL :type groups: list DCNL :param groups: Lists the groups for use by the network interface. DCNL This can be either a list of group ID\'s or a list of DCNL :class:`boto.ec2.securitygroup.SecurityGroup` objects. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.networkinterface.NetworkInterface` DCNL :return: The newly created network interface.'
def attach_network_interface(self, network_interface_id, instance_id, device_index, dry_run=False): DCNL 'Attaches a network interface to an instance. DCNL :type network_interface_id: str DCNL :param network_interface_id: The ID of the network interface to attach. DCNL :type instance_id: str DCNL :param instance_id: The ID of the instance that will be attached DCNL to the network interface. DCNL :type device_index: int DCNL :param device_index: The index of the device for the network DCNL interface attachment on the instance. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def detach_network_interface(self, attachment_id, force=False, dry_run=False): DCNL 'Detaches a network interface from an instance. DCNL :type attachment_id: str DCNL :param attachment_id: The ID of the attachment. DCNL :type force: bool DCNL :param force: Set to true to force a detachment. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def delete_network_interface(self, network_interface_id, dry_run=False): DCNL 'Delete the specified network interface. DCNL :type network_interface_id: str DCNL :param network_interface_id: The ID of the network interface to delete. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_instance_types(self): DCNL 'Get all instance_types available on this cloud (eucalyptus specific) DCNL :rtype: list of :class:`boto.ec2.instancetype.InstanceType` DCNL :return: The requested InstanceType objects'
def copy_image(self, source_region, source_image_id, name=None, description=None, client_token=None, dry_run=False, encrypted=None, kms_key_id=None): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: :class:`boto.ec2.image.CopyImage` DCNL :return: Object containing the image_id of the copied image.'
def describe_account_attributes(self, attribute_names=None, dry_run=False): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def describe_vpc_attribute(self, vpc_id, attribute=None, dry_run=False): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def modify_vpc_attribute(self, vpc_id, enable_dns_support=None, enable_dns_hostnames=None, dry_run=False): DCNL ':type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_classic_link_instances(self, instance_ids=None, filters=None, dry_run=False, max_results=None, next_token=None): DCNL 'Get all of your linked EC2-Classic instances. This request only DCNL returns information about EC2-Classic instances linked  to DCNL a VPC through ClassicLink DCNL :type instance_ids: list DCNL :param instance_ids: A list of strings of instance IDs. Must be DCNL instances linked to a VPC through ClassicLink. DCNL :type filters: dict DCNL :param filters: Optional filters that can be used to limit the DCNL results returned.  Filters are provided in the form of a DCNL dictionary consisting of filter names as the key and DCNL filter values as the value.  The set of allowable filter DCNL names/values is dependent on the request being performed. DCNL Check the EC2 API guide for details. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type max_results: int DCNL :param max_results: The maximum number of paginated instance DCNL items per response. DCNL :rtype: list DCNL :return: A list of  :class:`boto.ec2.instance.Instance`'
def __init__(self, load_balancer=None, description=None, state=None, instance_id=None, reason_code=None): DCNL ':ivar boto.ec2.elb.loadbalancer.LoadBalancer load_balancer: The DCNL load balancer this instance is registered to. DCNL :ivar str description: A description of the instance. DCNL :ivar str instance_id: The EC2 instance ID. DCNL :ivar str reason_code: Provides information about the cause of DCNL an OutOfService instance. Specifically, it indicates whether the DCNL cause is Elastic Load Balancing or the instance behind the DCNL LoadBalancer. DCNL :ivar str state: Specifies the current state of the instance.'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', security_token=None, validate_certs=True, profile_name=None): DCNL 'Init method to create a new connection to EC2 Load Balancing Service. DCNL .. note:: The region argument is overridden by the region specified in DCNL the boto configuration file.'
def get_all_load_balancers(self, load_balancer_names=None, marker=None): DCNL 'Retrieve all load balancers associated with your account. DCNL :type load_balancer_names: list DCNL :keyword load_balancer_names: An optional list of load balancer names. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :rtype: :py:class:`boto.resultset.ResultSet` DCNL :return: A ResultSet containing instances of DCNL :class:`boto.ec2.elb.loadbalancer.LoadBalancer`'
def create_load_balancer(self, name, zones, listeners=None, subnets=None, security_groups=None, scheme='internet-facing', complex_listeners=None): DCNL 'Create a new load balancer for your account. By default the load DCNL balancer will be created in EC2. To create a load balancer inside a DCNL VPC, parameter zones must be set to None and subnets must not be None. DCNL The load balancer will be automatically created under the VPC that DCNL contains the subnet(s) specified. DCNL :type name: string DCNL :param name: The mnemonic name associated with the new load balancer DCNL :type zones: List of strings DCNL :param zones: The names of the availability zone(s) to add. DCNL :type listeners: List of tuples DCNL :param listeners: Each tuple contains three or four values, DCNL (LoadBalancerPortNumber, InstancePortNumber, Protocol, DCNL [SSLCertificateId]) where LoadBalancerPortNumber and DCNL InstancePortNumber are integer values between 1 and 65535, DCNL Protocol is a string containing either \'TCP\', \'SSL\', HTTP\', or DCNL \'HTTPS\'; SSLCertificateID is the ARN of a AWS IAM DCNL certificate, and must be specified when doing HTTPS. DCNL :type subnets: list of strings DCNL :param subnets: A list of subnet IDs in your VPC to attach to DCNL your LoadBalancer. DCNL :type security_groups: list of strings DCNL :param security_groups: The security groups assigned to your DCNL LoadBalancer within your VPC. DCNL :type scheme: string DCNL :param scheme: The type of a LoadBalancer.  By default, Elastic DCNL Load Balancing creates an internet-facing LoadBalancer with DCNL a publicly resolvable DNS name, which resolves to public IP DCNL addresses. DCNL Specify the value internal for this option to create an DCNL internal LoadBalancer with a DNS name that resolves to DCNL private IP addresses. DCNL This option is only available for LoadBalancers attached DCNL to an Amazon VPC. DCNL :type complex_listeners: List of tuples DCNL :param complex_listeners: Each tuple contains four or five values, DCNL (LoadBalancerPortNumber, InstancePortNumber, Protocol, DCNL InstanceProtocol, SSLCertificateId). DCNL Where: DCNL - LoadBalancerPortNumber and InstancePortNumber are integer DCNL values between 1 and 65535 DCNL - Protocol and InstanceProtocol is a string containing DCNL either \'TCP\', DCNL \'SSL\', \'HTTP\', or \'HTTPS\' DCNL - SSLCertificateId is the ARN of an SSL certificate loaded into DCNL AWS IAM DCNL :rtype: :class:`boto.ec2.elb.loadbalancer.LoadBalancer` DCNL :return: The newly created DCNL :class:`boto.ec2.elb.loadbalancer.LoadBalancer`'
def create_load_balancer_listeners(self, name, listeners=None, complex_listeners=None): DCNL 'Creates a Listener (or group of listeners) for an existing DCNL Load Balancer DCNL :type name: string DCNL :param name: The name of the load balancer to create the listeners for DCNL :type listeners: List of tuples DCNL :param listeners: Each tuple contains three or four values, DCNL (LoadBalancerPortNumber, InstancePortNumber, Protocol, DCNL [SSLCertificateId]) where LoadBalancerPortNumber and DCNL InstancePortNumber are integer values between 1 and 65535, DCNL Protocol is a string containing either \'TCP\', \'SSL\', HTTP\', or DCNL \'HTTPS\'; SSLCertificateID is the ARN of a AWS IAM DCNL certificate, and must be specified when doing HTTPS. DCNL :type complex_listeners: List of tuples DCNL :param complex_listeners: Each tuple contains four or five values, DCNL (LoadBalancerPortNumber, InstancePortNumber, Protocol, DCNL InstanceProtocol, SSLCertificateId). DCNL Where: DCNL - LoadBalancerPortNumber and InstancePortNumber are integer DCNL values between 1 and 65535 DCNL - Protocol and InstanceProtocol is a string containing DCNL either \'TCP\', DCNL \'SSL\', \'HTTP\', or \'HTTPS\' DCNL - SSLCertificateId is the ARN of an SSL certificate loaded into DCNL AWS IAM DCNL :return: The status of the request'
def delete_load_balancer(self, name): DCNL 'Delete a Load Balancer from your account. DCNL :type name: string DCNL :param name: The name of the Load Balancer to delete'
def delete_load_balancer_listeners(self, name, ports): DCNL 'Deletes a load balancer listener (or group of listeners) DCNL :type name: string DCNL :param name: The name of the load balancer to create the listeners for DCNL :type ports: List int DCNL :param ports: Each int represents the port on the ELB to be removed DCNL :return: The status of the request'
def enable_availability_zones(self, load_balancer_name, zones_to_add): DCNL 'Add availability zones to an existing Load Balancer DCNL All zones must be in the same region as the Load Balancer DCNL Adding zones that are already registered with the Load Balancer DCNL has no effect. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type zones: List of strings DCNL :param zones: The name of the zone(s) to add. DCNL :rtype: List of strings DCNL :return: An updated list of zones for this Load Balancer.'
def disable_availability_zones(self, load_balancer_name, zones_to_remove): DCNL 'Remove availability zones from an existing Load Balancer. DCNL All zones must be in the same region as the Load Balancer. DCNL Removing zones that are not registered with the Load Balancer DCNL has no effect. DCNL You cannot remove all zones from an Load Balancer. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type zones: List of strings DCNL :param zones: The name of the zone(s) to remove. DCNL :rtype: List of strings DCNL :return: An updated list of zones for this Load Balancer.'
def modify_lb_attribute(self, load_balancer_name, attribute, value): DCNL 'Changes an attribute of a Load Balancer DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change. DCNL * crossZoneLoadBalancing - Boolean (true) DCNL * connectingSettings - :py:class:`ConnectionSettingAttribute` instance DCNL * accessLog - :py:class:`AccessLogAttribute` instance DCNL * connectionDraining - :py:class:`ConnectionDrainingAttribute` instance DCNL :type value: string DCNL :param value: The new value for the attribute DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def get_all_lb_attributes(self, load_balancer_name): DCNL 'Gets all Attributes of a Load Balancer DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :rtype: boto.ec2.elb.attribute.LbAttributes DCNL :return: The attribute object of the ELB.'
def get_lb_attribute(self, load_balancer_name, attribute): DCNL 'Gets an attribute of a Load Balancer DCNL This will make an EC2 call for each method call. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type attribute: string DCNL :param attribute: The attribute you wish to see. DCNL * accessLog - :py:class:`AccessLogAttribute` instance DCNL * crossZoneLoadBalancing - Boolean DCNL * connectingSettings - :py:class:`ConnectionSettingAttribute` instance DCNL * connectionDraining - :py:class:`ConnectionDrainingAttribute` DCNL instance DCNL :rtype: Attribute dependent DCNL :return: The new value for the attribute'
def register_instances(self, load_balancer_name, instances): DCNL 'Add new Instances to an existing Load Balancer. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type instances: List of strings DCNL :param instances: The instance ID\'s of the EC2 instances to add. DCNL :rtype: List of strings DCNL :return: An updated list of instances for this Load Balancer.'
def deregister_instances(self, load_balancer_name, instances): DCNL 'Remove Instances from an existing Load Balancer. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type instances: List of strings DCNL :param instances: The instance ID\'s of the EC2 instances to remove. DCNL :rtype: List of strings DCNL :return: An updated list of instances for this Load Balancer.'
def describe_instance_health(self, load_balancer_name, instances=None): DCNL 'Get current state of all Instances registered to an Load Balancer. DCNL :type load_balancer_name: string DCNL :param load_balancer_name: The name of the Load Balancer DCNL :type instances: List of strings DCNL :param instances: The instance ID\'s of the EC2 instances DCNL to return status for.  If not provided, DCNL the state of all instances will be returned. DCNL :rtype: List of :class:`boto.ec2.elb.instancestate.InstanceState` DCNL :return: list of state info for instances in this Load Balancer.'
def configure_health_check(self, name, health_check): DCNL 'Define a health check for the EndPoints. DCNL :type name: string DCNL :param name: The mnemonic name associated with the load balancer DCNL :type health_check: :class:`boto.ec2.elb.healthcheck.HealthCheck` DCNL :param health_check: A HealthCheck object populated with the desired DCNL values. DCNL :rtype: :class:`boto.ec2.elb.healthcheck.HealthCheck` DCNL :return: The updated :class:`boto.ec2.elb.healthcheck.HealthCheck`'
def set_lb_listener_SSL_certificate(self, lb_name, lb_port, ssl_certificate_id): DCNL 'Sets the certificate that terminates the specified listener\'s SSL DCNL connections. The specified certificate replaces any prior certificate DCNL that was used on the same LoadBalancer and port.'
def create_app_cookie_stickiness_policy(self, name, lb_name, policy_name): DCNL 'Generates a stickiness policy with sticky session lifetimes that follow DCNL that of an application-generated cookie. This policy can only be DCNL associated with HTTP listeners. DCNL This policy is similar to the policy created by DCNL CreateLBCookieStickinessPolicy, except that the lifetime of the special DCNL Elastic Load Balancing cookie follows the lifetime of the DCNL application-generated cookie specified in the policy configuration. The DCNL load balancer only inserts a new stickiness cookie when the application DCNL response includes a new application cookie. DCNL If the application cookie is explicitly removed or expires, the session DCNL stops being sticky until a new application cookie is issued.'
def create_lb_cookie_stickiness_policy(self, cookie_expiration_period, lb_name, policy_name): DCNL 'Generates a stickiness policy with sticky session lifetimes controlled DCNL by the lifetime of the browser (user-agent) or a specified expiration DCNL period. This policy can only be associated only with HTTP listeners. DCNL When a load balancer implements this policy, the load balancer uses a DCNL special cookie to track the backend server instance for each request. DCNL When the load balancer receives a request, it first checks to see if DCNL this cookie is present in the request. If so, the load balancer sends DCNL the request to the application server specified in the cookie. If not, DCNL the load balancer sends the request to a server that is chosen based on DCNL the existing load balancing algorithm. DCNL A cookie is inserted into the response for binding subsequent requests DCNL from the same user to that server. The validity of the cookie is based DCNL on the cookie expiration time, which is specified in the policy DCNL configuration. DCNL None may be passed for cookie_expiration_period.'
def create_lb_policy(self, lb_name, policy_name, policy_type, policy_attributes): DCNL 'Creates a new policy that contains the necessary attributes DCNL depending on the policy type. Policies are settings that are DCNL saved for your load balancer and that can be applied to the DCNL front-end listener, or the back-end application server.'
def delete_lb_policy(self, lb_name, policy_name): DCNL 'Deletes a policy from the LoadBalancer. The specified policy must not DCNL be enabled for any listeners.'
def set_lb_policies_of_listener(self, lb_name, lb_port, policies): DCNL 'Associates, updates, or disables a policy with a listener on the load DCNL balancer. Currently only zero (0) or one (1) policy can be associated DCNL with a listener.'
def set_lb_policies_of_backend_server(self, lb_name, instance_port, policies): DCNL 'Replaces the current set of policies associated with a port on which DCNL the back-end server is listening with a new set of policies.'
def apply_security_groups_to_lb(self, name, security_groups): DCNL 'Associates one or more security groups with the load balancer. DCNL The provided security groups will override any currently applied DCNL security groups. DCNL :type name: string DCNL :param name: The name of the Load Balancer DCNL :type security_groups: List of strings DCNL :param security_groups: The name of the security group(s) to add. DCNL :rtype: List of strings DCNL :return: An updated list of security groups for this Load Balancer.'
def attach_lb_to_subnets(self, name, subnets): DCNL 'Attaches load balancer to one or more subnets. DCNL Attaching subnets that are already registered with the DCNL Load Balancer has no effect. DCNL :type name: string DCNL :param name: The name of the Load Balancer DCNL :type subnets: List of strings DCNL :param subnets: The name of the subnet(s) to add. DCNL :rtype: List of strings DCNL :return: An updated list of subnets for this Load Balancer.'
def detach_lb_from_subnets(self, name, subnets): DCNL 'Detaches load balancer from one or more subnets. DCNL :type name: string DCNL :param name: The name of the Load Balancer DCNL :type subnets: List of strings DCNL :param subnets: The name of the subnet(s) to detach. DCNL :rtype: List of strings DCNL :return: An updated list of subnets for this Load Balancer.'
def __init__(self, access_point=None, interval=30, target=None, healthy_threshold=3, timeout=5, unhealthy_threshold=5): DCNL ':ivar str access_point: The name of the load balancer this DCNL health check is associated with. DCNL :ivar int interval: Specifies how many seconds there are between DCNL health checks. DCNL :ivar str target: Determines what to check on an instance. See the DCNL Amazon HealthCheck_ documentation for possible Target values. DCNL .. _HealthCheck: http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/API_HealthCheck.html'
def update(self): DCNL 'In the case where you have accessed an existing health check on a DCNL load balancer, this method applies this instance\'s health check DCNL values to the load balancer it is attached to. DCNL .. note:: This method will not do anything if the :py:attr:`access_point` DCNL attribute isn\'t set, as is the case with a newly instantiated DCNL HealthCheck instance.'
def __init__(self, connection=None, name=None, endpoints=None): DCNL ':ivar boto.ec2.elb.ELBConnection connection: The connection this load DCNL balancer was instance was instantiated from. DCNL :ivar list listeners: A list of tuples in the form of DCNL ``(<Inbound port>, <Outbound port>, <Protocol>)`` DCNL :ivar boto.ec2.elb.healthcheck.HealthCheck health_check: The health DCNL check policy for this load balancer. DCNL :ivar boto.ec2.elb.policies.Policies policies: Cookie stickiness and DCNL other policies. DCNL :ivar str name: The name of the Load Balancer. DCNL :ivar str dns_name: The external DNS name for the balancer. DCNL :ivar str created_time: A date+time string showing when the DCNL load balancer was created. DCNL :ivar list instances: A list of :py:class:`boto.ec2.instanceinfo.InstanceInfo` DCNL instances, representing the EC2 instances this load balancer is DCNL distributing requests to. DCNL :ivar list availability_zones: The availability zones this balancer DCNL covers. DCNL :ivar str canonical_hosted_zone_name: Current CNAME for the balancer. DCNL :ivar str canonical_hosted_zone_name_id: The Route 53 hosted zone DCNL ID of this balancer. Needed when creating an Alias record in a DCNL Route 53 hosted zone. DCNL :ivar boto.ec2.elb.securitygroup.SecurityGroup source_security_group: DCNL The security group that you can use as part of your inbound rules DCNL for your load balancer back-end instances to disallow traffic DCNL from sources other than your load balancer. DCNL :ivar list subnets: A list of subnets this balancer is on. DCNL :ivar list security_groups: A list of additional security groups that DCNL have been applied. DCNL :ivar str vpc_id: The ID of the VPC that this ELB resides within. DCNL :ivar list backends: A list of :py:class:`boto.ec2.elb.loadbalancer.Backend DCNL back-end server descriptions.'
def enable_zones(self, zones): DCNL 'Enable availability zones to this Access Point. DCNL All zones must be in the same region as the Access Point. DCNL :type zones: string or List of strings DCNL :param zones: The name of the zone(s) to add.'
def disable_zones(self, zones): DCNL 'Disable availability zones from this Access Point. DCNL :type zones: string or List of strings DCNL :param zones: The name of the zone(s) to add.'
def get_attributes(self, force=False): DCNL 'Gets the LbAttributes.  The Attributes will be cached. DCNL :type force: bool DCNL :param force: Ignore cache value and reload. DCNL :rtype: boto.ec2.elb.attributes.LbAttributes DCNL :return: The LbAttribues object'
def is_cross_zone_load_balancing(self, force=False): DCNL 'Identifies if the ELB is current configured to do CrossZone Balancing. DCNL :type force: bool DCNL :param force: Ignore cache value and reload. DCNL :rtype: bool DCNL :return: True if balancing is enabled, False if not.'
def enable_cross_zone_load_balancing(self): DCNL 'Turns on CrossZone Load Balancing for this ELB. DCNL :rtype: bool DCNL :return: True if successful, False if not.'
def disable_cross_zone_load_balancing(self): DCNL 'Turns off CrossZone Load Balancing for this ELB. DCNL :rtype: bool DCNL :return: True if successful, False if not.'
def register_instances(self, instances): DCNL 'Adds instances to this load balancer. All instances must be in the same DCNL region as the load balancer. Adding endpoints that are already DCNL registered with the load balancer has no effect. DCNL :param list instances: List of instance IDs (strings) that you\'d like DCNL to add to this load balancer.'
def deregister_instances(self, instances): DCNL 'Remove instances from this load balancer. Removing instances that are DCNL not registered with the load balancer has no effect. DCNL :param list instances: List of instance IDs (strings) that you\'d like DCNL to remove from this load balancer.'
def delete(self): DCNL 'Delete this load balancer.'
def configure_health_check(self, health_check): DCNL 'Configures the health check behavior for the instances behind this DCNL load balancer. See :ref:`elb-configuring-a-health-check` for a DCNL walkthrough. DCNL :param boto.ec2.elb.healthcheck.HealthCheck health_check: A DCNL HealthCheck instance that tells the load balancer how to check DCNL its instances for health.'
def get_instance_health(self, instances=None): DCNL 'Returns a list of :py:class:`boto.ec2.elb.instancestate.InstanceState` DCNL objects, which show the health of the instances attached to this DCNL load balancer. DCNL :rtype: list DCNL :returns: A list of DCNL :py:class:`InstanceState <boto.ec2.elb.instancestate.InstanceState>` DCNL instances, representing the instances DCNL attached to this load balancer.'
def delete_policy(self, policy_name): DCNL 'Deletes a policy from the LoadBalancer. The specified policy must not DCNL be enabled for any listeners.'
def attach_subnets(self, subnets): DCNL 'Attaches load balancer to one or more subnets. DCNL Attaching subnets that are already registered with the DCNL Load Balancer has no effect. DCNL :type subnets: string or List of strings DCNL :param subnets: The name of the subnet(s) to add.'
def detach_subnets(self, subnets): DCNL 'Detaches load balancer from one or more subnets. DCNL :type subnets: string or List of strings DCNL :param subnets: The name of the subnet(s) to detach.'
def apply_security_groups(self, security_groups): DCNL 'Associates one or more security groups with the load balancer. DCNL The provided security groups will override any currently applied DCNL security groups. DCNL :type security_groups: string or List of strings DCNL :param security_groups: The name of the security group(s) to add.'
def update(self, validate=False, dry_run=False): DCNL 'Update the data associated with this ENI by querying EC2. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL ENI the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
def attach(self, instance_id, device_index, dry_run=False): DCNL 'Attach this ENI to an EC2 instance. DCNL :type instance_id: str DCNL :param instance_id: The ID of the EC2 instance to which it will DCNL be attached. DCNL :type device_index: int DCNL :param device_index: The interface nunber, N, on the instance (eg. ethN) DCNL :rtype: bool DCNL :return: True if successful'
def detach(self, force=False, dry_run=False): DCNL 'Detach this ENI from an EC2 instance. DCNL :type force: bool DCNL :param force: Forces detachment if the previous detachment DCNL attempt did not occur cleanly. DCNL :rtype: bool DCNL :return: True if successful'
def update(self, validate=False, dry_run=False): DCNL 'Update the data associated with this volume by querying EC2. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL volume the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
def delete(self, dry_run=False): DCNL 'Delete this EBS volume. DCNL :rtype: bool DCNL :return: True if successful'
def attach(self, instance_id, device, dry_run=False): DCNL 'Attach this EBS volume to an EC2 instance. DCNL :type instance_id: str DCNL :param instance_id: The ID of the EC2 instance to which it will DCNL be attached. DCNL :type device: str DCNL :param device: The device on the instance through which the DCNL volume will be exposed (e.g. /dev/sdh) DCNL :rtype: bool DCNL :return: True if successful'
def detach(self, force=False, dry_run=False): DCNL 'Detach this EBS volume from an EC2 instance. DCNL :type force: bool DCNL :param force: Forces detachment if the previous detachment DCNL attempt did not occur cleanly.  This option can lead to DCNL data loss or a corrupted file system. Use this option only DCNL as a last resort to detach a volume from a failed DCNL instance. The instance will not have an opportunity to DCNL flush file system caches nor file system meta data. If you DCNL use this option, you must perform file system check and DCNL repair procedures. DCNL :rtype: bool DCNL :return: True if successful'
def create_snapshot(self, description=None, dry_run=False): DCNL 'Create a snapshot of this EBS Volume. DCNL :type description: str DCNL :param description: A description of the snapshot. DCNL Limited to 256 characters. DCNL :rtype: :class:`boto.ec2.snapshot.Snapshot` DCNL :return: The created Snapshot object'
def volume_state(self): DCNL 'Returns the state of the volume.  Same value as the status attribute.'
def attachment_state(self): DCNL 'Get the attachment state.'
def snapshots(self, owner=None, restorable_by=None, dry_run=False): DCNL 'Get all snapshots related to this volume.  Note that this requires DCNL that all available snapshots for the account be retrieved from EC2 DCNL first and then the list is filtered client-side to contain only DCNL those for this volume. DCNL :type owner: str DCNL :param owner: If present, only the snapshots owned by the DCNL specified user will be returned.  Valid values are: DCNL * self DCNL * amazon DCNL * AWS Account ID DCNL :type restorable_by: str DCNL :param restorable_by: If present, only the snapshots that DCNL are restorable by the specified account id will be returned. DCNL :rtype: list of L{boto.ec2.snapshot.Snapshot} DCNL :return: The requested Snapshot objects'
def update(self, validate=False, dry_run=False): DCNL 'Update the data associated with this snapshot by querying EC2. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL snapshot the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
def create_volume(self, zone, size=None, volume_type=None, iops=None, dry_run=False): DCNL 'Create a new EBS Volume from this Snapshot DCNL :type zone: string or :class:`boto.ec2.zone.Zone` DCNL :param zone: The availability zone in which the Volume will be created. DCNL :type size: int DCNL :param size: The size of the new volume, in GiB. (optional). Defaults to DCNL the size of the snapshot. DCNL :type volume_type: string DCNL :param volume_type: The type of the volume. (optional).  Valid DCNL values are: standard | io1 | gp2. DCNL :type iops: int DCNL :param iops: The provisioned IOPs you want to associate with DCNL this volume. (optional)'
def __init__(self, connection=None, id=None, state=None): DCNL ':ivar str id: The instance\'s EC2 ID. DCNL :ivar str state: Specifies the current status of the instance.'
def release(self, dry_run=False): DCNL 'Free up this Elastic IP address. DCNL :see: :meth:`boto.ec2.connection.EC2Connection.release_address`'
def associate(self, instance_id=None, network_interface_id=None, private_ip_address=None, allow_reassociation=False, dry_run=False): DCNL 'Associate this Elastic IP address with a currently running instance. DCNL :see: :meth:`boto.ec2.connection.EC2Connection.associate_address`'
def disassociate(self, dry_run=False): DCNL 'Disassociate this Elastic IP address from a currently running instance. DCNL :see: :meth:`boto.ec2.connection.EC2Connection.disassociate_address`'
def update(self, validate=False, dry_run=False): DCNL 'Update the image\'s state information by making a call to fetch DCNL the current image attributes from the service. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL image the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
def run(self, min_count=1, max_count=1, key_name=None, security_groups=None, user_data=None, addressing_type=None, instance_type='m1.small', placement=None, kernel_id=None, ramdisk_id=None, monitoring_enabled=False, subnet_id=None, block_device_map=None, disable_api_termination=False, instance_initiated_shutdown_behavior=None, private_ip_address=None, placement_group=None, security_group_ids=None, additional_info=None, instance_profile_name=None, instance_profile_arn=None, tenancy=None, dry_run=False): DCNL 'Runs this instance. DCNL :type min_count: int DCNL :param min_count: The minimum number of instances to start DCNL :type max_count: int DCNL :param max_count: The maximum number of instances to start DCNL :type key_name: string DCNL :param key_name: The name of the key pair with which to DCNL launch instances. DCNL :type security_groups: list of strings DCNL :param security_groups: The names of the security groups with which to DCNL associate instances. DCNL :type user_data: string DCNL :param user_data: The Base64-encoded MIME user data to be made DCNL available to the instance(s) in this reservation. DCNL :type instance_type: string DCNL :param instance_type: The type of instance to run: DCNL * t1.micro DCNL * m1.small DCNL * m1.medium DCNL * m1.large DCNL * m1.xlarge DCNL * m3.medium DCNL * m3.large DCNL * m3.xlarge DCNL * m3.2xlarge DCNL * c1.medium DCNL * c1.xlarge DCNL * m2.xlarge DCNL * m2.2xlarge DCNL * m2.4xlarge DCNL * cr1.8xlarge DCNL * hi1.4xlarge DCNL * hs1.8xlarge DCNL * cc1.4xlarge DCNL * cg1.4xlarge DCNL * cc2.8xlarge DCNL * g2.2xlarge DCNL * c3.large DCNL * c3.xlarge DCNL * c3.2xlarge DCNL * c3.4xlarge DCNL * c3.8xlarge DCNL * c4.large DCNL * c4.xlarge DCNL * c4.2xlarge DCNL * c4.4xlarge DCNL * c4.8xlarge DCNL * i2.xlarge DCNL * i2.2xlarge DCNL * i2.4xlarge DCNL * i2.8xlarge DCNL * t2.micro DCNL * t2.small DCNL * t2.medium DCNL :type placement: string DCNL :param placement: The Availability Zone to launch the instance into. DCNL :type kernel_id: string DCNL :param kernel_id: The ID of the kernel with which to launch the DCNL instances. DCNL :type ramdisk_id: string DCNL :param ramdisk_id: The ID of the RAM disk with which to launch the DCNL instances. DCNL :type monitoring_enabled: bool DCNL :param monitoring_enabled: Enable CloudWatch monitoring on DCNL the instance. DCNL :type subnet_id: string DCNL :param subnet_id: The subnet ID within which to launch the instances DCNL for VPC. DCNL :type private_ip_address: string DCNL :param private_ip_address: If you\'re using VPC, you can DCNL optionally use this parameter to assign the instance a DCNL specific available IP address from the subnet (e.g., DCNL 10.0.0.25). DCNL :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping` DCNL :param block_device_map: A BlockDeviceMapping data structure DCNL describing the EBS volumes associated with the Image. DCNL :type disable_api_termination: bool DCNL :param disable_api_termination: If True, the instances will be locked DCNL and will not be able to be terminated via the API. DCNL :type instance_initiated_shutdown_behavior: string DCNL :param instance_initiated_shutdown_behavior: Specifies whether the DCNL instance stops or terminates on instance-initiated shutdown. DCNL Valid values are: DCNL * stop DCNL * terminate DCNL :type placement_group: string DCNL :param placement_group: If specified, this is the name of the placement DCNL group in which the instance(s) will be launched. DCNL :type additional_info: string DCNL :param additional_info: Specifies additional information to make DCNL available to the instance(s). DCNL :type security_group_ids: list of strings DCNL :param security_group_ids: The ID of the VPC security groups with DCNL which to associate instances. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: The name of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type instance_profile_arn: string DCNL :param instance_profile_arn: The Amazon resource name (ARN) of DCNL the IAM Instance Profile (IIP) to associate with the instances. DCNL :type tenancy: string DCNL :param tenancy: The tenancy of the instance you want to DCNL launch. An instance with a tenancy of \'dedicated\' runs on DCNL single-tenant hardware and can only be launched into a DCNL VPC. Valid values are:"default" or "dedicated". DCNL NOTE: To use dedicated tenancy you MUST specify a VPC DCNL subnet-ID as well. DCNL :rtype: Reservation DCNL :return: The :class:`boto.ec2.instance.Reservation` associated with DCNL the request for machines'
def update(self, validate=False, dry_run=False): DCNL 'Update the instance\'s state information by making a call to fetch DCNL the current instance attributes from the service. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL instance the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
def terminate(self, dry_run=False): DCNL 'Terminate the instance'
def stop(self, force=False, dry_run=False): DCNL 'Stop the instance DCNL :type force: bool DCNL :param force: Forces the instance to stop DCNL :rtype: list DCNL :return: A list of the instances stopped'
def start(self, dry_run=False): DCNL 'Start the instance.'
def get_console_output(self, dry_run=False): DCNL 'Retrieves the console output for the instance. DCNL :rtype: :class:`boto.ec2.instance.ConsoleOutput` DCNL :return: The console output as a ConsoleOutput object'
def use_ip(self, ip_address, dry_run=False): DCNL 'Associates an Elastic IP to the instance. DCNL :type ip_address: Either an instance of DCNL :class:`boto.ec2.address.Address` or a string. DCNL :param ip_address: The IP address to associate DCNL with the instance. DCNL :rtype: bool DCNL :return: True if successful'
def get_attribute(self, attribute, dry_run=False): DCNL 'Gets an attribute from this instance. DCNL :type attribute: string DCNL :param attribute: The attribute you need information about DCNL Valid choices are: DCNL * instanceType DCNL * kernel DCNL * ramdisk DCNL * userData DCNL * disableApiTermination DCNL * instanceInitiatedShutdownBehavior DCNL * rootDeviceName DCNL * blockDeviceMapping DCNL * productCodes DCNL * sourceDestCheck DCNL * groupSet DCNL * ebsOptimized DCNL :rtype: :class:`boto.ec2.image.InstanceAttribute` DCNL :return: An InstanceAttribute object representing the value of the DCNL attribute requested'
def modify_attribute(self, attribute, value, dry_run=False): DCNL 'Changes an attribute of this instance DCNL :type attribute: string DCNL :param attribute: The attribute you wish to change. DCNL * instanceType - A valid instance type (m1.small) DCNL * kernel - Kernel ID (None) DCNL * ramdisk - Ramdisk ID (None) DCNL * userData - Base64 encoded String (None) DCNL * disableApiTermination - Boolean (true) DCNL * instanceInitiatedShutdownBehavior - stop|terminate DCNL * sourceDestCheck - Boolean (true) DCNL * groupSet - Set of Security Groups or IDs DCNL * ebsOptimized - Boolean (false) DCNL :type value: string DCNL :param value: The new value for the attribute DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def reset_attribute(self, attribute, dry_run=False): DCNL 'Resets an attribute of this instance to its default value. DCNL :type attribute: string DCNL :param attribute: The attribute to reset. Valid values are: DCNL kernel|ramdisk DCNL :rtype: bool DCNL :return: Whether the operation succeeded or not'
def create_image(self, name, description=None, no_reboot=False, dry_run=False): DCNL 'Will create an AMI from the instance in the running or stopped DCNL state. DCNL :type name: string DCNL :param name: The name of the new image DCNL :type description: string DCNL :param description: An optional human-readable string describing DCNL the contents and purpose of the AMI. DCNL :type no_reboot: bool DCNL :param no_reboot: An optional flag indicating that the bundling process DCNL should not attempt to shutdown the instance before DCNL bundling.  If this flag is True, the responsibility DCNL of maintaining file system integrity is left to the DCNL owner of the instance. DCNL :rtype: string DCNL :return: The new image id'
def add_rule(self, ip_protocol, from_port, to_port, src_group_name, src_group_owner_id, cidr_ip, src_group_group_id, dry_run=False): DCNL 'Add a rule to the SecurityGroup object.  Note that this method DCNL only changes the local version of the object.  No information DCNL is sent to EC2.'
def remove_rule(self, ip_protocol, from_port, to_port, src_group_name, src_group_owner_id, cidr_ip, src_group_group_id, dry_run=False): DCNL 'Remove a rule to the SecurityGroup object.  Note that this method DCNL only changes the local version of the object.  No information DCNL is sent to EC2.'
def authorize(self, ip_protocol=None, from_port=None, to_port=None, cidr_ip=None, src_group=None, dry_run=False): DCNL 'Add a new rule to this security group. DCNL You need to pass in either src_group_name DCNL OR ip_protocol, from_port, to_port, DCNL and cidr_ip.  In other words, either you are authorizing another DCNL group or you are authorizing some ip-based rule. DCNL :type ip_protocol: string DCNL :param ip_protocol: Either tcp | udp | icmp DCNL :type from_port: int DCNL :param from_port: The beginning port number you are enabling DCNL :type to_port: int DCNL :param to_port: The ending port number you are enabling DCNL :type cidr_ip: string or list of strings DCNL :param cidr_ip: The CIDR block you are providing access to. DCNL See http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing DCNL :type src_group: :class:`boto.ec2.securitygroup.SecurityGroup` or DCNL :class:`boto.ec2.securitygroup.GroupOrCIDR` DCNL :param src_group: The Security Group you are granting access to. DCNL :rtype: bool DCNL :return: True if successful.'
def copy_to_region(self, region, name=None, dry_run=False): DCNL 'Create a copy of this security group in another region. DCNL Note that the new security group will be a separate entity DCNL and will not stay in sync automatically after the copy DCNL operation. DCNL :type region: :class:`boto.ec2.regioninfo.RegionInfo` DCNL :param region: The region to which this security group will be copied. DCNL :type name: string DCNL :param name: The name of the copy.  If not supplied, the copy DCNL will have the same name as this security group. DCNL :rtype: :class:`boto.ec2.securitygroup.SecurityGroup` DCNL :return: The new security group.'
def instances(self, dry_run=False): DCNL 'Find all of the current instances that are running within this DCNL security group. DCNL :rtype: list of :class:`boto.ec2.instance.Instance` DCNL :return: A list of Instance objects'
def assign_instance(self, instance_id, layer_ids): DCNL 'Assign a registered instance to a custom layer. You cannot use DCNL this action with instances that were created with AWS DCNL OpsWorks. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. DCNL :type layer_ids: list DCNL :param layer_ids: The layer ID, which must correspond to a custom DCNL layer. You cannot assign a registered instance to a built-in layer.'
def assign_volume(self, volume_id, instance_id=None): DCNL 'Assigns one of the stack\'s registered Amazon EBS volumes to a DCNL specified instance. The volume must first be registered with DCNL the stack by calling RegisterVolume. For more information, see DCNL `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type volume_id: string DCNL :param volume_id: The volume ID. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def associate_elastic_ip(self, elastic_ip, instance_id=None): DCNL 'Associates one of the stack\'s registered Elastic IP addresses DCNL with a specified instance. The address must first be DCNL registered with the stack by calling RegisterElasticIp. For DCNL more information, see `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_ip: string DCNL :param elastic_ip: The Elastic IP address. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def attach_elastic_load_balancer(self, elastic_load_balancer_name, layer_id): DCNL 'Attaches an Elastic Load Balancing load balancer to a DCNL specified layer. For more information, see `Elastic Load DCNL Balancing`_. DCNL You must create the Elastic Load Balancing instance DCNL separately, by using the Elastic Load Balancing console, API, DCNL or CLI. For more information, see ` Elastic Load Balancing DCNL Developer Guide`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_load_balancer_name: string DCNL :param elastic_load_balancer_name: The Elastic Load Balancing DCNL instance\'s name. DCNL :type layer_id: string DCNL :param layer_id: The ID of the layer that the Elastic Load Balancing DCNL instance is to be attached to.'
def clone_stack(self, source_stack_id, service_role_arn, name=None, region=None, vpc_id=None, attributes=None, default_instance_profile_arn=None, default_os=None, hostname_theme=None, default_availability_zone=None, default_subnet_id=None, custom_json=None, configuration_manager=None, chef_configuration=None, use_custom_cookbooks=None, use_opsworks_security_groups=None, custom_cookbooks_source=None, default_ssh_key_name=None, clone_permissions=None, clone_app_ids=None, default_root_device_type=None): DCNL 'Creates a clone of a specified stack. For more information, DCNL see `Clone a Stack`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type source_stack_id: string DCNL :param source_stack_id: The source stack ID. DCNL :type name: string DCNL :param name: The cloned stack name. DCNL :type region: string DCNL :param region: The cloned stack AWS region, such as "us-east-1". For DCNL more information about AWS regions, see `Regions and Endpoints`_. DCNL :type vpc_id: string DCNL :param vpc_id: The ID of the VPC that the cloned stack is to be DCNL launched into. It must be in the specified region. All instances DCNL are launched into this VPC, and you cannot change the ID later. DCNL + If your account supports EC2 Classic, the default value is no VPC. DCNL + If your account does not support EC2 Classic, the default value is DCNL the default VPC for the specified region. DCNL If the VPC ID corresponds to a default VPC and you have specified DCNL either the `DefaultAvailabilityZone` or the `DefaultSubnetId` DCNL parameter only, AWS OpsWorks infers the value of the other DCNL parameter. If you specify neither parameter, AWS OpsWorks sets DCNL these parameters to the first valid Availability Zone for the DCNL specified region and the corresponding default VPC subnet ID, DCNL respectively. DCNL If you specify a nondefault VPC ID, note the following: DCNL + It must belong to a VPC in your account that is in the specified DCNL region. DCNL + You must specify a value for `DefaultSubnetId`. DCNL For more information on how to use AWS OpsWorks with a VPC, see DCNL `Running a Stack in a VPC`_. For more information on default VPC DCNL and EC2 Classic, see `Supported Platforms`_. DCNL :type attributes: map DCNL :param attributes: A list of stack attributes and values as key/value DCNL pairs to be added to the cloned stack. DCNL :type service_role_arn: string DCNL :param service_role_arn: DCNL The stack AWS Identity and Access Management (IAM) role, which allows DCNL AWS OpsWorks to work with AWS resources on your behalf. You must DCNL set this parameter to the Amazon Resource Name (ARN) for an DCNL existing IAM role. If you create a stack by using the AWS OpsWorks DCNL console, it creates the role for you. You can obtain an existing DCNL stack\'s IAM ARN programmatically by calling DescribePermissions. DCNL For more information about IAM ARNs, see `Using Identifiers`_. DCNL You must set this parameter to a valid service role ARN or the action DCNL will fail; there is no default value. You can specify the source DCNL stack\'s service role ARN, if you prefer, but you must do so DCNL explicitly. DCNL :type default_instance_profile_arn: string DCNL :param default_instance_profile_arn: The ARN of an IAM profile that is DCNL the default profile for all of the stack\'s EC2 instances. For more DCNL information about IAM ARNs, see `Using Identifiers`_. DCNL :type default_os: string DCNL :param default_os: The stacks\'s operating system, which must be set to DCNL one of the following. DCNL + Standard operating systems: an Amazon Linux version such as `Amazon DCNL Linux 2014.09`, `Ubuntu 12.04 LTS`, or `Ubuntu 14.04 LTS`. DCNL + Custom AMIs: `Custom`. You specify the custom AMI you want to use DCNL when you create instances. DCNL The default option is the current Amazon Linux version. DCNL :type hostname_theme: string DCNL :param hostname_theme: The stack\'s host name theme, with spaces are DCNL replaced by underscores. The theme is used to generate host names DCNL for the stack\'s instances. By default, `HostnameTheme` is set to DCNL `Layer_Dependent`, which creates host names by appending integers DCNL to the layer\'s short name. The other themes are: DCNL + `Baked_Goods` DCNL + `Clouds` DCNL + `European_Cities` DCNL + `Fruits` DCNL + `Greek_Deities` DCNL + `Legendary_Creatures_from_Japan` DCNL + `Planets_and_Moons` DCNL + `Roman_Deities` DCNL + `Scottish_Islands` DCNL + `US_Cities` DCNL + `Wild_Cats` DCNL To obtain a generated host name, call `GetHostNameSuggestion`, which DCNL returns a host name based on the current theme. DCNL :type default_availability_zone: string DCNL :param default_availability_zone: The cloned stack\'s default DCNL Availability Zone, which must be in the specified region. For more DCNL information, see `Regions and Endpoints`_. If you also specify a DCNL value for `DefaultSubnetId`, the subnet must be in the same zone. DCNL For more information, see the `VpcId` parameter description. DCNL :type default_subnet_id: string DCNL :param default_subnet_id: The stack\'s default VPC subnet ID. This DCNL parameter is required if you specify a value for the `VpcId` DCNL parameter. All instances are launched into this subnet unless you DCNL specify otherwise when you create the instance. If you also specify DCNL a value for `DefaultAvailabilityZone`, the subnet must be in that DCNL zone. For information on default values and when this parameter is DCNL required, see the `VpcId` parameter description. DCNL :type custom_json: string DCNL :param custom_json: A string that contains user-defined, custom JSON. DCNL It is used to override the corresponding default stack DCNL configuration JSON values. The string should be in the following DCNL format and must escape characters such as \'"\'.: DCNL `"{"key1": "value1", "key2": "value2",...}"` DCNL For more information on custom JSON, see `Use Custom JSON to Modify the DCNL Stack Configuration JSON`_ DCNL :type configuration_manager: dict DCNL :param configuration_manager: The configuration manager. When you clone DCNL a stack we recommend that you use the configuration manager to DCNL specify the Chef version, 0.9, 11.4, or 11.10. The default value is DCNL currently 11.4. DCNL :type chef_configuration: dict DCNL :param chef_configuration: A `ChefConfiguration` object that specifies DCNL whether to enable Berkshelf and the Berkshelf version on Chef 11.10 DCNL stacks. For more information, see `Create a New Stack`_. DCNL :type use_custom_cookbooks: boolean DCNL :param use_custom_cookbooks: Whether to use custom cookbooks. DCNL :type use_opsworks_security_groups: boolean DCNL :param use_opsworks_security_groups: Whether to associate the AWS DCNL OpsWorks built-in security groups with the stack\'s layers. DCNL AWS OpsWorks provides a standard set of built-in security groups, one DCNL for each layer, which are associated with layers by default. With DCNL `UseOpsworksSecurityGroups` you can instead provide your own custom DCNL security groups. `UseOpsworksSecurityGroups` has the following DCNL settings: DCNL + True - AWS OpsWorks automatically associates the appropriate built-in DCNL security group with each layer (default setting). You can associate DCNL additional security groups with a layer after you create it but you DCNL cannot delete the built-in security group. DCNL + False - AWS OpsWorks does not associate built-in security groups with DCNL layers. You must create appropriate EC2 security groups and DCNL associate a security group with each layer that you create. DCNL However, you can still manually associate a built-in security group DCNL with a layer on creation; custom security groups are required only DCNL for those layers that need custom settings. DCNL For more information, see `Create a New Stack`_. DCNL :type custom_cookbooks_source: dict DCNL :param custom_cookbooks_source: Contains the information required to DCNL retrieve an app or cookbook from a repository. For more DCNL information, see `Creating Apps`_ or `Custom Recipes and DCNL Cookbooks`_. DCNL :type default_ssh_key_name: string DCNL :param default_ssh_key_name: A default SSH key for the stack instances. DCNL You can override this value when you create or update an instance. DCNL :type clone_permissions: boolean DCNL :param clone_permissions: Whether to clone the source stack\'s DCNL permissions. DCNL :type clone_app_ids: list DCNL :param clone_app_ids: A list of source stack app IDs to be included in DCNL the cloned stack. DCNL :type default_root_device_type: string DCNL :param default_root_device_type: The default root device type. This DCNL value is used by default for all instances in the cloned stack, but DCNL you can override it when you create an instance. For more DCNL information, see `Storage for the Root Device`_.'
def create_app(self, stack_id, name, type, shortname=None, description=None, data_sources=None, app_source=None, domains=None, enable_ssl=None, ssl_configuration=None, attributes=None, environment=None): DCNL 'Creates an app for a specified stack. For more information, DCNL see `Creating Apps`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type shortname: string DCNL :param shortname: The app\'s short name. DCNL :type name: string DCNL :param name: The app name. DCNL :type description: string DCNL :param description: A description of the app. DCNL :type data_sources: list DCNL :param data_sources: The app\'s data source. DCNL :type type: string DCNL :param type: The app type. Each supported type is associated with a DCNL particular layer. For example, PHP applications are associated with DCNL a PHP layer. AWS OpsWorks deploys an application to those instances DCNL that are members of the corresponding layer. DCNL :type app_source: dict DCNL :param app_source: A `Source` object that specifies the app repository. DCNL :type domains: list DCNL :param domains: The app virtual host settings, with multiple domains DCNL separated by commas. For example: `\'www.example.com, example.com\'` DCNL :type enable_ssl: boolean DCNL :param enable_ssl: Whether to enable SSL for the app. DCNL :type ssl_configuration: dict DCNL :param ssl_configuration: An `SslConfiguration` object with the SSL DCNL configuration. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type environment: list DCNL :param environment: DCNL An array of `EnvironmentVariable` objects that specify environment DCNL variables to be associated with the app. You can specify up to ten DCNL environment variables. After you deploy the app, these variables DCNL are defined on the associated app server instance. DCNL This parameter is supported only by Chef 11.10 stacks. If you have DCNL specified one or more environment variables, you cannot modify the DCNL stack\'s Chef version.'
def create_deployment(self, stack_id, command, app_id=None, instance_ids=None, comment=None, custom_json=None): DCNL 'Runs deployment or stack commands. For more information, see DCNL `Deploying Apps`_ and `Run Stack Commands`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Deploy or Manage permissions level for the stack, or an DCNL attached policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type app_id: string DCNL :param app_id: The app ID. This parameter is required for app DCNL deployments, but not for other deployment commands. DCNL :type instance_ids: list DCNL :param instance_ids: The instance IDs for the deployment targets. DCNL :type command: dict DCNL :param command: A `DeploymentCommand` object that specifies the DCNL deployment command and any associated arguments. DCNL :type comment: string DCNL :param comment: A user-defined comment. DCNL :type custom_json: string DCNL :param custom_json: A string that contains user-defined, custom JSON. DCNL It is used to override the corresponding default stack DCNL configuration JSON values. The string should be in the following DCNL format and must escape characters such as \'"\'.: DCNL `"{"key1": "value1", "key2": "value2",...}"` DCNL For more information on custom JSON, see `Use Custom JSON to Modify the DCNL Stack Configuration JSON`_.'
def create_instance(self, stack_id, layer_ids, instance_type, auto_scaling_type=None, hostname=None, os=None, ami_id=None, ssh_key_name=None, availability_zone=None, virtualization_type=None, subnet_id=None, architecture=None, root_device_type=None, install_updates_on_boot=None, ebs_optimized=None): DCNL 'Creates an instance in a specified stack. For more DCNL information, see `Adding an Instance to a Layer`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type layer_ids: list DCNL :param layer_ids: An array that contains the instance layer IDs. DCNL :type instance_type: string DCNL :param instance_type: The instance type. AWS OpsWorks supports all DCNL instance types except Cluster Compute, Cluster GPU, and High Memory DCNL Cluster. For more information, see `Instance Families and Types`_. DCNL The parameter values that you use to specify the various types are DCNL in the API Name column of the Available Instance Types table. DCNL :type auto_scaling_type: string DCNL :param auto_scaling_type: For load-based or time-based instances, the DCNL type. DCNL :type hostname: string DCNL :param hostname: The instance host name. DCNL :type os: string DCNL :param os: The instance\'s operating system, which must be set to one of DCNL the following. DCNL + Standard operating systems: an Amazon Linux version such as `Amazon DCNL Linux 2014.09`, `Ubuntu 12.04 LTS`, or `Ubuntu 14.04 LTS`. DCNL + Custom AMIs: `Custom` DCNL The default option is the current Amazon Linux version. If you set this DCNL parameter to `Custom`, you must use the CreateInstance action\'s DCNL AmiId parameter to specify the custom AMI that you want to use. For DCNL more information on the standard operating systems, see `Operating DCNL Systems`_For more information on how to use custom AMIs with DCNL OpsWorks, see `Using Custom AMIs`_. DCNL :type ami_id: string DCNL :param ami_id: DCNL A custom AMI ID to be used to create the instance. The AMI should be DCNL based on one of the standard AWS OpsWorks AMIs: Amazon Linux, DCNL Ubuntu 12.04 LTS, or Ubuntu 14.04 LTS. For more information, see DCNL `Instances`_. DCNL If you specify a custom AMI, you must set `Os` to `Custom`. DCNL :type ssh_key_name: string DCNL :param ssh_key_name: The instance SSH key name. DCNL :type availability_zone: string DCNL :param availability_zone: The instance Availability Zone. For more DCNL information, see `Regions and Endpoints`_. DCNL :type virtualization_type: string DCNL :param virtualization_type: The instance\'s virtualization type, DCNL `paravirtual` or `hvm`. DCNL :type subnet_id: string DCNL :param subnet_id: The ID of the instance\'s subnet. If the stack is DCNL running in a VPC, you can use this parameter to override the DCNL stack\'s default subnet ID value and direct AWS OpsWorks to launch DCNL the instance in a different subnet. DCNL :type architecture: string DCNL :param architecture: The instance architecture. The default option is DCNL `x86_64`. Instance types do not necessarily support both DCNL architectures. For a list of the architectures that are supported DCNL by the different instance types, see `Instance Families and DCNL Types`_. DCNL :type root_device_type: string DCNL :param root_device_type: The instance root device type. For more DCNL information, see `Storage for the Root Device`_. DCNL :type install_updates_on_boot: boolean DCNL :param install_updates_on_boot: DCNL Whether to install operating system and package updates when the DCNL instance boots. The default value is `True`. To control when DCNL updates are installed, set this value to `False`. You must then DCNL update your instances manually by using CreateDeployment to run the DCNL `update_dependencies` stack command or manually running `yum` DCNL (Amazon Linux) or `apt-get` (Ubuntu) on the instances. DCNL We strongly recommend using the default value of `True` to ensure that DCNL your instances have the latest security updates. DCNL :type ebs_optimized: boolean DCNL :param ebs_optimized: Whether to create an Amazon EBS-optimized DCNL instance.'
def create_layer(self, stack_id, type, name, shortname, attributes=None, custom_instance_profile_arn=None, custom_security_group_ids=None, packages=None, volume_configurations=None, enable_auto_healing=None, auto_assign_elastic_ips=None, auto_assign_public_ips=None, custom_recipes=None, install_updates_on_boot=None, use_ebs_optimized_instances=None, lifecycle_event_configuration=None): DCNL 'Creates a layer. For more information, see `How to Create a DCNL Layer`_. DCNL You should use **CreateLayer** for noncustom layer types such DCNL as PHP App Server only if the stack does not have an existing DCNL layer of that type. A stack can have at most one instance of DCNL each noncustom layer; if you attempt to create a second DCNL instance, **CreateLayer** fails. A stack can have an arbitrary DCNL number of custom layers, so you can call **CreateLayer** as DCNL many times as you like for that layer type. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The layer stack ID. DCNL :type type: string DCNL :param type: The layer type. A stack cannot have more than one built-in DCNL layer of the same type. It can have any number of custom layers. DCNL :type name: string DCNL :param name: The layer name, which is used by the console. DCNL :type shortname: string DCNL :param shortname: The layer short name, which is used internally by AWS DCNL OpsWorks and by Chef recipes. The short name is also used as the DCNL name for the directory where your app files are installed. It can DCNL have a maximum of 200 characters, which are limited to the DCNL alphanumeric characters, \'-\', \'_\', and \'.\'. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type custom_instance_profile_arn: string DCNL :param custom_instance_profile_arn: The ARN of an IAM profile that to DCNL be used for the layer\'s EC2 instances. For more information about DCNL IAM ARNs, see `Using Identifiers`_. DCNL :type custom_security_group_ids: list DCNL :param custom_security_group_ids: An array containing the layer custom DCNL security group IDs. DCNL :type packages: list DCNL :param packages: An array of `Package` objects that describe the layer DCNL packages. DCNL :type volume_configurations: list DCNL :param volume_configurations: A `VolumeConfigurations` object that DCNL describes the layer\'s Amazon EBS volumes. DCNL :type enable_auto_healing: boolean DCNL :param enable_auto_healing: Whether to disable auto healing for the DCNL layer. DCNL :type auto_assign_elastic_ips: boolean DCNL :param auto_assign_elastic_ips: Whether to automatically assign an DCNL `Elastic IP address`_ to the layer\'s instances. For more DCNL information, see `How to Edit a Layer`_. DCNL :type auto_assign_public_ips: boolean DCNL :param auto_assign_public_ips: For stacks that are running in a VPC, DCNL whether to automatically assign a public IP address to the layer\'s DCNL instances. For more information, see `How to Edit a Layer`_. DCNL :type custom_recipes: dict DCNL :param custom_recipes: A `LayerCustomRecipes` object that specifies the DCNL layer custom recipes. DCNL :type install_updates_on_boot: boolean DCNL :param install_updates_on_boot: DCNL Whether to install operating system and package updates when the DCNL instance boots. The default value is `True`. To control when DCNL updates are installed, set this value to `False`. You must then DCNL update your instances manually by using CreateDeployment to run the DCNL `update_dependencies` stack command or manually running `yum` DCNL (Amazon Linux) or `apt-get` (Ubuntu) on the instances. DCNL We strongly recommend using the default value of `True`, to ensure that DCNL your instances have the latest security updates. DCNL :type use_ebs_optimized_instances: boolean DCNL :param use_ebs_optimized_instances: Whether to use Amazon EBS-optimized DCNL instances. DCNL :type lifecycle_event_configuration: dict DCNL :param lifecycle_event_configuration: A LifeCycleEventConfiguration DCNL object that you can use to configure the Shutdown event to specify DCNL an execution timeout and enable or disable Elastic Load Balancer DCNL connection draining.'
def create_stack(self, name, region, service_role_arn, default_instance_profile_arn, vpc_id=None, attributes=None, default_os=None, hostname_theme=None, default_availability_zone=None, default_subnet_id=None, custom_json=None, configuration_manager=None, chef_configuration=None, use_custom_cookbooks=None, use_opsworks_security_groups=None, custom_cookbooks_source=None, default_ssh_key_name=None, default_root_device_type=None): DCNL 'Creates a new stack. For more information, see `Create a New DCNL Stack`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type name: string DCNL :param name: The stack name. DCNL :type region: string DCNL :param region: The stack AWS region, such as "us-east-1". For more DCNL information about Amazon regions, see `Regions and Endpoints`_. DCNL :type vpc_id: string DCNL :param vpc_id: The ID of the VPC that the stack is to be launched into. DCNL It must be in the specified region. All instances are launched into DCNL this VPC, and you cannot change the ID later. DCNL + If your account supports EC2 Classic, the default value is no VPC. DCNL + If your account does not support EC2 Classic, the default value is DCNL the default VPC for the specified region. DCNL If the VPC ID corresponds to a default VPC and you have specified DCNL either the `DefaultAvailabilityZone` or the `DefaultSubnetId` DCNL parameter only, AWS OpsWorks infers the value of the other DCNL parameter. If you specify neither parameter, AWS OpsWorks sets DCNL these parameters to the first valid Availability Zone for the DCNL specified region and the corresponding default VPC subnet ID, DCNL respectively. DCNL If you specify a nondefault VPC ID, note the following: DCNL + It must belong to a VPC in your account that is in the specified DCNL region. DCNL + You must specify a value for `DefaultSubnetId`. DCNL For more information on how to use AWS OpsWorks with a VPC, see DCNL `Running a Stack in a VPC`_. For more information on default VPC DCNL and EC2 Classic, see `Supported Platforms`_. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type service_role_arn: string DCNL :param service_role_arn: The stack AWS Identity and Access Management DCNL (IAM) role, which allows AWS OpsWorks to work with AWS resources on DCNL your behalf. You must set this parameter to the Amazon Resource DCNL Name (ARN) for an existing IAM role. For more information about IAM DCNL ARNs, see `Using Identifiers`_. DCNL :type default_instance_profile_arn: string DCNL :param default_instance_profile_arn: The ARN of an IAM profile that is DCNL the default profile for all of the stack\'s EC2 instances. For more DCNL information about IAM ARNs, see `Using Identifiers`_. DCNL :type default_os: string DCNL :param default_os: The stack\'s operating system, which must be set to DCNL one of the following. DCNL + Standard operating systems: an Amazon Linux version such as `Amazon DCNL Linux 2014.09`, `Ubuntu 12.04 LTS`, or `Ubuntu 14.04 LTS`. DCNL + Custom AMIs: `Custom`. You specify the custom AMI you want to use DCNL when you create instances. DCNL The default option is the current Amazon Linux version. DCNL :type hostname_theme: string DCNL :param hostname_theme: The stack\'s host name theme, with spaces are DCNL replaced by underscores. The theme is used to generate host names DCNL for the stack\'s instances. By default, `HostnameTheme` is set to DCNL `Layer_Dependent`, which creates host names by appending integers DCNL to the layer\'s short name. The other themes are: DCNL + `Baked_Goods` DCNL + `Clouds` DCNL + `European_Cities` DCNL + `Fruits` DCNL + `Greek_Deities` DCNL + `Legendary_Creatures_from_Japan` DCNL + `Planets_and_Moons` DCNL + `Roman_Deities` DCNL + `Scottish_Islands` DCNL + `US_Cities` DCNL + `Wild_Cats` DCNL To obtain a generated host name, call `GetHostNameSuggestion`, which DCNL returns a host name based on the current theme. DCNL :type default_availability_zone: string DCNL :param default_availability_zone: The stack\'s default Availability DCNL Zone, which must be in the specified region. For more information, DCNL see `Regions and Endpoints`_. If you also specify a value for DCNL `DefaultSubnetId`, the subnet must be in the same zone. For more DCNL information, see the `VpcId` parameter description. DCNL :type default_subnet_id: string DCNL :param default_subnet_id: The stack\'s default VPC subnet ID. This DCNL parameter is required if you specify a value for the `VpcId` DCNL parameter. All instances are launched into this subnet unless you DCNL specify otherwise when you create the instance. If you also specify DCNL a value for `DefaultAvailabilityZone`, the subnet must be in that DCNL zone. For information on default values and when this parameter is DCNL required, see the `VpcId` parameter description. DCNL :type custom_json: string DCNL :param custom_json: A string that contains user-defined, custom JSON. DCNL It is used to override the corresponding default stack DCNL configuration JSON values. The string should be in the following DCNL format and must escape characters such as \'"\'.: DCNL `"{"key1": "value1", "key2": "value2",...}"` DCNL For more information on custom JSON, see `Use Custom JSON to Modify the DCNL Stack Configuration JSON`_. DCNL :type configuration_manager: dict DCNL :param configuration_manager: The configuration manager. When you clone DCNL a stack we recommend that you use the configuration manager to DCNL specify the Chef version, 0.9, 11.4, or 11.10. The default value is DCNL currently 11.4. DCNL :type chef_configuration: dict DCNL :param chef_configuration: A `ChefConfiguration` object that specifies DCNL whether to enable Berkshelf and the Berkshelf version on Chef 11.10 DCNL stacks. For more information, see `Create a New Stack`_. DCNL :type use_custom_cookbooks: boolean DCNL :param use_custom_cookbooks: Whether the stack uses custom cookbooks. DCNL :type use_opsworks_security_groups: boolean DCNL :param use_opsworks_security_groups: Whether to associate the AWS DCNL OpsWorks built-in security groups with the stack\'s layers. DCNL AWS OpsWorks provides a standard set of built-in security groups, one DCNL for each layer, which are associated with layers by default. With DCNL `UseOpsworksSecurityGroups` you can instead provide your own custom DCNL security groups. `UseOpsworksSecurityGroups` has the following DCNL settings: DCNL + True - AWS OpsWorks automatically associates the appropriate built-in DCNL security group with each layer (default setting). You can associate DCNL additional security groups with a layer after you create it but you DCNL cannot delete the built-in security group. DCNL + False - AWS OpsWorks does not associate built-in security groups with DCNL layers. You must create appropriate EC2 security groups and DCNL associate a security group with each layer that you create. DCNL However, you can still manually associate a built-in security group DCNL with a layer on creation; custom security groups are required only DCNL for those layers that need custom settings. DCNL For more information, see `Create a New Stack`_. DCNL :type custom_cookbooks_source: dict DCNL :param custom_cookbooks_source: Contains the information required to DCNL retrieve an app or cookbook from a repository. For more DCNL information, see `Creating Apps`_ or `Custom Recipes and DCNL Cookbooks`_. DCNL :type default_ssh_key_name: string DCNL :param default_ssh_key_name: A default SSH key for the stack instances. DCNL You can override this value when you create or update an instance. DCNL :type default_root_device_type: string DCNL :param default_root_device_type: The default root device type. This DCNL value is used by default for all instances in the stack, but you DCNL can override it when you create an instance. The default option is DCNL `instance-store`. For more information, see `Storage for the Root DCNL Device`_.'
def create_user_profile(self, iam_user_arn, ssh_username=None, ssh_public_key=None, allow_self_management=None): DCNL 'Creates a new user profile. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type iam_user_arn: string DCNL :param iam_user_arn: The user\'s IAM ARN. DCNL :type ssh_username: string DCNL :param ssh_username: The user\'s SSH user name. The allowable characters DCNL are [a-z], [A-Z], [0-9], \'-\', and \'_\'. If the specified name DCNL includes other punctuation marks, AWS OpsWorks removes them. For DCNL example, `my.name` will be changed to `myname`. If you do not DCNL specify an SSH user name, AWS OpsWorks generates one from the IAM DCNL user name. DCNL :type ssh_public_key: string DCNL :param ssh_public_key: The user\'s public SSH key. DCNL :type allow_self_management: boolean DCNL :param allow_self_management: Whether users can specify their own SSH DCNL public key through the My Settings page. For more information, see DCNL `Setting an IAM User\'s Public SSH Key`_.'
def delete_app(self, app_id): DCNL 'Deletes a specified app. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type app_id: string DCNL :param app_id: The app ID.'
def delete_instance(self, instance_id, delete_elastic_ip=None, delete_volumes=None): DCNL 'Deletes a specified instance, which terminates the associated DCNL Amazon EC2 instance. You must stop an instance before you can DCNL delete it. DCNL For more information, see `Deleting Instances`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. DCNL :type delete_elastic_ip: boolean DCNL :param delete_elastic_ip: Whether to delete the instance Elastic IP DCNL address. DCNL :type delete_volumes: boolean DCNL :param delete_volumes: Whether to delete the instance\'s Amazon EBS DCNL volumes.'
def delete_layer(self, layer_id): DCNL 'Deletes a specified layer. You must first stop and then delete DCNL all associated instances or unassign registered instances. For DCNL more information, see `How to Delete a Layer`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type layer_id: string DCNL :param layer_id: The layer ID.'
def delete_stack(self, stack_id): DCNL 'Deletes a specified stack. You must first delete all DCNL instances, layers, and apps or deregister registered DCNL instances. For more information, see `Shut Down a Stack`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def delete_user_profile(self, iam_user_arn): DCNL 'Deletes a user profile. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type iam_user_arn: string DCNL :param iam_user_arn: The user\'s IAM ARN.'
def deregister_elastic_ip(self, elastic_ip): DCNL 'Deregisters a specified Elastic IP address. The address can DCNL then be registered by another stack. For more information, see DCNL `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_ip: string DCNL :param elastic_ip: The Elastic IP address.'
def deregister_instance(self, instance_id): DCNL 'Deregister a registered Amazon EC2 or on-premises instance. DCNL This action removes the instance from the stack and returns it DCNL to your control. This action can not be used with instances DCNL that were created with AWS OpsWorks. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def deregister_rds_db_instance(self, rds_db_instance_arn): DCNL 'Deregisters an Amazon RDS instance. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type rds_db_instance_arn: string DCNL :param rds_db_instance_arn: The Amazon RDS instance\'s ARN.'
def deregister_volume(self, volume_id): DCNL 'Deregisters an Amazon EBS volume. The volume can then be DCNL registered by another stack. For more information, see DCNL `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type volume_id: string DCNL :param volume_id: The volume ID.'
def describe_apps(self, stack_id=None, app_ids=None): DCNL 'Requests a description of a specified set of apps. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The app stack ID. If you use this parameter, DCNL `DescribeApps` returns a description of the apps in the specified DCNL stack. DCNL :type app_ids: list DCNL :param app_ids: An array of app IDs for the apps to be described. If DCNL you use this parameter, `DescribeApps` returns a description of the DCNL specified apps. Otherwise, it returns a description of every app.'
def describe_commands(self, deployment_id=None, instance_id=None, command_ids=None): DCNL 'Describes the results of specified commands. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type deployment_id: string DCNL :param deployment_id: The deployment ID. If you include this parameter, DCNL `DescribeCommands` returns a description of the commands associated DCNL with the specified deployment. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. If you include this parameter, DCNL `DescribeCommands` returns a description of the commands associated DCNL with the specified instance. DCNL :type command_ids: list DCNL :param command_ids: An array of command IDs. If you include this DCNL parameter, `DescribeCommands` returns a description of the DCNL specified commands. Otherwise, it returns a description of every DCNL command.'
def describe_deployments(self, stack_id=None, app_id=None, deployment_ids=None): DCNL 'Requests a description of a specified set of deployments. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. If you include this parameter, DCNL `DescribeDeployments` returns a description of the commands DCNL associated with the specified stack. DCNL :type app_id: string DCNL :param app_id: The app ID. If you include this parameter, DCNL `DescribeDeployments` returns a description of the commands DCNL associated with the specified app. DCNL :type deployment_ids: list DCNL :param deployment_ids: An array of deployment IDs to be described. If DCNL you include this parameter, `DescribeDeployments` returns a DCNL description of the specified deployments. Otherwise, it returns a DCNL description of every deployment.'
def describe_elastic_ips(self, instance_id=None, stack_id=None, ips=None): DCNL 'Describes `Elastic IP addresses`_. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. If you include this parameter, DCNL `DescribeElasticIps` returns a description of the Elastic IP DCNL addresses associated with the specified instance. DCNL :type stack_id: string DCNL :param stack_id: A stack ID. If you include this parameter, DCNL `DescribeElasticIps` returns a description of the Elastic IP DCNL addresses that are registered with the specified stack. DCNL :type ips: list DCNL :param ips: An array of Elastic IP addresses to be described. If you DCNL include this parameter, `DescribeElasticIps` returns a description DCNL of the specified Elastic IP addresses. Otherwise, it returns a DCNL description of every Elastic IP address.'
def describe_elastic_load_balancers(self, stack_id=None, layer_ids=None): DCNL 'Describes a stack\'s Elastic Load Balancing instances. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: A stack ID. The action describes the stack\'s Elastic DCNL Load Balancing instances. DCNL :type layer_ids: list DCNL :param layer_ids: A list of layer IDs. The action describes the Elastic DCNL Load Balancing instances for the specified layers.'
def describe_instances(self, stack_id=None, layer_id=None, instance_ids=None): DCNL 'Requests a description of a set of instances. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: A stack ID. If you use this parameter, DCNL `DescribeInstances` returns descriptions of the instances DCNL associated with the specified stack. DCNL :type layer_id: string DCNL :param layer_id: A layer ID. If you use this parameter, DCNL `DescribeInstances` returns descriptions of the instances DCNL associated with the specified layer. DCNL :type instance_ids: list DCNL :param instance_ids: An array of instance IDs to be described. If you DCNL use this parameter, `DescribeInstances` returns a description of DCNL the specified instances. Otherwise, it returns a description of DCNL every instance.'
def describe_layers(self, stack_id=None, layer_ids=None): DCNL 'Requests a description of one or more layers in a specified DCNL stack. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type layer_ids: list DCNL :param layer_ids: An array of layer IDs that specify the layers to be DCNL described. If you omit this parameter, `DescribeLayers` returns a DCNL description of every layer in the specified stack.'
def describe_load_based_auto_scaling(self, layer_ids): DCNL 'Describes load-based auto scaling configurations for specified DCNL layers. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type layer_ids: list DCNL :param layer_ids: An array of layer IDs.'
def describe_my_user_profile(self): DCNL 'Describes a user\'s SSH information. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have self-management enabled or an attached policy that DCNL explicitly grants permissions. For more information on user DCNL permissions, see `Managing User Permissions`_.'
def describe_permissions(self, iam_user_arn=None, stack_id=None): DCNL 'Describes the permissions for a specified stack. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type iam_user_arn: string DCNL :param iam_user_arn: The user\'s IAM ARN. For more information about IAM DCNL ARNs, see `Using Identifiers`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def describe_raid_arrays(self, instance_id=None, stack_id=None, raid_array_ids=None): DCNL 'Describe an instance\'s RAID arrays. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. If you use this parameter, DCNL `DescribeRaidArrays` returns descriptions of the RAID arrays DCNL associated with the specified instance. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type raid_array_ids: list DCNL :param raid_array_ids: An array of RAID array IDs. If you use this DCNL parameter, `DescribeRaidArrays` returns descriptions of the DCNL specified arrays. Otherwise, it returns a description of every DCNL array.'
def describe_rds_db_instances(self, stack_id, rds_db_instance_arns=None): DCNL 'Describes Amazon RDS instances. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID that the instances are registered with. DCNL The operation returns descriptions of all registered Amazon RDS DCNL instances. DCNL :type rds_db_instance_arns: list DCNL :param rds_db_instance_arns: An array containing the ARNs of the DCNL instances to be described.'
def describe_service_errors(self, stack_id=None, instance_id=None, service_error_ids=None): DCNL 'Describes AWS OpsWorks service errors. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. If you use this parameter, DCNL `DescribeServiceErrors` returns descriptions of the errors DCNL associated with the specified stack. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. If you use this parameter, DCNL `DescribeServiceErrors` returns descriptions of the errors DCNL associated with the specified instance. DCNL :type service_error_ids: list DCNL :param service_error_ids: An array of service error IDs. If you use DCNL this parameter, `DescribeServiceErrors` returns descriptions of the DCNL specified errors. Otherwise, it returns a description of every DCNL error.'
def describe_stack_provisioning_parameters(self, stack_id): DCNL 'Requests a description of a stack\'s provisioning parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the stack DCNL or an attached policy that explicitly grants permissions. For DCNL more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID'
def describe_stack_summary(self, stack_id): DCNL 'Describes the number of layers and apps in a specified stack, DCNL and the number of instances in each state, such as DCNL `running_setup` or `online`. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def describe_stacks(self, stack_ids=None): DCNL 'Requests a description of one or more stacks. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type stack_ids: list DCNL :param stack_ids: An array of stack IDs that specify the stacks to be DCNL described. If you omit this parameter, `DescribeStacks` returns a DCNL description of every stack.'
def describe_time_based_auto_scaling(self, instance_ids): DCNL 'Describes time-based auto scaling configurations for specified DCNL instances. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type instance_ids: list DCNL :param instance_ids: An array of instance IDs.'
def describe_user_profiles(self, iam_user_arns=None): DCNL 'Describe specified users. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type iam_user_arns: list DCNL :param iam_user_arns: An array of IAM user ARNs that identify the users DCNL to be described.'
def describe_volumes(self, instance_id=None, stack_id=None, raid_array_id=None, volume_ids=None): DCNL 'Describes an instance\'s Amazon EBS volumes. DCNL You must specify at least one of the parameters. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Show, Deploy, or Manage permissions level for the DCNL stack, or an attached policy that explicitly grants DCNL permissions. For more information on user permissions, see DCNL `Managing User Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. If you use this parameter, DCNL `DescribeVolumes` returns descriptions of the volumes associated DCNL with the specified instance. DCNL :type stack_id: string DCNL :param stack_id: A stack ID. The action describes the stack\'s DCNL registered Amazon EBS volumes. DCNL :type raid_array_id: string DCNL :param raid_array_id: The RAID array ID. If you use this parameter, DCNL `DescribeVolumes` returns descriptions of the volumes associated DCNL with the specified RAID array. DCNL :type volume_ids: list DCNL :param volume_ids: Am array of volume IDs. If you use this parameter, DCNL `DescribeVolumes` returns descriptions of the specified volumes. DCNL Otherwise, it returns a description of every volume.'
def detach_elastic_load_balancer(self, elastic_load_balancer_name, layer_id): DCNL 'Detaches a specified Elastic Load Balancing instance from its DCNL layer. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_load_balancer_name: string DCNL :param elastic_load_balancer_name: The Elastic Load Balancing DCNL instance\'s name. DCNL :type layer_id: string DCNL :param layer_id: The ID of the layer that the Elastic Load Balancing DCNL instance is attached to.'
def disassociate_elastic_ip(self, elastic_ip): DCNL 'Disassociates an Elastic IP address from its instance. The DCNL address remains registered with the stack. For more DCNL information, see `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_ip: string DCNL :param elastic_ip: The Elastic IP address.'
def get_hostname_suggestion(self, layer_id): DCNL 'Gets a generated host name for the specified layer, based on DCNL the current host name theme. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type layer_id: string DCNL :param layer_id: The layer ID.'
def reboot_instance(self, instance_id): DCNL 'Reboots a specified instance. For more information, see DCNL `Starting, Stopping, and Rebooting Instances`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def register_elastic_ip(self, elastic_ip, stack_id): DCNL 'Registers an Elastic IP address with a specified stack. An DCNL address can be registered with only one stack at a time. If DCNL the address is already registered, you must first deregister DCNL it by calling DeregisterElasticIp. For more information, see DCNL `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_ip: string DCNL :param elastic_ip: The Elastic IP address. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def register_instance(self, stack_id, hostname=None, public_ip=None, private_ip=None, rsa_public_key=None, rsa_public_key_fingerprint=None, instance_identity=None): DCNL 'Registers instances with a specified stack that were created DCNL outside of AWS OpsWorks. DCNL We do not recommend using this action to register instances. DCNL The complete registration operation has two primary steps, DCNL installing the AWS OpsWorks agent on the instance and DCNL registering the instance with the stack. `RegisterInstance` DCNL handles only the second step. You should instead use the AWS DCNL CLI `register` command, which performs the entire registration DCNL operation. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The ID of the stack that the instance is to be DCNL registered with. DCNL :type hostname: string DCNL :param hostname: The instance\'s hostname. DCNL :type public_ip: string DCNL :param public_ip: The instance\'s public IP address. DCNL :type private_ip: string DCNL :param private_ip: The instance\'s private IP address. DCNL :type rsa_public_key: string DCNL :param rsa_public_key: The instances public RSA key. This key is used DCNL to encrypt communication between the instance and the service. DCNL :type rsa_public_key_fingerprint: string DCNL :param rsa_public_key_fingerprint: The instances public RSA key DCNL fingerprint. DCNL :type instance_identity: dict DCNL :param instance_identity: An InstanceIdentity object that contains the DCNL instance\'s identity.'
def register_rds_db_instance(self, stack_id, rds_db_instance_arn, db_user, db_password): DCNL 'Registers an Amazon RDS instance with a stack. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type rds_db_instance_arn: string DCNL :param rds_db_instance_arn: The Amazon RDS instance\'s ARN. DCNL :type db_user: string DCNL :param db_user: The database\'s master user name. DCNL :type db_password: string DCNL :param db_password: The database password.'
def register_volume(self, stack_id, ec_2_volume_id=None): DCNL 'Registers an Amazon EBS volume with a specified stack. A DCNL volume can be registered with only one stack at a time. If the DCNL volume is already registered, you must first deregister it by DCNL calling DeregisterVolume. For more information, see `Resource DCNL Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type ec_2_volume_id: string DCNL :param ec_2_volume_id: The Amazon EBS volume ID. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def set_load_based_auto_scaling(self, layer_id, enable=None, up_scaling=None, down_scaling=None): DCNL 'Specify the load-based auto scaling configuration for a DCNL specified layer. For more information, see `Managing Load with DCNL Time-based and Load-based Instances`_. DCNL To use load-based auto scaling, you must create a set of load- DCNL based auto scaling instances. Load-based auto scaling operates DCNL only on the instances from that set, so you must ensure that DCNL you have created enough instances to handle the maximum DCNL anticipated load. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type layer_id: string DCNL :param layer_id: The layer ID. DCNL :type enable: boolean DCNL :param enable: Enables load-based auto scaling for the layer. DCNL :type up_scaling: dict DCNL :param up_scaling: An `AutoScalingThresholds` object with the upscaling DCNL threshold configuration. If the load exceeds these thresholds for a DCNL specified amount of time, AWS OpsWorks starts a specified number of DCNL instances. DCNL :type down_scaling: dict DCNL :param down_scaling: An `AutoScalingThresholds` object with the DCNL downscaling threshold configuration. If the load falls below these DCNL thresholds for a specified amount of time, AWS OpsWorks stops a DCNL specified number of instances.'
def set_permission(self, stack_id, iam_user_arn, allow_ssh=None, allow_sudo=None, level=None): DCNL 'Specifies a user\'s permissions. For more information, see DCNL `Security and Permissions`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type iam_user_arn: string DCNL :param iam_user_arn: The user\'s IAM ARN. DCNL :type allow_ssh: boolean DCNL :param allow_ssh: The user is allowed to use SSH to communicate with DCNL the instance. DCNL :type allow_sudo: boolean DCNL :param allow_sudo: The user is allowed to use **sudo** to elevate DCNL privileges. DCNL :type level: string DCNL :param level: The user\'s permission level, which must be set to one of DCNL the following strings. You cannot set your own permissions level. DCNL + `deny` DCNL + `show` DCNL + `deploy` DCNL + `manage` DCNL + `iam_only` DCNL For more information on the permissions associated with these levels, DCNL see `Managing User Permissions`_'
def set_time_based_auto_scaling(self, instance_id, auto_scaling_schedule=None): DCNL 'Specify the time-based auto scaling configuration for a DCNL specified instance. For more information, see `Managing Load DCNL with Time-based and Load-based Instances`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. DCNL :type auto_scaling_schedule: dict DCNL :param auto_scaling_schedule: An `AutoScalingSchedule` with the DCNL instance schedule.'
def start_instance(self, instance_id): DCNL 'Starts a specified instance. For more information, see DCNL `Starting, Stopping, and Rebooting Instances`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def start_stack(self, stack_id): DCNL 'Starts a stack\'s instances. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def stop_instance(self, instance_id): DCNL 'Stops a specified instance. When you stop a standard instance, DCNL the data disappears and must be reinstalled when you restart DCNL the instance. You can stop an Amazon EBS-backed instance DCNL without losing data. For more information, see `Starting, DCNL Stopping, and Rebooting Instances`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def stop_stack(self, stack_id): DCNL 'Stops a specified stack. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID.'
def unassign_instance(self, instance_id): DCNL 'Unassigns a registered instance from all of it\'s layers. The DCNL instance remains in the stack as an unassigned instance and DCNL can be assigned to another layer, as needed. You cannot use DCNL this action with instances that were created with AWS DCNL OpsWorks. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID.'
def unassign_volume(self, volume_id): DCNL 'Unassigns an assigned Amazon EBS volume. The volume remains DCNL registered with the stack. For more information, see `Resource DCNL Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type volume_id: string DCNL :param volume_id: The volume ID.'
def update_app(self, app_id, name=None, description=None, data_sources=None, type=None, app_source=None, domains=None, enable_ssl=None, ssl_configuration=None, attributes=None, environment=None): DCNL 'Updates a specified app. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Deploy or Manage permissions level for the stack, or an DCNL attached policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type app_id: string DCNL :param app_id: The app ID. DCNL :type name: string DCNL :param name: The app name. DCNL :type description: string DCNL :param description: A description of the app. DCNL :type data_sources: list DCNL :param data_sources: The app\'s data sources. DCNL :type type: string DCNL :param type: The app type. DCNL :type app_source: dict DCNL :param app_source: A `Source` object that specifies the app repository. DCNL :type domains: list DCNL :param domains: The app\'s virtual host settings, with multiple domains DCNL separated by commas. For example: `\'www.example.com, example.com\'` DCNL :type enable_ssl: boolean DCNL :param enable_ssl: Whether SSL is enabled for the app. DCNL :type ssl_configuration: dict DCNL :param ssl_configuration: An `SslConfiguration` object with the SSL DCNL configuration. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type environment: list DCNL :param environment: DCNL An array of `EnvironmentVariable` objects that specify environment DCNL variables to be associated with the app. You can specify up to ten DCNL environment variables. After you deploy the app, these variables DCNL are defined on the associated app server instances. DCNL This parameter is supported only by Chef 11.10 stacks. If you have DCNL specified one or more environment variables, you cannot modify the DCNL stack\'s Chef version.'
def update_elastic_ip(self, elastic_ip, name=None): DCNL 'Updates a registered Elastic IP address\'s name. For more DCNL information, see `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type elastic_ip: string DCNL :param elastic_ip: The address. DCNL :type name: string DCNL :param name: The new name.'
def update_instance(self, instance_id, layer_ids=None, instance_type=None, auto_scaling_type=None, hostname=None, os=None, ami_id=None, ssh_key_name=None, architecture=None, install_updates_on_boot=None, ebs_optimized=None): DCNL 'Updates a specified instance. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type instance_id: string DCNL :param instance_id: The instance ID. DCNL :type layer_ids: list DCNL :param layer_ids: The instance\'s layer IDs. DCNL :type instance_type: string DCNL :param instance_type: The instance type. AWS OpsWorks supports all DCNL instance types except Cluster Compute, Cluster GPU, and High Memory DCNL Cluster. For more information, see `Instance Families and Types`_. DCNL The parameter values that you use to specify the various types are DCNL in the API Name column of the Available Instance Types table. DCNL :type auto_scaling_type: string DCNL :param auto_scaling_type: For load-based or time-based instances, the DCNL type. DCNL :type hostname: string DCNL :param hostname: The instance host name. DCNL :type os: string DCNL :param os: The instance\'s operating system, which must be set to one of DCNL the following. DCNL + Standard operating systems: An Amazon Linux version such as `Amazon DCNL Linux 2014.09`, `Ubuntu 12.04 LTS`, or `Ubuntu 14.04 LTS`. DCNL + Custom AMIs: `Custom` DCNL The default option is the current Amazon Linux version, such as `Amazon DCNL Linux 2014.09`. If you set this parameter to `Custom`, you must use DCNL the CreateInstance action\'s AmiId parameter to specify the custom DCNL AMI that you want to use. For more information on the standard DCNL operating systems, see `Operating Systems`_For more information on DCNL how to use custom AMIs with OpsWorks, see `Using Custom AMIs`_. DCNL :type ami_id: string DCNL :param ami_id: DCNL A custom AMI ID to be used to create the instance. The AMI should be DCNL based on one of the standard AWS OpsWorks AMIs: Amazon Linux, DCNL Ubuntu 12.04 LTS, or Ubuntu 14.04 LTS. For more information, see DCNL `Instances`_ DCNL If you specify a custom AMI, you must set `Os` to `Custom`. DCNL :type ssh_key_name: string DCNL :param ssh_key_name: The instance SSH key name. DCNL :type architecture: string DCNL :param architecture: The instance architecture. Instance types do not DCNL necessarily support both architectures. For a list of the DCNL architectures that are supported by the different instance types, DCNL see `Instance Families and Types`_. DCNL :type install_updates_on_boot: boolean DCNL :param install_updates_on_boot: DCNL Whether to install operating system and package updates when the DCNL instance boots. The default value is `True`. To control when DCNL updates are installed, set this value to `False`. You must then DCNL update your instances manually by using CreateDeployment to run the DCNL `update_dependencies` stack command or manually running `yum` DCNL (Amazon Linux) or `apt-get` (Ubuntu) on the instances. DCNL We strongly recommend using the default value of `True`, to ensure that DCNL your instances have the latest security updates. DCNL :type ebs_optimized: boolean DCNL :param ebs_optimized: Whether this is an Amazon EBS-optimized instance.'
def update_layer(self, layer_id, name=None, shortname=None, attributes=None, custom_instance_profile_arn=None, custom_security_group_ids=None, packages=None, volume_configurations=None, enable_auto_healing=None, auto_assign_elastic_ips=None, auto_assign_public_ips=None, custom_recipes=None, install_updates_on_boot=None, use_ebs_optimized_instances=None, lifecycle_event_configuration=None): DCNL 'Updates a specified layer. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type layer_id: string DCNL :param layer_id: The layer ID. DCNL :type name: string DCNL :param name: The layer name, which is used by the console. DCNL :type shortname: string DCNL :param shortname: The layer short name, which is used internally by AWS DCNL OpsWorksand by Chef. The short name is also used as the name for DCNL the directory where your app files are installed. It can have a DCNL maximum of 200 characters and must be in the following format: DCNL /\A[a-z0-9\-\_\.]+\Z/. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type custom_instance_profile_arn: string DCNL :param custom_instance_profile_arn: The ARN of an IAM profile to be DCNL used for all of the layer\'s EC2 instances. For more information DCNL about IAM ARNs, see `Using Identifiers`_. DCNL :type custom_security_group_ids: list DCNL :param custom_security_group_ids: An array containing the layer\'s DCNL custom security group IDs. DCNL :type packages: list DCNL :param packages: An array of `Package` objects that describe the DCNL layer\'s packages. DCNL :type volume_configurations: list DCNL :param volume_configurations: A `VolumeConfigurations` object that DCNL describes the layer\'s Amazon EBS volumes. DCNL :type enable_auto_healing: boolean DCNL :param enable_auto_healing: Whether to disable auto healing for the DCNL layer. DCNL :type auto_assign_elastic_ips: boolean DCNL :param auto_assign_elastic_ips: Whether to automatically assign an DCNL `Elastic IP address`_ to the layer\'s instances. For more DCNL information, see `How to Edit a Layer`_. DCNL :type auto_assign_public_ips: boolean DCNL :param auto_assign_public_ips: For stacks that are running in a VPC, DCNL whether to automatically assign a public IP address to the layer\'s DCNL instances. For more information, see `How to Edit a Layer`_. DCNL :type custom_recipes: dict DCNL :param custom_recipes: A `LayerCustomRecipes` object that specifies the DCNL layer\'s custom recipes. DCNL :type install_updates_on_boot: boolean DCNL :param install_updates_on_boot: DCNL Whether to install operating system and package updates when the DCNL instance boots. The default value is `True`. To control when DCNL updates are installed, set this value to `False`. You must then DCNL update your instances manually by using CreateDeployment to run the DCNL `update_dependencies` stack command or manually running `yum` DCNL (Amazon Linux) or `apt-get` (Ubuntu) on the instances. DCNL We strongly recommend using the default value of `True`, to ensure that DCNL your instances have the latest security updates. DCNL :type use_ebs_optimized_instances: boolean DCNL :param use_ebs_optimized_instances: Whether to use Amazon EBS-optimized DCNL instances. DCNL :type lifecycle_event_configuration: dict DCNL :param lifecycle_event_configuration:'
def update_my_user_profile(self, ssh_public_key=None): DCNL 'Updates a user\'s SSH public key. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have self-management enabled or an attached policy that DCNL explicitly grants permissions. For more information on user DCNL permissions, see `Managing User Permissions`_. DCNL :type ssh_public_key: string DCNL :param ssh_public_key: The user\'s SSH public key.'
def update_rds_db_instance(self, rds_db_instance_arn, db_user=None, db_password=None): DCNL 'Updates an Amazon RDS instance. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type rds_db_instance_arn: string DCNL :param rds_db_instance_arn: The Amazon RDS instance\'s ARN. DCNL :type db_user: string DCNL :param db_user: The master user name. DCNL :type db_password: string DCNL :param db_password: The database password.'
def update_stack(self, stack_id, name=None, attributes=None, service_role_arn=None, default_instance_profile_arn=None, default_os=None, hostname_theme=None, default_availability_zone=None, default_subnet_id=None, custom_json=None, configuration_manager=None, chef_configuration=None, use_custom_cookbooks=None, custom_cookbooks_source=None, default_ssh_key_name=None, default_root_device_type=None, use_opsworks_security_groups=None): DCNL 'Updates a specified stack. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type stack_id: string DCNL :param stack_id: The stack ID. DCNL :type name: string DCNL :param name: The stack\'s new name. DCNL :type attributes: map DCNL :param attributes: One or more user-defined key/value pairs to be added DCNL to the stack attributes. DCNL :type service_role_arn: string DCNL :param service_role_arn: DCNL The stack AWS Identity and Access Management (IAM) role, which allows DCNL AWS OpsWorks to work with AWS resources on your behalf. You must DCNL set this parameter to the Amazon Resource Name (ARN) for an DCNL existing IAM role. For more information about IAM ARNs, see `Using DCNL Identifiers`_. DCNL You must set this parameter to a valid service role ARN or the action DCNL will fail; there is no default value. You can specify the stack\'s DCNL current service role ARN, if you prefer, but you must do so DCNL explicitly. DCNL :type default_instance_profile_arn: string DCNL :param default_instance_profile_arn: The ARN of an IAM profile that is DCNL the default profile for all of the stack\'s EC2 instances. For more DCNL information about IAM ARNs, see `Using Identifiers`_. DCNL :type default_os: string DCNL :param default_os: The stack\'s operating system, which must be set to DCNL one of the following. DCNL + Standard operating systems: an Amazon Linux version such as `Amazon DCNL Linux 2014.09`, `Ubuntu 12.04 LTS`, or `Ubuntu 14.04 LTS`. DCNL + Custom AMIs: `Custom`. You specify the custom AMI you want to use DCNL when you create instances. DCNL The default option is the current Amazon Linux version. DCNL :type hostname_theme: string DCNL :param hostname_theme: The stack\'s new host name theme, with spaces are DCNL replaced by underscores. The theme is used to generate host names DCNL for the stack\'s instances. By default, `HostnameTheme` is set to DCNL `Layer_Dependent`, which creates host names by appending integers DCNL to the layer\'s short name. The other themes are: DCNL + `Baked_Goods` DCNL + `Clouds` DCNL + `European_Cities` DCNL + `Fruits` DCNL + `Greek_Deities` DCNL + `Legendary_Creatures_from_Japan` DCNL + `Planets_and_Moons` DCNL + `Roman_Deities` DCNL + `Scottish_Islands` DCNL + `US_Cities` DCNL + `Wild_Cats` DCNL To obtain a generated host name, call `GetHostNameSuggestion`, which DCNL returns a host name based on the current theme. DCNL :type default_availability_zone: string DCNL :param default_availability_zone: The stack\'s default Availability DCNL Zone, which must be in the specified region. For more information, DCNL see `Regions and Endpoints`_. If you also specify a value for DCNL `DefaultSubnetId`, the subnet must be in the same zone. For more DCNL information, see CreateStack. DCNL :type default_subnet_id: string DCNL :param default_subnet_id: The stack\'s default VPC subnet ID. This DCNL parameter is required if you specify a value for the `VpcId` DCNL parameter. All instances are launched into this subnet unless you DCNL specify otherwise when you create the instance. If you also specify DCNL a value for `DefaultAvailabilityZone`, the subnet must be in that DCNL zone. For information on default values and when this parameter is DCNL required, see the `VpcId` parameter description. DCNL :type custom_json: string DCNL :param custom_json: A string that contains user-defined, custom JSON. DCNL It is used to override the corresponding default stack DCNL configuration JSON values. The string should be in the following DCNL format and must escape characters such as \'"\'.: DCNL `"{"key1": "value1", "key2": "value2",...}"` DCNL For more information on custom JSON, see `Use Custom JSON to Modify the DCNL Stack Configuration JSON`_. DCNL :type configuration_manager: dict DCNL :param configuration_manager: The configuration manager. When you clone DCNL a stack we recommend that you use the configuration manager to DCNL specify the Chef version, 0.9, 11.4, or 11.10. The default value is DCNL currently 11.4. DCNL :type chef_configuration: dict DCNL :param chef_configuration: A `ChefConfiguration` object that specifies DCNL whether to enable Berkshelf and the Berkshelf version on Chef 11.10 DCNL stacks. For more information, see `Create a New Stack`_. DCNL :type use_custom_cookbooks: boolean DCNL :param use_custom_cookbooks: Whether the stack uses custom cookbooks. DCNL :type custom_cookbooks_source: dict DCNL :param custom_cookbooks_source: Contains the information required to DCNL retrieve an app or cookbook from a repository. For more DCNL information, see `Creating Apps`_ or `Custom Recipes and DCNL Cookbooks`_. DCNL :type default_ssh_key_name: string DCNL :param default_ssh_key_name: A default SSH key for the stack instances. DCNL You can override this value when you create or update an instance. DCNL :type default_root_device_type: string DCNL :param default_root_device_type: The default root device type. This DCNL value is used by default for all instances in the stack, but you DCNL can override it when you create an instance. For more information, DCNL see `Storage for the Root Device`_. DCNL :type use_opsworks_security_groups: boolean DCNL :param use_opsworks_security_groups: Whether to associate the AWS DCNL OpsWorks built-in security groups with the stack\'s layers. DCNL AWS OpsWorks provides a standard set of built-in security groups, one DCNL for each layer, which are associated with layers by default. DCNL `UseOpsworksSecurityGroups` allows you to instead provide your own DCNL custom security groups. `UseOpsworksSecurityGroups` has the DCNL following settings: DCNL + True - AWS OpsWorks automatically associates the appropriate built-in DCNL security group with each layer (default setting). You can associate DCNL additional security groups with a layer after you create it but you DCNL cannot delete the built-in security group. DCNL + False - AWS OpsWorks does not associate built-in security groups with DCNL layers. You must create appropriate EC2 security groups and DCNL associate a security group with each layer that you create. DCNL However, you can still manually associate a built-in security group DCNL with a layer on creation; custom security groups are required only DCNL for those layers that need custom settings. DCNL For more information, see `Create a New Stack`_.'
def update_user_profile(self, iam_user_arn, ssh_username=None, ssh_public_key=None, allow_self_management=None): DCNL 'Updates a specified user profile. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have an attached policy that explicitly grants permissions. DCNL For more information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type iam_user_arn: string DCNL :param iam_user_arn: The user IAM ARN. DCNL :type ssh_username: string DCNL :param ssh_username: The user\'s SSH user name. The allowable characters DCNL are [a-z], [A-Z], [0-9], \'-\', and \'_\'. If the specified name DCNL includes other punctuation marks, AWS OpsWorks removes them. For DCNL example, `my.name` will be changed to `myname`. If you do not DCNL specify an SSH user name, AWS OpsWorks generates one from the IAM DCNL user name. DCNL :type ssh_public_key: string DCNL :param ssh_public_key: The user\'s new SSH public key. DCNL :type allow_self_management: boolean DCNL :param allow_self_management: Whether users can specify their own SSH DCNL public key through the My Settings page. For more information, see DCNL `Managing User Permissions`_.'
def update_volume(self, volume_id, name=None, mount_point=None): DCNL 'Updates an Amazon EBS volume\'s name or mount point. For more DCNL information, see `Resource Management`_. DCNL **Required Permissions**: To use this action, an IAM user must DCNL have a Manage permissions level for the stack, or an attached DCNL policy that explicitly grants permissions. For more DCNL information on user permissions, see `Managing User DCNL Permissions`_. DCNL :type volume_id: string DCNL :param volume_id: The volume ID. DCNL :type name: string DCNL :param name: The new name. DCNL :type mount_point: string DCNL :param mount_point: The new mount point.'
def delete_delivery_channel(self, delivery_channel_name): DCNL 'Deletes the specified delivery channel. DCNL The delivery channel cannot be deleted if it is the only DCNL delivery channel and the configuration recorder is still DCNL running. To delete the delivery channel, stop the running DCNL configuration recorder using the StopConfigurationRecorder DCNL action. DCNL :type delivery_channel_name: string DCNL :param delivery_channel_name: The name of the delivery channel to DCNL delete.'
def deliver_config_snapshot(self, delivery_channel_name): DCNL 'Schedules delivery of a configuration snapshot to the Amazon DCNL S3 bucket in the specified delivery channel. After the DCNL delivery has started, AWS Config sends following notifications DCNL using an Amazon SNS topic that you have specified. DCNL + Notification of starting the delivery. DCNL + Notification of delivery completed, if the delivery was DCNL successfully completed. DCNL + Notification of delivery failure, if the delivery failed to DCNL complete. DCNL :type delivery_channel_name: string DCNL :param delivery_channel_name: The name of the delivery channel through DCNL which the snapshot is delivered.'
def describe_configuration_recorder_status(self, configuration_recorder_names=None): DCNL 'Returns the current status of the specified configuration DCNL recorder. If a configuration recorder is not specified, this DCNL action returns the status of all configuration recorder DCNL associated with the account. DCNL :type configuration_recorder_names: list DCNL :param configuration_recorder_names: The name(s) of the configuration DCNL recorder. If the name is not specified, the action returns the DCNL current status of all the configuration recorders associated with DCNL the account.'
def describe_configuration_recorders(self, configuration_recorder_names=None): DCNL 'Returns the name of one or more specified configuration DCNL recorders. If the recorder name is not specified, this action DCNL returns the names of all the configuration recorders DCNL associated with the account. DCNL :type configuration_recorder_names: list DCNL :param configuration_recorder_names: A list of configuration recorder DCNL names.'
def describe_delivery_channel_status(self, delivery_channel_names=None): DCNL 'Returns the current status of the specified delivery channel. DCNL If a delivery channel is not specified, this action returns DCNL the current status of all delivery channels associated with DCNL the account. DCNL :type delivery_channel_names: list DCNL :param delivery_channel_names: A list of delivery channel names.'
def describe_delivery_channels(self, delivery_channel_names=None): DCNL 'Returns details about the specified delivery channel. If a DCNL delivery channel is not specified, this action returns the DCNL details of all delivery channels associated with the account. DCNL :type delivery_channel_names: list DCNL :param delivery_channel_names: A list of delivery channel names.'
def get_resource_config_history(self, resource_type, resource_id, later_time=None, earlier_time=None, chronological_order=None, limit=None, next_token=None): DCNL 'Returns a list of configuration items for the specified DCNL resource. The list contains details about each state of the DCNL resource during the specified time interval. You can specify a DCNL `limit` on the number of results returned on the page. If a DCNL limit is specified, a `nextToken` is returned as part of the DCNL result that you can use to continue this request. DCNL :type resource_type: string DCNL :param resource_type: The resource type. DCNL :type resource_id: string DCNL :param resource_id: The ID of the resource (for example., `sg-xxxxxx`). DCNL :type later_time: timestamp DCNL :param later_time: The time stamp that indicates a later time. If not DCNL specified, current time is taken. DCNL :type earlier_time: timestamp DCNL :param earlier_time: The time stamp that indicates an earlier time. If DCNL not specified, the action returns paginated results that contain DCNL configuration items that start from when the first configuration DCNL item was recorded. DCNL :type chronological_order: string DCNL :param chronological_order: The chronological order for configuration DCNL items listed. By default the results are listed in reverse DCNL chronological order. DCNL :type limit: integer DCNL :param limit: The maximum number of configuration items returned in DCNL each page. The default is 10. You cannot specify a limit greater DCNL than 100. DCNL :type next_token: string DCNL :param next_token: An optional parameter used for pagination of the DCNL results.'
def put_configuration_recorder(self, configuration_recorder): DCNL 'Creates a new configuration recorder to record the resource DCNL configurations. DCNL You can use this action to change the role ( `roleARN`) of an DCNL existing recorder. To change the role, call the action on the DCNL existing configuration recorder and specify a role. DCNL :type configuration_recorder: dict DCNL :param configuration_recorder: The configuration recorder object that DCNL records each configuration change made to the resources. The DCNL format should follow: DCNL {\'name\': \'myrecorder\', DCNL \'roleARN\': \'arn:aws:iam::123456789012:role/trusted-aws-config\'}'
def put_delivery_channel(self, delivery_channel): DCNL 'Creates a new delivery channel object to deliver the DCNL configuration information to an Amazon S3 bucket, and to an DCNL Amazon SNS topic. DCNL You can use this action to change the Amazon S3 bucket or an DCNL Amazon SNS topic of the existing delivery channel. To change DCNL the Amazon S3 bucket or an Amazon SNS topic, call this action DCNL and specify the changed values for the S3 bucket and the SNS DCNL topic. If you specify a different value for either the S3 DCNL bucket or the SNS topic, this action will keep the existing DCNL value for the parameter that is not changed. DCNL :type delivery_channel: dict DCNL :param delivery_channel: The configuration delivery channel object that DCNL delivers the configuration information to an Amazon S3 bucket, and DCNL to an Amazon SNS topic.'
def start_configuration_recorder(self, configuration_recorder_name): DCNL 'Starts recording configurations of all the resources DCNL associated with the account. DCNL You must have created at least one delivery channel to DCNL successfully start the configuration recorder. DCNL :type configuration_recorder_name: string DCNL :param configuration_recorder_name: The name of the recorder object DCNL that records each configuration change made to the resources.'
def stop_configuration_recorder(self, configuration_recorder_name): DCNL 'Stops recording configurations of all the resources associated DCNL with the account. DCNL :type configuration_recorder_name: string DCNL :param configuration_recorder_name: The name of the recorder object DCNL that records each configuration change made to the resources.'
def get_all_dbinstances(self, instance_id=None, max_records=None, marker=None): DCNL 'Retrieve all the DBInstances in your account. DCNL :type instance_id: str DCNL :param instance_id: DB Instance identifier.  If supplied, only DCNL information this instance will be returned. DCNL Otherwise, info about all DB Instances will DCNL be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of :class:`boto.rds.dbinstance.DBInstance`'
def create_dbinstance(self, id, allocated_storage, instance_class, master_username, master_password, port=3306, engine='MySQL5.1', db_name=None, param_group=None, security_groups=None, availability_zone=None, preferred_maintenance_window=None, backup_retention_period=None, preferred_backup_window=None, multi_az=False, engine_version=None, auto_minor_version_upgrade=True, character_set_name=None, db_subnet_group_name=None, license_model=None, option_group_name=None, iops=None, vpc_security_groups=None): DCNL 'Create a new DBInstance. DCNL :type id: str DCNL :param id: Unique identifier for the new instance. DCNL Must contain 1-63 alphanumeric characters. DCNL First character must be a letter. DCNL May not end with a hyphen or contain two consecutive hyphens DCNL :type allocated_storage: int DCNL :param allocated_storage: Initially allocated storage size, in GBs. DCNL Valid values are depending on the engine value. DCNL * MySQL = 5--3072 DCNL * oracle-se1 = 10--3072 DCNL * oracle-se = 10--3072 DCNL * oracle-ee = 10--3072 DCNL * sqlserver-ee = 200--1024 DCNL * sqlserver-se = 200--1024 DCNL * sqlserver-ex = 30--1024 DCNL * sqlserver-web = 30--1024 DCNL * postgres = 5--3072 DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of DCNL the DBInstance. Valid values are: DCNL * db.t1.micro DCNL * db.m1.small DCNL * db.m1.medium DCNL * db.m1.large DCNL * db.m1.xlarge DCNL * db.m2.xlarge DCNL * db.m2.2xlarge DCNL * db.m2.4xlarge DCNL :type engine: str DCNL :param engine: Name of database engine. Defaults to MySQL but can be; DCNL * MySQL DCNL * oracle-se1 DCNL * oracle-se DCNL * oracle-ee DCNL * sqlserver-ee DCNL * sqlserver-se DCNL * sqlserver-ex DCNL * sqlserver-web DCNL * postgres DCNL :type master_username: str DCNL :param master_username: Name of master user for the DBInstance. DCNL * MySQL must be; DCNL - 1--16 alphanumeric characters DCNL - first character must be a letter DCNL - cannot be a reserved MySQL word DCNL * Oracle must be: DCNL - 1--30 alphanumeric characters DCNL - first character must be a letter DCNL - cannot be a reserved Oracle word DCNL * SQL Server must be: DCNL - 1--128 alphanumeric characters DCNL - first character must be a letter DCNL - cannot be a reserver SQL Server word DCNL :type master_password: str DCNL :param master_password: Password of master user for the DBInstance. DCNL * MySQL must be 8--41 alphanumeric characters DCNL * Oracle must be 8--30 alphanumeric characters DCNL * SQL Server must be 8--128 alphanumeric characters. DCNL :type port: int DCNL :param port: Port number on which database accepts connections. DCNL Valid values [1115-65535]. DCNL * MySQL defaults to 3306 DCNL * Oracle defaults to 1521 DCNL * SQL Server defaults to 1433 and _cannot_ be 1434, 3389, DCNL 47001, 49152, and 49152 through 49156. DCNL * PostgreSQL defaults to 5432 DCNL :type db_name: str DCNL :param db_name: * MySQL: DCNL Name of a database to create when the DBInstance DCNL is created. Default is to create no databases. DCNL Must contain 1--64 alphanumeric characters and cannot DCNL be a reserved MySQL word. DCNL * Oracle: DCNL The Oracle System ID (SID) of the created DB instances. DCNL Default is ORCL. Cannot be longer than 8 characters. DCNL * SQL Server: DCNL Not applicable and must be None. DCNL * PostgreSQL: DCNL Name of a database to create when the DBInstance DCNL is created. Default is to create no databases. DCNL Must contain 1--63 alphanumeric characters. Must DCNL begin with a letter or an underscore. Subsequent DCNL characters can be letters, underscores, or digits (0-9) DCNL and cannot be a reserved PostgreSQL word. DCNL :type param_group: str or ParameterGroup object DCNL :param param_group: Name of DBParameterGroup or ParameterGroup instance DCNL to associate with this DBInstance.  If no groups are DCNL specified no parameter groups will be used. DCNL :type security_groups: list of str or list of DBSecurityGroup objects DCNL :param security_groups: List of names of DBSecurityGroup to DCNL authorize on this DBInstance. DCNL :type availability_zone: str DCNL :param availability_zone: Name of the availability zone to place DCNL DBInstance into. DCNL :type preferred_maintenance_window: str DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which maintenance can occur. DCNL Default is Sun:05:00-Sun:09:00 DCNL :type backup_retention_period: int DCNL :param backup_retention_period: The number of days for which automated DCNL backups are retained.  Setting this to DCNL zero disables automated backups. DCNL :type preferred_backup_window: str DCNL :param preferred_backup_window: The daily time range during which DCNL automated backups are created (if DCNL enabled).  Must be in h24:mi-hh24:mi DCNL format (UTC). DCNL :type multi_az: bool DCNL :param multi_az: If True, specifies the DB Instance will be DCNL deployed in multiple availability zones. DCNL For Microsoft SQL Server, must be set to false. You cannot set DCNL the AvailabilityZone parameter if the MultiAZ parameter is DCNL set to true. DCNL :type engine_version: str DCNL :param engine_version: The version number of the database engine to use. DCNL * MySQL format example: 5.1.42 DCNL * Oracle format example: 11.2.0.2.v2 DCNL * SQL Server format example: 10.50.2789.0.v1 DCNL * PostgreSQL format example: 9.3 DCNL :type auto_minor_version_upgrade: bool DCNL :param auto_minor_version_upgrade: Indicates that minor engine DCNL upgrades will be applied DCNL automatically to the Read Replica DCNL during the maintenance window. DCNL Default is True. DCNL :type character_set_name: str DCNL :param character_set_name: For supported engines, indicates that the DB Instance DCNL should be associated with the specified CharacterSet. DCNL :type db_subnet_group_name: str DCNL :param db_subnet_group_name: A DB Subnet Group to associate with this DB Instance. DCNL If there is no DB Subnet Group, then it is a non-VPC DB DCNL instance. DCNL :type license_model: str DCNL :param license_model: License model information for this DB Instance. DCNL Valid values are; DCNL - license-included DCNL - bring-your-own-license DCNL - general-public-license DCNL All license types are not supported on all engines. DCNL :type option_group_name: str DCNL :param option_group_name: Indicates that the DB Instance should be associated DCNL with the specified option group. DCNL :type iops: int DCNL :param iops:  The amount of IOPS (input/output operations per second) to Provisioned DCNL for the DB Instance. Can be modified at a later date. DCNL Must scale linearly. For every 1000 IOPS provision, you must allocated DCNL 100 GB of storage space. This scales up to 1 TB / 10 000 IOPS for MySQL DCNL and Oracle. MSSQL is limited to 700 GB / 7 000 IOPS. DCNL If you specify a value, it must be at least 1000 IOPS and you must DCNL allocate 100 GB of storage. DCNL :type vpc_security_groups: list of str or a VPCSecurityGroupMembership object DCNL :param vpc_security_groups: List of VPC security group ids or a list of DCNL VPCSecurityGroupMembership objects this DBInstance should be a member of DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The new db instance.'
def create_dbinstance_read_replica(self, id, source_id, instance_class=None, port=3306, availability_zone=None, auto_minor_version_upgrade=None): DCNL 'Create a new DBInstance Read Replica. DCNL :type id: str DCNL :param id: Unique identifier for the new instance. DCNL Must contain 1-63 alphanumeric characters. DCNL First character must be a letter. DCNL May not end with a hyphen or contain two consecutive hyphens DCNL :type source_id: str DCNL :param source_id: Unique identifier for the DB Instance for which this DCNL DB Instance will act as a Read Replica. DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of the DCNL DBInstance.  Default is to inherit from DCNL the source DB Instance. DCNL Valid values are: DCNL * db.m1.small DCNL * db.m1.large DCNL * db.m1.xlarge DCNL * db.m2.xlarge DCNL * db.m2.2xlarge DCNL * db.m2.4xlarge DCNL :type port: int DCNL :param port: Port number on which database accepts connections. DCNL Default is to inherit from source DB Instance. DCNL Valid values [1115-65535].  Defaults to 3306. DCNL :type availability_zone: str DCNL :param availability_zone: Name of the availability zone to place DCNL DBInstance into. DCNL :type auto_minor_version_upgrade: bool DCNL :param auto_minor_version_upgrade: Indicates that minor engine DCNL upgrades will be applied DCNL automatically to the Read Replica DCNL during the maintenance window. DCNL Default is to inherit this value DCNL from the source DB Instance. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The new db instance.'
def promote_read_replica(self, id, backup_retention_period=None, preferred_backup_window=None): DCNL 'Promote a Read Replica to a standalone DB Instance. DCNL :type id: str DCNL :param id: Unique identifier for the new instance. DCNL Must contain 1-63 alphanumeric characters. DCNL First character must be a letter. DCNL May not end with a hyphen or contain two consecutive hyphens DCNL :type backup_retention_period: int DCNL :param backup_retention_period: The number of days for which automated DCNL backups are retained.  Setting this to DCNL zero disables automated backups. DCNL :type preferred_backup_window: str DCNL :param preferred_backup_window: The daily time range during which DCNL automated backups are created (if DCNL enabled).  Must be in h24:mi-hh24:mi DCNL format (UTC). DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The new db instance.'
def modify_dbinstance(self, id, param_group=None, security_groups=None, preferred_maintenance_window=None, master_password=None, allocated_storage=None, instance_class=None, backup_retention_period=None, preferred_backup_window=None, multi_az=False, apply_immediately=False, iops=None, vpc_security_groups=None, new_instance_id=None): DCNL 'Modify an existing DBInstance. DCNL :type id: str DCNL :param id: Unique identifier for the new instance. DCNL :type param_group: str or ParameterGroup object DCNL :param param_group: Name of DBParameterGroup or ParameterGroup instance DCNL to associate with this DBInstance.  If no groups are DCNL specified no parameter groups will be used. DCNL :type security_groups: list of str or list of DBSecurityGroup objects DCNL :param security_groups: List of names of DBSecurityGroup to authorize on DCNL this DBInstance. DCNL :type preferred_maintenance_window: str DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which maintenance can DCNL occur. DCNL Default is Sun:05:00-Sun:09:00 DCNL :type master_password: str DCNL :param master_password: Password of master user for the DBInstance. DCNL Must be 4-15 alphanumeric characters. DCNL :type allocated_storage: int DCNL :param allocated_storage: The new allocated storage size, in GBs. DCNL Valid values are [5-1024] DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of the DCNL DBInstance.  Changes will be applied at DCNL next maintenance window unless DCNL apply_immediately is True. DCNL Valid values are: DCNL * db.m1.small DCNL * db.m1.large DCNL * db.m1.xlarge DCNL * db.m2.xlarge DCNL * db.m2.2xlarge DCNL * db.m2.4xlarge DCNL :type apply_immediately: bool DCNL :param apply_immediately: If true, the modifications will be applied DCNL as soon as possible rather than waiting for DCNL the next preferred maintenance window. DCNL :type backup_retention_period: int DCNL :param backup_retention_period: The number of days for which automated DCNL backups are retained.  Setting this to DCNL zero disables automated backups. DCNL :type preferred_backup_window: str DCNL :param preferred_backup_window: The daily time range during which DCNL automated backups are created (if DCNL enabled).  Must be in h24:mi-hh24:mi DCNL format (UTC). DCNL :type multi_az: bool DCNL :param multi_az: If True, specifies the DB Instance will be DCNL deployed in multiple availability zones. DCNL :type iops: int DCNL :param iops:  The amount of IOPS (input/output operations per second) to Provisioned DCNL for the DB Instance. Can be modified at a later date. DCNL Must scale linearly. For every 1000 IOPS provision, you must allocated DCNL 100 GB of storage space. This scales up to 1 TB / 10 000 IOPS for MySQL DCNL and Oracle. MSSQL is limited to 700 GB / 7 000 IOPS. DCNL If you specify a value, it must be at least 1000 IOPS and you must DCNL allocate 100 GB of storage. DCNL :type vpc_security_groups: list of str or a VPCSecurityGroupMembership object DCNL :param vpc_security_groups: List of VPC security group ids or a DCNL VPCSecurityGroupMembership object this DBInstance should be a member of DCNL :type new_instance_id: str DCNL :param new_instance_id: New name to rename the DBInstance to. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The modified db instance.'
def delete_dbinstance(self, id, skip_final_snapshot=False, final_snapshot_id=''): DCNL 'Delete an existing DBInstance. DCNL :type id: str DCNL :param id: Unique identifier for the new instance. DCNL :type skip_final_snapshot: bool DCNL :param skip_final_snapshot: This parameter determines whether a final DCNL db snapshot is created before the instance DCNL is deleted.  If True, no snapshot DCNL is created.  If False, a snapshot DCNL is created before deleting the instance. DCNL :type final_snapshot_id: str DCNL :param final_snapshot_id: If a final snapshot is requested, this DCNL is the identifier used for that snapshot. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The deleted db instance.'
def reboot_dbinstance(self, id): DCNL 'Reboot DBInstance. DCNL :type id: str DCNL :param id: Unique identifier of the instance. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The rebooting db instance.'
def get_all_dbparameter_groups(self, groupname=None, max_records=None, marker=None): DCNL 'Get all parameter groups associated with your account in a region. DCNL :type groupname: str DCNL :param groupname: The name of the DBParameter group to retrieve. DCNL If not provided, all DBParameter groups will be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of :class:`boto.ec2.parametergroup.ParameterGroup`'
def get_all_dbparameters(self, groupname, source=None, max_records=None, marker=None): DCNL 'Get all parameters associated with a ParameterGroup DCNL :type groupname: str DCNL :param groupname: The name of the DBParameter group to retrieve. DCNL :type source: str DCNL :param source: Specifies which parameters to return. DCNL If not specified, all parameters will be returned. DCNL Valid values are: user|system|engine-default DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: :class:`boto.ec2.parametergroup.ParameterGroup` DCNL :return: The ParameterGroup'
def create_parameter_group(self, name, engine='MySQL5.1', description=''): DCNL 'Create a new dbparameter group for your account. DCNL :type name: string DCNL :param name: The name of the new dbparameter group DCNL :type engine: str DCNL :param engine: Name of database engine. DCNL :type description: string DCNL :param description: The description of the new dbparameter group DCNL :rtype: :class:`boto.rds.parametergroup.ParameterGroup` DCNL :return: The newly created ParameterGroup'
def modify_parameter_group(self, name, parameters=None): DCNL 'Modify a ParameterGroup for your account. DCNL :type name: string DCNL :param name: The name of the new ParameterGroup DCNL :type parameters: list of :class:`boto.rds.parametergroup.Parameter` DCNL :param parameters: The new parameters DCNL :rtype: :class:`boto.rds.parametergroup.ParameterGroup` DCNL :return: The newly created ParameterGroup'
def reset_parameter_group(self, name, reset_all_params=False, parameters=None): DCNL 'Resets some or all of the parameters of a ParameterGroup to the DCNL default value DCNL :type key_name: string DCNL :param key_name: The name of the ParameterGroup to reset DCNL :type parameters: list of :class:`boto.rds.parametergroup.Parameter` DCNL :param parameters: The parameters to reset.  If not supplied, DCNL all parameters will be reset.'
def delete_parameter_group(self, name): DCNL 'Delete a ParameterGroup from your account. DCNL :type key_name: string DCNL :param key_name: The name of the ParameterGroup to delete'
def get_all_dbsecurity_groups(self, groupname=None, max_records=None, marker=None): DCNL 'Get all security groups associated with your account in a region. DCNL :type groupnames: list DCNL :param groupnames: A list of the names of security groups to retrieve. DCNL If not provided, all security groups will DCNL be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of :class:`boto.rds.dbsecuritygroup.DBSecurityGroup`'
def create_dbsecurity_group(self, name, description=None): DCNL 'Create a new security group for your account. DCNL This will create the security group within the region you DCNL are currently connected to. DCNL :type name: string DCNL :param name: The name of the new security group DCNL :type description: string DCNL :param description: The description of the new security group DCNL :rtype: :class:`boto.rds.dbsecuritygroup.DBSecurityGroup` DCNL :return: The newly created DBSecurityGroup'
def delete_dbsecurity_group(self, name): DCNL 'Delete a DBSecurityGroup from your account. DCNL :type key_name: string DCNL :param key_name: The name of the DBSecurityGroup to delete'
def authorize_dbsecurity_group(self, group_name, cidr_ip=None, ec2_security_group_name=None, ec2_security_group_owner_id=None): DCNL 'Add a new rule to an existing security group. DCNL You need to pass in either src_security_group_name and DCNL src_security_group_owner_id OR a CIDR block but not both. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are adding DCNL the rule to. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The name of the EC2 security group DCNL you are granting access to. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The ID of the owner of the EC2 DCNL security group you are granting DCNL access to. DCNL :type cidr_ip: string DCNL :param cidr_ip: The CIDR block you are providing access to. DCNL See http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing DCNL :rtype: bool DCNL :return: True if successful.'
def revoke_dbsecurity_group(self, group_name, ec2_security_group_name=None, ec2_security_group_owner_id=None, cidr_ip=None): DCNL 'Remove an existing rule from an existing security group. DCNL You need to pass in either ec2_security_group_name and DCNL ec2_security_group_owner_id OR a CIDR block. DCNL :type group_name: string DCNL :param group_name: The name of the security group you are removing DCNL the rule from. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The name of the EC2 security group DCNL from which you are removing access. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The ID of the owner of the EC2 DCNL security from which you are DCNL removing access. DCNL :type cidr_ip: string DCNL :param cidr_ip: The CIDR block from which you are removing access. DCNL See http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing DCNL :rtype: bool DCNL :return: True if successful.'
def get_all_dbsnapshots(self, snapshot_id=None, instance_id=None, max_records=None, marker=None): DCNL 'Get information about DB Snapshots. DCNL :type snapshot_id: str DCNL :param snapshot_id: The unique identifier of an RDS snapshot. DCNL If not provided, all RDS snapshots will be returned. DCNL :type instance_id: str DCNL :param instance_id: The identifier of a DBInstance.  If provided, DCNL only the DBSnapshots related to that instance will DCNL be returned. DCNL If not provided, all RDS snapshots will be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of :class:`boto.rds.dbsnapshot.DBSnapshot`'
def get_all_logs(self, dbinstance_id, max_records=None, marker=None, file_size=None, filename_contains=None, file_last_written=None): DCNL 'Get all log files DCNL :type instance_id: str DCNL :param instance_id: The identifier of a DBInstance. DCNL :type max_records: int DCNL :param max_records: Number of log file names to return. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :file_size: int DCNL :param file_size: Filter results to files large than this size in bytes. DCNL :filename_contains: str DCNL :param filename_contains: Filter results to files with filename containing this string DCNL :file_last_written: int DCNL :param file_last_written: Filter results to files written after this time (POSIX timestamp) DCNL :rtype: list DCNL :return: A list of :class:`boto.rds.logfile.LogFile`'
def get_log_file(self, dbinstance_id, log_file_name, marker=None, number_of_lines=None, max_records=None): DCNL 'Download a log file from RDS DCNL :type instance_id: str DCNL :param instance_id: The identifier of a DBInstance. DCNL :type log_file_name: str DCNL :param log_file_name: The name of the log file to retrieve DCNL :type marker: str DCNL :param marker: A marker returned from a previous call to this method, or 0 to indicate the start of file. If DCNL no marker is specified, this will fetch log lines from the end of file instead. DCNL :type number_of_lines: int DCNL :param marker: The maximium number of lines to be returned.'
def create_dbsnapshot(self, snapshot_id, dbinstance_id): DCNL 'Create a new DB snapshot. DCNL :type snapshot_id: string DCNL :param snapshot_id: The identifier for the DBSnapshot DCNL :type dbinstance_id: string DCNL :param dbinstance_id: The source identifier for the RDS instance from DCNL which the snapshot is created. DCNL :rtype: :class:`boto.rds.dbsnapshot.DBSnapshot` DCNL :return: The newly created DBSnapshot'
def copy_dbsnapshot(self, source_snapshot_id, target_snapshot_id): DCNL 'Copies the specified DBSnapshot. DCNL :type source_snapshot_id: string DCNL :param source_snapshot_id: The identifier for the source DB snapshot. DCNL :type target_snapshot_id: string DCNL :param target_snapshot_id: The identifier for the copied snapshot. DCNL :rtype: :class:`boto.rds.dbsnapshot.DBSnapshot` DCNL :return: The newly created DBSnapshot.'
def delete_dbsnapshot(self, identifier): DCNL 'Delete a DBSnapshot DCNL :type identifier: string DCNL :param identifier: The identifier of the DBSnapshot to delete'
def restore_dbinstance_from_dbsnapshot(self, identifier, instance_id, instance_class, port=None, availability_zone=None, multi_az=None, auto_minor_version_upgrade=None, db_subnet_group_name=None): DCNL 'Create a new DBInstance from a DB snapshot. DCNL :type identifier: string DCNL :param identifier: The identifier for the DBSnapshot DCNL :type instance_id: string DCNL :param instance_id: The source identifier for the RDS instance from DCNL which the snapshot is created. DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of the DCNL DBInstance.  Valid values are: DCNL db.m1.small | db.m1.large | db.m1.xlarge | DCNL db.m2.2xlarge | db.m2.4xlarge DCNL :type port: int DCNL :param port: Port number on which database accepts connections. DCNL Valid values [1115-65535].  Defaults to 3306. DCNL :type availability_zone: str DCNL :param availability_zone: Name of the availability zone to place DCNL DBInstance into. DCNL :type multi_az: bool DCNL :param multi_az: If True, specifies the DB Instance will be DCNL deployed in multiple availability zones. DCNL Default is the API default. DCNL :type auto_minor_version_upgrade: bool DCNL :param auto_minor_version_upgrade: Indicates that minor engine DCNL upgrades will be applied DCNL automatically to the Read Replica DCNL during the maintenance window. DCNL Default is the API default. DCNL :type db_subnet_group_name: str DCNL :param db_subnet_group_name: A DB Subnet Group to associate with this DB Instance. DCNL If there is no DB Subnet Group, then it is a non-VPC DB DCNL instance. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The newly created DBInstance'
def restore_dbinstance_from_point_in_time(self, source_instance_id, target_instance_id, use_latest=False, restore_time=None, dbinstance_class=None, port=None, availability_zone=None, db_subnet_group_name=None): DCNL 'Create a new DBInstance from a point in time. DCNL :type source_instance_id: string DCNL :param source_instance_id: The identifier for the source DBInstance. DCNL :type target_instance_id: string DCNL :param target_instance_id: The identifier of the new DBInstance. DCNL :type use_latest: bool DCNL :param use_latest: If True, the latest snapshot availabile will DCNL be used. DCNL :type restore_time: datetime DCNL :param restore_time: The date and time to restore from.  Only DCNL used if use_latest is False. DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of the DCNL DBInstance.  Valid values are: DCNL db.m1.small | db.m1.large | db.m1.xlarge | DCNL db.m2.2xlarge | db.m2.4xlarge DCNL :type port: int DCNL :param port: Port number on which database accepts connections. DCNL Valid values [1115-65535].  Defaults to 3306. DCNL :type availability_zone: str DCNL :param availability_zone: Name of the availability zone to place DCNL DBInstance into. DCNL :type db_subnet_group_name: str DCNL :param db_subnet_group_name: A DB Subnet Group to associate with this DB Instance. DCNL If there is no DB Subnet Group, then it is a non-VPC DB DCNL instance. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The newly created DBInstance'
def get_all_events(self, source_identifier=None, source_type=None, start_time=None, end_time=None, max_records=None, marker=None): DCNL 'Get information about events related to your DBInstances, DCNL DBSecurityGroups and DBParameterGroups. DCNL :type source_identifier: str DCNL :param source_identifier: If supplied, the events returned will be DCNL limited to those that apply to the identified DCNL source.  The value of this parameter depends DCNL on the value of source_type.  If neither DCNL parameter is specified, all events in the time DCNL span will be returned. DCNL :type source_type: str DCNL :param source_type: Specifies how the source_identifier should DCNL be interpreted.  Valid values are: DCNL b-instance | db-security-group | DCNL db-parameter-group | db-snapshot DCNL :type start_time: datetime DCNL :param start_time: The beginning of the time interval for events. DCNL If not supplied, all available events will DCNL be returned. DCNL :type end_time: datetime DCNL :param end_time: The ending of the time interval for events. DCNL If not supplied, all available events will DCNL be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of class:`boto.rds.event.Event`'
def create_db_subnet_group(self, name, desc, subnet_ids): DCNL 'Create a new Database Subnet Group. DCNL :type name: string DCNL :param name: The identifier for the db_subnet_group DCNL :type desc: string DCNL :param desc: A description of the db_subnet_group DCNL :type subnet_ids: list DCNL :param subnets: A list of the subnet identifiers to include in the DCNL db_subnet_group DCNL :rtype: :class:`boto.rds.dbsubnetgroup.DBSubnetGroup DCNL :return: the created db_subnet_group'
def delete_db_subnet_group(self, name): DCNL 'Delete a Database Subnet Group. DCNL :type name: string DCNL :param name: The identifier of the db_subnet_group to delete DCNL :rtype: :class:`boto.rds.dbsubnetgroup.DBSubnetGroup` DCNL :return: The deleted db_subnet_group.'
def get_all_db_subnet_groups(self, name=None, max_records=None, marker=None): DCNL 'Retrieve all the DBSubnetGroups in your account. DCNL :type name: str DCNL :param name: DBSubnetGroup name If supplied, only information about DCNL this DBSubnetGroup will be returned. Otherwise, info DCNL about all DBSubnetGroups will be returned. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a Token will be DCNL returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of :class:`boto.rds.dbsubnetgroup.DBSubnetGroup`'
def modify_db_subnet_group(self, name, description=None, subnet_ids=None): DCNL 'Modify a parameter group for your account. DCNL :type name: string DCNL :param name: The name of the new parameter group DCNL :type parameters: list of :class:`boto.rds.parametergroup.Parameter` DCNL :param parameters: The new parameters DCNL :rtype: :class:`boto.rds.parametergroup.ParameterGroup` DCNL :return: The newly created ParameterGroup'
def create_option_group(self, name, engine_name, major_engine_version, description=None): DCNL 'Create a new option group for your account. DCNL This will create the option group within the region you DCNL are currently connected to. DCNL :type name: string DCNL :param name: The name of the new option group DCNL :type engine_name: string DCNL :param engine_name: Specifies the name of the engine that this option DCNL group should be associated with. DCNL :type major_engine_version: string DCNL :param major_engine_version: Specifies the major version of the engine DCNL that this option group should be DCNL associated with. DCNL :type description: string DCNL :param description: The description of the new option group DCNL :rtype: :class:`boto.rds.optiongroup.OptionGroup` DCNL :return: The newly created OptionGroup'
def delete_option_group(self, name): DCNL 'Delete an OptionGroup from your account. DCNL :type key_name: string DCNL :param key_name: The name of the OptionGroup to delete'
def describe_option_groups(self, name=None, engine_name=None, major_engine_version=None, max_records=100, marker=None): DCNL 'Describes the available option groups. DCNL :type name: str DCNL :param name: The name of the option group to describe. Cannot be DCNL supplied together with engine_name or major_engine_version. DCNL :type engine_name: str DCNL :param engine_name: Filters the list of option groups to only include DCNL groups associated with a specific database engine. DCNL :type major_engine_version: datetime DCNL :param major_engine_version: Filters the list of option groups to only DCNL include groups associated with a specific DCNL database engine version. If specified, then DCNL engine_name must also be specified. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of class:`boto.rds.optiongroup.OptionGroup`'
def describe_option_group_options(self, engine_name=None, major_engine_version=None, max_records=100, marker=None): DCNL 'Describes the available option group options. DCNL :type engine_name: str DCNL :param engine_name: Filters the list of option groups to only include DCNL groups associated with a specific database engine. DCNL :type major_engine_version: datetime DCNL :param major_engine_version: Filters the list of option groups to only DCNL include groups associated with a specific DCNL database engine version. If specified, then DCNL engine_name must also be specified. DCNL :type max_records: int DCNL :param max_records: The maximum number of records to be returned. DCNL If more results are available, a MoreToken will DCNL be returned in the response that can be used to DCNL retrieve additional records.  Default is 100. DCNL :type marker: str DCNL :param marker: The marker provided by a previous request. DCNL :rtype: list DCNL :return: A list of class:`boto.rds.optiongroup.Option`'
def authorize(self, cidr_ip=None, ec2_group=None): DCNL 'Add a new rule to this DBSecurity group. DCNL You need to pass in either a CIDR block to authorize or DCNL and EC2 SecurityGroup. DCNL :type cidr_ip: string DCNL :param cidr_ip: A valid CIDR IP range to authorize DCNL :type ec2_group: :class:`boto.ec2.securitygroup.SecurityGroup` DCNL :param ec2_group: An EC2 security group to authorize DCNL :rtype: bool DCNL :return: True if successful.'
def revoke(self, cidr_ip=None, ec2_group=None): DCNL 'Revoke access to a CIDR range or EC2 SecurityGroup. DCNL You need to pass in either a CIDR block or DCNL an EC2 SecurityGroup from which to revoke access. DCNL :type cidr_ip: string DCNL :param cidr_ip: A valid CIDR IP range to revoke DCNL :type ec2_group: :class:`boto.ec2.securitygroup.SecurityGroup` DCNL :param ec2_group: An EC2 security group to revoke DCNL :rtype: bool DCNL :return: True if successful.'
def update(self, validate=False): DCNL 'Update the DB snapshot\'s status information by making a call to fetch DCNL the current snapshot attributes from the service. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL instance the update method returns quietly.  If DCNL the validate param is True, however, it will DCNL raise a ValueError exception if no data is DCNL returned from EC2.'
@property DCNL def security_group(self): DCNL 'Provide backward compatibility for previous security_group DCNL attribute.'
@property DCNL def parameter_group(self): DCNL 'Provide backward compatibility for previous parameter_group DCNL attribute.'
def snapshot(self, snapshot_id): DCNL 'Create a new DB snapshot of this DBInstance. DCNL :type identifier: string DCNL :param identifier: The identifier for the DBSnapshot DCNL :rtype: :class:`boto.rds.dbsnapshot.DBSnapshot` DCNL :return: The newly created DBSnapshot'
def reboot(self): DCNL 'Reboot this DBInstance DCNL :rtype: :class:`boto.rds.dbsnapshot.DBSnapshot` DCNL :return: The newly created DBSnapshot'
def update(self, validate=False): DCNL 'Update the DB instance\'s status information by making a call to fetch DCNL the current instance attributes from the service. DCNL :type validate: bool DCNL :param validate: By default, if EC2 returns no data about the DCNL instance the update method returns quietly.  If the DCNL validate param is True, however, it will raise a DCNL ValueError exception if no data is returned from EC2.'
def stop(self, skip_final_snapshot=False, final_snapshot_id=''): DCNL 'Delete this DBInstance. DCNL :type skip_final_snapshot: bool DCNL :param skip_final_snapshot: This parameter determines whether DCNL a final db snapshot is created before the instance is DCNL deleted.  If True, no snapshot is created.  If False, a DCNL snapshot is created before deleting the instance. DCNL :type final_snapshot_id: str DCNL :param final_snapshot_id: If a final snapshot is requested, this DCNL is the identifier used for that snapshot. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The deleted db instance.'
def modify(self, param_group=None, security_groups=None, preferred_maintenance_window=None, master_password=None, allocated_storage=None, instance_class=None, backup_retention_period=None, preferred_backup_window=None, multi_az=False, iops=None, vpc_security_groups=None, apply_immediately=False, new_instance_id=None): DCNL 'Modify this DBInstance. DCNL :type param_group: str DCNL :param param_group: Name of DBParameterGroup to associate with DCNL this DBInstance. DCNL :type security_groups: list of str or list of DBSecurityGroup objects DCNL :param security_groups: List of names of DBSecurityGroup to DCNL authorize on this DBInstance. DCNL :type preferred_maintenance_window: str DCNL :param preferred_maintenance_window: The weekly time range (in DCNL UTC) during which maintenance can occur.  Default is DCNL Sun:05:00-Sun:09:00 DCNL :type master_password: str DCNL :param master_password: Password of master user for the DBInstance. DCNL Must be 4-15 alphanumeric characters. DCNL :type allocated_storage: int DCNL :param allocated_storage: The new allocated storage size, in GBs. DCNL Valid values are [5-1024] DCNL :type instance_class: str DCNL :param instance_class: The compute and memory capacity of the DCNL DBInstance.  Changes will be applied at next maintenance DCNL window unless apply_immediately is True. DCNL Valid values are: DCNL * db.m1.small DCNL * db.m1.large DCNL * db.m1.xlarge DCNL * db.m2.xlarge DCNL * db.m2.2xlarge DCNL * db.m2.4xlarge DCNL :type apply_immediately: bool DCNL :param apply_immediately: If true, the modifications will be DCNL applied as soon as possible rather than waiting for the DCNL next preferred maintenance window. DCNL :type new_instance_id: str DCNL :param new_instance_id: The new DB instance identifier. DCNL :type backup_retention_period: int DCNL :param backup_retention_period: The number of days for which DCNL automated backups are retained.  Setting this to zero DCNL disables automated backups. DCNL :type preferred_backup_window: str DCNL :param preferred_backup_window: The daily time range during DCNL which automated backups are created (if enabled).  Must be DCNL in h24:mi-hh24:mi format (UTC). DCNL :type multi_az: bool DCNL :param multi_az: If True, specifies the DB Instance will be DCNL deployed in multiple availability zones. DCNL :type iops: int DCNL :param iops: The amount of IOPS (input/output operations per DCNL second) to Provisioned for the DB Instance. Can be DCNL modified at a later date. DCNL Must scale linearly. For every 1000 IOPS provision, you DCNL must allocated 100 GB of storage space. This scales up to DCNL 1 TB / 10 000 IOPS for MySQL and Oracle. MSSQL is limited DCNL to 700 GB / 7 000 IOPS. DCNL If you specify a value, it must be at least 1000 IOPS and DCNL you must allocate 100 GB of storage. DCNL :type vpc_security_groups: list DCNL :param vpc_security_groups: List of VPCSecurityGroupMembership DCNL that this DBInstance is a memberof. DCNL :rtype: :class:`boto.rds.dbinstance.DBInstance` DCNL :return: The modified db instance.'
def headers_to_sign(self, http_request): DCNL 'Select the headers from the request that need to be included DCNL in the StringToSign.'
def canonical_headers(self, headers_to_sign): DCNL 'Return the headers that need to be included in the StringToSign DCNL in their canonical form by converting all header keys to lower DCNL case, sorting them in alphabetical order and then joining DCNL them into a string, separated by newlines.'
def string_to_sign(self, http_request): DCNL 'Return the canonical StringToSign as well as a dict DCNL containing the original version of all headers that DCNL were included in the StringToSign.'
def add_auth(self, req, **kwargs): DCNL 'Add AWS3 authentication to a request. DCNL :type req: :class`boto.connection.HTTPRequest` DCNL :param req: The HTTPRequest object.'
def headers_to_sign(self, http_request): DCNL 'Select the headers from the request that need to be included DCNL in the StringToSign.'
def canonical_headers(self, headers_to_sign): DCNL 'Return the headers that need to be included in the StringToSign DCNL in their canonical form by converting all header keys to lower DCNL case, sorting them in alphabetical order and then joining DCNL them into a string, separated by newlines.'
def string_to_sign(self, http_request, canonical_request): DCNL 'Return the canonical StringToSign as well as a dict DCNL containing the original version of all headers that DCNL were included in the StringToSign.'
def add_auth(self, req, **kwargs): DCNL 'Add AWS4 authentication to a request. DCNL :type req: :class`boto.connection.HTTPRequest` DCNL :param req: The HTTPRequest object.'
def headers_to_sign(self, http_request): DCNL 'Select the headers from the request that need to be included DCNL in the StringToSign.'
def mangle_path_and_params(self, req): DCNL 'Returns a copy of the request object with fixed ``auth_path/params`` DCNL attributes from the original.'
def presign(self, req, expires, iso_date=None): DCNL 'Presign a request using SigV4 query params. Takes in an HTTP request DCNL and an expiration time in seconds and returns a URL. DCNL http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html'
def __init__(self, endpoint_data, service_rename_map=None): DCNL ':type endpoint_data: dict DCNL :param endpoint_data: Regions and endpoints data in the same format DCNL as is used by botocore / boto3. DCNL :type service_rename_map: dict DCNL :param service_rename_map: A mapping of boto2 service name to DCNL endpoint prefix.'
def get_all_available_regions(self, service_name): DCNL 'Retrieve every region across partitions for a service.'
def get_available_services(self): DCNL 'Get a list of all the available services in the endpoints file(s)'
def _is_global_service(self, service_name, partition_name='aws'): DCNL 'Determines whether a service uses a global endpoint. DCNL In theory a service can be \'global\' in one partition but regional in DCNL another. In practice, each service is all global or all regional.'
def _get_partition_data(self, partition_name): DCNL 'Get partition information for a particular partition. DCNL This should NOT be used to get service endpoint data because it only DCNL loads from the new endpoint format. It should only be used for DCNL partition metadata and partition specific service metadata. DCNL :type partition_name: str DCNL :param partition_name: The name of the partition to search for. DCNL :returns: Partition info from the new endpoints format. DCNL :rtype: dict or None'
def _endpoint_prefix(self, service_name): DCNL 'Given a boto2 service name, get the endpoint prefix.'
def _service_name(self, endpoint_prefix): DCNL 'Given an endpoint prefix, get the boto2 service name.'
def __init__(self, endpoint_data, service_rename_map=None): DCNL ':type endpoint_data: dict DCNL :param endpoint_data: Regions and endpoints data in the same format DCNL as is used by botocore / boto3. DCNL :type service_rename_map: dict DCNL :param service_rename_map: A mapping of boto2 service name to DCNL endpoint prefix.'
def resolve_hostname(self, service_name, region_name): DCNL 'Resolve the hostname for a service in a particular region. DCNL :type service_name: str DCNL :param service_name: The service to look up. DCNL :type region_name: str DCNL :param region_name: The region to find the endpoint for. DCNL :return: The hostname for the given service in the given region.'
def get_all_available_regions(self, service_name): DCNL 'Get all the regions a service is available in. DCNL :type service_name: str DCNL :param service_name: The service to look up. DCNL :rtype: list of str DCNL :return: A list of all the regions the given service is available in.'
def get_available_services(self): DCNL 'Get all the services supported by the endpoint data. DCNL :rtype: list of str DCNL :return: A list of all the services explicitly contained within the DCNL endpoint data provided during instantiation.'
def __init__(self, resolver): DCNL ':type resolver: BotoEndpointResolver DCNL :param resolver: An endpoint resolver.'
def build_static_endpoints(self, service_names=None): DCNL 'Build a set of static endpoints in the legacy boto2 format. DCNL :param service_names: The names of the services to build. They must DCNL use the names that boto2 uses, not boto3, e.g "ec2containerservice" DCNL and not "ecs". If no service names are provided, all available DCNL services will be built. DCNL :return: A dict consisting of:: DCNL {"service": {"region": "full.host.name"}}'
def connect(self, **kw_params): DCNL 'Connect to this Region\'s endpoint. Returns an connection DCNL object pointing to the endpoint associated with this region. DCNL You may pass any of the arguments accepted by the connection DCNL class\'s constructor as keyword arguments and they will be DCNL passed along to the connection object. DCNL :rtype: Connection object DCNL :return: The connection to this regions endpoint'
def __init__(self, ip_addr, port, hc_type, resource_path, fqdn=None, string_match=None, request_interval=30, failure_threshold=3): DCNL 'HealthCheck object DCNL :type ip_addr: str DCNL :param ip_addr: Optional IP Address DCNL :type port: int DCNL :param port: Port to check DCNL :type hc_type: str DCNL :param hc_type: One of HTTP | HTTPS | HTTP_STR_MATCH | HTTPS_STR_MATCH | TCP DCNL :type resource_path: str DCNL :param resource_path: Path to check DCNL :type fqdn: str DCNL :param fqdn: domain name of the endpoint to check DCNL :type string_match: str DCNL :param string_match: if hc_type is HTTP_STR_MATCH or HTTPS_STR_MATCH, the string to search for in the response body from the specified resource DCNL :type request_interval: int DCNL :param request_interval: The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request. DCNL :type failure_threshold: int DCNL :param failure_threshold: The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa.'
def get_all_hosted_zones(self, start_marker=None, zone_list=None): DCNL 'Returns a Python data structure with information about all DCNL Hosted Zones defined for the AWS account. DCNL :param int start_marker: start marker to pass when fetching additional DCNL results after a truncated list DCNL :param list zone_list: a HostedZones list to prepend to results'
def get_hosted_zone(self, hosted_zone_id): DCNL 'Get detailed information about a particular Hosted Zone. DCNL :type hosted_zone_id: str DCNL :param hosted_zone_id: The unique identifier for the Hosted Zone'
def get_hosted_zone_by_name(self, hosted_zone_name): DCNL 'Get detailed information about a particular Hosted Zone. DCNL :type hosted_zone_name: str DCNL :param hosted_zone_name: The fully qualified domain name for the Hosted DCNL Zone'
def create_hosted_zone(self, domain_name, caller_ref=None, comment='', private_zone=False, vpc_id=None, vpc_region=None): DCNL 'Create a new Hosted Zone.  Returns a Python data structure with DCNL information about the newly created Hosted Zone. DCNL :type domain_name: str DCNL :param domain_name: The name of the domain. This should be a DCNL fully-specified domain, and should end with a final period DCNL as the last label indication.  If you omit the final period, DCNL Amazon Route 53 assumes the domain is relative to the root. DCNL This is the name you have registered with your DNS registrar. DCNL It is also the name you will delegate from your registrar to DCNL the Amazon Route 53 delegation servers returned in DCNL response to this request.A list of strings with the image DCNL IDs wanted. DCNL :type caller_ref: str DCNL :param caller_ref: A unique string that identifies the request DCNL and that allows failed CreateHostedZone requests to be retried DCNL without the risk of executing the operation twice.  If you don\'t DCNL provide a value for this, boto will generate a Type 4 UUID and DCNL use that. DCNL :type comment: str DCNL :param comment: Any comments you want to include about the hosted DCNL zone. DCNL :type private_zone: bool DCNL :param private_zone: Set True if creating a private hosted zone. DCNL :type vpc_id: str DCNL :param vpc_id: When creating a private hosted zone, the VPC Id to DCNL associate to is required. DCNL :type vpc_region: str DCNL :param vpc_region: When creating a private hosted zone, the region DCNL of the associated VPC is required.'
def delete_hosted_zone(self, hosted_zone_id): DCNL 'Delete the hosted zone specified by the given id. DCNL :type hosted_zone_id: str DCNL :param hosted_zone_id: The hosted zone\'s id'
def create_health_check(self, health_check, caller_ref=None): DCNL 'Create a new Health Check DCNL :type health_check: HealthCheck DCNL :param health_check: HealthCheck object DCNL :type caller_ref: str DCNL :param caller_ref: A unique string that identifies the request DCNL and that allows failed CreateHealthCheckRequest requests to be retried DCNL without the risk of executing the operation twice.  If you don\'t DCNL provide a value for this, boto will generate a Type 4 UUID and DCNL use that.'
def get_list_health_checks(self, maxitems=None, marker=None): DCNL 'Return a list of health checks DCNL :type maxitems: int DCNL :param maxitems: Maximum number of items to return DCNL :type marker: str DCNL :param marker: marker to get next set of items to list'
def get_checker_ip_ranges(self): DCNL 'Return a list of Route53 healthcheck IP ranges'
def delete_health_check(self, health_check_id): DCNL 'Delete a health check DCNL :type health_check_id: str DCNL :param health_check_id: ID of the health check to delete'
def get_all_rrsets(self, hosted_zone_id, type=None, name=None, identifier=None, maxitems=None): DCNL 'Retrieve the Resource Record Sets defined for this Hosted Zone. DCNL Returns the raw XML data returned by the Route53 call. DCNL :type hosted_zone_id: str DCNL :param hosted_zone_id: The unique identifier for the Hosted Zone DCNL :type type: str DCNL :param type: The type of resource record set to begin the record DCNL listing from.  Valid choices are: DCNL * A DCNL * AAAA DCNL * CNAME DCNL * MX DCNL * NS DCNL * PTR DCNL * SOA DCNL * SPF DCNL * SRV DCNL * TXT DCNL Valid values for weighted resource record sets: DCNL * A DCNL * AAAA DCNL * CNAME DCNL * TXT DCNL Valid values for Zone Apex Aliases: DCNL * A DCNL * AAAA DCNL :type name: str DCNL :param name: The first name in the lexicographic ordering of domain DCNL names to be retrieved DCNL :type identifier: str DCNL :param identifier: In a hosted zone that includes weighted resource DCNL record sets (multiple resource record sets with the same DNS DCNL name and type that are differentiated only by SetIdentifier), DCNL if results were truncated for a given DNS name and type, DCNL the value of SetIdentifier for the next resource record DCNL set that has the current DNS name and type DCNL :type maxitems: int DCNL :param maxitems: The maximum number of records'
def change_rrsets(self, hosted_zone_id, xml_body): DCNL 'Create or change the authoritative DNS information for this DCNL Hosted Zone. DCNL Returns a Python data structure with information about the set of DCNL changes, including the Change ID. DCNL :type hosted_zone_id: str DCNL :param hosted_zone_id: The unique identifier for the Hosted Zone DCNL :type xml_body: str DCNL :param xml_body: The list of changes to be made, defined in the DCNL XML schema defined by the Route53 service.'
def get_change(self, change_id): DCNL 'Get information about a proposed set of changes, as submitted DCNL by the change_rrsets method. DCNL Returns a Python data structure with status information about the DCNL changes. DCNL :type change_id: str DCNL :param change_id: The unique identifier for the set of changes. DCNL This ID is returned in the response to the change_rrsets method.'
def create_zone(self, name, private_zone=False, vpc_id=None, vpc_region=None): DCNL 'Create a new Hosted Zone.  Returns a Zone object for the newly DCNL created Hosted Zone. DCNL :type name: str DCNL :param name: The name of the domain. This should be a DCNL fully-specified domain, and should end with a final period DCNL as the last label indication.  If you omit the final period, DCNL Amazon Route 53 assumes the domain is relative to the root. DCNL This is the name you have registered with your DNS registrar. DCNL It is also the name you will delegate from your registrar to DCNL the Amazon Route 53 delegation servers returned in DCNL response to this request. DCNL :type private_zone: bool DCNL :param private_zone: Set True if creating a private hosted zone. DCNL :type vpc_id: str DCNL :param vpc_id: When creating a private hosted zone, the VPC Id to DCNL associate to is required. DCNL :type vpc_region: str DCNL :param vpc_region: When creating a private hosted zone, the region DCNL of the associated VPC is required.'
def get_zone(self, name): DCNL 'Returns a Zone object for the specified Hosted Zone. DCNL :param name: The name of the domain. This should be a DCNL fully-specified domain, and should end with a final period DCNL as the last label indication.'
def get_zones(self): DCNL 'Returns a list of Zone objects, one for each of the Hosted DCNL Zones defined for the AWS account. DCNL :rtype: list DCNL :returns: A list of Zone objects.'
def _make_qualified(self, value): DCNL 'Ensure passed domain names end in a period (.) character. DCNL This will usually make a domain fully qualified.'
def update(self): DCNL 'Update the status of this request.'
def _commit(self, changes): DCNL 'Commit a set of changes and return the ChangeInfo portion of DCNL the response. DCNL :type changes: ResourceRecordSets DCNL :param changes: changes to be committed'
def _new_record(self, changes, resource_type, name, value, ttl, identifier, comment=''): DCNL 'Add a CREATE change record to an existing ResourceRecordSets DCNL :type changes: ResourceRecordSets DCNL :param changes: change set to append to DCNL :type name: str DCNL :param name: The name of the resource record you want to DCNL perform the action on. DCNL :type resource_type: str DCNL :param resource_type: The DNS record type DCNL :param value: Appropriate value for resource_type DCNL :type ttl: int DCNL :param ttl: The resource record cache time to live (TTL), in seconds. DCNL :type identifier: tuple DCNL :param identifier: A tuple for setting WRR or LBR attributes.  Valid DCNL forms are: DCNL * (str, int): WRR record [e.g. (\'foo\',10)] DCNL * (str, str): LBR record [e.g. (\'foo\',\'us-east-1\') DCNL :type comment: str DCNL :param comment: A comment that will be stored with the change.'
def add_record(self, resource_type, name, value, ttl=60, identifier=None, comment=''): DCNL 'Add a new record to this Zone.  See _new_record for parameter DCNL documentation.  Returns a Status object.'
def update_record(self, old_record, new_value, new_ttl=None, new_identifier=None, comment=''): DCNL 'Update an existing record in this Zone.  Returns a Status object. DCNL :type old_record: ResourceRecord DCNL :param old_record: A ResourceRecord (e.g. returned by find_records) DCNL See _new_record for additional parameter documentation.'
def delete_record(self, record, comment=''): DCNL 'Delete one or more records from this Zone.  Returns a Status object. DCNL :param record: A ResourceRecord (e.g. returned by DCNL find_records) or list, tuple, or set of ResourceRecords. DCNL :type comment: str DCNL :param comment: A comment that will be stored with the change.'
def add_cname(self, name, value, ttl=None, identifier=None, comment=''): DCNL 'Add a new CNAME record to this Zone.  See _new_record for DCNL parameter documentation.  Returns a Status object.'
def add_a(self, name, value, ttl=None, identifier=None, comment=''): DCNL 'Add a new A record to this Zone.  See _new_record for DCNL parameter documentation.  Returns a Status object.'
def add_mx(self, name, records, ttl=None, identifier=None, comment=''): DCNL 'Add a new MX record to this Zone.  See _new_record for DCNL parameter documentation.  Returns a Status object.'
def find_records(self, name, type, desired=1, all=False, identifier=None): DCNL 'Search this Zone for records that match given parameters. DCNL Returns None if no results, a ResourceRecord if one result, or DCNL a ResourceRecordSets if more than one result. DCNL :type name: str DCNL :param name: The name of the records should match this parameter DCNL :type type: str DCNL :param type: The type of the records should match this parameter DCNL :type desired: int DCNL :param desired: The number of desired results.  If the number of DCNL matching records in the Zone exceeds the value of this parameter, DCNL throw TooManyRecordsException DCNL :type all: Boolean DCNL :param all: If true return all records that match name, type, and DCNL identifier parameters DCNL :type identifier: Tuple DCNL :param identifier: A tuple specifying WRR or LBR attributes.  Valid DCNL forms are: DCNL * (str, int): WRR record [e.g. (\'foo\',10)] DCNL * (str, str): LBR record [e.g. (\'foo\',\'us-east-1\')'
def get_cname(self, name, all=False): DCNL 'Search this Zone for CNAME records that match name. DCNL Returns a ResourceRecord. DCNL If there is more than one match return all as a DCNL ResourceRecordSets if all is True, otherwise throws DCNL TooManyRecordsException.'
def get_a(self, name, all=False): DCNL 'Search this Zone for A records that match name. DCNL Returns a ResourceRecord. DCNL If there is more than one match return all as a DCNL ResourceRecordSets if all is True, otherwise throws DCNL TooManyRecordsException.'
def get_mx(self, name, all=False): DCNL 'Search this Zone for MX records that match name. DCNL Returns a ResourceRecord. DCNL If there is more than one match return all as a DCNL ResourceRecordSets if all is True, otherwise throws DCNL TooManyRecordsException.'
def update_cname(self, name, value, ttl=None, identifier=None, comment=''): DCNL 'Update the given CNAME record in this Zone to a new value, ttl, DCNL and identifier.  Returns a Status object. DCNL Will throw TooManyRecordsException is name, value does not match DCNL a single record.'
def update_a(self, name, value, ttl=None, identifier=None, comment=''): DCNL 'Update the given A record in this Zone to a new value, ttl, DCNL and identifier.  Returns a Status object. DCNL Will throw TooManyRecordsException is name, value does not match DCNL a single record.'
def update_mx(self, name, value, ttl=None, identifier=None, comment=''): DCNL 'Update the given MX record in this Zone to a new value, ttl, DCNL and identifier.  Returns a Status object. DCNL Will throw TooManyRecordsException is name, value does not match DCNL a single record.'
def delete_cname(self, name, identifier=None, all=False): DCNL 'Delete a CNAME record matching name and identifier from DCNL this Zone.  Returns a Status object. DCNL If there is more than one match delete all matching records if DCNL all is True, otherwise throws TooManyRecordsException.'
def delete_a(self, name, identifier=None, all=False): DCNL 'Delete an A record matching name and identifier from this DCNL Zone.  Returns a Status object. DCNL If there is more than one match delete all matching records if DCNL all is True, otherwise throws TooManyRecordsException.'
def delete_mx(self, name, identifier=None, all=False): DCNL 'Delete an MX record matching name and identifier from this DCNL Zone.  Returns a Status object. DCNL If there is more than one match delete all matching records if DCNL all is True, otherwise throws TooManyRecordsException.'
def get_records(self): DCNL 'Return a ResourceRecordsSets for all of the records in this zone.'
def delete(self): DCNL 'Request that this zone be deleted by Amazon.'
def get_nameservers(self): DCNL 'Get the list of nameservers for this zone.'
def check_domain_availability(self, domain_name, idn_lang_code=None): DCNL 'This operation checks the availability of one domain name. You DCNL can access this API without authenticating. Note that if the DCNL availability status of a domain is pending, you must submit DCNL another request to determine the availability of the domain DCNL name. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type idn_lang_code: string DCNL :param idn_lang_code: Reserved for future use.'
def disable_domain_transfer_lock(self, domain_name): DCNL 'This operation removes the transfer lock on the domain DCNL (specifically the `clientTransferProhibited` status) to allow DCNL domain transfers. We recommend you refrain from performing DCNL this action unless you intend to transfer the domain to a DCNL different registrar. Successful submission returns an DCNL operation ID that you can use to track the progress and DCNL completion of the action. If the request is not completed DCNL successfully, the domain registrant will be notified by email. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes'
def enable_domain_transfer_lock(self, domain_name): DCNL 'This operation sets the transfer lock on the domain DCNL (specifically the `clientTransferProhibited` status) to DCNL prevent domain transfers. Successful submission returns an DCNL operation ID that you can use to track the progress and DCNL completion of the action. If the request is not completed DCNL successfully, the domain registrant will be notified by email. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes'
def get_domain_detail(self, domain_name): DCNL 'This operation returns detailed information about the domain. DCNL The domain\'s contact information is also returned as part of DCNL the output. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes'
def get_operation_detail(self, operation_id): DCNL 'This operation returns the current status of an operation that DCNL is not completed. DCNL :type operation_id: string DCNL :param operation_id: The identifier for the operation for which you DCNL want to get the status. Amazon Route 53 returned the identifier in DCNL the response to the original request. DCNL Type: String DCNL Default: None DCNL Required: Yes'
def list_domains(self, marker=None, max_items=None): DCNL 'This operation returns all the domain names registered with DCNL Amazon Route 53 for the current AWS account. DCNL :type marker: string DCNL :param marker: For an initial request for a list of domains, omit this DCNL element. If the number of domains that are associated with the DCNL current AWS account is greater than the value that you specified DCNL for `MaxItems`, you can use `Marker` to return additional domains. DCNL Get the value of `NextPageMarker` from the previous response, and DCNL submit another request that includes the value of `NextPageMarker` DCNL in the `Marker` element. DCNL Type: String DCNL Default: None DCNL Constraints: The marker must match the value specified in the previous DCNL request. DCNL Required: No DCNL :type max_items: integer DCNL :param max_items: Number of domains to be returned. DCNL Type: Integer DCNL Default: 20 DCNL Constraints: A numeral between 1 and 100. DCNL Required: No'
def list_operations(self, marker=None, max_items=None): DCNL 'This operation returns the operation IDs of operations that DCNL are not yet complete. DCNL :type marker: string DCNL :param marker: For an initial request for a list of operations, omit DCNL this element. If the number of operations that are not yet complete DCNL is greater than the value that you specified for `MaxItems`, you DCNL can use `Marker` to return additional operations. Get the value of DCNL `NextPageMarker` from the previous response, and submit another DCNL request that includes the value of `NextPageMarker` in the `Marker` DCNL element. DCNL Type: String DCNL Default: None DCNL Required: No DCNL :type max_items: integer DCNL :param max_items: Number of domains to be returned. DCNL Type: Integer DCNL Default: 20 DCNL Constraints: A value between 1 and 100. DCNL Required: No'
def register_domain(self, domain_name, duration_in_years, admin_contact, registrant_contact, tech_contact, idn_lang_code=None, auto_renew=None, privacy_protect_admin_contact=None, privacy_protect_registrant_contact=None, privacy_protect_tech_contact=None): DCNL 'This operation registers a domain. Domains are registered by DCNL the AWS registrar partner, Gandi. For some top-level domains DCNL (TLDs), this operation requires extra parameters. DCNL When you register a domain, Amazon Route 53 does the DCNL following: DCNL + Creates a Amazon Route 53 hosted zone that has the same name DCNL as the domain. Amazon Route 53 assigns four name servers to DCNL your hosted zone and automatically updates your domain DCNL registration with the names of these name servers. DCNL + Enables autorenew, so your domain registration will renew DCNL automatically each year. We\'ll notify you in advance of the DCNL renewal date so you can choose whether to renew the DCNL registration. DCNL + Optionally enables privacy protection, so WHOIS queries DCNL return contact information for our registrar partner, Gandi, DCNL instead of the information you entered for registrant, admin, DCNL and tech contacts. DCNL + If registration is successful, returns an operation ID that DCNL you can use to track the progress and completion of the DCNL action. If the request is not completed successfully, the DCNL domain registrant is notified by email. DCNL + Charges your AWS account an amount based on the top-level DCNL domain. For more information, see `Amazon Route 53 Pricing`_. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type idn_lang_code: string DCNL :param idn_lang_code: Reserved for future use. DCNL :type duration_in_years: integer DCNL :param duration_in_years: The number of years the domain will be DCNL registered. Domains are registered for a minimum of one year. The DCNL maximum period depends on the top-level domain. DCNL Type: Integer DCNL Default: 1 DCNL Valid values: Integer from 1 to 10 DCNL Required: Yes DCNL :type auto_renew: boolean DCNL :param auto_renew: Indicates whether the domain will be automatically DCNL renewed ( `True`) or not ( `False`). Autorenewal only takes effect DCNL after the account is charged. DCNL Type: Boolean DCNL Valid values: `True` | `False` DCNL Default: `True` DCNL Required: No DCNL :type admin_contact: dict DCNL :param admin_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type registrant_contact: dict DCNL :param registrant_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type tech_contact: dict DCNL :param tech_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type privacy_protect_admin_contact: boolean DCNL :param privacy_protect_admin_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type privacy_protect_registrant_contact: boolean DCNL :param privacy_protect_registrant_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type privacy_protect_tech_contact: boolean DCNL :param privacy_protect_tech_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No'
def retrieve_domain_auth_code(self, domain_name): DCNL 'This operation returns the AuthCode for the domain. To DCNL transfer a domain to another registrar, you provide this value DCNL to the new registrar. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes'
def transfer_domain(self, domain_name, duration_in_years, nameservers, admin_contact, registrant_contact, tech_contact, idn_lang_code=None, auth_code=None, auto_renew=None, privacy_protect_admin_contact=None, privacy_protect_registrant_contact=None, privacy_protect_tech_contact=None): DCNL 'This operation transfers a domain from another registrar to DCNL Amazon Route 53. Domains are registered by the AWS registrar, DCNL Gandi upon transfer. DCNL To transfer a domain, you need to meet all the domain transfer DCNL criteria, including the following: DCNL + You must supply nameservers to transfer a domain. DCNL + You must disable the domain transfer lock (if any) before DCNL transferring the domain. DCNL + A minimum of 60 days must have elapsed since the domain\'s DCNL registration or last transfer. DCNL We recommend you use the Amazon Route 53 as the DNS service DCNL for your domain. You can create a hosted zone in Amazon Route DCNL 53 for your current domain before transferring your domain. DCNL Note that upon transfer, the domain duration is extended for a DCNL year if not otherwise specified. Autorenew is enabled by DCNL default. DCNL If the transfer is successful, this method returns an DCNL operation ID that you can use to track the progress and DCNL completion of the action. If the request is not completed DCNL successfully, the domain registrant will be notified by email. DCNL Transferring domains charges your AWS account an amount based DCNL on the top-level domain. For more information, see `Amazon DCNL Route 53 Pricing`_. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type idn_lang_code: string DCNL :param idn_lang_code: Reserved for future use. DCNL :type duration_in_years: integer DCNL :param duration_in_years: The number of years the domain will be DCNL registered. Domains are registered for a minimum of one year. The DCNL maximum period depends on the top-level domain. DCNL Type: Integer DCNL Default: 1 DCNL Valid values: Integer from 1 to 10 DCNL Required: Yes DCNL :type nameservers: list DCNL :param nameservers: Contains details for the host and glue IP DCNL addresses. DCNL Type: Complex DCNL Children: `GlueIps`, `Name` DCNL :type auth_code: string DCNL :param auth_code: The authorization code for the domain. You get this DCNL value from the current registrar. DCNL Type: String DCNL Required: Yes DCNL :type auto_renew: boolean DCNL :param auto_renew: Indicates whether the domain will be automatically DCNL renewed (true) or not (false). Autorenewal only takes effect after DCNL the account is charged. DCNL Type: Boolean DCNL Valid values: `True` | `False` DCNL Default: true DCNL Required: No DCNL :type admin_contact: dict DCNL :param admin_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type registrant_contact: dict DCNL :param registrant_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type tech_contact: dict DCNL :param tech_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type privacy_protect_admin_contact: boolean DCNL :param privacy_protect_admin_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type privacy_protect_registrant_contact: boolean DCNL :param privacy_protect_registrant_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type privacy_protect_tech_contact: boolean DCNL :param privacy_protect_tech_contact: Whether you want to conceal DCNL contact information from WHOIS queries. If you specify true, WHOIS DCNL ("who is") queries will return contact information for our DCNL registrar partner, Gandi, instead of the contact information that DCNL you enter. DCNL Type: Boolean DCNL Default: `True` DCNL Valid values: `True` | `False` DCNL Required: No'
def update_domain_contact(self, domain_name, admin_contact=None, registrant_contact=None, tech_contact=None): DCNL 'This operation updates the contact information for a DCNL particular domain. Information for at least one contact DCNL (registrant, administrator, or technical) must be supplied for DCNL update. DCNL If the update is successful, this method returns an operation DCNL ID that you can use to track the progress and completion of DCNL the action. If the request is not completed successfully, the DCNL domain registrant will be notified by email. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type admin_contact: dict DCNL :param admin_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type registrant_contact: dict DCNL :param registrant_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes DCNL :type tech_contact: dict DCNL :param tech_contact: Provides detailed contact information. DCNL Type: Complex DCNL Children: `FirstName`, `MiddleName`, `LastName`, `ContactType`, DCNL `OrganizationName`, `AddressLine1`, `AddressLine2`, `City`, DCNL `State`, `CountryCode`, `ZipCode`, `PhoneNumber`, `Email`, `Fax`, DCNL `ExtraParams` DCNL Required: Yes'
def update_domain_contact_privacy(self, domain_name, admin_privacy=None, registrant_privacy=None, tech_privacy=None): DCNL 'This operation updates the specified domain contact\'s privacy DCNL setting. When the privacy option is enabled, personal DCNL information such as postal or email address is hidden from the DCNL results of a public WHOIS query. The privacy services are DCNL provided by the AWS registrar, Gandi. For more information, DCNL see the `Gandi privacy features`_. DCNL This operation only affects the privacy of the specified DCNL contact type (registrant, administrator, or tech). Successful DCNL acceptance returns an operation ID that you can use with DCNL GetOperationDetail to track the progress and completion of the DCNL action. If the request is not completed successfully, the DCNL domain registrant will be notified by email. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type admin_privacy: boolean DCNL :param admin_privacy: Whether you want to conceal contact information DCNL from WHOIS queries. If you specify true, WHOIS ("who is") queries DCNL will return contact information for our registrar partner, Gandi, DCNL instead of the contact information that you enter. DCNL Type: Boolean DCNL Default: None DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type registrant_privacy: boolean DCNL :param registrant_privacy: Whether you want to conceal contact DCNL information from WHOIS queries. If you specify true, WHOIS ("who DCNL is") queries will return contact information for our registrar DCNL partner, Gandi, instead of the contact information that you enter. DCNL Type: Boolean DCNL Default: None DCNL Valid values: `True` | `False` DCNL Required: No DCNL :type tech_privacy: boolean DCNL :param tech_privacy: Whether you want to conceal contact information DCNL from WHOIS queries. If you specify true, WHOIS ("who is") queries DCNL will return contact information for our registrar partner, Gandi, DCNL instead of the contact information that you enter. DCNL Type: Boolean DCNL Default: None DCNL Valid values: `True` | `False` DCNL Required: No'
def update_domain_nameservers(self, domain_name, nameservers): DCNL 'This operation replaces the current set of name servers for DCNL the domain with the specified set of name servers. If you use DCNL Amazon Route 53 as your DNS service, specify the four name DCNL servers in the delegation set for the hosted zone for the DCNL domain. DCNL If successful, this operation returns an operation ID that you DCNL can use to track the progress and completion of the action. If DCNL the request is not completed successfully, the domain DCNL registrant will be notified by email. DCNL :type domain_name: string DCNL :param domain_name: The name of a domain. DCNL Type: String DCNL Default: None DCNL Constraints: The domain name can contain only the letters a through z, DCNL the numbers 0 through 9, and hyphen (-). Internationalized Domain DCNL Names are not supported. DCNL Required: Yes DCNL :type nameservers: list DCNL :param nameservers: A list of new name servers for the domain. DCNL Type: Complex DCNL Children: `Name`, `GlueIps` DCNL Required: Yes'
def add_change(self, action, name, type, ttl=600, alias_hosted_zone_id=None, alias_dns_name=None, identifier=None, weight=None, region=None, alias_evaluate_target_health=None, health_check=None, failover=None): DCNL 'Add a change request to the set. DCNL :type action: str DCNL :param action: The action to perform (\'CREATE\'|\'DELETE\'|\'UPSERT\') DCNL :type name: str DCNL :param name: The name of the domain you want to perform the action on. DCNL :type type: str DCNL :param type: The DNS record type.  Valid values are: DCNL * A DCNL * AAAA DCNL * CNAME DCNL * MX DCNL * NS DCNL * PTR DCNL * SOA DCNL * SPF DCNL * SRV DCNL * TXT DCNL :type ttl: int DCNL :param ttl: The resource record cache time to live (TTL), in seconds. DCNL :type alias_hosted_zone_id: str DCNL :param alias_dns_name: *Alias resource record sets only* The value DCNL of the hosted zone ID, CanonicalHostedZoneNameId, for DCNL the LoadBalancer. DCNL :type alias_dns_name: str DCNL :param alias_hosted_zone_id: *Alias resource record sets only* DCNL Information about the domain to which you are redirecting traffic. DCNL :type identifier: str DCNL :param identifier: *Weighted and latency-based resource record sets DCNL only* An identifier that differentiates among multiple resource DCNL record sets that have the same combination of DNS name and type. DCNL :type weight: int DCNL :param weight: *Weighted resource record sets only* Among resource DCNL record sets that have the same combination of DNS name and type, DCNL a value that determines what portion of traffic for the current DCNL resource record set is routed to the associated location DCNL :type region: str DCNL :param region: *Latency-based resource record sets only* Among resource DCNL record sets that have the same combination of DNS name and type, DCNL a value that determines which region this should be associated with DCNL for the latency-based routing DCNL :type alias_evaluate_target_health: bool DCNL :param alias_evaluate_target_health: *Required for alias resource record DCNL sets* Indicates whether this Resource Record Set should respect the DCNL health status of any health checks associated with the ALIAS target DCNL record which it is linked to. DCNL :type health_check: str DCNL :param health_check: Health check to associate with this record DCNL :type failover: str DCNL :param failover: *Failover resource record sets only* Whether this is the DCNL primary or secondary resource record set.'
def add_change_record(self, action, change): DCNL 'Add an existing record to a change set with the specified action'
def to_xml(self): DCNL 'Convert this ResourceRecordSet into XML DCNL to be saved via the ChangeResourceRecordSetsRequest'
def commit(self): DCNL 'Commit this change'
def endElement(self, name, value, connection): DCNL 'Overwritten to also add the NextRecordName, DCNL NextRecordType and NextRecordIdentifier to the base object'
def __iter__(self): DCNL 'Override the next function to support paging'
def add_value(self, value): DCNL 'Add a resource record value'
def set_alias(self, alias_hosted_zone_id, alias_dns_name, alias_evaluate_target_health=False): DCNL 'Make this an alias resource record set'
def to_xml(self): DCNL 'Spit this resource record set out as XML'
def __init__(self): DCNL 'Uncallable constructor on abstract base StorageUri class.'
def __repr__(self): DCNL 'Returns string representation of URI.'
def equals(self, uri): DCNL 'Returns true if two URIs are equal.'
def connect(self, access_key_id=None, secret_access_key=None, **kwargs): DCNL 'Opens a connection to appropriate provider, depending on provider DCNL portion of URI. Requires Credentials defined in boto config file (see DCNL boto/pyami/config.py). DCNL @type storage_uri: StorageUri DCNL @param storage_uri: StorageUri specifying a bucket or a bucket+object DCNL @rtype: L{AWSAuthConnection<boto.gs.connection.AWSAuthConnection>} DCNL @return: A connection to storage service provider of the given URI.'
def __init__(self, scheme, bucket_name=None, object_name=None, debug=0, connection_args=None, suppress_consec_slashes=True, version_id=None, generation=None, is_latest=False): DCNL 'Instantiate a BucketStorageUri from scheme,bucket,object tuple. DCNL @type scheme: string DCNL @param scheme: URI scheme naming the storage provider (gs, s3, etc.) DCNL @type bucket_name: string DCNL @param bucket_name: bucket name DCNL @type object_name: string DCNL @param object_name: object name, excluding generation/version. DCNL @type debug: int DCNL @param debug: debug level to pass in to connection (range 0..2) DCNL @type connection_args: map DCNL @param connection_args: optional map containing args to be DCNL passed to {S3,GS}Connection constructor (e.g., to override DCNL https_connection_factory). DCNL @param suppress_consec_slashes: If provided, controls whether DCNL consecutive slashes will be suppressed in key paths. DCNL @param version_id: Object version id (S3-specific). DCNL @param generation: Object generation number (GCS-specific). DCNL @param is_latest: boolean indicating that a versioned object is the DCNL current version DCNL After instantiation the components are available in the following DCNL fields: scheme, bucket_name, object_name, version_id, generation, DCNL is_latest, versionless_uri, version_specific_uri, uri. DCNL Note: If instantiated without version info, the string representation DCNL for a URI stays versionless; similarly, if instantiated with version DCNL info, the string representation for a URI stays version-specific. If you DCNL call one of the uri.set_contents_from_xyz() methods, a specific object DCNL version will be created, and its version-specific URI string can be DCNL retrieved from version_specific_uri even if the URI was instantiated DCNL without version info.'
def clone_replace_name(self, new_name): DCNL 'Instantiate a BucketStorageUri from the current BucketStorageUri, DCNL but replacing the object_name. DCNL @type new_name: string DCNL @param new_name: new object name'
def clone_replace_key(self, key): DCNL 'Instantiate a BucketStorageUri from the current BucketStorageUri, by DCNL replacing the object name with the object name and other metadata found DCNL in the given Key object (including generation). DCNL @type key: Key DCNL @param key: key for the new StorageUri to represent'
def get_acl(self, validate=False, headers=None, version_id=None): DCNL 'returns a bucket\'s acl'
def get_def_acl(self, validate=False, headers=None): DCNL 'returns a bucket\'s default object acl'
def get_cors(self, validate=False, headers=None): DCNL 'returns a bucket\'s CORS XML'
def set_cors(self, cors, validate=False, headers=None): DCNL 'sets or updates a bucket\'s CORS XML'
def set_storage_class(self, storage_class, validate=False, headers=None): DCNL 'Updates a bucket\'s storage class.'
def is_file_uri(self): DCNL 'Returns True if this URI names a file or directory.'
def is_cloud_uri(self): DCNL 'Returns True if this URI names a bucket or object.'
def names_container(self): DCNL 'Returns True if this URI names a directory or bucket. Will return DCNL False for bucket subdirs; providing bucket subdir semantics needs to DCNL be done by the caller (like gsutil does).'
def names_singleton(self): DCNL 'Returns True if this URI names a file or object.'
def names_directory(self): DCNL 'Returns True if this URI names a directory.'
def names_provider(self): DCNL 'Returns True if this URI names a provider.'
def names_bucket(self): DCNL 'Returns True if this URI names a bucket.'
def names_file(self): DCNL 'Returns True if this URI names a file.'
def names_object(self): DCNL 'Returns True if this URI names an object.'
def is_stream(self): DCNL 'Returns True if this URI represents input/output stream.'
def set_acl(self, acl_or_str, key_name='', validate=False, headers=None, version_id=None, if_generation=None, if_metageneration=None): DCNL 'Sets or updates a bucket\'s ACL.'
def set_xml_acl(self, xmlstring, key_name='', validate=False, headers=None, version_id=None, if_generation=None, if_metageneration=None): DCNL 'Sets or updates a bucket\'s ACL with an XML string.'
def set_def_xml_acl(self, xmlstring, validate=False, headers=None): DCNL 'Sets or updates a bucket\'s default object ACL with an XML string.'
def set_def_acl(self, acl_or_str, validate=False, headers=None, version_id=None): DCNL 'Sets or updates a bucket\'s default object ACL.'
def set_canned_acl(self, acl_str, validate=False, headers=None, version_id=None): DCNL 'Sets or updates a bucket\'s acl to a predefined (canned) value.'
def set_def_canned_acl(self, acl_str, validate=False, headers=None, version_id=None): DCNL 'Sets or updates a bucket\'s default object acl to a predefined DCNL (canned) value.'
def copy_key(self, src_bucket_name, src_key_name, metadata=None, src_version_id=None, storage_class='STANDARD', preserve_acl=False, encrypt_key=False, headers=None, query_args=None, src_generation=None): DCNL 'Returns newly created key.'
def get_lifecycle_config(self, validate=False, headers=None): DCNL 'Returns a bucket\'s lifecycle configuration.'
def configure_lifecycle(self, lifecycle_config, validate=False, headers=None): DCNL 'Sets or updates a bucket\'s lifecycle configuration.'
def exists(self, headers=None): DCNL 'Returns True if the object exists or False if it doesn\'t'
def __init__(self, object_name, debug, is_stream=False): DCNL 'Instantiate a FileStorageUri from a path name. DCNL @type object_name: string DCNL @param object_name: object name DCNL @type debug: boolean DCNL @param debug: whether to enable debugging on this StorageUri DCNL After instantiation the components are available in the following DCNL fields: uri, scheme, bucket_name (always blank for this "anonymous" DCNL bucket), object_name.'
def clone_replace_name(self, new_name): DCNL 'Instantiate a FileStorageUri from the current FileStorageUri, DCNL but replacing the object_name. DCNL @type new_name: string DCNL @param new_name: new object name'
def is_file_uri(self): DCNL 'Returns True if this URI names a file or directory.'
def is_cloud_uri(self): DCNL 'Returns True if this URI names a bucket or object.'
def names_container(self): DCNL 'Returns True if this URI names a directory or bucket.'
def names_singleton(self): DCNL 'Returns True if this URI names a file (or stream) or object.'
def names_directory(self): DCNL 'Returns True if this URI names a directory.'
def names_provider(self): DCNL 'Returns True if this URI names a provider.'
def names_bucket(self): DCNL 'Returns True if this URI names a bucket.'
def names_file(self): DCNL 'Returns True if this URI names a file.'
def names_object(self): DCNL 'Returns True if this URI names an object.'
def is_stream(self): DCNL 'Returns True if this URI represents input/output stream.'
def close(self): DCNL 'Closes the underlying file.'
def exists(self, _headers_not_used=None): DCNL 'Returns True if the file exists or False if it doesn\'t'
def search(self, query, cursor=None, expr=None, facet=None, filter_query=None, highlight=None, partial=None, query_options=None, query_parser=None, ret=None, size=None, sort=None, start=None): DCNL 'Retrieves a list of documents that match the specified search DCNL criteria. How you specify the search criteria depends on which DCNL query parser you use. Amazon CloudSearch supports four query DCNL parsers: DCNL + `simple`: search all `text` and `text-array` fields for the DCNL specified string. Search for phrases, individual terms, and DCNL prefixes. DCNL + `structured`: search specific fields, construct compound DCNL queries using Boolean operators, and use advanced features DCNL such as term boosting and proximity searching. DCNL + `lucene`: specify search criteria using the Apache Lucene DCNL query parser syntax. DCNL + `dismax`: specify search criteria using the simplified DCNL subset of the Apache Lucene query parser syntax defined by the DCNL DisMax query parser. DCNL For more information, see `Searching Your Data`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL The endpoint for submitting `Search` requests is domain- DCNL specific. You submit search requests to a domain\'s search DCNL endpoint. To get the search endpoint for your domain, use the DCNL Amazon CloudSearch configuration service `DescribeDomains` DCNL action. A domain\'s endpoints are also displayed on the domain DCNL dashboard in the Amazon CloudSearch console. DCNL :type cursor: string DCNL :param cursor: Retrieves a cursor value you can use to page through DCNL large result sets. Use the `size` parameter to control the number DCNL of hits to include in each response. You can specify either the DCNL `cursor` or `start` parameter in a request; they are mutually DCNL exclusive. To get the first cursor, set the cursor value to DCNL `initial`. In subsequent requests, specify the cursor value DCNL returned in the hits section of the response. DCNL For more information, see `Paginating Results`_ in the Amazon DCNL CloudSearch Developer Guide . DCNL :type expr: string DCNL :param expr: Defines one or more numeric expressions that can be used DCNL to sort results or specify search or filter criteria. You can also DCNL specify expressions as return fields. DCNL For more information about defining and using expressions, see DCNL `Configuring Expressions`_ in the Amazon CloudSearch Developer DCNL Guide . DCNL :type facet: string DCNL :param facet: Specifies one or more fields for which to get facet DCNL information, and options that control how the facet information is DCNL returned. Each specified field must be facet-enabled in the domain DCNL configuration. The fields and options are specified in JSON using DCNL the form `{"FIELD":{"OPTION":VALUE,"OPTION:"STRING"},"FIELD":{"OPTI DCNL ON":VALUE,"OPTION":"STRING"}}`. DCNL You can specify the following faceting options: DCNL + `buckets` specifies an array of the facet values or ranges to count. DCNL Ranges are specified using the same syntax that you use to search DCNL for a range of values. For more information, see ` Searching for a DCNL Range of Values`_ in the Amazon CloudSearch Developer Guide . DCNL Buckets are returned in the order they are specified in the DCNL request. The `sort` and `size` options are not valid if you specify DCNL `buckets`. DCNL + `size` specifies the maximum number of facets to include in the DCNL results. By default, Amazon CloudSearch returns counts for the top DCNL 10. The `size` parameter is only valid when you specify the `sort` DCNL option; it cannot be used in conjunction with `buckets`. DCNL + `sort` specifies how you want to sort the facets in the results: DCNL `bucket` or `count`. Specify `bucket` to sort alphabetically or DCNL numerically by facet value (in ascending order). Specify `count` to DCNL sort by the facet counts computed for each facet value (in DCNL descending order). To retrieve facet counts for particular values DCNL or ranges of values, use the `buckets` option instead of `sort`. DCNL If no facet options are specified, facet counts are computed for all DCNL field values, the facets are sorted by facet count, and the top 10 DCNL facets are returned in the results. DCNL For more information, see `Getting and Using Facet Information`_ in the DCNL Amazon CloudSearch Developer Guide . DCNL :type filter_query: string DCNL :param filter_query: Specifies a structured query that filters the DCNL results of a search without affecting how the results are scored DCNL and sorted. You use `filterQuery` in conjunction with the `query` DCNL parameter to filter the documents that match the constraints DCNL specified in the `query` parameter. Specifying a filter controls DCNL only which matching documents are included in the results, it has DCNL no effect on how they are scored and sorted. The `filterQuery` DCNL parameter supports the full structured query syntax. DCNL For more information about using filters, see `Filtering Matching DCNL Documents`_ in the Amazon CloudSearch Developer Guide . DCNL :type highlight: string DCNL :param highlight: Retrieves highlights for matches in the specified DCNL `text` or `text-array` fields. Each specified field must be DCNL highlight enabled in the domain configuration. The fields and DCNL options are specified in JSON using the form `{"FIELD":{"OPTION":VA DCNL LUE,"OPTION:"STRING"},"FIELD":{"OPTION":VALUE,"OPTION":"STRING"}}`. DCNL You can specify the following highlight options: DCNL + `format`: specifies the format of the data in the text field: `text` DCNL or `html`. When data is returned as HTML, all non-alphanumeric DCNL characters are encoded. The default is `html`. DCNL + `max_phrases`: specifies the maximum number of occurrences of the DCNL search term(s) you want to highlight. By default, the first DCNL occurrence is highlighted. DCNL + `pre_tag`: specifies the string to prepend to an occurrence of a DCNL search term. The default for HTML highlights is `<em>`. The DCNL default for text highlights is `*`. DCNL + `post_tag`: specifies the string to append to an occurrence of a DCNL search term. The default for HTML highlights is `</em>`. The DCNL default for text highlights is `*`. DCNL If no highlight options are specified for a field, the returned field DCNL text is treated as HTML and the first match is highlighted with DCNL emphasis tags: `<em>search-term</em>`. DCNL :type partial: boolean DCNL :param partial: Enables partial results to be returned if one or more DCNL index partitions are unavailable. When your search index is DCNL partitioned across multiple search instances, by default Amazon DCNL CloudSearch only returns results if every partition can be queried. DCNL This means that the failure of a single search instance can result DCNL in 5xx (internal server) errors. When you enable partial results, DCNL Amazon CloudSearch returns whatever results are available and DCNL includes the percentage of documents searched in the search results DCNL (percent-searched). This enables you to more gracefully degrade DCNL your users\' search experience. For example, rather than displaying DCNL no results, you could display the partial results and a message DCNL indicating that the results might be incomplete due to a temporary DCNL system outage. DCNL :type query: string DCNL :param query: Specifies the search criteria for the request. How you DCNL specify the search criteria depends on the query parser used for DCNL the request and the parser options specified in the `queryOptions` DCNL parameter. By default, the `simple` query parser is used to process DCNL requests. To use the `structured`, `lucene`, or `dismax` query DCNL parser, you must also specify the `queryParser` parameter. DCNL For more information about specifying search criteria, see `Searching DCNL Your Data`_ in the Amazon CloudSearch Developer Guide . DCNL :type query_options: string DCNL :param query_options: DCNL Configures options for the query parser specified in the `queryParser` DCNL parameter. DCNL The options you can configure vary according to which parser you use: DCNL + `defaultOperator`: The default operator used to combine individual DCNL terms in the search string. For example: `defaultOperator: \'or\'`. DCNL For the `dismax` parser, you specify a percentage that represents DCNL the percentage of terms in the search string (rounded down) that DCNL must match, rather than a default operator. A value of `0%` is the DCNL equivalent to OR, and a value of `100%` is equivalent to AND. The DCNL percentage must be specified as a value in the range 0-100 followed DCNL by the percent (%) symbol. For example, `defaultOperator: 50%`. DCNL Valid values: `and`, `or`, a percentage in the range 0%-100% ( DCNL `dismax`). Default: `and` ( `simple`, `structured`, `lucene`) or DCNL `100` ( `dismax`). Valid for: `simple`, `structured`, `lucene`, and DCNL `dismax`. DCNL + `fields`: An array of the fields to search when no fields are DCNL specified in a search. If no fields are specified in a search and DCNL this option is not specified, all text and text-array fields are DCNL searched. You can specify a weight for each field to control the DCNL relative importance of each field when Amazon CloudSearch DCNL calculates relevance scores. To specify a field weight, append a DCNL caret ( `^`) symbol and the weight to the field name. For example, DCNL to boost the importance of the `title` field over the `description` DCNL field you could specify: `"fields":["title^5","description"]`. DCNL Valid values: The name of any configured field and an optional DCNL numeric value greater than zero. Default: All `text` and `text- DCNL array` fields. Valid for: `simple`, `structured`, `lucene`, and DCNL `dismax`. DCNL + `operators`: An array of the operators or special characters you want DCNL to disable for the simple query parser. If you disable the `and`, DCNL `or`, or `not` operators, the corresponding operators ( `+`, `|`, DCNL `-`) have no special meaning and are dropped from the search DCNL string. Similarly, disabling `prefix` disables the wildcard DCNL operator ( `*`) and disabling `phrase` disables the ability to DCNL search for phrases by enclosing phrases in double quotes. Disabling DCNL precedence disables the ability to control order of precedence DCNL using parentheses. Disabling `near` disables the ability to use the DCNL ~ operator to perform a sloppy phrase search. Disabling the `fuzzy` DCNL operator disables the ability to use the ~ operator to perform a DCNL fuzzy search. `escape` disables the ability to use a backslash ( DCNL `\`) to escape special characters within the search string. DCNL Disabling whitespace is an advanced option that prevents the parser DCNL from tokenizing on whitespace, which can be useful for Vietnamese. DCNL (It prevents Vietnamese words from being split incorrectly.) For DCNL example, you could disable all operators other than the phrase DCNL operator to support just simple term and phrase queries: DCNL `"operators":["and","not","or", "prefix"]`. Valid values: `and`, DCNL `escape`, `fuzzy`, `near`, `not`, `or`, `phrase`, `precedence`, DCNL `prefix`, `whitespace`. Default: All operators and special DCNL characters are enabled. Valid for: `simple`. DCNL + `phraseFields`: An array of the `text` or `text-array` fields you DCNL want to use for phrase searches. When the terms in the search DCNL string appear in close proximity within a field, the field scores DCNL higher. You can specify a weight for each field to boost that DCNL score. The `phraseSlop` option controls how much the matches can DCNL deviate from the search string and still be boosted. To specify a DCNL field weight, append a caret ( `^`) symbol and the weight to the DCNL field name. For example, to boost phrase matches in the `title` DCNL field over the `abstract` field, you could specify: DCNL `"phraseFields":["title^3", "plot"]` Valid values: The name of any DCNL `text` or `text-array` field and an optional numeric value greater DCNL than zero. Default: No fields. If you don\'t specify any fields with DCNL `phraseFields`, proximity scoring is disabled even if `phraseSlop` DCNL is specified. Valid for: `dismax`. DCNL + `phraseSlop`: An integer value that specifies how much matches can DCNL deviate from the search phrase and still be boosted according to DCNL the weights specified in the `phraseFields` option; for example, DCNL `phraseSlop: 2`. You must also specify `phraseFields` to enable DCNL proximity scoring. Valid values: positive integers. Default: 0. DCNL Valid for: `dismax`. DCNL + `explicitPhraseSlop`: An integer value that specifies how much a DCNL match can deviate from the search phrase when the phrase is DCNL enclosed in double quotes in the search string. (Phrases that DCNL exceed this proximity distance are not considered a match.) For DCNL example, to specify a slop of three for dismax phrase queries, you DCNL would specify `"explicitPhraseSlop":3`. Valid values: positive DCNL integers. Default: 0. Valid for: `dismax`. DCNL + `tieBreaker`: When a term in the search string is found in a DCNL document\'s field, a score is calculated for that field based on how DCNL common the word is in that field compared to other documents. If DCNL the term occurs in multiple fields within a document, by default DCNL only the highest scoring field contributes to the document\'s DCNL overall score. You can specify a `tieBreaker` value to enable the DCNL matches in lower-scoring fields to contribute to the document\'s DCNL score. That way, if two documents have the same max field score for DCNL a particular term, the score for the document that has matches in DCNL more fields will be higher. The formula for calculating the score DCNL with a tieBreaker is `(max field score) + (tieBreaker) * (sum of DCNL the scores for the rest of the matching fields)`. Set `tieBreaker` DCNL to 0 to disregard all but the highest scoring field (pure max): DCNL `"tieBreaker":0`. Set to 1 to sum the scores from all fields (pure DCNL sum): `"tieBreaker":1`. Valid values: 0.0 to 1.0. Default: 0.0. DCNL Valid for: `dismax`. DCNL :type query_parser: string DCNL :param query_parser: DCNL Specifies which query parser to use to process the request. If DCNL `queryParser` is not specified, Amazon CloudSearch uses the DCNL `simple` query parser. DCNL Amazon CloudSearch supports four query parsers: DCNL + `simple`: perform simple searches of `text` and `text-array` fields. DCNL By default, the `simple` query parser searches all `text` and DCNL `text-array` fields. You can specify which fields to search by with DCNL the `queryOptions` parameter. If you prefix a search term with a DCNL plus sign (+) documents must contain the term to be considered a DCNL match. (This is the default, unless you configure the default DCNL operator with the `queryOptions` parameter.) You can use the `-` DCNL (NOT), `|` (OR), and `*` (wildcard) operators to exclude particular DCNL terms, find results that match any of the specified terms, or DCNL search for a prefix. To search for a phrase rather than individual DCNL terms, enclose the phrase in double quotes. For more information, DCNL see `Searching for Text`_ in the Amazon CloudSearch Developer Guide DCNL + `structured`: perform advanced searches by combining multiple DCNL expressions to define the search criteria. You can also search DCNL within particular fields, search for values and ranges of values, DCNL and use advanced options such as term boosting, `matchall`, and DCNL `near`. For more information, see `Constructing Compound Queries`_ DCNL in the Amazon CloudSearch Developer Guide . DCNL + `lucene`: search using the Apache Lucene query parser syntax. For DCNL more information, see `Apache Lucene Query Parser Syntax`_. DCNL + `dismax`: search using the simplified subset of the Apache Lucene DCNL query parser syntax defined by the DisMax query parser. For more DCNL information, see `DisMax Query Parser Syntax`_. DCNL :type ret: string DCNL :param ret: Specifies the field and expression values to include in DCNL the response. Multiple fields or expressions are specified as a DCNL comma-separated list. By default, a search response includes all DCNL return enabled fields ( `_all_fields`). To return only the document DCNL IDs for the matching documents, specify `_no_fields`. To retrieve DCNL the relevance score calculated for each document, specify `_score`. DCNL :type size: long DCNL :param size: Specifies the maximum number of search hits to include in DCNL the response. DCNL :type sort: string DCNL :param sort: Specifies the fields or custom expressions to use to sort DCNL the search results. Multiple fields or expressions are specified as DCNL a comma-separated list. You must specify the sort direction ( `asc` DCNL or `desc`) for each field; for example, `year desc,title asc`. To DCNL use a field to sort results, the field must be sort-enabled in the DCNL domain configuration. Array type fields cannot be used for sorting. DCNL If no `sort` parameter is specified, results are sorted by their DCNL default relevance scores in descending order: `_score desc`. You DCNL can also sort by document ID ( `_id asc`) and version ( `_version DCNL desc`). DCNL For more information, see `Sorting Results`_ in the Amazon CloudSearch DCNL Developer Guide . DCNL :type start: long DCNL :param start: Specifies the offset of the first search hit you want to DCNL return. Note that the result set is zero-based; the first result is DCNL at index 0. You can specify either the `start` or `cursor` DCNL parameter in a request, they are mutually exclusive. DCNL For more information, see `Paginating Results`_ in the Amazon DCNL CloudSearch Developer Guide .'
def suggest(self, query, suggester, size=None): DCNL 'Retrieves autocomplete suggestions for a partial query string. DCNL You can use suggestions enable you to display likely matches DCNL before users finish typing. In Amazon CloudSearch, suggestions DCNL are based on the contents of a particular text field. When you DCNL request suggestions, Amazon CloudSearch finds all of the DCNL documents whose values in the suggester field start with the DCNL specified query string. The beginning of the field must match DCNL the query string to be considered a match. DCNL For more information about configuring suggesters and DCNL retrieving suggestions, see `Getting Suggestions`_ in the DCNL Amazon CloudSearch Developer Guide . DCNL The endpoint for submitting `Suggest` requests is domain- DCNL specific. You submit suggest requests to a domain\'s search DCNL endpoint. To get the search endpoint for your domain, use the DCNL Amazon CloudSearch configuration service `DescribeDomains` DCNL action. A domain\'s endpoints are also displayed on the domain DCNL dashboard in the Amazon CloudSearch console. DCNL :type query: string DCNL :param query: Specifies the string for which you want to get DCNL suggestions. DCNL :type suggester: string DCNL :param suggester: Specifies the name of the suggester to use to find DCNL suggested matches. DCNL :type size: long DCNL :param size: Specifies the maximum number of suggestions to return.'
def upload_documents(self, documents, content_type): DCNL 'Posts a batch of documents to a search domain for indexing. A DCNL document batch is a collection of add and delete operations DCNL that represent the documents you want to add, update, or DCNL delete from your domain. Batches can be described in either DCNL JSON or XML. Each item that you want Amazon CloudSearch to DCNL return as a search result (such as a product) is represented DCNL as a document. Every document has a unique ID and one or more DCNL fields that contain the data that you want to search and DCNL return in results. Individual documents cannot contain more DCNL than 1 MB of data. The entire batch cannot exceed 5 MB. To get DCNL the best possible upload performance, group add and delete DCNL operations in batches that are close the 5 MB limit. DCNL Submitting a large volume of single-document batches can DCNL overload a domain\'s document service. DCNL The endpoint for submitting `UploadDocuments` requests is DCNL domain-specific. To get the document endpoint for your domain, DCNL use the Amazon CloudSearch configuration service DCNL `DescribeDomains` action. A domain\'s endpoints are also DCNL displayed on the domain dashboard in the Amazon CloudSearch DCNL console. DCNL For more information about formatting your data for Amazon DCNL CloudSearch, see `Preparing Your Data`_ in the Amazon DCNL CloudSearch Developer Guide . For more information about DCNL uploading data for indexing, see `Uploading Data`_ in the DCNL Amazon CloudSearch Developer Guide . DCNL :type documents: blob DCNL :param documents: A batch of documents formatted in JSON or HTML. DCNL :type content_type: string DCNL :param content_type: DCNL The format of the batch you are uploading. Amazon CloudSearch supports DCNL two document batch formats: DCNL + application/json DCNL + application/xml'
def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, region=None, path='/', converter=None, validate_certs=True, anon=False, security_token=None, profile_name=None): DCNL ':type anon: boolean DCNL :param anon: If this parameter is True, the ``STSConnection`` object DCNL will make anonymous requests, and it will not use AWS DCNL Credentials or even search for AWS Credentials to make these DCNL requests.'
def get_session_token(self, duration=None, force_new=False, mfa_serial_number=None, mfa_token=None): DCNL 'Return a valid session token.  Because retrieving new tokens DCNL from the Secure Token Service is a fairly heavyweight operation DCNL this module caches previously retrieved tokens and returns DCNL them when appropriate.  Each token is cached with a key DCNL consisting of the region name of the STS endpoint DCNL concatenated with the requesting user\'s access id.  If there DCNL is a token in the cache meeting with this key, the session DCNL expiration is checked to make sure it is still valid and if DCNL so, the cached token is returned.  Otherwise, a new session DCNL token is requested from STS and it is placed into the cache DCNL and returned. DCNL :type duration: int DCNL :param duration: The number of seconds the credentials should DCNL remain valid. DCNL :type force_new: bool DCNL :param force_new: If this parameter is True, a new session token DCNL will be retrieved from the Secure Token Service regardless DCNL of whether there is a valid cached token or not. DCNL :type mfa_serial_number: str DCNL :param mfa_serial_number: The serial number of an MFA device. DCNL If this is provided and if the mfa_passcode provided is DCNL valid, the temporary session token will be authorized with DCNL to perform operations requiring the MFA device authentication. DCNL :type mfa_token: str DCNL :param mfa_token: The 6 digit token associated with the DCNL MFA device.'
def get_federation_token(self, name, duration=None, policy=None): DCNL 'Returns a set of temporary security credentials (consisting of DCNL an access key ID, a secret access key, and a security token) DCNL for a federated user. A typical use is in a proxy application DCNL that is getting temporary security credentials on behalf of DCNL distributed applications inside a corporate network. Because DCNL you must call the `GetFederationToken` action using the long- DCNL term security credentials of an IAM user, this call is DCNL appropriate in contexts where those credentials can be safely DCNL stored, usually in a server-based application. DCNL **Note:** Do not use this call in mobile applications or DCNL client-based web applications that directly get temporary DCNL security credentials. For those types of applications, use DCNL `AssumeRoleWithWebIdentity`. DCNL The `GetFederationToken` action must be called by using the DCNL long-term AWS security credentials of the AWS account or an DCNL IAM user. Credentials that are created by IAM users are valid DCNL for the specified duration, between 900 seconds (15 minutes) DCNL and 129600 seconds (36 hours); credentials that are created by DCNL using account credentials have a maximum duration of 3600 DCNL seconds (1 hour). DCNL The permissions that are granted to the federated user are the DCNL intersection of the policy that is passed with the DCNL `GetFederationToken` request and policies that are associated DCNL with of the entity making the `GetFederationToken` call. DCNL For more information about how permissions work, see DCNL `Controlling Permissions in Temporary Credentials`_ in Using DCNL Temporary Security Credentials . For information about using DCNL `GetFederationToken` to create temporary security credentials, DCNL see `Creating Temporary Credentials to Enable Access for DCNL Federated Users`_ in Using Temporary Security Credentials . DCNL :type name: string DCNL :param name: The name of the federated user. The name is used as an DCNL identifier for the temporary security credentials (such as `Bob`). DCNL For example, you can reference the federated user name in a DCNL resource-based policy, such as in an Amazon S3 bucket policy. DCNL :type policy: string DCNL :param policy: A policy that specifies the permissions that are granted DCNL to the federated user. By default, federated users have no DCNL permissions; they do not inherit any from the IAM user. When you DCNL specify a policy, the federated user\'s permissions are intersection DCNL of the specified policy and the IAM user\'s policy. If you don\'t DCNL specify a policy, federated users can only access AWS resources DCNL that explicitly allow those federated users in a resource policy, DCNL such as in an Amazon S3 bucket policy. DCNL :type duration: integer DCNL :param duration: The duration, in seconds, that the session DCNL should last. Acceptable durations for federation sessions range DCNL from 900 seconds (15 minutes) to 129600 seconds (36 hours), with DCNL 43200 seconds (12 hours) as the default. Sessions for AWS account DCNL owners are restricted to a maximum of 3600 seconds (one hour). If DCNL the duration is longer than one hour, the session for AWS account DCNL owners defaults to one hour.'
def assume_role(self, role_arn, role_session_name, policy=None, duration_seconds=None, external_id=None, mfa_serial_number=None, mfa_token=None): DCNL 'Returns a set of temporary security credentials (consisting of DCNL an access key ID, a secret access key, and a security token) DCNL that you can use to access AWS resources that you might not DCNL normally have access to. Typically, you use `AssumeRole` for DCNL cross-account access or federation. DCNL For cross-account access, imagine that you own multiple DCNL accounts and need to access resources in each account. You DCNL could create long-term credentials in each account to access DCNL those resources. However, managing all those credentials and DCNL remembering which one can access which account can be time DCNL consuming. Instead, you can create one set of long-term DCNL credentials in one account and then use temporary security DCNL credentials to access all the other accounts by assuming roles DCNL in those accounts. For more information about roles, see DCNL `Roles`_ in Using IAM . DCNL For federation, you can, for example, grant single sign-on DCNL access to the AWS Management Console. If you already have an DCNL identity and authentication system in your corporate network, DCNL you don\'t have to recreate user identities in AWS in order to DCNL grant those user identities access to AWS. Instead, after a DCNL user has been authenticated, you call `AssumeRole` (and DCNL specify the role with the appropriate permissions) to get DCNL temporary security credentials for that user. With those DCNL temporary security credentials, you construct a sign-in URL DCNL that users can use to access the console. For more DCNL information, see `Scenarios for Granting Temporary Access`_ in DCNL AWS Security Token Service . DCNL The temporary security credentials are valid for the duration DCNL that you specified when calling `AssumeRole`, which can be DCNL from 900 seconds (15 minutes) to 3600 seconds (1 hour). The DCNL default is 1 hour. DCNL The temporary security credentials that are returned from the DCNL `AssumeRoleWithWebIdentity` response have the permissions that DCNL are associated with the access policy of the role being DCNL assumed and any policies that are associated with the AWS DCNL resource being accessed. You can further restrict the DCNL permissions of the temporary security credentials by passing a DCNL policy in the request. The resulting permissions are an DCNL intersection of the role\'s access policy and the policy that DCNL you passed. These policies and any applicable resource-based DCNL policies are evaluated when calls to AWS service APIs are made DCNL using the temporary security credentials. DCNL To assume a role, your AWS account must be trusted by the DCNL role. The trust relationship is defined in the role\'s trust DCNL policy when the IAM role is created. You must also have a DCNL policy that allows you to call `sts:AssumeRole`. DCNL **Important:** You cannot call `Assumerole` by using AWS DCNL account credentials; access will be denied. You must use IAM DCNL user credentials to call `AssumeRole`. DCNL :type role_arn: string DCNL :param role_arn: The Amazon Resource Name (ARN) of the role that the DCNL caller is assuming. DCNL :type role_session_name: string DCNL :param role_session_name: An identifier for the assumed role session. DCNL The session name is included as part of the `AssumedRoleUser`. DCNL :type policy: string DCNL :param policy: A supplemental policy that is associated with the DCNL temporary security credentials from the `AssumeRole` call. The DCNL resulting permissions of the temporary security credentials are an DCNL intersection of this policy and the access policy that is DCNL associated with the role. Use this policy to further restrict the DCNL permissions of the temporary security credentials. DCNL :type duration_seconds: integer DCNL :param duration_seconds: The duration, in seconds, of the role session. DCNL The value can range from 900 seconds (15 minutes) to 3600 seconds DCNL (1 hour). By default, the value is set to 3600 seconds. DCNL :type external_id: string DCNL :param external_id: A unique identifier that is used by third parties DCNL to assume a role in their customers\' accounts. For each role that DCNL the third party can assume, they should instruct their customers to DCNL create a role with the external ID that the third party generated. DCNL Each time the third party assumes the role, they must pass the DCNL customer\'s external ID. The external ID is useful in order to help DCNL third parties bind a role to the customer who created it. For more DCNL information about the external ID, see `About the External ID`_ in DCNL Using Temporary Security Credentials . DCNL :type mfa_serial_number: string DCNL :param mfa_serial_number: The identification number of the MFA device that DCNL is associated with the user who is making the AssumeRole call. DCNL Specify this value if the trust policy of the role being assumed DCNL includes a condition that requires MFA authentication. The value is DCNL either the serial number for a hardware device (such as DCNL GAHT12345678) or an Amazon Resource Name (ARN) for a virtual device DCNL (such as arn:aws:iam::123456789012:mfa/user). Minimum length of 9. DCNL Maximum length of 256. DCNL :type mfa_token: string DCNL :param mfa_token: The value provided by the MFA device, if the trust DCNL policy of the role being assumed requires MFA (that is, if the DCNL policy includes a condition that tests for MFA). If the role being DCNL assumed requires MFA and if the TokenCode value is missing or DCNL expired, the AssumeRole call returns an "access denied" errror. DCNL Minimum length of 6. Maximum length of 6.'
def assume_role_with_saml(self, role_arn, principal_arn, saml_assertion, policy=None, duration_seconds=None): DCNL 'Returns a set of temporary security credentials for users who DCNL have been authenticated via a SAML authentication response. DCNL This operation provides a mechanism for tying an enterprise DCNL identity store or directory to role-based AWS access without DCNL user-specific credentials or configuration. DCNL The temporary security credentials returned by this operation DCNL consist of an access key ID, a secret access key, and a DCNL security token. Applications can use these temporary security DCNL credentials to sign calls to AWS services. The credentials are DCNL valid for the duration that you specified when calling DCNL `AssumeRoleWithSAML`, which can be up to 3600 seconds (1 hour) DCNL or until the time specified in the SAML authentication DCNL response\'s `NotOnOrAfter` value, whichever is shorter. DCNL The maximum duration for a session is 1 hour, and the minimum DCNL duration is 15 minutes, even if values outside this range are DCNL specified. DCNL Optionally, you can pass an AWS IAM access policy to this DCNL operation. The temporary security credentials that are DCNL returned by the operation have the permissions that are DCNL associated with the access policy of the role being assumed, DCNL except for any permissions explicitly denied by the policy you DCNL pass. This gives you a way to further restrict the permissions DCNL for the federated user. These policies and any applicable DCNL resource-based policies are evaluated when calls to AWS are DCNL made using the temporary security credentials. DCNL Before your application can call `AssumeRoleWithSAML`, you DCNL must configure your SAML identity provider (IdP) to issue the DCNL claims required by AWS. Additionally, you must use AWS DCNL Identity and Access Management (AWS IAM) to create a SAML DCNL provider entity in your AWS account that represents your DCNL identity provider, and create an AWS IAM role that specifies DCNL this SAML provider in its trust policy. DCNL Calling `AssumeRoleWithSAML` does not require the use of AWS DCNL security credentials. The identity of the caller is validated DCNL by using keys in the metadata document that is uploaded for DCNL the SAML provider entity for your identity provider. DCNL For more information, see the following resources: DCNL + `Creating Temporary Security Credentials for SAML DCNL Federation`_ in the Using Temporary Security Credentials DCNL guide. DCNL + `SAML Providers`_ in the Using IAM guide. DCNL + `Configuring a Relying Party and Claims in the Using IAM DCNL guide. `_ DCNL + `Creating a Role for SAML-Based Federation`_ in the Using DCNL IAM guide. DCNL :type role_arn: string DCNL :param role_arn: The Amazon Resource Name (ARN) of the role that the DCNL caller is assuming. DCNL :type principal_arn: string DCNL :param principal_arn: The Amazon Resource Name (ARN) of the SAML DCNL provider in AWS IAM that describes the IdP. DCNL :type saml_assertion: string DCNL :param saml_assertion: The base-64 encoded SAML authentication response DCNL provided by the IdP. DCNL For more information, see `Configuring a Relying Party and Adding DCNL Claims`_ in the Using IAM guide. DCNL :type policy: string DCNL :param policy: DCNL An AWS IAM policy in JSON format. DCNL The temporary security credentials that are returned by this operation DCNL have the permissions that are associated with the access policy of DCNL the role being assumed, except for any permissions explicitly DCNL denied by the policy you pass. These policies and any applicable DCNL resource-based policies are evaluated when calls to AWS are made DCNL using the temporary security credentials. DCNL The policy must be 2048 bytes or shorter, and its packed size must be DCNL less than 450 bytes. DCNL :type duration_seconds: integer DCNL :param duration_seconds: DCNL The duration, in seconds, of the role session. The value can range from DCNL 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the DCNL value is set to 3600 seconds. An expiration can also be specified DCNL in the SAML authentication response\'s `NotOnOrAfter` value. The DCNL actual expiration time is whichever value is shorter. DCNL The maximum duration for a session is 1 hour, and the minimum duration DCNL is 15 minutes, even if values outside this range are specified.'
def assume_role_with_web_identity(self, role_arn, role_session_name, web_identity_token, provider_id=None, policy=None, duration_seconds=None): DCNL 'Returns a set of temporary security credentials for users who DCNL have been authenticated in a mobile or web application with a DCNL web identity provider, such as Login with Amazon, Facebook, or DCNL Google. `AssumeRoleWithWebIdentity` is an API call that does DCNL not require the use of AWS security credentials. Therefore, DCNL you can distribute an application (for example, on mobile DCNL devices) that requests temporary security credentials without DCNL including long-term AWS credentials in the application or by DCNL deploying server-based proxy services that use long-term AWS DCNL credentials. For more information, see `Creating a Mobile DCNL Application with Third-Party Sign-In`_ in AWS Security Token DCNL Service . DCNL The temporary security credentials consist of an access key DCNL ID, a secret access key, and a security token. Applications DCNL can use these temporary security credentials to sign calls to DCNL AWS service APIs. The credentials are valid for the duration DCNL that you specified when calling `AssumeRoleWithWebIdentity`, DCNL which can be from 900 seconds (15 minutes) to 3600 seconds (1 DCNL hour). By default, the temporary security credentials are DCNL valid for 1 hour. DCNL The temporary security credentials that are returned from the DCNL `AssumeRoleWithWebIdentity` response have the permissions that DCNL are associated with the access policy of the role being DCNL assumed. You can further restrict the permissions of the DCNL temporary security credentials by passing a policy in the DCNL request. The resulting permissions are an intersection of the DCNL role\'s access policy and the policy that you passed. These DCNL policies and any applicable resource-based policies are DCNL evaluated when calls to AWS service APIs are made using the DCNL temporary security credentials. DCNL Before your application can call `AssumeRoleWithWebIdentity`, DCNL you must have an identity token from a supported identity DCNL provider and create a role that the application can assume. DCNL The role that your application assumes must trust the identity DCNL provider that is associated with the identity token. In other DCNL words, the identity provider must be specified in the role\'s DCNL trust policy. For more information, see ` Creating Temporary DCNL Security Credentials for Mobile Apps Using Third-Party DCNL Identity Providers`_. DCNL :type role_arn: string DCNL :param role_arn: The Amazon Resource Name (ARN) of the role that the DCNL caller is assuming. DCNL :type role_session_name: string DCNL :param role_session_name: An identifier for the assumed role session. DCNL Typically, you pass the name or identifier that is associated with DCNL the user who is using your application. That way, the temporary DCNL security credentials that your application will use are associated DCNL with that user. This session name is included as part of the ARN DCNL and assumed role ID in the `AssumedRoleUser` response element. DCNL :type web_identity_token: string DCNL :param web_identity_token: The OAuth 2.0 access token or OpenID Connect DCNL ID token that is provided by the identity provider. Your DCNL application must get this token by authenticating the user who is DCNL using your application with a web identity provider before the DCNL application makes an `AssumeRoleWithWebIdentity` call. DCNL :type provider_id: string DCNL :param provider_id: Specify this value only for OAuth access tokens. Do DCNL not specify this value for OpenID Connect ID tokens, such as DCNL `accounts.google.com`. This is the fully-qualified host component DCNL of the domain name of the identity provider. Do not include URL DCNL schemes and port numbers. Currently, `www.amazon.com` and DCNL `graph.facebook.com` are supported. DCNL :type policy: string DCNL :param policy: A supplemental policy that is associated with the DCNL temporary security credentials from the `AssumeRoleWithWebIdentity` DCNL call. The resulting permissions of the temporary security DCNL credentials are an intersection of this policy and the access DCNL policy that is associated with the role. Use this policy to further DCNL restrict the permissions of the temporary security credentials. DCNL :type duration_seconds: integer DCNL :param duration_seconds: The duration, in seconds, of the role session. DCNL The value can range from 900 seconds (15 minutes) to 3600 seconds DCNL (1 hour). By default, the value is set to 3600 seconds.'
def decode_authorization_message(self, encoded_message): DCNL 'Decodes additional information about the authorization status DCNL of a request from an encoded message returned in response to DCNL an AWS request. DCNL For example, if a user is not authorized to perform an action DCNL that he or she has requested, the request returns a DCNL `Client.UnauthorizedOperation` response (an HTTP 403 DCNL response). Some AWS actions additionally return an encoded DCNL message that can provide details about this authorization DCNL failure. DCNL Only certain AWS actions return an encoded authorization DCNL message. The documentation for an individual action indicates DCNL whether that action returns an encoded message in addition to DCNL returning an HTTP code. DCNL The message is encoded because the details of the DCNL authorization status can constitute privileged information DCNL that the user who requested the action should not see. To DCNL decode an authorization status message, a user must be granted DCNL permissions via an IAM policy to request the DCNL `DecodeAuthorizationMessage` ( DCNL `sts:DecodeAuthorizationMessage`) action. DCNL The decoded message includes the following type of DCNL information: DCNL + Whether the request was denied due to an explicit deny or DCNL due to the absence of an explicit allow. For more information, DCNL see `Determining Whether a Request is Allowed or Denied`_ in DCNL Using IAM . DCNL + The principal who made the request. DCNL + The requested action. DCNL + The requested resource. DCNL + The values of condition keys in the context of the user\'s DCNL request. DCNL :type encoded_message: string DCNL :param encoded_message: The encoded message that was returned with the DCNL response.'
@classmethod DCNL def from_json(cls, json_doc): DCNL 'Create and return a new Session Token based on the contents DCNL of a JSON document. DCNL :type json_doc: str DCNL :param json_doc: A string containing a JSON document with a DCNL previously saved Credentials object.'
@classmethod DCNL def load(cls, file_path): DCNL 'Create and return a new Session Token based on the contents DCNL of a previously saved JSON-format file. DCNL :type file_path: str DCNL :param file_path: The fully qualified path to the JSON-format DCNL file containing the previously saved Session Token information.'
def to_dict(self): DCNL 'Return a Python dict containing the important information DCNL about this Session Token.'
def save(self, file_path): DCNL 'Persist a Session Token to a file in JSON format. DCNL :type path: str DCNL :param path: The fully qualified path to the file where the DCNL the Session Token data should be written.  Any previous DCNL data in the file will be overwritten.  To help protect DCNL the credentials contained in the file, the permissions DCNL of the file will be set to readable/writable by owner only.'
def is_expired(self, time_offset_seconds=0): DCNL 'Checks to see if the Session Token is expired or not.  By default DCNL it will check to see if the Session Token is expired as of the DCNL moment the method is called.  However, you can supply an DCNL optional parameter which is the number of seconds of offset DCNL into the future for the check.  For example, if you supply DCNL a value of 5, this method will return a True if the Session DCNL Token will be expired 5 seconds from this moment. DCNL :type time_offset_seconds: int DCNL :param time_offset_seconds: The number of seconds into the future DCNL to test the Session Token for expiration.'
def create_batch_prediction(self, batch_prediction_id, ml_model_id, batch_prediction_data_source_id, output_uri, batch_prediction_name=None): DCNL 'Generates predictions for a group of observations. The DCNL observations to process exist in one or more data files DCNL referenced by a `DataSource`. This operation creates a new DCNL `BatchPrediction`, and uses an `MLModel` and the data files DCNL referenced by the `DataSource` as information sources. DCNL `CreateBatchPrediction` is an asynchronous operation. In DCNL response to `CreateBatchPrediction`, Amazon Machine Learning DCNL (Amazon ML) immediately returns and sets the `BatchPrediction` DCNL status to `PENDING`. After the `BatchPrediction` completes, DCNL Amazon ML sets the status to `COMPLETED`. DCNL You can poll for status updates by using the DCNL GetBatchPrediction operation and checking the `Status` DCNL parameter of the result. After the `COMPLETED` status appears, DCNL the results are available in the location specified by the DCNL `OutputUri` parameter. DCNL :type batch_prediction_id: string DCNL :param batch_prediction_id: A user-supplied ID that uniquely identifies DCNL the `BatchPrediction`. DCNL :type batch_prediction_name: string DCNL :param batch_prediction_name: A user-supplied name or description of DCNL the `BatchPrediction`. `BatchPredictionName` can only use the UTF-8 DCNL character set. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID of the `MLModel` that will generate DCNL predictions for the group of observations. DCNL :type batch_prediction_data_source_id: string DCNL :param batch_prediction_data_source_id: The ID of the `DataSource` that DCNL points to the group of observations to predict. DCNL :type output_uri: string DCNL :param output_uri: The location of an Amazon Simple Storage Service DCNL (Amazon S3) bucket or directory to store the batch prediction DCNL results. The following substrings are not allowed in the s3 key DCNL portion of the "outputURI" field: \':\', \'//\', \'/./\', \'/../\'. DCNL Amazon ML needs permissions to store and retrieve the logs on your DCNL behalf. For information about how to set permissions, see the DCNL `Amazon Machine Learning Developer Guide`_.'
def create_data_source_from_rds(self, data_source_id, rds_data, role_arn, data_source_name=None, compute_statistics=None): DCNL 'Creates a `DataSource` object from an ` Amazon Relational DCNL Database Service`_ (Amazon RDS). A `DataSource` references DCNL data that can be used to perform CreateMLModel, DCNL CreateEvaluation, or CreateBatchPrediction operations. DCNL `CreateDataSourceFromRDS` is an asynchronous operation. In DCNL response to `CreateDataSourceFromRDS`, Amazon Machine Learning DCNL (Amazon ML) immediately returns and sets the `DataSource` DCNL status to `PENDING`. After the `DataSource` is created and DCNL ready for use, Amazon ML sets the `Status` parameter to DCNL `COMPLETED`. `DataSource` in `COMPLETED` or `PENDING` status DCNL can only be used to perform CreateMLModel, CreateEvaluation, DCNL or CreateBatchPrediction operations. DCNL If Amazon ML cannot accept the input source, it sets the DCNL `Status` parameter to `FAILED` and includes an error message DCNL in the `Message` attribute of the GetDataSource operation DCNL response. DCNL :type data_source_id: string DCNL :param data_source_id: A user-supplied ID that uniquely identifies the DCNL `DataSource`. Typically, an Amazon Resource Number (ARN) becomes DCNL the ID for a `DataSource`. DCNL :type data_source_name: string DCNL :param data_source_name: A user-supplied name or description of the DCNL `DataSource`. DCNL :type rds_data: dict DCNL :param rds_data: DCNL The data specification of an Amazon RDS `DataSource`: DCNL + DatabaseInformation - DCNL + `DatabaseName ` - Name of the Amazon RDS database. DCNL + ` InstanceIdentifier ` - Unique identifier for the Amazon RDS DCNL database instance. DCNL + DatabaseCredentials - AWS Identity and Access Management (IAM) DCNL credentials that are used to connect to the Amazon RDS database. DCNL + ResourceRole - Role (DataPipelineDefaultResourceRole) assumed by an DCNL Amazon Elastic Compute Cloud (EC2) instance to carry out the copy DCNL task from Amazon RDS to Amazon S3. For more information, see `Role DCNL templates`_ for data pipelines. DCNL + ServiceRole - Role (DataPipelineDefaultRole) assumed by the AWS Data DCNL Pipeline service to monitor the progress of the copy task from DCNL Amazon RDS to Amazon Simple Storage Service (S3). For more DCNL information, see `Role templates`_ for data pipelines. DCNL + SecurityInfo - Security information to use to access an Amazon RDS DCNL instance. You need to set up appropriate ingress rules for the DCNL security entity IDs provided to allow access to the Amazon RDS DCNL instance. Specify a [ `SubnetId`, `SecurityGroupIds`] pair for a DCNL VPC-based Amazon RDS instance. DCNL + SelectSqlQuery - Query that is used to retrieve the observation data DCNL for the `Datasource`. DCNL + S3StagingLocation - Amazon S3 location for staging RDS data. The data DCNL retrieved from Amazon RDS using `SelectSqlQuery` is stored in this DCNL location. DCNL + DataSchemaUri - Amazon S3 location of the `DataSchema`. DCNL + DataSchema - A JSON string representing the schema. This is not DCNL required if `DataSchemaUri` is specified. DCNL + DataRearrangement - A JSON string representing the splitting DCNL requirement of a `Datasource`. Sample - ` "{"randomSeed":"some- DCNL random-seed", DCNL "splitting":{"percentBegin":10,"percentEnd":60}}"` DCNL :type role_arn: string DCNL :param role_arn: The role that Amazon ML assumes on behalf of the user DCNL to create and activate a data pipeline in the users account and DCNL copy data (using the `SelectSqlQuery`) query from Amazon RDS to DCNL Amazon S3. DCNL :type compute_statistics: boolean DCNL :param compute_statistics: The compute statistics for a `DataSource`. DCNL The statistics are generated from the observation data referenced DCNL by a `DataSource`. Amazon ML uses the statistics internally during DCNL an `MLModel` training. This parameter must be set to `True` if the DCNL ``DataSource `` needs to be used for `MLModel` training.'
def create_data_source_from_redshift(self, data_source_id, data_spec, role_arn, data_source_name=None, compute_statistics=None): DCNL 'Creates a `DataSource` from `Amazon Redshift`_. A `DataSource` DCNL references data that can be used to perform either DCNL CreateMLModel, CreateEvaluation or CreateBatchPrediction DCNL operations. DCNL `CreateDataSourceFromRedshift` is an asynchronous operation. DCNL In response to `CreateDataSourceFromRedshift`, Amazon Machine DCNL Learning (Amazon ML) immediately returns and sets the DCNL `DataSource` status to `PENDING`. After the `DataSource` is DCNL created and ready for use, Amazon ML sets the `Status` DCNL parameter to `COMPLETED`. `DataSource` in `COMPLETED` or DCNL `PENDING` status can only be used to perform CreateMLModel, DCNL CreateEvaluation, or CreateBatchPrediction operations. DCNL If Amazon ML cannot accept the input source, it sets the DCNL `Status` parameter to `FAILED` and includes an error message DCNL in the `Message` attribute of the GetDataSource operation DCNL response. DCNL The observations should exist in the database hosted on an DCNL Amazon Redshift cluster and should be specified by a DCNL `SelectSqlQuery`. Amazon ML executes ` Unload`_ command in DCNL Amazon Redshift to transfer the result set of `SelectSqlQuery` DCNL to `S3StagingLocation.` DCNL After the `DataSource` is created, it\'s ready for use in DCNL evaluations and batch predictions. If you plan to use the DCNL `DataSource` to train an `MLModel`, the `DataSource` requires DCNL another item -- a recipe. A recipe describes the observation DCNL variables that participate in training an `MLModel`. A recipe DCNL describes how each input variable will be used in training. DCNL Will the variable be included or excluded from training? Will DCNL the variable be manipulated, for example, combined with DCNL another variable or split apart into word combinations? The DCNL recipe provides answers to these questions. For more DCNL information, see the Amazon Machine Learning Developer Guide. DCNL :type data_source_id: string DCNL :param data_source_id: A user-supplied ID that uniquely identifies the DCNL `DataSource`. DCNL :type data_source_name: string DCNL :param data_source_name: A user-supplied name or description of the DCNL `DataSource`. DCNL :type data_spec: dict DCNL :param data_spec: DCNL The data specification of an Amazon Redshift `DataSource`: DCNL + DatabaseInformation - DCNL + `DatabaseName ` - Name of the Amazon Redshift database. DCNL + ` ClusterIdentifier ` - Unique ID for the Amazon Redshift cluster. DCNL + DatabaseCredentials - AWS Identity abd Access Management (IAM) DCNL credentials that are used to connect to the Amazon Redshift DCNL database. DCNL + SelectSqlQuery - Query that is used to retrieve the observation data DCNL for the `Datasource`. DCNL + S3StagingLocation - Amazon Simple Storage Service (Amazon S3) DCNL location for staging Amazon Redshift data. The data retrieved from DCNL Amazon Relational Database Service (Amazon RDS) using DCNL `SelectSqlQuery` is stored in this location. DCNL + DataSchemaUri - Amazon S3 location of the `DataSchema`. DCNL + DataSchema - A JSON string representing the schema. This is not DCNL required if `DataSchemaUri` is specified. DCNL + DataRearrangement - A JSON string representing the splitting DCNL requirement of a `Datasource`. Sample - ` "{"randomSeed":"some- DCNL random-seed", DCNL "splitting":{"percentBegin":10,"percentEnd":60}}"` DCNL :type role_arn: string DCNL :param role_arn: A fully specified role Amazon Resource Name (ARN). DCNL Amazon ML assumes the role on behalf of the user to create the DCNL following: DCNL + A security group to allow Amazon ML to execute the `SelectSqlQuery` DCNL query on an Amazon Redshift cluster DCNL + An Amazon S3 bucket policy to grant Amazon ML read/write permissions DCNL on the `S3StagingLocation` DCNL :type compute_statistics: boolean DCNL :param compute_statistics: The compute statistics for a `DataSource`. DCNL The statistics are generated from the observation data referenced DCNL by a `DataSource`. Amazon ML uses the statistics internally during DCNL `MLModel` training. This parameter must be set to `True` if the DCNL ``DataSource `` needs to be used for `MLModel` training'
def create_data_source_from_s3(self, data_source_id, data_spec, data_source_name=None, compute_statistics=None): DCNL 'Creates a `DataSource` object. A `DataSource` references data DCNL that can be used to perform CreateMLModel, CreateEvaluation, DCNL or CreateBatchPrediction operations. DCNL `CreateDataSourceFromS3` is an asynchronous operation. In DCNL response to `CreateDataSourceFromS3`, Amazon Machine Learning DCNL (Amazon ML) immediately returns and sets the `DataSource` DCNL status to `PENDING`. After the `DataSource` is created and DCNL ready for use, Amazon ML sets the `Status` parameter to DCNL `COMPLETED`. `DataSource` in `COMPLETED` or `PENDING` status DCNL can only be used to perform CreateMLModel, CreateEvaluation or DCNL CreateBatchPrediction operations. DCNL If Amazon ML cannot accept the input source, it sets the DCNL `Status` parameter to `FAILED` and includes an error message DCNL in the `Message` attribute of the GetDataSource operation DCNL response. DCNL The observation data used in a `DataSource` should be ready to DCNL use; that is, it should have a consistent structure, and DCNL missing data values should be kept to a minimum. The DCNL observation data must reside in one or more CSV files in an DCNL Amazon Simple Storage Service (Amazon S3) bucket, along with a DCNL schema that describes the data items by name and type. The DCNL same schema must be used for all of the data files referenced DCNL by the `DataSource`. DCNL After the `DataSource` has been created, it\'s ready to use in DCNL evaluations and batch predictions. If you plan to use the DCNL `DataSource` to train an `MLModel`, the `DataSource` requires DCNL another item: a recipe. A recipe describes the observation DCNL variables that participate in training an `MLModel`. A recipe DCNL describes how each input variable will be used in training. DCNL Will the variable be included or excluded from training? Will DCNL the variable be manipulated, for example, combined with DCNL another variable, or split apart into word combinations? The DCNL recipe provides answers to these questions. For more DCNL information, see the `Amazon Machine Learning Developer DCNL Guide`_. DCNL :type data_source_id: string DCNL :param data_source_id: A user-supplied identifier that uniquely DCNL identifies the `DataSource`. DCNL :type data_source_name: string DCNL :param data_source_name: A user-supplied name or description of the DCNL `DataSource`. DCNL :type data_spec: dict DCNL :param data_spec: DCNL The data specification of a `DataSource`: DCNL + DataLocationS3 - Amazon Simple Storage Service (Amazon S3) location DCNL of the observation data. DCNL + DataSchemaLocationS3 - Amazon S3 location of the `DataSchema`. DCNL + DataSchema - A JSON string representing the schema. This is not DCNL required if `DataSchemaUri` is specified. DCNL + DataRearrangement - A JSON string representing the splitting DCNL requirement of a `Datasource`. Sample - ` "{"randomSeed":"some- DCNL random-seed", DCNL "splitting":{"percentBegin":10,"percentEnd":60}}"` DCNL :type compute_statistics: boolean DCNL :param compute_statistics: The compute statistics for a `DataSource`. DCNL The statistics are generated from the observation data referenced DCNL by a `DataSource`. Amazon ML uses the statistics internally during DCNL an `MLModel` training. This parameter must be set to `True` if the DCNL ``DataSource `` needs to be used for `MLModel` training'
def create_evaluation(self, evaluation_id, ml_model_id, evaluation_data_source_id, evaluation_name=None): DCNL 'Creates a new `Evaluation` of an `MLModel`. An `MLModel` is DCNL evaluated on a set of observations associated to a DCNL `DataSource`. Like a `DataSource` for an `MLModel`, the DCNL `DataSource` for an `Evaluation` contains values for the DCNL Target Variable. The `Evaluation` compares the predicted DCNL result for each observation to the actual outcome and provides DCNL a summary so that you know how effective the `MLModel` DCNL functions on the test data. Evaluation generates a relevant DCNL performance metric such as BinaryAUC, RegressionRMSE or DCNL MulticlassAvgFScore based on the corresponding `MLModelType`: DCNL `BINARY`, `REGRESSION` or `MULTICLASS`. DCNL `CreateEvaluation` is an asynchronous operation. In response DCNL to `CreateEvaluation`, Amazon Machine Learning (Amazon ML) DCNL immediately returns and sets the evaluation status to DCNL `PENDING`. After the `Evaluation` is created and ready for DCNL use, Amazon ML sets the status to `COMPLETED`. DCNL You can use the GetEvaluation operation to check progress of DCNL the evaluation during the creation operation. DCNL :type evaluation_id: string DCNL :param evaluation_id: A user-supplied ID that uniquely identifies the DCNL `Evaluation`. DCNL :type evaluation_name: string DCNL :param evaluation_name: A user-supplied name or description of the DCNL `Evaluation`. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID of the `MLModel` to evaluate. DCNL The schema used in creating the `MLModel` must match the schema of the DCNL `DataSource` used in the `Evaluation`. DCNL :type evaluation_data_source_id: string DCNL :param evaluation_data_source_id: The ID of the `DataSource` for the DCNL evaluation. The schema of the `DataSource` must match the schema DCNL used to create the `MLModel`.'
def create_ml_model(self, ml_model_id, ml_model_type, training_data_source_id, ml_model_name=None, parameters=None, recipe=None, recipe_uri=None): DCNL 'Creates a new `MLModel` using the data files and the recipe as DCNL information sources. DCNL An `MLModel` is nearly immutable. Users can only update the DCNL `MLModelName` and the `ScoreThreshold` in an `MLModel` without DCNL creating a new `MLModel`. DCNL `CreateMLModel` is an asynchronous operation. In response to DCNL `CreateMLModel`, Amazon Machine Learning (Amazon ML) DCNL immediately returns and sets the `MLModel` status to DCNL `PENDING`. After the `MLModel` is created and ready for use, DCNL Amazon ML sets the status to `COMPLETED`. DCNL You can use the GetMLModel operation to check progress of the DCNL `MLModel` during the creation operation. DCNL CreateMLModel requires a `DataSource` with computed DCNL statistics, which can be created by setting DCNL `ComputeStatistics` to `True` in CreateDataSourceFromRDS, DCNL CreateDataSourceFromS3, or CreateDataSourceFromRedshift DCNL operations. DCNL :type ml_model_id: string DCNL :param ml_model_id: A user-supplied ID that uniquely identifies the DCNL `MLModel`. DCNL :type ml_model_name: string DCNL :param ml_model_name: A user-supplied name or description of the DCNL `MLModel`. DCNL :type ml_model_type: string DCNL :param ml_model_type: The category of supervised learning that this DCNL `MLModel` will address. Choose from the following types: DCNL + Choose `REGRESSION` if the `MLModel` will be used to predict a DCNL numeric value. DCNL + Choose `BINARY` if the `MLModel` result has two possible values. DCNL + Choose `MULTICLASS` if the `MLModel` result has a limited number of DCNL values. DCNL For more information, see the `Amazon Machine Learning Developer DCNL Guide`_. DCNL :type parameters: map DCNL :param parameters: DCNL A list of the training parameters in the `MLModel`. The list is DCNL implemented as a map of key/value pairs. DCNL The following is the current set of training parameters: DCNL + `sgd.l1RegularizationAmount` - Coefficient regularization L1 norm. It DCNL controls overfitting the data by penalizing large coefficients. DCNL This tends to drive coefficients to zero, resulting in sparse DCNL feature set. If you use this parameter, start by specifying a small DCNL value such as 1.0E-08. The value is a double that ranges from 0 to DCNL MAX_DOUBLE. The default is not to use L1 normalization. The DCNL parameter cannot be used when `L2` is specified. Use this parameter DCNL sparingly. DCNL + `sgd.l2RegularizationAmount` - Coefficient regularization L2 norm. It DCNL controls overfitting the data by penalizing large coefficients. DCNL This tends to drive coefficients to small, nonzero values. If you DCNL use this parameter, start by specifying a small value such as DCNL 1.0E-08. The valuseis a double that ranges from 0 to MAX_DOUBLE. DCNL The default is not to use L2 normalization. This cannot be used DCNL when `L1` is specified. Use this parameter sparingly. DCNL + `sgd.maxPasses` - Number of times that the training process traverses DCNL the observations to build the `MLModel`. The value is an integer DCNL that ranges from 1 to 10000. The default value is 10. DCNL + `sgd.maxMLModelSizeInBytes` - Maximum allowed size of the model. DCNL Depending on the input data, the size of the model might affect its DCNL performance. The value is an integer that ranges from 100000 to DCNL 2147483648. The default value is 33554432. DCNL :type training_data_source_id: string DCNL :param training_data_source_id: The `DataSource` that points to the DCNL training data. DCNL :type recipe: string DCNL :param recipe: The data recipe for creating `MLModel`. You must specify DCNL either the recipe or its URI. If you dont specify a recipe or its DCNL URI, Amazon ML creates a default. DCNL :type recipe_uri: string DCNL :param recipe_uri: The Amazon Simple Storage Service (Amazon S3) DCNL location and file name that contains the `MLModel` recipe. You must DCNL specify either the recipe or its URI. If you dont specify a recipe DCNL or its URI, Amazon ML creates a default.'
def create_realtime_endpoint(self, ml_model_id): DCNL 'Creates a real-time endpoint for the `MLModel`. The endpoint DCNL contains the URI of the `MLModel`; that is, the location to DCNL send real-time prediction requests for the specified DCNL `MLModel`. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID assigned to the `MLModel` during creation.'
def delete_batch_prediction(self, batch_prediction_id): DCNL 'Assigns the DELETED status to a `BatchPrediction`, rendering DCNL it unusable. DCNL After using the `DeleteBatchPrediction` operation, you can use DCNL the GetBatchPrediction operation to verify that the status of DCNL the `BatchPrediction` changed to DELETED. DCNL The result of the `DeleteBatchPrediction` operation is DCNL irreversible. DCNL :type batch_prediction_id: string DCNL :param batch_prediction_id: A user-supplied ID that uniquely identifies DCNL the `BatchPrediction`.'
def delete_data_source(self, data_source_id): DCNL 'Assigns the DELETED status to a `DataSource`, rendering it DCNL unusable. DCNL After using the `DeleteDataSource` operation, you can use the DCNL GetDataSource operation to verify that the status of the DCNL `DataSource` changed to DELETED. DCNL The results of the `DeleteDataSource` operation are DCNL irreversible. DCNL :type data_source_id: string DCNL :param data_source_id: A user-supplied ID that uniquely identifies the DCNL `DataSource`.'
def delete_evaluation(self, evaluation_id): DCNL 'Assigns the `DELETED` status to an `Evaluation`, rendering it DCNL unusable. DCNL After invoking the `DeleteEvaluation` operation, you can use DCNL the GetEvaluation operation to verify that the status of the DCNL `Evaluation` changed to `DELETED`. DCNL The results of the `DeleteEvaluation` operation are DCNL irreversible. DCNL :type evaluation_id: string DCNL :param evaluation_id: A user-supplied ID that uniquely identifies the DCNL `Evaluation` to delete.'
def delete_ml_model(self, ml_model_id): DCNL 'Assigns the DELETED status to an `MLModel`, rendering it DCNL unusable. DCNL After using the `DeleteMLModel` operation, you can use the DCNL GetMLModel operation to verify that the status of the DCNL `MLModel` changed to DELETED. DCNL The result of the `DeleteMLModel` operation is irreversible. DCNL :type ml_model_id: string DCNL :param ml_model_id: A user-supplied ID that uniquely identifies the DCNL `MLModel`.'
def delete_realtime_endpoint(self, ml_model_id): DCNL 'Deletes a real time endpoint of an `MLModel`. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID assigned to the `MLModel` during creation.'
def describe_batch_predictions(self, filter_variable=None, eq=None, gt=None, lt=None, ge=None, le=None, ne=None, prefix=None, sort_order=None, next_token=None, limit=None): DCNL 'Returns a list of `BatchPrediction` operations that match the DCNL search criteria in the request. DCNL :type filter_variable: string DCNL :param filter_variable: DCNL Use one of the following variables to filter a list of DCNL `BatchPrediction`: DCNL + `CreatedAt` - Sets the search criteria to the `BatchPrediction` DCNL creation date. DCNL + `Status` - Sets the search criteria to the `BatchPrediction` status. DCNL + `Name` - Sets the search criteria to the contents of the DCNL `BatchPrediction` ** ** `Name`. DCNL + `IAMUser` - Sets the search criteria to the user account that invoked DCNL the `BatchPrediction` creation. DCNL + `MLModelId` - Sets the search criteria to the `MLModel` used in the DCNL `BatchPrediction`. DCNL + `DataSourceId` - Sets the search criteria to the `DataSource` used in DCNL the `BatchPrediction`. DCNL + `DataURI` - Sets the search criteria to the data file(s) used in the DCNL `BatchPrediction`. The URL can identify either a file or an Amazon DCNL Simple Storage Solution (Amazon S3) bucket or directory. DCNL :type eq: string DCNL :param eq: The equal to operator. The `BatchPrediction` results will DCNL have `FilterVariable` values that exactly match the value specified DCNL with `EQ`. DCNL :type gt: string DCNL :param gt: The greater than operator. The `BatchPrediction` results DCNL will have `FilterVariable` values that are greater than the value DCNL specified with `GT`. DCNL :type lt: string DCNL :param lt: The less than operator. The `BatchPrediction` results will DCNL have `FilterVariable` values that are less than the value specified DCNL with `LT`. DCNL :type ge: string DCNL :param ge: The greater than or equal to operator. The `BatchPrediction` DCNL results will have `FilterVariable` values that are greater than or DCNL equal to the value specified with `GE`. DCNL :type le: string DCNL :param le: The less than or equal to operator. The `BatchPrediction` DCNL results will have `FilterVariable` values that are less than or DCNL equal to the value specified with `LE`. DCNL :type ne: string DCNL :param ne: The not equal to operator. The `BatchPrediction` results DCNL will have `FilterVariable` values not equal to the value specified DCNL with `NE`. DCNL :type prefix: string DCNL :param prefix: DCNL A string that is found at the beginning of a variable, such as `Name` DCNL or `Id`. DCNL For example, a `Batch Prediction` operation could have the `Name` DCNL `2014-09-09-HolidayGiftMailer`. To search for this DCNL `BatchPrediction`, select `Name` for the `FilterVariable` and any DCNL of the following strings for the `Prefix`: DCNL + 2014-09 DCNL + 2014-09-09 DCNL + 2014-09-09-Holiday DCNL :type sort_order: string DCNL :param sort_order: A two-value parameter that determines the sequence DCNL of the resulting list of `MLModel`s. DCNL + `asc` - Arranges the list in ascending order (A-Z, 0-9). DCNL + `dsc` - Arranges the list in descending order (Z-A, 9-0). DCNL Results are sorted by `FilterVariable`. DCNL :type next_token: string DCNL :param next_token: An ID of the page in the paginated results. DCNL :type limit: integer DCNL :param limit: The number of pages of information to include in the DCNL result. The range of acceptable values is 1 through 100. The DCNL default value is 100.'
def describe_data_sources(self, filter_variable=None, eq=None, gt=None, lt=None, ge=None, le=None, ne=None, prefix=None, sort_order=None, next_token=None, limit=None): DCNL 'Returns a list of `DataSource` that match the search criteria DCNL in the request. DCNL :type filter_variable: string DCNL :param filter_variable: DCNL Use one of the following variables to filter a list of `DataSource`: DCNL + `CreatedAt` - Sets the search criteria to `DataSource` creation DCNL dates. DCNL + `Status` - Sets the search criteria to `DataSource` statuses. DCNL + `Name` - Sets the search criteria to the contents of `DataSource` ** DCNL ** `Name`. DCNL + `DataUri` - Sets the search criteria to the URI of data files used to DCNL create the `DataSource`. The URI can identify either a file or an DCNL Amazon Simple Storage Service (Amazon S3) bucket or directory. DCNL + `IAMUser` - Sets the search criteria to the user account that invoked DCNL the `DataSource` creation. DCNL :type eq: string DCNL :param eq: The equal to operator. The `DataSource` results will have DCNL `FilterVariable` values that exactly match the value specified with DCNL `EQ`. DCNL :type gt: string DCNL :param gt: The greater than operator. The `DataSource` results will DCNL have `FilterVariable` values that are greater than the value DCNL specified with `GT`. DCNL :type lt: string DCNL :param lt: The less than operator. The `DataSource` results will have DCNL `FilterVariable` values that are less than the value specified with DCNL `LT`. DCNL :type ge: string DCNL :param ge: The greater than or equal to operator. The `DataSource` DCNL results will have `FilterVariable` values that are greater than or DCNL equal to the value specified with `GE`. DCNL :type le: string DCNL :param le: The less than or equal to operator. The `DataSource` results DCNL will have `FilterVariable` values that are less than or equal to DCNL the value specified with `LE`. DCNL :type ne: string DCNL :param ne: The not equal to operator. The `DataSource` results will DCNL have `FilterVariable` values not equal to the value specified with DCNL `NE`. DCNL :type prefix: string DCNL :param prefix: DCNL A string that is found at the beginning of a variable, such as `Name` DCNL or `Id`. DCNL For example, a `DataSource` could have the `Name` DCNL `2014-09-09-HolidayGiftMailer`. To search for this `DataSource`, DCNL select `Name` for the `FilterVariable` and any of the following DCNL strings for the `Prefix`: DCNL + 2014-09 DCNL + 2014-09-09 DCNL + 2014-09-09-Holiday DCNL :type sort_order: string DCNL :param sort_order: A two-value parameter that determines the sequence DCNL of the resulting list of `DataSource`. DCNL + `asc` - Arranges the list in ascending order (A-Z, 0-9). DCNL + `dsc` - Arranges the list in descending order (Z-A, 9-0). DCNL Results are sorted by `FilterVariable`. DCNL :type next_token: string DCNL :param next_token: The ID of the page in the paginated results. DCNL :type limit: integer DCNL :param limit: The maximum number of `DataSource` to include in the DCNL result.'
def describe_evaluations(self, filter_variable=None, eq=None, gt=None, lt=None, ge=None, le=None, ne=None, prefix=None, sort_order=None, next_token=None, limit=None): DCNL 'Returns a list of `DescribeEvaluations` that match the search DCNL criteria in the request. DCNL :type filter_variable: string DCNL :param filter_variable: DCNL Use one of the following variable to filter a list of `Evaluation` DCNL objects: DCNL + `CreatedAt` - Sets the search criteria to the `Evaluation` creation DCNL date. DCNL + `Status` - Sets the search criteria to the `Evaluation` status. DCNL + `Name` - Sets the search criteria to the contents of `Evaluation` ** DCNL ** `Name`. DCNL + `IAMUser` - Sets the search criteria to the user account that invoked DCNL an `Evaluation`. DCNL + `MLModelId` - Sets the search criteria to the `MLModel` that was DCNL evaluated. DCNL + `DataSourceId` - Sets the search criteria to the `DataSource` used in DCNL `Evaluation`. DCNL + `DataUri` - Sets the search criteria to the data file(s) used in DCNL `Evaluation`. The URL can identify either a file or an Amazon DCNL Simple Storage Solution (Amazon S3) bucket or directory. DCNL :type eq: string DCNL :param eq: The equal to operator. The `Evaluation` results will have DCNL `FilterVariable` values that exactly match the value specified with DCNL `EQ`. DCNL :type gt: string DCNL :param gt: The greater than operator. The `Evaluation` results will DCNL have `FilterVariable` values that are greater than the value DCNL specified with `GT`. DCNL :type lt: string DCNL :param lt: The less than operator. The `Evaluation` results will have DCNL `FilterVariable` values that are less than the value specified with DCNL `LT`. DCNL :type ge: string DCNL :param ge: The greater than or equal to operator. The `Evaluation` DCNL results will have `FilterVariable` values that are greater than or DCNL equal to the value specified with `GE`. DCNL :type le: string DCNL :param le: The less than or equal to operator. The `Evaluation` results DCNL will have `FilterVariable` values that are less than or equal to DCNL the value specified with `LE`. DCNL :type ne: string DCNL :param ne: The not equal to operator. The `Evaluation` results will DCNL have `FilterVariable` values not equal to the value specified with DCNL `NE`. DCNL :type prefix: string DCNL :param prefix: DCNL A string that is found at the beginning of a variable, such as `Name` DCNL or `Id`. DCNL For example, an `Evaluation` could have the `Name` DCNL `2014-09-09-HolidayGiftMailer`. To search for this `Evaluation`, DCNL select `Name` for the `FilterVariable` and any of the following DCNL strings for the `Prefix`: DCNL + 2014-09 DCNL + 2014-09-09 DCNL + 2014-09-09-Holiday DCNL :type sort_order: string DCNL :param sort_order: A two-value parameter that determines the sequence DCNL of the resulting list of `Evaluation`. DCNL + `asc` - Arranges the list in ascending order (A-Z, 0-9). DCNL + `dsc` - Arranges the list in descending order (Z-A, 9-0). DCNL Results are sorted by `FilterVariable`. DCNL :type next_token: string DCNL :param next_token: The ID of the page in the paginated results. DCNL :type limit: integer DCNL :param limit: The maximum number of `Evaluation` to include in the DCNL result.'
def describe_ml_models(self, filter_variable=None, eq=None, gt=None, lt=None, ge=None, le=None, ne=None, prefix=None, sort_order=None, next_token=None, limit=None): DCNL 'Returns a list of `MLModel` that match the search criteria in DCNL the request. DCNL :type filter_variable: string DCNL :param filter_variable: DCNL Use one of the following variables to filter a list of `MLModel`: DCNL + `CreatedAt` - Sets the search criteria to `MLModel` creation date. DCNL + `Status` - Sets the search criteria to `MLModel` status. DCNL + `Name` - Sets the search criteria to the contents of `MLModel` ** ** DCNL `Name`. DCNL + `IAMUser` - Sets the search criteria to the user account that invoked DCNL the `MLModel` creation. DCNL + `TrainingDataSourceId` - Sets the search criteria to the `DataSource` DCNL used to train one or more `MLModel`. DCNL + `RealtimeEndpointStatus` - Sets the search criteria to the `MLModel` DCNL real-time endpoint status. DCNL + `MLModelType` - Sets the search criteria to `MLModel` type: binary, DCNL regression, or multi-class. DCNL + `Algorithm` - Sets the search criteria to the algorithm that the DCNL `MLModel` uses. DCNL + `TrainingDataURI` - Sets the search criteria to the data file(s) used DCNL in training a `MLModel`. The URL can identify either a file or an DCNL Amazon Simple Storage Service (Amazon S3) bucket or directory. DCNL :type eq: string DCNL :param eq: The equal to operator. The `MLModel` results will have DCNL `FilterVariable` values that exactly match the value specified with DCNL `EQ`. DCNL :type gt: string DCNL :param gt: The greater than operator. The `MLModel` results will have DCNL `FilterVariable` values that are greater than the value specified DCNL with `GT`. DCNL :type lt: string DCNL :param lt: The less than operator. The `MLModel` results will have DCNL `FilterVariable` values that are less than the value specified with DCNL `LT`. DCNL :type ge: string DCNL :param ge: The greater than or equal to operator. The `MLModel` results DCNL will have `FilterVariable` values that are greater than or equal to DCNL the value specified with `GE`. DCNL :type le: string DCNL :param le: The less than or equal to operator. The `MLModel` results DCNL will have `FilterVariable` values that are less than or equal to DCNL the value specified with `LE`. DCNL :type ne: string DCNL :param ne: The not equal to operator. The `MLModel` results will have DCNL `FilterVariable` values not equal to the value specified with `NE`. DCNL :type prefix: string DCNL :param prefix: DCNL A string that is found at the beginning of a variable, such as `Name` DCNL or `Id`. DCNL For example, an `MLModel` could have the `Name` DCNL `2014-09-09-HolidayGiftMailer`. To search for this `MLModel`, DCNL select `Name` for the `FilterVariable` and any of the following DCNL strings for the `Prefix`: DCNL + 2014-09 DCNL + 2014-09-09 DCNL + 2014-09-09-Holiday DCNL :type sort_order: string DCNL :param sort_order: A two-value parameter that determines the sequence DCNL of the resulting list of `MLModel`. DCNL + `asc` - Arranges the list in ascending order (A-Z, 0-9). DCNL + `dsc` - Arranges the list in descending order (Z-A, 9-0). DCNL Results are sorted by `FilterVariable`. DCNL :type next_token: string DCNL :param next_token: The ID of the page in the paginated results. DCNL :type limit: integer DCNL :param limit: The number of pages of information to include in the DCNL result. The range of acceptable values is 1 through 100. The DCNL default value is 100.'
def get_batch_prediction(self, batch_prediction_id): DCNL 'Returns a `BatchPrediction` that includes detailed metadata, DCNL status, and data file information for a `Batch Prediction` DCNL request. DCNL :type batch_prediction_id: string DCNL :param batch_prediction_id: An ID assigned to the `BatchPrediction` at DCNL creation.'
def get_data_source(self, data_source_id, verbose=None): DCNL 'Returns a `DataSource` that includes metadata and data file DCNL information, as well as the current status of the DCNL `DataSource`. DCNL `GetDataSource` provides results in normal or verbose format. DCNL The verbose format adds the schema description and the list of DCNL files pointed to by the DataSource to the normal format. DCNL :type data_source_id: string DCNL :param data_source_id: The ID assigned to the `DataSource` at creation. DCNL :type verbose: boolean DCNL :param verbose: Specifies whether the `GetDataSource` operation should DCNL return `DataSourceSchema`. DCNL If true, `DataSourceSchema` is returned. DCNL If false, `DataSourceSchema` is not returned.'
def get_evaluation(self, evaluation_id): DCNL 'Returns an `Evaluation` that includes metadata as well as the DCNL current status of the `Evaluation`. DCNL :type evaluation_id: string DCNL :param evaluation_id: The ID of the `Evaluation` to retrieve. The DCNL evaluation of each `MLModel` is recorded and cataloged. The ID DCNL provides the means to access the information.'
def get_ml_model(self, ml_model_id, verbose=None): DCNL 'Returns an `MLModel` that includes detailed metadata, and data DCNL source information as well as the current status of the DCNL `MLModel`. DCNL `GetMLModel` provides results in normal or verbose format. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID assigned to the `MLModel` at creation. DCNL :type verbose: boolean DCNL :param verbose: Specifies whether the `GetMLModel` operation should DCNL return `Recipe`. DCNL If true, `Recipe` is returned. DCNL If false, `Recipe` is not returned.'
def predict(self, ml_model_id, record, predict_endpoint): DCNL 'Generates a prediction for the observation using the specified DCNL `MLModel`. DCNL Not all response parameters will be populated because this is DCNL dependent on the type of requested model. DCNL :type ml_model_id: string DCNL :param ml_model_id: A unique identifier of the `MLModel`. DCNL :type record: map DCNL :param record: A map of variable name-value pairs that represent an DCNL observation. DCNL :type predict_endpoint: string DCNL :param predict_endpoint: The endpoint to send the predict request to.'
def update_batch_prediction(self, batch_prediction_id, batch_prediction_name): DCNL 'Updates the `BatchPredictionName` of a `BatchPrediction`. DCNL You can use the GetBatchPrediction operation to view the DCNL contents of the updated data element. DCNL :type batch_prediction_id: string DCNL :param batch_prediction_id: The ID assigned to the `BatchPrediction` DCNL during creation. DCNL :type batch_prediction_name: string DCNL :param batch_prediction_name: A new user-supplied name or description DCNL of the `BatchPrediction`.'
def update_data_source(self, data_source_id, data_source_name): DCNL 'Updates the `DataSourceName` of a `DataSource`. DCNL You can use the GetDataSource operation to view the contents DCNL of the updated data element. DCNL :type data_source_id: string DCNL :param data_source_id: The ID assigned to the `DataSource` during DCNL creation. DCNL :type data_source_name: string DCNL :param data_source_name: A new user-supplied name or description of the DCNL `DataSource` that will replace the current description.'
def update_evaluation(self, evaluation_id, evaluation_name): DCNL 'Updates the `EvaluationName` of an `Evaluation`. DCNL You can use the GetEvaluation operation to view the contents DCNL of the updated data element. DCNL :type evaluation_id: string DCNL :param evaluation_id: The ID assigned to the `Evaluation` during DCNL creation. DCNL :type evaluation_name: string DCNL :param evaluation_name: A new user-supplied name or description of the DCNL `Evaluation` that will replace the current content.'
def update_ml_model(self, ml_model_id, ml_model_name=None, score_threshold=None): DCNL 'Updates the `MLModelName` and the `ScoreThreshold` of an DCNL `MLModel`. DCNL You can use the GetMLModel operation to view the contents of DCNL the updated data element. DCNL :type ml_model_id: string DCNL :param ml_model_id: The ID assigned to the `MLModel` during creation. DCNL :type ml_model_name: string DCNL :param ml_model_name: A user-supplied name or description of the DCNL `MLModel`. DCNL :type score_threshold: float DCNL :param score_threshold: The `ScoreThreshold` used in binary DCNL classification `MLModel` that marks the boundary between a positive DCNL prediction and a negative prediction. DCNL Output values greater than or equal to the `ScoreThreshold` receive a DCNL positive result from the `MLModel`, such as `True`. Output values DCNL less than the `ScoreThreshold` receive a negative response from the DCNL `MLModel`, such as `False`.'
def create_alias(self, alias_name, target_key_id): DCNL 'Creates a display name for a customer master key. An alias can DCNL be used to identify a key and should be unique. The console DCNL enforces a one-to-one mapping between the alias and a key. An DCNL alias name can contain only alphanumeric characters, forward DCNL slashes (/), underscores (_), and dashes (-). An alias must DCNL start with the word "alias" followed by a forward slash DCNL (alias/). An alias that begins with "aws" after the forward DCNL slash (alias/aws...) is reserved by Amazon Web Services (AWS). DCNL :type alias_name: string DCNL :param alias_name: String that contains the display name. Aliases that DCNL begin with AWS are reserved. DCNL :type target_key_id: string DCNL :param target_key_id: An identifier of the key for which you are DCNL creating the alias. This value cannot be another alias.'
def create_grant(self, key_id, grantee_principal, retiring_principal=None, operations=None, constraints=None, grant_tokens=None): DCNL 'Adds a grant to a key to specify who can access the key and DCNL under what conditions. Grants are alternate permission DCNL mechanisms to key policies. If absent, access to the key is DCNL evaluated based on IAM policies attached to the user. By DCNL default, grants do not expire. Grants can be listed, retired, DCNL or revoked as indicated by the following APIs. Typically, when DCNL you are finished using a grant, you retire it. When you want DCNL to end a grant immediately, revoke it. For more information DCNL about grants, see `Grants`_. DCNL #. ListGrants DCNL #. RetireGrant DCNL #. RevokeGrant DCNL :type key_id: string DCNL :param key_id: A unique key identifier for a customer master key. This DCNL value can be a globally unique identifier, an ARN, or an alias. DCNL :type grantee_principal: string DCNL :param grantee_principal: Principal given permission by the grant to DCNL use the key identified by the `keyId` parameter. DCNL :type retiring_principal: string DCNL :param retiring_principal: Principal given permission to retire the DCNL grant. For more information, see RetireGrant. DCNL :type operations: list DCNL :param operations: List of operations permitted by the grant. This can DCNL be any combination of one or more of the following values: DCNL #. Decrypt DCNL #. Encrypt DCNL #. GenerateDataKey DCNL #. GenerateDataKeyWithoutPlaintext DCNL #. ReEncryptFrom DCNL #. ReEncryptTo DCNL #. CreateGrant DCNL :type constraints: dict DCNL :param constraints: Specifies the conditions under which the actions DCNL specified by the `Operations` parameter are allowed. DCNL :type grant_tokens: list DCNL :param grant_tokens: List of grant tokens.'
def create_key(self, policy=None, description=None, key_usage=None): DCNL 'Creates a customer master key. Customer master keys can be DCNL used to encrypt small amounts of data (less than 4K) directly, DCNL but they are most commonly used to encrypt or envelope data DCNL keys that are then used to encrypt customer data. For more DCNL information about data keys, see GenerateDataKey and DCNL GenerateDataKeyWithoutPlaintext. DCNL :type policy: string DCNL :param policy: Policy to be attached to the key. This is required and DCNL delegates back to the account. The key is the root of trust. DCNL :type description: string DCNL :param description: Description of the key. We recommend that you DCNL choose a description that helps your customer decide whether the DCNL key is appropriate for a task. DCNL :type key_usage: string DCNL :param key_usage: Specifies the intended use of the key. Currently this DCNL defaults to ENCRYPT/DECRYPT, and only symmetric encryption and DCNL decryption are supported.'
def decrypt(self, ciphertext_blob, encryption_context=None, grant_tokens=None): DCNL 'Decrypts ciphertext. Ciphertext is plaintext that has been DCNL previously encrypted by using the Encrypt function. DCNL :type ciphertext_blob: blob DCNL :param ciphertext_blob: Ciphertext including metadata. DCNL :type encryption_context: map DCNL :param encryption_context: The encryption context. If this was DCNL specified in the Encrypt function, it must be specified here or the DCNL decryption operation will fail. For more information, see DCNL `Encryption Context`_. DCNL :type grant_tokens: list DCNL :param grant_tokens: A list of grant tokens that represent grants which DCNL can be used to provide long term permissions to perform decryption.'
def delete_alias(self, alias_name): DCNL 'Deletes the specified alias. DCNL :type alias_name: string DCNL :param alias_name: The alias to be deleted.'
def describe_key(self, key_id): DCNL 'Provides detailed information about the specified customer DCNL master key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master key to be DCNL described. This can be an ARN, an alias, or a globally unique DCNL identifier.'
def disable_key(self, key_id): DCNL 'Marks a key as disabled, thereby preventing its use. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master key to be DCNL disabled. This can be an ARN, an alias, or a globally unique DCNL identifier.'
def disable_key_rotation(self, key_id): DCNL 'Disables rotation of the specified key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master key for which DCNL rotation is to be disabled. This can be an ARN, an alias, or a DCNL globally unique identifier.'
def enable_key(self, key_id): DCNL 'Marks a key as enabled, thereby permitting its use. You can DCNL have up to 25 enabled keys at one time. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master key to be DCNL enabled. This can be an ARN, an alias, or a globally unique DCNL identifier.'
def enable_key_rotation(self, key_id): DCNL 'Enables rotation of the specified customer master key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master key for which DCNL rotation is to be enabled. This can be an ARN, an alias, or a DCNL globally unique identifier.'
def encrypt(self, key_id, plaintext, encryption_context=None, grant_tokens=None): DCNL 'Encrypts plaintext into ciphertext by using a customer master DCNL key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the customer master. This can be an DCNL ARN, an alias, or the Key ID. DCNL :type plaintext: blob DCNL :param plaintext: Data to be encrypted. DCNL :type encryption_context: map DCNL :param encryption_context: Name:value pair that specifies the DCNL encryption context to be used for authenticated encryption. For DCNL more information, see `Authenticated Encryption`_. DCNL :type grant_tokens: list DCNL :param grant_tokens: A list of grant tokens that represent grants which DCNL can be used to provide long term permissions to perform encryption.'
def generate_data_key(self, key_id, encryption_context=None, number_of_bytes=None, key_spec=None, grant_tokens=None): DCNL 'Generates a secure data key. Data keys are used to encrypt and DCNL decrypt data. They are wrapped by customer master keys. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type encryption_context: map DCNL :param encryption_context: Name/value pair that contains additional DCNL data to be authenticated during the encryption and decryption DCNL processes that use the key. This value is logged by AWS CloudTrail DCNL to provide context around the data encrypted by the key. DCNL :type number_of_bytes: integer DCNL :param number_of_bytes: Integer that contains the number of bytes to DCNL generate. Common values are 128, 256, 512, 1024 and so on. 1024 is DCNL the current limit. DCNL :type key_spec: string DCNL :param key_spec: Value that identifies the encryption algorithm and key DCNL size to generate a data key for. Currently this can be AES_128 or DCNL AES_256. DCNL :type grant_tokens: list DCNL :param grant_tokens: A list of grant tokens that represent grants which DCNL can be used to provide long term permissions to generate a key.'
def generate_data_key_without_plaintext(self, key_id, encryption_context=None, key_spec=None, number_of_bytes=None, grant_tokens=None): DCNL 'Returns a key wrapped by a customer master key without the DCNL plaintext copy of that key. To retrieve the plaintext, see DCNL GenerateDataKey. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type encryption_context: map DCNL :param encryption_context: Name:value pair that contains additional DCNL data to be authenticated during the encryption and decryption DCNL processes. DCNL :type key_spec: string DCNL :param key_spec: Value that identifies the encryption algorithm and key DCNL size. Currently this can be AES_128 or AES_256. DCNL :type number_of_bytes: integer DCNL :param number_of_bytes: Integer that contains the number of bytes to DCNL generate. Common values are 128, 256, 512, 1024 and so on. DCNL :type grant_tokens: list DCNL :param grant_tokens: A list of grant tokens that represent grants which DCNL can be used to provide long term permissions to generate a key.'
def generate_random(self, number_of_bytes=None): DCNL 'Generates an unpredictable byte string. DCNL :type number_of_bytes: integer DCNL :param number_of_bytes: Integer that contains the number of bytes to DCNL generate. Common values are 128, 256, 512, 1024 and so on. The DCNL current limit is 1024 bytes.'
def get_key_policy(self, key_id, policy_name): DCNL 'Retrieves a policy attached to the specified key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type policy_name: string DCNL :param policy_name: String that contains the name of the policy. DCNL Currently, this must be "default". Policy names can be discovered DCNL by calling ListKeyPolicies.'
def get_key_rotation_status(self, key_id): DCNL 'Retrieves a Boolean value that indicates whether key rotation DCNL is enabled for the specified key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier.'
def list_aliases(self, limit=None, marker=None): DCNL 'Lists all of the key aliases in the account. DCNL :type limit: integer DCNL :param limit: Specify this parameter when paginating results to DCNL indicate the maximum number of aliases you want in each response. DCNL If there are additional aliases beyond the maximum you specify, the DCNL `Truncated` response element will be set to `true.` DCNL :type marker: string DCNL :param marker: Use this parameter when paginating results, and only in DCNL a subsequent request after you\'ve received a response where the DCNL results are truncated. Set it to the value of the `NextMarker` DCNL element in the response you just received.'
def list_grants(self, key_id, limit=None, marker=None): DCNL 'List the grants for a specified key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type limit: integer DCNL :param limit: Specify this parameter only when paginating results to DCNL indicate the maximum number of grants you want listed in the DCNL response. If there are additional grants beyond the maximum you DCNL specify, the `Truncated` response element will be set to `true.` DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response where DCNL the results are truncated. Set it to the value of the `NextMarker` DCNL in the response you just received.'
def list_key_policies(self, key_id, limit=None, marker=None): DCNL 'Retrieves a list of policies attached to a key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type limit: integer DCNL :param limit: Specify this parameter only when paginating results to DCNL indicate the maximum number of policies you want listed in the DCNL response. If there are additional policies beyond the maximum you DCNL specify, the `Truncated` response element will be set to `true.` DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response where DCNL the results are truncated. Set it to the value of the `NextMarker` DCNL in the response you just received.'
def list_keys(self, limit=None, marker=None): DCNL 'Lists the customer master keys. DCNL :type limit: integer DCNL :param limit: Specify this parameter only when paginating results to DCNL indicate the maximum number of keys you want listed in the DCNL response. If there are additional keys beyond the maximum you DCNL specify, the `Truncated` response element will be set to `true.` DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response where DCNL the results are truncated. Set it to the value of the `NextMarker` DCNL in the response you just received.'
def put_key_policy(self, key_id, policy_name, policy): DCNL 'Attaches a policy to the specified key. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key. This can be an ARN, an DCNL alias, or a globally unique identifier. DCNL :type policy_name: string DCNL :param policy_name: Name of the policy to be attached. Currently, the DCNL only supported name is "default". DCNL :type policy: string DCNL :param policy: The policy, in JSON format, to be attached to the key.'
def re_encrypt(self, ciphertext_blob, destination_key_id, source_encryption_context=None, destination_encryption_context=None, grant_tokens=None): DCNL 'Encrypts data on the server side with a new customer master DCNL key without exposing the plaintext of the data on the client DCNL side. The data is first decrypted and then encrypted. This DCNL operation can also be used to change the encryption context of DCNL a ciphertext. DCNL :type ciphertext_blob: blob DCNL :param ciphertext_blob: Ciphertext of the data to re-encrypt. DCNL :type source_encryption_context: map DCNL :param source_encryption_context: Encryption context used to encrypt DCNL and decrypt the data specified in the `CiphertextBlob` parameter. DCNL :type destination_key_id: string DCNL :param destination_key_id: Key identifier of the key used to re-encrypt DCNL the data. DCNL :type destination_encryption_context: map DCNL :param destination_encryption_context: Encryption context to be used DCNL when the data is re-encrypted. DCNL :type grant_tokens: list DCNL :param grant_tokens: Grant tokens that identify the grants that have DCNL permissions for the encryption and decryption process.'
def retire_grant(self, grant_token): DCNL 'Retires a grant. You can retire a grant when you\'re done using DCNL it to clean up. You should revoke a grant when you intend to DCNL actively deny operations that depend on it. DCNL :type grant_token: string DCNL :param grant_token: Token that identifies the grant to be retired.'
def revoke_grant(self, key_id, grant_id): DCNL 'Revokes a grant. You can revoke a grant to actively deny DCNL operations that depend on it. DCNL :type key_id: string DCNL :param key_id: Unique identifier of the key associated with the grant. DCNL :type grant_id: string DCNL :param grant_id: Identifier of the grant to be revoked.'
def update_key_description(self, key_id, description): DCNL ':type key_id: string DCNL :param key_id: DCNL :type description: string DCNL :param description:'
def delete_dataset(self, identity_pool_id, identity_id, dataset_name): DCNL 'Deletes the specific dataset. The dataset will be deleted DCNL permanently, and the action can\'t be undone. Datasets that DCNL this dataset was merged with will no longer report the merge. DCNL Any consequent operation on this dataset will result in a DCNL ResourceNotFoundException. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type dataset_name: string DCNL :param dataset_name: A string of up to 128 characters. Allowed DCNL characters are a-z, A-Z, 0-9, \'_\' (underscore), \'-\' (dash), and \'.\' DCNL (dot).'
def describe_dataset(self, identity_pool_id, identity_id, dataset_name): DCNL 'Gets metadata about a dataset by identity and dataset name. DCNL The credentials used to make this API call need to have access DCNL to the identity data. With Amazon Cognito Sync, each identity DCNL has access only to its own data. You should use Amazon Cognito DCNL Identity service to retrieve the credentials necessary to make DCNL this API call. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type dataset_name: string DCNL :param dataset_name: A string of up to 128 characters. Allowed DCNL characters are a-z, A-Z, 0-9, \'_\' (underscore), \'-\' (dash), and \'.\' DCNL (dot).'
def describe_identity_pool_usage(self, identity_pool_id): DCNL 'Gets usage details (for example, data storage) about a DCNL particular identity pool. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region.'
def describe_identity_usage(self, identity_pool_id, identity_id): DCNL 'Gets usage information for an identity, including number of DCNL datasets and data usage. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region.'
def get_identity_pool_configuration(self, identity_pool_id): DCNL 'Gets the configuration settings of an identity pool. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. This is the ID of the pool for which to return a DCNL configuration.'
def list_datasets(self, identity_pool_id, identity_id, next_token=None, max_results=None): DCNL 'Lists datasets for an identity. The credentials used to make DCNL this API call need to have access to the identity data. With DCNL Amazon Cognito Sync, each identity has access only to its own DCNL data. You should use Amazon Cognito Identity service to DCNL retrieve the credentials necessary to make this API call. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type next_token: string DCNL :param next_token: A pagination token for obtaining the next page of DCNL results. DCNL :type max_results: integer DCNL :param max_results: The maximum number of results to be returned.'
def list_identity_pool_usage(self, next_token=None, max_results=None): DCNL 'Gets a list of identity pools registered with Cognito. DCNL :type next_token: string DCNL :param next_token: A pagination token for obtaining the next page of DCNL results. DCNL :type max_results: integer DCNL :param max_results: The maximum number of results to be returned.'
def list_records(self, identity_pool_id, identity_id, dataset_name, last_sync_count=None, next_token=None, max_results=None, sync_session_token=None): DCNL 'Gets paginated records, optionally changed after a particular DCNL sync count for a dataset and identity. The credentials used to DCNL make this API call need to have access to the identity data. DCNL With Amazon Cognito Sync, each identity has access only to its DCNL own data. You should use Amazon Cognito Identity service to DCNL retrieve the credentials necessary to make this API call. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type dataset_name: string DCNL :param dataset_name: A string of up to 128 characters. Allowed DCNL characters are a-z, A-Z, 0-9, \'_\' (underscore), \'-\' (dash), and \'.\' DCNL (dot). DCNL :type last_sync_count: long DCNL :param last_sync_count: The last server sync count for this record. DCNL :type next_token: string DCNL :param next_token: A pagination token for obtaining the next page of DCNL results. DCNL :type max_results: integer DCNL :param max_results: The maximum number of results to be returned. DCNL :type sync_session_token: string DCNL :param sync_session_token: A token containing a session ID, identity DCNL ID, and expiration.'
def register_device(self, identity_pool_id, identity_id, platform, token): DCNL 'Registers a device to receive push sync notifications. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. Here, the ID of the pool that the identity belongs to. DCNL :type identity_id: string DCNL :param identity_id: The unique ID for this identity. DCNL :type platform: string DCNL :param platform: The SNS platform type (e.g. GCM, SDM, APNS, DCNL APNS_SANDBOX). DCNL :type token: string DCNL :param token: The push token.'
def set_identity_pool_configuration(self, identity_pool_id, push_sync=None): DCNL 'Sets the necessary configuration for push sync. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. This is the ID of the pool to modify. DCNL :type push_sync: dict DCNL :param push_sync: Configuration options to be applied to the identity DCNL pool.'
def subscribe_to_dataset(self, identity_pool_id, identity_id, dataset_name, device_id): DCNL 'Subscribes to receive notifications when a dataset is modified DCNL by another device. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. The ID of the pool to which the identity belongs. DCNL :type identity_id: string DCNL :param identity_id: Unique ID for this identity. DCNL :type dataset_name: string DCNL :param dataset_name: The name of the dataset to subcribe to. DCNL :type device_id: string DCNL :param device_id: The unique ID generated for this device by Cognito.'
def unsubscribe_from_dataset(self, identity_pool_id, identity_id, dataset_name, device_id): DCNL 'Unsubscribe from receiving notifications when a dataset is DCNL modified by another device. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. The ID of the pool to which this identity belongs. DCNL :type identity_id: string DCNL :param identity_id: Unique ID for this identity. DCNL :type dataset_name: string DCNL :param dataset_name: The name of the dataset from which to unsubcribe. DCNL :type device_id: string DCNL :param device_id: The unique ID generated for this device by Cognito.'
def update_records(self, identity_pool_id, identity_id, dataset_name, sync_session_token, device_id=None, record_patches=None, client_context=None): DCNL 'Posts updates to records and add and delete records for a DCNL dataset and user. The credentials used to make this API call DCNL need to have access to the identity data. With Amazon Cognito DCNL Sync, each identity has access only to its own data. You DCNL should use Amazon Cognito Identity service to retrieve the DCNL credentials necessary to make this API call. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type identity_id: string DCNL :param identity_id: A name-spaced GUID (for example, us- DCNL east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon DCNL Cognito. GUID generation is unique within a region. DCNL :type dataset_name: string DCNL :param dataset_name: A string of up to 128 characters. Allowed DCNL characters are a-z, A-Z, 0-9, \'_\' (underscore), \'-\' (dash), and \'.\' DCNL (dot). DCNL :type device_id: string DCNL :param device_id: The unique ID generated for this device by Cognito. DCNL :type record_patches: list DCNL :param record_patches: A list of patch operations. DCNL :type sync_session_token: string DCNL :param sync_session_token: The SyncSessionToken returned by a previous DCNL call to ListRecords for this dataset and identity. DCNL :type client_context: string DCNL :param client_context: Intended to supply a device ID that will DCNL populate the `lastModifiedBy` field referenced in other methods. DCNL The `ClientContext` field is not yet implemented.'
def create_identity_pool(self, identity_pool_name, allow_unauthenticated_identities, supported_login_providers=None, developer_provider_name=None, open_id_connect_provider_ar_ns=None): DCNL 'Creates a new identity pool. The identity pool is a store of DCNL user identity information that is specific to your AWS DCNL account. The limit on identity pools is 60 per account. DCNL :type identity_pool_name: string DCNL :param identity_pool_name: A string that you provide. DCNL :type allow_unauthenticated_identities: boolean DCNL :param allow_unauthenticated_identities: TRUE if the identity pool DCNL supports unauthenticated logins. DCNL :type supported_login_providers: map DCNL :param supported_login_providers: Optional key:value pairs mapping DCNL provider names to provider app IDs. DCNL :type developer_provider_name: string DCNL :param developer_provider_name: The "domain" by which Cognito will DCNL refer to your users. This name acts as a placeholder that allows DCNL your backend and the Cognito service to communicate about the DCNL developer provider. For the `DeveloperProviderName`, you can use DCNL letters as well as period ( `.`), underscore ( `_`), and dash ( DCNL Once you have set a developer provider name, you cannot change it. DCNL Please take care in setting this parameter. DCNL :type open_id_connect_provider_ar_ns: list DCNL :param open_id_connect_provider_ar_ns:'
def delete_identity_pool(self, identity_pool_id): DCNL 'Deletes a user pool. Once a pool is deleted, users will not be DCNL able to authenticate with the pool. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID.'
def describe_identity_pool(self, identity_pool_id): DCNL 'Gets details about a particular identity pool, including the DCNL pool name, ID description, creation date, and current number DCNL of users. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID.'
def get_id(self, account_id, identity_pool_id, logins=None): DCNL 'Generates (or retrieves) a Cognito ID. Supplying multiple DCNL logins will create an implicit linked account. DCNL :type account_id: string DCNL :param account_id: A standard AWS account ID (9+ digits). DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type logins: map DCNL :param logins: A set of optional name-value pairs that map provider DCNL names to provider tokens. DCNL The available provider names for `Logins` are as follows: DCNL + Facebook: `graph.facebook.com` DCNL + Google: `accounts.google.com` DCNL + Amazon: `www.amazon.com`'
def get_open_id_token(self, identity_id, logins=None): DCNL 'Gets an OpenID token, using a known Cognito ID. This known DCNL Cognito ID is returned by GetId. You can optionally add DCNL additional logins for the identity. Supplying multiple logins DCNL creates an implicit link. DCNL The OpenId token is valid for 15 minutes. DCNL :type identity_id: string DCNL :param identity_id: A unique identifier in the format REGION:GUID. DCNL :type logins: map DCNL :param logins: A set of optional name-value pairs that map provider DCNL names to provider tokens.'
def get_open_id_token_for_developer_identity(self, identity_pool_id, logins, identity_id=None, token_duration=None): DCNL 'Registers (or retrieves) a Cognito `IdentityId` and an OpenID DCNL Connect token for a user authenticated by your backend DCNL authentication process. Supplying multiple logins will create DCNL an implicit linked account. You can only specify one developer DCNL provider as part of the `Logins` map, which is linked to the DCNL identity pool. The developer provider is the "domain" by which DCNL Cognito will refer to your users. DCNL You can use `GetOpenIdTokenForDeveloperIdentity` to create a DCNL new identity and to link new logins (that is, user credentials DCNL issued by a public provider or developer provider) to an DCNL existing identity. When you want to create a new identity, the DCNL `IdentityId` should be null. When you want to associate a new DCNL login with an existing authenticated/unauthenticated identity, DCNL you can do so by providing the existing `IdentityId`. This API DCNL will create the identity in the specified `IdentityPoolId`. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type identity_id: string DCNL :param identity_id: A unique identifier in the format REGION:GUID. DCNL :type logins: map DCNL :param logins: A set of optional name-value pairs that map provider DCNL names to provider tokens. Each name-value pair represents a user DCNL from a public provider or developer provider. If the user is from a DCNL developer provider, the name-value pair will follow the syntax DCNL `"developer_provider_name": "developer_user_identifier"`. The DCNL developer provider is the "domain" by which Cognito will refer to DCNL your users; you provided this domain while creating/updating the DCNL identity pool. The developer user identifier is an identifier from DCNL your backend that uniquely identifies a user. When you create an DCNL identity pool, you can specify the supported logins. DCNL :type token_duration: long DCNL :param token_duration: The expiration time of the token, in seconds. DCNL You can specify a custom expiration time for the token so that you DCNL can cache it. If you don\'t provide an expiration time, the token is DCNL valid for 15 minutes. You can exchange the token with Amazon STS DCNL for temporary AWS credentials, which are valid for a maximum of one DCNL hour. The maximum token duration you can set is 24 hours. You DCNL should take care in setting the expiration time for a token, as DCNL there are significant security implications: an attacker could use DCNL a leaked token to access your AWS resources for the token\'s DCNL duration.'
def list_identities(self, identity_pool_id, max_results, next_token=None): DCNL 'Lists the identities in a pool. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type max_results: integer DCNL :param max_results: The maximum number of identities to return. DCNL :type next_token: string DCNL :param next_token: A pagination token.'
def list_identity_pools(self, max_results, next_token=None): DCNL 'Lists all of the Cognito identity pools registered for your DCNL account. DCNL :type max_results: integer DCNL :param max_results: The maximum number of identities to return. DCNL :type next_token: string DCNL :param next_token: A pagination token.'
def lookup_developer_identity(self, identity_pool_id, identity_id=None, developer_user_identifier=None, max_results=None, next_token=None): DCNL 'Retrieves the `IdentityID` associated with a DCNL `DeveloperUserIdentifier` or the list of DCNL `DeveloperUserIdentifier`s associated with an `IdentityId` for DCNL an existing identity. Either `IdentityID` or DCNL `DeveloperUserIdentifier` must not be null. If you supply only DCNL one of these values, the other value will be searched in the DCNL database and returned as a part of the response. If you supply DCNL both, `DeveloperUserIdentifier` will be matched against DCNL `IdentityID`. If the values are verified against the database, DCNL the response returns both values and is the same as the DCNL request. Otherwise a `ResourceConflictException` is thrown. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type identity_id: string DCNL :param identity_id: A unique identifier in the format REGION:GUID. DCNL :type developer_user_identifier: string DCNL :param developer_user_identifier: A unique ID used by your backend DCNL authentication process to identify a user. Typically, a developer DCNL identity provider would issue many developer user identifiers, in DCNL keeping with the number of users. DCNL :type max_results: integer DCNL :param max_results: The maximum number of identities to return. DCNL :type next_token: string DCNL :param next_token: A pagination token. The first call you make will DCNL have `NextToken` set to null. After that the service will return DCNL `NextToken` values as needed. For example, let\'s say you make a DCNL request with `MaxResults` set to 10, and there are 20 matches in DCNL the database. The service will return a pagination token as a part DCNL of the response. This token can be used to call the API again and DCNL get results starting from the 11th match.'
def merge_developer_identities(self, source_user_identifier, destination_user_identifier, developer_provider_name, identity_pool_id): DCNL 'Merges two users having different `IdentityId`s, existing in DCNL the same identity pool, and identified by the same developer DCNL provider. You can use this action to request that discrete DCNL users be merged and identified as a single user in the Cognito DCNL environment. Cognito associates the given source user ( DCNL `SourceUserIdentifier`) with the `IdentityId` of the DCNL `DestinationUserIdentifier`. Only developer-authenticated DCNL users can be merged. If the users to be merged are associated DCNL with the same public provider, but as two different users, an DCNL exception will be thrown. DCNL :type source_user_identifier: string DCNL :param source_user_identifier: User identifier for the source user. The DCNL value should be a `DeveloperUserIdentifier`. DCNL :type destination_user_identifier: string DCNL :param destination_user_identifier: User identifier for the destination DCNL user. The value should be a `DeveloperUserIdentifier`. DCNL :type developer_provider_name: string DCNL :param developer_provider_name: The "domain" by which Cognito will DCNL refer to your users. This is a (pseudo) domain name that you DCNL provide while creating an identity pool. This name acts as a DCNL placeholder that allows your backend and the Cognito service to DCNL communicate about the developer provider. For the DCNL `DeveloperProviderName`, you can use letters as well as period (.), DCNL underscore (_), and dash (-). DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID.'
def unlink_developer_identity(self, identity_id, identity_pool_id, developer_provider_name, developer_user_identifier): DCNL 'Unlinks a `DeveloperUserIdentifier` from an existing identity. DCNL Unlinked developer users will be considered new identities DCNL next time they are seen. If, for a given Cognito identity, you DCNL remove all federated identities as well as the developer user DCNL identifier, the Cognito identity becomes inaccessible. DCNL :type identity_id: string DCNL :param identity_id: A unique identifier in the format REGION:GUID. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type developer_provider_name: string DCNL :param developer_provider_name: The "domain" by which Cognito will DCNL refer to your users. DCNL :type developer_user_identifier: string DCNL :param developer_user_identifier: A unique ID used by your backend DCNL authentication process to identify a user.'
def unlink_identity(self, identity_id, logins, logins_to_remove): DCNL 'Unlinks a federated identity from an existing account. DCNL Unlinked logins will be considered new identities next time DCNL they are seen. Removing the last linked login will make this DCNL identity inaccessible. DCNL :type identity_id: string DCNL :param identity_id: A unique identifier in the format REGION:GUID. DCNL :type logins: map DCNL :param logins: A set of optional name-value pairs that map provider DCNL names to provider tokens. DCNL :type logins_to_remove: list DCNL :param logins_to_remove: Provider names to unlink from this identity.'
def update_identity_pool(self, identity_pool_id, identity_pool_name, allow_unauthenticated_identities, supported_login_providers=None, developer_provider_name=None, open_id_connect_provider_ar_ns=None): DCNL 'Updates a user pool. DCNL :type identity_pool_id: string DCNL :param identity_pool_id: An identity pool ID in the format REGION:GUID. DCNL :type identity_pool_name: string DCNL :param identity_pool_name: A string that you provide. DCNL :type allow_unauthenticated_identities: boolean DCNL :param allow_unauthenticated_identities: TRUE if the identity pool DCNL supports unauthenticated logins. DCNL :type supported_login_providers: map DCNL :param supported_login_providers: Optional key:value pairs mapping DCNL provider names to provider app IDs. DCNL :type developer_provider_name: string DCNL :param developer_provider_name: The "domain" by which Cognito will DCNL refer to your users. DCNL :type open_id_connect_provider_ar_ns: list DCNL :param open_id_connect_provider_ar_ns:'
def connect(self, **kw_params): DCNL 'Connect to this Region\'s endpoint. Returns an connection DCNL object pointing to the endpoint associated with this region. DCNL You may pass any of the arguments accepted by the connection DCNL class\'s constructor as keyword arguments and they will be DCNL passed along to the connection object. DCNL :rtype: Connection object DCNL :return: The connection to this regions endpoint'
def get_response(self, action, params, path='/', parent=None, verb='POST', list_marker='Set'): DCNL 'Utility method to handle calls to IAM and parsing of responses.'
def get_all_groups(self, path_prefix='/', marker=None, max_items=None): DCNL 'List the groups that have the specified path prefix. DCNL :type path_prefix: string DCNL :param path_prefix: If provided, only groups whose paths match DCNL the provided prefix will be returned. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def get_group(self, group_name, marker=None, max_items=None): DCNL 'Return a list of users that are in the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the group whose information should DCNL be returned. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def create_group(self, group_name, path='/'): DCNL 'Create a group. DCNL :type group_name: string DCNL :param group_name: The name of the new group DCNL :type path: string DCNL :param path: The path to the group (Optional).  Defaults to /.'
def delete_group(self, group_name): DCNL 'Delete a group. The group must not contain any Users or DCNL have any attached policies DCNL :type group_name: string DCNL :param group_name: The name of the group to delete.'
def update_group(self, group_name, new_group_name=None, new_path=None): DCNL 'Updates name and/or path of the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the new group DCNL :type new_group_name: string DCNL :param new_group_name: If provided, the name of the group will be DCNL changed to this name. DCNL :type new_path: string DCNL :param new_path: If provided, the path of the group will be DCNL changed to this path.'
def add_user_to_group(self, group_name, user_name): DCNL 'Add a user to a group DCNL :type group_name: string DCNL :param group_name: The name of the group DCNL :type user_name: string DCNL :param user_name: The to be added to the group.'
def remove_user_from_group(self, group_name, user_name): DCNL 'Remove a user from a group. DCNL :type group_name: string DCNL :param group_name: The name of the group DCNL :type user_name: string DCNL :param user_name: The user to remove from the group.'
def put_group_policy(self, group_name, policy_name, policy_json): DCNL 'Adds or updates the specified policy document for the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the group the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to get. DCNL :type policy_json: string DCNL :param policy_json: The policy document.'
def get_all_group_policies(self, group_name, marker=None, max_items=None): DCNL 'List the names of the policies associated with the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the group the policy is associated with. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def get_group_policy(self, group_name, policy_name): DCNL 'Retrieves the specified policy document for the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the group the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to get.'
def delete_group_policy(self, group_name, policy_name): DCNL 'Deletes the specified policy document for the specified group. DCNL :type group_name: string DCNL :param group_name: The name of the group the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to delete.'
def get_all_users(self, path_prefix='/', marker=None, max_items=None): DCNL 'List the users that have the specified path prefix. DCNL :type path_prefix: string DCNL :param path_prefix: If provided, only users whose paths match DCNL the provided prefix will be returned. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def create_user(self, user_name, path='/'): DCNL 'Create a user. DCNL :type user_name: string DCNL :param user_name: The name of the new user DCNL :type path: string DCNL :param path: The path in which the user will be created. DCNL Defaults to /.'
def delete_user(self, user_name): DCNL 'Delete a user including the user\'s path, GUID and ARN. DCNL If the user_name is not specified, the user_name is determined DCNL implicitly based on the AWS Access Key ID used to sign the request. DCNL :type user_name: string DCNL :param user_name: The name of the user to delete.'
def get_user(self, user_name=None): DCNL 'Retrieve information about the specified user. DCNL If the user_name is not specified, the user_name is determined DCNL implicitly based on the AWS Access Key ID used to sign the request. DCNL :type user_name: string DCNL :param user_name: The name of the user to retrieve. DCNL If not specified, defaults to user making request.'
def update_user(self, user_name, new_user_name=None, new_path=None): DCNL 'Updates name and/or path of the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user DCNL :type new_user_name: string DCNL :param new_user_name: If provided, the username of the user will be DCNL changed to this username. DCNL :type new_path: string DCNL :param new_path: If provided, the path of the user will be DCNL changed to this path.'
def get_all_user_policies(self, user_name, marker=None, max_items=None): DCNL 'List the names of the policies associated with the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user the policy is associated with. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def put_user_policy(self, user_name, policy_name, policy_json): DCNL 'Adds or updates the specified policy document for the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to get. DCNL :type policy_json: string DCNL :param policy_json: The policy document.'
def get_user_policy(self, user_name, policy_name): DCNL 'Retrieves the specified policy document for the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to get.'
def delete_user_policy(self, user_name, policy_name): DCNL 'Deletes the specified policy document for the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user the policy is associated with. DCNL :type policy_name: string DCNL :param policy_name: The policy document to delete.'
def get_groups_for_user(self, user_name, marker=None, max_items=None): DCNL 'List the groups that a specified user belongs to. DCNL :type user_name: string DCNL :param user_name: The name of the user to list groups for. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def get_all_access_keys(self, user_name, marker=None, max_items=None): DCNL 'Get all access keys associated with an account. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def create_access_key(self, user_name=None): DCNL 'Create a new AWS Secret Access Key and corresponding AWS Access Key ID DCNL for the specified user.  The default status for new keys is Active DCNL If the user_name is not specified, the user_name is determined DCNL implicitly based on the AWS Access Key ID used to sign the request. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def update_access_key(self, access_key_id, status, user_name=None): DCNL 'Changes the status of the specified access key from Active to Inactive DCNL or vice versa.  This action can be used to disable a user\'s key as DCNL part of a key rotation workflow. DCNL If the user_name is not specified, the user_name is determined DCNL implicitly based on the AWS Access Key ID used to sign the request. DCNL :type access_key_id: string DCNL :param access_key_id: The ID of the access key. DCNL :type status: string DCNL :param status: Either Active or Inactive. DCNL :type user_name: string DCNL :param user_name: The username of user (optional).'
def delete_access_key(self, access_key_id, user_name=None): DCNL 'Delete an access key associated with a user. DCNL If the user_name is not specified, it is determined implicitly based DCNL on the AWS Access Key ID used to sign the request. DCNL :type access_key_id: string DCNL :param access_key_id: The ID of the access key to be deleted. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def get_all_signing_certs(self, marker=None, max_items=None, user_name=None): DCNL 'Get all signing certificates associated with an account. DCNL If the user_name is not specified, it is determined implicitly based DCNL on the AWS Access Key ID used to sign the request. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def update_signing_cert(self, cert_id, status, user_name=None): DCNL 'Change the status of the specified signing certificate from DCNL Active to Inactive or vice versa. DCNL If the user_name is not specified, it is determined implicitly based DCNL on the AWS Access Key ID used to sign the request. DCNL :type cert_id: string DCNL :param cert_id: The ID of the signing certificate DCNL :type status: string DCNL :param status: Either Active or Inactive. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def upload_signing_cert(self, cert_body, user_name=None): DCNL 'Uploads an X.509 signing certificate and associates it with DCNL the specified user. DCNL If the user_name is not specified, it is determined implicitly based DCNL on the AWS Access Key ID used to sign the request. DCNL :type cert_body: string DCNL :param cert_body: The body of the signing certificate. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def delete_signing_cert(self, cert_id, user_name=None): DCNL 'Delete a signing certificate associated with a user. DCNL If the user_name is not specified, it is determined implicitly based DCNL on the AWS Access Key ID used to sign the request. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type cert_id: string DCNL :param cert_id: The ID of the certificate.'
def list_server_certs(self, path_prefix='/', marker=None, max_items=None): DCNL 'Lists the server certificates that have the specified path prefix. DCNL If none exist, the action returns an empty list. DCNL :type path_prefix: string DCNL :param path_prefix: If provided, only certificates whose paths match DCNL the provided prefix will be returned. DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def update_server_cert(self, cert_name, new_cert_name=None, new_path=None): DCNL 'Updates the name and/or the path of the specified server certificate. DCNL :type cert_name: string DCNL :param cert_name: The name of the server certificate that you want DCNL to update. DCNL :type new_cert_name: string DCNL :param new_cert_name: The new name for the server certificate. DCNL Include this only if you are updating the DCNL server certificate\'s name. DCNL :type new_path: string DCNL :param new_path: If provided, the path of the certificate will be DCNL changed to this path.'
def upload_server_cert(self, cert_name, cert_body, private_key, cert_chain=None, path=None): DCNL 'Uploads a server certificate entity for the AWS Account. DCNL The server certificate entity includes a public key certificate, DCNL a private key, and an optional certificate chain, which should DCNL all be PEM-encoded. DCNL :type cert_name: string DCNL :param cert_name: The name for the server certificate. Do not DCNL include the path in this value. DCNL :type cert_body: string DCNL :param cert_body: The contents of the public key certificate DCNL in PEM-encoded format. DCNL :type private_key: string DCNL :param private_key: The contents of the private key in DCNL PEM-encoded format. DCNL :type cert_chain: string DCNL :param cert_chain: The contents of the certificate chain. This DCNL is typically a concatenation of the PEM-encoded DCNL public key certificates of the chain. DCNL :type path: string DCNL :param path: The path for the server certificate.'
def get_server_certificate(self, cert_name): DCNL 'Retrieves information about the specified server certificate. DCNL :type cert_name: string DCNL :param cert_name: The name of the server certificate you want DCNL to retrieve information about.'
def delete_server_cert(self, cert_name): DCNL 'Delete the specified server certificate. DCNL :type cert_name: string DCNL :param cert_name: The name of the server certificate you want DCNL to delete.'
def get_all_mfa_devices(self, user_name, marker=None, max_items=None): DCNL 'Get all MFA devices associated with an account. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only DCNL in follow-up request after you\'ve received a response DCNL where the results are truncated.  Set this to the value of DCNL the Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results to indicate DCNL the maximum number of groups you want in the response.'
def enable_mfa_device(self, user_name, serial_number, auth_code_1, auth_code_2): DCNL 'Enables the specified MFA device and associates it with the DCNL specified user. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type serial_number: string DCNL :param serial_number: The serial number which uniquely identifies DCNL the MFA device. DCNL :type auth_code_1: string DCNL :param auth_code_1: An authentication code emitted by the device. DCNL :type auth_code_2: string DCNL :param auth_code_2: A subsequent authentication code emitted DCNL by the device.'
def deactivate_mfa_device(self, user_name, serial_number): DCNL 'Deactivates the specified MFA device and removes it from DCNL association with the user. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type serial_number: string DCNL :param serial_number: The serial number which uniquely identifies DCNL the MFA device.'
def resync_mfa_device(self, user_name, serial_number, auth_code_1, auth_code_2): DCNL 'Syncronizes the specified MFA device with the AWS servers. DCNL :type user_name: string DCNL :param user_name: The username of the user DCNL :type serial_number: string DCNL :param serial_number: The serial number which uniquely identifies DCNL the MFA device. DCNL :type auth_code_1: string DCNL :param auth_code_1: An authentication code emitted by the device. DCNL :type auth_code_2: string DCNL :param auth_code_2: A subsequent authentication code emitted DCNL by the device.'
def get_login_profiles(self, user_name): DCNL 'Retrieves the login profile for the specified user. DCNL :type user_name: string DCNL :param user_name: The username of the user'
def create_login_profile(self, user_name, password): DCNL 'Creates a login profile for the specified user, give the user the DCNL ability to access AWS services and the AWS Management Console. DCNL :type user_name: string DCNL :param user_name: The name of the user DCNL :type password: string DCNL :param password: The new password for the user'
def delete_login_profile(self, user_name): DCNL 'Deletes the login profile associated with the specified user. DCNL :type user_name: string DCNL :param user_name: The name of the user to delete.'
def update_login_profile(self, user_name, password): DCNL 'Resets the password associated with the user\'s login profile. DCNL :type user_name: string DCNL :param user_name: The name of the user DCNL :type password: string DCNL :param password: The new password for the user'
def create_account_alias(self, alias): DCNL 'Creates a new alias for the AWS account. DCNL For more information on account id aliases, please see DCNL http://goo.gl/ToB7G DCNL :type alias: string DCNL :param alias: The alias to attach to the account.'
def delete_account_alias(self, alias): DCNL 'Deletes an alias for the AWS account. DCNL For more information on account id aliases, please see DCNL http://goo.gl/ToB7G DCNL :type alias: string DCNL :param alias: The alias to remove from the account.'
def get_account_alias(self): DCNL 'Get the alias for the current account. DCNL This is referred to in the docs as list_account_aliases, DCNL but it seems you can only have one account alias currently. DCNL For more information on account id aliases, please see DCNL http://goo.gl/ToB7G'
def get_signin_url(self, service='ec2'): DCNL 'Get the URL where IAM users can use their login profile to sign in DCNL to this account\'s console. DCNL :type service: string DCNL :param service: Default service to go to in the console.'
def get_account_summary(self): DCNL 'Get the alias for the current account. DCNL This is referred to in the docs as list_account_aliases, DCNL but it seems you can only have one account alias currently. DCNL For more information on account id aliases, please see DCNL http://goo.gl/ToB7G'
def add_role_to_instance_profile(self, instance_profile_name, role_name): DCNL 'Adds the specified role to the specified instance profile. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: Name of the instance profile to update. DCNL :type role_name: string DCNL :param role_name: Name of the role to add.'
def create_instance_profile(self, instance_profile_name, path=None): DCNL 'Creates a new instance profile. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: Name of the instance profile to create. DCNL :type path: string DCNL :param path: The path to the instance profile.'
def create_role(self, role_name, assume_role_policy_document=None, path=None): DCNL 'Creates a new role for your AWS account. DCNL The policy grants permission to an EC2 instance to assume the role. DCNL The policy is URL-encoded according to RFC 3986. Currently, only EC2 DCNL instances can assume roles. DCNL :type role_name: string DCNL :param role_name: Name of the role to create. DCNL :type assume_role_policy_document: ``string`` or ``dict`` DCNL :param assume_role_policy_document: The policy that grants an entity DCNL permission to assume the role. DCNL :type path: string DCNL :param path: The path to the role.'
def delete_instance_profile(self, instance_profile_name): DCNL 'Deletes the specified instance profile. The instance profile must not DCNL have an associated role. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: Name of the instance profile to delete.'
def delete_role(self, role_name): DCNL 'Deletes the specified role. The role must not have any policies DCNL attached. DCNL :type role_name: string DCNL :param role_name: Name of the role to delete.'
def delete_role_policy(self, role_name, policy_name): DCNL 'Deletes the specified policy associated with the specified role. DCNL :type role_name: string DCNL :param role_name: Name of the role associated with the policy. DCNL :type policy_name: string DCNL :param policy_name: Name of the policy to delete.'
def get_instance_profile(self, instance_profile_name): DCNL 'Retrieves information about the specified instance profile, including DCNL the instance profile\'s path, GUID, ARN, and role. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: Name of the instance profile to get DCNL information about.'
def get_role(self, role_name): DCNL 'Retrieves information about the specified role, including the role\'s DCNL path, GUID, ARN, and the policy granting permission to EC2 to assume DCNL the role. DCNL :type role_name: string DCNL :param role_name: Name of the role associated with the policy.'
def get_role_policy(self, role_name, policy_name): DCNL 'Retrieves the specified policy document for the specified role. DCNL :type role_name: string DCNL :param role_name: Name of the role associated with the policy. DCNL :type policy_name: string DCNL :param policy_name: Name of the policy to get.'
def list_instance_profiles(self, path_prefix=None, marker=None, max_items=None): DCNL 'Lists the instance profiles that have the specified path prefix. If DCNL there are none, the action returns an empty list. DCNL :type path_prefix: string DCNL :param path_prefix: The path prefix for filtering the results. For DCNL example: /application_abc/component_xyz/, which would get all DCNL instance profiles whose path starts with DCNL /application_abc/component_xyz/. DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response DCNL where the results are truncated. Set it to the value of the DCNL Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this parameter only when paginating results to DCNL indicate the maximum number of user names you want in the response.'
def list_instance_profiles_for_role(self, role_name, marker=None, max_items=None): DCNL 'Lists the instance profiles that have the specified associated role. If DCNL there are none, the action returns an empty list. DCNL :type role_name: string DCNL :param role_name: The name of the role to list instance profiles for. DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response DCNL where the results are truncated. Set it to the value of the DCNL Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this parameter only when paginating results to DCNL indicate the maximum number of user names you want in the response.'
def list_role_policies(self, role_name, marker=None, max_items=None): DCNL 'Lists the names of the policies associated with the specified role. If DCNL there are none, the action returns an empty list. DCNL :type role_name: string DCNL :param role_name: The name of the role to list policies for. DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response DCNL where the results are truncated. Set it to the value of the DCNL marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this parameter only when paginating results to DCNL indicate the maximum number of user names you want in the response.'
def list_roles(self, path_prefix=None, marker=None, max_items=None): DCNL 'Lists the roles that have the specified path prefix. If there are none, DCNL the action returns an empty list. DCNL :type path_prefix: string DCNL :param path_prefix: The path prefix for filtering the results. DCNL :type marker: string DCNL :param marker: Use this parameter only when paginating results, and DCNL only in a subsequent request after you\'ve received a response DCNL where the results are truncated. Set it to the value of the DCNL marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this parameter only when paginating results to DCNL indicate the maximum number of user names you want in the response.'
def put_role_policy(self, role_name, policy_name, policy_document): DCNL 'Adds (or updates) a policy document associated with the specified role. DCNL :type role_name: string DCNL :param role_name: Name of the role to associate the policy with. DCNL :type policy_name: string DCNL :param policy_name: Name of the policy document. DCNL :type policy_document: string DCNL :param policy_document: The policy document.'
def remove_role_from_instance_profile(self, instance_profile_name, role_name): DCNL 'Removes the specified role from the specified instance profile. DCNL :type instance_profile_name: string DCNL :param instance_profile_name: Name of the instance profile to update. DCNL :type role_name: string DCNL :param role_name: Name of the role to remove.'
def update_assume_role_policy(self, role_name, policy_document): DCNL 'Updates the policy that grants an entity permission to assume a role. DCNL Currently, only an Amazon EC2 instance can assume a role. DCNL :type role_name: string DCNL :param role_name: Name of the role to update. DCNL :type policy_document: string DCNL :param policy_document: The policy that grants an entity permission to DCNL assume the role.'
def create_saml_provider(self, saml_metadata_document, name): DCNL 'Creates an IAM entity to describe an identity provider (IdP) DCNL that supports SAML 2.0. DCNL The SAML provider that you create with this operation can be DCNL used as a principal in a role\'s trust policy to establish a DCNL trust relationship between AWS and a SAML identity provider. DCNL You can create an IAM role that supports Web-based single DCNL sign-on (SSO) to the AWS Management Console or one that DCNL supports API access to AWS. DCNL When you create the SAML provider, you upload an a SAML DCNL metadata document that you get from your IdP and that includes DCNL the issuer\'s name, expiration information, and keys that can DCNL be used to validate the SAML authentication response DCNL (assertions) that are received from the IdP. You must generate DCNL the metadata document using the identity management software DCNL that is used as your organization\'s IdP. DCNL This operation requires `Signature Version 4`_. DCNL For more information, see `Giving Console Access Using SAML`_ DCNL and `Creating Temporary Security Credentials for SAML DCNL Federation`_ in the Using Temporary Credentials guide. DCNL :type saml_metadata_document: string DCNL :param saml_metadata_document: An XML document generated by an identity DCNL provider (IdP) that supports SAML 2.0. The document includes the DCNL issuer\'s name, expiration information, and keys that can be used to DCNL validate the SAML authentication response (assertions) that are DCNL received from the IdP. You must generate the metadata document DCNL using the identity management software that is used as your DCNL organization\'s IdP. DCNL For more information, see `Creating Temporary Security Credentials for DCNL SAML Federation`_ in the Using Temporary Security Credentials DCNL guide. DCNL :type name: string DCNL :param name: The name of the provider to create.'
def list_saml_providers(self): DCNL 'Lists the SAML providers in the account. DCNL This operation requires `Signature Version 4`_.'
def get_saml_provider(self, saml_provider_arn): DCNL 'Returns the SAML provider metadocument that was uploaded when DCNL the provider was created or updated. DCNL This operation requires `Signature Version 4`_. DCNL :type saml_provider_arn: string DCNL :param saml_provider_arn: The Amazon Resource Name (ARN) of the SAML DCNL provider to get information about.'
def update_saml_provider(self, saml_provider_arn, saml_metadata_document): DCNL 'Updates the metadata document for an existing SAML provider. DCNL This operation requires `Signature Version 4`_. DCNL :type saml_provider_arn: string DCNL :param saml_provider_arn: The Amazon Resource Name (ARN) of the SAML DCNL provider to update. DCNL :type saml_metadata_document: string DCNL :param saml_metadata_document: An XML document generated by an identity DCNL provider (IdP) that supports SAML 2.0. The document includes the DCNL issuer\'s name, expiration information, and keys that can be used to DCNL validate the SAML authentication response (assertions) that are DCNL received from the IdP. You must generate the metadata document DCNL using the identity management software that is used as your DCNL organization\'s IdP.'
def delete_saml_provider(self, saml_provider_arn): DCNL 'Deletes a SAML provider. DCNL Deleting the provider does not update any roles that reference DCNL the SAML provider as a principal in their trust policies. Any DCNL attempt to assume a role that references a SAML provider that DCNL has been deleted will fail. DCNL This operation requires `Signature Version 4`_. DCNL :type saml_provider_arn: string DCNL :param saml_provider_arn: The Amazon Resource Name (ARN) of the SAML DCNL provider to delete.'
def generate_credential_report(self): DCNL 'Generates a credential report for an account DCNL A new credential report can only be generated every 4 hours. If one DCNL hasn\'t been generated in the last 4 hours then get_credential_report DCNL will error when called'
def get_credential_report(self): DCNL 'Retrieves a credential report for an account DCNL A report must have been generated in the last 4 hours to succeed. DCNL The report is returned as a base64 encoded blob within the response.'
def create_virtual_mfa_device(self, path, device_name): DCNL 'Creates a new virtual MFA device for the AWS account. DCNL After creating the virtual MFA, use enable-mfa-device to DCNL attach the MFA device to an IAM user. DCNL :type path: string DCNL :param path: The path for the virtual MFA device. DCNL :type device_name: string DCNL :param device_name: The name of the virtual MFA device. DCNL Used with path to uniquely identify a virtual MFA device.'
def get_account_password_policy(self): DCNL 'Returns the password policy for the AWS account.'
def delete_account_password_policy(self): DCNL 'Delete the password policy currently set for the AWS account.'
def update_account_password_policy(self, allow_users_to_change_password=None, hard_expiry=None, max_password_age=None, minimum_password_length=None, password_reuse_prevention=None, require_lowercase_characters=None, require_numbers=None, require_symbols=None, require_uppercase_characters=None): DCNL 'Update the password policy for the AWS account. DCNL Notes: unset parameters will be reset to Amazon default settings! DCNL Most of the password policy settings are enforced the next time your users DCNL change their passwords. When you set minimum length and character type DCNL requirements, they are enforced the next time your users change their DCNL passwords - users are not forced to change their existing passwords, even DCNL if the pre-existing passwords do not adhere to the updated password DCNL policy. When you set a password expiration period, the expiration period DCNL is enforced immediately. DCNL :type allow_users_to_change_password: bool DCNL :param allow_users_to_change_password: Allows all IAM users in your account DCNL to use the AWS Management Console to change their own passwords. DCNL :type hard_expiry: bool DCNL :param hard_expiry: Prevents IAM users from setting a new password after DCNL their password has expired. DCNL :type max_password_age: int DCNL :param max_password_age: The number of days that an IAM user password is valid. DCNL :type minimum_password_length: int DCNL :param minimum_password_length: The minimum number of characters allowed in DCNL an IAM user password. DCNL :type password_reuse_prevention: int DCNL :param password_reuse_prevention: Specifies the number of previous passwords DCNL that IAM users are prevented from reusing. DCNL :type require_lowercase_characters: bool DCNL :param require_lowercase_characters: Specifies whether IAM user passwords DCNL must contain at least one lowercase character from the ISO basic Latin DCNL alphabet (``a`` to ``z``). DCNL :type require_numbers: bool DCNL :param require_numbers: Specifies whether IAM user passwords must contain at DCNL least one numeric character (``0`` to ``9``). DCNL :type require_symbols: bool DCNL :param require_symbols: Specifies whether IAM user passwords must contain at DCNL least one of the following non-alphanumeric characters: DCNL :type require_uppercase_characters: bool DCNL :param require_uppercase_characters: Specifies whether IAM user passwords DCNL must contain at least one uppercase character from the ISO basic Latin DCNL alphabet (``A`` to ``Z``).'
def create_policy(self, policy_name, policy_document, path='/', description=None): DCNL 'Create a policy. DCNL :type policy_name: string DCNL :param policy_name: The name of the new policy DCNL :type policy_document string DCNL :param policy_document: The document of the new policy DCNL :type path: string DCNL :param path: The path in which the policy will be created. DCNL Defaults to /. DCNL :type description: string DCNL :param path: A description of the new policy.'
def create_policy_version(self, policy_arn, policy_document, set_as_default=None): DCNL 'Create a policy version. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy DCNL :type policy_document string DCNL :param policy_document: The document of the new policy version DCNL :type set_as_default: bool DCNL :param set_as_default: Sets the policy version as default DCNL Defaults to None.'
def delete_policy(self, policy_arn): DCNL 'Delete a policy. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to delete'
def delete_policy_version(self, policy_arn, version_id): DCNL 'Delete a policy version. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to delete a version from DCNL :type version_id: string DCNL :param version_id: The id of the version to delete'
def get_policy(self, policy_arn): DCNL 'Get policy information. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to get information for'
def get_policy_version(self, policy_arn, version_id): DCNL 'Get policy information. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to get information for a DCNL specific version DCNL :type version_id: string DCNL :param version_id: The id of the version to get information for'
def list_policies(self, marker=None, max_items=None, only_attached=None, path_prefix=None, scope=None): DCNL 'List policies of account. DCNL :type marker: string DCNL :param marker: A marker used for pagination (received from previous DCNL accesses) DCNL :type max_items: int DCNL :param max_items: Send only max_items; allows paginations DCNL :type only_attached: bool DCNL :param only_attached: Send only policies attached to other resources DCNL :type path_prefix: string DCNL :param path_prefix: Send only items prefixed by this path DCNL :type scope: string DCNL :param scope: AWS|Local.  Choose between AWS policies or your own'
def list_policy_versions(self, policy_arn, marker=None, max_items=None): DCNL 'List policy versions. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to get versions of DCNL :type marker: string DCNL :param marker: A marker used for pagination (received from previous DCNL accesses) DCNL :type max_items: int DCNL :param max_items: Send only max_items; allows paginations'
def set_default_policy_version(self, policy_arn, version_id): DCNL 'Set default policy version. DCNL :type policy_arn: string DCNL :param policy_arn: The ARN of the policy to set the default version DCNL for DCNL :type version_id: string DCNL :param version_id: The id of the version to set as default'
def list_entities_for_policy(self, policy_arn, path_prefix=None, marker=None, max_items=None, entity_filter=None): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to get entities for DCNL :type marker: string DCNL :param marker: A marker used for pagination (received from previous DCNL accesses) DCNL :type max_items: int DCNL :param max_items: Send only max_items; allows paginations DCNL :type path_prefix: string DCNL :param path_prefix: Send only items prefixed by this path DCNL :type entity_filter: string DCNL :param entity_filter: Which entity type of User | Role | Group | DCNL LocalManagedPolicy | AWSManagedPolicy to return'
def attach_group_policy(self, policy_arn, group_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to attach DCNL :type group_name: string DCNL :param group_name: Group to attach the policy to'
def attach_role_policy(self, policy_arn, role_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to attach DCNL :type role_name: string DCNL :param role_name: Role to attach the policy to'
def attach_user_policy(self, policy_arn, user_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to attach DCNL :type user_name: string DCNL :param user_name: User to attach the policy to'
def detach_group_policy(self, policy_arn, group_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to detach DCNL :type group_name: string DCNL :param group_name: Group to detach the policy from'
def detach_role_policy(self, policy_arn, role_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to detach DCNL :type role_name: string DCNL :param role_name: Role to detach the policy from'
def detach_user_policy(self, policy_arn, user_name): DCNL ':type policy_arn: string DCNL :param policy_arn: The ARN of the policy to detach DCNL :type user_name: string DCNL :param user_name: User to detach the policy from'
def _build_list_params(self, params, items, label): DCNL 'Add an AWS API-compatible parameter list to a dictionary. DCNL :type params: dict DCNL :param params: The parameter dictionary DCNL :type items: list DCNL :param items: Items to be included in the list DCNL :type label: string DCNL :param label: The parameter list\'s name'
def _make_request(self, action, params=None): DCNL 'Make a call to the SES API. DCNL :type action: string DCNL :param action: The API method to use (e.g. SendRawEmail) DCNL :type params: dict DCNL :param params: Parameters that will be sent as POST data with the API DCNL call.'
def _handle_error(self, response, body): DCNL 'Handle raising the correct exception, depending on the error. Many DCNL errors share the same HTTP response code, meaning we have to get really DCNL kludgey and do string searches to figure out what went wrong.'
def send_email(self, source, subject, body, to_addresses, cc_addresses=None, bcc_addresses=None, format='text', reply_addresses=None, return_path=None, text_body=None, html_body=None): DCNL 'Composes an email message based on input data, and then immediately DCNL queues the message for sending. DCNL :type source: string DCNL :param source: The sender\'s email address. DCNL :type subject: string DCNL :param subject: The subject of the message: A short summary of the DCNL content, which will appear in the recipient\'s inbox. DCNL :type body: string DCNL :param body: The message body. DCNL :type to_addresses: list of strings or string DCNL :param to_addresses: The To: field(s) of the message. DCNL :type cc_addresses: list of strings or string DCNL :param cc_addresses: The CC: field(s) of the message. DCNL :type bcc_addresses: list of strings or string DCNL :param bcc_addresses: The BCC: field(s) of the message. DCNL :type format: string DCNL :param format: The format of the message\'s body, must be either "text" DCNL or "html". DCNL :type reply_addresses: list of strings or string DCNL :param reply_addresses: The reply-to email address(es) for the DCNL message. If the recipient replies to the DCNL message, each reply-to address will DCNL receive the reply. DCNL :type return_path: string DCNL :param return_path: The email address to which bounce notifications are DCNL to be forwarded. If the message cannot be delivered DCNL to the recipient, then an error message will be DCNL returned from the recipient\'s ISP; this message DCNL will then be forwarded to the email address DCNL specified by the ReturnPath parameter. DCNL :type text_body: string DCNL :param text_body: The text body to send with this email. DCNL :type html_body: string DCNL :param html_body: The html body to send with this email.'
def send_raw_email(self, raw_message, source=None, destinations=None): DCNL 'Sends an email message, with header and content specified by the DCNL client. The SendRawEmail action is useful for sending multipart MIME DCNL emails, with attachments or inline content. The raw text of the message DCNL must comply with Internet email standards; otherwise, the message DCNL cannot be sent. DCNL :type source: string DCNL :param source: The sender\'s email address. Amazon\'s docs say: DCNL If you specify the Source parameter, then bounce notifications and DCNL complaints will be sent to this email address. This takes precedence DCNL over any Return-Path header that you might include in the raw text of DCNL the message. DCNL :type raw_message: string DCNL :param raw_message: The raw text of the message. The client is DCNL responsible for ensuring the following: DCNL - Message must contain a header and a body, separated by a blank line. DCNL - All required header fields must be present. DCNL - Each part of a multipart MIME message must be formatted properly. DCNL - MIME content types must be among those supported by Amazon SES. DCNL Refer to the Amazon SES Developer Guide for more details. DCNL - Content must be base64-encoded, if MIME requires it. DCNL :type destinations: list of strings or string DCNL :param destinations: A list of destinations for the message.'
def list_verified_email_addresses(self): DCNL 'Fetch a list of the email addresses that have been verified. DCNL :rtype: dict DCNL :returns: A ListVerifiedEmailAddressesResponse structure. Note that DCNL keys must be unicode strings.'
def get_send_quota(self): DCNL 'Fetches the user\'s current activity limits. DCNL :rtype: dict DCNL :returns: A GetSendQuotaResponse structure. Note that keys must be DCNL unicode strings.'
def get_send_statistics(self): DCNL 'Fetches the user\'s sending statistics. The result is a list of data DCNL points, representing the last two weeks of sending activity. DCNL Each data point in the list contains statistics for a 15-minute DCNL interval. DCNL :rtype: dict DCNL :returns: A GetSendStatisticsResponse structure. Note that keys must be DCNL unicode strings.'
def delete_verified_email_address(self, email_address): DCNL 'Deletes the specified email address from the list of verified DCNL addresses. DCNL :type email_adddress: string DCNL :param email_address: The email address to be removed from the list of DCNL verified addreses. DCNL :rtype: dict DCNL :returns: A DeleteVerifiedEmailAddressResponse structure. Note that DCNL keys must be unicode strings.'
def verify_email_address(self, email_address): DCNL 'Verifies an email address. This action causes a confirmation email DCNL message to be sent to the specified address. DCNL :type email_adddress: string DCNL :param email_address: The email address to be verified. DCNL :rtype: dict DCNL :returns: A VerifyEmailAddressResponse structure. Note that keys must DCNL be unicode strings.'
def verify_domain_dkim(self, domain): DCNL 'Returns a set of DNS records, or tokens, that must be published in the DCNL domain name\'s DNS to complete the DKIM verification process. These DCNL tokens are DNS ``CNAME`` records that point to DKIM public keys hosted DCNL by Amazon SES. To complete the DKIM verification process, these tokens DCNL must be published in the domain\'s DNS.  The tokens must remain DCNL published in order for Easy DKIM signing to function correctly. DCNL After the tokens are added to the domain\'s DNS, Amazon SES will be able DCNL to DKIM-sign email originating from that domain.  To enable or disable DCNL Easy DKIM signing for a domain, use the ``SetIdentityDkimEnabled`` DCNL action.  For more information about Easy DKIM, go to the `Amazon SES DCNL Developer Guide DCNL <http://docs.amazonwebservices.com/ses/latest/DeveloperGuide>`_. DCNL :type domain: string DCNL :param domain: The domain name.'
def set_identity_dkim_enabled(self, identity, dkim_enabled): DCNL 'Enables or disables DKIM signing of email sent from an identity. DCNL * If Easy DKIM signing is enabled for a domain name identity (e.g., DCNL * ``example.com``), DCNL then Amazon SES will DKIM-sign all email sent by addresses under that DCNL domain name (e.g., ``user@example.com``) DCNL * If Easy DKIM signing is enabled for an email address, then Amazon SES DCNL will DKIM-sign all email sent by that email address. DCNL For email addresses (e.g., ``user@example.com``), you can only enable DCNL Easy DKIM signing  if the corresponding domain (e.g., ``example.com``) DCNL has been set up for Easy DKIM using the AWS Console or the DCNL ``VerifyDomainDkim`` action. DCNL :type identity: string DCNL :param identity: An email address or domain name. DCNL :type dkim_enabled: bool DCNL :param dkim_enabled: Specifies whether or not to enable DKIM signing.'
def get_identity_dkim_attributes(self, identities): DCNL 'Get attributes associated with a list of verified identities. DCNL Given a list of verified identities (email addresses and/or domains), DCNL returns a structure describing identity notification attributes. DCNL :type identities: list DCNL :param identities: A list of verified identities (email addresses DCNL and/or domains).'
def list_identities(self): DCNL 'Returns a list containing all of the identities (email addresses DCNL and domains) for a specific AWS Account, regardless of DCNL verification status. DCNL :rtype: dict DCNL :returns: A ListIdentitiesResponse structure. Note that DCNL keys must be unicode strings.'
def get_identity_verification_attributes(self, identities): DCNL 'Given a list of identities (email addresses and/or domains), DCNL returns the verification status and (for domain identities) DCNL the verification token for each identity. DCNL :type identities: list of strings or string DCNL :param identities: List of identities. DCNL :rtype: dict DCNL :returns: A GetIdentityVerificationAttributesResponse structure. DCNL Note that keys must be unicode strings.'
def verify_domain_identity(self, domain): DCNL 'Verifies a domain. DCNL :type domain: string DCNL :param domain: The domain to be verified. DCNL :rtype: dict DCNL :returns: A VerifyDomainIdentityResponse structure. Note that DCNL keys must be unicode strings.'
def verify_email_identity(self, email_address): DCNL 'Verifies an email address. This action causes a confirmation DCNL email message to be sent to the specified address. DCNL :type email_adddress: string DCNL :param email_address: The email address to be verified. DCNL :rtype: dict DCNL :returns: A VerifyEmailIdentityResponse structure. Note that keys must DCNL be unicode strings.'
def delete_identity(self, identity): DCNL 'Deletes the specified identity (email address or domain) from DCNL the list of verified identities. DCNL :type identity: string DCNL :param identity: The identity to be deleted. DCNL :rtype: dict DCNL :returns: A DeleteIdentityResponse structure. Note that keys must DCNL be unicode strings.'
def set_identity_notification_topic(self, identity, notification_type, sns_topic=None): DCNL 'Sets an SNS topic to publish bounce or complaint notifications for DCNL emails sent with the given identity as the Source. Publishing to topics DCNL may only be disabled when feedback forwarding is enabled. DCNL :type identity: string DCNL :param identity: An email address or domain name. DCNL :type notification_type: string DCNL :param notification_type: The type of feedback notifications that will DCNL be published to the specified topic. DCNL Valid Values: Bounce | Complaint | Delivery DCNL :type sns_topic: string or None DCNL :param sns_topic: The Amazon Resource Name (ARN) of the Amazon Simple DCNL Notification Service (Amazon SNS) topic.'
def set_identity_feedback_forwarding_enabled(self, identity, forwarding_enabled=True): DCNL 'Enables or disables SES feedback notification via email. DCNL Feedback forwarding may only be disabled when both complaint and DCNL bounce topics are set. DCNL :type identity: string DCNL :param identity: An email address or domain name. DCNL :type forwarding_enabled: bool DCNL :param forwarding_enabled: Specifies whether or not to enable feedback forwarding.'
def size(self): DCNL 'Returns the number of connections in the pool for this host. DCNL Some of the connections may still be in use, and may not be DCNL ready to be returned by get().'
def put(self, conn): DCNL 'Adds a connection to the pool, along with the time it was DCNL added.'
def get(self): DCNL 'Returns the next connection in this pool that is ready to be DCNL reused.  Returns None if there aren\'t any.'
def _conn_ready(self, conn): DCNL 'There is a nice state diagram at the top of http_client.py.  It DCNL indicates that once the response headers have been read (which DCNL _mexe does before adding the connection to the pool), a DCNL response is attached to the connection, and it stays there DCNL until it\'s done reading.  This isn\'t entirely true: even after DCNL the client is done reading, the response may be closed, but DCNL not removed from the connection yet. DCNL This is ugly, reading a private instance variable, but the DCNL state we care about isn\'t available in any public methods.'
def clean(self): DCNL 'Get rid of stale connections.'
def _pair_stale(self, pair): DCNL 'Returns true of the (connection,time) pair is too old to be DCNL used.'
def size(self): DCNL 'Returns the number of connections in the pool.'
def get_http_connection(self, host, port, is_secure): DCNL 'Gets a connection from the pool for the named host.  Returns DCNL None if there is no connection that can be reused. It\'s the caller\'s DCNL responsibility to call close() on the connection when it\'s no longer DCNL needed.'
def put_http_connection(self, host, port, is_secure, conn): DCNL 'Adds a connection to the pool of connections that can be DCNL reused for the named host.'
def clean(self): DCNL 'Clean up the stale connections in all of the pools, and then DCNL get rid of empty pools.  Pools clean themselves every time a DCNL connection is fetched; this cleaning takes care of pools that DCNL aren\'t being used any more, so nothing is being gotten from DCNL them.'
def __init__(self, method, protocol, host, port, path, auth_path, params, headers, body): DCNL 'Represents an HTTP request. DCNL :type method: string DCNL :param method: The HTTP method name, \'GET\', \'POST\', \'PUT\' etc. DCNL :type protocol: string DCNL :param protocol: The http protocol used, \'http\' or \'https\'. DCNL :type host: string DCNL :param host: Host to which the request is addressed. eg. abc.com DCNL :type port: int DCNL :param port: port on which the request is being sent. Zero means unset, DCNL in which case default port will be chosen. DCNL :type path: string DCNL :param path: URL path that is being accessed. DCNL :type auth_path: string DCNL :param path: The part of the URL path used when creating the DCNL authentication string. DCNL :type params: dict DCNL :param params: HTTP url query parameters, with key as name of DCNL the param, and value as value of param. DCNL :type headers: dict DCNL :param headers: HTTP headers, with key as name of the header and value DCNL as value of header. DCNL :type body: string DCNL :param body: Body of the HTTP request. If not present, will be None or DCNL empty string (\'\').'
def read(self, amt=None): DCNL 'Read the response. DCNL This method does not have the same behavior as DCNL http_client.HTTPResponse.read.  Instead, if this method is called with DCNL no ``amt`` arg, then the response body will be cached.  Subsequent DCNL calls to ``read()`` with no args **will return the cached response**.'
def __init__(self, host, aws_access_key_id=None, aws_secret_access_key=None, is_secure=True, port=None, proxy=None, proxy_port=None, proxy_user=None, proxy_pass=None, debug=0, https_connection_factory=None, path='/', provider='aws', security_token=None, suppress_consec_slashes=True, validate_certs=True, profile_name=None): DCNL ':type host: str DCNL :param host: The host to make the connection to DCNL :keyword str aws_access_key_id: Your AWS Access Key ID (provided by DCNL Amazon). If none is specified, the value in your DCNL ``AWS_ACCESS_KEY_ID`` environmental variable is used. DCNL :keyword str aws_secret_access_key: Your AWS Secret Access Key DCNL (provided by Amazon). If none is specified, the value in your DCNL ``AWS_SECRET_ACCESS_KEY`` environmental variable is used. DCNL :keyword str security_token: The security token associated with DCNL temporary credentials issued by STS.  Optional unless using DCNL temporary credentials.  If none is specified, the environment DCNL variable ``AWS_SECURITY_TOKEN`` is used if defined. DCNL :type is_secure: boolean DCNL :param is_secure: Whether the connection is over SSL DCNL :type https_connection_factory: list or tuple DCNL :param https_connection_factory: A pair of an HTTP connection DCNL factory and the exceptions to catch.  The factory should have DCNL a similar interface to L{http_client.HTTPSConnection}. DCNL :param str proxy: Address/hostname for a proxy server DCNL :type proxy_port: int DCNL :param proxy_port: The port to use when connecting over a proxy DCNL :type proxy_user: str DCNL :param proxy_user: The username to connect with on the proxy DCNL :type proxy_pass: str DCNL :param proxy_pass: The password to use when connection over a proxy. DCNL :type port: int DCNL :param port: The port to use to connect DCNL :type suppress_consec_slashes: bool DCNL :param suppress_consec_slashes: If provided, controls whether DCNL consecutive slashes will be suppressed in key paths. DCNL :type validate_certs: bool DCNL :param validate_certs: Controls whether SSL certificates DCNL will be validated or not.  Defaults to True. DCNL :type profile_name: str DCNL :param profile_name: Override usual Credentials section in config DCNL file to use a named set of keys instead.'
def _mexe(self, request, sender=None, override_num_retries=None, retry_handler=None): DCNL 'mexe - Multi-execute inside a loop, retrying multiple times to handle DCNL transient Internet errors by simply trying again. DCNL Also handles redirects. DCNL This code was inspired by the S3Utils classes posted to the boto-users DCNL Google group by Larry Bates.  Thanks!'
def make_request(self, method, path, headers=None, data='', host=None, auth_path=None, sender=None, override_num_retries=None, params=None, retry_handler=None): DCNL 'Makes a request to the server, with stock multiple-retry logic.'
def close(self): DCNL '(Optional) Close any open HTTP connections.  This is non-destructive, DCNL and making a new request will open a connection again.'
def build_complex_list_params(self, params, items, label, names): DCNL 'Serialize a list of structures. DCNL For example:: DCNL items = [(\'foo\', \'bar\', \'baz\'), (\'foo2\', \'bar2\', \'baz2\')] DCNL label = \'ParamName.member\' DCNL names = (\'One\', \'Two\', \'Three\') DCNL self.build_complex_list_params(params, items, label, names) DCNL would result in the params dict being updated with these params:: DCNL ParamName.member.1.One = foo DCNL ParamName.member.1.Two = bar DCNL ParamName.member.1.Three = baz DCNL ParamName.member.2.One = foo2 DCNL ParamName.member.2.Two = bar2 DCNL ParamName.member.2.Three = baz2 DCNL :type params: dict DCNL :param params: The params dict.  The complex list params DCNL will be added to this dict. DCNL :type items: list of tuples DCNL :param items: The list to serialize. DCNL :type label: string DCNL :param label: The prefix to apply to the parameter. DCNL :type names: tuple of strings DCNL :param names: The names associated with each tuple element.'
def connect(self, **kw_params): DCNL 'Connect to this Region\'s endpoint. Returns an connection DCNL object pointing to the endpoint associated with this region. DCNL You may pass any of the arguments accepted by the connection DCNL class\'s constructor as keyword arguments and they will be DCNL passed along to the connection object. DCNL :rtype: Connection object DCNL :return: The connection to this regions endpoint'
def get_policy(self): DCNL 'Returns the stack policy for this stack. If it has no policy DCNL then, a null value is returned.'
def set_policy(self, stack_policy_body=None, stack_policy_url=None): DCNL 'Sets a stack policy for this stack. DCNL :type stack_policy_body: string DCNL :param stack_policy_body: Structure containing the stack policy body. DCNL (For more information, go to ` Prevent Updates to Stack Resources`_ DCNL in the AWS CloudFormation User Guide.) DCNL You must pass `StackPolicyBody` or `StackPolicyURL`. If both are DCNL passed, only `StackPolicyBody` is used. DCNL :type stack_policy_url: string DCNL :param stack_policy_url: Location of a file containing the stack DCNL policy. The URL must point to a policy (max size: 16KB) located in DCNL an S3 bucket in the same region as the stack. You must pass DCNL `StackPolicyBody` or `StackPolicyURL`. If both are passed, only DCNL `StackPolicyBody` is used.'
def _build_create_or_update_params(self, stack_name, template_body, template_url, parameters, disable_rollback, timeout_in_minutes, notification_arns, capabilities, on_failure, stack_policy_body, stack_policy_url, tags, use_previous_template=None, stack_policy_during_update_body=None, stack_policy_during_update_url=None): DCNL 'Helper that creates JSON parameters needed by a Stack Create or DCNL Stack Update call. DCNL :type stack_name: string DCNL :param stack_name: DCNL The name associated with the stack. The name must be unique within your DCNL AWS account. DCNL Must contain only alphanumeric characters (case sensitive) and start DCNL with an alpha character. Maximum length of the name is 255 DCNL characters. DCNL :type template_body: string DCNL :param template_body: Structure containing the template body. (For more DCNL information, go to `Template Anatomy`_ in the AWS CloudFormation DCNL User Guide.) DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. If both `TemplateBody` and DCNL `TemplateUrl` are passed, only `TemplateBody` is used. DCNL `TemplateBody`. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template (max size: 307,200 bytes) located in DCNL an S3 bucket in the same region as the stack. For more information, DCNL go to the `Template Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. If both `TemplateBody` and DCNL `TemplateUrl` are passed, only `TemplateBody` is used. DCNL `TemplateBody`. DCNL :type parameters: list DCNL :param parameters: A list of key/value tuples that specify input DCNL parameters for the stack. A 3-tuple (key, value, bool) may be used to DCNL specify the `UsePreviousValue` option. DCNL :type disable_rollback: boolean DCNL :param disable_rollback: Set to `True` to disable rollback of the stack DCNL if stack creation failed. You can specify either `DisableRollback` DCNL or `OnFailure`, but not both. DCNL Default: `False` DCNL :type timeout_in_minutes: integer DCNL :param timeout_in_minutes: The amount of time that can pass before the DCNL stack status becomes CREATE_FAILED; if `DisableRollback` is not set DCNL or is set to `False`, the stack will be rolled back. DCNL :type notification_arns: list DCNL :param notification_arns: The Simple Notification Service (SNS) topic DCNL ARNs to publish stack related events. You can find your SNS topic DCNL ARNs using the `SNS console`_ or your Command Line Interface (CLI). DCNL :type capabilities: list DCNL :param capabilities: The list of capabilities that you want to allow in DCNL the stack. If your template contains certain resources, you must DCNL specify the CAPABILITY_IAM value for this parameter; otherwise, DCNL this action returns an InsufficientCapabilities error. The DCNL following resources require you to specify the capabilities DCNL parameter: `AWS::CloudFormation::Stack`_, `AWS::IAM::AccessKey`_, DCNL `AWS::IAM::Group`_, `AWS::IAM::InstanceProfile`_, DCNL `AWS::IAM::Policy`_, `AWS::IAM::Role`_, `AWS::IAM::User`_, and DCNL `AWS::IAM::UserToGroupAddition`_. DCNL :type on_failure: string DCNL :param on_failure: Determines what action will be taken if stack DCNL creation fails. This must be one of: DO_NOTHING, ROLLBACK, or DCNL DELETE. You can specify either `OnFailure` or `DisableRollback`, DCNL but not both. DCNL Default: `ROLLBACK` DCNL :type stack_policy_body: string DCNL :param stack_policy_body: Structure containing the stack policy body. DCNL (For more information, go to ` Prevent Updates to Stack Resources`_ DCNL in the AWS CloudFormation User Guide.) DCNL If you pass `StackPolicyBody` and `StackPolicyURL`, only DCNL `StackPolicyBody` is used. DCNL :type stack_policy_url: string DCNL :param stack_policy_url: Location of a file containing the stack DCNL policy. The URL must point to a policy (max size: 16KB) located in DCNL an S3 bucket in the same region as the stack. If you pass DCNL `StackPolicyBody` and `StackPolicyURL`, only `StackPolicyBody` is DCNL used. DCNL :type tags: list DCNL :param tags: A set of user-defined `Tags` to associate with this stack, DCNL represented by key/value pairs. Tags defined for the stack are DCNL propagated to EC2 resources that are created as part of the stack. DCNL A maximum number of 10 tags can be specified. DCNL :type use_previous_template: boolean DCNL :param use_previous_template: Set to `True` to use the previous DCNL template instead of uploading a new one via `TemplateBody` or DCNL `TemplateURL`. DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. DCNL :type stack_policy_during_update_body: string DCNL :param stack_policy_during_update_body: Structure containing the DCNL temporary overriding stack policy body. If you pass DCNL `StackPolicyDuringUpdateBody` and `StackPolicyDuringUpdateURL`, DCNL only `StackPolicyDuringUpdateBody` is used. DCNL If you want to update protected resources, specify a temporary DCNL overriding stack policy during this update. If you do not specify a DCNL stack policy, the current policy that associated with the stack DCNL will be used. DCNL :type stack_policy_during_update_url: string DCNL :param stack_policy_during_update_url: Location of a file containing DCNL the temporary overriding stack policy. The URL must point to a DCNL policy (max size: 16KB) located in an S3 bucket in the same region DCNL as the stack. If you pass `StackPolicyDuringUpdateBody` and DCNL `StackPolicyDuringUpdateURL`, only `StackPolicyDuringUpdateBody` is DCNL used. DCNL If you want to update protected resources, specify a temporary DCNL overriding stack policy during this update. If you do not specify a DCNL stack policy, the current policy that is associated with the stack DCNL will be used. DCNL :rtype: dict DCNL :return: JSON parameters represented as a Python dict.'
def _do_request(self, call, params, path, method): DCNL 'Do a request via ``self.make_request`` and parse the JSON response. DCNL :type call: string DCNL :param call: Call name, e.g. ``CreateStack`` DCNL :type params: dict DCNL :param params: Dictionary of call parameters DCNL :type path: string DCNL :param path: Server path DCNL :type method: string DCNL :param method: HTTP method to use DCNL :rtype: dict DCNL :return: Parsed JSON response data'
def create_stack(self, stack_name, template_body=None, template_url=None, parameters=None, notification_arns=None, disable_rollback=None, timeout_in_minutes=None, capabilities=None, tags=None, on_failure=None, stack_policy_body=None, stack_policy_url=None): DCNL 'Creates a stack as specified in the template. After the call DCNL completes successfully, the stack creation starts. You can DCNL check the status of the stack via the DescribeStacks API. DCNL Currently, the limit for stacks is 20 stacks per account per DCNL region. DCNL :type stack_name: string DCNL :param stack_name: DCNL The name associated with the stack. The name must be unique within your DCNL AWS account. DCNL Must contain only alphanumeric characters (case sensitive) and start DCNL with an alpha character. Maximum length of the name is 255 DCNL characters. DCNL :type template_body: string DCNL :param template_body: Structure containing the template body. (For more DCNL information, go to `Template Anatomy`_ in the AWS CloudFormation DCNL User Guide.) DCNL Conditional: You must pass `TemplateBody` or `TemplateURL`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template (max size: 307,200 bytes) located in DCNL an S3 bucket in the same region as the stack. For more information, DCNL go to the `Template Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass `TemplateURL` or `TemplateBody`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type parameters: list DCNL :param parameters: A list of key/value tuples that specify input DCNL parameters for the stack. DCNL :type disable_rollback: boolean DCNL :param disable_rollback: Set to `True` to disable rollback of the stack DCNL if stack creation failed. You can specify either `DisableRollback` DCNL or `OnFailure`, but not both. DCNL Default: `False` DCNL :type timeout_in_minutes: integer DCNL :param timeout_in_minutes: The amount of time that can pass before the DCNL stack status becomes CREATE_FAILED; if `DisableRollback` is not set DCNL or is set to `False`, the stack will be rolled back. DCNL :type notification_arns: list DCNL :param notification_arns: The Simple Notification Service (SNS) topic DCNL ARNs to publish stack related events. You can find your SNS topic DCNL ARNs using the `SNS console`_ or your Command Line Interface (CLI). DCNL :type capabilities: list DCNL :param capabilities: The list of capabilities that you want to allow in DCNL the stack. If your template contains certain resources, you must DCNL specify the CAPABILITY_IAM value for this parameter; otherwise, DCNL this action returns an InsufficientCapabilities error. The DCNL following resources require you to specify the capabilities DCNL parameter: `AWS::CloudFormation::Stack`_, `AWS::IAM::AccessKey`_, DCNL `AWS::IAM::Group`_, `AWS::IAM::InstanceProfile`_, DCNL `AWS::IAM::Policy`_, `AWS::IAM::Role`_, `AWS::IAM::User`_, and DCNL `AWS::IAM::UserToGroupAddition`_. DCNL :type on_failure: string DCNL :param on_failure: Determines what action will be taken if stack DCNL creation fails. This must be one of: DO_NOTHING, ROLLBACK, or DCNL DELETE. You can specify either `OnFailure` or `DisableRollback`, DCNL but not both. DCNL Default: `ROLLBACK` DCNL :type stack_policy_body: string DCNL :param stack_policy_body: Structure containing the stack policy body. DCNL (For more information, go to ` Prevent Updates to Stack Resources`_ DCNL in the AWS CloudFormation User Guide.) DCNL If you pass `StackPolicyBody` and `StackPolicyURL`, only DCNL `StackPolicyBody` is used. DCNL :type stack_policy_url: string DCNL :param stack_policy_url: Location of a file containing the stack DCNL policy. The URL must point to a policy (max size: 16KB) located in DCNL an S3 bucket in the same region as the stack. If you pass DCNL `StackPolicyBody` and `StackPolicyURL`, only `StackPolicyBody` is DCNL used. DCNL :type tags: dict DCNL :param tags: A set of user-defined `Tags` to associate with this stack, DCNL represented by key/value pairs. Tags defined for the stack are DCNL propagated to EC2 resources that are created as part of the stack. DCNL A maximum number of 10 tags can be specified.'
def update_stack(self, stack_name, template_body=None, template_url=None, parameters=None, notification_arns=None, disable_rollback=False, timeout_in_minutes=None, capabilities=None, tags=None, use_previous_template=None, stack_policy_during_update_body=None, stack_policy_during_update_url=None, stack_policy_body=None, stack_policy_url=None): DCNL 'Updates a stack as specified in the template. After the call DCNL completes successfully, the stack update starts. You can check DCNL the status of the stack via the DescribeStacks action. DCNL **Note: **You cannot update `AWS::S3::Bucket`_ resources, for DCNL example, to add or modify tags. DCNL To get a copy of the template for an existing stack, you can DCNL use the GetTemplate action. DCNL Tags that were associated with this stack during creation time DCNL will still be associated with the stack after an `UpdateStack` DCNL operation. DCNL For more information about creating an update template, DCNL updating a stack, and monitoring the progress of the update, DCNL see `Updating a Stack`_. DCNL :type stack_name: string DCNL :param stack_name: DCNL The name or stack ID of the stack to update. DCNL Must contain only alphanumeric characters (case sensitive) and start DCNL with an alpha character. Maximum length of the name is 255 DCNL characters. DCNL :type template_body: string DCNL :param template_body: Structure containing the template body. (For more DCNL information, go to `Template Anatomy`_ in the AWS CloudFormation DCNL User Guide.) DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. If both `TemplateBody` and DCNL `TemplateUrl` are passed, only `TemplateBody` is used. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template (max size: 307,200 bytes) located in DCNL an S3 bucket in the same region as the stack. For more information, DCNL go to the `Template Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. If both `TemplateBody` and DCNL `TemplateUrl` are passed, only `TemplateBody` is used. DCNL `TemplateBody`. DCNL :type use_previous_template: boolean DCNL :param use_previous_template: Set to `True` to use the previous DCNL template instead of uploading a new one via `TemplateBody` or DCNL `TemplateURL`. DCNL Conditional: You must pass either `UsePreviousTemplate` or one of DCNL `TemplateBody` or `TemplateUrl`. DCNL :type parameters: list DCNL :param parameters: A list of key/value tuples that specify input DCNL parameters for the stack. A 3-tuple (key, value, bool) may be used to DCNL specify the `UsePreviousValue` option. DCNL :type notification_arns: list DCNL :param notification_arns: The Simple Notification Service (SNS) topic DCNL ARNs to publish stack related events. You can find your SNS topic DCNL ARNs using the `SNS console`_ or your Command Line Interface (CLI). DCNL :type disable_rollback: bool DCNL :param disable_rollback: Indicates whether or not to rollback on DCNL failure. DCNL :type timeout_in_minutes: integer DCNL :param timeout_in_minutes: The amount of time that can pass before the DCNL stack status becomes CREATE_FAILED; if `DisableRollback` is not set DCNL or is set to `False`, the stack will be rolled back. DCNL :type capabilities: list DCNL :param capabilities: The list of capabilities you want to allow in DCNL the stack.  Currently, the only valid capability is DCNL \'CAPABILITY_IAM\'. DCNL :type tags: dict DCNL :param tags: A set of user-defined `Tags` to associate with this stack, DCNL represented by key/value pairs. Tags defined for the stack are DCNL propagated to EC2 resources that are created as part of the stack. DCNL A maximum number of 10 tags can be specified. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template located in an S3 bucket in the same DCNL region as the stack. For more information, go to `Template DCNL Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass `TemplateURL` or `TemplateBody`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type stack_policy_during_update_body: string DCNL :param stack_policy_during_update_body: Structure containing the DCNL temporary overriding stack policy body. If you pass DCNL `StackPolicyDuringUpdateBody` and `StackPolicyDuringUpdateURL`, DCNL only `StackPolicyDuringUpdateBody` is used. DCNL If you want to update protected resources, specify a temporary DCNL overriding stack policy during this update. If you do not specify a DCNL stack policy, the current policy that associated with the stack DCNL will be used. DCNL :type stack_policy_during_update_url: string DCNL :param stack_policy_during_update_url: Location of a file containing DCNL the temporary overriding stack policy. The URL must point to a DCNL policy (max size: 16KB) located in an S3 bucket in the same region DCNL as the stack. If you pass `StackPolicyDuringUpdateBody` and DCNL `StackPolicyDuringUpdateURL`, only `StackPolicyDuringUpdateBody` is DCNL used. DCNL If you want to update protected resources, specify a temporary DCNL overriding stack policy during this update. If you do not specify a DCNL stack policy, the current policy that is associated with the stack DCNL will be used. DCNL :rtype: string DCNL :return: The unique Stack ID.'
def delete_stack(self, stack_name_or_id): DCNL 'Deletes a specified stack. Once the call completes DCNL successfully, stack deletion starts. Deleted stacks do not DCNL show up in the DescribeStacks API if the deletion has been DCNL completed successfully. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack.'
def describe_stack_events(self, stack_name_or_id=None, next_token=None): DCNL 'Returns all stack related events for a specified stack. For DCNL more information about a stack\'s event history, go to DCNL `Stacks`_ in the AWS CloudFormation User Guide. DCNL Events are returned, even if the stack never existed or has DCNL been successfully deleted. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack. DCNL Default: There is no default value. DCNL :type next_token: string DCNL :param next_token: String that identifies the start of the next list of DCNL events, if there is one. DCNL Default: There is no default value.'
def describe_stack_resource(self, stack_name_or_id, logical_resource_id): DCNL 'Returns a description of the specified resource in the DCNL specified stack. DCNL For deleted stacks, DescribeStackResource returns resource DCNL information for up to 90 days after the stack has been DCNL deleted. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack. DCNL Default: There is no default value. DCNL :type logical_resource_id: string DCNL :param logical_resource_id: The logical name of the resource as DCNL specified in the template. DCNL Default: There is no default value.'
def describe_stack_resources(self, stack_name_or_id=None, logical_resource_id=None, physical_resource_id=None): DCNL 'Returns AWS resource descriptions for running and deleted DCNL stacks. If `StackName` is specified, all the associated DCNL resources that are part of the stack are returned. If DCNL `PhysicalResourceId` is specified, the associated resources of DCNL the stack that the resource belongs to are returned. DCNL Only the first 100 resources will be returned. If your stack DCNL has more resources than this, you should use DCNL `ListStackResources` instead. DCNL For deleted stacks, `DescribeStackResources` returns resource DCNL information for up to 90 days after the stack has been DCNL deleted. DCNL You must specify either `StackName` or `PhysicalResourceId`, DCNL but not both. In addition, you can specify `LogicalResourceId` DCNL to filter the returned result. For more information about DCNL resources, the `LogicalResourceId` and `PhysicalResourceId`, DCNL go to the `AWS CloudFormation User Guide`_. DCNL A `ValidationError` is returned if you specify both DCNL `StackName` and `PhysicalResourceId` in the same request. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack. DCNL Required: Conditional. If you do not specify `StackName`, you must DCNL specify `PhysicalResourceId`. DCNL Default: There is no default value. DCNL :type logical_resource_id: string DCNL :param logical_resource_id: The logical name of the resource as DCNL specified in the template. DCNL Default: There is no default value. DCNL :type physical_resource_id: string DCNL :param physical_resource_id: The name or unique identifier that DCNL corresponds to a physical instance ID of a resource supported by DCNL AWS CloudFormation. DCNL For example, for an Amazon Elastic Compute Cloud (EC2) instance, DCNL `PhysicalResourceId` corresponds to the `InstanceId`. You can pass DCNL the EC2 `InstanceId` to `DescribeStackResources` to find which DCNL stack the instance belongs to and what other resources are part of DCNL the stack. DCNL Required: Conditional. If you do not specify `PhysicalResourceId`, you DCNL must specify `StackName`. DCNL Default: There is no default value.'
def describe_stacks(self, stack_name_or_id=None, next_token=None): DCNL 'Returns the description for the specified stack; if no stack DCNL name was specified, then it returns the description for all DCNL the stacks created. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack. DCNL Default: There is no default value. DCNL :type next_token: string DCNL :param next_token: String that identifies the start of the next list of DCNL stacks, if there is one.'
def get_template(self, stack_name_or_id): DCNL 'Returns the template body for a specified stack. You can get DCNL the template for running or deleted stacks. DCNL For deleted stacks, GetTemplate returns the template for up to DCNL 90 days after the stack has been deleted. DCNL If the template does not exist, a `ValidationError` is DCNL returned. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack, which are not always interchangeable: DCNL + Running stacks: You can specify either the stack\'s name or its unique DCNL stack ID. DCNL + Deleted stacks: You must specify the unique stack ID. DCNL Default: There is no default value.'
def list_stack_resources(self, stack_name_or_id, next_token=None): DCNL 'Returns descriptions of all resources of the specified stack. DCNL For deleted stacks, ListStackResources returns resource DCNL information for up to 90 days after the stack has been DCNL deleted. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated DCNL with the stack, which are not always interchangeable: DCNL + Running stacks: You can specify either the stack\'s name or its unique DCNL stack ID. DCNL + Deleted stacks: You must specify the unique stack ID. DCNL Default: There is no default value. DCNL :type next_token: string DCNL :param next_token: String that identifies the start of the next list of DCNL stack resource summaries, if there is one. DCNL Default: There is no default value.'
def list_stacks(self, stack_status_filters=None, next_token=None): DCNL 'Returns the summary information for stacks whose status DCNL matches the specified StackStatusFilter. Summary information DCNL for stacks that have been deleted is kept for 90 days after DCNL the stack is deleted. If no StackStatusFilter is specified, DCNL summary information for all stacks is returned (including DCNL existing stacks and stacks that have been deleted). DCNL :type next_token: string DCNL :param next_token: String that identifies the start of the next list of DCNL stacks, if there is one. DCNL Default: There is no default value. DCNL :type stack_status_filter: list DCNL :param stack_status_filter: Stack status to use as a filter. Specify DCNL one or more stack status codes to list only stacks with the DCNL specified status codes. For a complete list of stack status codes, DCNL see the `StackStatus` parameter of the Stack data type.'
def validate_template(self, template_body=None, template_url=None): DCNL 'Validates a specified template. DCNL :type template_body: string DCNL :param template_body: String containing the template body. (For more DCNL information, go to `Template Anatomy`_ in the AWS CloudFormation DCNL User Guide.) DCNL Conditional: You must pass `TemplateURL` or `TemplateBody`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template (max size: 307,200 bytes) located in DCNL an S3 bucket in the same region as the stack. For more information, DCNL go to `Template Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass `TemplateURL` or `TemplateBody`. If both are DCNL passed, only `TemplateBody` is used.'
def cancel_update_stack(self, stack_name_or_id=None): DCNL 'Cancels an update on the specified stack. If the call DCNL completes successfully, the stack will roll back the update DCNL and revert to the previous stack configuration. DCNL Only stacks that are in the UPDATE_IN_PROGRESS state can be DCNL canceled. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or the unique identifier associated with DCNL the stack.'
def estimate_template_cost(self, template_body=None, template_url=None, parameters=None): DCNL 'Returns the estimated monthly cost of a template. The return DCNL value is an AWS Simple Monthly Calculator URL with a query DCNL string that describes the resources required to run the DCNL template. DCNL :type template_body: string DCNL :param template_body: Structure containing the template body. (For more DCNL information, go to `Template Anatomy`_ in the AWS CloudFormation DCNL User Guide.) DCNL Conditional: You must pass `TemplateBody` or `TemplateURL`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type template_url: string DCNL :param template_url: Location of file containing the template body. The DCNL URL must point to a template located in an S3 bucket in the same DCNL region as the stack. For more information, go to `Template DCNL Anatomy`_ in the AWS CloudFormation User Guide. DCNL Conditional: You must pass `TemplateURL` or `TemplateBody`. If both are DCNL passed, only `TemplateBody` is used. DCNL :type parameters: list DCNL :param parameters: A list of key/value tuples that specify input DCNL parameters for the template. DCNL :rtype: string DCNL :returns: URL to pre-filled cost calculator'
def get_stack_policy(self, stack_name_or_id): DCNL 'Returns the stack policy for a specified stack. If a stack DCNL doesn\'t have a policy, a null value is returned. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or stack ID that is associated with DCNL the stack whose policy you want to get. DCNL :rtype: string DCNL :return: The policy JSON document'
def set_stack_policy(self, stack_name_or_id, stack_policy_body=None, stack_policy_url=None): DCNL 'Sets a stack policy for a specified stack. DCNL :type stack_name_or_id: string DCNL :param stack_name_or_id: The name or stack ID that you want to DCNL associate a policy with. DCNL :type stack_policy_body: string DCNL :param stack_policy_body: Structure containing the stack policy body. DCNL (For more information, go to ` Prevent Updates to Stack Resources`_ DCNL in the AWS CloudFormation User Guide.) DCNL You must pass `StackPolicyBody` or `StackPolicyURL`. If both are DCNL passed, only `StackPolicyBody` is used. DCNL :type stack_policy_url: string DCNL :param stack_policy_url: Location of a file containing the stack DCNL policy. The URL must point to a policy (max size: 16KB) located in DCNL an S3 bucket in the same region as the stack. You must pass DCNL `StackPolicyBody` or `StackPolicyURL`. If both are passed, only DCNL `StackPolicyBody` is used.'
@needs_caller_reference DCNL @complex_amounts('SettlementAmount') DCNL @requires(['CreditInstrumentId', 'SettlementAmount.Value', 'SenderTokenId', 'SettlementAmount.CurrencyCode']) DCNL @api_action() DCNL def settle_debt(self, action, response, **kw): DCNL 'Allows a caller to initiate a transaction that atomically transfers DCNL money from a sender\'s payment instrument to the recipient, while DCNL decreasing corresponding debt balance.'
@requires(['TransactionId']) DCNL @api_action() DCNL def get_transaction_status(self, action, response, **kw): DCNL 'Gets the latest status of a transaction.'
@requires(['StartDate']) DCNL @api_action() DCNL def get_account_activity(self, action, response, **kw): DCNL 'Returns transactions for a given date range.'
@requires(['TransactionId']) DCNL @api_action() DCNL def get_transaction(self, action, response, **kw): DCNL 'Returns all details of a transaction.'
@api_action() DCNL def get_outstanding_debt_balance(self, action, response): DCNL 'Returns the total outstanding balance for all the credit instruments DCNL for the given creditor account.'
@requires(['PrepaidInstrumentId']) DCNL @api_action() DCNL def get_prepaid_balance(self, action, response, **kw): DCNL 'Returns the balance available on the given prepaid instrument.'
@api_action() DCNL def get_total_prepaid_liability(self, action, response): DCNL 'Returns the total liability held by the given account corresponding to DCNL all the prepaid instruments owned by the account.'
@api_action() DCNL def get_account_balance(self, action, response): DCNL 'Returns the account balance for an account in real time.'
@needs_caller_reference DCNL @requires(['PaymentInstruction', 'TokenType']) DCNL @api_action() DCNL def install_payment_instruction(self, action, response, **kw): DCNL 'Installs a payment instruction for caller.'
@needs_caller_reference DCNL @requires(['returnURL', 'pipelineName']) DCNL def cbui_url(self, **kw): DCNL 'Generate a signed URL for the Co-Branded service API given arguments as DCNL payload.'
@needs_caller_reference DCNL @complex_amounts('TransactionAmount') DCNL @requires(['SenderTokenId', 'TransactionAmount.Value', 'TransactionAmount.CurrencyCode']) DCNL @api_action() DCNL def reserve(self, action, response, **kw): DCNL 'Reserve API is part of the Reserve and Settle API conjunction that DCNL serve the purpose of a pay where the authorization and settlement have DCNL a timing difference.'
@needs_caller_reference DCNL @complex_amounts('TransactionAmount') DCNL @requires(['SenderTokenId', 'TransactionAmount.Value', 'TransactionAmount.CurrencyCode']) DCNL @api_action() DCNL def pay(self, action, response, **kw): DCNL 'Allows calling applications to move money from a sender to a recipient.'
@requires(['TransactionId']) DCNL @api_action() DCNL def cancel(self, action, response, **kw): DCNL 'Cancels an ongoing transaction and puts it in cancelled state.'
@complex_amounts('TransactionAmount') DCNL @requires(['ReserveTransactionId', 'TransactionAmount.Value', 'TransactionAmount.CurrencyCode']) DCNL @api_action() DCNL def settle(self, action, response, **kw): DCNL 'The Settle API is used in conjunction with the Reserve API and is used DCNL to settle previously reserved transaction.'
@complex_amounts('RefundAmount') DCNL @requires(['TransactionId', 'RefundAmount.Value', 'CallerReference', 'RefundAmount.CurrencyCode']) DCNL @api_action() DCNL def refund(self, action, response, **kw): DCNL 'Refunds a previously completed transaction.'
@requires(['RecipientTokenId']) DCNL @api_action() DCNL def get_recipient_verification_status(self, action, response, **kw): DCNL 'Returns the recipient status.'
@requires(['CallerReference'], ['TokenId']) DCNL @api_action() DCNL def get_token_by_caller(self, action, response, **kw): DCNL 'Returns the details of a particular token installed by this calling DCNL application using the subway co-branded UI.'
@requires(['UrlEndPoint', 'HttpParameters']) DCNL @api_action() DCNL def verify_signature(self, action, response, **kw): DCNL 'Verify the signature that FPS sent in IPN or callback urls.'
@api_action() DCNL def get_tokens(self, action, response, **kw): DCNL 'Returns a list of tokens installed on the given account.'
@requires(['TokenId']) DCNL @api_action() DCNL def get_token_usage(self, action, response, **kw): DCNL 'Returns the usage of a token.'
@requires(['TokenId']) DCNL @api_action() DCNL def cancel_token(self, action, response, **kw): DCNL 'Cancels any token installed by the calling application on its own DCNL account.'
@needs_caller_reference DCNL @complex_amounts('FundingAmount') DCNL @requires(['PrepaidInstrumentId', 'FundingAmount.Value', 'SenderTokenId', 'FundingAmount.CurrencyCode']) DCNL @api_action() DCNL def fund_prepaid(self, action, response, **kw): DCNL 'Funds the prepaid balance on the given prepaid instrument.'
@requires(['CreditInstrumentId']) DCNL @api_action() DCNL def get_debt_balance(self, action, response, **kw): DCNL 'Returns the balance corresponding to the given credit instrument.'
@needs_caller_reference DCNL @complex_amounts('AdjustmentAmount') DCNL @requires(['CreditInstrumentId', 'AdjustmentAmount.Value', 'AdjustmentAmount.CurrencyCode']) DCNL @api_action() DCNL def write_off_debt(self, action, response, **kw): DCNL 'Allows a creditor to write off the debt balance accumulated partially DCNL or fully at any time.'
@requires(['SubscriptionId']) DCNL @api_action() DCNL def get_transactions_for_subscription(self, action, response, **kw): DCNL 'Returns the transactions for a given subscriptionID.'
@requires(['SubscriptionId']) DCNL @api_action() DCNL def get_subscription_details(self, action, response, **kw): DCNL 'Returns the details of Subscription for a given subscriptionID.'
@needs_caller_reference DCNL @complex_amounts('RefundAmount') DCNL @requires(['SubscriptionId']) DCNL @api_action() DCNL def cancel_subscription_and_refund(self, action, response, **kw): DCNL 'Cancels a subscription.'
@requires(['TokenId']) DCNL @api_action() DCNL def get_payment_instruction(self, action, response, **kw): DCNL 'Gets the payment instruction of a token.'
def connect(self, num_retries=5): DCNL 'Connect to an SSH server and authenticate with it. DCNL :type num_retries: int DCNL :param num_retries: The maximum number of connection attempts.'
def open_sftp(self): DCNL 'Open an SFTP session on the SSH server. DCNL :rtype: :class:`paramiko.sftp_client.SFTPClient` DCNL :return: An SFTP client object.'
def get_file(self, src, dst): DCNL 'Open an SFTP session on the remote host, and copy a file from DCNL the remote host to the specified path on the local host. DCNL :type src: string DCNL :param src: The path to the target file on the remote host. DCNL :type dst: string DCNL :param dst: The path on your local host where you want to DCNL store the file.'
def put_file(self, src, dst): DCNL 'Open an SFTP session on the remote host, and copy a file from DCNL the local host to the specified path on the remote host. DCNL :type src: string DCNL :param src: The path to the target file on your local host. DCNL :type dst: string DCNL :param dst: The path on the remote host where you want to store DCNL the file.'
def open(self, filename, mode='r', bufsize=(-1)): DCNL 'Open an SFTP session to the remote host, and open a file on DCNL that host. DCNL :type filename: string DCNL :param filename: The path to the file on the remote host. DCNL :type mode: string DCNL :param mode: The file interaction mode. DCNL :type bufsize: integer DCNL :param bufsize: The file buffer size. DCNL :rtype: :class:`paramiko.sftp_file.SFTPFile` DCNL :return: A paramiko proxy object for a file on the remote server.'
def listdir(self, path): DCNL 'List all of the files and subdirectories at the specified path DCNL on the remote host. DCNL :type path: string DCNL :param path: The base path from which to obtain the list. DCNL :rtype: list DCNL :return: A list of files and subdirectories at the specified path.'
def isdir(self, path): DCNL 'Check the specified path on the remote host to determine if DCNL it is a directory. DCNL :type path: string DCNL :param path: The path to the directory that you want to check. DCNL :rtype: integer DCNL :return: If the path is a directory, the function returns 1. DCNL If the path is a file or an invalid path, the function DCNL returns 0.'
def exists(self, path): DCNL 'Check the remote host for the specified path, or a file DCNL at the specified path. This function returns 1 if the DCNL path or the file exist on the remote host, and returns 0 if DCNL the path or the file does not exist on the remote host. DCNL :type path: string DCNL :param path: The path to the directory or file that you want to check. DCNL :rtype: integer DCNL :return: If the path or the file exist, the function returns 1. DCNL If the path or the file do not exist on the remote host, DCNL the function returns 0.'
def shell(self): DCNL 'Start an interactive shell session with the remote host.'
def run(self, command): DCNL 'Run a command on the remote host. DCNL :type command: string DCNL :param command: The command that you want to send to the remote host. DCNL :rtype: tuple DCNL :return: This function returns a tuple that contains an integer status, DCNL the stdout from the command, and the stderr from the command.'
def run_pty(self, command): DCNL 'Request a pseudo-terminal from a server, and execute a command on that DCNL server. DCNL :type command: string DCNL :param command: The command that you want to run on the remote host. DCNL :rtype: :class:`paramiko.channel.Channel` DCNL :return: An open channel object.'
def close(self): DCNL 'Close an SSH session and any open channels that are tied to it.'
def get_file(self, src, dst): DCNL 'Copy a file from one directory to another.'
def put_file(self, src, dst): DCNL 'Copy a file from one directory to another.'
def listdir(self, path): DCNL 'List all of the files and subdirectories at the specified path. DCNL :rtype: list DCNL :return: Return a list containing the names of the entries DCNL in the directory given by path.'
def isdir(self, path): DCNL 'Check the specified path to determine if it is a directory. DCNL :rtype: boolean DCNL :return: Returns True if the path is an existing directory.'
def exists(self, path): DCNL 'Check for the specified path, or check a file at the specified path. DCNL :rtype: boolean DCNL :return: If the path or the file exist, the function returns True.'
def run(self): DCNL 'Open a subprocess and run a command on the local host. DCNL :rtype: tuple DCNL :return: This function returns a tuple that contains an integer status DCNL and a string with the combined stdout and stderr output.'
@classmethod DCNL def create(cls, config_file=None, logical_volume=None, cfg=None, **params): DCNL 'Create a new instance based on the specified configuration file or the specified DCNL configuration and the passed in parameters. DCNL If the config_file argument is not None, the configuration is read from there. DCNL Otherwise, the cfg argument is used. DCNL The config file may include other config files with a #import reference. The included DCNL config files must reside in the same directory as the specified file. DCNL The logical_volume argument, if supplied, will be used to get the current physical DCNL volume ID and use that as an override of the value specified in the config file. This DCNL may be useful for debugging purposes when you want to debug with a production config DCNL file but a test Volume. DCNL The dictionary argument may be used to override any EC2 configuration values in the DCNL config file.'
def get_snapshots(self): DCNL 'Returns a list of all completed snapshots for this volume ID.'
def trim_snapshots(self, delete=False): DCNL 'Trim the number of snapshots for this volume.  This method always DCNL keeps the oldest snapshot.  It then uses the parameters passed in DCNL to determine how many others should be kept. DCNL The algorithm is to keep all snapshots from the current day.  Then DCNL it will keep the first snapshot of the day for the previous seven days. DCNL Then, it will keep the first snapshot of the week for the previous DCNL four weeks.  After than, it will keep the first snapshot of the month DCNL for as many months as there are.'
def check(self): DCNL 'Determine how long until the next scheduled time for a Task. DCNL Returns the number of seconds until the next scheduled time or zero DCNL if the task needs to be run immediately. DCNL If it\'s an hourly task and it\'s never been run, run it now. DCNL If it\'s a daily task and it\'s never been run and the hour is right, run it now.'
def add_tags_to_stream(self, stream_name, tags): DCNL 'Adds or updates tags for the specified Amazon Kinesis stream. DCNL Each stream can have up to 10 tags. DCNL If tags have already been assigned to the stream, DCNL `AddTagsToStream` overwrites any existing tags that correspond DCNL to the specified tag keys. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream. DCNL :type tags: map DCNL :param tags: The set of key-value pairs to use to create the tags.'
def create_stream(self, stream_name, shard_count): DCNL 'Creates a Amazon Kinesis stream. A stream captures and DCNL transports data records that are continuously emitted from DCNL different data sources or producers . Scale-out within an DCNL Amazon Kinesis stream is explicitly supported by means of DCNL shards, which are uniquely identified groups of data records DCNL in an Amazon Kinesis stream. DCNL You specify and control the number of shards that a stream is DCNL composed of. Each open shard can support up to 5 read DCNL transactions per second, up to a maximum total of 2 MB of data DCNL read per second. Each shard can support up to 1000 records DCNL written per second, up to a maximum total of 1 MB data written DCNL per second. You can add shards to a stream if the amount of DCNL data input increases and you can remove shards if the amount DCNL of data input decreases. DCNL The stream name identifies the stream. The name is scoped to DCNL the AWS account used by the application. It is also scoped by DCNL region. That is, two streams in two different accounts can DCNL have the same name, and two streams in the same account, but DCNL in two different regions, can have the same name. DCNL `CreateStream` is an asynchronous operation. Upon receiving a DCNL `CreateStream` request, Amazon Kinesis immediately returns and DCNL sets the stream status to `CREATING`. After the stream is DCNL created, Amazon Kinesis sets the stream status to `ACTIVE`. DCNL You should perform read and write operations only on an DCNL `ACTIVE` stream. DCNL You receive a `LimitExceededException` when making a DCNL `CreateStream` request if you try to do one of the following: DCNL + Have more than five streams in the `CREATING` state at any DCNL point in time. DCNL + Create more shards than are authorized for your account. DCNL The default limit for an AWS account is 10 shards per stream. DCNL If you need to create a stream with more than 10 shards, DCNL `contact AWS Support`_ to increase the limit on your account. DCNL You can use `DescribeStream` to check the stream status, which DCNL is returned in `StreamStatus`. DCNL `CreateStream` has a limit of 5 transactions per second per DCNL account. DCNL :type stream_name: string DCNL :param stream_name: A name to identify the stream. The stream name is DCNL scoped to the AWS account used by the application that creates the DCNL stream. It is also scoped by region. That is, two streams in two DCNL different AWS accounts can have the same name, and two streams in DCNL the same AWS account, but in two different regions, can have the DCNL same name. DCNL :type shard_count: integer DCNL :param shard_count: The number of shards that the stream will use. The DCNL throughput of the stream is a function of the number of shards; DCNL more shards are required for greater provisioned throughput. DCNL **Note:** The default limit for an AWS account is 10 shards per stream. DCNL If you need to create a stream with more than 10 shards, `contact DCNL AWS Support`_ to increase the limit on your account.'
def delete_stream(self, stream_name): DCNL 'Deletes a stream and all its shards and data. You must shut DCNL down any applications that are operating on the stream before DCNL you delete the stream. If an application attempts to operate DCNL on a deleted stream, it will receive the exception DCNL `ResourceNotFoundException`. DCNL If the stream is in the `ACTIVE` state, you can delete it. DCNL After a `DeleteStream` request, the specified stream is in the DCNL `DELETING` state until Amazon Kinesis completes the deletion. DCNL **Note:** Amazon Kinesis might continue to accept data read DCNL and write operations, such as PutRecord, PutRecords, and DCNL GetRecords, on a stream in the `DELETING` state until the DCNL stream deletion is complete. DCNL When you delete a stream, any shards in that stream are also DCNL deleted, and any tags are dissociated from the stream. DCNL You can use the DescribeStream operation to check the state of DCNL the stream, which is returned in `StreamStatus`. DCNL `DeleteStream` has a limit of 5 transactions per second per DCNL account. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream to delete.'
def describe_stream(self, stream_name, limit=None, exclusive_start_shard_id=None): DCNL 'Describes the specified stream. DCNL The information about the stream includes its current status, DCNL its Amazon Resource Name (ARN), and an array of shard objects. DCNL For each shard object, there is information about the hash key DCNL and sequence number ranges that the shard spans, and the IDs DCNL of any earlier shards that played in a role in creating the DCNL shard. A sequence number is the identifier associated with DCNL every record ingested in the Amazon Kinesis stream. The DCNL sequence number is assigned when a record is put into the DCNL stream. DCNL You can limit the number of returned shards using the `Limit` DCNL parameter. The number of shards in a stream may be too large DCNL to return from a single call to `DescribeStream`. You can DCNL detect this by using the `HasMoreShards` flag in the returned DCNL output. `HasMoreShards` is set to `True` when there is more DCNL data available. DCNL `DescribeStream` is a paginated operation. If there are more DCNL shards available, you can request them using the shard ID of DCNL the last shard returned. Specify this ID in the DCNL `ExclusiveStartShardId` parameter in a subsequent request to DCNL `DescribeStream`. DCNL `DescribeStream` has a limit of 10 transactions per second per DCNL account. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream to describe. DCNL :type limit: integer DCNL :param limit: The maximum number of shards to return. DCNL :type exclusive_start_shard_id: string DCNL :param exclusive_start_shard_id: The shard ID of the shard to start DCNL with.'
def get_records(self, shard_iterator, limit=None, b64_decode=True): DCNL 'Gets data records from a shard. DCNL Specify a shard iterator using the `ShardIterator` parameter. DCNL The shard iterator specifies the position in the shard from DCNL which you want to start reading data records sequentially. If DCNL there are no records available in the portion of the shard DCNL that the iterator points to, `GetRecords` returns an empty DCNL list. Note that it might take multiple calls to get to a DCNL portion of the shard that contains records. DCNL You can scale by provisioning multiple shards. Your DCNL application should have one thread per shard, each reading DCNL continuously from its stream. To read from a stream DCNL continually, call `GetRecords` in a loop. Use GetShardIterator DCNL to get the shard iterator to specify in the first `GetRecords` DCNL call. `GetRecords` returns a new shard iterator in DCNL `NextShardIterator`. Specify the shard iterator returned in DCNL `NextShardIterator` in subsequent calls to `GetRecords`. Note DCNL that if the shard has been closed, the shard iterator can\'t DCNL return more data and `GetRecords` returns `null` in DCNL `NextShardIterator`. You can terminate the loop when the shard DCNL is closed, or when the shard iterator reaches the record with DCNL the sequence number or other attribute that marks it as the DCNL last record to process. DCNL Each data record can be up to 50 KB in size, and each shard DCNL can read up to 2 MB per second. You can ensure that your calls DCNL don\'t exceed the maximum supported size or throughput by using DCNL the `Limit` parameter to specify the maximum number of records DCNL that `GetRecords` can return. Consider your average record DCNL size when determining this limit. For example, if your average DCNL record size is 40 KB, you can limit the data returned to about DCNL 1 MB per call by specifying 25 as the limit. DCNL The size of the data returned by `GetRecords` will vary DCNL depending on the utilization of the shard. The maximum size of DCNL data that `GetRecords` can return is 10 MB. If a call returns DCNL 10 MB of data, subsequent calls made within the next 5 seconds DCNL throw `ProvisionedThroughputExceededException`. If there is DCNL insufficient provisioned throughput on the shard, subsequent DCNL calls made within the next 1 second throw DCNL `ProvisionedThroughputExceededException`. Note that DCNL `GetRecords` won\'t return any data when it throws an DCNL exception. For this reason, we recommend that you wait one DCNL second between calls to `GetRecords`; however, it\'s possible DCNL that the application will get exceptions for longer than 1 DCNL second. DCNL To detect whether the application is falling behind in DCNL processing, add a timestamp to your records and note how long DCNL it takes to process them. You can also monitor how much data DCNL is in a stream using the CloudWatch metrics for write DCNL operations ( `PutRecord` and `PutRecords`). For more DCNL information, see `Monitoring Amazon Kinesis with Amazon DCNL CloudWatch`_ in the Amazon Kinesis Developer Guide . DCNL :type shard_iterator: string DCNL :param shard_iterator: The position in the shard from which you want to DCNL start sequentially reading data records. A shard iterator specifies DCNL this position using the sequence number of a data record in the DCNL shard. DCNL :type limit: integer DCNL :param limit: The maximum number of records to return. Specify a value DCNL of up to 10,000. If you specify a value that is greater than DCNL 10,000, `GetRecords` throws `InvalidArgumentException`. DCNL :type b64_decode: boolean DCNL :param b64_decode: Decode the Base64-encoded ``Data`` field of records.'
def get_shard_iterator(self, stream_name, shard_id, shard_iterator_type, starting_sequence_number=None): DCNL 'Gets a shard iterator. A shard iterator expires five minutes DCNL after it is returned to the requester. DCNL A shard iterator specifies the position in the shard from DCNL which to start reading data records sequentially. A shard DCNL iterator specifies this position using the sequence number of DCNL a data record in a shard. A sequence number is the identifier DCNL associated with every record ingested in the Amazon Kinesis DCNL stream. The sequence number is assigned when a record is put DCNL into the stream. DCNL You must specify the shard iterator type. For example, you can DCNL set the `ShardIteratorType` parameter to read exactly from the DCNL position denoted by a specific sequence number by using the DCNL `AT_SEQUENCE_NUMBER` shard iterator type, or right after the DCNL sequence number by using the `AFTER_SEQUENCE_NUMBER` shard DCNL iterator type, using sequence numbers returned by earlier DCNL calls to PutRecord, PutRecords, GetRecords, or DescribeStream. DCNL You can specify the shard iterator type `TRIM_HORIZON` in the DCNL request to cause `ShardIterator` to point to the last DCNL untrimmed record in the shard in the system, which is the DCNL oldest data record in the shard. Or you can point to just DCNL after the most recent record in the shard, by using the shard DCNL iterator type `LATEST`, so that you always read the most DCNL recent data in the shard. DCNL When you repeatedly read from an Amazon Kinesis stream use a DCNL GetShardIterator request to get the first shard iterator to to DCNL use in your first `GetRecords` request and then use the shard DCNL iterator returned by the `GetRecords` request in DCNL `NextShardIterator` for subsequent reads. A new shard iterator DCNL is returned by every `GetRecords` request in DCNL `NextShardIterator`, which you use in the `ShardIterator` DCNL parameter of the next `GetRecords` request. DCNL If a `GetShardIterator` request is made too often, you receive DCNL a `ProvisionedThroughputExceededException`. For more DCNL information about throughput limits, see GetRecords. DCNL If the shard is closed, the iterator can\'t return more data, DCNL and `GetShardIterator` returns `null` for its `ShardIterator`. DCNL A shard can be closed using SplitShard or MergeShards. DCNL `GetShardIterator` has a limit of 5 transactions per second DCNL per account per open shard. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream. DCNL :type shard_id: string DCNL :param shard_id: The shard ID of the shard to get the iterator for. DCNL :type shard_iterator_type: string DCNL :param shard_iterator_type: DCNL Determines how the shard iterator is used to start reading data records DCNL from the shard. DCNL The following are the valid shard iterator types: DCNL + AT_SEQUENCE_NUMBER - Start reading exactly from the position denoted DCNL by a specific sequence number. DCNL + AFTER_SEQUENCE_NUMBER - Start reading right after the position DCNL denoted by a specific sequence number. DCNL + TRIM_HORIZON - Start reading at the last untrimmed record in the DCNL shard in the system, which is the oldest data record in the shard. DCNL + LATEST - Start reading just after the most recent record in the DCNL shard, so that you always read the most recent data in the shard. DCNL :type starting_sequence_number: string DCNL :param starting_sequence_number: The sequence number of the data record DCNL in the shard from which to start reading from. DCNL :returns: A dictionary containing: DCNL 1) a `ShardIterator` with the value being the shard-iterator object'
def list_streams(self, limit=None, exclusive_start_stream_name=None): DCNL 'Lists your streams. DCNL The number of streams may be too large to return from a single DCNL call to `ListStreams`. You can limit the number of returned DCNL streams using the `Limit` parameter. If you do not specify a DCNL value for the `Limit` parameter, Amazon Kinesis uses the DCNL default limit, which is currently 10. DCNL You can detect if there are more streams available to list by DCNL using the `HasMoreStreams` flag from the returned output. If DCNL there are more streams available, you can request more streams DCNL by using the name of the last stream returned by the DCNL `ListStreams` request in the `ExclusiveStartStreamName` DCNL parameter in a subsequent request to `ListStreams`. The group DCNL of stream names returned by the subsequent request is then DCNL added to the list. You can continue this process until all the DCNL stream names have been collected in the list. DCNL `ListStreams` has a limit of 5 transactions per second per DCNL account. DCNL :type limit: integer DCNL :param limit: The maximum number of streams to list. DCNL :type exclusive_start_stream_name: string DCNL :param exclusive_start_stream_name: The name of the stream to start the DCNL list with.'
def list_tags_for_stream(self, stream_name, exclusive_start_tag_key=None, limit=None): DCNL 'Lists the tags for the specified Amazon Kinesis stream. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream. DCNL :type exclusive_start_tag_key: string DCNL :param exclusive_start_tag_key: The key to use as the starting point DCNL for the list of tags. If this parameter is set, `ListTagsForStream` DCNL gets all tags that occur after `ExclusiveStartTagKey`. DCNL :type limit: integer DCNL :param limit: The number of tags to return. If this number is less than DCNL the total number of tags associated with the stream, `HasMoreTags` DCNL is set to `True`. To list additional tags, set DCNL `ExclusiveStartTagKey` to the last key in the response.'
def merge_shards(self, stream_name, shard_to_merge, adjacent_shard_to_merge): DCNL 'Merges two adjacent shards in a stream and combines them into DCNL a single shard to reduce the stream\'s capacity to ingest and DCNL transport data. Two shards are considered adjacent if the DCNL union of the hash key ranges for the two shards form a DCNL contiguous set with no gaps. For example, if you have two DCNL shards, one with a hash key range of 276...381 and the other DCNL with a hash key range of 382...454, then you could merge these DCNL two shards into a single shard that would have a hash key DCNL range of 276...454. After the merge, the single child shard DCNL receives data for all hash key values covered by the two DCNL parent shards. DCNL `MergeShards` is called when there is a need to reduce the DCNL overall capacity of a stream because of excess capacity that DCNL is not being used. You must specify the shard to be merged and DCNL the adjacent shard for a stream. For more information about DCNL merging shards, see `Merge Two Shards`_ in the Amazon Kinesis DCNL Developer Guide . DCNL If the stream is in the `ACTIVE` state, you can call DCNL `MergeShards`. If a stream is in the `CREATING`, `UPDATING`, DCNL or `DELETING` state, `MergeShards` returns a DCNL `ResourceInUseException`. If the specified stream does not DCNL exist, `MergeShards` returns a `ResourceNotFoundException`. DCNL You can use DescribeStream to check the state of the stream, DCNL which is returned in `StreamStatus`. DCNL `MergeShards` is an asynchronous operation. Upon receiving a DCNL `MergeShards` request, Amazon Kinesis immediately returns a DCNL response and sets the `StreamStatus` to `UPDATING`. After the DCNL operation is completed, Amazon Kinesis sets the `StreamStatus` DCNL to `ACTIVE`. Read and write operations continue to work while DCNL the stream is in the `UPDATING` state. DCNL You use DescribeStream to determine the shard IDs that are DCNL specified in the `MergeShards` request. DCNL If you try to operate on too many streams in parallel using DCNL CreateStream, DeleteStream, `MergeShards` or SplitShard, you DCNL will receive a `LimitExceededException`. DCNL `MergeShards` has limit of 5 transactions per second per DCNL account. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream for the merge. DCNL :type shard_to_merge: string DCNL :param shard_to_merge: The shard ID of the shard to combine with the DCNL adjacent shard for the merge. DCNL :type adjacent_shard_to_merge: string DCNL :param adjacent_shard_to_merge: The shard ID of the adjacent shard for DCNL the merge.'
def put_record(self, stream_name, data, partition_key, explicit_hash_key=None, sequence_number_for_ordering=None, exclusive_minimum_sequence_number=None, b64_encode=True): DCNL 'This operation puts a data record into an Amazon Kinesis DCNL stream from a producer. This operation must be called to send DCNL data from the producer into the Amazon Kinesis stream for DCNL real-time ingestion and subsequent processing. The `PutRecord` DCNL operation requires the name of the stream that captures, DCNL stores, and transports the data; a partition key; and the data DCNL blob itself. The data blob could be a segment from a log file, DCNL geographic/location data, website clickstream data, or any DCNL other data type. DCNL The partition key is used to distribute data across shards. DCNL Amazon Kinesis segregates the data records that belong to a DCNL data stream into multiple shards, using the partition key DCNL associated with each data record to determine which shard a DCNL given data record belongs to. DCNL Partition keys are Unicode strings, with a maximum length DCNL limit of 256 bytes. An MD5 hash function is used to map DCNL partition keys to 128-bit integer values and to map associated DCNL data records to shards using the hash key ranges of the DCNL shards. You can override hashing the partition key to DCNL determine the shard by explicitly specifying a hash value DCNL using the `ExplicitHashKey` parameter. For more information, DCNL see the `Amazon Kinesis Developer Guide`_. DCNL `PutRecord` returns the shard ID of where the data record was DCNL placed and the sequence number that was assigned to the data DCNL record. DCNL Sequence numbers generally increase over time. To guarantee DCNL strictly increasing ordering, use the DCNL `SequenceNumberForOrdering` parameter. For more information, DCNL see the `Amazon Kinesis Developer Guide`_. DCNL If a `PutRecord` request cannot be processed because of DCNL insufficient provisioned throughput on the shard involved in DCNL the request, `PutRecord` throws DCNL `ProvisionedThroughputExceededException`. DCNL Data records are accessible for only 24 hours from the time DCNL that they are added to an Amazon Kinesis stream. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream to put the data record into. DCNL :type data: blob DCNL :param data: The data blob to put into the record, which is DCNL Base64-encoded when the blob is serialized. DCNL The maximum size of the data blob (the payload after DCNL Base64-decoding) is 50 kilobytes (KB) DCNL Set `b64_encode` to disable automatic Base64 encoding. DCNL :type partition_key: string DCNL :param partition_key: Determines which shard in the stream the data DCNL record is assigned to. Partition keys are Unicode strings with a DCNL maximum length limit of 256 bytes. Amazon Kinesis uses the DCNL partition key as input to a hash function that maps the partition DCNL key and associated data to a specific shard. Specifically, an MD5 DCNL hash function is used to map partition keys to 128-bit integer DCNL values and to map associated data records to shards. As a result of DCNL this hashing mechanism, all data records with the same partition DCNL key will map to the same shard within the stream. DCNL :type explicit_hash_key: string DCNL :param explicit_hash_key: The hash value used to explicitly determine DCNL the shard the data record is assigned to by overriding the DCNL partition key hash. DCNL :type sequence_number_for_ordering: string DCNL :param sequence_number_for_ordering: Guarantees strictly increasing DCNL sequence numbers, for puts from the same client and to the same DCNL partition key. Usage: set the `SequenceNumberForOrdering` of record DCNL n to the sequence number of record n-1 (as returned in the DCNL PutRecordResult when putting record n-1 ). If this parameter is not DCNL set, records will be coarsely ordered based on arrival time. DCNL :type b64_encode: boolean DCNL :param b64_encode: Whether to Base64 encode `data`. Can be set to DCNL ``False`` if `data` is already encoded to prevent double encoding.'
def put_records(self, records, stream_name, b64_encode=True): DCNL 'Puts (writes) multiple data records from a producer into an DCNL Amazon Kinesis stream in a single call (also referred to as a DCNL `PutRecords` request). Use this operation to send data from a DCNL data producer into the Amazon Kinesis stream for real-time DCNL ingestion and processing. Each shard can support up to 1000 DCNL records written per second, up to a maximum total of 1 MB data DCNL written per second. DCNL You must specify the name of the stream that captures, stores, DCNL and transports the data; and an array of request `Records`, DCNL with each record in the array requiring a partition key and DCNL data blob. DCNL The data blob can be any type of data; for example, a segment DCNL from a log file, geographic/location data, website clickstream DCNL data, and so on. DCNL The partition key is used by Amazon Kinesis as input to a hash DCNL function that maps the partition key and associated data to a DCNL specific shard. An MD5 hash function is used to map partition DCNL keys to 128-bit integer values and to map associated data DCNL records to shards. As a result of this hashing mechanism, all DCNL data records with the same partition key map to the same shard DCNL within the stream. For more information, see `Partition Key`_ DCNL in the Amazon Kinesis Developer Guide . DCNL Each record in the `Records` array may include an optional DCNL parameter, `ExplicitHashKey`, which overrides the partition DCNL key to shard mapping. This parameter allows a data producer to DCNL determine explicitly the shard where the record is stored. For DCNL more information, see `Adding Multiple Records with DCNL PutRecords`_ in the Amazon Kinesis Developer Guide . DCNL The `PutRecords` response includes an array of response DCNL `Records`. Each record in the response array directly DCNL correlates with a record in the request array using natural DCNL ordering, from the top to the bottom of the request and DCNL response. The response `Records` array always includes the DCNL same number of records as the request array. DCNL The response `Records` array includes both successfully and DCNL unsuccessfully processed records. Amazon Kinesis attempts to DCNL process all records in each `PutRecords` request. A single DCNL record failure does not stop the processing of subsequent DCNL records. DCNL A successfully-processed record includes `ShardId` and DCNL `SequenceNumber` values. The `ShardId` parameter identifies DCNL the shard in the stream where the record is stored. The DCNL `SequenceNumber` parameter is an identifier assigned to the DCNL put record, unique to all records in the stream. DCNL An unsuccessfully-processed record includes `ErrorCode` and DCNL `ErrorMessage` values. `ErrorCode` reflects the type of error DCNL and can be one of the following values: DCNL `ProvisionedThroughputExceededException` or `InternalFailure`. DCNL `ErrorMessage` provides more detailed information about the DCNL `ProvisionedThroughputExceededException` exception including DCNL the account ID, stream name, and shard ID of the record that DCNL was throttled. DCNL Data records are accessible for only 24 hours from the time DCNL that they are added to an Amazon Kinesis stream. DCNL :type records: list DCNL :param records: The records associated with the request. DCNL :type stream_name: string DCNL :param stream_name: The stream name associated with the request. DCNL :type b64_encode: boolean DCNL :param b64_encode: Whether to Base64 encode `data`. Can be set to DCNL ``False`` if `data` is already encoded to prevent double encoding.'
def remove_tags_from_stream(self, stream_name, tag_keys): DCNL 'Deletes tags from the specified Amazon Kinesis stream. DCNL If you specify a tag that does not exist, it is ignored. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream. DCNL :type tag_keys: list DCNL :param tag_keys: A list of tag keys. Each corresponding tag is removed DCNL from the stream.'
def split_shard(self, stream_name, shard_to_split, new_starting_hash_key): DCNL 'Splits a shard into two new shards in the stream, to increase DCNL the stream\'s capacity to ingest and transport data. DCNL `SplitShard` is called when there is a need to increase the DCNL overall capacity of stream because of an expected increase in DCNL the volume of data records being ingested. DCNL You can also use `SplitShard` when a shard appears to be DCNL approaching its maximum utilization, for example, when the set DCNL of producers sending data into the specific shard are suddenly DCNL sending more than previously anticipated. You can also call DCNL `SplitShard` to increase stream capacity, so that more Amazon DCNL Kinesis applications can simultaneously read data from the DCNL stream for real-time processing. DCNL You must specify the shard to be split and the new hash key, DCNL which is the position in the shard where the shard gets split DCNL in two. In many cases, the new hash key might simply be the DCNL average of the beginning and ending hash key, but it can be DCNL any hash key value in the range being mapped into the shard. DCNL For more information about splitting shards, see `Split a DCNL Shard`_ in the Amazon Kinesis Developer Guide . DCNL You can use DescribeStream to determine the shard ID and hash DCNL key values for the `ShardToSplit` and `NewStartingHashKey` DCNL parameters that are specified in the `SplitShard` request. DCNL `SplitShard` is an asynchronous operation. Upon receiving a DCNL `SplitShard` request, Amazon Kinesis immediately returns a DCNL response and sets the stream status to `UPDATING`. After the DCNL operation is completed, Amazon Kinesis sets the stream status DCNL to `ACTIVE`. Read and write operations continue to work while DCNL the stream is in the `UPDATING` state. DCNL You can use `DescribeStream` to check the status of the DCNL stream, which is returned in `StreamStatus`. If the stream is DCNL in the `ACTIVE` state, you can call `SplitShard`. If a stream DCNL is in `CREATING` or `UPDATING` or `DELETING` states, DCNL `DescribeStream` returns a `ResourceInUseException`. DCNL If the specified stream does not exist, `DescribeStream` DCNL returns a `ResourceNotFoundException`. If you try to create DCNL more shards than are authorized for your account, you receive DCNL a `LimitExceededException`. DCNL The default limit for an AWS account is 10 shards per stream. DCNL If you need to create a stream with more than 10 shards, DCNL `contact AWS Support`_ to increase the limit on your account. DCNL If you try to operate on too many streams in parallel using DCNL CreateStream, DeleteStream, MergeShards or SplitShard, you DCNL receive a `LimitExceededException`. DCNL `SplitShard` has limit of 5 transactions per second per DCNL account. DCNL :type stream_name: string DCNL :param stream_name: The name of the stream for the shard split. DCNL :type shard_to_split: string DCNL :param shard_to_split: The shard ID of the shard to split. DCNL :type new_starting_hash_key: string DCNL :param new_starting_hash_key: A hash key value for the starting hash DCNL key of one of the child shards created by the split. The hash key DCNL range for a given shard constitutes a set of ordered contiguous DCNL positive integers. The value for `NewStartingHashKey` must be in DCNL the range of hash keys being mapped into the shard. The DCNL `NewStartingHashKey` hash key value and all higher hash key values DCNL in hash key range are distributed to one of the child shards. All DCNL the lower hash key values in the range are distributed to the other DCNL child shard.'
def process_args(self, **args): DCNL 'Responsible for walking through Params defined for the request and: DCNL * Matching them with keyword parameters passed to the request DCNL constructor or via the command line. DCNL * Checking to see if all required parameters have been specified DCNL and raising an exception, if not. DCNL * Encoding each value into the set of request parameters that will DCNL be sent in the request to the AWS service.'
def cli_formatter(self, data): DCNL 'This method is responsible for formatting the output for the DCNL command line interface.  The default behavior is to call the DCNL generic CLI formatter which attempts to print something DCNL reasonable.  If you want specific formatting, you should DCNL override this method and do your own thing. DCNL :type data: dict DCNL :param data: The data returned by AWS.'
@classmethod DCNL def convert_boolean(cls, param, value): DCNL 'For command line arguments, just the presence DCNL of the option means True so just return True'
def convert(self, value): DCNL 'Convert a string value as received in the command line DCNL tools and convert to the appropriate type of value. DCNL Raise a ValidationError if the value can\'t be converted. DCNL :type value: str DCNL :param value: The value to convert.  This should always DCNL be a string.'
def check_for_credential_file(self): DCNL 'Checks for the existence of an AWS credential file. DCNL If the environment variable AWS_CREDENTIAL_FILE is DCNL set and points to a file, that file will be read and DCNL will be searched credentials. DCNL Note that if credentials have been explicitelypassed DCNL into the class constructor, those values always take DCNL precedence.'
def check_for_env_url(self): DCNL 'First checks to see if a url argument was explicitly passed DCNL in.  If so, that will be used.  If not, it checks for the DCNL existence of the environment variable specified in ENV_URL. DCNL If this is set, it should contain a fully qualified URL to the DCNL service you want to use. DCNL Note that any values passed explicitly to the class constructor DCNL will take precedence.'
def delete(self): DCNL 'Delete\'s this vault. WARNING!'
def upload_archive(self, filename, description=None): DCNL 'Adds an archive to a vault. For archives greater than 100MB the DCNL multipart upload will be used. DCNL :type file: str DCNL :param file: A filename to upload DCNL :type description: str DCNL :param description: An optional description for the archive. DCNL :rtype: str DCNL :return: The archive id of the newly created archive'
def _upload_archive_single_operation(self, filename, description): DCNL 'Adds an archive to a vault in a single operation. It\'s recommended for DCNL archives less than 100MB DCNL :type file: str DCNL :param file: A filename to upload DCNL :type description: str DCNL :param description: A description for the archive. DCNL :rtype: str DCNL :return: The archive id of the newly created archive'
def create_archive_writer(self, part_size=DefaultPartSize, description=None): DCNL 'Create a new archive and begin a multi-part upload to it. DCNL Returns a file-like object to which the data for the archive DCNL can be written. Once all the data is written the file-like DCNL object should be closed, you can then call the get_archive_id DCNL method on it to get the ID of the created archive. DCNL :type part_size: int DCNL :param part_size: The part size for the multipart upload. DCNL :type description: str DCNL :param description: An optional description for the archive. DCNL :rtype: :class:`boto.glacier.writer.Writer` DCNL :return: A Writer object that to which the archive data DCNL should be written.'
def create_archive_from_file(self, filename=None, file_obj=None, description=None, upload_id_callback=None): DCNL 'Create a new archive and upload the data from the given file DCNL or file-like object. DCNL :type filename: str DCNL :param filename: A filename to upload DCNL :type file_obj: file DCNL :param file_obj: A file-like object to upload DCNL :type description: str DCNL :param description: An optional description for the archive. DCNL :type upload_id_callback: function DCNL :param upload_id_callback: if set, call with the upload_id as the DCNL only parameter when it becomes known, to enable future calls DCNL to resume_archive_from_file in case resume is needed. DCNL :rtype: str DCNL :return: The archive id of the newly created archive'
def resume_archive_from_file(self, upload_id, filename=None, file_obj=None): DCNL 'Resume upload of a file already part-uploaded to Glacier. DCNL The resumption of an upload where the part-uploaded section is empty DCNL is a valid degenerate case that this function can handle. DCNL One and only one of filename or file_obj must be specified. DCNL :type upload_id: str DCNL :param upload_id: existing Glacier upload id of upload being resumed. DCNL :type filename: str DCNL :param filename: file to open for resume DCNL :type fobj: file DCNL :param fobj: file-like object containing local data to resume. This DCNL must read from the start of the entire upload, not just from the DCNL point being resumed. Use fobj.seek(0) to achieve this if necessary. DCNL :rtype: str DCNL :return: The archive id of the newly created archive'
def concurrent_create_archive_from_file(self, filename, description, **kwargs): DCNL 'Create a new archive from a file and upload the given DCNL file. DCNL This is a convenience method around the DCNL :class:`boto.glacier.concurrent.ConcurrentUploader` DCNL class.  This method will perform a multipart upload DCNL and upload the parts of the file concurrently. DCNL :type filename: str DCNL :param filename: A filename to upload DCNL :param kwargs: Additional kwargs to pass through to DCNL :py:class:`boto.glacier.concurrent.ConcurrentUploader`. DCNL You can pass any argument besides the ``api`` and DCNL ``vault_name`` param (these arguments are already DCNL passed to the ``ConcurrentUploader`` for you). DCNL :raises: `boto.glacier.exception.UploadArchiveError` is an error DCNL occurs during the upload process. DCNL :rtype: str DCNL :return: The archive id of the newly created archive'
def retrieve_archive(self, archive_id, sns_topic=None, description=None): DCNL 'Initiate a archive retrieval job to download the data from an DCNL archive. You will need to wait for the notification from DCNL Amazon (via SNS) before you can actually download the data, DCNL this takes around 4 hours. DCNL :type archive_id: str DCNL :param archive_id: The id of the archive DCNL :type description: str DCNL :param description: An optional description for the job. DCNL :type sns_topic: str DCNL :param sns_topic: The Amazon SNS topic ARN where Amazon Glacier DCNL sends notification when the job is completed and the output DCNL is ready for you to download. DCNL :rtype: :class:`boto.glacier.job.Job` DCNL :return: A Job object representing the retrieval job.'
def retrieve_inventory(self, sns_topic=None, description=None, byte_range=None, start_date=None, end_date=None, limit=None): DCNL 'Initiate a inventory retrieval job to list the items in the DCNL vault. You will need to wait for the notification from DCNL Amazon (via SNS) before you can actually download the data, DCNL this takes around 4 hours. DCNL :type description: str DCNL :param description: An optional description for the job. DCNL :type sns_topic: str DCNL :param sns_topic: The Amazon SNS topic ARN where Amazon Glacier DCNL sends notification when the job is completed and the output DCNL is ready for you to download. DCNL :type byte_range: str DCNL :param byte_range: Range of bytes to retrieve. DCNL :type start_date: DateTime DCNL :param start_date: Beginning of the date range to query. DCNL :type end_date: DateTime DCNL :param end_date: End of the date range to query. DCNL :type limit: int DCNL :param limit: Limits the number of results returned. DCNL :rtype: str DCNL :return: The ID of the job'
def retrieve_inventory_job(self, **kwargs): DCNL 'Identical to ``retrieve_inventory``, but returns a ``Job`` instance DCNL instead of just the job ID. DCNL :type description: str DCNL :param description: An optional description for the job. DCNL :type sns_topic: str DCNL :param sns_topic: The Amazon SNS topic ARN where Amazon Glacier DCNL sends notification when the job is completed and the output DCNL is ready for you to download. DCNL :type byte_range: str DCNL :param byte_range: Range of bytes to retrieve. DCNL :type start_date: DateTime DCNL :param start_date: Beginning of the date range to query. DCNL :type end_date: DateTime DCNL :param end_date: End of the date range to query. DCNL :type limit: int DCNL :param limit: Limits the number of results returned. DCNL :rtype: :class:`boto.glacier.job.Job` DCNL :return: A Job object representing the retrieval job.'
def delete_archive(self, archive_id): DCNL 'This operation deletes an archive from the vault. DCNL :type archive_id: str DCNL :param archive_id: The ID for the archive to be deleted.'
def get_job(self, job_id): DCNL 'Get an object representing a job in progress. DCNL :type job_id: str DCNL :param job_id: The ID of the job DCNL :rtype: :class:`boto.glacier.job.Job` DCNL :return: A Job object representing the job.'
def list_jobs(self, completed=None, status_code=None): DCNL 'Return a list of Job objects related to this vault. DCNL :type completed: boolean DCNL :param completed: Specifies the state of the jobs to return. DCNL If a value of True is passed, only completed jobs will DCNL be returned.  If a value of False is passed, only DCNL uncompleted jobs will be returned.  If no value is DCNL passed, all jobs will be returned. DCNL :type status_code: string DCNL :param status_code: Specifies the type of job status to return. DCNL Valid values are: InProgress|Succeeded|Failed.  If not DCNL specified, jobs with all status codes are returned. DCNL :rtype: list of :class:`boto.glacier.job.Job` DCNL :return: A list of Job objects related to this vault.'
def list_all_parts(self, upload_id): DCNL 'Automatically make and combine multiple calls to list_parts. DCNL Call list_parts as necessary, combining the results in case multiple DCNL calls were required to get data on all available parts.'
def read(self, amt=None): DCNL 'Reads and returns the response body, or up to the next amt bytes.'
def get_output(self, byte_range=None, validate_checksum=False): DCNL 'This operation downloads the output of the job.  Depending on DCNL the job type you specified when you initiated the job, the DCNL output will be either the content of an archive or a vault DCNL inventory. DCNL You can download all the job output or download a portion of DCNL the output by specifying a byte range. In the case of an DCNL archive retrieval job, depending on the byte range you DCNL specify, Amazon Glacier returns the checksum for the portion DCNL of the data. You can compute the checksum on the client and DCNL verify that the values match to ensure the portion you DCNL downloaded is the correct data. DCNL :type byte_range: tuple DCNL :param range: A tuple of integer specifying the slice (in bytes) DCNL of the archive you want to receive DCNL :type validate_checksum: bool DCNL :param validate_checksum: Specify whether or not to validate DCNL the associate tree hash.  If the response does not contain DCNL a TreeHash, then no checksum will be verified.'
def download_to_file(self, filename, chunk_size=DefaultPartSize, verify_hashes=True, retry_exceptions=(socket.error,)): DCNL 'Download an archive to a file by name. DCNL :type filename: str DCNL :param filename: The name of the file where the archive DCNL contents will be saved. DCNL :type chunk_size: int DCNL :param chunk_size: The chunk size to use when downloading DCNL the archive. DCNL :type verify_hashes: bool DCNL :param verify_hashes: Indicates whether or not to verify DCNL the tree hashes for each downloaded chunk.'
def download_to_fileobj(self, output_file, chunk_size=DefaultPartSize, verify_hashes=True, retry_exceptions=(socket.error,)): DCNL 'Download an archive to a file object. DCNL :type output_file: file DCNL :param output_file: The file object where the archive DCNL contents will be saved. DCNL :type chunk_size: int DCNL :param chunk_size: The chunk size to use when downloading DCNL the archive. DCNL :type verify_hashes: bool DCNL :param verify_hashes: Indicates whether or not to verify DCNL the tree hashes for each downloaded chunk.'
def list_vaults(self, limit=None, marker=None): DCNL 'This operation lists all vaults owned by the calling user\'s DCNL account. The list returned in the response is ASCII-sorted by DCNL vault name. DCNL By default, this operation returns up to 1,000 items. If there DCNL are more vaults to list, the response `marker` field contains DCNL the vault Amazon Resource Name (ARN) at which to continue the DCNL list with a new List Vaults request; otherwise, the `marker` DCNL field is `null`. To return a list of vaults that begins at a DCNL specific vault, set the `marker` request parameter to the DCNL vault ARN you obtained from a previous List Vaults request. DCNL You can also limit the number of vaults returned in the DCNL response by specifying the `limit` parameter in the request. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Retrieving Vault Metadata in Amazon Glacier`_ and `List DCNL Vaults `_ in the Amazon Glacier Developer Guide . DCNL :type marker: string DCNL :param marker: A string used for pagination. The marker specifies the DCNL vault ARN after which the listing of vaults should begin. DCNL :type limit: string DCNL :param limit: The maximum number of items returned in the response. If DCNL you don\'t specify a value, the List Vaults operation returns up to DCNL 1,000 items.'
def describe_vault(self, vault_name): DCNL 'This operation returns information about a vault, including DCNL the vault\'s Amazon Resource Name (ARN), the date the vault was DCNL created, the number of archives it contains, and the total DCNL size of all the archives in the vault. The number of archives DCNL and their total size are as of the last inventory generation. DCNL This means that if you add or remove an archive from a vault, DCNL and then immediately use Describe Vault, the change in DCNL contents will not be immediately reflected. If you want to DCNL retrieve the latest inventory of the vault, use InitiateJob. DCNL Amazon Glacier generates vault inventories approximately DCNL daily. For more information, see `Downloading a Vault DCNL Inventory in Amazon Glacier`_. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Retrieving Vault Metadata in Amazon Glacier`_ and `Describe DCNL Vault `_ in the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault.'
def create_vault(self, vault_name): DCNL 'This operation creates a new vault with the specified name. DCNL The name of the vault must be unique within a region for an DCNL AWS account. You can create up to 1,000 vaults per account. If DCNL you need to create more vaults, contact Amazon Glacier. DCNL You must use the following guidelines when naming a vault. DCNL + Names can be between 1 and 255 characters long. DCNL + Allowed characters are a-z, A-Z, 0-9, \'_\' (underscore), \'-\' DCNL (hyphen), and \'.\' (period). DCNL This operation is idempotent. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Creating a Vault in Amazon Glacier`_ and `Create Vault `_ in DCNL the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault.'
def delete_vault(self, vault_name): DCNL 'This operation deletes a vault. Amazon Glacier will delete a DCNL vault only if there are no archives in the vault as of the DCNL last inventory and there have been no writes to the vault DCNL since the last inventory. If either of these conditions is not DCNL satisfied, the vault deletion fails (that is, the vault is not DCNL removed) and Amazon Glacier returns an error. You can use DCNL DescribeVault to return the number of archives in a vault, and DCNL you can use `Initiate a Job (POST jobs)`_ to initiate a new DCNL inventory retrieval for a vault. The inventory contains the DCNL archive IDs you use to delete archives using `Delete Archive DCNL (DELETE archive)`_. DCNL This operation is idempotent. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Deleting a Vault in Amazon Glacier`_ and `Delete Vault `_ in DCNL the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault.'
def get_vault_notifications(self, vault_name): DCNL 'This operation retrieves the `notification-configuration` DCNL subresource of the specified vault. DCNL For information about setting a notification configuration on DCNL a vault, see SetVaultNotifications. If a notification DCNL configuration for a vault is not set, the operation returns a DCNL `404 Not Found` error. For more information about vault DCNL notifications, see `Configuring Vault Notifications in Amazon DCNL Glacier`_. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Configuring Vault Notifications in Amazon Glacier`_ and `Get DCNL Vault Notification Configuration `_ in the Amazon Glacier DCNL Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault.'
def set_vault_notifications(self, vault_name, notification_config): DCNL 'This operation configures notifications that will be sent when DCNL specific events happen to a vault. By default, you don\'t get DCNL any notifications. DCNL To configure vault notifications, send a PUT request to the DCNL `notification-configuration` subresource of the vault. The DCNL request should include a JSON document that provides an Amazon DCNL SNS topic and specific events for which you want Amazon DCNL Glacier to send notifications to the topic. DCNL Amazon SNS topics must grant permission to the vault to be DCNL allowed to publish notifications to the topic. You can DCNL configure a vault to publish a notification for the following DCNL vault events: DCNL + **ArchiveRetrievalCompleted** This event occurs when a job DCNL that was initiated for an archive retrieval is completed DCNL (InitiateJob). The status of the completed job can be DCNL "Succeeded" or "Failed". The notification sent to the SNS DCNL topic is the same output as returned from DescribeJob. DCNL + **InventoryRetrievalCompleted** This event occurs when a job DCNL that was initiated for an inventory retrieval is completed DCNL (InitiateJob). The status of the completed job can be DCNL "Succeeded" or "Failed". The notification sent to the SNS DCNL topic is the same output as returned from DescribeJob. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Configuring Vault Notifications in Amazon Glacier`_ and `Set DCNL Vault Notification Configuration `_ in the Amazon Glacier DCNL Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type vault_notification_config: dict DCNL :param vault_notification_config: Provides options for specifying DCNL notification configuration. DCNL The format of the dictionary is: DCNL {\'SNSTopic\': \'mytopic\', DCNL \'Events\': [event1,...]}'
def delete_vault_notifications(self, vault_name): DCNL 'This operation deletes the notification configuration set for DCNL a vault. The operation is eventually consistent;that is, it DCNL might take some time for Amazon Glacier to completely disable DCNL the notifications and you might still receive some DCNL notifications for a short time after you send the delete DCNL request. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Configuring Vault Notifications in Amazon Glacier`_ and DCNL `Delete Vault Notification Configuration `_ in the Amazon DCNL Glacier Developer Guide. DCNL :type vault_name: string DCNL :param vault_name: The name of the vault.'
def list_jobs(self, vault_name, completed=None, status_code=None, limit=None, marker=None): DCNL 'This operation lists jobs for a vault, including jobs that are DCNL in-progress and jobs that have recently finished. DCNL Amazon Glacier retains recently completed jobs for a period DCNL before deleting them; however, it eventually removes completed DCNL jobs. The output of completed jobs can be retrieved. Retaining DCNL completed jobs for a period of time after they have completed DCNL enables you to get a job output in the event you miss the job DCNL completion notification or your first attempt to download it DCNL fails. For example, suppose you start an archive retrieval job DCNL to download an archive. After the job completes, you start to DCNL download the archive but encounter a network error. In this DCNL scenario, you can retry and download the archive while the job DCNL exists. DCNL To retrieve an archive or retrieve a vault inventory from DCNL Amazon Glacier, you first initiate a job, and after the job DCNL completes, you download the data. For an archive retrieval, DCNL the output is the archive data, and for an inventory DCNL retrieval, it is the inventory list. The List Job operation DCNL returns a list of these jobs sorted by job initiation time. DCNL This List Jobs operation supports pagination. By default, this DCNL operation returns up to 1,000 jobs in the response. You should DCNL always check the response for a `marker` at which to continue DCNL the list; if there are no more items the `marker` is `null`. DCNL To return a list of jobs that begins at a specific job, set DCNL the `marker` request parameter to the value you obtained from DCNL a previous List Jobs request. You can also limit the number of DCNL jobs returned in the response by specifying the `limit` DCNL parameter in the request. DCNL Additionally, you can filter the jobs list returned by DCNL specifying an optional `statuscode` (InProgress, Succeeded, or DCNL Failed) and `completed` (true, false) parameter. The DCNL `statuscode` allows you to specify that only jobs that match a DCNL specified status are returned. The `completed` parameter DCNL allows you to specify that only jobs in a specific completion DCNL state are returned. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For the underlying REST API, go to `List Jobs `_ DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type limit: string DCNL :param limit: Specifies that the response be limited to the specified DCNL number of items or fewer. If not specified, the List Jobs operation DCNL returns up to 1,000 jobs. DCNL :type marker: string DCNL :param marker: An opaque string used for pagination. This value DCNL specifies the job at which the listing of jobs should begin. Get DCNL the marker value from a previous List Jobs response. You need only DCNL include the marker if you are continuing the pagination of results DCNL started in a previous List Jobs request. DCNL :type statuscode: string DCNL :param statuscode: Specifies the type of job status to return. You can DCNL specify the following values: "InProgress", "Succeeded", or DCNL "Failed". DCNL :type completed: string DCNL :param completed: Specifies the state of the jobs to return. You can DCNL specify `True` or `False`.'
def describe_job(self, vault_name, job_id): DCNL 'This operation returns information about a job you previously DCNL initiated, including the job initiation date, the user who DCNL initiated the job, the job status code/message and the Amazon DCNL SNS topic to notify after Amazon Glacier completes the job. DCNL For more information about initiating a job, see InitiateJob. DCNL This operation enables you to check the status of your job. DCNL However, it is strongly recommended that you set up an Amazon DCNL SNS topic and specify it in your initiate job request so that DCNL Amazon Glacier can notify the topic after it completes the DCNL job. DCNL A job ID will not expire for at least 24 hours after Amazon DCNL Glacier completes the job. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For information about the underlying REST API, go to `Working DCNL with Archives in Amazon Glacier`_ in the Amazon Glacier DCNL Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type job_id: string DCNL :param job_id: The ID of the job to describe.'
def initiate_job(self, vault_name, job_data): DCNL 'This operation initiates a job of the specified type. In this DCNL release, you can initiate a job to retrieve either an archive DCNL or a vault inventory (a list of archives in a vault). DCNL Retrieving data from Amazon Glacier is a two-step process: DCNL #. Initiate a retrieval job. DCNL #. After the job completes, download the bytes. DCNL The retrieval request is executed asynchronously. When you DCNL initiate a retrieval job, Amazon Glacier creates a job and DCNL returns a job ID in the response. When Amazon Glacier DCNL completes the job, you can get the job output (archive or DCNL inventory data). For information about getting job output, see DCNL GetJobOutput operation. DCNL The job must complete before you can get its output. To DCNL determine when a job is complete, you have the following DCNL options: DCNL + **Use Amazon SNS Notification** You can specify an Amazon DCNL Simple Notification Service (Amazon SNS) topic to which Amazon DCNL Glacier can post a notification after the job is completed. DCNL You can specify an SNS topic per job request. The notification DCNL is sent only after Amazon Glacier completes the job. In DCNL addition to specifying an SNS topic per job request, you can DCNL configure vault notifications for a vault so that job DCNL notifications are always sent. For more information, see DCNL SetVaultNotifications. DCNL + **Get job details** You can make a DescribeJob request to DCNL obtain job status information while a job is in progress. DCNL However, it is more efficient to use an Amazon SNS DCNL notification to determine when a job is complete. DCNL The information you get via notification is same that you get DCNL by calling DescribeJob. DCNL If for a specific event, you add both the notification DCNL configuration on the vault and also specify an SNS topic in DCNL your initiate job request, Amazon Glacier sends both DCNL notifications. For more information, see DCNL SetVaultNotifications. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL **About the Vault Inventory** DCNL Amazon Glacier prepares an inventory for each vault DCNL periodically, every 24 hours. When you initiate a job for a DCNL vault inventory, Amazon Glacier returns the last inventory for DCNL the vault. The inventory data you get might be up to a day or DCNL two days old. Also, the initiate inventory job might take some DCNL time to complete before you can download the vault inventory. DCNL So you do not want to retrieve a vault inventory for each DCNL vault operation. However, in some scenarios, you might find DCNL the vault inventory useful. For example, when you upload an DCNL archive, you can provide an archive description but not an DCNL archive name. Amazon Glacier provides you a unique archive ID, DCNL an opaque string of characters. So, you might maintain your DCNL own database that maps archive names to their corresponding DCNL Amazon Glacier assigned archive IDs. You might find the vault DCNL inventory useful in the event you need to reconcile DCNL information in your database with the actual vault inventory. DCNL **About Ranged Archive Retrieval** DCNL You can initiate an archive retrieval for the whole archive or DCNL a range of the archive. In the case of ranged archive DCNL retrieval, you specify a byte range to return or the whole DCNL archive. The range specified must be megabyte (MB) aligned, DCNL that is the range start value must be divisible by 1 MB and DCNL range end value plus 1 must be divisible by 1 MB or equal the DCNL end of the archive. If the ranged archive retrieval is not DCNL megabyte aligned, this operation returns a 400 response. DCNL Furthermore, to ensure you get checksum values for data you DCNL download using Get Job Output API, the range must be tree hash DCNL aligned. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and the underlying REST API, go to DCNL `Initiate a Job`_ and `Downloading a Vault Inventory`_ DCNL :type account_id: string DCNL :param account_id: The `AccountId` is the AWS Account ID. You can DCNL specify either the AWS Account ID or optionally a \'-\', in which DCNL case Amazon Glacier uses the AWS Account ID associated with the DCNL credentials used to sign the request. If you specify your Account DCNL ID, do not include hyphens in it. DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type job_parameters: dict DCNL :param job_parameters: Provides options for specifying job information. DCNL The dictionary can contain the following attributes: DCNL * ArchiveId - The ID of the archive you want to retrieve. DCNL This field is required only if the Type is set to DCNL archive-retrieval. DCNL * Description - The optional description for the job. DCNL * Format - When initiating a job to retrieve a vault DCNL inventory, you can optionally add this parameter to DCNL specify the output format.  Valid values are: CSV|JSON. DCNL * SNSTopic - The Amazon SNS topic ARN where Amazon Glacier DCNL sends a notification when the job is completed and the DCNL output is ready for you to download. DCNL * Type - The job type.  Valid values are: DCNL archive-retrieval|inventory-retrieval DCNL * RetrievalByteRange - Optionally specify the range of DCNL bytes to retrieve. DCNL * InventoryRetrievalParameters: Optional job parameters DCNL * Format - The output format, like "JSON" DCNL * StartDate - ISO8601 starting date string DCNL * EndDate - ISO8601 ending date string DCNL * Limit - Maximum number of entries DCNL * Marker - A unique string used for pagination'
def get_job_output(self, vault_name, job_id, byte_range=None): DCNL 'This operation downloads the output of the job you initiated DCNL using InitiateJob. Depending on the job type you specified DCNL when you initiated the job, the output will be either the DCNL content of an archive or a vault inventory. DCNL A job ID will not expire for at least 24 hours after Amazon DCNL Glacier completes the job. That is, you can download the job DCNL output within the 24 hours period after Amazon Glacier DCNL completes the job. DCNL If the job output is large, then you can use the `Range` DCNL request header to retrieve a portion of the output. This DCNL allows you to download the entire output in smaller chunks of DCNL bytes. For example, suppose you have 1 GB of job output you DCNL want to download and you decide to download 128 MB chunks of DCNL data at a time, which is a total of eight Get Job Output DCNL requests. You use the following process to download the job DCNL output: DCNL #. Download a 128 MB chunk of output by specifying the DCNL appropriate byte range using the `Range` header. DCNL #. Along with the data, the response includes a checksum of DCNL the payload. You compute the checksum of the payload on the DCNL client and compare it with the checksum you received in the DCNL response to ensure you received all the expected data. DCNL #. Repeat steps 1 and 2 for all the eight 128 MB chunks of DCNL output data, each time specifying the appropriate byte range. DCNL #. After downloading all the parts of the job output, you have DCNL a list of eight checksum values. Compute the tree hash of DCNL these values to find the checksum of the entire output. Using DCNL the Describe Job API, obtain job information of the job that DCNL provided you the output. The response includes the checksum of DCNL the entire archive stored in Amazon Glacier. You compare this DCNL value with the checksum you computed to ensure you have DCNL downloaded the entire archive content with no errors. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and the underlying REST API, go to DCNL `Downloading a Vault Inventory`_, `Downloading an Archive`_, DCNL and `Get Job Output `_ DCNL :type account_id: string DCNL :param account_id: The `AccountId` is the AWS Account ID. You can DCNL specify either the AWS Account ID or optionally a \'-\', in which DCNL case Amazon Glacier uses the AWS Account ID associated with the DCNL credentials used to sign the request. If you specify your Account DCNL ID, do not include hyphens in it. DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type job_id: string DCNL :param job_id: The job ID whose data is downloaded. DCNL :type byte_range: string DCNL :param byte_range: The range of bytes to retrieve from the output. For DCNL example, if you want to download the first 1,048,576 bytes, specify DCNL "Range: bytes=0-1048575". By default, this operation downloads the DCNL entire output.'
def upload_archive(self, vault_name, archive, linear_hash, tree_hash, description=None): DCNL 'This operation adds an archive to a vault. This is a DCNL synchronous operation, and for a successful upload, your data DCNL is durably persisted. Amazon Glacier returns the archive ID in DCNL the `x-amz-archive-id` header of the response. DCNL You must use the archive ID to access your data in Amazon DCNL Glacier. After you upload an archive, you should save the DCNL archive ID returned so that you can retrieve or delete the DCNL archive later. Besides saving the archive ID, you can also DCNL index it and give it a friendly name to allow for better DCNL searching. You can also use the optional archive description DCNL field to specify how the archive is referred to in an external DCNL index of archives, such as you might create in Amazon DCNL DynamoDB. You can also get the vault inventory to obtain a DCNL list of archive IDs in a vault. For more information, see DCNL InitiateJob. DCNL You must provide a SHA256 tree hash of the data you are DCNL uploading. For information about computing a SHA256 tree hash, DCNL see `Computing Checksums`_. DCNL You can optionally specify an archive description of up to DCNL 1,024 printable ASCII characters. You can get the archive DCNL description when you either retrieve the archive or get the DCNL vault inventory. For more information, see InitiateJob. Amazon DCNL Glacier does not interpret the description in any way. An DCNL archive description does not need to be unique. You cannot use DCNL the description to retrieve or sort the archive list. DCNL Archives are immutable. After you upload an archive, you DCNL cannot edit the archive or its description. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Uploading an Archive in Amazon Glacier`_ and `Upload DCNL Archive`_ in the Amazon Glacier Developer Guide . DCNL :type vault_name: str DCNL :param vault_name: The name of the vault DCNL :type archive: bytes DCNL :param archive: The data to upload. DCNL :type linear_hash: str DCNL :param linear_hash: The SHA256 checksum (a linear hash) of the DCNL payload. DCNL :type tree_hash: str DCNL :param tree_hash: The user-computed SHA256 tree hash of the DCNL payload.  For more information on computing the DCNL tree hash, see http://goo.gl/u7chF. DCNL :type description: str DCNL :param description: The optional description of the archive you DCNL are uploading.'
def delete_archive(self, vault_name, archive_id): DCNL 'This operation deletes an archive from a vault. Subsequent DCNL requests to initiate a retrieval of this archive will fail. DCNL Archive retrievals that are in progress for this archive ID DCNL may or may not succeed according to the following scenarios: DCNL + If the archive retrieval job is actively preparing the data DCNL for download when Amazon Glacier receives the delete archive DCNL request, the archival retrieval operation might fail. DCNL + If the archive retrieval job has successfully prepared the DCNL archive for download when Amazon Glacier receives the delete DCNL archive request, you will be able to download the output. DCNL This operation is idempotent. Attempting to delete an already- DCNL deleted archive does not result in an error. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Deleting an Archive in Amazon Glacier`_ and `Delete Archive`_ DCNL in the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type archive_id: string DCNL :param archive_id: The ID of the archive to delete.'
def initiate_multipart_upload(self, vault_name, part_size, description=None): DCNL 'This operation initiates a multipart upload. Amazon Glacier DCNL creates a multipart upload resource and returns its ID in the DCNL response. The multipart upload ID is used in subsequent DCNL requests to upload parts of an archive (see DCNL UploadMultipartPart). DCNL When you initiate a multipart upload, you specify the part DCNL size in number of bytes. The part size must be a megabyte DCNL (1024 KB) multiplied by a power of 2-for example, 1048576 (1 DCNL MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so DCNL on. The minimum allowable part size is 1 MB, and the maximum DCNL is 4 GB. DCNL Every part you upload to this resource (see DCNL UploadMultipartPart), except the last one, must have the same DCNL size. The last one can be the same size or smaller. For DCNL example, suppose you want to upload a 16.2 MB file. If you DCNL initiate the multipart upload with a part size of 4 MB, you DCNL will upload four parts of 4 MB each and one part of 0.2 MB. DCNL You don\'t need to know the size of the archive when you start DCNL a multipart upload because Amazon Glacier does not require you DCNL to specify the overall archive size. DCNL After you complete the multipart upload, Amazon Glacier DCNL removes the multipart upload resource referenced by the ID. DCNL Amazon Glacier also removes the multipart upload resource if DCNL you cancel the multipart upload or it may be removed if there DCNL is no activity for a period of 24 hours. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Uploading Large Archives in Parts (Multipart Upload)`_ and DCNL `Initiate Multipart Upload`_ in the Amazon Glacier Developer DCNL Guide . DCNL The part size must be a megabyte (1024 KB) multiplied by a power of DCNL 2, for example, 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), DCNL 8388608 (8 MB), and so on. The minimum allowable part size is 1 MB, DCNL and the maximum is 4 GB (4096 MB). DCNL :type vault_name: str DCNL :param vault_name: The name of the vault. DCNL :type description: str DCNL :param description: The archive description that you are uploading in DCNL parts. DCNL :type part_size: int DCNL :param part_size: The size of each part except the last, in bytes. The DCNL last part can be smaller than this part size.'
def complete_multipart_upload(self, vault_name, upload_id, sha256_treehash, archive_size): DCNL 'You call this operation to inform Amazon Glacier that all the DCNL archive parts have been uploaded and that Amazon Glacier can DCNL now assemble the archive from the uploaded parts. After DCNL assembling and saving the archive to the vault, Amazon Glacier DCNL returns the URI path of the newly created archive resource. DCNL Using the URI path, you can then access the archive. After you DCNL upload an archive, you should save the archive ID returned to DCNL retrieve the archive at a later point. You can also get the DCNL vault inventory to obtain a list of archive IDs in a vault. DCNL For more information, see InitiateJob. DCNL In the request, you must include the computed SHA256 tree hash DCNL of the entire archive you have uploaded. For information about DCNL computing a SHA256 tree hash, see `Computing Checksums`_. On DCNL the server side, Amazon Glacier also constructs the SHA256 DCNL tree hash of the assembled archive. If the values match, DCNL Amazon Glacier saves the archive to the vault; otherwise, it DCNL returns an error, and the operation fails. The ListParts DCNL operation returns a list of parts uploaded for a specific DCNL multipart upload. It includes checksum information for each DCNL uploaded part that can be used to debug a bad checksum issue. DCNL Additionally, Amazon Glacier also checks for any missing DCNL content ranges when assembling the archive, if missing content DCNL ranges are found, Amazon Glacier returns an error and the DCNL operation fails. DCNL Complete Multipart Upload is an idempotent operation. After DCNL your first successful complete multipart upload, if you call DCNL the operation again within a short period, the operation will DCNL succeed and return the same archive ID. This is useful in the DCNL event you experience a network issue that causes an aborted DCNL connection or receive a 500 server error, in which case you DCNL can repeat your Complete Multipart Upload request and get the DCNL same archive ID without creating duplicate archives. Note, DCNL however, that after the multipart upload completes, you cannot DCNL call the List Parts operation and the multipart upload will DCNL not appear in List Multipart Uploads response, even if DCNL idempotent complete is possible. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Uploading Large Archives in Parts (Multipart Upload)`_ and DCNL `Complete Multipart Upload`_ in the Amazon Glacier Developer DCNL Guide . DCNL :type checksum: string DCNL :param checksum: The SHA256 tree hash of the entire archive. It is the DCNL tree hash of SHA256 tree hash of the individual parts. If the value DCNL you specify in the request does not match the SHA256 tree hash of DCNL the final assembled archive as computed by Amazon Glacier, Amazon DCNL Glacier returns an error and the request fails. DCNL :type vault_name: str DCNL :param vault_name: The name of the vault. DCNL :type upload_id: str DCNL :param upload_id: The upload ID of the multipart upload. DCNL :type sha256_treehash: str DCNL :param sha256_treehash: The SHA256 tree hash of the entire archive. DCNL It is the tree hash of SHA256 tree hash of the individual parts. DCNL If the value you specify in the request does not match the SHA256 DCNL tree hash of the final assembled archive as computed by Amazon DCNL Glacier, Amazon Glacier returns an error and the request fails. DCNL :type archive_size: int DCNL :param archive_size: The total size, in bytes, of the entire DCNL archive. This value should be the sum of all the sizes of DCNL the individual parts that you uploaded.'
def abort_multipart_upload(self, vault_name, upload_id): DCNL 'This operation aborts a multipart upload identified by the DCNL upload ID. DCNL After the Abort Multipart Upload request succeeds, you cannot DCNL upload any more parts to the multipart upload or complete the DCNL multipart upload. Aborting a completed upload fails. However, DCNL aborting an already-aborted upload will succeed, for a short DCNL time. For more information about uploading a part and DCNL completing a multipart upload, see UploadMultipartPart and DCNL CompleteMultipartUpload. DCNL This operation is idempotent. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Working with Archives in Amazon Glacier`_ and `Abort DCNL Multipart Upload`_ in the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type upload_id: string DCNL :param upload_id: The upload ID of the multipart upload to delete.'
def list_multipart_uploads(self, vault_name, limit=None, marker=None): DCNL 'This operation lists in-progress multipart uploads for the DCNL specified vault. An in-progress multipart upload is a DCNL multipart upload that has been initiated by an DCNL InitiateMultipartUpload request, but has not yet been DCNL completed or aborted. The list returned in the List Multipart DCNL Upload response has no guaranteed order. DCNL The List Multipart Uploads operation supports pagination. By DCNL default, this operation returns up to 1,000 multipart uploads DCNL in the response. You should always check the response for a DCNL `marker` at which to continue the list; if there are no more DCNL items the `marker` is `null`. To return a list of multipart DCNL uploads that begins at a specific upload, set the `marker` DCNL request parameter to the value you obtained from a previous DCNL List Multipart Upload request. You can also limit the number DCNL of uploads returned in the response by specifying the `limit` DCNL parameter in the request. DCNL Note the difference between this operation and listing parts DCNL (ListParts). The List Multipart Uploads operation lists all DCNL multipart uploads for a vault and does not require a multipart DCNL upload ID. The List Parts operation requires a multipart DCNL upload ID since parts are associated with a single upload. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and the underlying REST API, go to DCNL `Working with Archives in Amazon Glacier`_ and `List Multipart DCNL Uploads `_ in the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type limit: string DCNL :param limit: Specifies the maximum number of uploads returned in the DCNL response body. If this value is not specified, the List Uploads DCNL operation returns up to 1,000 uploads. DCNL :type marker: string DCNL :param marker: An opaque string used for pagination. This value DCNL specifies the upload at which the listing of uploads should begin. DCNL Get the marker value from a previous List Uploads response. You DCNL need only include the marker if you are continuing the pagination DCNL of results started in a previous List Uploads request.'
def list_parts(self, vault_name, upload_id, limit=None, marker=None): DCNL 'This operation lists the parts of an archive that have been DCNL uploaded in a specific multipart upload. You can make this DCNL request at any time during an in-progress multipart upload DCNL before you complete the upload (see CompleteMultipartUpload. DCNL List Parts returns an error for completed uploads. The list DCNL returned in the List Parts response is sorted by part range. DCNL The List Parts operation supports pagination. By default, this DCNL operation returns up to 1,000 uploaded parts in the response. DCNL You should always check the response for a `marker` at which DCNL to continue the list; if there are no more items the `marker` DCNL is `null`. To return a list of parts that begins at a specific DCNL part, set the `marker` request parameter to the value you DCNL obtained from a previous List Parts request. You can also DCNL limit the number of parts returned in the response by DCNL specifying the `limit` parameter in the request. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and the underlying REST API, go to DCNL `Working with Archives in Amazon Glacier`_ and `List Parts`_ DCNL in the Amazon Glacier Developer Guide . DCNL :type vault_name: string DCNL :param vault_name: The name of the vault. DCNL :type upload_id: string DCNL :param upload_id: The upload ID of the multipart upload. DCNL :type marker: string DCNL :param marker: An opaque string used for pagination. This value DCNL specifies the part at which the listing of parts should begin. Get DCNL the marker value from the response of a previous List Parts DCNL response. You need only include the marker if you are continuing DCNL the pagination of results started in a previous List Parts request. DCNL :type limit: string DCNL :param limit: Specifies the maximum number of parts returned in the DCNL response body. If this value is not specified, the List Parts DCNL operation returns up to 1,000 uploads.'
def upload_part(self, vault_name, upload_id, linear_hash, tree_hash, byte_range, part_data): DCNL 'This operation uploads a part of an archive. You can upload DCNL archive parts in any order. You can also upload them in DCNL parallel. You can upload up to 10,000 parts for a multipart DCNL upload. DCNL Amazon Glacier rejects your upload part request if any of the DCNL following conditions is true: DCNL + **SHA256 tree hash does not match**To ensure that part data DCNL is not corrupted in transmission, you compute a SHA256 tree DCNL hash of the part and include it in your request. Upon DCNL receiving the part data, Amazon Glacier also computes a SHA256 DCNL tree hash. If these hash values don\'t match, the operation DCNL fails. For information about computing a SHA256 tree hash, see DCNL `Computing Checksums`_. DCNL + **Part size does not match**The size of each part except the DCNL last must match the size specified in the corresponding DCNL InitiateMultipartUpload request. The size of the last part DCNL must be the same size as, or smaller than, the specified size. DCNL If you upload a part whose size is smaller than the part size DCNL you specified in your initiate multipart upload request and DCNL that part is not the last part, then the upload part request DCNL will succeed. However, the subsequent Complete Multipart DCNL Upload request will fail. DCNL + **Range does not align**The byte range value in the request DCNL does not align with the part size specified in the DCNL corresponding initiate request. For example, if you specify a DCNL part size of 4194304 bytes (4 MB), then 0 to 4194303 bytes (4 DCNL MB - 1) and 4194304 (4 MB) to 8388607 (8 MB - 1) are valid DCNL part ranges. However, if you set a range value of 2 MB to 6 DCNL MB, the range does not align with the part size and the upload DCNL will fail. DCNL This operation is idempotent. If you upload the same part DCNL multiple times, the data included in the most recent request DCNL overwrites the previously uploaded data. DCNL An AWS account has full permission to perform all operations DCNL (actions). However, AWS Identity and Access Management (IAM) DCNL users don\'t have any permissions by default. You must grant DCNL them explicit permission to perform specific actions. For more DCNL information, see `Access Control Using AWS Identity and Access DCNL Management (IAM)`_. DCNL For conceptual information and underlying REST API, go to DCNL `Uploading Large Archives in Parts (Multipart Upload)`_ and DCNL `Upload Part `_ in the Amazon Glacier Developer Guide . DCNL :type vault_name: str DCNL :param vault_name: The name of the vault. DCNL :type linear_hash: str DCNL :param linear_hash: The SHA256 checksum (a linear hash) of the DCNL payload. DCNL :type tree_hash: str DCNL :param tree_hash: The user-computed SHA256 tree hash of the DCNL payload.  For more information on computing the DCNL tree hash, see http://goo.gl/u7chF. DCNL :type upload_id: str DCNL :param upload_id: The unique ID associated with this upload DCNL operation. DCNL :type byte_range: tuple of ints DCNL :param byte_range: Identifies the range of bytes in the assembled DCNL archive that will be uploaded in this part. Amazon Glacier uses DCNL this information to assemble the archive in the proper sequence. DCNL The format of this header follows RFC 2616. An example header is DCNL Content-Range:bytes 0-4194303/*. DCNL :type part_data: bytes DCNL :param part_data: The data to be uploaded for the part'
def __init__(self, api, vault_name, part_size=DEFAULT_PART_SIZE, num_threads=10): DCNL ':type api: :class:`boto.glacier.layer1.Layer1` DCNL :param api: A layer1 glacier object. DCNL :type vault_name: str DCNL :param vault_name: The name of the vault. DCNL :type part_size: int DCNL :param part_size: The size, in bytes, of the chunks to use when uploading DCNL the archive parts.  The part size must be a megabyte multiplied by DCNL a power of two. DCNL :type num_threads: int DCNL :param num_threads: The number of threads to spawn for the thread pool. DCNL The number of threads will control how much parts are being DCNL concurrently uploaded.'
def upload(self, filename, description=None): DCNL 'Concurrently create an archive. DCNL The part_size value specified when the class was constructed DCNL will be used *unless* it is smaller than the minimum required DCNL part size needed for the size of the given file.  In that case, DCNL the part size used will be the minimum part size required DCNL to properly upload the given file. DCNL :type file: str DCNL :param file: The filename to upload DCNL :type description: str DCNL :param description: The description of the archive. DCNL :rtype: str DCNL :return: The archive id of the newly created archive.'
def __init__(self, job, part_size=DEFAULT_PART_SIZE, num_threads=10): DCNL ':param job: A layer2 job object for archive retrieval object. DCNL :param part_size: The size, in bytes, of the chunks to use when uploading DCNL the archive parts.  The part size must be a megabyte multiplied by DCNL a power of two.'
def download(self, filename): DCNL 'Concurrently download an archive. DCNL :param filename: The filename to download the archive to DCNL :type filename: str'
def _wait_for_download_threads(self, filename, result_queue, total_parts): DCNL 'Waits until the result_queue is filled with all the downloaded parts DCNL This indicates that all part downloads have completed DCNL Saves downloaded parts into filename DCNL :param filename: DCNL :param result_queue: DCNL :param total_parts:'
def __init__(self, job, worker_queue, result_queue, num_retries=5, time_between_retries=5, retry_exceptions=Exception): DCNL 'Individual download thread that will download parts of the file from Glacier. Parts DCNL to download stored in work queue. DCNL Parts download to a temp dir with each part a separate file DCNL :param job: Glacier job object DCNL :param work_queue: A queue of tuples which include the part_number and DCNL part_size DCNL :param result_queue: A priority queue of tuples which include the DCNL part_number and the path to the temp file that holds that DCNL part\'s data.'
def _process_chunk(self, work): DCNL 'Attempt to download a part of the archive from Glacier DCNL Store the result in the result_queue DCNL :param work:'
def _download_chunk(self, work): DCNL 'Downloads a chunk of archive from Glacier. Saves the data to a temp file DCNL Returns the part number and temp file location DCNL :param work:'
def create_vault(self, name): DCNL 'Creates a vault. DCNL :type name: str DCNL :param name: The name of the vault DCNL :rtype: :class:`boto.glacier.vault.Vault` DCNL :return: A Vault object representing the vault.'
def delete_vault(self, name): DCNL 'Delete a vault. DCNL This operation deletes a vault. Amazon Glacier will delete a DCNL vault only if there are no archives in the vault as per the DCNL last inventory and there have been no writes to the vault DCNL since the last inventory. If either of these conditions is not DCNL satisfied, the vault deletion fails (that is, the vault is not DCNL removed) and Amazon Glacier returns an error. DCNL This operation is idempotent, you can send the same request DCNL multiple times and it has no further effect after the first DCNL time Amazon Glacier delete the specified vault. DCNL :type vault_name: str DCNL :param vault_name: The name of the vault to delete.'
def get_vault(self, name): DCNL 'Get an object representing a named vault from Glacier. This DCNL operation does not check if the vault actually exists. DCNL :type name: str DCNL :param name: The name of the vault DCNL :rtype: :class:`boto.glacier.vault.Vault` DCNL :return: A Vault object representing the vault.'
def list_vaults(self): DCNL 'Return a list of all vaults associated with the account ID. DCNL :rtype: List of :class:`boto.glacier.vault.Vault` DCNL :return: A list of Vault objects.'
def upload_part(self, part_index, part_data): DCNL 'Upload a part to Glacier. DCNL :param part_index: part number where 0 is the first part DCNL :param part_data: data to upload corresponding to this part'
def skip_part(self, part_index, part_tree_hash, part_length): DCNL 'Skip uploading of a part. DCNL The final close call needs to calculate the tree hash and total size DCNL of all uploaded data, so this is the mechanism for resume DCNL functionality to provide it without actually uploading the data again. DCNL :param part_index: part number where 0 is the first part DCNL :param part_tree_hash: binary tree_hash of part being skipped DCNL :param part_length: length of part being skipped'
@property DCNL def current_tree_hash(self): DCNL 'Returns the current tree hash for the data that\'s been written DCNL **so far**. DCNL Only once the writing is complete is the final tree hash returned.'
@property DCNL def current_uploaded_size(self): DCNL 'Returns the current uploaded size for the data that\'s been written DCNL **so far**. DCNL Only once the writing is complete is the final uploaded size returned.'
def activate_pipeline(self, pipeline_id): DCNL 'Validates a pipeline and initiates processing. If the pipeline DCNL does not pass validation, activation fails. DCNL Call this action to start processing pipeline tasks of a DCNL pipeline you\'ve created using the CreatePipeline and DCNL PutPipelineDefinition actions. A pipeline cannot be modified DCNL after it has been successfully activated. DCNL :type pipeline_id: string DCNL :param pipeline_id: The identifier of the pipeline to activate.'
def create_pipeline(self, name, unique_id, description=None): DCNL 'Creates a new empty pipeline. When this action succeeds, you DCNL can then use the PutPipelineDefinition action to populate the DCNL pipeline. DCNL :type name: string DCNL :param name: The name of the new pipeline. You can use the same name DCNL for multiple pipelines associated with your AWS account, because DCNL AWS Data Pipeline assigns each new pipeline a unique pipeline DCNL identifier. DCNL :type unique_id: string DCNL :param unique_id: A unique identifier that you specify. This identifier DCNL is not the same as the pipeline identifier assigned by AWS Data DCNL Pipeline. You are responsible for defining the format and ensuring DCNL the uniqueness of this identifier. You use this parameter to ensure DCNL idempotency during repeated calls to CreatePipeline. For example, DCNL if the first call to CreatePipeline does not return a clear DCNL success, you can pass in the same unique identifier and pipeline DCNL name combination on a subsequent call to CreatePipeline. DCNL CreatePipeline ensures that if a pipeline already exists with the DCNL same name and unique identifier, a new pipeline will not be DCNL created. Instead, you\'ll receive the pipeline identifier from the DCNL previous attempt. The uniqueness of the name and unique identifier DCNL combination is scoped to the AWS account or IAM user credentials. DCNL :type description: string DCNL :param description: The description of the new pipeline.'
def delete_pipeline(self, pipeline_id): DCNL 'Permanently deletes a pipeline, its pipeline definition and DCNL its run history. You cannot query or restore a deleted DCNL pipeline. AWS Data Pipeline will attempt to cancel instances DCNL associated with the pipeline that are currently being DCNL processed by task runners. Deleting a pipeline cannot be DCNL undone. DCNL To temporarily pause a pipeline instead of deleting it, call DCNL SetStatus with the status set to Pause on individual DCNL components. Components that are paused by SetStatus can be DCNL resumed. DCNL :type pipeline_id: string DCNL :param pipeline_id: The identifier of the pipeline to be deleted.'
def describe_objects(self, object_ids, pipeline_id, marker=None, evaluate_expressions=None): DCNL 'Returns the object definitions for a set of objects associated DCNL with the pipeline. Object definitions are composed of a set of DCNL fields that define the properties of the object. DCNL :type pipeline_id: string DCNL :param pipeline_id: Identifier of the pipeline that contains the object DCNL definitions. DCNL :type object_ids: list DCNL :param object_ids: Identifiers of the pipeline objects that contain the DCNL definitions to be described. You can pass as many as 25 identifiers DCNL in a single call to DescribeObjects. DCNL :type evaluate_expressions: boolean DCNL :param evaluate_expressions: Indicates whether any expressions in the DCNL object should be evaluated when the object descriptions are DCNL returned. DCNL :type marker: string DCNL :param marker: The starting point for the results to be returned. The DCNL first time you call DescribeObjects, this value should be empty. As DCNL long as the action returns `HasMoreResults` as `True`, you can call DCNL DescribeObjects again and pass the marker value from the response DCNL to retrieve the next set of results.'
def describe_pipelines(self, pipeline_ids): DCNL 'Retrieve metadata about one or more pipelines. The information DCNL retrieved includes the name of the pipeline, the pipeline DCNL identifier, its current state, and the user account that owns DCNL the pipeline. Using account credentials, you can retrieve DCNL metadata about pipelines that you or your IAM users have DCNL created. If you are using an IAM user account, you can DCNL retrieve metadata about only those pipelines you have read DCNL permission for. DCNL To retrieve the full pipeline definition instead of metadata DCNL about the pipeline, call the GetPipelineDefinition action. DCNL :type pipeline_ids: list DCNL :param pipeline_ids: Identifiers of the pipelines to describe. You can DCNL pass as many as 25 identifiers in a single call to DCNL DescribePipelines. You can obtain pipeline identifiers by calling DCNL ListPipelines.'
def evaluate_expression(self, pipeline_id, expression, object_id): DCNL 'Evaluates a string in the context of a specified object. A DCNL task runner can use this action to evaluate SQL queries stored DCNL in Amazon S3. DCNL :type pipeline_id: string DCNL :param pipeline_id: The identifier of the pipeline. DCNL :type object_id: string DCNL :param object_id: The identifier of the object. DCNL :type expression: string DCNL :param expression: The expression to evaluate.'
def get_pipeline_definition(self, pipeline_id, version=None): DCNL 'Returns the definition of the specified pipeline. You can call DCNL GetPipelineDefinition to retrieve the pipeline definition you DCNL provided using PutPipelineDefinition. DCNL :type pipeline_id: string DCNL :param pipeline_id: The identifier of the pipeline. DCNL :type version: string DCNL :param version: The version of the pipeline definition to retrieve. DCNL This parameter accepts the values `latest` (default) and `active`. DCNL Where `latest` indicates the last definition saved to the pipeline DCNL and `active` indicates the last definition of the pipeline that was DCNL activated.'
def list_pipelines(self, marker=None): DCNL 'Returns a list of pipeline identifiers for all active DCNL pipelines. Identifiers are returned only for pipelines you DCNL have permission to access. DCNL :type marker: string DCNL :param marker: The starting point for the results to be returned. The DCNL first time you call ListPipelines, this value should be empty. As DCNL long as the action returns `HasMoreResults` as `True`, you can call DCNL ListPipelines again and pass the marker value from the response to DCNL retrieve the next set of results.'
def poll_for_task(self, worker_group, hostname=None, instance_identity=None): DCNL 'Task runners call this action to receive a task to perform DCNL from AWS Data Pipeline. The task runner specifies which tasks DCNL it can perform by setting a value for the workerGroup DCNL parameter of the PollForTask call. The task returned by DCNL PollForTask may come from any of the pipelines that match the DCNL workerGroup value passed in by the task runner and that was DCNL launched using the IAM user credentials specified by the task DCNL runner. DCNL If tasks are ready in the work queue, PollForTask returns a DCNL response immediately. If no tasks are available in the queue, DCNL PollForTask uses long-polling and holds on to a poll DCNL connection for up to a 90 seconds during which time the first DCNL newly scheduled task is handed to the task runner. To DCNL accomodate this, set the socket timeout in your task runner to DCNL 90 seconds. The task runner should not call PollForTask again DCNL on the same `workerGroup` until it receives a response, and DCNL this may take up to 90 seconds. DCNL :type worker_group: string DCNL :param worker_group: Indicates the type of task the task runner is DCNL configured to accept and process. The worker group is set as a DCNL field on objects in the pipeline when they are created. You can DCNL only specify a single value for `workerGroup` in the call to DCNL PollForTask. There are no wildcard values permitted in DCNL `workerGroup`, the string must be an exact, case-sensitive, match. DCNL :type hostname: string DCNL :param hostname: The public DNS name of the calling task runner. DCNL :type instance_identity: dict DCNL :param instance_identity: Identity information for the Amazon EC2 DCNL instance that is hosting the task runner. You can get this value by DCNL calling the URI, `http://169.254.169.254/latest/meta-data/instance- DCNL id`, from the EC2 instance. For more information, go to `Instance DCNL Metadata`_ in the Amazon Elastic Compute Cloud User Guide. Passing DCNL in this value proves that your task runner is running on an EC2 DCNL instance, and ensures the proper AWS Data Pipeline service charges DCNL are applied to your pipeline.'
def put_pipeline_definition(self, pipeline_objects, pipeline_id): DCNL 'Adds tasks, schedules, and preconditions that control the DCNL behavior of the pipeline. You can use PutPipelineDefinition to DCNL populate a new pipeline or to update an existing pipeline that DCNL has not yet been activated. DCNL PutPipelineDefinition also validates the configuration as it DCNL adds it to the pipeline. Changes to the pipeline are saved DCNL unless one of the following three validation errors exists in DCNL the pipeline. DCNL #. An object is missing a name or identifier field. DCNL #. A string or reference field is empty. DCNL #. The number of objects in the pipeline exceeds the maximum DCNL allowed objects. DCNL Pipeline object definitions are passed to the DCNL PutPipelineDefinition action and returned by the DCNL GetPipelineDefinition action. DCNL :type pipeline_id: string DCNL :param pipeline_id: The identifier of the pipeline to be configured. DCNL :type pipeline_objects: list DCNL :param pipeline_objects: The objects that define the pipeline. These DCNL will overwrite the existing pipeline definition.'
def query_objects(self, pipeline_id, sphere, marker=None, query=None, limit=None): DCNL 'Queries a pipeline for the names of objects that match a DCNL specified set of conditions. DCNL The objects returned by QueryObjects are paginated and then DCNL filtered by the value you set for query. This means the action DCNL may return an empty result set with a value set for marker. If DCNL `HasMoreResults` is set to `True`, you should continue to call DCNL QueryObjects, passing in the returned value for marker, until DCNL `HasMoreResults` returns `False`. DCNL :type pipeline_id: string DCNL :param pipeline_id: Identifier of the pipeline to be queried for object DCNL names. DCNL :type query: dict DCNL :param query: Query that defines the objects to be returned. The Query DCNL object can contain a maximum of ten selectors. The conditions in DCNL the query are limited to top-level String fields in the object. DCNL These filters can be applied to components, instances, and DCNL attempts. DCNL :type sphere: string DCNL :param sphere: Specifies whether the query applies to components or DCNL instances. Allowable values: `COMPONENT`, `INSTANCE`, `ATTEMPT`. DCNL :type marker: string DCNL :param marker: The starting point for the results to be returned. The DCNL first time you call QueryObjects, this value should be empty. As DCNL long as the action returns `HasMoreResults` as `True`, you can call DCNL QueryObjects again and pass the marker value from the response to DCNL retrieve the next set of results. DCNL :type limit: integer DCNL :param limit: Specifies the maximum number of object names that DCNL QueryObjects will return in a single call. The default value is DCNL 100.'
def report_task_progress(self, task_id): DCNL 'Updates the AWS Data Pipeline service on the progress of the DCNL calling task runner. When the task runner is assigned a task, DCNL it should call ReportTaskProgress to acknowledge that it has DCNL the task within 2 minutes. If the web service does not recieve DCNL this acknowledgement within the 2 minute window, it will DCNL assign the task in a subsequent PollForTask call. After this DCNL initial acknowledgement, the task runner only needs to report DCNL progress every 15 minutes to maintain its ownership of the DCNL task. You can change this reporting time from 15 minutes by DCNL specifying a `reportProgressTimeout` field in your pipeline. DCNL If a task runner does not report its status after 5 minutes, DCNL AWS Data Pipeline will assume that the task runner is unable DCNL to process the task and will reassign the task in a subsequent DCNL response to PollForTask. task runners should call DCNL ReportTaskProgress every 60 seconds. DCNL :type task_id: string DCNL :param task_id: Identifier of the task assigned to the task runner. DCNL This value is provided in the TaskObject that the service returns DCNL with the response for the PollForTask action.'
def report_task_runner_heartbeat(self, taskrunner_id, worker_group=None, hostname=None): DCNL 'Task runners call ReportTaskRunnerHeartbeat every 15 minutes DCNL to indicate that they are operational. In the case of AWS Data DCNL Pipeline Task Runner launched on a resource managed by AWS DCNL Data Pipeline, the web service can use this call to detect DCNL when the task runner application has failed and restart a new DCNL instance. DCNL :type taskrunner_id: string DCNL :param taskrunner_id: The identifier of the task runner. This value DCNL should be unique across your AWS account. In the case of AWS Data DCNL Pipeline Task Runner launched on a resource managed by AWS Data DCNL Pipeline, the web service provides a unique identifier when it DCNL launches the application. If you have written a custom task runner, DCNL you should assign a unique identifier for the task runner. DCNL :type worker_group: string DCNL :param worker_group: Indicates the type of task the task runner is DCNL configured to accept and process. The worker group is set as a DCNL field on objects in the pipeline when they are created. You can DCNL only specify a single value for `workerGroup` in the call to DCNL ReportTaskRunnerHeartbeat. There are no wildcard values permitted DCNL in `workerGroup`, the string must be an exact, case-sensitive, DCNL match. DCNL :type hostname: string DCNL :param hostname: The public DNS name of the calling task runner.'
def set_status(self, object_ids, status, pipeline_id): DCNL 'Requests that the status of an array of physical or logical DCNL pipeline objects be updated in the pipeline. This update may DCNL not occur immediately, but is eventually consistent. The DCNL status that can be set depends on the type of object. DCNL :type pipeline_id: string DCNL :param pipeline_id: Identifies the pipeline that contains the objects. DCNL :type object_ids: list DCNL :param object_ids: Identifies an array of objects. The corresponding DCNL objects can be either physical or components, but not a mix of both DCNL types. DCNL :type status: string DCNL :param status: Specifies the status to be set on all the objects in DCNL `objectIds`. For components, this can be either `PAUSE` or DCNL `RESUME`. For instances, this can be either `CANCEL`, `RERUN`, or DCNL `MARK_FINISHED`.'
def set_task_status(self, task_id, task_status, error_id=None, error_message=None, error_stack_trace=None): DCNL 'Notifies AWS Data Pipeline that a task is completed and DCNL provides information about the final status. The task runner DCNL calls this action regardless of whether the task was DCNL sucessful. The task runner does not need to call SetTaskStatus DCNL for tasks that are canceled by the web service during a call DCNL to ReportTaskProgress. DCNL :type task_id: string DCNL :param task_id: Identifies the task assigned to the task runner. This DCNL value is set in the TaskObject that is returned by the PollForTask DCNL action. DCNL :type task_status: string DCNL :param task_status: If `FINISHED`, the task successfully completed. If DCNL `FAILED` the task ended unsuccessfully. The `FALSE` value is used DCNL by preconditions. DCNL :type error_id: string DCNL :param error_id: If an error occurred during the task, this value DCNL specifies an id value that represents the error. This value is set DCNL on the physical attempt object. It is used to display error DCNL information to the user. It should not start with string "Service_" DCNL which is reserved by the system. DCNL :type error_message: string DCNL :param error_message: If an error occurred during the task, this value DCNL specifies a text description of the error. This value is set on the DCNL physical attempt object. It is used to display error information to DCNL the user. The web service does not parse this value. DCNL :type error_stack_trace: string DCNL :param error_stack_trace: If an error occurred during the task, this DCNL value specifies the stack trace associated with the error. This DCNL value is set on the physical attempt object. It is used to display DCNL error information to the user. The web service does not parse this DCNL value.'
def validate_pipeline_definition(self, pipeline_objects, pipeline_id): DCNL 'Tests the pipeline definition with a set of validation checks DCNL to ensure that it is well formed and can run without error. DCNL :type pipeline_id: string DCNL :param pipeline_id: Identifies the pipeline whose definition is to be DCNL validated. DCNL :type pipeline_objects: list DCNL :param pipeline_objects: A list of objects that define the pipeline DCNL changes to validate against the pipeline.'
def batch_get_applications(self, application_names=None): DCNL 'Gets information about one or more applications. DCNL :type application_names: list DCNL :param application_names: A list of application names, with multiple DCNL application names separated by spaces.'
def batch_get_deployments(self, deployment_ids=None): DCNL 'Gets information about one or more deployments. DCNL :type deployment_ids: list DCNL :param deployment_ids: A list of deployment IDs, with multiple DCNL deployment IDs separated by spaces.'
def create_application(self, application_name): DCNL 'Creates a new application. DCNL :type application_name: string DCNL :param application_name: The name of the application. This name must be DCNL unique within the AWS user account.'
def create_deployment(self, application_name, deployment_group_name=None, revision=None, deployment_config_name=None, description=None, ignore_application_stop_failures=None): DCNL 'Deploys an application revision to the specified deployment DCNL group. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type deployment_group_name: string DCNL :param deployment_group_name: The deployment group\'s name. DCNL :type revision: dict DCNL :param revision: The type of revision to deploy, along with information DCNL about the revision\'s location. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: The name of an existing deployment DCNL configuration within the AWS user account. DCNL If not specified, the value configured in the deployment group will be DCNL used as the default. If the deployment group does not have a DCNL deployment configuration associated with it, then DCNL CodeDeployDefault.OneAtATime will be used by default. DCNL :type description: string DCNL :param description: A comment about the deployment. DCNL :type ignore_application_stop_failures: boolean DCNL :param ignore_application_stop_failures: If set to true, then if the DCNL deployment causes the ApplicationStop deployment lifecycle event to DCNL fail to a specific instance, the deployment will not be considered DCNL to have failed to that instance at that point and will continue on DCNL to the BeforeInstall deployment lifecycle event. DCNL If set to false or not specified, then if the deployment causes the DCNL ApplicationStop deployment lifecycle event to fail to a specific DCNL instance, the deployment will stop to that instance, and the DCNL deployment to that instance will be considered to have failed.'
def create_deployment_config(self, deployment_config_name, minimum_healthy_hosts=None): DCNL 'Creates a new deployment configuration. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: The name of the deployment configuration DCNL to create. DCNL :type minimum_healthy_hosts: dict DCNL :param minimum_healthy_hosts: The minimum number of healthy instances DCNL that should be available at any time during the deployment. There DCNL are two parameters expected in the input: type and value. DCNL The type parameter takes either of the following values: DCNL + HOST_COUNT: The value parameter represents the minimum number of DCNL healthy instances, as an absolute value. DCNL + FLEET_PERCENT: The value parameter represents the minimum number of DCNL healthy instances, as a percentage of the total number of instances DCNL in the deployment. If you specify FLEET_PERCENT, then at the start DCNL of the deployment AWS CodeDeploy converts the percentage to the DCNL equivalent number of instances and rounds fractional instances up. DCNL The value parameter takes an integer. DCNL For example, to set a minimum of 95% healthy instances, specify a type DCNL of FLEET_PERCENT and a value of 95.'
def create_deployment_group(self, application_name, deployment_group_name, deployment_config_name=None, ec_2_tag_filters=None, auto_scaling_groups=None, service_role_arn=None): DCNL 'Creates a new deployment group for application revisions to be DCNL deployed to. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type deployment_group_name: string DCNL :param deployment_group_name: The name of an existing deployment group DCNL for the specified application. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: If specified, the deployment DCNL configuration name must be one of the predefined values, or it can DCNL be a custom deployment configuration: DCNL + CodeDeployDefault.AllAtOnce deploys an application revision to up to DCNL all of the Amazon EC2 instances at once. The overall deployment DCNL succeeds if the application revision deploys to at least one of the DCNL instances. The overall deployment fails after the application DCNL revision fails to deploy to all of the instances. For example, for DCNL 9 instances, deploy to up to all 9 instances at once. The overall DCNL deployment succeeds if any of the 9 instances is successfully DCNL deployed to, and it fails if all 9 instances fail to be deployed DCNL to. DCNL + CodeDeployDefault.HalfAtATime deploys to up to half of the instances DCNL at a time (with fractions rounded down). The overall deployment DCNL succeeds if the application revision deploys to at least half of DCNL the instances (with fractions rounded up); otherwise, the DCNL deployment fails. For example, for 9 instances, deploy to up to 4 DCNL instances at a time. The overall deployment succeeds if 5 or more DCNL instances are successfully deployed to; otherwise, the deployment DCNL fails. Note that the deployment may successfully deploy to some DCNL instances, even if the overall deployment fails. DCNL + CodeDeployDefault.OneAtATime deploys the application revision to only DCNL one of the instances at a time. The overall deployment succeeds if DCNL the application revision deploys to all of the instances. The DCNL overall deployment fails after the application revision first fails DCNL to deploy to any one instance. For example, for 9 instances, deploy DCNL to one instance at a time. The overall deployment succeeds if all 9 DCNL instances are successfully deployed to, and it fails if any of one DCNL of the 9 instances fail to be deployed to. Note that the deployment DCNL may successfully deploy to some instances, even if the overall DCNL deployment fails. This is the default deployment configuration if a DCNL configuration isn\'t specified for either the deployment or the DCNL deployment group. DCNL To create a custom deployment configuration, call the create deployment DCNL configuration operation. DCNL :type ec_2_tag_filters: list DCNL :param ec_2_tag_filters: The Amazon EC2 tags to filter on. DCNL :type auto_scaling_groups: list DCNL :param auto_scaling_groups: A list of associated Auto Scaling groups. DCNL :type service_role_arn: string DCNL :param service_role_arn: A service role ARN that allows AWS CodeDeploy DCNL to act on the user\'s behalf when interacting with AWS services.'
def delete_application(self, application_name): DCNL 'Deletes an application. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account.'
def delete_deployment_config(self, deployment_config_name): DCNL 'Deletes a deployment configuration. DCNL A deployment configuration cannot be deleted if it is DCNL currently in use. Also, predefined configurations cannot be DCNL deleted. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: The name of an existing deployment DCNL configuration within the AWS user account.'
def delete_deployment_group(self, application_name, deployment_group_name): DCNL 'Deletes a deployment group. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type deployment_group_name: string DCNL :param deployment_group_name: The name of an existing deployment group DCNL for the specified application.'
def get_application(self, application_name): DCNL 'Gets information about an application. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account.'
def get_application_revision(self, application_name, revision): DCNL 'Gets information about an application revision. DCNL :type application_name: string DCNL :param application_name: The name of the application that corresponds DCNL to the revision. DCNL :type revision: dict DCNL :param revision: Information about the application revision to get, DCNL including the revision\'s type and its location.'
def get_deployment(self, deployment_id): DCNL 'Gets information about a deployment. DCNL :type deployment_id: string DCNL :param deployment_id: An existing deployment ID within the AWS user DCNL account.'
def get_deployment_config(self, deployment_config_name): DCNL 'Gets information about a deployment configuration. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: The name of an existing deployment DCNL configuration within the AWS user account.'
def get_deployment_group(self, application_name, deployment_group_name): DCNL 'Gets information about a deployment group. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type deployment_group_name: string DCNL :param deployment_group_name: The name of an existing deployment group DCNL for the specified application.'
def get_deployment_instance(self, deployment_id, instance_id): DCNL 'Gets information about an Amazon EC2 instance as part of a DCNL deployment. DCNL :type deployment_id: string DCNL :param deployment_id: The unique ID of a deployment. DCNL :type instance_id: string DCNL :param instance_id: The unique ID of an Amazon EC2 instance in the DCNL deployment\'s deployment group.'
def list_application_revisions(self, application_name, sort_by=None, sort_order=None, s_3_bucket=None, s_3_key_prefix=None, deployed=None, next_token=None): DCNL 'Lists information about revisions for an application. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type sort_by: string DCNL :param sort_by: The column name to sort the list results by: DCNL + registerTime: Sort the list results by when the revisions were DCNL registered with AWS CodeDeploy. DCNL + firstUsedTime: Sort the list results by when the revisions were first DCNL used by in a deployment. DCNL + lastUsedTime: Sort the list results by when the revisions were last DCNL used in a deployment. DCNL If not specified or set to null, the results will be returned in an DCNL arbitrary order. DCNL :type sort_order: string DCNL :param sort_order: The order to sort the list results by: DCNL + ascending: Sort the list results in ascending order. DCNL + descending: Sort the list results in descending order. DCNL If not specified, the results will be sorted in ascending order. DCNL If set to null, the results will be sorted in an arbitrary order. DCNL :type s_3_bucket: string DCNL :param s_3_bucket: A specific Amazon S3 bucket name to limit the search DCNL for revisions. DCNL If set to null, then all of the user\'s buckets will be searched. DCNL :type s_3_key_prefix: string DCNL :param s_3_key_prefix: A specific key prefix for the set of Amazon S3 DCNL objects to limit the search for revisions. DCNL :type deployed: string DCNL :param deployed: DCNL Whether to list revisions based on whether the revision is the target DCNL revision of an deployment group: DCNL + include: List revisions that are target revisions of a deployment DCNL group. DCNL + exclude: Do not list revisions that are target revisions of a DCNL deployment group. DCNL + ignore: List all revisions, regardless of whether they are target DCNL revisions of a deployment group. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list application revisions call, which can be used to return the DCNL next set of applications in the list.'
def list_applications(self, next_token=None): DCNL 'Lists the applications registered within the AWS user account. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list applications call, which can be used to return the next set of DCNL applications in the list.'
def list_deployment_configs(self, next_token=None): DCNL 'Lists the deployment configurations within the AWS user DCNL account. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list deployment configurations call, which can be used to return DCNL the next set of deployment configurations in the list.'
def list_deployment_groups(self, application_name, next_token=None): DCNL 'Lists the deployment groups for an application registered DCNL within the AWS user account. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list deployment groups call, which can be used to return the next DCNL set of deployment groups in the list.'
def list_deployment_instances(self, deployment_id, next_token=None, instance_status_filter=None): DCNL 'Lists the Amazon EC2 instances for a deployment within the AWS DCNL user account. DCNL :type deployment_id: string DCNL :param deployment_id: The unique ID of a deployment. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list deployment instances call, which can be used to return the DCNL next set of deployment instances in the list. DCNL :type instance_status_filter: list DCNL :param instance_status_filter: DCNL A subset of instances to list, by status: DCNL + Pending: Include in the resulting list those instances with pending DCNL deployments. DCNL + InProgress: Include in the resulting list those instances with in- DCNL progress deployments. DCNL + Succeeded: Include in the resulting list those instances with DCNL succeeded deployments. DCNL + Failed: Include in the resulting list those instances with failed DCNL deployments. DCNL + Skipped: Include in the resulting list those instances with skipped DCNL deployments. DCNL + Unknown: Include in the resulting list those instances with DCNL deployments in an unknown state.'
def list_deployments(self, application_name=None, deployment_group_name=None, include_only_statuses=None, create_time_range=None, next_token=None): DCNL 'Lists the deployments under a deployment group for an DCNL application registered within the AWS user account. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type deployment_group_name: string DCNL :param deployment_group_name: The name of an existing deployment group DCNL for the specified application. DCNL :type include_only_statuses: list DCNL :param include_only_statuses: A subset of deployments to list, by DCNL status: DCNL + Created: Include in the resulting list created deployments. DCNL + Queued: Include in the resulting list queued deployments. DCNL + In Progress: Include in the resulting list in-progress deployments. DCNL + Succeeded: Include in the resulting list succeeded deployments. DCNL + Failed: Include in the resulting list failed deployments. DCNL + Aborted: Include in the resulting list aborted deployments. DCNL :type create_time_range: dict DCNL :param create_time_range: A deployment creation start- and end-time DCNL range for returning a subset of the list of deployments. DCNL :type next_token: string DCNL :param next_token: An identifier that was returned from the previous DCNL list deployments call, which can be used to return the next set of DCNL deployments in the list.'
def register_application_revision(self, application_name, revision, description=None): DCNL 'Registers with AWS CodeDeploy a revision for the specified DCNL application. DCNL :type application_name: string DCNL :param application_name: The name of an existing AWS CodeDeploy DCNL application within the AWS user account. DCNL :type description: string DCNL :param description: A comment about the revision. DCNL :type revision: dict DCNL :param revision: Information about the application revision to DCNL register, including the revision\'s type and its location.'
def stop_deployment(self, deployment_id): DCNL 'Attempts to stop an ongoing deployment. DCNL :type deployment_id: string DCNL :param deployment_id: The unique ID of a deployment.'
def update_application(self, application_name=None, new_application_name=None): DCNL 'Changes an existing application\'s name. DCNL :type application_name: string DCNL :param application_name: The current name of the application that you DCNL want to change. DCNL :type new_application_name: string DCNL :param new_application_name: The new name that you want to change the DCNL application to.'
def update_deployment_group(self, application_name, current_deployment_group_name, new_deployment_group_name=None, deployment_config_name=None, ec_2_tag_filters=None, auto_scaling_groups=None, service_role_arn=None): DCNL 'Changes information about an existing deployment group. DCNL :type application_name: string DCNL :param application_name: The application name corresponding to the DCNL deployment group to update. DCNL :type current_deployment_group_name: string DCNL :param current_deployment_group_name: The current name of the existing DCNL deployment group. DCNL :type new_deployment_group_name: string DCNL :param new_deployment_group_name: The new name of the deployment group, DCNL if you want to change it. DCNL :type deployment_config_name: string DCNL :param deployment_config_name: The replacement deployment configuration DCNL name to use, if you want to change it. DCNL :type ec_2_tag_filters: list DCNL :param ec_2_tag_filters: The replacement set of Amazon EC2 tags to DCNL filter on, if you want to change them. DCNL :type auto_scaling_groups: list DCNL :param auto_scaling_groups: The replacement list of Auto Scaling groups DCNL to be included in the deployment group, if you want to change them. DCNL :type service_role_arn: string DCNL :param service_role_arn: A replacement service role\'s ARN, if you want DCNL to change it.'
def add_attachments_to_set(self, attachments, attachment_set_id=None): DCNL 'Adds one or more attachments to an attachment set. If an DCNL `AttachmentSetId` is not specified, a new attachment set is DCNL created, and the ID of the set is returned in the response. If DCNL an `AttachmentSetId` is specified, the attachments are added DCNL to the specified set, if it exists. DCNL An attachment set is a temporary container for attachments DCNL that are to be added to a case or case communication. The set DCNL is available for one hour after it is created; the DCNL `ExpiryTime` returned in the response indicates when the set DCNL expires. The maximum number of attachments in a set is 3, and DCNL the maximum size of any attachment in the set is 5 MB. DCNL :type attachment_set_id: string DCNL :param attachment_set_id: The ID of the attachment set. If an DCNL `AttachmentSetId` is not specified, a new attachment set is DCNL created, and the ID of the set is returned in the response. If an DCNL `AttachmentSetId` is specified, the attachments are added to the DCNL specified set, if it exists. DCNL :type attachments: list DCNL :param attachments: One or more attachments to add to the set. The DCNL limit is 3 attachments per set, and the size limit is 5 MB per DCNL attachment.'
def add_communication_to_case(self, communication_body, case_id=None, cc_email_addresses=None, attachment_set_id=None): DCNL 'Adds additional customer communication to an AWS Support case. DCNL You use the `CaseId` value to identify the case to add DCNL communication to. You can list a set of email addresses to DCNL copy on the communication using the `CcEmailAddresses` value. DCNL The `CommunicationBody` value contains the text of the DCNL communication. DCNL The response indicates the success or failure of the request. DCNL This operation implements a subset of the behavior on the AWS DCNL Support `Your Support Cases`_ web form. DCNL :type case_id: string DCNL :param case_id: The AWS Support case ID requested or returned in the DCNL call. The case ID is an alphanumeric string formatted as shown in DCNL this example: case- 12345678910-2013-c4c1d2bf33c5cf47 DCNL :type communication_body: string DCNL :param communication_body: The body of an email communication to add to DCNL the support case. DCNL :type cc_email_addresses: list DCNL :param cc_email_addresses: The email addresses in the CC line of an DCNL email to be added to the support case. DCNL :type attachment_set_id: string DCNL :param attachment_set_id: The ID of a set of one or more attachments DCNL for the communication to add to the case. Create the set by calling DCNL AddAttachmentsToSet'
def create_case(self, subject, communication_body, service_code=None, severity_code=None, category_code=None, cc_email_addresses=None, language=None, issue_type=None, attachment_set_id=None): DCNL 'Creates a new case in the AWS Support Center. This operation DCNL is modeled on the behavior of the AWS Support Center `Open a DCNL new case`_ page. Its parameters require you to specify the DCNL following information: DCNL #. **IssueType.** The type of issue for the case. You can DCNL specify either "customer-service" or "technical." If you do DCNL not indicate a value, the default is "technical." DCNL #. **ServiceCode.** The code for an AWS service. You obtain DCNL the `ServiceCode` by calling DescribeServices. DCNL #. **CategoryCode.** The category for the service defined for DCNL the `ServiceCode` value. You also obtain the category code for DCNL a service by calling DescribeServices. Each AWS service DCNL defines its own set of category codes. DCNL #. **SeverityCode.** A value that indicates the urgency of the DCNL case, which in turn determines the response time according to DCNL your service level agreement with AWS Support. You obtain the DCNL SeverityCode by calling DescribeSeverityLevels. DCNL #. **Subject.** The **Subject** field on the AWS Support DCNL Center `Open a new case`_ page. DCNL #. **CommunicationBody.** The **Description** field on the AWS DCNL Support Center `Open a new case`_ page. DCNL #. **AttachmentSetId.** The ID of a set of attachments that DCNL has been created by using AddAttachmentsToSet. DCNL #. **Language.** The human language in which AWS Support DCNL handles the case. English and Japanese are currently DCNL supported. DCNL #. **CcEmailAddresses.** The AWS Support Center **CC** field DCNL on the `Open a new case`_ page. You can list email addresses DCNL to be copied on any correspondence about the case. The account DCNL that opens the case is already identified by passing the AWS DCNL Credentials in the HTTP POST method or in a method or function DCNL call from one of the programming languages supported by an DCNL `AWS SDK`_. DCNL A successful CreateCase request returns an AWS Support case DCNL number. Case numbers are used by the DescribeCases operation DCNL to retrieve existing AWS Support cases. DCNL :type subject: string DCNL :param subject: The title of the AWS Support case. DCNL :type service_code: string DCNL :param service_code: The code for the AWS service returned by the call DCNL to DescribeServices. DCNL :type severity_code: string DCNL :param severity_code: The code for the severity level returned by the DCNL call to DescribeSeverityLevels. DCNL :type category_code: string DCNL :param category_code: The category of problem for the AWS Support case. DCNL :type communication_body: string DCNL :param communication_body: The communication body text when you create DCNL an AWS Support case by calling CreateCase. DCNL :type cc_email_addresses: list DCNL :param cc_email_addresses: A list of email addresses that AWS Support DCNL copies on case correspondence. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them. DCNL :type issue_type: string DCNL :param issue_type: The type of issue for the case. You can specify DCNL either "customer-service" or "technical." If you do not indicate a DCNL value, the default is "technical." DCNL :type attachment_set_id: string DCNL :param attachment_set_id: The ID of a set of one or more attachments DCNL for the case. Create the set by using AddAttachmentsToSet.'
def describe_attachment(self, attachment_id): DCNL 'Returns the attachment that has the specified ID. Attachment DCNL IDs are generated by the case management system when you add DCNL an attachment to a case or case communication. Attachment IDs DCNL are returned in the AttachmentDetails objects that are DCNL returned by the DescribeCommunications operation. DCNL :type attachment_id: string DCNL :param attachment_id: The ID of the attachment to return. Attachment DCNL IDs are returned by the DescribeCommunications operation.'
def describe_cases(self, case_id_list=None, display_id=None, after_time=None, before_time=None, include_resolved_cases=None, next_token=None, max_results=None, language=None, include_communications=None): DCNL 'Returns a list of cases that you specify by passing one or DCNL more case IDs. In addition, you can filter the cases by date DCNL by setting values for the `AfterTime` and `BeforeTime` request DCNL parameters. DCNL Case data is available for 12 months after creation. If a case DCNL was created more than 12 months ago, a request for data might DCNL cause an error. DCNL The response returns the following in JSON format: DCNL #. One or more CaseDetails data types. DCNL #. One or more `NextToken` values, which specify where to DCNL paginate the returned records represented by the `CaseDetails` DCNL objects. DCNL :type case_id_list: list DCNL :param case_id_list: A list of ID numbers of the support cases you want DCNL returned. The maximum number of cases is 100. DCNL :type display_id: string DCNL :param display_id: The ID displayed for a case in the AWS Support DCNL Center user interface. DCNL :type after_time: string DCNL :param after_time: The start date for a filtered date search on support DCNL case communications. Case communications are available for 12 DCNL months after creation. DCNL :type before_time: string DCNL :param before_time: The end date for a filtered date search on support DCNL case communications. Case communications are available for 12 DCNL months after creation. DCNL :type include_resolved_cases: boolean DCNL :param include_resolved_cases: Specifies whether resolved support cases DCNL should be included in the DescribeCases results. The default is DCNL false . DCNL :type next_token: string DCNL :param next_token: A resumption point for pagination. DCNL :type max_results: integer DCNL :param max_results: The maximum number of results to return before DCNL paginating. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them. DCNL :type include_communications: boolean DCNL :param include_communications: Specifies whether communications should DCNL be included in the DescribeCases results. The default is true .'
def describe_communications(self, case_id, before_time=None, after_time=None, next_token=None, max_results=None): DCNL 'Returns communications (and attachments) for one or more DCNL support cases. You can use the `AfterTime` and `BeforeTime` DCNL parameters to filter by date. You can use the `CaseId` DCNL parameter to restrict the results to a particular case. DCNL Case data is available for 12 months after creation. If a case DCNL was created more than 12 months ago, a request for data might DCNL cause an error. DCNL You can use the `MaxResults` and `NextToken` parameters to DCNL control the pagination of the result set. Set `MaxResults` to DCNL the number of cases you want displayed on each page, and use DCNL `NextToken` to specify the resumption of pagination. DCNL :type case_id: string DCNL :param case_id: The AWS Support case ID requested or returned in the DCNL call. The case ID is an alphanumeric string formatted as shown in DCNL this example: case- 12345678910-2013-c4c1d2bf33c5cf47 DCNL :type before_time: string DCNL :param before_time: The end date for a filtered date search on support DCNL case communications. Case communications are available for 12 DCNL months after creation. DCNL :type after_time: string DCNL :param after_time: The start date for a filtered date search on support DCNL case communications. Case communications are available for 12 DCNL months after creation. DCNL :type next_token: string DCNL :param next_token: A resumption point for pagination. DCNL :type max_results: integer DCNL :param max_results: The maximum number of results to return before DCNL paginating.'
def describe_services(self, service_code_list=None, language=None): DCNL 'Returns the current list of AWS services and a list of service DCNL categories that applies to each one. You then use service DCNL names and categories in your CreateCase requests. Each AWS DCNL service has its own set of categories. DCNL The service codes and category codes correspond to the values DCNL that are displayed in the **Service** and **Category** drop- DCNL down lists on the AWS Support Center `Open a new case`_ page. DCNL The values in those fields, however, do not necessarily match DCNL the service codes and categories returned by the DCNL `DescribeServices` request. Always use the service codes and DCNL categories obtained programmatically. This practice ensures DCNL that you always have the most recent set of service and DCNL category codes. DCNL :type service_code_list: list DCNL :param service_code_list: A JSON-formatted list of service codes DCNL available for AWS services. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them.'
def describe_severity_levels(self, language=None): DCNL 'Returns the list of severity levels that you can assign to an DCNL AWS Support case. The severity level for a case is also a DCNL field in the CaseDetails data type included in any CreateCase DCNL request. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them.'
def describe_trusted_advisor_check_refresh_statuses(self, check_ids): DCNL 'Returns the refresh status of the Trusted Advisor checks that DCNL have the specified check IDs. Check IDs can be obtained by DCNL calling DescribeTrustedAdvisorChecks. DCNL :type check_ids: list DCNL :param check_ids: The IDs of the Trusted Advisor checks.'
def describe_trusted_advisor_check_result(self, check_id, language=None): DCNL 'Returns the results of the Trusted Advisor check that has the DCNL specified check ID. Check IDs can be obtained by calling DCNL DescribeTrustedAdvisorChecks. DCNL The response contains a TrustedAdvisorCheckResult object, DCNL which contains these three objects: DCNL + TrustedAdvisorCategorySpecificSummary DCNL + TrustedAdvisorResourceDetail DCNL + TrustedAdvisorResourcesSummary DCNL In addition, the response contains these fields: DCNL + **Status.** The alert status of the check: "ok" (green), DCNL "warning" (yellow), "error" (red), or "not_available". DCNL + **Timestamp.** The time of the last refresh of the check. DCNL + **CheckId.** The unique identifier for the check. DCNL :type check_id: string DCNL :param check_id: The unique identifier for the Trusted Advisor check. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them.'
def describe_trusted_advisor_check_summaries(self, check_ids): DCNL 'Returns the summaries of the results of the Trusted Advisor DCNL checks that have the specified check IDs. Check IDs can be DCNL obtained by calling DescribeTrustedAdvisorChecks. DCNL The response contains an array of TrustedAdvisorCheckSummary DCNL objects. DCNL :type check_ids: list DCNL :param check_ids: The IDs of the Trusted Advisor checks.'
def describe_trusted_advisor_checks(self, language): DCNL 'Returns information about all available Trusted Advisor DCNL checks, including name, ID, category, description, and DCNL metadata. You must specify a language code; English ("en") and DCNL Japanese ("ja") are currently supported. The response contains DCNL a TrustedAdvisorCheckDescription for each check. DCNL :type language: string DCNL :param language: The ISO 639-1 code for the language in which AWS DCNL provides support. AWS Support currently supports English ("en") and DCNL Japanese ("ja"). Language parameters must be passed explicitly for DCNL operations that take them.'
def refresh_trusted_advisor_check(self, check_id): DCNL 'Requests a refresh of the Trusted Advisor check that has the DCNL specified check ID. Check IDs can be obtained by calling DCNL DescribeTrustedAdvisorChecks. DCNL The response contains a RefreshTrustedAdvisorCheckResult DCNL object, which contains these fields: DCNL + **Status.** The refresh status of the check: "none", DCNL "enqueued", "processing", "success", or "abandoned". DCNL + **MillisUntilNextRefreshable.** The amount of time, in DCNL milliseconds, until the check is eligible for refresh. DCNL + **CheckId.** The unique identifier for the check. DCNL :type check_id: string DCNL :param check_id: The unique identifier for the Trusted Advisor check.'
def resolve_case(self, case_id=None): DCNL 'Takes a `CaseId` and returns the initial state of the case DCNL along with the state of the case after the call to ResolveCase DCNL completed. DCNL :type case_id: string DCNL :param case_id: The AWS Support case ID requested or returned in the DCNL call. The case ID is an alphanumeric string formatted as shown in DCNL this example: case- 12345678910-2013-c4c1d2bf33c5cf47'
def cancel_job(self, id=None): DCNL 'The CancelJob operation cancels an unfinished job. DCNL You can only cancel a job that has a status of `Submitted`. To DCNL prevent a pipeline from starting to process a job while you\'re DCNL getting the job identifier, use UpdatePipelineStatus to DCNL temporarily pause the pipeline. DCNL :type id: string DCNL :param id: The identifier of the job that you want to cancel. DCNL To get a list of the jobs (including their `jobId`) that have a status DCNL of `Submitted`, use the ListJobsByStatus API action.'
def create_job(self, pipeline_id=None, input_name=None, output=None, outputs=None, output_key_prefix=None, playlists=None): DCNL 'When you create a job, Elastic Transcoder returns JSON data DCNL that includes the values that you specified plus information DCNL about the job that is created. DCNL If you have specified more than one output for your jobs (for DCNL example, one output for the Kindle Fire and another output for DCNL the Apple iPhone 4s), you currently must use the Elastic DCNL Transcoder API to list the jobs (as opposed to the AWS DCNL Console). DCNL :type pipeline_id: string DCNL :param pipeline_id: The `Id` of the pipeline that you want Elastic DCNL Transcoder to use for transcoding. The pipeline determines several DCNL settings, including the Amazon S3 bucket from which Elastic DCNL Transcoder gets the files to transcode and the bucket into which DCNL Elastic Transcoder puts the transcoded files. DCNL :type input_name: dict DCNL :param input_name: A section of the request body that provides DCNL information about the file that is being transcoded. DCNL :type output: dict DCNL :param output: The `CreateJobOutput` structure. DCNL :type outputs: list DCNL :param outputs: A section of the request body that provides information DCNL about the transcoded (target) files. We recommend that you use the DCNL `Outputs` syntax instead of the `Output` syntax. DCNL :type output_key_prefix: string DCNL :param output_key_prefix: The value, if any, that you want Elastic DCNL Transcoder to prepend to the names of all files that this job DCNL creates, including output files, thumbnails, and playlists. DCNL :type playlists: list DCNL :param playlists: If you specify a preset in `PresetId` for which the DCNL value of `Container` is ts (MPEG-TS), Playlists contains DCNL information about the master playlists that you want Elastic DCNL Transcoder to create. DCNL We recommend that you create only one master playlist. The maximum DCNL number of master playlists in a job is 30.'
def create_pipeline(self, name=None, input_bucket=None, output_bucket=None, role=None, notifications=None, content_config=None, thumbnail_config=None): DCNL 'The CreatePipeline operation creates a pipeline with settings DCNL that you specify. DCNL :type name: string DCNL :param name: The name of the pipeline. We recommend that the name be DCNL unique within the AWS account, but uniqueness is not enforced. DCNL Constraints: Maximum 40 characters. DCNL :type input_bucket: string DCNL :param input_bucket: The Amazon S3 bucket in which you saved the media DCNL files that you want to transcode. DCNL :type output_bucket: string DCNL :param output_bucket: The Amazon S3 bucket in which you want Elastic DCNL Transcoder to save the transcoded files. (Use this, or use DCNL ContentConfig:Bucket plus ThumbnailConfig:Bucket.) DCNL Specify this value when all of the following are true: DCNL + You want to save transcoded files, thumbnails (if any), and playlists DCNL (if any) together in one bucket. DCNL + You do not want to specify the users or groups who have access to the DCNL transcoded files, thumbnails, and playlists. DCNL + You do not want to specify the permissions that Elastic Transcoder DCNL grants to the files. When Elastic Transcoder saves files in DCNL `OutputBucket`, it grants full control over the files only to the DCNL AWS account that owns the role that is specified by `Role`. DCNL + You want to associate the transcoded files and thumbnails with the DCNL Amazon S3 Standard storage class. DCNL If you want to save transcoded files and playlists in one bucket and DCNL thumbnails in another bucket, specify which users can access the DCNL transcoded files or the permissions the users have, or change the DCNL Amazon S3 storage class, omit `OutputBucket` and specify values for DCNL `ContentConfig` and `ThumbnailConfig` instead. DCNL :type role: string DCNL :param role: The IAM Amazon Resource Name (ARN) for the role that you DCNL want Elastic Transcoder to use to create the pipeline. DCNL :type notifications: dict DCNL :param notifications: DCNL The Amazon Simple Notification Service (Amazon SNS) topic that you want DCNL to notify to report job status. DCNL To receive notifications, you must also subscribe to the new topic in DCNL the Amazon SNS console. DCNL + **Progressing**: The topic ARN for the Amazon Simple Notification DCNL Service (Amazon SNS) topic that you want to notify when Elastic DCNL Transcoder has started to process a job in this pipeline. This is DCNL the ARN that Amazon SNS returned when you created the topic. For DCNL more information, see Create a Topic in the Amazon Simple DCNL Notification Service Developer Guide. DCNL + **Completed**: The topic ARN for the Amazon SNS topic that you want DCNL to notify when Elastic Transcoder has finished processing a job in DCNL this pipeline. This is the ARN that Amazon SNS returned when you DCNL created the topic. DCNL + **Warning**: The topic ARN for the Amazon SNS topic that you want to DCNL notify when Elastic Transcoder encounters a warning condition while DCNL processing a job in this pipeline. This is the ARN that Amazon SNS DCNL returned when you created the topic. DCNL + **Error**: The topic ARN for the Amazon SNS topic that you want to DCNL notify when Elastic Transcoder encounters an error condition while DCNL processing a job in this pipeline. This is the ARN that Amazon SNS DCNL returned when you created the topic. DCNL :type content_config: dict DCNL :param content_config: DCNL The optional `ContentConfig` object specifies information about the DCNL Amazon S3 bucket in which you want Elastic Transcoder to save DCNL transcoded files and playlists: which bucket to use, which users DCNL you want to have access to the files, the type of access you want DCNL users to have, and the storage class that you want to assign to the DCNL files. DCNL If you specify values for `ContentConfig`, you must also specify values DCNL for `ThumbnailConfig`. DCNL If you specify values for `ContentConfig` and `ThumbnailConfig`, omit DCNL the `OutputBucket` object. DCNL + **Bucket**: The Amazon S3 bucket in which you want Elastic Transcoder DCNL to save transcoded files and playlists. DCNL + **Permissions** (Optional): The Permissions object specifies which DCNL users you want to have access to transcoded files and the type of DCNL access you want them to have. You can grant permissions to a DCNL maximum of 30 users and/or predefined Amazon S3 groups. DCNL + **Grantee Type**: Specify the type of value that appears in the DCNL `Grantee` object: DCNL + **Canonical**: The value in the `Grantee` object is either the DCNL canonical user ID for an AWS account or an origin access identity DCNL for an Amazon CloudFront distribution. For more information about DCNL canonical user IDs, see Access Control List (ACL) Overview in the DCNL Amazon Simple Storage Service Developer Guide. For more information DCNL about using CloudFront origin access identities to require that DCNL users use CloudFront URLs instead of Amazon S3 URLs, see Using an DCNL Origin Access Identity to Restrict Access to Your Amazon S3 DCNL Content. A canonical user ID is not the same as an AWS account DCNL number. DCNL + **Email**: The value in the `Grantee` object is the registered email DCNL address of an AWS account. DCNL + **Group**: The value in the `Grantee` object is one of the following DCNL predefined Amazon S3 groups: `AllUsers`, `AuthenticatedUsers`, or DCNL `LogDelivery`. DCNL + **Grantee**: The AWS user or group that you want to have access to DCNL transcoded files and playlists. To identify the user or group, you DCNL can specify the canonical user ID for an AWS account, an origin DCNL access identity for a CloudFront distribution, the registered email DCNL address of an AWS account, or a predefined Amazon S3 group DCNL + **Access**: The permission that you want to give to the AWS user that DCNL you specified in `Grantee`. Permissions are granted on the files DCNL that Elastic Transcoder adds to the bucket, including playlists and DCNL video files. Valid values include: DCNL + `READ`: The grantee can read the objects and metadata for objects DCNL that Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `READ_ACP`: The grantee can read the object ACL for objects that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `WRITE_ACP`: The grantee can write the ACL for the objects that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `FULL_CONTROL`: The grantee has `READ`, `READ_ACP`, and `WRITE_ACP` DCNL permissions for the objects that Elastic Transcoder adds to the DCNL Amazon S3 bucket. DCNL + **StorageClass**: The Amazon S3 storage class, `Standard` or DCNL `ReducedRedundancy`, that you want Elastic Transcoder to assign to DCNL the video files and playlists that it stores in your Amazon S3 DCNL bucket. DCNL :type thumbnail_config: dict DCNL :param thumbnail_config: DCNL The `ThumbnailConfig` object specifies several values, including the DCNL Amazon S3 bucket in which you want Elastic Transcoder to save DCNL thumbnail files, which users you want to have access to the files, DCNL the type of access you want users to have, and the storage class DCNL that you want to assign to the files. DCNL If you specify values for `ContentConfig`, you must also specify values DCNL for `ThumbnailConfig` even if you don\'t want to create thumbnails. DCNL If you specify values for `ContentConfig` and `ThumbnailConfig`, omit DCNL the `OutputBucket` object. DCNL + **Bucket**: The Amazon S3 bucket in which you want Elastic Transcoder DCNL to save thumbnail files. DCNL + **Permissions** (Optional): The `Permissions` object specifies which DCNL users and/or predefined Amazon S3 groups you want to have access to DCNL thumbnail files, and the type of access you want them to have. You DCNL can grant permissions to a maximum of 30 users and/or predefined DCNL Amazon S3 groups. DCNL + **GranteeType**: Specify the type of value that appears in the DCNL Grantee object: DCNL + **Canonical**: The value in the `Grantee` object is either the DCNL canonical user ID for an AWS account or an origin access identity DCNL for an Amazon CloudFront distribution. A canonical user ID is not DCNL the same as an AWS account number. DCNL + **Email**: The value in the `Grantee` object is the registered email DCNL address of an AWS account. DCNL + **Group**: The value in the `Grantee` object is one of the following DCNL predefined Amazon S3 groups: `AllUsers`, `AuthenticatedUsers`, or DCNL `LogDelivery`. DCNL + **Grantee**: The AWS user or group that you want to have access to DCNL thumbnail files. To identify the user or group, you can specify the DCNL canonical user ID for an AWS account, an origin access identity for DCNL a CloudFront distribution, the registered email address of an AWS DCNL account, or a predefined Amazon S3 group. DCNL + **Access**: The permission that you want to give to the AWS user that DCNL you specified in `Grantee`. Permissions are granted on the DCNL thumbnail files that Elastic Transcoder adds to the bucket. Valid DCNL values include: DCNL + `READ`: The grantee can read the thumbnails and metadata for objects DCNL that Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `READ_ACP`: The grantee can read the object ACL for thumbnails that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `WRITE_ACP`: The grantee can write the ACL for the thumbnails that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `FULL_CONTROL`: The grantee has `READ`, `READ_ACP`, and `WRITE_ACP` DCNL permissions for the thumbnails that Elastic Transcoder adds to the DCNL Amazon S3 bucket. DCNL + **StorageClass**: The Amazon S3 storage class, `Standard` or DCNL `ReducedRedundancy`, that you want Elastic Transcoder to assign to DCNL the thumbnails that it stores in your Amazon S3 bucket.'
def create_preset(self, name=None, description=None, container=None, video=None, audio=None, thumbnails=None): DCNL 'The CreatePreset operation creates a preset with settings that DCNL you specify. DCNL Elastic Transcoder checks the CreatePreset settings to ensure DCNL that they meet Elastic Transcoder requirements and to DCNL determine whether they comply with H.264 standards. If your DCNL settings are not valid for Elastic Transcoder, Elastic DCNL Transcoder returns an HTTP 400 response ( DCNL `ValidationException`) and does not create the preset. If the DCNL settings are valid for Elastic Transcoder but aren\'t strictly DCNL compliant with the H.264 standard, Elastic Transcoder creates DCNL the preset and returns a warning message in the response. This DCNL helps you determine whether your settings comply with the DCNL H.264 standard while giving you greater flexibility with DCNL respect to the video that Elastic Transcoder produces. DCNL Elastic Transcoder uses the H.264 video-compression format. DCNL For more information, see the International Telecommunication DCNL Union publication Recommendation ITU-T H.264: Advanced video DCNL coding for generic audiovisual services . DCNL :type name: string DCNL :param name: The name of the preset. We recommend that the name be DCNL unique within the AWS account, but uniqueness is not enforced. DCNL :type description: string DCNL :param description: A description of the preset. DCNL :type container: string DCNL :param container: The container type for the output file. Valid values DCNL include `mp3`, `mp4`, `ogg`, `ts`, and `webm`. DCNL :type video: dict DCNL :param video: A section of the request body that specifies the video DCNL parameters. DCNL :type audio: dict DCNL :param audio: A section of the request body that specifies the audio DCNL parameters. DCNL :type thumbnails: dict DCNL :param thumbnails: A section of the request body that specifies the DCNL thumbnail parameters, if any.'
def delete_pipeline(self, id=None): DCNL 'The DeletePipeline operation removes a pipeline. DCNL You can only delete a pipeline that has never been used or DCNL that is not currently in use (doesn\'t contain any active DCNL jobs). If the pipeline is currently in use, `DeletePipeline` DCNL returns an error. DCNL :type id: string DCNL :param id: The identifier of the pipeline that you want to delete.'
def delete_preset(self, id=None): DCNL 'The DeletePreset operation removes a preset that you\'ve added DCNL in an AWS region. DCNL You can\'t delete the default presets that are included with DCNL Elastic Transcoder. DCNL :type id: string DCNL :param id: The identifier of the preset for which you want to get DCNL detailed information.'
def list_jobs_by_pipeline(self, pipeline_id=None, ascending=None, page_token=None): DCNL 'The ListJobsByPipeline operation gets a list of the jobs DCNL currently in a pipeline. DCNL Elastic Transcoder returns all of the jobs currently in the DCNL specified pipeline. The response body contains one element for DCNL each job that satisfies the search criteria. DCNL :type pipeline_id: string DCNL :param pipeline_id: The ID of the pipeline for which you want to get DCNL job information. DCNL :type ascending: string DCNL :param ascending: To list jobs in chronological order by the date and DCNL time that they were submitted, enter `True`. To list jobs in DCNL reverse chronological order, enter `False`. DCNL :type page_token: string DCNL :param page_token: When Elastic Transcoder returns more than one page DCNL of results, use `pageToken` in subsequent `GET` requests to get DCNL each successive page of results.'
def list_jobs_by_status(self, status=None, ascending=None, page_token=None): DCNL 'The ListJobsByStatus operation gets a list of jobs that have a DCNL specified status. The response body contains one element for DCNL each job that satisfies the search criteria. DCNL :type status: string DCNL :param status: To get information about all of the jobs associated with DCNL the current AWS account that have a given status, specify the DCNL following status: `Submitted`, `Progressing`, `Complete`, DCNL `Canceled`, or `Error`. DCNL :type ascending: string DCNL :param ascending: To list jobs in chronological order by the date and DCNL time that they were submitted, enter `True`. To list jobs in DCNL reverse chronological order, enter `False`. DCNL :type page_token: string DCNL :param page_token: When Elastic Transcoder returns more than one page DCNL of results, use `pageToken` in subsequent `GET` requests to get DCNL each successive page of results.'
def list_pipelines(self, ascending=None, page_token=None): DCNL 'The ListPipelines operation gets a list of the pipelines DCNL associated with the current AWS account. DCNL :type ascending: string DCNL :param ascending: To list pipelines in chronological order by the date DCNL and time that they were created, enter `True`. To list pipelines in DCNL reverse chronological order, enter `False`. DCNL :type page_token: string DCNL :param page_token: When Elastic Transcoder returns more than one page DCNL of results, use `pageToken` in subsequent `GET` requests to get DCNL each successive page of results.'
def list_presets(self, ascending=None, page_token=None): DCNL 'The ListPresets operation gets a list of the default presets DCNL included with Elastic Transcoder and the presets that you\'ve DCNL added in an AWS region. DCNL :type ascending: string DCNL :param ascending: To list presets in chronological order by the date DCNL and time that they were created, enter `True`. To list presets in DCNL reverse chronological order, enter `False`. DCNL :type page_token: string DCNL :param page_token: When Elastic Transcoder returns more than one page DCNL of results, use `pageToken` in subsequent `GET` requests to get DCNL each successive page of results.'
def read_job(self, id=None): DCNL 'The ReadJob operation returns detailed information about a DCNL job. DCNL :type id: string DCNL :param id: The identifier of the job for which you want to get detailed DCNL information.'
def read_pipeline(self, id=None): DCNL 'The ReadPipeline operation gets detailed information about a DCNL pipeline. DCNL :type id: string DCNL :param id: The identifier of the pipeline to read.'
def read_preset(self, id=None): DCNL 'The ReadPreset operation gets detailed information about a DCNL preset. DCNL :type id: string DCNL :param id: The identifier of the preset for which you want to get DCNL detailed information.'
def test_role(self, role=None, input_bucket=None, output_bucket=None, topics=None): DCNL 'The TestRole operation tests the IAM role used to create the DCNL pipeline. DCNL The `TestRole` action lets you determine whether the IAM role DCNL you are using has sufficient permissions to let Elastic DCNL Transcoder perform tasks associated with the transcoding DCNL process. The action attempts to assume the specified IAM role, DCNL checks read access to the input and output buckets, and tries DCNL to send a test notification to Amazon SNS topics that you DCNL specify. DCNL :type role: string DCNL :param role: The IAM Amazon Resource Name (ARN) for the role that you DCNL want Elastic Transcoder to test. DCNL :type input_bucket: string DCNL :param input_bucket: The Amazon S3 bucket that contains media files to DCNL be transcoded. The action attempts to read from this bucket. DCNL :type output_bucket: string DCNL :param output_bucket: The Amazon S3 bucket that Elastic Transcoder will DCNL write transcoded media files to. The action attempts to read from DCNL this bucket. DCNL :type topics: list DCNL :param topics: The ARNs of one or more Amazon Simple Notification DCNL Service (Amazon SNS) topics that you want the action to send a test DCNL notification to.'
def update_pipeline(self, id, name=None, input_bucket=None, role=None, notifications=None, content_config=None, thumbnail_config=None): DCNL 'Use the `UpdatePipeline` operation to update settings for a DCNL pipeline. When you change pipeline settings, your changes take DCNL effect immediately. Jobs that you have already submitted and DCNL that Elastic Transcoder has not started to process are DCNL affected in addition to jobs that you submit after you change DCNL settings. DCNL :type id: string DCNL :param id: The ID of the pipeline that you want to update. DCNL :type name: string DCNL :param name: The name of the pipeline. We recommend that the name be DCNL unique within the AWS account, but uniqueness is not enforced. DCNL Constraints: Maximum 40 characters DCNL :type input_bucket: string DCNL :param input_bucket: The Amazon S3 bucket in which you saved the media DCNL files that you want to transcode and the graphics that you want to DCNL use as watermarks. DCNL :type role: string DCNL :param role: The IAM Amazon Resource Name (ARN) for the role that you DCNL want Elastic Transcoder to use to transcode jobs for this pipeline. DCNL :type notifications: dict DCNL :param notifications: DCNL The Amazon Simple Notification Service (Amazon SNS) topic or topics to DCNL notify in order to report job status. DCNL To receive notifications, you must also subscribe to the new topic in DCNL the Amazon SNS console. DCNL :type content_config: dict DCNL :param content_config: DCNL The optional `ContentConfig` object specifies information about the DCNL Amazon S3 bucket in which you want Elastic Transcoder to save DCNL transcoded files and playlists: which bucket to use, which users DCNL you want to have access to the files, the type of access you want DCNL users to have, and the storage class that you want to assign to the DCNL files. DCNL If you specify values for `ContentConfig`, you must also specify values DCNL for `ThumbnailConfig`. DCNL If you specify values for `ContentConfig` and `ThumbnailConfig`, omit DCNL the `OutputBucket` object. DCNL + **Bucket**: The Amazon S3 bucket in which you want Elastic Transcoder DCNL to save transcoded files and playlists. DCNL + **Permissions** (Optional): The Permissions object specifies which DCNL users you want to have access to transcoded files and the type of DCNL access you want them to have. You can grant permissions to a DCNL maximum of 30 users and/or predefined Amazon S3 groups. DCNL + **Grantee Type**: Specify the type of value that appears in the DCNL `Grantee` object: DCNL + **Canonical**: The value in the `Grantee` object is either the DCNL canonical user ID for an AWS account or an origin access identity DCNL for an Amazon CloudFront distribution. For more information about DCNL canonical user IDs, see Access Control List (ACL) Overview in the DCNL Amazon Simple Storage Service Developer Guide. For more information DCNL about using CloudFront origin access identities to require that DCNL users use CloudFront URLs instead of Amazon S3 URLs, see Using an DCNL Origin Access Identity to Restrict Access to Your Amazon S3 DCNL Content. A canonical user ID is not the same as an AWS account DCNL number. DCNL + **Email**: The value in the `Grantee` object is the registered email DCNL address of an AWS account. DCNL + **Group**: The value in the `Grantee` object is one of the following DCNL predefined Amazon S3 groups: `AllUsers`, `AuthenticatedUsers`, or DCNL `LogDelivery`. DCNL + **Grantee**: The AWS user or group that you want to have access to DCNL transcoded files and playlists. To identify the user or group, you DCNL can specify the canonical user ID for an AWS account, an origin DCNL access identity for a CloudFront distribution, the registered email DCNL address of an AWS account, or a predefined Amazon S3 group DCNL + **Access**: The permission that you want to give to the AWS user that DCNL you specified in `Grantee`. Permissions are granted on the files DCNL that Elastic Transcoder adds to the bucket, including playlists and DCNL video files. Valid values include: DCNL + `READ`: The grantee can read the objects and metadata for objects DCNL that Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `READ_ACP`: The grantee can read the object ACL for objects that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `WRITE_ACP`: The grantee can write the ACL for the objects that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `FULL_CONTROL`: The grantee has `READ`, `READ_ACP`, and `WRITE_ACP` DCNL permissions for the objects that Elastic Transcoder adds to the DCNL Amazon S3 bucket. DCNL + **StorageClass**: The Amazon S3 storage class, `Standard` or DCNL `ReducedRedundancy`, that you want Elastic Transcoder to assign to DCNL the video files and playlists that it stores in your Amazon S3 DCNL bucket. DCNL :type thumbnail_config: dict DCNL :param thumbnail_config: DCNL The `ThumbnailConfig` object specifies several values, including the DCNL Amazon S3 bucket in which you want Elastic Transcoder to save DCNL thumbnail files, which users you want to have access to the files, DCNL the type of access you want users to have, and the storage class DCNL that you want to assign to the files. DCNL If you specify values for `ContentConfig`, you must also specify values DCNL for `ThumbnailConfig` even if you don\'t want to create thumbnails. DCNL If you specify values for `ContentConfig` and `ThumbnailConfig`, omit DCNL the `OutputBucket` object. DCNL + **Bucket**: The Amazon S3 bucket in which you want Elastic Transcoder DCNL to save thumbnail files. DCNL + **Permissions** (Optional): The `Permissions` object specifies which DCNL users and/or predefined Amazon S3 groups you want to have access to DCNL thumbnail files, and the type of access you want them to have. You DCNL can grant permissions to a maximum of 30 users and/or predefined DCNL Amazon S3 groups. DCNL + **GranteeType**: Specify the type of value that appears in the DCNL Grantee object: DCNL + **Canonical**: The value in the `Grantee` object is either the DCNL canonical user ID for an AWS account or an origin access identity DCNL for an Amazon CloudFront distribution. A canonical user ID is not DCNL the same as an AWS account number. DCNL + **Email**: The value in the `Grantee` object is the registered email DCNL address of an AWS account. DCNL + **Group**: The value in the `Grantee` object is one of the following DCNL predefined Amazon S3 groups: `AllUsers`, `AuthenticatedUsers`, or DCNL `LogDelivery`. DCNL + **Grantee**: The AWS user or group that you want to have access to DCNL thumbnail files. To identify the user or group, you can specify the DCNL canonical user ID for an AWS account, an origin access identity for DCNL a CloudFront distribution, the registered email address of an AWS DCNL account, or a predefined Amazon S3 group. DCNL + **Access**: The permission that you want to give to the AWS user that DCNL you specified in `Grantee`. Permissions are granted on the DCNL thumbnail files that Elastic Transcoder adds to the bucket. Valid DCNL values include: DCNL + `READ`: The grantee can read the thumbnails and metadata for objects DCNL that Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `READ_ACP`: The grantee can read the object ACL for thumbnails that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `WRITE_ACP`: The grantee can write the ACL for the thumbnails that DCNL Elastic Transcoder adds to the Amazon S3 bucket. DCNL + `FULL_CONTROL`: The grantee has `READ`, `READ_ACP`, and `WRITE_ACP` DCNL permissions for the thumbnails that Elastic Transcoder adds to the DCNL Amazon S3 bucket. DCNL + **StorageClass**: The Amazon S3 storage class, `Standard` or DCNL `ReducedRedundancy`, that you want Elastic Transcoder to assign to DCNL the thumbnails that it stores in your Amazon S3 bucket.'
def update_pipeline_notifications(self, id=None, notifications=None): DCNL 'With the UpdatePipelineNotifications operation, you can update DCNL Amazon Simple Notification Service (Amazon SNS) notifications DCNL for a pipeline. DCNL When you update notifications for a pipeline, Elastic DCNL Transcoder returns the values that you specified in the DCNL request. DCNL :type id: string DCNL :param id: The identifier of the pipeline for which you want to change DCNL notification settings. DCNL :type notifications: dict DCNL :param notifications: DCNL The topic ARN for the Amazon Simple Notification Service (Amazon SNS) DCNL topic that you want to notify to report job status. DCNL To receive notifications, you must also subscribe to the new topic in DCNL the Amazon SNS console. DCNL + **Progressing**: The topic ARN for the Amazon Simple Notification DCNL Service (Amazon SNS) topic that you want to notify when Elastic DCNL Transcoder has started to process jobs that are added to this DCNL pipeline. This is the ARN that Amazon SNS returned when you created DCNL the topic. DCNL + **Completed**: The topic ARN for the Amazon SNS topic that you want DCNL to notify when Elastic Transcoder has finished processing a job. DCNL This is the ARN that Amazon SNS returned when you created the DCNL topic. DCNL + **Warning**: The topic ARN for the Amazon SNS topic that you want to DCNL notify when Elastic Transcoder encounters a warning condition. This DCNL is the ARN that Amazon SNS returned when you created the topic. DCNL + **Error**: The topic ARN for the Amazon SNS topic that you want to DCNL notify when Elastic Transcoder encounters an error condition. This DCNL is the ARN that Amazon SNS returned when you created the topic.'
def update_pipeline_status(self, id=None, status=None): DCNL 'The UpdatePipelineStatus operation pauses or reactivates a DCNL pipeline, so that the pipeline stops or restarts the DCNL processing of jobs. DCNL Changing the pipeline status is useful if you want to cancel DCNL one or more jobs. You can\'t cancel jobs after Elastic DCNL Transcoder has started processing them; if you pause the DCNL pipeline to which you submitted the jobs, you have more time DCNL to get the job IDs for the jobs that you want to cancel, and DCNL to send a CancelJob request. DCNL :type id: string DCNL :param id: The identifier of the pipeline to update. DCNL :type status: string DCNL :param status: DCNL The desired status of the pipeline: DCNL + `Active`: The pipeline is processing jobs. DCNL + `Paused`: The pipeline is not currently processing jobs.'
def encode(self, value): DCNL ':type value: file-like object DCNL :param value: A file-like object containing the content DCNL of the message.  The actual content will be stored DCNL in S3 and a link to the S3 object will be stored in DCNL the message body.'
def set_message_class(self, message_class): DCNL 'Set the message class that should be used when instantiating DCNL messages read from the queue.  By default, the class DCNL :class:`boto.sqs.message.Message` is used but this can be overriden DCNL with any class that behaves like a message. DCNL :type message_class: Message-like class DCNL :param message_class:  The new Message class'
def get_attributes(self, attributes='All'): DCNL 'Retrieves attributes about this queue object and returns DCNL them in an Attribute instance (subclass of a Dictionary). DCNL :type attributes: string DCNL :param attributes: String containing one of: DCNL ApproximateNumberOfMessages, DCNL ApproximateNumberOfMessagesNotVisible, DCNL VisibilityTimeout, DCNL CreatedTimestamp, DCNL LastModifiedTimestamp, DCNL Policy DCNL ReceiveMessageWaitTimeSeconds DCNL :rtype: Attribute object DCNL :return: An Attribute object which is a mapping type holding the DCNL requested name/value pairs'
def set_attribute(self, attribute, value): DCNL 'Set a new value for an attribute of the Queue. DCNL :type attribute: String DCNL :param attribute: The name of the attribute you want to set. DCNL :param value: The new value for the attribute must be: DCNL * For `DelaySeconds` the value must be an integer number of DCNL seconds from 0 to 900 (15 minutes). DCNL >>> queue.set_attribute(\'DelaySeconds\', 900) DCNL * For `MaximumMessageSize` the value must be an integer number of DCNL bytes from 1024 (1 KiB) to 262144 (256 KiB). DCNL >>> queue.set_attribute(\'MaximumMessageSize\', 262144) DCNL * For `MessageRetentionPeriod` the value must be an integer number of DCNL seconds from 60 (1 minute) to 1209600 (14 days). DCNL >>> queue.set_attribute(\'MessageRetentionPeriod\', 1209600) DCNL * For `Policy` the value must be an string that contains JSON formatted DCNL parameters and values. DCNL >>> queue.set_attribute(\'Policy\', json.dumps({ DCNL ...     \'Version\': \'2008-10-17\', DCNL ...     \'Id\': \'/123456789012/testQueue/SQSDefaultPolicy\', DCNL ...     \'Statement\': [ DCNL ...            \'Sid\': \'Queue1ReceiveMessage\', DCNL ...            \'Effect\': \'Allow\', DCNL ...            \'Principal\': { DCNL ...                \'AWS\': \'*\' DCNL ...            \'Action\': \'SQS:ReceiveMessage\', DCNL ...            \'Resource\': \'arn:aws:aws:sqs:us-east-1:123456789012:testQueue\' DCNL * For `ReceiveMessageWaitTimeSeconds` the value must be an integer number of DCNL seconds from 0 to 20. DCNL >>> queue.set_attribute(\'ReceiveMessageWaitTimeSeconds\', 20) DCNL * For `VisibilityTimeout` the value must be an integer number of DCNL seconds from 0 to 43200 (12 hours). DCNL >>> queue.set_attribute(\'VisibilityTimeout\', 43200) DCNL * For `RedrivePolicy` the value must be an string that contains JSON formatted DCNL parameters and values. You can set maxReceiveCount to a value between 1 and 1000. DCNL The deadLetterTargetArn value is the Amazon Resource Name (ARN) of the queue that DCNL will receive the dead letter messages. DCNL >>> queue.set_attribute(\'RedrivePolicy\', json.dumps({ DCNL ...    \'maxReceiveCount\': 5, DCNL ...    \'deadLetterTargetArn\': "arn:aws:aws:sqs:us-east-1:123456789012:testDeadLetterQueue" DCNL :rtype: bool DCNL :return: True if successful, otherwise False.'
def get_timeout(self): DCNL 'Get the visibility timeout for the queue. DCNL :rtype: int DCNL :return: The number of seconds as an integer.'
def set_timeout(self, visibility_timeout): DCNL 'Set the visibility timeout for the queue. DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The desired timeout in seconds'
def add_permission(self, label, aws_account_id, action_name): DCNL 'Add a permission to a queue. DCNL :type label: str or unicode DCNL :param label: A unique identification of the permission you are setting. DCNL Maximum of 80 characters ``[0-9a-zA-Z_-]`` DCNL Example, AliceSendMessage DCNL :type aws_account_id: str or unicode DCNL :param principal_id: The AWS account number of the principal who DCNL will be given permission.  The principal must have an AWS account, DCNL but does not need to be signed up for Amazon SQS. For information DCNL about locating the AWS account identification. DCNL :type action_name: str or unicode DCNL :param action_name: The action.  Valid choices are: DCNL SendMessage|ReceiveMessage|DeleteMessage| DCNL ChangeMessageVisibility|GetQueueAttributes|* DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def remove_permission(self, label): DCNL 'Remove a permission from a queue. DCNL :type label: str or unicode DCNL :param label: The unique label associated with the permission DCNL being removed. DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def read(self, visibility_timeout=None, wait_time_seconds=None, message_attributes=None): DCNL 'Read a single message from the queue. DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The timeout for this message in seconds DCNL :type wait_time_seconds: int DCNL :param wait_time_seconds: The duration (in seconds) for which the call DCNL will wait for a message to arrive in the queue before returning. DCNL If a message is available, the call will return sooner than DCNL wait_time_seconds. DCNL :type message_attributes: list DCNL :param message_attributes: The name(s) of additional message DCNL attributes to return. The default is to return no additional DCNL message attributes. Use ``[\'All\']`` or ``[\'.*\']`` to return all. DCNL :rtype: :class:`boto.sqs.message.Message` DCNL :return: A single message or None if queue is empty'
def write(self, message, delay_seconds=None): DCNL 'Add a single message to the queue. DCNL :type message: Message DCNL :param message: The message to be written to the queue DCNL :rtype: :class:`boto.sqs.message.Message` DCNL :return: The :class:`boto.sqs.message.Message` object that was written.'
def write_batch(self, messages): DCNL 'Delivers up to 10 messages in a single request. DCNL :type messages: List of lists. DCNL :param messages: A list of lists or tuples.  Each inner DCNL tuple represents a single message to be written DCNL and consists of and ID (string) that must be unique DCNL within the list of messages, the message body itself DCNL which can be a maximum of 64K in length, an DCNL integer which represents the delay time (in seconds) DCNL for the message (0-900) before the message will DCNL be delivered to the queue, and an optional dict of DCNL message attributes like those passed to ``send_message`` DCNL in the connection class.'
def new_message(self, body='', **kwargs): DCNL 'Create new message of appropriate class. DCNL :type body: message body DCNL :param body: The body of the newly created message (optional). DCNL :rtype: :class:`boto.sqs.message.Message` DCNL :return: A new Message object'
def get_messages(self, num_messages=1, visibility_timeout=None, attributes=None, wait_time_seconds=None, message_attributes=None): DCNL 'Get a variable number of messages. DCNL :type num_messages: int DCNL :param num_messages: The maximum number of messages to read from DCNL the queue. DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The VisibilityTimeout for the messages read. DCNL :type attributes: str DCNL :param attributes: The name of additional attribute to return DCNL with response or All if you want all attributes.  The DCNL default is to return no additional attributes.  Valid DCNL values: All SenderId SentTimestamp ApproximateReceiveCount DCNL ApproximateFirstReceiveTimestamp DCNL :type wait_time_seconds: int DCNL :param wait_time_seconds: The duration (in seconds) for which the call DCNL will wait for a message to arrive in the queue before returning. DCNL If a message is available, the call will return sooner than DCNL wait_time_seconds. DCNL :type message_attributes: list DCNL :param message_attributes: The name(s) of additional message DCNL attributes to return. The default is to return no additional DCNL message attributes. Use ``[\'All\']`` or ``[\'.*\']`` to return all. DCNL :rtype: list DCNL :return: A list of :class:`boto.sqs.message.Message` objects.'
def delete_message(self, message): DCNL 'Delete a message from the queue. DCNL :type message: :class:`boto.sqs.message.Message` DCNL :param message: The :class:`boto.sqs.message.Message` object to delete. DCNL :rtype: bool DCNL :return: True if successful, False otherwise'
def delete_message_batch(self, messages): DCNL 'Deletes a list of messages in a single request. DCNL :type messages: List of :class:`boto.sqs.message.Message` objects. DCNL :param messages: A list of message objects.'
def change_message_visibility_batch(self, messages): DCNL 'A batch version of change_message_visibility that can act DCNL on up to 10 messages at a time. DCNL :type messages: List of tuples. DCNL :param messages: A list of tuples where each tuple consists DCNL of a :class:`boto.sqs.message.Message` object and an integer DCNL that represents the new visibility timeout for that message.'
def delete(self): DCNL 'Delete the queue.'
def purge(self): DCNL 'Purge all messages in the queue.'
def clear(self, page_size=10, vtimeout=10): DCNL 'Deprecated utility function to remove all messages from a queue'
def count(self, page_size=10, vtimeout=10): DCNL 'Utility function to count the number of messages in a queue. DCNL Note: This function now calls GetQueueAttributes to obtain DCNL an \'approximate\' count of the number of messages in a queue.'
def count_slow(self, page_size=10, vtimeout=10): DCNL 'Deprecated.  This is the old \'count\' method that actually counts DCNL the messages by reading them all.  This gives an accurate count but DCNL is very slow for queues with non-trivial number of messasges. DCNL Instead, use get_attributes(\'ApproximateNumberOfMessages\') to take DCNL advantage of the new SQS capability.  This is retained only for DCNL the unit tests.'
def dump(self, file_name, page_size=10, vtimeout=10, sep='\n'): DCNL 'Utility function to dump the messages in a queue to a file DCNL NOTE: Page size must be < 10 else SQS errors'
def save_to_file(self, fp, sep='\n'): DCNL 'Read all messages from the queue and persist them to file-like object. DCNL Messages are written to the file and the \'sep\' string is written DCNL in between messages.  Messages are deleted from the queue after DCNL being written to the file. DCNL Returns the number of messages saved.'
def save_to_filename(self, file_name, sep='\n'): DCNL 'Read all messages from the queue and persist them to local file. DCNL Messages are written to the file and the \'sep\' string is written DCNL in between messages.  Messages are deleted from the queue after DCNL being written to the file. DCNL Returns the number of messages saved.'
def save_to_s3(self, bucket): DCNL 'Read all messages from the queue and persist them to S3. DCNL Messages are stored in the S3 bucket using a naming scheme of:: DCNL <queue_id>/<message_id> DCNL Messages are deleted from the queue after being saved to S3. DCNL Returns the number of messages saved.'
def load_from_s3(self, bucket, prefix=None): DCNL 'Load messages previously saved to S3.'
def load_from_file(self, fp, sep='\n'): DCNL 'Utility function to load messages from a file-like object to a queue'
def load_from_filename(self, file_name, sep='\n'): DCNL 'Utility function to load messages from a local filename to a queue'
def create_queue(self, queue_name, visibility_timeout=None): DCNL 'Create an SQS Queue. DCNL :type queue_name: str or unicode DCNL :param queue_name: The name of the new queue.  Names are DCNL scoped to an account and need to be unique within that DCNL account.  Calling this method on an existing queue name DCNL will not return an error from SQS unless the value for DCNL visibility_timeout is different than the value of the DCNL existing queue of that name.  This is still an expensive DCNL operation, though, and not the preferred way to check for DCNL the existence of a queue.  See the DCNL :func:`boto.sqs.connection.SQSConnection.lookup` method. DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The default visibility timeout for DCNL all messages written in the queue.  This can be overridden DCNL on a per-message. DCNL :rtype: :class:`boto.sqs.queue.Queue` DCNL :return: The newly created queue.'
def delete_queue(self, queue, force_deletion=False): DCNL 'Delete an SQS Queue. DCNL :type queue: A Queue object DCNL :param queue: The SQS queue to be deleted DCNL :type force_deletion: Boolean DCNL :param force_deletion: A deprecated parameter that is no longer used by DCNL SQS\'s API. DCNL :rtype: bool DCNL :return: True if the command succeeded, False otherwise'
def purge_queue(self, queue): DCNL 'Purge all messages in an SQS Queue. DCNL :type queue: A Queue object DCNL :param queue: The SQS queue to be purged DCNL :rtype: bool DCNL :return: True if the command succeeded, False otherwise'
def get_queue_attributes(self, queue, attribute='All'): DCNL 'Gets one or all attributes of a Queue DCNL :type queue: A Queue object DCNL :param queue: The SQS queue to get attributes for DCNL :type attribute: str DCNL :param attribute: The specific attribute requested.  If not DCNL supplied, the default is to return all attributes.  Valid DCNL attributes are: DCNL * All DCNL * ApproximateNumberOfMessages DCNL * ApproximateNumberOfMessagesNotVisible DCNL * VisibilityTimeout DCNL * CreatedTimestamp DCNL * LastModifiedTimestamp DCNL * Policy DCNL * MaximumMessageSize DCNL * MessageRetentionPeriod DCNL * QueueArn DCNL * ApproximateNumberOfMessagesDelayed DCNL * DelaySeconds DCNL * ReceiveMessageWaitTimeSeconds DCNL * RedrivePolicy DCNL :rtype: :class:`boto.sqs.attributes.Attributes` DCNL :return: An Attributes object containing request value(s).'
def set_queue_attribute(self, queue, attribute, value): DCNL 'Set a new value for an attribute of a Queue. DCNL :type queue: A Queue object DCNL :param queue: The SQS queue to get attributes for DCNL :type attribute: String DCNL :param attribute: The name of the attribute you want to set. DCNL :param value: The new value for the attribute must be: DCNL * For `DelaySeconds` the value must be an integer number of DCNL seconds from 0 to 900 (15 minutes). DCNL >>> connection.set_queue_attribute(queue, \'DelaySeconds\', 900) DCNL * For `MaximumMessageSize` the value must be an integer number of DCNL bytes from 1024 (1 KiB) to 262144 (256 KiB). DCNL >>> connection.set_queue_attribute(queue, \'MaximumMessageSize\', 262144) DCNL * For `MessageRetentionPeriod` the value must be an integer number of DCNL seconds from 60 (1 minute) to 1209600 (14 days). DCNL >>> connection.set_queue_attribute(queue, \'MessageRetentionPeriod\', 1209600) DCNL * For `Policy` the value must be an string that contains JSON formatted DCNL parameters and values. DCNL >>> connection.set_queue_attribute(queue, \'Policy\', json.dumps({ DCNL ...     \'Version\': \'2008-10-17\', DCNL ...     \'Id\': \'/123456789012/testQueue/SQSDefaultPolicy\', DCNL ...     \'Statement\': [ DCNL ...            \'Sid\': \'Queue1ReceiveMessage\', DCNL ...            \'Effect\': \'Allow\', DCNL ...            \'Principal\': { DCNL ...                \'AWS\': \'*\' DCNL ...            \'Action\': \'SQS:ReceiveMessage\', DCNL ...            \'Resource\': \'arn:aws:aws:sqs:us-east-1:123456789012:testQueue\' DCNL * For `ReceiveMessageWaitTimeSeconds` the value must be an integer number of DCNL seconds from 0 to 20. DCNL >>> connection.set_queue_attribute(queue, \'ReceiveMessageWaitTimeSeconds\', 20) DCNL * For `VisibilityTimeout` the value must be an integer number of DCNL seconds from 0 to 43200 (12 hours). DCNL >>> connection.set_queue_attribute(queue, \'VisibilityTimeout\', 43200) DCNL * For `RedrivePolicy` the value must be an string that contains JSON formatted DCNL parameters and values. You can set maxReceiveCount to a value between 1 and 1000. DCNL The deadLetterTargetArn value is the Amazon Resource Name (ARN) of the queue that DCNL will receive the dead letter messages. DCNL >>> connection.set_queue_attribute(queue, \'RedrivePolicy\', json.dumps({ DCNL ...    \'maxReceiveCount\': 5, DCNL ...    \'deadLetterTargetArn\': "arn:aws:aws:sqs:us-east-1:123456789012:testDeadLetterQueue"'
def receive_message(self, queue, number_messages=1, visibility_timeout=None, attributes=None, wait_time_seconds=None, message_attributes=None): DCNL 'Read messages from an SQS Queue. DCNL :type queue: A Queue object DCNL :param queue: The Queue from which messages are read. DCNL :type number_messages: int DCNL :param number_messages: The maximum number of messages to read DCNL (default=1) DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The number of seconds the message should DCNL remain invisible to other queue readers DCNL (default=None which uses the Queues default) DCNL :type attributes: str DCNL :param attributes: The name of additional attribute to return DCNL with response or All if you want all attributes.  The DCNL default is to return no additional attributes.  Valid DCNL values: DCNL * All DCNL * SenderId DCNL * SentTimestamp DCNL * ApproximateReceiveCount DCNL * ApproximateFirstReceiveTimestamp DCNL :type wait_time_seconds: int DCNL :param wait_time_seconds: The duration (in seconds) for which the call DCNL will wait for a message to arrive in the queue before returning. DCNL If a message is available, the call will return sooner than DCNL wait_time_seconds. DCNL :type message_attributes: list DCNL :param message_attributes: The name(s) of additional message DCNL attributes to return. The default is to return no additional DCNL message attributes. Use ``[\'All\']`` or ``[\'.*\']`` to return all. DCNL :rtype: list DCNL :return: A list of :class:`boto.sqs.message.Message` objects.'
def delete_message(self, queue, message): DCNL 'Delete a message from a queue. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object DCNL :param queue: The Queue from which messages are read. DCNL :type message: A :class:`boto.sqs.message.Message` object DCNL :param message: The Message to be deleted DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def delete_message_batch(self, queue, messages): DCNL 'Deletes a list of messages from a queue in a single request. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object. DCNL :param queue: The Queue to which the messages will be written. DCNL :type messages: List of :class:`boto.sqs.message.Message` objects. DCNL :param messages: A list of message objects.'
def delete_message_from_handle(self, queue, receipt_handle): DCNL 'Delete a message from a queue, given a receipt handle. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object DCNL :param queue: The Queue from which messages are read. DCNL :type receipt_handle: str DCNL :param receipt_handle: The receipt handle for the message DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def send_message(self, queue, message_content, delay_seconds=None, message_attributes=None): DCNL 'Send a new message to the queue. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object. DCNL :param queue: The Queue to which the messages will be written. DCNL :type message_content: string DCNL :param message_content: The body of the message DCNL :type delay_seconds: int DCNL :param delay_seconds: Number of seconds (0 - 900) to delay this DCNL message from being processed. DCNL :type message_attributes: dict DCNL :param message_attributes: Message attributes to set. Should be DCNL of the form: DCNL "name1": { DCNL "data_type": "Number", DCNL "string_value": "1" DCNL "name2": { DCNL "data_type": "String", DCNL "string_value": "Bob"'
def send_message_batch(self, queue, messages): DCNL 'Delivers up to 10 messages to a queue in a single request. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object. DCNL :param queue: The Queue to which the messages will be written. DCNL :type messages: List of lists. DCNL :param messages: A list of lists or tuples.  Each inner DCNL tuple represents a single message to be written DCNL and consists of and ID (string) that must be unique DCNL within the list of messages, the message body itself DCNL which can be a maximum of 64K in length, an DCNL integer which represents the delay time (in seconds) DCNL for the message (0-900) before the message will DCNL be delivered to the queue, and an optional dict of DCNL message attributes like those passed to ``send_message`` DCNL above.'
def change_message_visibility(self, queue, receipt_handle, visibility_timeout): DCNL 'Extends the read lock timeout for the specified message from DCNL the specified queue to the specified value. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object DCNL :param queue: The Queue from which messages are read. DCNL :type receipt_handle: str DCNL :param receipt_handle: The receipt handle associated with the message DCNL whose visibility timeout will be changed. DCNL :type visibility_timeout: int DCNL :param visibility_timeout: The new value of the message\'s visibility DCNL timeout in seconds.'
def change_message_visibility_batch(self, queue, messages): DCNL 'A batch version of change_message_visibility that can act DCNL on up to 10 messages at a time. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object. DCNL :param queue: The Queue to which the messages will be written. DCNL :type messages: List of tuples. DCNL :param messages: A list of tuples where each tuple consists DCNL of a :class:`boto.sqs.message.Message` object and an integer DCNL that represents the new visibility timeout for that message.'
def get_all_queues(self, prefix=''): DCNL 'Retrieves all queues. DCNL :keyword str prefix: Optionally, only return queues that start with DCNL this value. DCNL :rtype: list DCNL :returns: A list of :py:class:`boto.sqs.queue.Queue` instances.'
def get_queue(self, queue_name, owner_acct_id=None): DCNL 'Retrieves the queue with the given name, or ``None`` if no match DCNL was found. DCNL :param str queue_name: The name of the queue to retrieve. DCNL :param str owner_acct_id: Optionally, the AWS account ID of the account that created the queue. DCNL :rtype: :py:class:`boto.sqs.queue.Queue` or ``None`` DCNL :returns: The requested queue, or ``None`` if no match was found.'
def get_dead_letter_source_queues(self, queue): DCNL 'Retrieves the dead letter source queues for a given queue. DCNL :type queue: A :class:`boto.sqs.queue.Queue` object. DCNL :param queue: The queue for which to get DL source queues DCNL :rtype: list DCNL :returns: A list of :py:class:`boto.sqs.queue.Queue` instances.'
def add_permission(self, queue, label, aws_account_id, action_name): DCNL 'Add a permission to a queue. DCNL :type queue: :class:`boto.sqs.queue.Queue` DCNL :param queue: The queue object DCNL :type label: str or unicode DCNL :param label: A unique identification of the permission you are setting. DCNL Maximum of 80 characters ``[0-9a-zA-Z_-]`` DCNL Example, AliceSendMessage DCNL :type aws_account_id: str or unicode DCNL :param principal_id: The AWS account number of the principal DCNL who will be given permission.  The principal must have an DCNL AWS account, but does not need to be signed up for Amazon DCNL SQS. For information about locating the AWS account DCNL identification. DCNL :type action_name: str or unicode DCNL :param action_name: The action.  Valid choices are: DCNL * SendMessage DCNL * ReceiveMessage DCNL * DeleteMessage DCNL * ChangeMessageVisibility DCNL * GetQueueAttributes DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def remove_permission(self, queue, label): DCNL 'Remove a permission from a queue. DCNL :type queue: :class:`boto.sqs.queue.Queue` DCNL :param queue: The queue object DCNL :type label: str or unicode DCNL :param label: The unique label associated with the permission DCNL being removed. DCNL :rtype: bool DCNL :return: True if successful, False otherwise.'
def encode(self, value): DCNL 'Transform body object into serialized byte array format.'
def decode(self, value): DCNL 'Transform seralized byte array into any object.'
def set_body(self, body): DCNL 'Override the current body for this object, using decoded format.'
def get_body_encoded(self): DCNL 'This method is really a semi-private method used by the Queue.write DCNL method when writing the contents of the message to SQS. DCNL You probably shouldn\'t need to call this method in the normal course of events.'
def get_response(self, action, params, page=0, itemSet=None): DCNL 'Utility method to handle calls to ECS and parsing of responses.'
def item_search(self, search_index, **params): DCNL 'Returns items that satisfy the search criteria, including one or more search DCNL indices. DCNL For a full list of search terms, DCNL :see: http://docs.amazonwebservices.com/AWSECommerceService/2010-09-01/DG/index.html?ItemSearch.html'
def item_lookup(self, **params): DCNL 'Returns items that satisfy the lookup query. DCNL For a full list of parameters, see: DCNL http://s3.amazonaws.com/awsdocs/Associates/2011-08-01/prod-adv-api-dg-2011-08-01.pdf'
def __init__(self, connection=None, nodename=None): DCNL 'Initialize this Item'
def __init__(self, connection=None): DCNL 'Initialize this Item'
def __next__(self): DCNL 'Special paging functionality'
def to_xml(self): DCNL 'Override to first fetch everything'
def get_account_balance(self): DCNL ''
def register_hit_type(self, title, description, reward, duration, keywords=None, approval_delay=None, qual_req=None): DCNL 'Register a new HIT Type DCNL title, description are strings DCNL reward is a Price object DCNL duration can be a timedelta, or an object castable to an int'
def set_email_notification(self, hit_type, email, event_types=None): DCNL 'Performs a SetHITTypeNotification operation to set email DCNL notification for a specified HIT type'
def set_rest_notification(self, hit_type, url, event_types=None): DCNL 'Performs a SetHITTypeNotification operation to set REST notification DCNL for a specified HIT type'
def set_sqs_notification(self, hit_type, queue_url, event_types=None): DCNL 'Performs a SetHITTypeNotification operation so set SQS notification DCNL for a specified HIT type. Queue URL is of form: DCNL https://queue.amazonaws.com/<CUSTOMER_ID>/<QUEUE_NAME> and can be DCNL found when looking at the details for a Queue in the AWS Console'
def send_test_event_notification(self, hit_type, url, event_types=None, test_event_type='Ping'): DCNL 'Performs a SendTestEventNotification operation with REST notification DCNL for a specified HIT type'
def _set_notification(self, hit_type, transport, destination, request_type, event_types=None, test_event_type=None): DCNL 'Common operation to set notification or send a test event DCNL notification for a specified HIT type'
def create_hit(self, hit_type=None, question=None, hit_layout=None, lifetime=datetime.timedelta(days=7), max_assignments=1, title=None, description=None, keywords=None, reward=None, duration=datetime.timedelta(days=7), approval_delay=None, annotation=None, questions=None, qualifications=None, layout_params=None, response_groups=None): DCNL 'Creates a new HIT. DCNL Returns a ResultSet DCNL See: http://docs.amazonwebservices.com/AWSMechTurk/2012-03-25/AWSMturkAPI/ApiReference_CreateHITOperation.html'
def change_hit_type_of_hit(self, hit_id, hit_type): DCNL 'Change the HIT type of an existing HIT. Note that the reward associated DCNL with the new HIT type must match the reward of the current HIT type in DCNL order for the operation to be valid. DCNL :type hit_id: str DCNL :type hit_type: str'
def get_reviewable_hits(self, hit_type=None, status='Reviewable', sort_by='Expiration', sort_direction='Ascending', page_size=10, page_number=1): DCNL 'Retrieve the HITs that have a status of Reviewable, or HITs that DCNL have a status of Reviewing, and that belong to the Requester DCNL calling the operation.'
@staticmethod DCNL def _get_pages(page_size, total_records): DCNL 'Given a page size (records per page) and a total number of DCNL records, return the page numbers to be retrieved.'
def get_all_hits(self): DCNL 'Return all of a Requester\'s HITs DCNL Despite what search_hits says, it does not return all hits, but DCNL instead returns a page of hits. This method will pull the hits DCNL from the server 100 at a time, but will yield the results DCNL iteratively, so subsequent requests are made on demand.'
def search_hits(self, sort_by='CreationTime', sort_direction='Ascending', page_size=10, page_number=1, response_groups=None): DCNL 'Return a page of a Requester\'s HITs, on behalf of the Requester. DCNL The operation returns HITs of any status, except for HITs that DCNL have been disposed with the DisposeHIT operation. DCNL Note: DCNL The SearchHITs operation does not accept any search parameters DCNL that filter the results.'
def get_assignment(self, assignment_id, response_groups=None): DCNL 'Retrieves an assignment using the assignment\'s ID. Requesters can only DCNL retrieve their own assignments, and only assignments whose related HIT DCNL has not been disposed. DCNL The returned ResultSet will have the following attributes: DCNL Request DCNL This element is present only if the Request ResponseGroup DCNL is specified. DCNL Assignment DCNL The assignment. The response includes one Assignment object. DCNL HIT DCNL The HIT associated with this assignment. The response DCNL includes one HIT object.'
def get_assignments(self, hit_id, status=None, sort_by='SubmitTime', sort_direction='Ascending', page_size=10, page_number=1, response_groups=None): DCNL 'Retrieves completed assignments for a HIT. DCNL Use this operation to retrieve the results for a HIT. DCNL The returned ResultSet will have the following attributes: DCNL NumResults DCNL The number of assignments on the page in the filtered results DCNL list, equivalent to the number of assignments being returned DCNL by this call. DCNL A non-negative integer, as a string. DCNL PageNumber DCNL The number of the page in the filtered results list being DCNL returned. DCNL A positive integer, as a string. DCNL TotalNumResults DCNL The total number of HITs in the filtered results list based DCNL on this call. DCNL A non-negative integer, as a string. DCNL The ResultSet will contain zero or more Assignment objects'
def approve_assignment(self, assignment_id, feedback=None): DCNL ''
def reject_assignment(self, assignment_id, feedback=None): DCNL ''
def approve_rejected_assignment(self, assignment_id, feedback=None): DCNL ''
def get_file_upload_url(self, assignment_id, question_identifier): DCNL 'Generates and returns a temporary URL to an uploaded file. The DCNL temporary URL is used to retrieve the file as an answer to a DCNL FileUploadAnswer question, it is valid for 60 seconds. DCNL Will have a FileUploadURL attribute as per the API Reference.'
def get_hit(self, hit_id, response_groups=None): DCNL ''
def set_reviewing(self, hit_id, revert=None): DCNL 'Update a HIT with a status of Reviewable to have a status of Reviewing, DCNL or reverts a Reviewing HIT back to the Reviewable status. DCNL Only HITs with a status of Reviewable can be updated with a status of DCNL Reviewing.  Similarly, only Reviewing HITs can be reverted back to a DCNL status of Reviewable.'
def disable_hit(self, hit_id, response_groups=None): DCNL 'Remove a HIT from the Mechanical Turk marketplace, approves all DCNL submitted assignments that have not already been approved or rejected, DCNL and disposes of the HIT and all assignment data. DCNL Assignments for the HIT that have already been submitted, but not yet DCNL approved or rejected, will be automatically approved. Assignments in DCNL progress at the time of the call to DisableHIT will be approved once DCNL the assignments are submitted. You will be charged for approval of DCNL these assignments.  DisableHIT completely disposes of the HIT and DCNL all submitted assignment data. Assignment results data cannot be DCNL retrieved for a HIT that has been disposed. DCNL It is not possible to re-enable a HIT once it has been disabled. DCNL To make the work from a disabled HIT available again, create a new HIT.'
def dispose_hit(self, hit_id): DCNL 'Dispose of a HIT that is no longer needed. DCNL Only HITs in the "reviewable" state, with all submitted DCNL assignments approved or rejected, can be disposed. A Requester DCNL can call GetReviewableHITs to determine which HITs are DCNL reviewable, then call GetAssignmentsForHIT to retrieve the DCNL assignments.  Disposing of a HIT removes the HIT from the DCNL results of a call to GetReviewableHITs.'
def expire_hit(self, hit_id): DCNL 'Expire a HIT that is no longer needed. DCNL The effect is identical to the HIT expiring on its own. The DCNL HIT no longer appears on the Mechanical Turk web site, and no DCNL new Workers are allowed to accept the HIT. Workers who have DCNL accepted the HIT prior to expiration are allowed to complete DCNL it or return it, or allow the assignment duration to elapse DCNL (abandon the HIT). Once all remaining assignments have been DCNL submitted, the expired HIT becomes"reviewable", and will be DCNL returned by a call to GetReviewableHITs.'
def extend_hit(self, hit_id, assignments_increment=None, expiration_increment=None): DCNL 'Increase the maximum number of assignments, or extend the DCNL expiration date, of an existing HIT. DCNL NOTE: If a HIT has a status of Reviewable and the HIT is DCNL extended to make it Available, the HIT will not be returned by DCNL GetReviewableHITs, and its submitted assignments will not be DCNL returned by GetAssignmentsForHIT, until the HIT is Reviewable DCNL again.  Assignment auto-approval will still happen on its DCNL original schedule, even if the HIT has been extended. Be sure DCNL to retrieve and approve (or reject) submitted assignments DCNL before extending the HIT, if so desired.'
def get_help(self, about, help_type='Operation'): DCNL 'Return information about the Mechanical Turk Service DCNL operations and response group NOTE - this is basically useless DCNL as it just returns the URL of the documentation DCNL help_type: either \'Operation\' or \'ResponseGroup\''
def grant_bonus(self, worker_id, assignment_id, bonus_price, reason): DCNL 'Issues a payment of money from your account to a Worker.  To DCNL be eligible for a bonus, the Worker must have submitted DCNL results for one of your HITs, and have had those results DCNL approved or rejected. This payment happens separately from the DCNL reward you pay to the Worker when you approve the Worker\'s DCNL assignment.  The Bonus must be passed in as an instance of the DCNL Price object.'
def block_worker(self, worker_id, reason): DCNL 'Block a worker from working on my tasks.'
def unblock_worker(self, worker_id, reason): DCNL 'Unblock a worker from working on my tasks.'
def notify_workers(self, worker_ids, subject, message_text): DCNL 'Send a text message to workers.'
def create_qualification_type(self, name, description, status, keywords=None, retry_delay=None, test=None, answer_key=None, answer_key_xml=None, test_duration=None, auto_granted=False, auto_granted_value=1): DCNL 'Create a new Qualification Type. DCNL name: This will be visible to workers and must be unique for a DCNL given requester. DCNL description: description shown to workers.  Max 2000 characters. DCNL status: \'Active\' or \'Inactive\' DCNL keywords: list of keyword strings or comma separated string. DCNL Max length of 1000 characters when concatenated with commas. DCNL retry_delay: number of seconds after requesting a DCNL qualification the worker must wait before they can ask again. DCNL If not specified, workers can only request this qualification DCNL once. DCNL test: a QuestionForm DCNL answer_key: an XML string of your answer key, for automatically DCNL scored qualification tests. DCNL (Consider implementing an AnswerKey class for this to support.) DCNL test_duration: the number of seconds a worker has to complete the test. DCNL auto_granted: if True, requests for the Qualification are granted DCNL immediately.  Can\'t coexist with a test. DCNL auto_granted_value: auto_granted qualifications are given this value.'
def dispose_qualification_type(self, qualification_type_id): DCNL 'TODO: Document.'
def search_qualification_types(self, query=None, sort_by='Name', sort_direction='Ascending', page_size=10, page_number=1, must_be_requestable=True, must_be_owned_by_caller=True): DCNL 'TODO: Document.'
def get_qualification_requests(self, qualification_type_id, sort_by='Expiration', sort_direction='Ascending', page_size=10, page_number=1): DCNL 'TODO: Document.'
def grant_qualification(self, qualification_request_id, integer_value=1): DCNL 'TODO: Document.'
def revoke_qualification(self, subject_id, qualification_type_id, reason=None): DCNL 'TODO: Document.'
def get_qualification_score(self, qualification_type_id, worker_id): DCNL 'TODO: Document.'
def update_qualification_score(self, qualification_type_id, worker_id, value): DCNL 'TODO: Document.'
def _process_request(self, request_type, params, marker_elems=None): DCNL 'Helper to process the xml response from AWS'
def _process_response(self, response, marker_elems=None): DCNL 'Helper to process the xml response from AWS'
@staticmethod DCNL def get_keywords_as_string(keywords): DCNL 'Returns a comma+space-separated string of keywords from either DCNL a list or a string'
@staticmethod DCNL def get_price_as_price(reward): DCNL 'Returns a Price data structure from either a float or a Price'
def _has_expired(self): DCNL 'Has this HIT expired yet?'
def __init__(self, d): DCNL 'Constructor; expects parameter d to be a dict of string parameters from a REST transport notification message'
def verify(self, secret_key): DCNL 'Verifies the authenticity of a notification message. DCNL TODO: This is doing a form of authentication and DCNL this functionality should really be merged DCNL with the pluggable authentication mechanism DCNL at some point.'
def get_all_vpcs(self, vpc_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your VPCs.  You can filter results to DCNL return information only about those VPCs that match your search DCNL parameters.  Otherwise, all VPCs associated with your account DCNL are returned. DCNL :type vpc_ids: list DCNL :param vpc_ids: A list of strings with the desired VPC ID\'s DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL * *state* - a list of states of the VPC (pending or available) DCNL * *cidrBlock* - a list CIDR blocks of the VPC DCNL * *dhcpOptionsId* - a list of IDs of a set of DHCP options DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.vpc.VPC`'
def create_vpc(self, cidr_block, instance_tenancy=None, dry_run=False): DCNL 'Create a new Virtual Private Cloud. DCNL :type cidr_block: str DCNL :param cidr_block: A valid CIDR block DCNL :type instance_tenancy: str DCNL :param instance_tenancy: The supported tenancy options for instances DCNL launched into the VPC. Valid values are \'default\' and \'dedicated\'. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created VPC DCNL :return: A :class:`boto.vpc.vpc.VPC` object'
def delete_vpc(self, vpc_id, dry_run=False): DCNL 'Delete a Virtual Private Cloud. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the vpc to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def modify_vpc_attribute(self, vpc_id, enable_dns_support=None, enable_dns_hostnames=None, dry_run=False): DCNL 'Modifies the specified attribute of the specified VPC. DCNL You can only modify one attribute at a time. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the vpc to be deleted. DCNL :type enable_dns_support: bool DCNL :param enable_dns_support: Specifies whether the DNS server DCNL provided by Amazon is enabled for the VPC. DCNL :type enable_dns_hostnames: bool DCNL :param enable_dns_hostnames: Specifies whether DNS hostnames are DCNL provided for the instances launched in this VPC. You can only DCNL set this attribute to ``true`` if EnableDnsSupport DCNL is also ``true``. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def get_all_route_tables(self, route_table_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your routing tables. You can filter results DCNL to return information only about those route tables that match your DCNL search parameters. Otherwise, all route tables associated with your DCNL account are returned. DCNL :type route_table_ids: list DCNL :param route_table_ids: A list of strings with the desired route table DCNL IDs. DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters. Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.routetable.RouteTable`'
def associate_route_table(self, route_table_id, subnet_id, dry_run=False): DCNL 'Associates a route table with a specific subnet. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the route table to associate. DCNL :type subnet_id: str DCNL :param subnet_id: The ID of the subnet to associate with. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: str DCNL :return: The ID of the association created'
def disassociate_route_table(self, association_id, dry_run=False): DCNL 'Removes an association from a route table. This will cause all subnets DCNL that would\'ve used this association to now use the main routing DCNL association instead. DCNL :type association_id: str DCNL :param association_id: The ID of the association to disassociate. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def create_route_table(self, vpc_id, dry_run=False): DCNL 'Creates a new route table. DCNL :type vpc_id: str DCNL :param vpc_id: The VPC ID to associate this route table with. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created route table DCNL :return: A :class:`boto.vpc.routetable.RouteTable` object'
def delete_route_table(self, route_table_id, dry_run=False): DCNL 'Delete a route table. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the route table to delete. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def _replace_route_table_association(self, association_id, route_table_id, dry_run=False): DCNL 'Helper function for replace_route_table_association and DCNL replace_route_table_association_with_assoc. Should not be used directly. DCNL :type association_id: str DCNL :param association_id: The ID of the existing association to replace. DCNL :type route_table_id: str DCNL :param route_table_id: The route table to ID to be used in the DCNL association. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: ResultSet DCNL :return: ResultSet of Amazon resposne'
def replace_route_table_assocation(self, association_id, route_table_id, dry_run=False): DCNL 'Replaces a route association with a new route table.  This can be DCNL used to replace the \'main\' route table by using the main route DCNL table association instead of the more common subnet type DCNL association. DCNL NOTE: It may be better to use replace_route_table_association_with_assoc DCNL instead of this function; this function does not return the new DCNL association ID. This function is retained for backwards compatibility. DCNL :type association_id: str DCNL :param association_id: The ID of the existing association to replace. DCNL :type route_table_id: str DCNL :param route_table_id: The route table to ID to be used in the DCNL association. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def replace_route_table_association_with_assoc(self, association_id, route_table_id, dry_run=False): DCNL 'Replaces a route association with a new route table.  This can be DCNL used to replace the \'main\' route table by using the main route DCNL table association instead of the more common subnet type DCNL association. Returns the new association ID. DCNL :type association_id: str DCNL :param association_id: The ID of the existing association to replace. DCNL :type route_table_id: str DCNL :param route_table_id: The route table to ID to be used in the DCNL association. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: str DCNL :return: New association ID'
def create_route(self, route_table_id, destination_cidr_block, gateway_id=None, instance_id=None, interface_id=None, vpc_peering_connection_id=None, dry_run=False): DCNL 'Creates a new route in the route table within a VPC. The route\'s target DCNL can be either a gateway attached to the VPC or a NAT instance in the DCNL VPC. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the route table for the route. DCNL :type destination_cidr_block: str DCNL :param destination_cidr_block: The CIDR address block used for the DCNL destination match. DCNL :type gateway_id: str DCNL :param gateway_id: The ID of the gateway attached to your VPC. DCNL :type instance_id: str DCNL :param instance_id: The ID of a NAT instance in your VPC. DCNL :type interface_id: str DCNL :param interface_id: Allows routing to network interface attachments. DCNL :type vpc_peering_connection_id: str DCNL :param vpc_peering_connection_id: Allows routing to VPC peering DCNL connection. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def replace_route(self, route_table_id, destination_cidr_block, gateway_id=None, instance_id=None, interface_id=None, vpc_peering_connection_id=None, dry_run=False): DCNL 'Replaces an existing route within a route table in a VPC. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the route table for the route. DCNL :type destination_cidr_block: str DCNL :param destination_cidr_block: The CIDR address block used for the DCNL destination match. DCNL :type gateway_id: str DCNL :param gateway_id: The ID of the gateway attached to your VPC. DCNL :type instance_id: str DCNL :param instance_id: The ID of a NAT instance in your VPC. DCNL :type interface_id: str DCNL :param interface_id: Allows routing to network interface attachments. DCNL :type vpc_peering_connection_id: str DCNL :param vpc_peering_connection_id: Allows routing to VPC peering DCNL connection. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def delete_route(self, route_table_id, destination_cidr_block, dry_run=False): DCNL 'Deletes a route from a route table within a VPC. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the route table with the route. DCNL :type destination_cidr_block: str DCNL :param destination_cidr_block: The CIDR address block used for DCNL destination match. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_network_acls(self, network_acl_ids=None, filters=None): DCNL 'Retrieve information about your network acls. You can filter results DCNL to return information only about those network acls that match your DCNL search parameters. Otherwise, all network acls associated with your DCNL account are returned. DCNL :type network_acl_ids: list DCNL :param network_acl_ids: A list of strings with the desired network ACL DCNL IDs. DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters. Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.networkacl.NetworkAcl`'
def associate_network_acl(self, network_acl_id, subnet_id): DCNL 'Associates a network acl with a specific subnet. DCNL :type network_acl_id: str DCNL :param network_acl_id: The ID of the network ACL to associate. DCNL :type subnet_id: str DCNL :param subnet_id: The ID of the subnet to associate with. DCNL :rtype: str DCNL :return: The ID of the association created'
def disassociate_network_acl(self, subnet_id, vpc_id=None): DCNL 'Figures out what the default ACL is for the VPC, and associates DCNL current network ACL with the default. DCNL :type subnet_id: str DCNL :param subnet_id: The ID of the subnet to which the ACL belongs. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC to which the ACL/subnet belongs. Queries EC2 if omitted. DCNL :rtype: str DCNL :return: The ID of the association created'
def create_network_acl(self, vpc_id): DCNL 'Creates a new network ACL. DCNL :type vpc_id: str DCNL :param vpc_id: The VPC ID to associate this network ACL with. DCNL :rtype: The newly created network ACL DCNL :return: A :class:`boto.vpc.networkacl.NetworkAcl` object'
def delete_network_acl(self, network_acl_id): DCNL 'Delete a network ACL DCNL :type network_acl_id: str DCNL :param network_acl_id: The ID of the network_acl to delete. DCNL :rtype: bool DCNL :return: True if successful'
def create_network_acl_entry(self, network_acl_id, rule_number, protocol, rule_action, cidr_block, egress=None, icmp_code=None, icmp_type=None, port_range_from=None, port_range_to=None): DCNL 'Creates a new network ACL entry in a network ACL within a VPC. DCNL :type network_acl_id: str DCNL :param network_acl_id: The ID of the network ACL for this network ACL entry. DCNL :type rule_number: int DCNL :param rule_number: The rule number to assign to the entry (for example, 100). DCNL :type protocol: int DCNL :param protocol: Valid values: -1 or a protocol number DCNL (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) DCNL :type rule_action: str DCNL :param rule_action: Indicates whether to allow or deny traffic that matches the rule. DCNL :type cidr_block: str DCNL :param cidr_block: The CIDR range to allow or deny, in CIDR notation (for example, DCNL 172.16.0.0/24). DCNL :type egress: bool DCNL :param egress: Indicates whether this rule applies to egress traffic from the subnet (true) DCNL or ingress traffic to the subnet (false). DCNL :type icmp_type: int DCNL :param icmp_type: For the ICMP protocol, the ICMP type. You can use -1 to specify DCNL all ICMP types. DCNL :type icmp_code: int DCNL :param icmp_code: For the ICMP protocol, the ICMP code. You can use -1 to specify DCNL all ICMP codes for the given ICMP type. DCNL :type port_range_from: int DCNL :param port_range_from: The first port in the range. DCNL :type port_range_to: int DCNL :param port_range_to: The last port in the range. DCNL :rtype: bool DCNL :return: True if successful'
def replace_network_acl_entry(self, network_acl_id, rule_number, protocol, rule_action, cidr_block, egress=None, icmp_code=None, icmp_type=None, port_range_from=None, port_range_to=None): DCNL 'Creates a new network ACL entry in a network ACL within a VPC. DCNL :type network_acl_id: str DCNL :param network_acl_id: The ID of the network ACL for the id you want to replace DCNL :type rule_number: int DCNL :param rule_number: The rule number that you want to replace(for example, 100). DCNL :type protocol: int DCNL :param protocol: Valid values: -1 or a protocol number DCNL (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) DCNL :type rule_action: str DCNL :param rule_action: Indicates whether to allow or deny traffic that matches the rule. DCNL :type cidr_block: str DCNL :param cidr_block: The CIDR range to allow or deny, in CIDR notation (for example, DCNL 172.16.0.0/24). DCNL :type egress: bool DCNL :param egress: Indicates whether this rule applies to egress traffic from the subnet (true) DCNL or ingress traffic to the subnet (false). DCNL :type icmp_type: int DCNL :param icmp_type: For the ICMP protocol, the ICMP type. You can use -1 to specify DCNL all ICMP types. DCNL :type icmp_code: int DCNL :param icmp_code: For the ICMP protocol, the ICMP code. You can use -1 to specify DCNL all ICMP codes for the given ICMP type. DCNL :type port_range_from: int DCNL :param port_range_from: The first port in the range. DCNL :type port_range_to: int DCNL :param port_range_to: The last port in the range. DCNL :rtype: bool DCNL :return: True if successful'
def delete_network_acl_entry(self, network_acl_id, rule_number, egress=None): DCNL 'Deletes a network ACL entry from a network ACL within a VPC. DCNL :type network_acl_id: str DCNL :param network_acl_id: The ID of the network ACL with the network ACL entry. DCNL :type rule_number: int DCNL :param rule_number: The rule number for the entry to delete. DCNL :type egress: bool DCNL :param egress: Specifies whether the rule to delete is an egress rule (true) DCNL or ingress rule (false). DCNL :rtype: bool DCNL :return: True if successful'
def get_all_internet_gateways(self, internet_gateway_ids=None, filters=None, dry_run=False): DCNL 'Get a list of internet gateways. You can filter results to return information DCNL about only those gateways that you\'re interested in. DCNL :type internet_gateway_ids: list DCNL :param internet_gateway_ids: A list of strings with the desired gateway IDs. DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run.'
def create_internet_gateway(self, dry_run=False): DCNL 'Creates an internet gateway for VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Newly created internet gateway. DCNL :return: `boto.vpc.internetgateway.InternetGateway`'
def delete_internet_gateway(self, internet_gateway_id, dry_run=False): DCNL 'Deletes an internet gateway from the VPC. DCNL :type internet_gateway_id: str DCNL :param internet_gateway_id: The ID of the internet gateway to delete. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Bool DCNL :return: True if successful'
def attach_internet_gateway(self, internet_gateway_id, vpc_id, dry_run=False): DCNL 'Attach an internet gateway to a specific VPC. DCNL :type internet_gateway_id: str DCNL :param internet_gateway_id: The ID of the internet gateway to attach. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC to attach to. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Bool DCNL :return: True if successful'
def detach_internet_gateway(self, internet_gateway_id, vpc_id, dry_run=False): DCNL 'Detach an internet gateway from a specific VPC. DCNL :type internet_gateway_id: str DCNL :param internet_gateway_id: The ID of the internet gateway to detach. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC to attach to. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: Bool DCNL :return: True if successful'
def get_all_customer_gateways(self, customer_gateway_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your CustomerGateways.  You can filter DCNL results to return information only about those CustomerGateways that DCNL match your search parameters.  Otherwise, all CustomerGateways DCNL associated with your account are returned. DCNL :type customer_gateway_ids: list DCNL :param customer_gateway_ids: A list of strings with the desired DCNL CustomerGateway ID\'s. DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL - *state*, the state of the CustomerGateway DCNL (pending,available,deleting,deleted) DCNL - *type*, the type of customer gateway (ipsec.1) DCNL - *ipAddress* the IP address of customer gateway\'s DCNL internet-routable external inteface DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.customergateway.CustomerGateway`'
def create_customer_gateway(self, type, ip_address, bgp_asn, dry_run=False): DCNL 'Create a new Customer Gateway DCNL :type type: str DCNL :param type: Type of VPN Connection.  Only valid value currently is \'ipsec.1\' DCNL :type ip_address: str DCNL :param ip_address: Internet-routable IP address for customer\'s gateway. DCNL Must be a static address. DCNL :type bgp_asn: int DCNL :param bgp_asn: Customer gateway\'s Border Gateway Protocol (BGP) DCNL Autonomous System Number (ASN) DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created CustomerGateway DCNL :return: A :class:`boto.vpc.customergateway.CustomerGateway` object'
def delete_customer_gateway(self, customer_gateway_id, dry_run=False): DCNL 'Delete a Customer Gateway. DCNL :type customer_gateway_id: str DCNL :param customer_gateway_id: The ID of the customer_gateway to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_vpn_gateways(self, vpn_gateway_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your VpnGateways.  You can filter results to DCNL return information only about those VpnGateways that match your search DCNL parameters.  Otherwise, all VpnGateways associated with your account DCNL are returned. DCNL :type vpn_gateway_ids: list DCNL :param vpn_gateway_ids: A list of strings with the desired VpnGateway ID\'s DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL - *state*, a list of states of the VpnGateway DCNL (pending,available,deleting,deleted) DCNL - *type*, a list types of customer gateway (ipsec.1) DCNL - *availabilityZone*, a list of  Availability zones the DCNL VPN gateway is in. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.customergateway.VpnGateway`'
def create_vpn_gateway(self, type, availability_zone=None, dry_run=False): DCNL 'Create a new Vpn Gateway DCNL :type type: str DCNL :param type: Type of VPN Connection.  Only valid value currently is \'ipsec.1\' DCNL :type availability_zone: str DCNL :param availability_zone: The Availability Zone where you want the VPN gateway. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created VpnGateway DCNL :return: A :class:`boto.vpc.vpngateway.VpnGateway` object'
def delete_vpn_gateway(self, vpn_gateway_id, dry_run=False): DCNL 'Delete a Vpn Gateway. DCNL :type vpn_gateway_id: str DCNL :param vpn_gateway_id: The ID of the vpn_gateway to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def attach_vpn_gateway(self, vpn_gateway_id, vpc_id, dry_run=False): DCNL 'Attaches a VPN gateway to a VPC. DCNL :type vpn_gateway_id: str DCNL :param vpn_gateway_id: The ID of the vpn_gateway to attach DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC you want to attach the gateway to. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: An attachment DCNL :return: a :class:`boto.vpc.vpngateway.Attachment`'
def detach_vpn_gateway(self, vpn_gateway_id, vpc_id, dry_run=False): DCNL 'Detaches a VPN gateway from a VPC. DCNL :type vpn_gateway_id: str DCNL :param vpn_gateway_id: The ID of the vpn_gateway to detach DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC you want to detach the gateway from. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_subnets(self, subnet_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your Subnets.  You can filter results to DCNL return information only about those Subnets that match your search DCNL parameters.  Otherwise, all Subnets associated with your account DCNL are returned. DCNL :type subnet_ids: list DCNL :param subnet_ids: A list of strings with the desired Subnet ID\'s DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL - *state*, a list of states of the Subnet DCNL (pending,available) DCNL - *vpcId*, a list of IDs of the VPC that the subnet is in. DCNL - *cidrBlock*, a list of CIDR blocks of the subnet DCNL - *availabilityZone*, list of the Availability Zones DCNL the subnet is in. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.subnet.Subnet`'
def create_subnet(self, vpc_id, cidr_block, availability_zone=None, dry_run=False): DCNL 'Create a new Subnet DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC where you want to create the subnet. DCNL :type cidr_block: str DCNL :param cidr_block: The CIDR block you want the subnet to cover. DCNL :type availability_zone: str DCNL :param availability_zone: The AZ you want the subnet in DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created Subnet DCNL :return: A :class:`boto.vpc.customergateway.Subnet` object'
def delete_subnet(self, subnet_id, dry_run=False): DCNL 'Delete a subnet. DCNL :type subnet_id: str DCNL :param subnet_id: The ID of the subnet to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_dhcp_options(self, dhcp_options_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your DhcpOptions. DCNL :type dhcp_options_ids: list DCNL :param dhcp_options_ids: A list of strings with the desired DhcpOption ID\'s DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.dhcpoptions.DhcpOptions`'
def create_dhcp_options(self, domain_name=None, domain_name_servers=None, ntp_servers=None, netbios_name_servers=None, netbios_node_type=None, dry_run=False): DCNL 'Create a new DhcpOption DCNL This corresponds to DCNL http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-query-CreateDhcpOptions.html DCNL :type domain_name: str DCNL :param domain_name: A domain name of your choice (for example, DCNL example.com) DCNL :type domain_name_servers: list of strings DCNL :param domain_name_servers: The IP address of a domain name server. You DCNL can specify up to four addresses. DCNL :type ntp_servers: list of strings DCNL :param ntp_servers: The IP address of a Network Time Protocol (NTP) DCNL server. You can specify up to four addresses. DCNL :type netbios_name_servers: list of strings DCNL :param netbios_name_servers: The IP address of a NetBIOS name server. DCNL You can specify up to four addresses. DCNL :type netbios_node_type: str DCNL :param netbios_node_type: The NetBIOS node type (1, 2, 4, or 8). For DCNL more information about the values, see RFC 2132. We recommend you DCNL only use 2 at this time (broadcast and multicast are currently not DCNL supported). DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created DhcpOption DCNL :return: A :class:`boto.vpc.customergateway.DhcpOption` object'
def delete_dhcp_options(self, dhcp_options_id, dry_run=False): DCNL 'Delete a DHCP Options DCNL :type dhcp_options_id: str DCNL :param dhcp_options_id: The ID of the DHCP Options to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def associate_dhcp_options(self, dhcp_options_id, vpc_id, dry_run=False): DCNL 'Associate a set of Dhcp Options with a VPC. DCNL :type dhcp_options_id: str DCNL :param dhcp_options_id: The ID of the Dhcp Options DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_vpn_connections(self, vpn_connection_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your VPN_CONNECTIONs.  You can filter results to DCNL return information only about those VPN_CONNECTIONs that match your search DCNL parameters.  Otherwise, all VPN_CONNECTIONs associated with your account DCNL are returned. DCNL :type vpn_connection_ids: list DCNL :param vpn_connection_ids: A list of strings with the desired VPN_CONNECTION ID\'s DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters.  Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL - *state*, a list of states of the VPN_CONNECTION DCNL pending,available,deleting,deleted DCNL - *type*, a list of types of connection, currently \'ipsec.1\' DCNL - *customerGatewayId*, a list of IDs of the customer gateway DCNL associated with the VPN DCNL - *vpnGatewayId*, a list of IDs of the VPN gateway associated DCNL with the VPN connection DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpn_connection.vpnconnection.VpnConnection`'
def create_vpn_connection(self, type, customer_gateway_id, vpn_gateway_id, static_routes_only=None, dry_run=False): DCNL 'Create a new VPN Connection. DCNL :type type: str DCNL :param type: The type of VPN Connection.  Currently only \'ipsec.1\' DCNL is supported DCNL :type customer_gateway_id: str DCNL :param customer_gateway_id: The ID of the customer gateway. DCNL :type vpn_gateway_id: str DCNL :param vpn_gateway_id: The ID of the VPN gateway. DCNL :type static_routes_only: bool DCNL :param static_routes_only: Indicates whether the VPN connection DCNL requires static routes. If you are creating a VPN connection DCNL for a device that does not support BGP, you must specify true. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: The newly created VpnConnection DCNL :return: A :class:`boto.vpc.vpnconnection.VpnConnection` object'
def delete_vpn_connection(self, vpn_connection_id, dry_run=False): DCNL 'Delete a VPN Connection. DCNL :type vpn_connection_id: str DCNL :param vpn_connection_id: The ID of the vpn_connection to be deleted. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def disable_vgw_route_propagation(self, route_table_id, gateway_id, dry_run=False): DCNL 'Disables a virtual private gateway (VGW) from propagating routes to the DCNL routing tables of an Amazon VPC. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the routing table. DCNL :type gateway_id: str DCNL :param gateway_id: The ID of the virtual private gateway. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def enable_vgw_route_propagation(self, route_table_id, gateway_id, dry_run=False): DCNL 'Enables a virtual private gateway (VGW) to propagate routes to the DCNL routing tables of an Amazon VPC. DCNL :type route_table_id: str DCNL :param route_table_id: The ID of the routing table. DCNL :type gateway_id: str DCNL :param gateway_id: The ID of the virtual private gateway. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def create_vpn_connection_route(self, destination_cidr_block, vpn_connection_id, dry_run=False): DCNL 'Creates a new static route associated with a VPN connection between an DCNL existing virtual private gateway and a VPN customer gateway. The static DCNL route allows traffic to be routed from the virtual private gateway to DCNL the VPN customer gateway. DCNL :type destination_cidr_block: str DCNL :param destination_cidr_block: The CIDR block associated with the local DCNL subnet of the customer data center. DCNL :type vpn_connection_id: str DCNL :param vpn_connection_id: The ID of the VPN connection. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def delete_vpn_connection_route(self, destination_cidr_block, vpn_connection_id, dry_run=False): DCNL 'Deletes a static route associated with a VPN connection between an DCNL existing virtual private gateway and a VPN customer gateway. The static DCNL route allows traffic to be routed from the virtual private gateway to DCNL the VPN customer gateway. DCNL :type destination_cidr_block: str DCNL :param destination_cidr_block: The CIDR block associated with the local DCNL subnet of the customer data center. DCNL :type vpn_connection_id: str DCNL :param vpn_connection_id: The ID of the VPN connection. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def get_all_vpc_peering_connections(self, vpc_peering_connection_ids=None, filters=None, dry_run=False): DCNL 'Retrieve information about your VPC peering connections. You DCNL can filter results to return information only about those VPC DCNL peering connections that match your search parameters. DCNL Otherwise, all VPC peering connections associated with your DCNL account are returned. DCNL :type vpc_peering_connection_ids: list DCNL :param vpc_peering_connection_ids: A list of strings with the desired VPC DCNL peering connection ID\'s DCNL :type filters: list of tuples DCNL :param filters: A list of tuples containing filters. Each tuple DCNL consists of a filter key and a filter value. DCNL Possible filter keys are: DCNL * *accepter-vpc-info.cidr-block* - The CIDR block of the peer VPC. DCNL * *accepter-vpc-info.owner-id* - The AWS account ID of the owner DCNL of the peer VPC. DCNL * *accepter-vpc-info.vpc-id* - The ID of the peer VPC. DCNL * *expiration-time* - The expiration date and time for the VPC DCNL peering connection. DCNL * *requester-vpc-info.cidr-block* - The CIDR block of the DCNL requester\'s VPC. DCNL * *requester-vpc-info.owner-id* - The AWS account ID of the DCNL owner of the requester VPC. DCNL * *requester-vpc-info.vpc-id* - The ID of the requester VPC. DCNL * *status-code* - The status of the VPC peering connection. DCNL * *status-message* - A message that provides more information DCNL about the status of the VPC peering connection, if applicable. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.vpc.VPC`'
def create_vpc_peering_connection(self, vpc_id, peer_vpc_id, peer_owner_id=None, dry_run=False): DCNL 'Create a new VPN Peering connection. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the requester VPC. DCNL :type peer_vpc_id: str DCNL :param vpc_peer_id: The ID of the VPC with which you are creating the peering connection. DCNL :type peer_owner_id: str DCNL :param peer_owner_id: The AWS account ID of the owner of the peer VPC. DCNL :rtype: The newly created VpcPeeringConnection DCNL :return: A :class:`boto.vpc.vpc_peering_connection.VpcPeeringConnection` object'
def delete_vpc_peering_connection(self, vpc_peering_connection_id, dry_run=False): DCNL 'Deletes a VPC peering connection. Either the owner of the requester DCNL VPC or the owner of the peer VPC can delete the VPC peering connection DCNL if it\'s in the active state. The owner of the requester VPC can delete DCNL a VPC peering connection in the pending-acceptance state. DCNL :type vpc_peering_connection_id: str DCNL :param vpc_peering_connection_id: The ID of the VPC peering connection. DCNL :rtype: bool DCNL :return: True if successful'
def reject_vpc_peering_connection(self, vpc_peering_connection_id, dry_run=False): DCNL 'Rejects a VPC peering connection request. The VPC peering connection DCNL must be in the pending-acceptance state. DCNL :type vpc_peering_connection_id: str DCNL :param vpc_peering_connection_id: The ID of the VPC peering connection. DCNL :rtype: bool DCNL :return: True if successful'
def accept_vpc_peering_connection(self, vpc_peering_connection_id, dry_run=False): DCNL 'Acceptss a VPC peering connection request. The VPC peering connection DCNL must be in the pending-acceptance state. DCNL :type vpc_peering_connection_id: str DCNL :param vpc_peering_connection_id: The ID of the VPC peering connection. DCNL :rtype: Accepted VpcPeeringConnection DCNL :return: A :class:`boto.vpc.vpc_peering_connection.VpcPeeringConnection` object'
def get_all_classic_link_vpcs(self, vpc_ids=None, filters=None, dry_run=False): DCNL 'Describes the ClassicLink status of one or more VPCs. DCNL :type vpc_ids: list DCNL :param vpc_ids: A list of strings with the desired VPC ID\'s DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :type filters: list of tuples or dict DCNL :param filters: A list of tuples or dict containing filters. Each tuple DCNL or dict item consists of a filter key and a filter value. DCNL :rtype: list DCNL :return: A list of :class:`boto.vpc.vpc.VPC`'
def attach_classic_link_vpc(self, vpc_id, instance_id, groups, dry_run=False): DCNL 'Links  an EC2-Classic instance to a ClassicLink-enabled VPC through one DCNL or more of the VPC\'s security groups. You cannot link an EC2-Classic DCNL instance to more than one VPC at a time. You can only link an instance DCNL that\'s in the running state. An instance is automatically unlinked from DCNL a VPC when it\'s stopped. You can link it to the VPC again when you DCNL restart it. DCNL After you\'ve linked an instance, you cannot  change  the VPC security DCNL groups  that are associated with it. To change the security groups, you DCNL must first unlink the instance, and then link it again. DCNL Linking your instance to a VPC is sometimes referred  to  as  attaching DCNL your instance. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of a ClassicLink-enabled VPC. DCNL :type intance_id: str DCNL :param instance_is: The ID of a ClassicLink-enabled VPC. DCNL :tye groups: list DCNL :param groups: The ID of one or more of the VPC\'s security groups. DCNL You cannot specify security groups from a different VPC. The DCNL members of the list can be DCNL :class:`boto.ec2.securitygroup.SecurityGroup` objects or DCNL strings of the id\'s of the security groups. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def detach_classic_link_vpc(self, vpc_id, instance_id, dry_run=False): DCNL 'Unlinks a linked EC2-Classic instance from a VPC. After the instance DCNL has been unlinked, the VPC security groups are no longer associated DCNL with it. An instance is automatically unlinked from a VPC when DCNL it\'s stopped. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the instance to unlink from the VPC. DCNL :type intance_id: str DCNL :param instance_is: The ID of the VPC to which the instance is linked. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def disable_vpc_classic_link(self, vpc_id, dry_run=False): DCNL 'Disables  ClassicLink  for  a VPC. You cannot disable ClassicLink for a DCNL VPC that has EC2-Classic instances linked to it. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def enable_vpc_classic_link(self, vpc_id, dry_run=False): DCNL 'Enables a VPC for ClassicLink. You can then link EC2-Classic instances DCNL to your ClassicLink-enabled VPC to allow communication over private IP DCNL addresses. You cannot enable your VPC for ClassicLink if any of your DCNL VPC\'s route tables have existing routes for address ranges within the DCNL 10.0.0.0/8 IP address range, excluding local routes for VPCs in the DCNL 10.0.0.0/16 and 10.1.0.0/16 IP address ranges. DCNL :type vpc_id: str DCNL :param vpc_id: The ID of the VPC. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def __init__(self, connection=None): DCNL 'Represents a VPC. DCNL :ivar id: The unique ID of the VPC. DCNL :ivar dhcp_options_id: The ID of the set of DHCP options you\'ve associated with the VPC DCNL (or default if the default options are associated with the VPC). DCNL :ivar state: The current state of the VPC. DCNL :ivar cidr_block: The CIDR block for the VPC. DCNL :ivar is_default: Indicates whether the VPC is the default VPC. DCNL :ivar instance_tenancy: The allowed tenancy of instances launched into the VPC. DCNL :ivar classic_link_enabled: Indicates whether ClassicLink is enabled.'
def update_classic_link_enabled(self, validate=False, dry_run=False): DCNL 'Updates instance\'s classic_link_enabled attribute DCNL :rtype: bool DCNL :return: self.classic_link_enabled after update has occurred.'
def disable_classic_link(self, dry_run=False): DCNL 'Disables  ClassicLink  for  a VPC. You cannot disable ClassicLink for a DCNL VPC that has EC2-Classic instances linked to it. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def enable_classic_link(self, dry_run=False): DCNL 'Enables a VPC for ClassicLink. You can then link EC2-Classic instances DCNL to your ClassicLink-enabled VPC to allow communication over private IP DCNL addresses. You cannot enable your VPC for ClassicLink if any of your DCNL VPC\'s route tables have existing routes for address ranges within the DCNL 10.0.0.0/8 IP address range, excluding local routes for VPCs in the DCNL 10.0.0.0/16 and 10.1.0.0/16 IP address ranges. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def attach_classic_instance(self, instance_id, groups, dry_run=False): DCNL 'Links  an EC2-Classic instance to a ClassicLink-enabled VPC through one DCNL or more of the VPC\'s security groups. You cannot link an EC2-Classic DCNL instance to more than one VPC at a time. You can only link an instance DCNL that\'s in the running state. An instance is automatically unlinked from DCNL a VPC when it\'s stopped. You can link it to the VPC again when you DCNL restart it. DCNL After you\'ve linked an instance, you cannot  change  the VPC security DCNL groups  that are associated with it. To change the security groups, you DCNL must first unlink the instance, and then link it again. DCNL Linking your instance to a VPC is sometimes referred  to  as  attaching DCNL your instance. DCNL :type intance_id: str DCNL :param instance_is: The ID of a ClassicLink-enabled VPC. DCNL :tye groups: list DCNL :param groups: The ID of one or more of the VPC\'s security groups. DCNL You cannot specify security groups from a different VPC. The DCNL members of the list can be DCNL :class:`boto.ec2.securitygroup.SecurityGroup` objects or DCNL strings of the id\'s of the security groups. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def detach_classic_instance(self, instance_id, dry_run=False): DCNL 'Unlinks a linked EC2-Classic instance from a VPC. After the instance DCNL has been unlinked, the VPC security groups are no longer associated DCNL with it. An instance is automatically unlinked from a VPC when DCNL it\'s stopped. DCNL :type intance_id: str DCNL :param instance_is: The ID of the VPC to which the instance is linked. DCNL :type dry_run: bool DCNL :param dry_run: Set to True if the operation should not actually run. DCNL :rtype: bool DCNL :return: True if successful'
def __init__(self): DCNL 'Information on peer Vpc. DCNL :ivar id: The unique ID of peer Vpc. DCNL :ivar owner_id: Owner of peer Vpc. DCNL :ivar cidr_block: CIDR Block of peer Vpc.'
def __init__(self, connection=None): DCNL 'Represents a VPC peering connection. DCNL :ivar id: The unique ID of the VPC peering connection. DCNL :ivar accepter_vpc_info: Information on peer Vpc. DCNL :ivar requester_vpc_info: Information on requester Vpc. DCNL :ivar expiration_time: The expiration date and time for the VPC peering connection. DCNL :ivar status_code: The status of the VPC peering connection. DCNL :ivar status_message: A message that provides more information about the status of the VPC peering connection, if applicable.'
@classmethod DCNL def is_capable(cls, requested_capability): DCNL 'Returns true if the requested capability is supported by this plugin'
def get_obj(self, name): DCNL 'Returns the AWS object associated with a given option. DCNL The heuristics used are a bit lame.  If the option name contains DCNL the word \'bucket\' it is assumed to be an S3 bucket, if the name DCNL contains the word \'queue\' it is assumed to be an SQS queue and DCNL if it contains the word \'domain\' it is assumed to be a SimpleDB DCNL domain.  If the option name specified does not exist in the DCNL config file or if the AWS object cannot be retrieved this DCNL returns None.'
def check_dns_availability(self, cname_prefix): DCNL 'Checks if the specified CNAME is available. DCNL :type cname_prefix: string DCNL :param cname_prefix: The prefix used when this CNAME is DCNL reserved.'
def create_application(self, application_name, description=None): DCNL 'Creates an application that has one configuration template DCNL named default and no application versions. DCNL :type application_name: string DCNL :param application_name: The name of the application. DCNL Constraint: This name must be unique within your account. If the DCNL specified name already exists, the action returns an DCNL InvalidParameterValue error. DCNL :type description: string DCNL :param description: Describes the application. DCNL :raises: TooManyApplicationsException'
def create_application_version(self, application_name, version_label, description=None, s3_bucket=None, s3_key=None, auto_create_application=None): DCNL 'Creates an application version for the specified application. DCNL :type application_name: string DCNL :param application_name: The name of the application. If no DCNL application is found with this name, and AutoCreateApplication is DCNL false, returns an InvalidParameterValue error. DCNL :type version_label: string DCNL :param version_label: A label identifying this version. Constraint: DCNL Must be unique per application. If an application version already DCNL exists with this label for the specified application, AWS Elastic DCNL Beanstalk returns an InvalidParameterValue error. DCNL :type description: string DCNL :param description: Describes this version. DCNL :type s3_bucket: string DCNL :param s3_bucket: The Amazon S3 bucket where the data is located. DCNL :type s3_key: string DCNL :param s3_key: The Amazon S3 key where the data is located.  Both DCNL s3_bucket and s3_key must be specified in order to use a specific DCNL source bundle.  If both of these values are not specified the DCNL sample application will be used. DCNL :type auto_create_application: boolean DCNL :param auto_create_application: Determines how the system behaves if DCNL the specified application for this version does not already exist: DCNL true: Automatically creates the specified application for this DCNL version if it does not already exist.  false: Returns an DCNL InvalidParameterValue if the specified application for this version DCNL does not already exist.  Default: false  Valid Values: true | false DCNL :raises: TooManyApplicationsException, DCNL TooManyApplicationVersionsException, DCNL InsufficientPrivilegesException, DCNL S3LocationNotInServiceRegionException'
def create_configuration_template(self, application_name, template_name, solution_stack_name=None, source_configuration_application_name=None, source_configuration_template_name=None, environment_id=None, description=None, option_settings=None): DCNL 'Creates a configuration template. DCNL Templates are associated with a specific application and are used to DCNL deploy different versions of the application with the same DCNL configuration settings. DCNL :type application_name: string DCNL :param application_name: The name of the application to associate with DCNL this configuration template. If no application is found with this DCNL name, AWS Elastic Beanstalk returns an InvalidParameterValue error. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template. DCNL Constraint: This name must be unique per application.  Default: If DCNL a configuration template already exists with this name, AWS Elastic DCNL Beanstalk returns an InvalidParameterValue error. DCNL :type solution_stack_name: string DCNL :param solution_stack_name: The name of the solution stack used by this DCNL configuration. The solution stack specifies the operating system, DCNL architecture, and application server for a configuration template. DCNL It determines the set of configuration options as well as the DCNL possible and default values.  Use ListAvailableSolutionStacks to DCNL obtain a list of available solution stacks.  Default: If the DCNL SolutionStackName is not specified and the source configuration DCNL parameter is blank, AWS Elastic Beanstalk uses the default solution DCNL stack. If not specified and the source configuration parameter is DCNL specified, AWS Elastic Beanstalk uses the same solution stack as DCNL the source configuration template. DCNL :type source_configuration_application_name: string DCNL :param source_configuration_application_name: The name of the DCNL application associated with the configuration. DCNL :type source_configuration_template_name: string DCNL :param source_configuration_template_name: The name of the DCNL configuration template. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment used with this DCNL configuration template. DCNL :type description: string DCNL :param description: Describes this configuration. DCNL :type option_settings: list DCNL :param option_settings: If specified, AWS Elastic Beanstalk sets the DCNL specified configuration option to the requested value. The new DCNL value overrides the value obtained from the solution stack or the DCNL source configuration template. DCNL :raises: InsufficientPrivilegesException, DCNL TooManyConfigurationTemplatesException'
def create_environment(self, application_name, environment_name, version_label=None, template_name=None, solution_stack_name=None, cname_prefix=None, description=None, option_settings=None, options_to_remove=None, tier_name=None, tier_type=None, tier_version='1.0'): DCNL 'Launches an environment for the application using a configuration. DCNL :type application_name: string DCNL :param application_name: The name of the application that contains the DCNL version to be deployed.  If no application is found with this name, DCNL CreateEnvironment returns an InvalidParameterValue error. DCNL :type environment_name: string DCNL :param environment_name: A unique name for the deployment environment. DCNL Used in the application URL. Constraint: Must be from 4 to 23 DCNL characters in length. The name can contain only letters, numbers, DCNL and hyphens. It cannot start or end with a hyphen. This name must DCNL be unique in your account. If the specified name already exists, DCNL AWS Elastic Beanstalk returns an InvalidParameterValue error. DCNL Default: If the CNAME parameter is not specified, the environment DCNL name becomes part of the CNAME, and therefore part of the visible DCNL URL for your application. DCNL :type version_label: string DCNL :param version_label: The name of the application version to deploy. If DCNL the specified application has no associated application versions, DCNL AWS Elastic Beanstalk UpdateEnvironment returns an DCNL InvalidParameterValue error.  Default: If not specified, AWS DCNL Elastic Beanstalk attempts to launch the most recently created DCNL application version. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template to DCNL use in deployment. If no configuration template is found with this DCNL name, AWS Elastic Beanstalk returns an InvalidParameterValue error. DCNL Condition: You must specify either this parameter or a DCNL SolutionStackName, but not both. If you specify both, AWS Elastic DCNL Beanstalk returns an InvalidParameterCombination error. If you do DCNL not specify either, AWS Elastic Beanstalk returns a DCNL MissingRequiredParameter error. DCNL :type solution_stack_name: string DCNL :param solution_stack_name: This is an alternative to specifying a DCNL configuration name. If specified, AWS Elastic Beanstalk sets the DCNL configuration values to the default values associated with the DCNL specified solution stack.  Condition: You must specify either this DCNL or a TemplateName, but not both. If you specify both, AWS Elastic DCNL Beanstalk returns an InvalidParameterCombination error. If you do DCNL not specify either, AWS Elastic Beanstalk returns a DCNL MissingRequiredParameter error. DCNL :type cname_prefix: string DCNL :param cname_prefix: If specified, the environment attempts to use this DCNL value as the prefix for the CNAME. If not specified, the DCNL environment uses the environment name. DCNL :type description: string DCNL :param description: Describes this environment. DCNL :type option_settings: list DCNL :param option_settings: If specified, AWS Elastic Beanstalk sets the DCNL specified configuration options to the requested value in the DCNL configuration set for the new environment. These override the DCNL values obtained from the solution stack or the configuration DCNL template.  Each element in the list is a tuple of (Namespace, DCNL OptionName, Value), for example:: DCNL [(\'aws:autoscaling:launchconfiguration\', DCNL \'Ec2KeyName\', \'mykeypair\')] DCNL :type options_to_remove: list DCNL :param options_to_remove: A list of custom user-defined configuration DCNL options to remove from the configuration set for this new DCNL environment. DCNL :type tier_name: string DCNL :param tier_name: The name of the tier.  Valid values are DCNL "WebServer" and "Worker". Defaults to "WebServer". DCNL The ``tier_name`` and a ``tier_type`` parameters are DCNL related and the values provided must be valid. DCNL The possible combinations are: DCNL * "WebServer" and "Standard" (the default) DCNL * "Worker" and "SQS/HTTP" DCNL :type tier_type: string DCNL :param tier_type: The type of the tier.  Valid values are DCNL "Standard" if ``tier_name`` is "WebServer" and "SQS/HTTP" DCNL if ``tier_name`` is "Worker". Defaults to "Standard". DCNL :type tier_version: string DCNL :type tier_version: The version of the tier.  Valid values DCNL currently are "1.0". Defaults to "1.0". DCNL :raises: TooManyEnvironmentsException, InsufficientPrivilegesException'
def create_storage_location(self): DCNL 'Creates the Amazon S3 storage location for the account.  This DCNL location is used to store user log files. DCNL :raises: TooManyBucketsException, DCNL S3SubscriptionRequiredException, DCNL InsufficientPrivilegesException'
def delete_application(self, application_name, terminate_env_by_force=None): DCNL 'Deletes the specified application along with all associated DCNL versions and configurations. The application versions will not DCNL be deleted from your Amazon S3 bucket. DCNL :type application_name: string DCNL :param application_name: The name of the application to delete. DCNL :type terminate_env_by_force: boolean DCNL :param terminate_env_by_force: When set to true, running DCNL environments will be terminated before deleting the application. DCNL :raises: OperationInProgressException'
def delete_application_version(self, application_name, version_label, delete_source_bundle=None): DCNL 'Deletes the specified version from the specified application. DCNL :type application_name: string DCNL :param application_name: The name of the application to delete DCNL releases from. DCNL :type version_label: string DCNL :param version_label: The label of the version to delete. DCNL :type delete_source_bundle: boolean DCNL :param delete_source_bundle: Indicates whether to delete the DCNL associated source bundle from Amazon S3.  Valid Values: true | DCNL false DCNL :raises: SourceBundleDeletionException, DCNL InsufficientPrivilegesException, DCNL OperationInProgressException, DCNL S3LocationNotInServiceRegionException'
def delete_configuration_template(self, application_name, template_name): DCNL 'Deletes the specified configuration template. DCNL :type application_name: string DCNL :param application_name: The name of the application to delete DCNL the configuration template from. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template to DCNL delete. DCNL :raises: OperationInProgressException'
def delete_environment_configuration(self, application_name, environment_name): DCNL 'Deletes the draft configuration associated with the running DCNL environment.  Updating a running environment with any DCNL configuration changes creates a draft configuration set. You can DCNL get the draft configuration using DescribeConfigurationSettings DCNL while the update is in progress or if the update fails. The DCNL DeploymentStatus for the draft configuration indicates whether DCNL the deployment is in process or has failed. The draft DCNL configuration remains in existence until it is deleted with this DCNL action. DCNL :type application_name: string DCNL :param application_name: The name of the application the DCNL environment is associated with. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to delete DCNL the draft configuration from.'
def describe_application_versions(self, application_name=None, version_labels=None): DCNL 'Returns descriptions for existing application versions. DCNL :type application_name: string DCNL :param application_name: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to only include ones that are associated DCNL with the specified application. DCNL :type version_labels: list DCNL :param version_labels: If specified, restricts the returned DCNL descriptions to only include ones that have the specified version DCNL labels.'
def describe_applications(self, application_names=None): DCNL 'Returns the descriptions of existing applications. DCNL :type application_names: list DCNL :param application_names: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to only include those with the specified DCNL names.'
def describe_configuration_options(self, application_name=None, template_name=None, environment_name=None, solution_stack_name=None, options=None): DCNL 'Describes configuration options used in a template or environment. DCNL Describes the configuration options that are used in a DCNL particular configuration template or environment, or that a DCNL specified solution stack defines. The description includes the DCNL values the options, their default values, and an indication of DCNL the required action on a running environment if an option value DCNL is changed. DCNL :type application_name: string DCNL :param application_name: The name of the application associated with DCNL the configuration template or environment. Only needed if you want DCNL to describe the configuration options associated with either the DCNL configuration template or environment. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template whose DCNL configuration options you want to describe. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment whose DCNL configuration options you want to describe. DCNL :type solution_stack_name: string DCNL :param solution_stack_name: The name of the solution stack whose DCNL configuration options you want to describe. DCNL :type options: list DCNL :param options: If specified, restricts the descriptions to only DCNL the specified options.'
def describe_configuration_settings(self, application_name, template_name=None, environment_name=None): DCNL 'Returns a description of the settings for the specified DCNL configuration set, that is, either a configuration template or DCNL the configuration set associated with a running environment. DCNL When describing the settings for the configuration set DCNL associated with a running environment, it is possible to receive DCNL two sets of setting descriptions. One is the deployed DCNL configuration set, and the other is a draft configuration of an DCNL environment that is either in the process of deployment or that DCNL failed to deploy. DCNL :type application_name: string DCNL :param application_name: The application for the environment or DCNL configuration template. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template to DCNL describe.  Conditional: You must specify either this parameter or DCNL an EnvironmentName, but not both. If you specify both, AWS Elastic DCNL Beanstalk returns an InvalidParameterCombination error.  If you do DCNL not specify either, AWS Elastic Beanstalk returns a DCNL MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to describe. DCNL Condition: You must specify either this or a TemplateName, but not DCNL both. If you specify both, AWS Elastic Beanstalk returns an DCNL InvalidParameterCombination error. If you do not specify either, DCNL AWS Elastic Beanstalk returns MissingRequiredParameter error.'
def describe_environment_resources(self, environment_id=None, environment_name=None): DCNL 'Returns AWS resources for this environment. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment to retrieve AWS DCNL resource usage data.  Condition: You must specify either this or an DCNL EnvironmentName, or both. If you do not specify either, AWS Elastic DCNL Beanstalk returns MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to retrieve DCNL AWS resource usage data.  Condition: You must specify either this DCNL or an EnvironmentId, or both. If you do not specify either, AWS DCNL Elastic Beanstalk returns MissingRequiredParameter error. DCNL :raises: InsufficientPrivilegesException'
def describe_environments(self, application_name=None, version_label=None, environment_ids=None, environment_names=None, include_deleted=None, included_deleted_back_to=None): DCNL 'Returns descriptions for existing environments. DCNL :type application_name: string DCNL :param application_name: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to include only those that are associated DCNL with this application. DCNL :type version_label: string DCNL :param version_label: If specified, AWS Elastic Beanstalk restricts the DCNL returned descriptions to include only those that are associated DCNL with this application version. DCNL :type environment_ids: list DCNL :param environment_ids: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to include only those that have the DCNL specified IDs. DCNL :type environment_names: list DCNL :param environment_names: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to include only those that have the DCNL specified names. DCNL :type include_deleted: boolean DCNL :param include_deleted: Indicates whether to include deleted DCNL environments:  true: Environments that have been deleted after DCNL IncludedDeletedBackTo are displayed.  false: Do not include deleted DCNL environments. DCNL :type included_deleted_back_to: timestamp DCNL :param included_deleted_back_to: If specified when IncludeDeleted is DCNL set to true, then environments deleted after this date are DCNL displayed.'
def describe_events(self, application_name=None, version_label=None, template_name=None, environment_id=None, environment_name=None, request_id=None, severity=None, start_time=None, end_time=None, max_records=None, next_token=None): DCNL 'Returns event descriptions matching criteria up to the last 6 weeks. DCNL :type application_name: string DCNL :param application_name: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to include only those associated with DCNL this application. DCNL :type version_label: string DCNL :param version_label: If specified, AWS Elastic Beanstalk restricts the DCNL returned descriptions to those associated with this application DCNL version. DCNL :type template_name: string DCNL :param template_name: If specified, AWS Elastic Beanstalk restricts the DCNL returned descriptions to those that are associated with this DCNL environment configuration. DCNL :type environment_id: string DCNL :param environment_id: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to those associated with this DCNL environment. DCNL :type environment_name: string DCNL :param environment_name: If specified, AWS Elastic Beanstalk restricts DCNL the returned descriptions to those associated with this DCNL environment. DCNL :type request_id: string DCNL :param request_id: If specified, AWS Elastic Beanstalk restricts the DCNL described events to include only those associated with this request DCNL ID. DCNL :type severity: string DCNL :param severity: If specified, limits the events returned from this DCNL call to include only those with the specified severity or higher. DCNL :type start_time: timestamp DCNL :param start_time: If specified, AWS Elastic Beanstalk restricts the DCNL returned descriptions to those that occur on or after this time. DCNL :type end_time: timestamp DCNL :param end_time: If specified, AWS Elastic Beanstalk restricts the DCNL returned descriptions to those that occur up to, but not including, DCNL the EndTime. DCNL :type max_records: integer DCNL :param max_records: Specifies the maximum number of events that can be DCNL returned, beginning with the most recent event. DCNL :type next_token: string DCNL :param next_token: Pagination token. If specified, the events return DCNL the next batch of results.'
def list_available_solution_stacks(self): DCNL 'Returns a list of the available solution stack names.'
def rebuild_environment(self, environment_id=None, environment_name=None): DCNL 'Deletes and recreates all of the AWS resources (for example: DCNL the Auto Scaling group, load balancer, etc.) for a specified DCNL environment and forces a restart. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment to rebuild. DCNL Condition: You must specify either this or an EnvironmentName, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to rebuild. DCNL Condition: You must specify either this or an EnvironmentId, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :raises: InsufficientPrivilegesException'
def request_environment_info(self, info_type='tail', environment_id=None, environment_name=None): DCNL 'Initiates a request to compile the specified type of DCNL information of the deployed environment.  Setting the InfoType DCNL to tail compiles the last lines from the application server log DCNL files of every Amazon EC2 instance in your environment. Use DCNL RetrieveEnvironmentInfo to access the compiled information. DCNL :type info_type: string DCNL :param info_type: The type of information to request. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment of the DCNL requested data. If no such environment is found, DCNL RequestEnvironmentInfo returns an InvalidParameterValue error. DCNL Condition: You must specify either this or an EnvironmentName, or DCNL both. If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment of the DCNL requested data. If no such environment is found, DCNL RequestEnvironmentInfo returns an InvalidParameterValue error. DCNL Condition: You must specify either this or an EnvironmentId, or DCNL both. If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error.'
def restart_app_server(self, environment_id=None, environment_name=None): DCNL 'Causes the environment to restart the application container DCNL server running on each Amazon EC2 instance. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment to restart the server DCNL for.  Condition: You must specify either this or an DCNL EnvironmentName, or both. If you do not specify either, AWS Elastic DCNL Beanstalk returns MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to restart the DCNL server for.  Condition: You must specify either this or an DCNL EnvironmentId, or both. If you do not specify either, AWS Elastic DCNL Beanstalk returns MissingRequiredParameter error.'
def retrieve_environment_info(self, info_type='tail', environment_id=None, environment_name=None): DCNL 'Retrieves the compiled information from a RequestEnvironmentInfo DCNL request. DCNL :type info_type: string DCNL :param info_type: The type of information to retrieve. DCNL :type environment_id: string DCNL :param environment_id: The ID of the data\'s environment. If no such DCNL environment is found, returns an InvalidParameterValue error. DCNL Condition: You must specify either this or an EnvironmentName, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the data\'s environment. If no such DCNL environment is found, returns an InvalidParameterValue error. DCNL Condition: You must specify either this or an EnvironmentId, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error.'
def swap_environment_cnames(self, source_environment_id=None, source_environment_name=None, destination_environment_id=None, destination_environment_name=None): DCNL 'Swaps the CNAMEs of two environments. DCNL :type source_environment_id: string DCNL :param source_environment_id: The ID of the source environment. DCNL Condition: You must specify at least the SourceEnvironmentID or the DCNL SourceEnvironmentName. You may also specify both. If you specify DCNL the SourceEnvironmentId, you must specify the DCNL DestinationEnvironmentId. DCNL :type source_environment_name: string DCNL :param source_environment_name: The name of the source environment. DCNL Condition: You must specify at least the SourceEnvironmentID or the DCNL SourceEnvironmentName. You may also specify both. If you specify DCNL the SourceEnvironmentName, you must specify the DCNL DestinationEnvironmentName. DCNL :type destination_environment_id: string DCNL :param destination_environment_id: The ID of the destination DCNL environment.  Condition: You must specify at least the DCNL DestinationEnvironmentID or the DestinationEnvironmentName. You may DCNL also specify both. You must specify the SourceEnvironmentId with DCNL the DestinationEnvironmentId. DCNL :type destination_environment_name: string DCNL :param destination_environment_name: The name of the destination DCNL environment.  Condition: You must specify at least the DCNL DestinationEnvironmentID or the DestinationEnvironmentName. You may DCNL also specify both. You must specify the SourceEnvironmentName with DCNL the DestinationEnvironmentName.'
def terminate_environment(self, environment_id=None, environment_name=None, terminate_resources=None): DCNL 'Terminates the specified environment. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment to terminate. DCNL Condition: You must specify either this or an EnvironmentName, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to terminate. DCNL Condition: You must specify either this or an EnvironmentId, or DCNL both.  If you do not specify either, AWS Elastic Beanstalk returns DCNL MissingRequiredParameter error. DCNL :type terminate_resources: boolean DCNL :param terminate_resources: Indicates whether the associated AWS DCNL resources should shut down when the environment is terminated: DCNL true: (default) The user AWS resources (for example, the Auto DCNL Scaling group, LoadBalancer, etc.) are terminated along with the DCNL environment.  false: The environment is removed from the AWS DCNL Elastic Beanstalk but the AWS resources continue to operate.  For DCNL more information, see the  AWS Elastic Beanstalk User Guide. DCNL Default: true  Valid Values: true | false DCNL :raises: InsufficientPrivilegesException'
def update_application(self, application_name, description=None): DCNL 'Updates the specified application to have the specified DCNL properties. DCNL :type application_name: string DCNL :param application_name: The name of the application to update. DCNL If no such application is found, UpdateApplication returns an DCNL InvalidParameterValue error. DCNL :type description: string DCNL :param description: A new description for the application.  Default: If DCNL not specified, AWS Elastic Beanstalk does not update the DCNL description.'
def update_application_version(self, application_name, version_label, description=None): DCNL 'Updates the application version to have the properties. DCNL :type application_name: string DCNL :param application_name: The name of the application associated with DCNL this version.  If no application is found with this name, DCNL UpdateApplication returns an InvalidParameterValue error. DCNL :type version_label: string DCNL :param version_label: The name of the version to update. If no DCNL application version is found with this label, UpdateApplication DCNL returns an InvalidParameterValue error. DCNL :type description: string DCNL :param description: A new description for this release.'
def update_configuration_template(self, application_name, template_name, description=None, option_settings=None, options_to_remove=None): DCNL 'Updates the specified configuration template to have the DCNL specified properties or configuration option values. DCNL :type application_name: string DCNL :param application_name: The name of the application associated with DCNL the configuration template to update. If no application is found DCNL with this name, UpdateConfigurationTemplate returns an DCNL InvalidParameterValue error. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template to update. DCNL If no configuration template is found with this name, DCNL UpdateConfigurationTemplate returns an InvalidParameterValue error. DCNL :type description: string DCNL :param description: A new description for the configuration. DCNL :type option_settings: list DCNL :param option_settings: A list of configuration option settings to DCNL update with the new specified option value. DCNL :type options_to_remove: list DCNL :param options_to_remove: A list of configuration options to remove DCNL from the configuration set.  Constraint: You can remove only DCNL UserDefined configuration options. DCNL :raises: InsufficientPrivilegesException'
def update_environment(self, environment_id=None, environment_name=None, version_label=None, template_name=None, description=None, option_settings=None, options_to_remove=None, tier_name=None, tier_type=None, tier_version='1.0'): DCNL 'Updates the environment description, deploys a new application DCNL version, updates the configuration settings to an entirely new DCNL configuration template, or updates select configuration option DCNL values in the running environment.  Attempting to update both DCNL the release and configuration is not allowed and AWS Elastic DCNL Beanstalk returns an InvalidParameterCombination error.  When DCNL updating the configuration settings to a new template or DCNL individual settings, a draft configuration is created and DCNL DescribeConfigurationSettings for this environment returns two DCNL setting descriptions with different DeploymentStatus values. DCNL :type environment_id: string DCNL :param environment_id: The ID of the environment to update. If no DCNL environment with this ID exists, AWS Elastic Beanstalk returns an DCNL InvalidParameterValue error.  Condition: You must specify either DCNL this or an EnvironmentName, or both. If you do not specify either, DCNL AWS Elastic Beanstalk returns MissingRequiredParameter error. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to update.  If no DCNL environment with this name exists, AWS Elastic Beanstalk returns an DCNL InvalidParameterValue error.  Condition: You must specify either DCNL this or an EnvironmentId, or both. If you do not specify either, DCNL AWS Elastic Beanstalk returns MissingRequiredParameter error. DCNL :type version_label: string DCNL :param version_label: If this parameter is specified, AWS Elastic DCNL Beanstalk deploys the named application version to the environment. DCNL If no such application version is found, returns an DCNL InvalidParameterValue error. DCNL :type template_name: string DCNL :param template_name: If this parameter is specified, AWS Elastic DCNL Beanstalk deploys this configuration template to the environment. DCNL If no such configuration template is found, AWS Elastic Beanstalk DCNL returns an InvalidParameterValue error. DCNL :type description: string DCNL :param description: If this parameter is specified, AWS Elastic DCNL Beanstalk updates the description of this environment. DCNL :type option_settings: list DCNL :param option_settings: If specified, AWS Elastic Beanstalk updates the DCNL configuration set associated with the running environment and sets DCNL the specified configuration options to the requested value. DCNL :type options_to_remove: list DCNL :param options_to_remove: A list of custom user-defined configuration DCNL options to remove from the configuration set for this environment. DCNL :type tier_name: string DCNL :param tier_name: The name of the tier.  Valid values are DCNL "WebServer" and "Worker". Defaults to "WebServer". DCNL The ``tier_name`` and a ``tier_type`` parameters are DCNL related and the values provided must be valid. DCNL The possible combinations are: DCNL * "WebServer" and "Standard" (the default) DCNL * "Worker" and "SQS/HTTP" DCNL :type tier_type: string DCNL :param tier_type: The type of the tier.  Valid values are DCNL "Standard" if ``tier_name`` is "WebServer" and "SQS/HTTP" DCNL if ``tier_name`` is "Worker". Defaults to "Standard". DCNL :type tier_version: string DCNL :type tier_version: The version of the tier.  Valid values DCNL currently are "1.0". Defaults to "1.0". DCNL :raises: InsufficientPrivilegesException'
def validate_configuration_settings(self, application_name, option_settings, template_name=None, environment_name=None): DCNL 'Takes a set of configuration settings and either a DCNL configuration template or environment, and determines whether DCNL those values are valid.  This action returns a list of messages DCNL indicating any errors or warnings associated with the selection DCNL of option values. DCNL :type application_name: string DCNL :param application_name: The name of the application that the DCNL configuration template or environment belongs to. DCNL :type template_name: string DCNL :param template_name: The name of the configuration template to DCNL validate the settings against.  Condition: You cannot specify both DCNL this and an environment name. DCNL :type environment_name: string DCNL :param environment_name: The name of the environment to validate the DCNL settings against.  Condition: You cannot specify both this and a DCNL configuration template name. DCNL :type option_settings: list DCNL :param option_settings: A list of the options and desired values to DCNL evaluate. DCNL :raises: InsufficientPrivilegesException'
def create_hapg(self, label): DCNL 'Creates a high-availability partition group. A high- DCNL availability partition group is a group of partitions that DCNL spans multiple physical HSMs. DCNL :type label: string DCNL :param label: The label of the new high-availability partition group.'
def create_hsm(self, subnet_id, ssh_key, iam_role_arn, subscription_type, eni_ip=None, external_id=None, client_token=None, syslog_ip=None): DCNL 'Creates an uninitialized HSM instance. Running this command DCNL provisions an HSM appliance and will result in charges to your DCNL AWS account for the HSM. DCNL :type subnet_id: string DCNL :param subnet_id: The identifier of the subnet in your VPC in which to DCNL place the HSM. DCNL :type ssh_key: string DCNL :param ssh_key: The SSH public key to install on the HSM. DCNL :type eni_ip: string DCNL :param eni_ip: The IP address to assign to the HSM\'s ENI. DCNL :type iam_role_arn: string DCNL :param iam_role_arn: The ARN of an IAM role to enable the AWS CloudHSM DCNL service to allocate an ENI on your behalf. DCNL :type external_id: string DCNL :param external_id: The external ID from **IamRoleArn**, if present. DCNL :type subscription_type: string DCNL :param subscription_type: The subscription type. DCNL :type client_token: string DCNL :param client_token: A user-defined token to ensure idempotence. DCNL Subsequent calls to this action with the same token will be DCNL ignored. DCNL :type syslog_ip: string DCNL :param syslog_ip: The IP address for the syslog monitoring server.'
def create_luna_client(self, certificate, label=None): DCNL 'Creates an HSM client. DCNL :type label: string DCNL :param label: The label for the client. DCNL :type certificate: string DCNL :param certificate: The contents of a Base64-Encoded X.509 v3 DCNL certificate to be installed on the HSMs used by this client.'
def delete_hapg(self, hapg_arn): DCNL 'Deletes a high-availability partition group. DCNL :type hapg_arn: string DCNL :param hapg_arn: The ARN of the high-availability partition group to DCNL delete.'
def delete_hsm(self, hsm_arn): DCNL 'Deletes an HSM. Once complete, this operation cannot be undone DCNL and your key material cannot be recovered. DCNL :type hsm_arn: string DCNL :param hsm_arn: The ARN of the HSM to delete.'
def delete_luna_client(self, client_arn): DCNL 'Deletes a client. DCNL :type client_arn: string DCNL :param client_arn: The ARN of the client to delete.'
def describe_hapg(self, hapg_arn): DCNL 'Retrieves information about a high-availability partition DCNL group. DCNL :type hapg_arn: string DCNL :param hapg_arn: The ARN of the high-availability partition group to DCNL describe.'
def describe_hsm(self, hsm_arn=None, hsm_serial_number=None): DCNL 'Retrieves information about an HSM. You can identify the HSM DCNL by its ARN or its serial number. DCNL :type hsm_arn: string DCNL :param hsm_arn: The ARN of the HSM. Either the HsmArn or the DCNL SerialNumber parameter must be specified. DCNL :type hsm_serial_number: string DCNL :param hsm_serial_number: The serial number of the HSM. Either the DCNL HsmArn or the HsmSerialNumber parameter must be specified.'
def describe_luna_client(self, client_arn=None, certificate_fingerprint=None): DCNL 'Retrieves information about an HSM client. DCNL :type client_arn: string DCNL :param client_arn: The ARN of the client. DCNL :type certificate_fingerprint: string DCNL :param certificate_fingerprint: The certificate fingerprint.'
def get_config(self, client_arn, client_version, hapg_list): DCNL 'Gets the configuration files necessary to connect to all high DCNL availability partition groups the client is associated with. DCNL :type client_arn: string DCNL :param client_arn: The ARN of the client. DCNL :type client_version: string DCNL :param client_version: The client version. DCNL :type hapg_list: list DCNL :param hapg_list: A list of ARNs that identify the high-availability DCNL partition groups that are associated with the client.'
def list_available_zones(self): DCNL 'Lists the Availability Zones that have available AWS CloudHSM DCNL capacity.'
def list_hapgs(self, next_token=None): DCNL 'Lists the high-availability partition groups for the account. DCNL This operation supports pagination with the use of the DCNL NextToken member. If more results are available, the NextToken DCNL member of the response contains a token that you pass in the DCNL next call to ListHapgs to retrieve the next set of items. DCNL :type next_token: string DCNL :param next_token: The NextToken value from a previous call to DCNL ListHapgs. Pass null if this is the first call.'
def list_hsms(self, next_token=None): DCNL 'Retrieves the identifiers of all of the HSMs provisioned for DCNL the current customer. DCNL This operation supports pagination with the use of the DCNL NextToken member. If more results are available, the NextToken DCNL member of the response contains a token that you pass in the DCNL next call to ListHsms to retrieve the next set of items. DCNL :type next_token: string DCNL :param next_token: The NextToken value from a previous call to DCNL ListHsms. Pass null if this is the first call.'
def list_luna_clients(self, next_token=None): DCNL 'Lists all of the clients. DCNL This operation supports pagination with the use of the DCNL NextToken member. If more results are available, the NextToken DCNL member of the response contains a token that you pass in the DCNL next call to ListLunaClients to retrieve the next set of DCNL items. DCNL :type next_token: string DCNL :param next_token: The NextToken value from a previous call to DCNL ListLunaClients. Pass null if this is the first call.'
def modify_hapg(self, hapg_arn, label=None, partition_serial_list=None): DCNL 'Modifies an existing high-availability partition group. DCNL :type hapg_arn: string DCNL :param hapg_arn: The ARN of the high-availability partition group to DCNL modify. DCNL :type label: string DCNL :param label: The new label for the high-availability partition group. DCNL :type partition_serial_list: list DCNL :param partition_serial_list: The list of partition serial numbers to DCNL make members of the high-availability partition group.'
def modify_hsm(self, hsm_arn, subnet_id=None, eni_ip=None, iam_role_arn=None, external_id=None, syslog_ip=None): DCNL 'Modifies an HSM. DCNL :type hsm_arn: string DCNL :param hsm_arn: The ARN of the HSM to modify. DCNL :type subnet_id: string DCNL :param subnet_id: The new identifier of the subnet that the HSM is in. DCNL :type eni_ip: string DCNL :param eni_ip: The new IP address for the elastic network interface DCNL attached to the HSM. DCNL :type iam_role_arn: string DCNL :param iam_role_arn: The new IAM role ARN. DCNL :type external_id: string DCNL :param external_id: The new external ID. DCNL :type syslog_ip: string DCNL :param syslog_ip: The new IP address for the syslog monitoring server.'
def modify_luna_client(self, client_arn, certificate): DCNL 'Modifies the certificate used by the client. DCNL This action can potentially start a workflow to install the DCNL new certificate on the client\'s HSMs. DCNL :type client_arn: string DCNL :param client_arn: The ARN of the client. DCNL :type certificate: string DCNL :param certificate: The new certificate for the client.'
def authorize_cache_security_group_ingress(self, cache_security_group_name, ec2_security_group_name, ec2_security_group_owner_id): DCNL 'The AuthorizeCacheSecurityGroupIngress operation allows DCNL network ingress to a cache security group. Applications using DCNL ElastiCache must be running on Amazon EC2, and Amazon EC2 DCNL security groups are used as the authorization mechanism. DCNL You cannot authorize ingress from an Amazon EC2 security group DCNL in one Region to an ElastiCache cluster in another Region. DCNL :type cache_security_group_name: string DCNL :param cache_security_group_name: The cache security group which will DCNL allow network ingress. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The Amazon EC2 security group to be DCNL authorized for ingress to the cache security group. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The AWS account number of the DCNL Amazon EC2 security group owner. Note that this is not the same DCNL thing as an AWS access key ID - you must provide a valid AWS DCNL account number for this parameter.'
def create_cache_cluster(self, cache_cluster_id, num_cache_nodes=None, cache_node_type=None, engine=None, replication_group_id=None, engine_version=None, cache_parameter_group_name=None, cache_subnet_group_name=None, cache_security_group_names=None, security_group_ids=None, snapshot_arns=None, preferred_availability_zone=None, preferred_maintenance_window=None, port=None, notification_topic_arn=None, auto_minor_version_upgrade=None): DCNL 'The CreateCacheCluster operation creates a new cache cluster. DCNL All nodes in the cache cluster run the same protocol-compliant DCNL cache engine software - either Memcached or Redis. DCNL :type cache_cluster_id: string DCNL :param cache_cluster_id: DCNL The cache cluster identifier. This parameter is stored as a lowercase DCNL string. DCNL Constraints: DCNL + Must contain from 1 to 20 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type replication_group_id: string DCNL :param replication_group_id: The replication group to which this cache DCNL cluster should belong. If this parameter is specified, the cache DCNL cluster will be added to the specified replication group as a read DCNL replica; otherwise, the cache cluster will be a standalone primary DCNL that is not part of any replication group. DCNL :type num_cache_nodes: integer DCNL :param num_cache_nodes: The initial number of cache nodes that the DCNL cache cluster will have. DCNL For a Memcached cluster, valid values are between 1 and 20. If you need DCNL to exceed this limit, please fill out the ElastiCache Limit DCNL Increase Request form at ``_ . DCNL For Redis, only single-node cache clusters are supported at this time, DCNL so the value for this parameter must be 1. DCNL :type cache_node_type: string DCNL :param cache_node_type: The compute and memory capacity of the nodes in DCNL the cache cluster. DCNL Valid values for Memcached: DCNL `cache.t1.micro` | `cache.m1.small` | `cache.m1.medium` | DCNL `cache.m1.large` | `cache.m1.xlarge` | `cache.m3.xlarge` | DCNL `cache.m3.2xlarge` | `cache.m2.xlarge` | `cache.m2.2xlarge` | DCNL `cache.m2.4xlarge` | `cache.c1.xlarge` DCNL Valid values for Redis: DCNL `cache.t1.micro` | `cache.m1.small` | `cache.m1.medium` | DCNL `cache.m1.large` | `cache.m1.xlarge` | `cache.m2.xlarge` | DCNL `cache.m2.2xlarge` | `cache.m2.4xlarge` | `cache.c1.xlarge` DCNL For a complete listing of cache node types and specifications, see `. DCNL :type engine: string DCNL :param engine: The name of the cache engine to be used for this cache DCNL cluster. DCNL Valid values for this parameter are: DCNL `memcached` | `redis` DCNL :type engine_version: string DCNL :param engine_version: The version number of the cache engine to be DCNL used for this cluster. To view the supported cache engine versions, DCNL use the DescribeCacheEngineVersions operation. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of the cache parameter DCNL group to associate with this cache cluster. If this argument is DCNL omitted, the default cache parameter group for the specified engine DCNL will be used. DCNL :type cache_subnet_group_name: string DCNL :param cache_subnet_group_name: The name of the cache subnet group to DCNL be used for the cache cluster. DCNL Use this parameter only when you are creating a cluster in an Amazon DCNL Virtual Private Cloud (VPC). DCNL :type cache_security_group_names: list DCNL :param cache_security_group_names: A list of cache security group names DCNL to associate with this cache cluster. DCNL Use this parameter only when you are creating a cluster outside of an DCNL Amazon Virtual Private Cloud (VPC). DCNL :type security_group_ids: list DCNL :param security_group_ids: One or more VPC security groups associated DCNL with the cache cluster. DCNL Use this parameter only when you are creating a cluster in an Amazon DCNL Virtual Private Cloud (VPC). DCNL :type snapshot_arns: list DCNL :param snapshot_arns: A single-element string list containing an Amazon DCNL Resource Name (ARN) that uniquely identifies a Redis RDB snapshot DCNL file stored in Amazon S3. The snapshot file will be used to DCNL populate the Redis cache in the new cache cluster. The Amazon S3 DCNL object name in the ARN cannot contain any commas. DCNL Here is an example of an Amazon S3 ARN: DCNL `arn:aws:s3:::my_bucket/snapshot1.rdb` DCNL **Note:** This parameter is only valid if the `Engine` parameter is DCNL `redis`. DCNL :type preferred_availability_zone: string DCNL :param preferred_availability_zone: The EC2 Availability Zone in which DCNL the cache cluster will be created. DCNL All cache nodes belonging to a cache cluster are placed in the DCNL preferred availability zone. DCNL Default: System chosen availability zone. DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which system maintenance can occur. DCNL Example: `sun:05:00-sun:09:00` DCNL :type port: integer DCNL :param port: The port number on which each of the cache nodes will DCNL accept connections. DCNL :type notification_topic_arn: string DCNL :param notification_topic_arn: DCNL The Amazon Resource Name (ARN) of the Amazon Simple Notification DCNL Service (SNS) topic to which notifications will be sent. DCNL The Amazon SNS topic owner must be the same as the cache cluster owner. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Determines whether minor engine DCNL upgrades will be applied automatically to the cache cluster during DCNL the maintenance window. A value of `True` allows these upgrades to DCNL occur; `False` disables automatic upgrades. DCNL Default: `True`'
def create_cache_parameter_group(self, cache_parameter_group_name, cache_parameter_group_family, description): DCNL 'The CreateCacheParameterGroup operation creates a new cache DCNL parameter group. A cache parameter group is a collection of DCNL parameters that you apply to all of the nodes in a cache DCNL cluster. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: A user-specified name for the cache DCNL parameter group. DCNL :type cache_parameter_group_family: string DCNL :param cache_parameter_group_family: The name of the cache parameter DCNL group family the cache parameter group can be used with. DCNL Valid values are: `memcached1.4` | `redis2.6` DCNL :type description: string DCNL :param description: A user-specified description for the cache DCNL parameter group.'
def create_cache_security_group(self, cache_security_group_name, description): DCNL 'The CreateCacheSecurityGroup operation creates a new cache DCNL security group. Use a cache security group to control access DCNL to one or more cache clusters. DCNL Cache security groups are only used when you are creating a DCNL cluster outside of an Amazon Virtual Private Cloud (VPC). If DCNL you are creating a cluster inside of a VPC, use a cache subnet DCNL group instead. For more information, see DCNL CreateCacheSubnetGroup . DCNL :type cache_security_group_name: string DCNL :param cache_security_group_name: A name for the cache security group. DCNL This value is stored as a lowercase string. DCNL Constraints: Must contain no more than 255 alphanumeric characters. DCNL Must not be the word "Default". DCNL Example: `mysecuritygroup` DCNL :type description: string DCNL :param description: A description for the cache security group.'
def create_cache_subnet_group(self, cache_subnet_group_name, cache_subnet_group_description, subnet_ids): DCNL 'The CreateCacheSubnetGroup operation creates a new cache DCNL subnet group. DCNL Use this parameter only when you are creating a cluster in an DCNL Amazon Virtual Private Cloud (VPC). DCNL :type cache_subnet_group_name: string DCNL :param cache_subnet_group_name: A name for the cache subnet group. This DCNL value is stored as a lowercase string. DCNL Constraints: Must contain no more than 255 alphanumeric characters or DCNL hyphens. DCNL Example: `mysubnetgroup` DCNL :type cache_subnet_group_description: string DCNL :param cache_subnet_group_description: A description for the cache DCNL subnet group. DCNL :type subnet_ids: list DCNL :param subnet_ids: A list of VPC subnet IDs for the cache subnet group.'
def create_replication_group(self, replication_group_id, primary_cluster_id, replication_group_description): DCNL 'The CreateReplicationGroup operation creates a replication DCNL group. A replication group is a collection of cache clusters, DCNL where one of the clusters is a read/write primary and the DCNL other clusters are read-only replicas. Writes to the primary DCNL are automatically propagated to the replicas. DCNL When you create a replication group, you must specify an DCNL existing cache cluster that is in the primary role. When the DCNL replication group has been successfully created, you can add DCNL one or more read replica replicas to it, up to a total of five DCNL read replicas. DCNL :type replication_group_id: string DCNL :param replication_group_id: DCNL The replication group identifier. This parameter is stored as a DCNL lowercase string. DCNL Constraints: DCNL + Must contain from 1 to 20 alphanumeric characters or hyphens. DCNL + First character must be a letter. DCNL + Cannot end with a hyphen or contain two consecutive hyphens. DCNL :type primary_cluster_id: string DCNL :param primary_cluster_id: The identifier of the cache cluster that DCNL will serve as the primary for this replication group. This cache DCNL cluster must already exist and have a status of available . DCNL :type replication_group_description: string DCNL :param replication_group_description: A user-specified description for DCNL the replication group.'
def delete_cache_cluster(self, cache_cluster_id): DCNL 'The DeleteCacheCluster operation deletes a previously DCNL provisioned cache cluster. DeleteCacheCluster deletes all DCNL associated cache nodes, node endpoints and the cache cluster DCNL itself. When you receive a successful response from this DCNL operation, Amazon ElastiCache immediately begins deleting the DCNL cache cluster; you cannot cancel or revert this operation. DCNL :type cache_cluster_id: string DCNL :param cache_cluster_id: The cache cluster identifier for the cluster DCNL to be deleted. This parameter is not case sensitive.'
def delete_cache_parameter_group(self, cache_parameter_group_name): DCNL 'The DeleteCacheParameterGroup operation deletes the specified DCNL cache parameter group. You cannot delete a cache parameter DCNL group if it is associated with any cache clusters. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: DCNL The name of the cache parameter group to delete. DCNL The specified cache security group must not be associated with any DCNL cache clusters.'
def delete_cache_security_group(self, cache_security_group_name): DCNL 'The DeleteCacheSecurityGroup operation deletes a cache DCNL security group. DCNL You cannot delete a cache security group if it is associated DCNL with any cache clusters. DCNL :type cache_security_group_name: string DCNL :param cache_security_group_name: DCNL The name of the cache security group to delete. DCNL You cannot delete the default security group.'
def delete_cache_subnet_group(self, cache_subnet_group_name): DCNL 'The DeleteCacheSubnetGroup operation deletes a cache subnet DCNL group. DCNL You cannot delete a cache subnet group if it is associated DCNL with any cache clusters. DCNL :type cache_subnet_group_name: string DCNL :param cache_subnet_group_name: The name of the cache subnet group to DCNL delete. DCNL Constraints: Must contain no more than 255 alphanumeric characters or DCNL hyphens.'
def delete_replication_group(self, replication_group_id): DCNL 'The DeleteReplicationGroup operation deletes an existing DCNL replication group. DeleteReplicationGroup deletes the primary DCNL cache cluster and all of the read replicas in the replication DCNL group. When you receive a successful response from this DCNL operation, Amazon ElastiCache immediately begins deleting the DCNL entire replication group; you cannot cancel or revert this DCNL operation. DCNL :type replication_group_id: string DCNL :param replication_group_id: The identifier for the replication group DCNL to be deleted. This parameter is not case sensitive.'
def describe_cache_clusters(self, cache_cluster_id=None, max_records=None, marker=None, show_cache_node_info=None): DCNL 'The DescribeCacheClusters operation returns information about DCNL all provisioned cache clusters if no cache cluster identifier DCNL is specified, or about a specific cache cluster if a cache DCNL cluster identifier is supplied. DCNL By default, abbreviated information about the cache DCNL clusters(s) will be returned. You can use the optional DCNL ShowDetails flag to retrieve detailed information about the DCNL cache nodes associated with the cache clusters. These details DCNL include the DNS address and port for the cache node endpoint. DCNL If the cluster is in the CREATING state, only cluster level DCNL information will be displayed until all of the nodes are DCNL successfully provisioned. DCNL If the cluster is in the DELETING state, only cluster level DCNL information will be displayed. DCNL If cache nodes are currently being added to the cache cluster, DCNL node endpoint information and creation time for the additional DCNL nodes will not be displayed until they are completely DCNL provisioned. When the cache cluster state is available , the DCNL cluster is ready for use. DCNL If cache nodes are currently being removed from the cache DCNL cluster, no endpoint information for the removed nodes is DCNL displayed. DCNL :type cache_cluster_id: string DCNL :param cache_cluster_id: The user-supplied cluster identifier. If this DCNL parameter is specified, only information about that specific cache DCNL cluster is returned. This parameter isn\'t case sensitive. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords . DCNL :type show_cache_node_info: boolean DCNL :param show_cache_node_info: An optional flag that can be included in DCNL the DescribeCacheCluster request to retrieve information about the DCNL individual cache nodes.'
def describe_cache_engine_versions(self, engine=None, engine_version=None, cache_parameter_group_family=None, max_records=None, marker=None, default_only=None): DCNL 'The DescribeCacheEngineVersions operation returns a list of DCNL the available cache engines and their versions. DCNL :type engine: string DCNL :param engine: The cache engine to return. Valid values: `memcached` | DCNL `redis` DCNL :type engine_version: string DCNL :param engine_version: The cache engine version to return. DCNL Example: `1.4.14` DCNL :type cache_parameter_group_family: string DCNL :param cache_parameter_group_family: DCNL The name of a specific cache parameter group family to return details DCNL for. DCNL Constraints: DCNL + Must be 1 to 255 alphanumeric characters DCNL + First character must be a letter DCNL + Cannot end with a hyphen or contain two consecutive hyphens DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords . DCNL :type default_only: boolean DCNL :param default_only: If true , specifies that only the default version DCNL of the specified engine or engine and major version combination is DCNL to be returned.'
def describe_cache_parameter_groups(self, cache_parameter_group_name=None, max_records=None, marker=None): DCNL 'The DescribeCacheParameterGroups operation returns a list of DCNL cache parameter group descriptions. If a cache parameter group DCNL name is specified, the list will contain only the descriptions DCNL for that group. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of a specific cache DCNL parameter group to return details for. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_cache_parameters(self, cache_parameter_group_name, source=None, max_records=None, marker=None): DCNL 'The DescribeCacheParameters operation returns the detailed DCNL parameter list for a particular cache parameter group. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of a specific cache DCNL parameter group to return details for. DCNL :type source: string DCNL :param source: The parameter types to return. DCNL Valid values: `user` | `system` | `engine-default` DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_cache_security_groups(self, cache_security_group_name=None, max_records=None, marker=None): DCNL 'The DescribeCacheSecurityGroups operation returns a list of DCNL cache security group descriptions. If a cache security group DCNL name is specified, the list will contain only the description DCNL of that group. DCNL :type cache_security_group_name: string DCNL :param cache_security_group_name: The name of the cache security group DCNL to return details for. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_cache_subnet_groups(self, cache_subnet_group_name=None, max_records=None, marker=None): DCNL 'The DescribeCacheSubnetGroups operation returns a list of DCNL cache subnet group descriptions. If a subnet group name is DCNL specified, the list will contain only the description of that DCNL group. DCNL :type cache_subnet_group_name: string DCNL :param cache_subnet_group_name: The name of the cache subnet group to DCNL return details for. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_engine_default_parameters(self, cache_parameter_group_family, max_records=None, marker=None): DCNL 'The DescribeEngineDefaultParameters operation returns the DCNL default engine and system parameter information for the DCNL specified cache engine. DCNL :type cache_parameter_group_family: string DCNL :param cache_parameter_group_family: The name of the cache parameter DCNL group family. Valid values are: `memcached1.4` | `redis2.6` DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_events(self, source_identifier=None, source_type=None, start_time=None, end_time=None, duration=None, max_records=None, marker=None): DCNL 'The DescribeEvents operation returns events related to cache DCNL clusters, cache security groups, and cache parameter groups. DCNL You can obtain events specific to a particular cache cluster, DCNL cache security group, or cache parameter group by providing DCNL the name as a parameter. DCNL By default, only the events occurring within the last hour are DCNL returned; however, you can retrieve up to 14 days\' worth of DCNL events if necessary. DCNL :type source_identifier: string DCNL :param source_identifier: The identifier of the event source for which DCNL events will be returned. If not specified, then all sources are DCNL included in the response. DCNL :type source_type: string DCNL :param source_type: The event source to retrieve events for. If no DCNL value is specified, all events are returned. DCNL Valid values are: `cache-cluster` | `cache-parameter-group` | `cache- DCNL security-group` | `cache-subnet-group` DCNL :type start_time: timestamp DCNL :param start_time: The beginning of the time interval to retrieve DCNL events for, specified in ISO 8601 format. DCNL :type end_time: timestamp DCNL :param end_time: The end of the time interval for which to retrieve DCNL events, specified in ISO 8601 format. DCNL :type duration: integer DCNL :param duration: The number of minutes\' worth of events to retrieve. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_replication_groups(self, replication_group_id=None, max_records=None, marker=None): DCNL 'The DescribeReplicationGroups operation returns information DCNL about a particular replication group. If no identifier is DCNL specified, DescribeReplicationGroups returns information about DCNL all replication groups. DCNL :type replication_group_id: string DCNL :param replication_group_id: The identifier for the replication group DCNL to be described. This parameter is not case sensitive. DCNL If you do not specify this parameter, information about all replication DCNL groups is returned. DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_reserved_cache_nodes(self, reserved_cache_node_id=None, reserved_cache_nodes_offering_id=None, cache_node_type=None, duration=None, product_description=None, offering_type=None, max_records=None, marker=None): DCNL 'The DescribeReservedCacheNodes operation returns information DCNL about reserved cache nodes for this account, or about a DCNL specified reserved cache node. DCNL :type reserved_cache_node_id: string DCNL :param reserved_cache_node_id: The reserved cache node identifier DCNL filter value. Use this parameter to show only the reservation that DCNL matches the specified reservation ID. DCNL :type reserved_cache_nodes_offering_id: string DCNL :param reserved_cache_nodes_offering_id: The offering identifier filter DCNL value. Use this parameter to show only purchased reservations DCNL matching the specified offering identifier. DCNL :type cache_node_type: string DCNL :param cache_node_type: The cache node type filter value. Use this DCNL parameter to show only those reservations matching the specified DCNL cache node type. DCNL :type duration: string DCNL :param duration: The duration filter value, specified in years or DCNL seconds. Use this parameter to show only reservations for this DCNL duration. DCNL Valid Values: `1 | 3 | 31536000 | 94608000` DCNL :type product_description: string DCNL :param product_description: The product description filter value. Use DCNL this parameter to show only those reservations matching the DCNL specified product description. DCNL :type offering_type: string DCNL :param offering_type: The offering type filter value. Use this DCNL parameter to show only the available offerings matching the DCNL specified offering type. DCNL Valid values: `"Light Utilization" | "Medium Utilization" | "Heavy DCNL Utilization" ` DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def describe_reserved_cache_nodes_offerings(self, reserved_cache_nodes_offering_id=None, cache_node_type=None, duration=None, product_description=None, offering_type=None, max_records=None, marker=None): DCNL 'The DescribeReservedCacheNodesOfferings operation lists DCNL available reserved cache node offerings. DCNL :type reserved_cache_nodes_offering_id: string DCNL :param reserved_cache_nodes_offering_id: The offering identifier filter DCNL value. Use this parameter to show only the available offering that DCNL matches the specified reservation identifier. DCNL Example: `438012d3-4052-4cc7-b2e3-8d3372e0e706` DCNL :type cache_node_type: string DCNL :param cache_node_type: The cache node type filter value. Use this DCNL parameter to show only the available offerings matching the DCNL specified cache node type. DCNL :type duration: string DCNL :param duration: Duration filter value, specified in years or seconds. DCNL Use this parameter to show only reservations for a given duration. DCNL Valid Values: `1 | 3 | 31536000 | 94608000` DCNL :type product_description: string DCNL :param product_description: The product description filter value. Use DCNL this parameter to show only the available offerings matching the DCNL specified product description. DCNL :type offering_type: string DCNL :param offering_type: The offering type filter value. Use this DCNL parameter to show only the available offerings matching the DCNL specified offering type. DCNL Valid Values: `"Light Utilization" | "Medium Utilization" | "Heavy DCNL Utilization" ` DCNL :type max_records: integer DCNL :param max_records: The maximum number of records to include in the DCNL response. If more records exist than the specified `MaxRecords` DCNL value, a marker is included in the response so that the remaining DCNL results can be retrieved. DCNL Default: 100 DCNL Constraints: minimum 20; maximum 100. DCNL :type marker: string DCNL :param marker: An optional marker returned from a prior request. Use DCNL this marker for pagination of results from this operation. If this DCNL parameter is specified, the response includes only records beyond DCNL the marker, up to the value specified by MaxRecords .'
def modify_cache_cluster(self, cache_cluster_id, num_cache_nodes=None, cache_node_ids_to_remove=None, cache_security_group_names=None, security_group_ids=None, preferred_maintenance_window=None, notification_topic_arn=None, cache_parameter_group_name=None, notification_topic_status=None, apply_immediately=None, engine_version=None, auto_minor_version_upgrade=None): DCNL 'The ModifyCacheCluster operation modifies the settings for a DCNL cache cluster. You can use this operation to change one or DCNL more cluster configuration parameters by specifying the DCNL parameters and the new values. DCNL :type cache_cluster_id: string DCNL :param cache_cluster_id: The cache cluster identifier. This value is DCNL stored as a lowercase string. DCNL :type num_cache_nodes: integer DCNL :param num_cache_nodes: The number of cache nodes that the cache DCNL cluster should have. If the value for NumCacheNodes is greater than DCNL the existing number of cache nodes, then more nodes will be added. DCNL If the value is less than the existing number of cache nodes, then DCNL cache nodes will be removed. DCNL If you are removing cache nodes, you must use the CacheNodeIdsToRemove DCNL parameter to provide the IDs of the specific cache nodes to be DCNL removed. DCNL :type cache_node_ids_to_remove: list DCNL :param cache_node_ids_to_remove: A list of cache node IDs to be DCNL removed. A node ID is a numeric identifier (0001, 0002, etc.). This DCNL parameter is only valid when NumCacheNodes is less than the DCNL existing number of cache nodes. The number of cache node IDs DCNL supplied in this parameter must match the difference between the DCNL existing number of cache nodes in the cluster and the value of DCNL NumCacheNodes in the request. DCNL :type cache_security_group_names: list DCNL :param cache_security_group_names: A list of cache security group names DCNL to authorize on this cache cluster. This change is asynchronously DCNL applied as soon as possible. DCNL This parameter can be used only with clusters that are created outside DCNL of an Amazon Virtual Private Cloud (VPC). DCNL Constraints: Must contain no more than 255 alphanumeric characters. DCNL Must not be "Default". DCNL :type security_group_ids: list DCNL :param security_group_ids: Specifies the VPC Security Groups associated DCNL with the cache cluster. DCNL This parameter can be used only with clusters that are created in an DCNL Amazon Virtual Private Cloud (VPC). DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which system maintenance can occur. Note that system DCNL maintenance may result in an outage. This change is made DCNL immediately. If you are moving this window to the current time, DCNL there must be at least 120 minutes between the current time and end DCNL of the window to ensure that pending changes are applied. DCNL :type notification_topic_arn: string DCNL :param notification_topic_arn: DCNL The Amazon Resource Name (ARN) of the SNS topic to which notifications DCNL will be sent. DCNL The SNS topic owner must be same as the cache cluster owner. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of the cache parameter DCNL group to apply to this cache cluster. This change is asynchronously DCNL applied as soon as possible for parameters when the DCNL ApplyImmediately parameter is specified as true for this request. DCNL :type notification_topic_status: string DCNL :param notification_topic_status: The status of the Amazon SNS DCNL notification topic. Notifications are sent only if the status is DCNL active . DCNL Valid values: `active` | `inactive` DCNL :type apply_immediately: boolean DCNL :param apply_immediately: If `True`, this parameter causes the DCNL modifications in this request and any pending modifications to be DCNL applied, asynchronously and as soon as possible, regardless of the DCNL PreferredMaintenanceWindow setting for the cache cluster. DCNL If `False`, then changes to the cache cluster are applied on the next DCNL maintenance reboot, or the next failure reboot, whichever occurs DCNL first. DCNL Valid values: `True` | `False` DCNL Default: `False` DCNL :type engine_version: string DCNL :param engine_version: The upgraded version of the cache engine to be DCNL run on the cache cluster nodes. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: If `True`, then minor engine DCNL upgrades will be applied automatically to the cache cluster during DCNL the maintenance window. DCNL Valid values: `True` | `False` DCNL Default: `True`'
def modify_cache_parameter_group(self, cache_parameter_group_name, parameter_name_values): DCNL 'The ModifyCacheParameterGroup operation modifies the DCNL parameters of a cache parameter group. You can modify up to 20 DCNL parameters in a single request by submitting a list parameter DCNL name and value pairs. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of the cache parameter DCNL group to modify. DCNL :type parameter_name_values: list DCNL :param parameter_name_values: An array of parameter names and values DCNL for the parameter update. You must supply at least one parameter DCNL name and value; subsequent arguments are optional. A maximum of 20 DCNL parameters may be modified per request.'
def modify_cache_subnet_group(self, cache_subnet_group_name, cache_subnet_group_description=None, subnet_ids=None): DCNL 'The ModifyCacheSubnetGroup operation modifies an existing DCNL cache subnet group. DCNL :type cache_subnet_group_name: string DCNL :param cache_subnet_group_name: The name for the cache subnet group. DCNL This value is stored as a lowercase string. DCNL Constraints: Must contain no more than 255 alphanumeric characters or DCNL hyphens. DCNL Example: `mysubnetgroup` DCNL :type cache_subnet_group_description: string DCNL :param cache_subnet_group_description: A description for the cache DCNL subnet group. DCNL :type subnet_ids: list DCNL :param subnet_ids: The EC2 subnet IDs for the cache subnet group.'
def modify_replication_group(self, replication_group_id, replication_group_description=None, cache_security_group_names=None, security_group_ids=None, preferred_maintenance_window=None, notification_topic_arn=None, cache_parameter_group_name=None, notification_topic_status=None, apply_immediately=None, engine_version=None, auto_minor_version_upgrade=None, primary_cluster_id=None): DCNL 'The ModifyReplicationGroup operation modifies the settings for DCNL a replication group. DCNL :type replication_group_id: string DCNL :param replication_group_id: The identifier of the replication group to DCNL modify. DCNL :type replication_group_description: string DCNL :param replication_group_description: A description for the replication DCNL group. Maximum length is 255 characters. DCNL :type cache_security_group_names: list DCNL :param cache_security_group_names: A list of cache security group names DCNL to authorize for the clusters in this replication group. This DCNL change is asynchronously applied as soon as possible. DCNL This parameter can be used only with replication groups containing DCNL cache clusters running outside of an Amazon Virtual Private Cloud DCNL (VPC). DCNL Constraints: Must contain no more than 255 alphanumeric characters. DCNL Must not be "Default". DCNL :type security_group_ids: list DCNL :param security_group_ids: Specifies the VPC Security Groups associated DCNL with the cache clusters in the replication group. DCNL This parameter can be used only with replication groups containing DCNL cache clusters running in an Amazon Virtual Private Cloud (VPC). DCNL :type preferred_maintenance_window: string DCNL :param preferred_maintenance_window: The weekly time range (in UTC) DCNL during which replication group system maintenance can occur. Note DCNL that system maintenance may result in an outage. This change is DCNL made immediately. If you are moving this window to the current DCNL time, there must be at least 120 minutes between the current time DCNL and end of the window to ensure that pending changes are applied. DCNL :type notification_topic_arn: string DCNL :param notification_topic_arn: DCNL The Amazon Resource Name (ARN) of the SNS topic to which notifications DCNL will be sent. DCNL The SNS topic owner must be same as the replication group owner. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of the cache parameter DCNL group to apply to all of the cache nodes in this replication group. DCNL This change is asynchronously applied as soon as possible for DCNL parameters when the ApplyImmediately parameter is specified as true DCNL for this request. DCNL :type notification_topic_status: string DCNL :param notification_topic_status: The status of the Amazon SNS DCNL notification topic for the replication group. Notifications are DCNL sent only if the status is active . DCNL Valid values: `active` | `inactive` DCNL :type apply_immediately: boolean DCNL :param apply_immediately: If `True`, this parameter causes the DCNL modifications in this request and any pending modifications to be DCNL applied, asynchronously and as soon as possible, regardless of the DCNL PreferredMaintenanceWindow setting for the replication group. DCNL If `False`, then changes to the nodes in the replication group are DCNL applied on the next maintenance reboot, or the next failure reboot, DCNL whichever occurs first. DCNL Valid values: `True` | `False` DCNL Default: `False` DCNL :type engine_version: string DCNL :param engine_version: The upgraded version of the cache engine to be DCNL run on the nodes in the replication group.. DCNL :type auto_minor_version_upgrade: boolean DCNL :param auto_minor_version_upgrade: Determines whether minor engine DCNL upgrades will be applied automatically to all of the cache nodes in DCNL the replication group during the maintenance window. A value of DCNL `True` allows these upgrades to occur; `False` disables automatic DCNL upgrades. DCNL :type primary_cluster_id: string DCNL :param primary_cluster_id: If this parameter is specified, ElastiCache DCNL will promote each of the nodes in the specified cache cluster to DCNL the primary role. The nodes of all other clusters in the DCNL replication group will be read replicas.'
def purchase_reserved_cache_nodes_offering(self, reserved_cache_nodes_offering_id, reserved_cache_node_id=None, cache_node_count=None): DCNL 'The PurchaseReservedCacheNodesOffering operation allows you to DCNL purchase a reserved cache node offering. DCNL :type reserved_cache_nodes_offering_id: string DCNL :param reserved_cache_nodes_offering_id: The ID of the reserved cache DCNL node offering to purchase. DCNL Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 DCNL :type reserved_cache_node_id: string DCNL :param reserved_cache_node_id: A customer-specified identifier to track DCNL this reservation. DCNL Example: myreservationID DCNL :type cache_node_count: integer DCNL :param cache_node_count: The number of cache node instances to reserve. DCNL Default: `1`'
def reboot_cache_cluster(self, cache_cluster_id, cache_node_ids_to_reboot): DCNL 'The RebootCacheCluster operation reboots some, or all, of the DCNL cache cluster nodes within a provisioned cache cluster. This DCNL API will apply any modified cache parameter groups to the DCNL cache cluster. The reboot action takes place as soon as DCNL possible, and results in a momentary outage to the cache DCNL cluster. During the reboot, the cache cluster status is set to DCNL REBOOTING. DCNL The reboot causes the contents of the cache (for each cache DCNL cluster node being rebooted) to be lost. DCNL When the reboot is complete, a cache cluster event is created. DCNL :type cache_cluster_id: string DCNL :param cache_cluster_id: The cache cluster identifier. This parameter DCNL is stored as a lowercase string. DCNL :type cache_node_ids_to_reboot: list DCNL :param cache_node_ids_to_reboot: A list of cache cluster node IDs to DCNL reboot. A node ID is a numeric identifier (0001, 0002, etc.). To DCNL reboot an entire cache cluster, specify all of the cache cluster DCNL node IDs.'
def reset_cache_parameter_group(self, cache_parameter_group_name, parameter_name_values, reset_all_parameters=None): DCNL 'The ResetCacheParameterGroup operation modifies the parameters DCNL of a cache parameter group to the engine or system default DCNL value. You can reset specific parameters by submitting a list DCNL of parameter names. To reset the entire cache parameter group, DCNL specify the ResetAllParameters and CacheParameterGroupName DCNL parameters. DCNL :type cache_parameter_group_name: string DCNL :param cache_parameter_group_name: The name of the cache parameter DCNL group to reset. DCNL :type reset_all_parameters: boolean DCNL :param reset_all_parameters: If true , all parameters in the cache DCNL parameter group will be reset to default values. If false , no such DCNL action occurs. DCNL Valid values: `True` | `False` DCNL :type parameter_name_values: list DCNL :param parameter_name_values: An array of parameter names to be reset. DCNL If you are not resetting the entire cache parameter group, you must DCNL specify at least one parameter name.'
def revoke_cache_security_group_ingress(self, cache_security_group_name, ec2_security_group_name, ec2_security_group_owner_id): DCNL 'The RevokeCacheSecurityGroupIngress operation revokes ingress DCNL from a cache security group. Use this operation to disallow DCNL access from an Amazon EC2 security group that had been DCNL previously authorized. DCNL :type cache_security_group_name: string DCNL :param cache_security_group_name: The name of the cache security group DCNL to revoke ingress from. DCNL :type ec2_security_group_name: string DCNL :param ec2_security_group_name: The name of the Amazon EC2 security DCNL group to revoke access from. DCNL :type ec2_security_group_owner_id: string DCNL :param ec2_security_group_owner_id: The AWS account number of the DCNL Amazon EC2 security group owner. Note that this is not the same DCNL thing as an AWS access key ID - you must provide a valid AWS DCNL account number for this parameter.'
def __init__(self, connection=None, origin=None, enabled=False, caller_reference='', cnames=None, comment='', trusted_signers=None, default_root_object=None, logging=None): DCNL ':param origin: Origin information to associate with the DCNL distribution.  If your distribution will use DCNL an Amazon S3 origin, then this should be an DCNL S3Origin object. If your distribution will use DCNL a custom origin (non Amazon S3), then this DCNL should be a CustomOrigin object. DCNL :type origin: :class:`boto.cloudfront.origin.S3Origin` or DCNL :class:`boto.cloudfront.origin.CustomOrigin` DCNL :param enabled: Whether the distribution is enabled to accept DCNL end user requests for content. DCNL :type enabled: bool DCNL :param caller_reference: A unique number that ensures the DCNL request can\'t be replayed.  If no DCNL caller_reference is provided, boto DCNL will generate a type 4 UUID for use DCNL as the caller reference. DCNL :type enabled: str DCNL :param cnames: A CNAME alias you want to associate with this DCNL distribution. You can have up to 10 CNAME aliases DCNL per distribution. DCNL :type enabled: array of str DCNL :param comment: Any comments you want to include about the DCNL distribution. DCNL :type comment: str DCNL :param trusted_signers: Specifies any AWS accounts you want to DCNL permit to create signed URLs for private DCNL content. If you want the distribution to DCNL use signed URLs, this should contain a DCNL TrustedSigners object; if you want the DCNL distribution to use basic URLs, leave DCNL this None. DCNL :type trusted_signers: :class`boto.cloudfront.signers.TrustedSigners` DCNL :param default_root_object: Designates a default root object. DCNL Only include a DefaultRootObject value DCNL if you are going to assign a default DCNL root object for the distribution. DCNL :type comment: str DCNL :param logging: Controls whether access logs are written for the DCNL distribution. If you want to turn on access logs, DCNL this should contain a LoggingInfo object; otherwise DCNL it should contain None. DCNL :type logging: :class`boto.cloudfront.logging.LoggingInfo`'
def update(self, enabled=None, cnames=None, comment=None): DCNL 'Update the configuration of the Distribution.  The only values DCNL of the DistributionConfig that can be directly updated are: DCNL * CNAMES DCNL * Comment DCNL * Whether the Distribution is enabled or not DCNL Any changes to the ``trusted_signers`` or ``origin`` properties of DCNL this distribution\'s current config object will also be included in DCNL the update. Therefore, to set the origin access identity for this DCNL distribution, set ``Distribution.config.origin.origin_access_identity`` DCNL before calling this update method. DCNL :type enabled: bool DCNL :param enabled: Whether the Distribution is active or not. DCNL :type cnames: list of str DCNL :param cnames: The DNS CNAME\'s associated with this DCNL Distribution.  Maximum of 10 values. DCNL :type comment: str or unicode DCNL :param comment: The comment associated with the Distribution.'
def enable(self): DCNL 'Activate the Distribution.  A convenience wrapper around DCNL the update method.'
def disable(self): DCNL 'Deactivate the Distribution.  A convenience wrapper around DCNL the update method.'
def delete(self): DCNL 'Delete this CloudFront Distribution.  The content DCNL associated with the Distribution is not deleted from DCNL the underlying Origin bucket in S3.'
def get_objects(self): DCNL 'Return a list of all content objects in this distribution. DCNL :rtype: list of :class:`boto.cloudfront.object.Object` DCNL :return: The content objects'
def set_permissions(self, object, replace=False): DCNL 'Sets the S3 ACL grants for the given object to the appropriate DCNL value based on the type of Distribution.  If the Distribution DCNL is serving private content the ACL will be set to include the DCNL Origin Access Identity associated with the Distribution.  If DCNL the Distribution is serving public content the content will DCNL be set up with "public-read". DCNL :type object: :class:`boto.cloudfront.object.Object` DCNL :param enabled: The Object whose ACL is being set DCNL :type replace: bool DCNL :param replace: If False, the Origin Access Identity will be DCNL appended to the existing ACL for the object. DCNL If True, the ACL for the object will be DCNL completely replaced with one that grants DCNL READ permission to the Origin Access Identity.'
def set_permissions_all(self, replace=False): DCNL 'Sets the S3 ACL grants for all objects in the Distribution DCNL to the appropriate value based on the type of Distribution. DCNL :type replace: bool DCNL :param replace: If False, the Origin Access Identity will be DCNL appended to the existing ACL for the object. DCNL If True, the ACL for the object will be DCNL completely replaced with one that grants DCNL READ permission to the Origin Access Identity.'
def add_object(self, name, content, headers=None, replace=True): DCNL 'Adds a new content object to the Distribution.  The content DCNL for the object will be copied to a new Key in the S3 Bucket DCNL and the permissions will be set appropriately for the type DCNL of Distribution. DCNL :type name: str or unicode DCNL :param name: The name or key of the new object. DCNL :type content: file-like object DCNL :param content: A file-like object that contains the content DCNL for the new object. DCNL :type headers: dict DCNL :param headers: A dictionary containing additional headers DCNL you would like associated with the new DCNL object in S3. DCNL :rtype: :class:`boto.cloudfront.object.Object` DCNL :return: The newly created object.'
def create_signed_url(self, url, keypair_id, expire_time=None, valid_after_time=None, ip_address=None, policy_url=None, private_key_file=None, private_key_string=None): DCNL 'Creates a signed CloudFront URL that is only valid within the specified DCNL parameters. DCNL :type url: str DCNL :param url: The URL of the protected object. DCNL :type keypair_id: str DCNL :param keypair_id: The keypair ID of the Amazon KeyPair used to sign DCNL theURL.  This ID MUST correspond to the private key DCNL specified with private_key_file or private_key_string. DCNL :type expire_time: int DCNL :param expire_time: The expiry time of the URL. If provided, the URL DCNL will expire after the time has passed. If not provided the URL will DCNL never expire. Format is a unix epoch. DCNL Use int(time.time() + duration_in_sec). DCNL :type valid_after_time: int DCNL :param valid_after_time: If provided, the URL will not be valid until DCNL after valid_after_time. Format is a unix epoch. DCNL Use int(time.time() + secs_until_valid). DCNL :type ip_address: str DCNL :param ip_address: If provided, only allows access from the specified DCNL IP address.  Use \'192.168.0.10\' for a single IP or DCNL use \'192.168.0.0/24\' CIDR notation for a subnet. DCNL :type policy_url: str DCNL :param policy_url: If provided, allows the signature to contain DCNL wildcard globs in the URL.  For example, you could DCNL provide: \'http://example.com/media/\*\' and the policy DCNL and signature would allow access to all contents of DCNL the media subdirectory. If not specified, only DCNL allow access to the exact url provided in \'url\'. DCNL :type private_key_file: str or file object. DCNL :param private_key_file: If provided, contains the filename of the DCNL private key file used for signing or an open DCNL file object containing the private key DCNL contents.  Only one of private_key_file or DCNL private_key_string can be provided. DCNL :type private_key_string: str DCNL :param private_key_string: If provided, contains the private key string DCNL used for signing. Only one of private_key_file or DCNL private_key_string can be provided. DCNL :rtype: str DCNL :return: The signed URL.'
def _create_signing_params(self, url, keypair_id, expire_time=None, valid_after_time=None, ip_address=None, policy_url=None, private_key_file=None, private_key_string=None): DCNL 'Creates the required URL parameters for a signed URL.'
@staticmethod DCNL def _canned_policy(resource, expires): DCNL 'Creates a canned policy string.'
@staticmethod DCNL def _custom_policy(resource, expires=None, valid_after=None, ip_address=None): DCNL 'Creates a custom policy string based on the supplied parameters.'
@staticmethod DCNL def _sign_string(message, private_key_file=None, private_key_string=None): DCNL 'Signs a string for use with Amazon CloudFront. DCNL Requires the rsa library be installed.'
@staticmethod DCNL def _url_base64_encode(msg): DCNL 'Base64 encodes a string using the URL-safe characters specified by DCNL Amazon.'
def update(self, enabled=None, cnames=None, comment=None): DCNL 'Update the configuration of the StreamingDistribution.  The only values DCNL of the StreamingDistributionConfig that can be directly updated are: DCNL * CNAMES DCNL * Comment DCNL * Whether the Distribution is enabled or not DCNL Any changes to the ``trusted_signers`` or ``origin`` properties of DCNL this distribution\'s current config object will also be included in DCNL the update. Therefore, to set the origin access identity for this DCNL distribution, set DCNL ``StreamingDistribution.config.origin.origin_access_identity`` DCNL before calling this update method. DCNL :type enabled: bool DCNL :param enabled: Whether the StreamingDistribution is active or not. DCNL :type cnames: list of str DCNL :param cnames: The DNS CNAME\'s associated with this DCNL Distribution.  Maximum of 10 values. DCNL :type comment: str or unicode DCNL :param comment: The comment associated with the Distribution.'
def create_invalidation_request(self, distribution_id, paths, caller_reference=None): DCNL 'Creates a new invalidation request DCNL :see: http://goo.gl/8vECq'
def get_invalidation_requests(self, distribution_id, marker=None, max_items=None): DCNL 'Get all invalidation requests for a given CloudFront distribution. DCNL This returns an instance of an InvalidationListResultSet that DCNL automatically handles all of the result paging, etc. from CF - you just DCNL need to keep iterating until there are no more results. DCNL :type distribution_id: string DCNL :param distribution_id: The id of the CloudFront distribution DCNL :type marker: string DCNL :param marker: Use this only when paginating results and only in DCNL follow-up request after you\'ve received a response where DCNL the results are truncated. Set this to the value of the DCNL Marker element in the response you just received. DCNL :type max_items: int DCNL :param max_items: Use this only when paginating results and only in a DCNL follow-up request to indicate the maximum number of DCNL invalidation requests you want in the response. You DCNL will need to pass the next_marker property from the DCNL previous InvalidationListResultSet response in the DCNL follow-up request in order to get the next \'page\' of DCNL results. DCNL :rtype: :class:`boto.cloudfront.invalidation.InvalidationListResultSet` DCNL :returns: An InvalidationListResultSet iterator that lists invalidation DCNL requests for a given CloudFront distribution. Automatically DCNL handles paging the results.'
def __init__(self, dns_name=None, origin_access_identity=None): DCNL ':param dns_name: The DNS name of your Amazon S3 bucket to DCNL associate with the distribution. DCNL For example: mybucket.s3.amazonaws.com. DCNL :type dns_name: str DCNL :param origin_access_identity: The CloudFront origin access DCNL identity to associate with the DCNL distribution. If you want the DCNL distribution to serve private content, DCNL include this element; if you want the DCNL distribution to serve public content, DCNL remove this element. DCNL :type origin_access_identity: str'
def __init__(self, dns_name=None, http_port=80, https_port=443, origin_protocol_policy=None): DCNL ':param dns_name: The DNS name of your Amazon S3 bucket to DCNL associate with the distribution. DCNL For example: mybucket.s3.amazonaws.com. DCNL :type dns_name: str DCNL :param http_port: The HTTP port the custom origin listens on. DCNL :type http_port: int DCNL :param https_port: The HTTPS port the custom origin listens on. DCNL :type http_port: int DCNL :param origin_protocol_policy: The origin protocol policy to DCNL apply to your origin. If you DCNL specify http-only, CloudFront DCNL will use HTTP only to access the origin. DCNL If you specify match-viewer, CloudFront DCNL will fetch from your origin using HTTP DCNL or HTTPS, based on the protocol of the DCNL viewer request. DCNL :type origin_protocol_policy: str'
def __init__(self, paths=None, connection=None, distribution=None, caller_reference=''): DCNL 'Create a new invalidation request: DCNL :paths: An array of paths to invalidate'
def add(self, path): DCNL 'Add another path to this invalidation request'
def remove(self, path): DCNL 'Remove a path from this invalidation request'
def escape(self, p): DCNL 'Escape a path, make sure it begins with a slash and contains no invalid characters. Retain literal wildcard characters.'
def to_xml(self): DCNL 'Get this batch as XML'
def __iter__(self): DCNL 'A generator function for listing invalidation requests for a given DCNL CloudFront distribution.'
def get_distribution(self): DCNL 'Returns a Distribution object representing the parent CloudFront DCNL distribution of the invalidation request listed in the DCNL InvalidationSummary. DCNL :rtype: :class:`boto.cloudfront.distribution.Distribution` DCNL :returns: A Distribution object representing the parent CloudFront DCNL distribution  of the invalidation request listed in the DCNL InvalidationSummary'
def get_invalidation_request(self): DCNL 'Returns an InvalidationBatch object representing the invalidation DCNL request referred to in the InvalidationSummary. DCNL :rtype: :class:`boto.cloudfront.invalidation.InvalidationBatch` DCNL :returns: An InvalidationBatch object representing the invalidation DCNL request referred to by the InvalidationSummary'
def describe_cluster(self, cluster_id): DCNL 'Describes an Elastic MapReduce cluster DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest'
def describe_jobflow(self, jobflow_id): DCNL 'This method is deprecated. We recommend you use list_clusters, DCNL describe_cluster, list_steps, list_instance_groups and DCNL list_bootstrap_actions instead. DCNL Describes a single Elastic MapReduce job flow DCNL :type jobflow_id: str DCNL :param jobflow_id: The job flow id of interest'
def describe_jobflows(self, states=None, jobflow_ids=None, created_after=None, created_before=None): DCNL 'This method is deprecated. We recommend you use list_clusters, DCNL describe_cluster, list_steps, list_instance_groups and DCNL list_bootstrap_actions instead. DCNL Retrieve all the Elastic MapReduce job flows on your account DCNL :type states: list DCNL :param states: A list of strings with job flow states wanted DCNL :type jobflow_ids: list DCNL :param jobflow_ids: A list of job flow IDs DCNL :type created_after: datetime DCNL :param created_after: Bound on job flow creation time DCNL :type created_before: datetime DCNL :param created_before: Bound on job flow creation time'
def describe_step(self, cluster_id, step_id): DCNL 'Describe an Elastic MapReduce step DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest DCNL :type step_id: str DCNL :param step_id: The step id of interest'
def list_bootstrap_actions(self, cluster_id, marker=None): DCNL 'Get a list of bootstrap actions for an Elastic MapReduce cluster DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest DCNL :type marker: str DCNL :param marker: Pagination marker'
def list_clusters(self, created_after=None, created_before=None, cluster_states=None, marker=None): DCNL 'List Elastic MapReduce clusters with optional filtering DCNL :type created_after: datetime DCNL :param created_after: Bound on cluster creation time DCNL :type created_before: datetime DCNL :param created_before: Bound on cluster creation time DCNL :type cluster_states: list DCNL :param cluster_states: Bound on cluster states DCNL :type marker: str DCNL :param marker: Pagination marker'
def list_instance_groups(self, cluster_id, marker=None): DCNL 'List EC2 instance groups in a cluster DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest DCNL :type marker: str DCNL :param marker: Pagination marker'
def list_instances(self, cluster_id, instance_group_id=None, instance_group_types=None, marker=None): DCNL 'List EC2 instances in a cluster DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest DCNL :type instance_group_id: str DCNL :param instance_group_id: The EC2 instance group id of interest DCNL :type instance_group_types: list DCNL :param instance_group_types: Filter by EC2 instance group type DCNL :type marker: str DCNL :param marker: Pagination marker'
def list_steps(self, cluster_id, step_states=None, marker=None): DCNL 'List cluster steps DCNL :type cluster_id: str DCNL :param cluster_id: The cluster id of interest DCNL :type step_states: list DCNL :param step_states: Filter by step states DCNL :type marker: str DCNL :param marker: Pagination marker'
def add_tags(self, resource_id, tags): DCNL 'Create new metadata tags for the specified resource id. DCNL :type resource_id: str DCNL :param resource_id: The cluster id DCNL :type tags: dict DCNL :param tags: A dictionary containing the name/value pairs. DCNL If you want to create only a tag name, the DCNL value for that tag should be the empty string DCNL (e.g. \'\') or None.'
def remove_tags(self, resource_id, tags): DCNL 'Remove metadata tags for the specified resource id. DCNL :type resource_id: str DCNL :param resource_id: The cluster id DCNL :type tags: list DCNL :param tags: A list of tag names to remove.'
def terminate_jobflow(self, jobflow_id): DCNL 'Terminate an Elastic MapReduce job flow DCNL :type jobflow_id: str DCNL :param jobflow_id: A jobflow id'
def terminate_jobflows(self, jobflow_ids): DCNL 'Terminate an Elastic MapReduce job flow DCNL :type jobflow_ids: list DCNL :param jobflow_ids: A list of job flow IDs'
def add_jobflow_steps(self, jobflow_id, steps): DCNL 'Adds steps to a jobflow DCNL :type jobflow_id: str DCNL :param jobflow_id: The job flow id DCNL :type steps: list(boto.emr.Step) DCNL :param steps: A list of steps to add to the job'
def add_instance_groups(self, jobflow_id, instance_groups): DCNL 'Adds instance groups to a running cluster. DCNL :type jobflow_id: str DCNL :param jobflow_id: The id of the jobflow which will take the DCNL new instance groups DCNL :type instance_groups: list(boto.emr.InstanceGroup) DCNL :param instance_groups: A list of instance groups to add to the job'
def modify_instance_groups(self, instance_group_ids, new_sizes): DCNL 'Modify the number of nodes and configuration settings in an DCNL instance group. DCNL :type instance_group_ids: list(str) DCNL :param instance_group_ids: A list of the ID\'s of the instance DCNL groups to be modified DCNL :type new_sizes: list(int) DCNL :param new_sizes: A list of the new sizes for each instance group'
def run_jobflow(self, name, log_uri=None, ec2_keyname=None, availability_zone=None, master_instance_type='m1.small', slave_instance_type='m1.small', num_instances=1, action_on_failure='TERMINATE_JOB_FLOW', keep_alive=False, enable_debugging=False, hadoop_version=None, steps=None, bootstrap_actions=[], instance_groups=None, additional_info=None, ami_version=None, api_params=None, visible_to_all_users=None, job_flow_role=None, service_role=None): DCNL 'Runs a job flow DCNL :type name: str DCNL :param name: Name of the job flow DCNL :type log_uri: str DCNL :param log_uri: URI of the S3 bucket to place logs DCNL :type ec2_keyname: str DCNL :param ec2_keyname: EC2 key used for the instances DCNL :type availability_zone: str DCNL :param availability_zone: EC2 availability zone of the cluster DCNL :type master_instance_type: str DCNL :param master_instance_type: EC2 instance type of the master DCNL :type slave_instance_type: str DCNL :param slave_instance_type: EC2 instance type of the slave nodes DCNL :type num_instances: int DCNL :param num_instances: Number of instances in the Hadoop cluster DCNL :type action_on_failure: str DCNL :param action_on_failure: Action to take if a step terminates DCNL :type keep_alive: bool DCNL :param keep_alive: Denotes whether the cluster should stay DCNL alive upon completion DCNL :type enable_debugging: bool DCNL :param enable_debugging: Denotes whether AWS console debugging DCNL should be enabled. DCNL :type hadoop_version: str DCNL :param hadoop_version: Version of Hadoop to use. This no longer DCNL defaults to \'0.20\' and now uses the AMI default. DCNL :type steps: list(boto.emr.Step) DCNL :param steps: List of steps to add with the job DCNL :type bootstrap_actions: list(boto.emr.BootstrapAction) DCNL :param bootstrap_actions: List of bootstrap actions that run DCNL before Hadoop starts. DCNL :type instance_groups: list(boto.emr.InstanceGroup) DCNL :param instance_groups: Optional list of instance groups to DCNL use when creating this job. DCNL NB: When provided, this argument supersedes num_instances DCNL and master/slave_instance_type. DCNL :type ami_version: str DCNL :param ami_version: Amazon Machine Image (AMI) version to use DCNL for instances. Values accepted by EMR are \'1.0\', \'2.0\', and DCNL \'latest\'; EMR currently defaults to \'1.0\' if you don\'t set DCNL \'ami_version\'. DCNL :type additional_info: JSON str DCNL :param additional_info: A JSON string for selecting additional features DCNL :type api_params: dict DCNL :param api_params: a dictionary of additional parameters to pass DCNL directly to the EMR API (so you don\'t have to upgrade boto to DCNL use new EMR features). You can also delete an API parameter DCNL by setting it to None. DCNL :type visible_to_all_users: bool DCNL :param visible_to_all_users: Whether the job flow is visible to all IAM DCNL users of the AWS account associated with the job flow. If this DCNL value is set to ``True``, all IAM users of that AWS DCNL account can view and (if they have the proper policy permissions DCNL set) manage the job flow. If it is set to ``False``, only DCNL the IAM user that created the job flow can view and manage DCNL it. DCNL :type job_flow_role: str DCNL :param job_flow_role: An IAM role for the job flow. The EC2 DCNL instances of the job flow assume this role. The default role is DCNL ``EMRJobflowDefault``. In order to use the default role, DCNL you must have already created it using the CLI. DCNL :type service_role: str DCNL :param service_role: The IAM role that will be assumed by the Amazon DCNL EMR service to access AWS resources on your behalf. DCNL :rtype: str DCNL :return: The jobflow id'
def set_termination_protection(self, jobflow_id, termination_protection_status): DCNL 'Set termination protection on specified Elastic MapReduce job flows DCNL :type jobflow_ids: list or str DCNL :param jobflow_ids: A list of job flow IDs DCNL :type termination_protection_status: bool DCNL :param termination_protection_status: Termination protection status'
def set_visible_to_all_users(self, jobflow_id, visibility): DCNL 'Set whether specified Elastic Map Reduce job flows are visible to all IAM users DCNL :type jobflow_ids: list or str DCNL :param jobflow_ids: A list of job flow IDs DCNL :type visibility: bool DCNL :param visibility: Visibility'
def _build_instance_common_args(self, ec2_keyname, availability_zone, keep_alive, hadoop_version): DCNL 'Takes a number of parameters used when starting a jobflow (as DCNL specified in run_jobflow() above). Returns a comparable dict for DCNL use in making a RunJobFlow request.'
def _build_instance_count_and_type_args(self, master_instance_type, slave_instance_type, num_instances): DCNL 'Takes a master instance type (string), a slave instance type DCNL (string), and a number of instances. Returns a comparable dict DCNL for use in making a RunJobFlow request.'
def _build_instance_group_args(self, instance_group): DCNL 'Takes an InstanceGroup; returns a dict that, when its keys are DCNL properly prefixed, can be used for describing InstanceGroups in DCNL RunJobFlow or AddInstanceGroups requests.'
def _build_instance_group_list_args(self, instance_groups): DCNL 'Takes a list of InstanceGroups, or a single InstanceGroup. Returns DCNL a comparable dict for use in making a RunJobFlow or AddInstanceGroups DCNL request.'
def jar(self): DCNL ':rtype: str DCNL :return: URI to the jar'
def args(self): DCNL ':rtype: list(str) DCNL :return: List of arguments for the step'
def main_class(self): DCNL ':rtype: str DCNL :return: The main class name'
def __init__(self, name, jar, main_class=None, action_on_failure='TERMINATE_JOB_FLOW', step_args=None): DCNL 'A elastic mapreduce step that executes a jar DCNL :type name: str DCNL :param name: The name of the step DCNL :type jar: str DCNL :param jar: S3 URI to the Jar file DCNL :type main_class: str DCNL :param main_class: The class to execute in the jar DCNL :type action_on_failure: str DCNL :param action_on_failure: An action, defined in the EMR docs to DCNL take on failure. DCNL :type step_args: list(str) DCNL :param step_args: A list of arguments to pass to the step'
def __init__(self, name, mapper, reducer=None, combiner=None, action_on_failure='TERMINATE_JOB_FLOW', cache_files=None, cache_archives=None, step_args=None, input=None, output=None, jar='/home/hadoop/contrib/streaming/hadoop-streaming.jar'): DCNL 'A hadoop streaming elastic mapreduce step DCNL :type name: str DCNL :param name: The name of the step DCNL :type mapper: str DCNL :param mapper: The mapper URI DCNL :type reducer: str DCNL :param reducer: The reducer URI DCNL :type combiner: str DCNL :param combiner: The combiner URI. Only works for Hadoop 0.20 DCNL and later! DCNL :type action_on_failure: str DCNL :param action_on_failure: An action, defined in the EMR docs to DCNL take on failure. DCNL :type cache_files: list(str) DCNL :param cache_files: A list of cache files to be bundled with the job DCNL :type cache_archives: list(str) DCNL :param cache_archives: A list of jar archives to be bundled with DCNL the job DCNL :type step_args: list(str) DCNL :param step_args: A list of arguments to pass to the step DCNL :type input: str or a list of str DCNL :param input: The input uri DCNL :type output: str DCNL :param output: The output uri DCNL :type jar: str DCNL :param jar: The hadoop streaming jar. This can be either a local DCNL path on the master node, or an s3:// URI.'
def delete(self): DCNL 'Delete this domain and all index data associated with it.'
def get_stemming(self): DCNL 'Return a :class:`boto.cloudsearch.option.OptionStatus` object DCNL representing the currently defined stemming options for DCNL the domain.'
def get_stopwords(self): DCNL 'Return a :class:`boto.cloudsearch.option.OptionStatus` object DCNL representing the currently defined stopword options for DCNL the domain.'
def get_synonyms(self): DCNL 'Return a :class:`boto.cloudsearch.option.OptionStatus` object DCNL representing the currently defined synonym options for DCNL the domain.'
def get_access_policies(self): DCNL 'Return a :class:`boto.cloudsearch.option.OptionStatus` object DCNL representing the currently defined access policies for DCNL the domain.'
def index_documents(self): DCNL 'Tells the search domain to start indexing its documents using DCNL the latest text processing options and IndexFields. This DCNL operation must be invoked to make options whose OptionStatus DCNL has OptioState of RequiresIndexDocuments visible in search DCNL results.'
def get_index_fields(self, field_names=None): DCNL 'Return a list of index fields defined for this domain.'
def create_index_field(self, field_name, field_type, default='', facet=False, result=False, searchable=False, source_attributes=[]): DCNL 'Defines an ``IndexField``, either replacing an existing DCNL definition or creating a new one. DCNL :type field_name: string DCNL :param field_name: The name of a field in the search index. DCNL :type field_type: string DCNL :param field_type: The type of field.  Valid values are DCNL uint | literal | text DCNL :type default: string or int DCNL :param default: The default value for the field.  If the DCNL field is of type ``uint`` this should be an integer value. DCNL Otherwise, it\'s a string. DCNL :type facet: bool DCNL :param facet: A boolean to indicate whether facets DCNL are enabled for this field or not.  Does not apply to DCNL fields of type ``uint``. DCNL :type results: bool DCNL :param results: A boolean to indicate whether values DCNL of this field can be returned in search results or DCNL used in ranking.  Does not apply to fields of type ``uint``. DCNL :type searchable: bool DCNL :param searchable: A boolean to indicate whether search DCNL is enabled for this field or not.  Applies only to fields DCNL of type ``literal``. DCNL :type source_attributes: list of dicts DCNL :param source_attributes: An optional list of dicts that DCNL provide information about attributes for this index field. DCNL A maximum of 20 source attributes can be configured for DCNL each index field. DCNL Each item in the list is a dict with the following keys: DCNL * data_copy - The value is a dict with the following keys: DCNL * default - Optional default value if the source attribute DCNL is not specified in a document. DCNL * name - The name of the document source field to add DCNL to this ``IndexField``. DCNL * data_function - Identifies the transformation to apply DCNL when copying data from a source attribute. DCNL * data_map - The value is a dict with the following keys: DCNL * cases - A dict that translates source field values DCNL to custom values. DCNL * default - An optional default value to use if the DCNL source attribute is not specified in a document. DCNL * name - the name of the document source field to add DCNL to this ``IndexField`` DCNL * data_trim_title - Trims common title words from a source DCNL document attribute when populating an ``IndexField``. DCNL This can be used to create an ``IndexField`` you can DCNL use for sorting.  The value is a dict with the following DCNL fields: DCNL * default - An optional default value. DCNL * language - an IETF RFC 4646 language code. DCNL * separator - The separator that follows the text to trim. DCNL * name - The name of the document source field to add. DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def get_rank_expressions(self, rank_names=None): DCNL 'Return a list of rank expressions defined for this domain.'
def create_rank_expression(self, name, expression): DCNL 'Create a new rank expression. DCNL :type rank_name: string DCNL :param rank_name: The name of an expression computed for ranking DCNL while processing a search request. DCNL :type rank_expression: string DCNL :param rank_expression: The expression to evaluate for ranking DCNL or thresholding while processing a search request. The DCNL RankExpression syntax is based on JavaScript expressions DCNL and supports: DCNL * Integer, floating point, hex and octal literals DCNL * Shortcut evaluation of logical operators such that an DCNL expression a || b evaluates to the value a if a is DCNL true without evaluting b at all DCNL * JavaScript order of precedence for operators DCNL * Arithmetic operators: + - * / % DCNL * Boolean operators (including the ternary operator) DCNL * Bitwise operators DCNL * Comparison operators DCNL * Common mathematic functions: abs ceil erf exp floor DCNL lgamma ln log2 log10 max min sqrt pow DCNL * Trigonometric library functions: acosh acos asinh asin DCNL atanh atan cosh cos sinh sin tanh tan DCNL * Random generation of a number between 0 and 1: rand DCNL * Current time in epoch: time DCNL * The min max functions that operate on a variable argument list DCNL Intermediate results are calculated as double precision DCNL floating point values. The final return value of a DCNL RankExpression is automatically converted from floating DCNL point to a 32-bit unsigned integer by rounding to the DCNL nearest integer, with a natural floor of 0 and a ceiling DCNL of max(uint32_t), 4294967295. Mathematical errors such as DCNL dividing by 0 will fail during evaluation and return a DCNL value of 0. DCNL The source data for a RankExpression can be the name of an DCNL IndexField of type uint, another RankExpression or the DCNL reserved name text_relevance. The text_relevance source is DCNL defined to return an integer from 0 to 1000 (inclusive) to DCNL indicate how relevant a document is to the search request, DCNL taking into account repetition of search terms in the DCNL document and proximity of search terms to each other in DCNL each matching IndexField in the document. DCNL For more information about using rank expressions to DCNL customize ranking, see the Amazon CloudSearch Developer DCNL Guide. DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def next_page(self): DCNL 'Call Cloudsearch to get the next page of search results DCNL :rtype: :class:`boto.cloudsearch.search.SearchResults` DCNL :return: the following page of search results'
def to_params(self): DCNL 'Transform search parameters from instance properties to a dictionary DCNL :rtype: dict DCNL :return: search parameters'
def search(self, q=None, bq=None, rank=None, return_fields=None, size=10, start=0, facet=None, facet_constraints=None, facet_sort=None, facet_top_n=None, t=None): DCNL 'Send a query to CloudSearch DCNL Each search query should use at least the q or bq argument to specify DCNL the search parameter. The other options are used to specify the DCNL criteria of the search. DCNL :type q: string DCNL :param q: A string to search the default search fields for. DCNL :type bq: string DCNL :param bq: A string to perform a Boolean search. This can be used to DCNL create advanced searches. DCNL :type rank: List of strings DCNL :param rank: A list of fields or rank expressions used to order the DCNL search results. A field can be reversed by using the - operator. DCNL ``[\'-year\', \'author\']`` DCNL :type return_fields: List of strings DCNL :param return_fields: A list of fields which should be returned by the DCNL search. If this field is not specified, only IDs will be returned. DCNL ``[\'headline\']`` DCNL :type size: int DCNL :param size: Number of search results to specify DCNL :type start: int DCNL :param start: Offset of the first search result to return (can be used DCNL for paging) DCNL :type facet: list DCNL :param facet: List of fields for which facets should be returned DCNL ``[\'colour\', \'size\']`` DCNL :type facet_constraints: dict DCNL :param facet_constraints: Use to limit facets to specific values DCNL specified as comma-delimited strings in a Dictionary of facets DCNL ``{\'colour\': "\'blue\',\'white\',\'red\'", \'size\': "big"}`` DCNL :type facet_sort: dict DCNL :param facet_sort: Rules used to specify the order in which facet DCNL values should be returned. Allowed values are *alpha*, *count*, DCNL *max*, *sum*. Use *alpha* to sort alphabetical, and *count* to sort DCNL the facet by number of available result. DCNL ``{\'color\': \'alpha\', \'size\': \'count\'}`` DCNL :type facet_top_n: dict DCNL :param facet_top_n: Dictionary of facets and number of facets to DCNL return. DCNL ``{\'colour\': 2}`` DCNL :type t: dict DCNL :param t: Specify ranges for specific fields DCNL ``{\'year\': \'2000..2005\'}`` DCNL :rtype: :class:`boto.cloudsearch.search.SearchResults` DCNL :return: Returns the results of this search DCNL The following examples all assume we have indexed a set of documents DCNL with fields: *author*, *date*, *headline* DCNL A simple search will look for documents whose default text search DCNL fields will contain the search word exactly: DCNL >>> search(q=\'Tim\') # Return documents with the word Tim in them (but not Timothy) DCNL A simple search with more keywords will return documents whose default DCNL text search fields contain the search strings together or separately. DCNL >>> search(q=\'Tim apple\') # Will match "tim" and "apple" DCNL More complex searches require the boolean search operator. DCNL Wildcard searches can be used to search for any words that start with DCNL the search string. DCNL >>> search(bq="\'Tim*\'") # Return documents with words like Tim or Timothy) DCNL Search terms can also be combined. Allowed operators are "and", "or", DCNL "not", "field", "optional", "token", "phrase", or "filter" DCNL >>> search(bq="(and \'Tim\' (field author \'John Smith\'))") DCNL Facets allow you to show classification information about the search DCNL results. For example, you can retrieve the authors who have written DCNL about Tim: DCNL >>> search(q=\'Tim\', facet=[\'Author\']) DCNL With facet_constraints, facet_top_n and facet_sort more complicated DCNL constraints can be specified such as returning the top author out of DCNL John Smith and Mark Smith who have a document with the word Tim in it. DCNL >>> search(q=\'Tim\', DCNL ...     facet=[\'Author\'], DCNL ...     facet_constraints={\'author\': "\'John Smith\',\'Mark Smith\'"}, DCNL ...     facet=[\'author\'], DCNL ...     facet_top_n={\'author\': 1}, DCNL ...     facet_sort={\'author\': \'count\'})'
def __call__(self, query): DCNL 'Make a call to CloudSearch DCNL :type query: :class:`boto.cloudsearch.search.Query` DCNL :param query: A group of search criteria DCNL :rtype: :class:`boto.cloudsearch.search.SearchResults` DCNL :return: search results'
def get_all_paged(self, query, per_page): DCNL 'Get a generator to iterate over all pages of search results DCNL :type query: :class:`boto.cloudsearch.search.Query` DCNL :param query: A group of search criteria DCNL :type per_page: int DCNL :param per_page: Number of docs in each :class:`boto.cloudsearch.search.SearchResults` object. DCNL :rtype: generator DCNL :return: Generator containing :class:`boto.cloudsearch.search.SearchResults`'
def get_all_hits(self, query): DCNL 'Get a generator to iterate over all search results DCNL Transparently handles the results paging from Cloudsearch DCNL search results so even if you have many thousands of results DCNL you can iterate over all results in a reasonably efficient DCNL manner. DCNL :type query: :class:`boto.cloudsearch.search.Query` DCNL :param query: A group of search criteria DCNL :rtype: generator DCNL :return: All docs matching query'
def get_num_hits(self, query): DCNL 'Return the total number of hits for query DCNL :type query: :class:`boto.cloudsearch.search.Query` DCNL :param query: a group of search criteria DCNL :rtype: int DCNL :return: Total number of hits for query'
def create_domain(self, domain_name): DCNL 'Create a new search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, LimitExceededException'
def define_index_field(self, domain_name, field_name, field_type, default='', facet=False, result=False, searchable=False, source_attributes=None): DCNL 'Defines an ``IndexField``, either replacing an existing DCNL definition or creating a new one. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type field_name: string DCNL :param field_name: The name of a field in the search index. DCNL :type field_type: string DCNL :param field_type: The type of field.  Valid values are DCNL uint | literal | text DCNL :type default: string or int DCNL :param default: The default value for the field.  If the DCNL field is of type ``uint`` this should be an integer value. DCNL Otherwise, it\'s a string. DCNL :type facet: bool DCNL :param facet: A boolean to indicate whether facets DCNL are enabled for this field or not.  Does not apply to DCNL fields of type ``uint``. DCNL :type results: bool DCNL :param results: A boolean to indicate whether values DCNL of this field can be returned in search results or DCNL used in ranking.  Does not apply to fields of type ``uint``. DCNL :type searchable: bool DCNL :param searchable: A boolean to indicate whether search DCNL is enabled for this field or not.  Applies only to fields DCNL of type ``literal``. DCNL :type source_attributes: list of dicts DCNL :param source_attributes: An optional list of dicts that DCNL provide information about attributes for this index field. DCNL A maximum of 20 source attributes can be configured for DCNL each index field. DCNL Each item in the list is a dict with the following keys: DCNL * data_copy - The value is a dict with the following keys: DCNL * default - Optional default value if the source attribute DCNL is not specified in a document. DCNL * name - The name of the document source field to add DCNL to this ``IndexField``. DCNL * data_function - Identifies the transformation to apply DCNL when copying data from a source attribute. DCNL * data_map - The value is a dict with the following keys: DCNL * cases - A dict that translates source field values DCNL to custom values. DCNL * default - An optional default value to use if the DCNL source attribute is not specified in a document. DCNL * name - the name of the document source field to add DCNL to this ``IndexField`` DCNL * data_trim_title - Trims common title words from a source DCNL document attribute when populating an ``IndexField``. DCNL This can be used to create an ``IndexField`` you can DCNL use for sorting.  The value is a dict with the following DCNL fields: DCNL * default - An optional default value. DCNL * language - an IETF RFC 4646 language code. DCNL * separator - The separator that follows the text to trim. DCNL * name - The name of the document source field to add. DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def define_rank_expression(self, domain_name, rank_name, rank_expression): DCNL 'Defines a RankExpression, either replacing an existing DCNL definition or creating a new one. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type rank_name: string DCNL :param rank_name: The name of an expression computed for ranking DCNL while processing a search request. DCNL :type rank_expression: string DCNL :param rank_expression: The expression to evaluate for ranking DCNL or thresholding while processing a search request. The DCNL RankExpression syntax is based on JavaScript expressions DCNL and supports: DCNL * Integer, floating point, hex and octal literals DCNL * Shortcut evaluation of logical operators such that an DCNL expression a || b evaluates to the value a if a is DCNL true without evaluting b at all DCNL * JavaScript order of precedence for operators DCNL * Arithmetic operators: + - * / % DCNL * Boolean operators (including the ternary operator) DCNL * Bitwise operators DCNL * Comparison operators DCNL * Common mathematic functions: abs ceil erf exp floor DCNL lgamma ln log2 log10 max min sqrt pow DCNL * Trigonometric library functions: acosh acos asinh asin DCNL atanh atan cosh cos sinh sin tanh tan DCNL * Random generation of a number between 0 and 1: rand DCNL * Current time in epoch: time DCNL * The min max functions that operate on a variable argument list DCNL Intermediate results are calculated as double precision DCNL floating point values. The final return value of a DCNL RankExpression is automatically converted from floating DCNL point to a 32-bit unsigned integer by rounding to the DCNL nearest integer, with a natural floor of 0 and a ceiling DCNL of max(uint32_t), 4294967295. Mathematical errors such as DCNL dividing by 0 will fail during evaluation and return a DCNL value of 0. DCNL The source data for a RankExpression can be the name of an DCNL IndexField of type uint, another RankExpression or the DCNL reserved name text_relevance. The text_relevance source is DCNL defined to return an integer from 0 to 1000 (inclusive) to DCNL indicate how relevant a document is to the search request, DCNL taking into account repetition of search terms in the DCNL document and proximity of search terms to each other in DCNL each matching IndexField in the document. DCNL For more information about using rank expressions to DCNL customize ranking, see the Amazon CloudSearch Developer DCNL Guide. DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL InvalidTypeException, ResourceNotFoundException'
def delete_domain(self, domain_name): DCNL 'Delete a search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException'
def delete_index_field(self, domain_name, field_name): DCNL 'Deletes an existing ``IndexField`` from the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type field_name: string DCNL :param field_name: A string that represents the name of DCNL an index field. Field names must begin with a letter and DCNL can contain the following characters: a-z (lowercase), DCNL 0-9, and _ (underscore). Uppercase letters and hyphens are DCNL not allowed. The names "body", "docid", and DCNL "text_relevance" are reserved and cannot be specified as DCNL field or rank expression names. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def delete_rank_expression(self, domain_name, rank_name): DCNL 'Deletes an existing ``RankExpression`` from the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type rank_name: string DCNL :param rank_name: Name of the ``RankExpression`` to delete. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_default_search_field(self, domain_name): DCNL 'Describes options defining the default search field used by DCNL indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_domains(self, domain_names=None): DCNL 'Describes the domains (optionally limited to one or more DCNL domains by name) owned by this account. DCNL :type domain_names: list DCNL :param domain_names: Limits the response to the specified domains. DCNL :raises: BaseException, InternalException'
def describe_index_fields(self, domain_name, field_names=None): DCNL 'Describes index fields in the search domain, optionally DCNL limited to a single ``IndexField``. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type field_names: list DCNL :param field_names: Limits the response to the specified fields. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_rank_expressions(self, domain_name, rank_names=None): DCNL 'Describes RankExpressions in the search domain, optionally DCNL limited to a single expression. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type rank_names: list DCNL :param rank_names: Limit response to the specified rank names. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_service_access_policies(self, domain_name): DCNL 'Describes the resource-based policies controlling access to DCNL the services in this search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_stemming_options(self, domain_name): DCNL 'Describes stemming options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_stopword_options(self, domain_name): DCNL 'Describes stopword options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def describe_synonym_options(self, domain_name): DCNL 'Describes synonym options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def index_documents(self, domain_name): DCNL 'Tells the search domain to start scanning its documents using DCNL the latest text processing options and ``IndexFields``.  This DCNL operation must be invoked to make visible in searches any DCNL options whose <a>OptionStatus</a> has ``OptionState`` of DCNL ``RequiresIndexDocuments``. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :raises: BaseException, InternalException, ResourceNotFoundException'
def update_default_search_field(self, domain_name, default_search_field): DCNL 'Updates options defining the default search field used by DCNL indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type default_search_field: string DCNL :param default_search_field: The IndexField to use for search DCNL requests issued with the q parameter. The default is an DCNL empty string, which automatically searches all text DCNL fields. DCNL :raises: BaseException, InternalException, InvalidTypeException, DCNL ResourceNotFoundException'
def update_service_access_policies(self, domain_name, access_policies): DCNL 'Updates the policies controlling access to the services in DCNL this search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type access_policies: string DCNL :param access_policies: An IAM access policy as described in DCNL The Access Policy Language in Using AWS Identity and DCNL Access Management. The maximum size of an access policy DCNL document is 100KB. DCNL :raises: BaseException, InternalException, LimitExceededException, DCNL ResourceNotFoundException, InvalidTypeException'
def update_stemming_options(self, domain_name, stems): DCNL 'Updates stemming options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type stems: string DCNL :param stems: Maps terms to their stems.  The JSON object DCNL has a single key called "stems" whose value is a DCNL dict mapping terms to their stems. The maximum size DCNL of a stemming document is 500KB. DCNL Example: {"stems":{"people": "person", "walking":"walk"}} DCNL :raises: BaseException, InternalException, InvalidTypeException, DCNL LimitExceededException, ResourceNotFoundException'
def update_stopword_options(self, domain_name, stopwords): DCNL 'Updates stopword options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type stopwords: string DCNL :param stopwords: Lists stopwords in a JSON object. The object has a DCNL single key called "stopwords" whose value is an array of strings. DCNL The maximum size of a stopwords document is 10KB. Example: DCNL {"stopwords": ["a", "an", "the", "of"]} DCNL :raises: BaseException, InternalException, InvalidTypeException, DCNL LimitExceededException, ResourceNotFoundException'
def update_synonym_options(self, domain_name, synonyms): DCNL 'Updates synonym options used by indexing for the search domain. DCNL :type domain_name: string DCNL :param domain_name: A string that represents the name of a DCNL domain. Domain names must be unique across the domains DCNL owned by an account within an AWS region. Domain names DCNL must start with a letter or number and can contain the DCNL following characters: a-z (lowercase), 0-9, and - DCNL (hyphen). Uppercase letters and underscores are not DCNL allowed. DCNL :type synonyms: string DCNL :param synonyms: Maps terms to their synonyms.  The JSON object DCNL has a single key "synonyms" whose value is a dict mapping terms DCNL to their synonyms. Each synonym is a simple string or an DCNL array of strings. The maximum size of a stopwords document DCNL is 100KB. Example: DCNL {"synonyms": {"cat": ["feline", "kitten"], "puppy": "dog"}} DCNL :raises: BaseException, InternalException, InvalidTypeException, DCNL LimitExceededException, ResourceNotFoundException'
def refresh(self, data=None): DCNL 'Refresh the local state of the object.  You can either pass DCNL new state data in as the parameter ``data`` or, if that parameter DCNL is omitted, the state data will be retrieved from CloudSearch.'
def to_json(self): DCNL 'Return the JSON representation of the options as a string.'
def save(self): DCNL 'Write the current state of the local object back to the DCNL CloudSearch service.'
def wait_for_state(self, state): DCNL 'Performs polling of CloudSearch to wait for the ``state`` DCNL of this object to change to the provided state.'
def new_statement(self, arn, ip): DCNL 'Returns a new policy statement that will allow DCNL access to the service described by ``arn`` by the DCNL ip specified in ``ip``. DCNL :type arn: string DCNL :param arn: The Amazon Resource Notation identifier for the DCNL service you wish to provide access to.  This would be DCNL either the search service or the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def allow_search_ip(self, ip): DCNL 'Add the provided ip address or CIDR block to the list of DCNL allowable address for the search service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def allow_doc_ip(self, ip): DCNL 'Add the provided ip address or CIDR block to the list of DCNL allowable address for the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def disallow_search_ip(self, ip): DCNL 'Remove the provided ip address or CIDR block from the list of DCNL allowable address for the search service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def disallow_doc_ip(self, ip): DCNL 'Remove the provided ip address or CIDR block from the list of DCNL allowable address for the document service. DCNL :type ip: string DCNL :param ip: An IP address or CIDR block you wish to grant access DCNL to.'
def add(self, _id, version, fields, lang='en'): DCNL 'Add a document to be processed by the DocumentService DCNL The document will not actually be added until :func:`commit` is called DCNL :type _id: string DCNL :param _id: A unique ID used to refer to this document. DCNL :type version: int DCNL :param version: Version of the document being indexed. If a file is DCNL being reindexed, the version should be higher than the existing one DCNL in CloudSearch. DCNL :type fields: dict DCNL :param fields: A dictionary of key-value pairs to be uploaded . DCNL :type lang: string DCNL :param lang: The language code the data is in. Only \'en\' is currently DCNL supported'
def delete(self, _id, version): DCNL 'Schedule a document to be removed from the CloudSearch service DCNL The document will not actually be scheduled for removal until :func:`commit` is called DCNL :type _id: string DCNL :param _id: The unique ID of this document. DCNL :type version: int DCNL :param version: Version of the document to remove. The delete will only DCNL occur if this version number is higher than the version currently DCNL in the index.'
def get_sdf(self): DCNL 'Generate the working set of documents in Search Data Format (SDF) DCNL :rtype: string DCNL :returns: JSON-formatted string of the documents in SDF'
def clear_sdf(self): DCNL 'Clear the working documents from this DocumentServiceConnection DCNL This should be used after :func:`commit` if the connection will be reused DCNL for another set of documents.'
def add_sdf_from_s3(self, key_obj): DCNL 'Load an SDF from S3 DCNL Using this method will result in documents added through DCNL :func:`add` and :func:`delete` being ignored. DCNL :type key_obj: :class:`boto.s3.key.Key` DCNL :param key_obj: An S3 key which contains an SDF'
def commit(self): DCNL 'Actually send an SDF to CloudSearch for processing DCNL If an SDF file has been explicitly loaded it will be used. Otherwise, DCNL documents added through :func:`add` and :func:`delete` will be used. DCNL :rtype: :class:`CommitResponse` DCNL :returns: A summary of documents added and deleted'
def _check_num_ops(self, type_, response_num): DCNL 'Raise exception if number of ops in response doesn\'t match commit DCNL :type type_: str DCNL :param type_: Type of commit operation: \'add\' or \'delete\' DCNL :type response_num: int DCNL :param response_num: Number of adds or deletes in the response. DCNL :raises: :class:`boto.cloudsearch.document.CommitMismatchError`'
def list_domains(self, domain_names=None): DCNL 'Return a list of :class:`boto.cloudsearch.domain.Domain` DCNL objects for each domain defined in the current account.'
def create_domain(self, domain_name): DCNL 'Create a new CloudSearch domain and return the corresponding DCNL :class:`boto.cloudsearch.domain.Domain` object.'
def lookup(self, domain_name): DCNL 'Lookup a single domain DCNL :param domain_name: The name of the domain to look up DCNL :type domain_name: str DCNL :return: Domain object, or None if the domain isn\'t found DCNL :rtype: :class:`boto.cloudsearch.domain.Domain`'
def __init__(self, name, contained_key): DCNL 'Instantiate an anonymous file-based Bucket around a single key.'
def delete_key(self, key_name, headers=None, version_id=None, mfa_token=None): DCNL 'Deletes a key from the bucket. DCNL :type key_name: string DCNL :param key_name: The key name to delete DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type mfa_token: tuple or list of strings DCNL :param mfa_token: Unused in this subclass.'
def get_all_keys(self, headers=None, **params): DCNL 'This method returns the single key around which this anonymous Bucket DCNL was instantiated. DCNL :rtype: SimpleResultSet DCNL :return: The result from file system listing the keys requested'
def get_key(self, key_name, headers=None, version_id=None, key_type=Key.KEY_REGULAR_FILE): DCNL 'Check to see if a particular key exists within the bucket. DCNL Returns: An instance of a Key object or None DCNL :type key_name: string DCNL :param key_name: The name of the key to retrieve DCNL :type version_id: string DCNL :param version_id: Unused in this subclass. DCNL :type stream_type: integer DCNL :param stream_type: Type of the Key - Regular File or input/output Stream DCNL :rtype: :class:`boto.file.key.Key` DCNL :returns: A Key object from this bucket.'
def new_key(self, key_name=None, key_type=Key.KEY_REGULAR_FILE): DCNL 'Creates a new key DCNL :type key_name: string DCNL :param key_name: The name of the key to create DCNL :rtype: :class:`boto.file.key.Key` DCNL :returns: An instance of the newly created key object'
def get_file(self, fp, headers=None, cb=None, num_cb=10, torrent=False): DCNL 'Retrieves a file from a Key DCNL :type fp: file DCNL :param fp: File pointer to put the data into DCNL :type headers: string DCNL :param: ignored in this subclass. DCNL :type cb: function DCNL :param cb: ignored in this subclass. DCNL :type cb: int DCNL :param num_cb: ignored in this subclass.'
def set_contents_from_file(self, fp, headers=None, replace=True, cb=None, num_cb=10, policy=None, md5=None): DCNL 'Store an object in a file using the name of the Key object as the DCNL key in file URI and the contents of the file pointed to by \'fp\' as the DCNL contents. DCNL :type fp: file DCNL :param fp: the file whose contents to upload DCNL :type headers: dict DCNL :param headers: ignored in this subclass. DCNL :type replace: bool DCNL :param replace: If this parameter is False, the method DCNL will first check to see if an object exists in the DCNL bucket with the same key.  If it does, it won\'t DCNL overwrite it.  The default value is True which will DCNL overwrite the object. DCNL :type cb: function DCNL :param cb: ignored in this subclass. DCNL :type cb: int DCNL :param num_cb: ignored in this subclass. DCNL :type policy: :class:`boto.s3.acl.CannedACLStrings` DCNL :param policy: ignored in this subclass. DCNL :type md5: A tuple containing the hexdigest version of the MD5 checksum DCNL of the file as the first element and the Base64-encoded DCNL version of the plain checksum as the second element. DCNL This is the same format returned by the compute_md5 method. DCNL :param md5: ignored in this subclass.'
def get_contents_to_file(self, fp, headers=None, cb=None, num_cb=None, torrent=False, version_id=None, res_download_handler=None, response_headers=None): DCNL 'Copy contents from the current file to the file pointed to by \'fp\'. DCNL :type fp: File-like object DCNL :param fp: DCNL :type headers: dict DCNL :param headers: Unused in this subclass. DCNL :type cb: function DCNL :param cb: Unused in this subclass. DCNL :type cb: int DCNL :param num_cb: Unused in this subclass. DCNL :type torrent: bool DCNL :param torrent: Unused in this subclass. DCNL :type res_upload_handler: ResumableDownloadHandler DCNL :param res_download_handler: Unused in this subclass. DCNL :type response_headers: dict DCNL :param response_headers: Unused in this subclass.'
def get_contents_as_string(self, headers=None, cb=None, num_cb=10, torrent=False): DCNL 'Retrieve file data from the Key, and return contents as a string. DCNL :type headers: dict DCNL :param headers: ignored in this subclass. DCNL :type cb: function DCNL :param cb: ignored in this subclass. DCNL :type cb: int DCNL :param num_cb: ignored in this subclass. DCNL :type cb: int DCNL :param num_cb: ignored in this subclass. DCNL :type torrent: bool DCNL :param torrent: ignored in this subclass. DCNL :rtype: string DCNL :returns: The contents of the file as a string'
def close(self): DCNL 'Closes fp associated with underlying file. DCNL Caller should call this method when done with this class, to avoid DCNL using up OS resources (e.g., when iterating over a large number DCNL of files).'
def _build_dict_as_list_params(self, params, dictionary, name): DCNL 'Serialize a parameter \'name\' which value is a \'dictionary\' into a list of parameters. DCNL See: http://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html DCNL For example:: DCNL dictionary = {\'PlatformPrincipal\': \'foo\', \'PlatformCredential\': \'bar\'} DCNL name = \'Attributes\' DCNL would result in params dict being populated with: DCNL Attributes.entry.1.key    = PlatformPrincipal DCNL Attributes.entry.1.value  = foo DCNL Attributes.entry.2.key    = PlatformCredential DCNL Attributes.entry.2.value  = bar DCNL :param params: the resulting parameters will be added to this dict DCNL :param dictionary: dict - value of the serialized parameter DCNL :param name: name of the serialized parameter'
def get_all_topics(self, next_token=None): DCNL ':type next_token: string DCNL :param next_token: Token returned by the previous call to DCNL this method.'
def get_topic_attributes(self, topic): DCNL 'Get attributes of a Topic DCNL :type topic: string DCNL :param topic: The ARN of the topic.'
def set_topic_attributes(self, topic, attr_name, attr_value): DCNL 'Get attributes of a Topic DCNL :type topic: string DCNL :param topic: The ARN of the topic. DCNL :type attr_name: string DCNL :param attr_name: The name of the attribute you want to set. DCNL Only a subset of the topic\'s attributes are mutable. DCNL Valid values: Policy | DisplayName DCNL :type attr_value: string DCNL :param attr_value: The new value for the attribute.'
def add_permission(self, topic, label, account_ids, actions): DCNL 'Adds a statement to a topic\'s access control policy, granting DCNL access for the specified AWS accounts to the specified actions. DCNL :type topic: string DCNL :param topic: The ARN of the topic. DCNL :type label: string DCNL :param label: A unique identifier for the new policy statement. DCNL :type account_ids: list of strings DCNL :param account_ids: The AWS account ids of the users who will be DCNL give access to the specified actions. DCNL :type actions: list of strings DCNL :param actions: The actions you want to allow for each of the DCNL specified principal(s).'
def remove_permission(self, topic, label): DCNL 'Removes a statement from a topic\'s access control policy. DCNL :type topic: string DCNL :param topic: The ARN of the topic. DCNL :type label: string DCNL :param label: A unique identifier for the policy statement DCNL to be removed.'
def create_topic(self, topic): DCNL 'Create a new Topic. DCNL :type topic: string DCNL :param topic: The name of the new topic.'
def delete_topic(self, topic): DCNL 'Delete an existing topic DCNL :type topic: string DCNL :param topic: The ARN of the topic'
def publish(self, topic=None, message=None, subject=None, target_arn=None, message_structure=None, message_attributes=None): DCNL 'Sends a message to all of a topic\'s subscribed endpoints DCNL :type topic: string DCNL :param topic: The topic you want to publish to. DCNL :type message: string DCNL :param message: The message you want to send to the topic. DCNL Messages must be UTF-8 encoded strings and DCNL be at most 4KB in size. DCNL :type message_structure: string DCNL :param message_structure: Optional parameter. If left as ``None``, DCNL plain text will be sent. If set to ``json``, DCNL your message should be a JSON string that DCNL matches the structure described at DCNL http://docs.aws.amazon.com/sns/latest/dg/PublishTopic.html#sns-message-formatting-by-protocol DCNL :type message_attributes: dict DCNL :param message_attributes: Message attributes to set. Should be DCNL of the form: DCNL .. code-block:: python DCNL "name1": { DCNL "data_type": "Number", DCNL "string_value": "42" DCNL "name2": { DCNL "data_type": "String", DCNL "string_value": "Bob" DCNL :type subject: string DCNL :param subject: Optional parameter to be used as the "Subject" DCNL line of the email notifications. DCNL :type target_arn: string DCNL :param target_arn: Optional parameter for either TopicArn or DCNL EndpointArn, but not both.'
def subscribe(self, topic, protocol, endpoint): DCNL 'Subscribe to a Topic. DCNL :type topic: string DCNL :param topic: The ARN of the new topic. DCNL :type protocol: string DCNL :param protocol: The protocol used to communicate with DCNL the subscriber.  Current choices are: DCNL email|email-json|http|https|sqs|sms|application DCNL :type endpoint: string DCNL :param endpoint: The location of the endpoint for DCNL the subscriber. DCNL * For email, this would be a valid email address DCNL * For email-json, this would be a valid email address DCNL * For http, this would be a URL beginning with http DCNL * For https, this would be a URL beginning with https DCNL * For sqs, this would be the ARN of an SQS Queue DCNL * For sms, this would be a phone number of an DCNL SMS-enabled device DCNL * For application, the endpoint is the EndpointArn DCNL of a mobile app and device.'
def subscribe_sqs_queue(self, topic, queue): DCNL 'Subscribe an SQS queue to a topic. DCNL This is convenience method that handles most of the complexity involved DCNL in using an SQS queue as an endpoint for an SNS topic.  To achieve this DCNL the following operations are performed: DCNL * The correct ARN is constructed for the SQS queue and that ARN is DCNL then subscribed to the topic. DCNL * A JSON policy document is contructed that grants permission to DCNL the SNS topic to send messages to the SQS queue. DCNL * This JSON policy is then associated with the SQS queue using DCNL the queue\'s set_attribute method.  If the queue already has DCNL a policy associated with it, this process will add a Statement to DCNL that policy.  If no policy exists, a new policy will be created. DCNL :type topic: string DCNL :param topic: The ARN of the new topic. DCNL :type queue: A boto Queue object DCNL :param queue: The queue you wish to subscribe to the SNS Topic.'
def confirm_subscription(self, topic, token, authenticate_on_unsubscribe=False): DCNL 'Get properties of a Topic DCNL :type topic: string DCNL :param topic: The ARN of the new topic. DCNL :type token: string DCNL :param token: Short-lived token sent to and endpoint during DCNL the Subscribe operation. DCNL :type authenticate_on_unsubscribe: bool DCNL :param authenticate_on_unsubscribe: Optional parameter indicating DCNL that you wish to disable DCNL unauthenticated unsubscription DCNL of the subscription.'
def unsubscribe(self, subscription): DCNL 'Allows endpoint owner to delete subscription. DCNL Confirmation message will be delivered. DCNL :type subscription: string DCNL :param subscription: The ARN of the subscription to be deleted.'
def get_all_subscriptions(self, next_token=None): DCNL 'Get list of all subscriptions. DCNL :type next_token: string DCNL :param next_token: Token returned by the previous call to DCNL this method.'
def get_all_subscriptions_by_topic(self, topic, next_token=None): DCNL 'Get list of all subscriptions to a specific topic. DCNL :type topic: string DCNL :param topic: The ARN of the topic for which you wish to DCNL find subscriptions. DCNL :type next_token: string DCNL :param next_token: Token returned by the previous call to DCNL this method.'
def create_platform_application(self, name=None, platform=None, attributes=None): DCNL 'The `CreatePlatformApplication` action creates a platform DCNL application object for one of the supported push notification DCNL services, such as APNS and GCM, to which devices and mobile DCNL apps may register. You must specify PlatformPrincipal and DCNL PlatformCredential attributes when using the DCNL `CreatePlatformApplication` action. The PlatformPrincipal is DCNL received from the notification service. For APNS/APNS_SANDBOX, DCNL PlatformPrincipal is "SSL certificate". For GCM, DCNL PlatformPrincipal is not applicable. For ADM, DCNL PlatformPrincipal is "client id". The PlatformCredential is DCNL also received from the notification service. For DCNL APNS/APNS_SANDBOX, PlatformCredential is "private key". For DCNL GCM, PlatformCredential is "API key". For ADM, DCNL PlatformCredential is "client secret". The DCNL PlatformApplicationArn that is returned when using DCNL `CreatePlatformApplication` is then used as an attribute for DCNL the `CreatePlatformEndpoint` action. For more information, see DCNL `Using Amazon SNS Mobile Push Notifications`_. DCNL :type name: string DCNL :param name: Application names must be made up of only uppercase and DCNL lowercase ASCII letters, numbers, underscores, hyphens, and DCNL periods, and must be between 1 and 256 characters long. DCNL :type platform: string DCNL :param platform: The following platforms are supported: ADM (Amazon DCNL Device Messaging), APNS (Apple Push Notification Service), DCNL APNS_SANDBOX, and GCM (Google Cloud Messaging). DCNL :type attributes: map DCNL :param attributes: For a list of attributes, see DCNL `SetPlatformApplicationAttributes`_'
def set_platform_application_attributes(self, platform_application_arn=None, attributes=None): DCNL 'The `SetPlatformApplicationAttributes` action sets the DCNL attributes of the platform application object for the DCNL supported push notification services, such as APNS and GCM. DCNL For more information, see `Using Amazon SNS Mobile Push DCNL Notifications`_. DCNL :type platform_application_arn: string DCNL :param platform_application_arn: PlatformApplicationArn for DCNL SetPlatformApplicationAttributes action. DCNL :type attributes: map DCNL :param attributes: DCNL A map of the platform application attributes. Attributes in this map DCNL include the following: DCNL + `PlatformCredential` -- The credential received from the notification DCNL service. For APNS/APNS_SANDBOX, PlatformCredential is "private DCNL key". For GCM, PlatformCredential is "API key". For ADM, DCNL PlatformCredential is "client secret". DCNL + `PlatformPrincipal` -- The principal received from the notification DCNL service. For APNS/APNS_SANDBOX, PlatformPrincipal is "SSL DCNL certificate". For GCM, PlatformPrincipal is not applicable. For DCNL ADM, PlatformPrincipal is "client id". DCNL + `EventEndpointCreated` -- Topic ARN to which EndpointCreated event DCNL notifications should be sent. DCNL + `EventEndpointDeleted` -- Topic ARN to which EndpointDeleted event DCNL notifications should be sent. DCNL + `EventEndpointUpdated` -- Topic ARN to which EndpointUpdate event DCNL notifications should be sent. DCNL + `EventDeliveryFailure` -- Topic ARN to which DeliveryFailure event DCNL notifications should be sent upon Direct Publish delivery failure DCNL (permanent) to one of the application\'s endpoints.'
def get_platform_application_attributes(self, platform_application_arn=None): DCNL 'The `GetPlatformApplicationAttributes` action retrieves the DCNL attributes of the platform application object for the DCNL supported push notification services, such as APNS and GCM. DCNL For more information, see `Using Amazon SNS Mobile Push DCNL Notifications`_. DCNL :type platform_application_arn: string DCNL :param platform_application_arn: PlatformApplicationArn for DCNL GetPlatformApplicationAttributesInput.'
def list_platform_applications(self, next_token=None): DCNL 'The `ListPlatformApplications` action lists the platform DCNL application objects for the supported push notification DCNL services, such as APNS and GCM. The results for DCNL `ListPlatformApplications` are paginated and return a limited DCNL list of applications, up to 100. If additional records are DCNL available after the first page results, then a NextToken DCNL string will be returned. To receive the next page, you call DCNL `ListPlatformApplications` using the NextToken string received DCNL from the previous call. When there are no more records to DCNL return, NextToken will be null. For more information, see DCNL `Using Amazon SNS Mobile Push Notifications`_. DCNL :type next_token: string DCNL :param next_token: NextToken string is used when calling DCNL ListPlatformApplications action to retrieve additional records that DCNL are available after the first page results.'
def list_endpoints_by_platform_application(self, platform_application_arn=None, next_token=None): DCNL 'The `ListEndpointsByPlatformApplication` action lists the DCNL endpoints and endpoint attributes for devices in a supported DCNL push notification service, such as GCM and APNS. The results DCNL for `ListEndpointsByPlatformApplication` are paginated and DCNL return a limited list of endpoints, up to 100. If additional DCNL records are available after the first page results, then a DCNL NextToken string will be returned. To receive the next page, DCNL you call `ListEndpointsByPlatformApplication` again using the DCNL NextToken string received from the previous call. When there DCNL are no more records to return, NextToken will be null. For DCNL more information, see `Using Amazon SNS Mobile Push DCNL Notifications`_. DCNL :type platform_application_arn: string DCNL :param platform_application_arn: PlatformApplicationArn for DCNL ListEndpointsByPlatformApplicationInput action. DCNL :type next_token: string DCNL :param next_token: NextToken string is used when calling DCNL ListEndpointsByPlatformApplication action to retrieve additional DCNL records that are available after the first page results.'
def delete_platform_application(self, platform_application_arn=None): DCNL 'The `DeletePlatformApplication` action deletes a platform DCNL application object for one of the supported push notification DCNL services, such as APNS and GCM. For more information, see DCNL `Using Amazon SNS Mobile Push Notifications`_. DCNL :type platform_application_arn: string DCNL :param platform_application_arn: PlatformApplicationArn of platform DCNL application object to delete.'
def create_platform_endpoint(self, platform_application_arn=None, token=None, custom_user_data=None, attributes=None): DCNL 'The `CreatePlatformEndpoint` creates an endpoint for a device DCNL and mobile app on one of the supported push notification DCNL services, such as GCM and APNS. `CreatePlatformEndpoint` DCNL requires the PlatformApplicationArn that is returned from DCNL `CreatePlatformApplication`. The EndpointArn that is returned DCNL when using `CreatePlatformEndpoint` can then be used by the DCNL `Publish` action to send a message to a mobile app or by the DCNL `Subscribe` action for subscription to a topic. For more DCNL information, see `Using Amazon SNS Mobile Push DCNL Notifications`_. DCNL :type platform_application_arn: string DCNL :param platform_application_arn: PlatformApplicationArn returned from DCNL CreatePlatformApplication is used to create a an endpoint. DCNL :type token: string DCNL :param token: Unique identifier created by the notification service for DCNL an app on a device. The specific name for Token will vary, DCNL depending on which notification service is being used. For example, DCNL when using APNS as the notification service, you need the device DCNL token. Alternatively, when using GCM or ADM, the device token DCNL equivalent is called the registration ID. DCNL :type custom_user_data: string DCNL :param custom_user_data: Arbitrary user data to associate with the DCNL endpoint. SNS does not use this data. The data must be in UTF-8 DCNL format and less than 2KB. DCNL :type attributes: map DCNL :param attributes: For a list of attributes, see DCNL `SetEndpointAttributes`_.'
def delete_endpoint(self, endpoint_arn=None): DCNL 'The `DeleteEndpoint` action, which is idempotent, deletes the DCNL endpoint from SNS. For more information, see `Using Amazon SNS DCNL Mobile Push Notifications`_. DCNL :type endpoint_arn: string DCNL :param endpoint_arn: EndpointArn of endpoint to delete.'
def set_endpoint_attributes(self, endpoint_arn=None, attributes=None): DCNL 'The `SetEndpointAttributes` action sets the attributes for an DCNL endpoint for a device on one of the supported push DCNL notification services, such as GCM and APNS. For more DCNL information, see `Using Amazon SNS Mobile Push DCNL Notifications`_. DCNL :type endpoint_arn: string DCNL :param endpoint_arn: EndpointArn used for SetEndpointAttributes action. DCNL :type attributes: map DCNL :param attributes: DCNL A map of the endpoint attributes. Attributes in this map include the DCNL following: DCNL + `CustomUserData` -- arbitrary user data to associate with the DCNL endpoint. SNS does not use this data. The data must be in UTF-8 DCNL format and less than 2KB. DCNL + `Enabled` -- flag that enables/disables delivery to the endpoint. DCNL Message Processor will set this to false when a notification DCNL service indicates to SNS that the endpoint is invalid. Users can DCNL set it back to true, typically after updating Token. DCNL + `Token` -- device token, also referred to as a registration id, for DCNL an app and mobile device. This is returned from the notification DCNL service when an app and mobile device are registered with the DCNL notification service.'
def get_endpoint_attributes(self, endpoint_arn=None): DCNL 'The `GetEndpointAttributes` retrieves the endpoint attributes DCNL for a device on one of the supported push notification DCNL services, such as GCM and APNS. For more information, see DCNL `Using Amazon SNS Mobile Push Notifications`_. DCNL :type endpoint_arn: string DCNL :param endpoint_arn: EndpointArn for GetEndpointAttributes input.'
def __init__(self, layer2, response): DCNL ':type layer2: :class:`boto.dynamodb.layer2.Layer2` DCNL :param layer2: A `Layer2` api object. DCNL :type response: dict DCNL :param response: The output of DCNL `boto.dynamodb.layer1.Layer1.describe_table`.'
@classmethod DCNL def create_from_schema(cls, layer2, name, schema): DCNL 'Create a Table object. DCNL If you know the name and schema of your table, you can DCNL create a ``Table`` object without having to make any DCNL API calls (normally an API call is made to retrieve DCNL the schema of a table). DCNL Example usage:: DCNL table = Table.create_from_schema( DCNL boto.connect_dynamodb(), DCNL \'tablename\', DCNL Schema.create(hash_key=(\'keyname\', \'N\'))) DCNL :type layer2: :class:`boto.dynamodb.layer2.Layer2` DCNL :param layer2: A ``Layer2`` api object. DCNL :type name: str DCNL :param name: The name of the table. DCNL :type schema: :class:`boto.dynamodb.schema.Schema` DCNL :param schema: The schema associated with the table. DCNL :rtype: :class:`boto.dynamodb.table.Table` DCNL :return: A Table object representing the table.'
def update_from_response(self, response): DCNL 'Update the state of the Table object based on the response DCNL data received from Amazon DynamoDB.'
def refresh(self, wait_for_active=False, retry_seconds=5): DCNL 'Refresh all of the fields of the Table object by calling DCNL the underlying DescribeTable request. DCNL :type wait_for_active: bool DCNL :param wait_for_active: If True, this command will not return DCNL until the table status, as returned from Amazon DynamoDB, is DCNL \'ACTIVE\'. DCNL :type retry_seconds: int DCNL :param retry_seconds: If wait_for_active is True, this DCNL parameter controls the number of seconds of delay between DCNL calls to update_table in Amazon DynamoDB.  Default is 5 seconds.'
def update_throughput(self, read_units, write_units): DCNL 'Update the ProvisionedThroughput for the Amazon DynamoDB Table. DCNL :type read_units: int DCNL :param read_units: The new value for ReadCapacityUnits. DCNL :type write_units: int DCNL :param write_units: The new value for WriteCapacityUnits.'
def delete(self): DCNL 'Delete this table and all items in it.  After calling this DCNL the Table objects status attribute will be set to \'DELETING\'.'
def get_item(self, hash_key, range_key=None, attributes_to_get=None, consistent_read=False, item_class=Item): DCNL 'Retrieve an existing item from the table. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the requested item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key: int|long|float|str|unicode|Binary DCNL :param range_key: The optional RangeKey of the requested item. DCNL The type of the value must match the type defined in the DCNL schema for the table. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item`'
def has_item(self, hash_key, range_key=None, consistent_read=False): DCNL 'Checks the table to see if the Item with the specified ``hash_key`` DCNL exists. This may save a tiny bit of time/bandwidth over a DCNL straight :py:meth:`get_item` if you have no intention to touch DCNL the data that is returned, since this method specifically tells DCNL Amazon not to return anything but the Item\'s key. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the requested item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key: int|long|float|str|unicode|Binary DCNL :param range_key: The optional RangeKey of the requested item. DCNL The type of the value must match the type defined in the DCNL schema for the table. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :rtype: bool DCNL :returns: ``True`` if the Item exists, ``False`` if not.'
def new_item(self, hash_key=None, range_key=None, attrs=None, item_class=Item): DCNL 'Return an new, unsaved Item which can later be PUT to DCNL Amazon DynamoDB. DCNL This method has explicit (but optional) parameters for DCNL the hash_key and range_key values of the item.  You can use DCNL these explicit parameters when calling the method, such as:: DCNL >>> my_item = my_table.new_item(hash_key=\'a\', range_key=1, DCNL attrs={\'key1\': \'val1\', \'key2\': \'val2\'}) DCNL >>> my_item DCNL {u\'bar\': 1, u\'foo\': \'a\', \'key1\': \'val1\', \'key2\': \'val2\'} DCNL Or, if you prefer, you can simply put the hash_key and range_key DCNL in the attrs dictionary itself, like this:: DCNL >>> attrs = {\'foo\': \'a\', \'bar\': 1, \'key1\': \'val1\', \'key2\': \'val2\'} DCNL >>> my_item = my_table.new_item(attrs=attrs) DCNL >>> my_item DCNL {u\'bar\': 1, u\'foo\': \'a\', \'key1\': \'val1\', \'key2\': \'val2\'} DCNL The effect is the same. DCNL .. note: DCNL The explicit parameters take priority over the values in DCNL the attrs dict.  So, if you have a hash_key or range_key DCNL in the attrs dict and you also supply either or both using DCNL the explicit parameters, the values in the attrs will be DCNL ignored. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the new item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key: int|long|float|str|unicode|Binary DCNL :param range_key: The optional RangeKey of the new item. DCNL The type of the value must match the type defined in the DCNL schema for the table. DCNL :type attrs: dict DCNL :param attrs: A dictionary of key value pairs used to DCNL populate the new item. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item`'
def query(self, hash_key, *args, **kw): DCNL 'Perform a query on the table. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the requested item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key_condition: :class:`boto.dynamodb.condition.Condition` DCNL :param range_key_condition: A Condition object. DCNL Condition object can be one of the following types: DCNL EQ|LE|LT|GE|GT|BEGINS_WITH|BETWEEN DCNL The only condition which expects or will accept two DCNL values is \'BETWEEN\', otherwise a single value should DCNL be passed to the Condition constructor. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type request_limit: int DCNL :param request_limit: The maximum number of items to retrieve DCNL from Amazon DynamoDB on each request.  You may want to set DCNL a specific request_limit based on the provisioned throughput DCNL of your table.  The default behavior is to retrieve as many DCNL results as possible per request. DCNL :type max_results: int DCNL :param max_results: The maximum number of results that will DCNL be retrieved from Amazon DynamoDB in total.  For example, DCNL if you only wanted to see the first 100 results from the DCNL query, regardless of how many were actually available, you DCNL could set max_results to 100 and the generator returned DCNL from the query method will only yeild 100 results max. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :type scan_index_forward: bool DCNL :param scan_index_forward: Specified forward or backward DCNL traversal of the index.  Default is forward (True). DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query. DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Query operation, even if the DCNL operation has no matching items for the assigned filter. DCNL If count is True, the actual items are not returned and DCNL the count is accessible as the ``count`` attribute of DCNL the returned object. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item`'
def scan(self, *args, **kw): DCNL 'Scan through this table, this is a very long DCNL and expensive operation, and should be avoided if DCNL at all possible. DCNL :type scan_filter: A dict DCNL :param scan_filter: A dictionary where the key is the DCNL attribute name and the value is a DCNL :class:`boto.dynamodb.condition.Condition` object. DCNL Valid Condition objects include: DCNL * EQ - equal (1) DCNL * NE - not equal (1) DCNL * LE - less than or equal (1) DCNL * LT - less than (1) DCNL * GE - greater than or equal (1) DCNL * GT - greater than (1) DCNL * NOT_NULL - attribute exists (0, use None) DCNL * NULL - attribute does not exist (0, use None) DCNL * CONTAINS - substring or value in list (1) DCNL * NOT_CONTAINS - absence of substring or value in list (1) DCNL * BEGINS_WITH - substring prefix (1) DCNL * IN - exact match in list (N) DCNL * BETWEEN - >= first value, <= second value (2) DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type request_limit: int DCNL :param request_limit: The maximum number of items to retrieve DCNL from Amazon DynamoDB on each request.  You may want to set DCNL a specific request_limit based on the provisioned throughput DCNL of your table.  The default behavior is to retrieve as many DCNL results as possible per request. DCNL :type max_results: int DCNL :param max_results: The maximum number of results that will DCNL be retrieved from Amazon DynamoDB in total.  For example, DCNL if you only wanted to see the first 100 results from the DCNL query, regardless of how many were actually available, you DCNL could set max_results to 100 and the generator returned DCNL from the query method will only yeild 100 results max. DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Scan operation, even if the DCNL operation has no matching items for the assigned filter. DCNL If count is True, the actual items are not returned and DCNL the count is accessible as the ``count`` attribute of DCNL the returned object. DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item` DCNL :return: A TableGenerator (generator) object which will iterate DCNL over all results DCNL :rtype: :class:`boto.dynamodb.layer2.TableGenerator`'
def batch_get_item(self, keys, attributes_to_get=None): DCNL 'Return a set of attributes for a multiple items from a single table DCNL using their primary keys. This abstraction removes the 100 Items per DCNL batch limitations as well as the "UnprocessedKeys" logic. DCNL :type keys: list DCNL :param keys: A list of scalar or tuple values.  Each element in the DCNL list represents one Item to retrieve.  If the schema for the DCNL table has both a HashKey and a RangeKey, each element in the DCNL list should be a tuple consisting of (hash_key, range_key).  If DCNL the schema for the table contains only a HashKey, each element DCNL in the list should be a scalar value of the appropriate type DCNL for the table schema. NOTE: The maximum number of items that DCNL can be retrieved for a single operation is 100. Also, the DCNL number of items retrieved is constrained by a 1 MB size limit. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :return: A TableBatchGenerator (generator) object which will DCNL iterate over all results DCNL :rtype: :class:`boto.dynamodb.table.TableBatchGenerator`'
def add_attribute(self, attr_name, attr_value): DCNL 'Queue the addition of an attribute to an item in DynamoDB. DCNL This will eventually result in an UpdateItem request being issued DCNL with an update action of ADD when the save method is called. DCNL :type attr_name: str DCNL :param attr_name: Name of the attribute you want to alter. DCNL :type attr_value: int|long|float|set DCNL :param attr_value: Value which is to be added to the attribute.'
def delete_attribute(self, attr_name, attr_value=None): DCNL 'Queue the deletion of an attribute from an item in DynamoDB. DCNL This call will result in a UpdateItem request being issued DCNL with update action of DELETE when the save method is called. DCNL :type attr_name: str DCNL :param attr_name: Name of the attribute you want to alter. DCNL :type attr_value: set DCNL :param attr_value: A set of values to be removed from the attribute. DCNL This parameter is optional. If None, the whole attribute is DCNL removed from the item.'
def put_attribute(self, attr_name, attr_value): DCNL 'Queue the putting of an attribute to an item in DynamoDB. DCNL This call will result in an UpdateItem request being issued DCNL with the update action of PUT when the save method is called. DCNL :type attr_name: str DCNL :param attr_name: Name of the attribute you want to alter. DCNL :type attr_value: int|long|float|str|set DCNL :param attr_value: New value of the attribute.'
def save(self, expected_value=None, return_values=None): DCNL 'Commits pending updates to Amazon DynamoDB. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that DCNL you expect.  This dictionary should have name/value pairs DCNL where the name is the name of the attribute and the value is DCNL either the value you are expecting or False if you expect DCNL the attribute not to exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute name/value pairs DCNL before they were updated. Possible values are: None, \'ALL_OLD\', DCNL \'UPDATED_OLD\', \'ALL_NEW\' or \'UPDATED_NEW\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content of the old item DCNL is returned. If \'ALL_NEW\' is specified, then all the attributes of DCNL the new version of the item are returned. If \'UPDATED_NEW\' is DCNL specified, the new versions of only the updated attributes are DCNL returned.'
def delete(self, expected_value=None, return_values=None): DCNL 'Delete the item from DynamoDB. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that DCNL you expect.  This dictionary should have name/value pairs DCNL where the name is the name of the attribute and the value DCNL is either the value you are expecting or False if you expect DCNL the attribute not to exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def put(self, expected_value=None, return_values=None): DCNL 'Store a new item or completely replace an existing item DCNL in Amazon DynamoDB. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that DCNL you expect.  This dictionary should have name/value pairs DCNL where the name is the name of the attribute and the value DCNL is either the value you are expecting or False if you expect DCNL the attribute not to exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def __setitem__(self, key, value): DCNL 'Overrwrite the setter to instead update the _updates DCNL method so this can act like a normal dict'
def __delitem__(self, key): DCNL 'Remove this key from the items'
def make_request(self, action, body='', object_hook=None): DCNL ':raises: ``DynamoDBExpiredTokenError`` if the security token expires.'
def list_tables(self, limit=None, start_table=None): DCNL 'Returns a dictionary of results.  The dictionary contains DCNL a **TableNames** key whose value is a list of the table names. DCNL The dictionary could also contain a **LastEvaluatedTableName** DCNL key whose value would be the last table name returned if DCNL the complete list of table names was not returned.  This DCNL value would then be passed as the ``start_table`` parameter on DCNL a subsequent call to this method. DCNL :type limit: int DCNL :param limit: The maximum number of tables to return. DCNL :type start_table: str DCNL :param start_table: The name of the table that starts the DCNL list.  If you ran a previous list_tables and not DCNL all results were returned, the response dict would DCNL include a LastEvaluatedTableName attribute.  Use DCNL that value here to continue the listing.'
def describe_table(self, table_name): DCNL 'Returns information about the table including current DCNL state of the table, primary key schema and when the DCNL table was created. DCNL :type table_name: str DCNL :param table_name: The name of the table to describe.'
def create_table(self, table_name, schema, provisioned_throughput): DCNL 'Add a new table to your account.  The table name must be unique DCNL among those associated with the account issuing the request. DCNL This request triggers an asynchronous workflow to begin creating DCNL the table.  When the workflow is complete, the state of the DCNL table will be ACTIVE. DCNL :type table_name: str DCNL :param table_name: The name of the table to create. DCNL :type schema: dict DCNL :param schema: A Python version of the KeySchema data structure DCNL as defined by DynamoDB DCNL :type provisioned_throughput: dict DCNL :param provisioned_throughput: A Python version of the DCNL ProvisionedThroughput data structure defined by DCNL DynamoDB.'
def update_table(self, table_name, provisioned_throughput): DCNL 'Updates the provisioned throughput for a given table. DCNL :type table_name: str DCNL :param table_name: The name of the table to update. DCNL :type provisioned_throughput: dict DCNL :param provisioned_throughput: A Python version of the DCNL ProvisionedThroughput data structure defined by DCNL DynamoDB.'
def delete_table(self, table_name): DCNL 'Deletes the table and all of it\'s data.  After this request DCNL the table will be in the DELETING state until DynamoDB DCNL completes the delete operation. DCNL :type table_name: str DCNL :param table_name: The name of the table to delete.'
def get_item(self, table_name, key, attributes_to_get=None, consistent_read=False, object_hook=None): DCNL 'Return a set of attributes for an item that matches DCNL the supplied key. DCNL :type table_name: str DCNL :param table_name: The name of the table containing the item. DCNL :type key: dict DCNL :param key: A Python version of the Key data structure DCNL defined by DynamoDB. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued.'
def batch_get_item(self, request_items, object_hook=None): DCNL 'Return a set of attributes for a multiple items in DCNL multiple tables using their primary keys. DCNL :type request_items: dict DCNL :param request_items: A Python version of the RequestItems DCNL data structure defined by DynamoDB.'
def batch_write_item(self, request_items, object_hook=None): DCNL 'This operation enables you to put or delete several items DCNL across multiple tables in a single API call. DCNL :type request_items: dict DCNL :param request_items: A Python version of the RequestItems DCNL data structure defined by DynamoDB.'
def put_item(self, table_name, item, expected=None, return_values=None, object_hook=None): DCNL 'Create a new item or replace an old item with a new DCNL item (including all attributes).  If an item already DCNL exists in the specified table with the same primary DCNL key, the new item will completely replace the old item. DCNL You can perform a conditional put by specifying an DCNL expected rule. DCNL :type table_name: str DCNL :param table_name: The name of the table in which to put the item. DCNL :type item: dict DCNL :param item: A Python version of the Item data structure DCNL defined by DynamoDB. DCNL :type expected: dict DCNL :param expected: A Python version of the Expected DCNL data structure defined by DynamoDB. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def update_item(self, table_name, key, attribute_updates, expected=None, return_values=None, object_hook=None): DCNL 'Edits an existing item\'s attributes. You can perform a conditional DCNL update (insert a new attribute name-value pair if it doesn\'t exist, DCNL or replace an existing name-value pair if it has certain expected DCNL attribute values). DCNL :type table_name: str DCNL :param table_name: The name of the table. DCNL :type key: dict DCNL :param key: A Python version of the Key data structure DCNL defined by DynamoDB which identifies the item to be updated. DCNL :type attribute_updates: dict DCNL :param attribute_updates: A Python version of the AttributeUpdates DCNL data structure defined by DynamoDB. DCNL :type expected: dict DCNL :param expected: A Python version of the Expected DCNL data structure defined by DynamoDB. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def delete_item(self, table_name, key, expected=None, return_values=None, object_hook=None): DCNL 'Delete an item and all of it\'s attributes by primary key. DCNL You can perform a conditional delete by specifying an DCNL expected rule. DCNL :type table_name: str DCNL :param table_name: The name of the table containing the item. DCNL :type key: dict DCNL :param key: A Python version of the Key data structure DCNL defined by DynamoDB. DCNL :type expected: dict DCNL :param expected: A Python version of the Expected DCNL data structure defined by DynamoDB. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def query(self, table_name, hash_key_value, range_key_conditions=None, attributes_to_get=None, limit=None, consistent_read=False, scan_index_forward=True, exclusive_start_key=None, object_hook=None, count=False): DCNL 'Perform a query of DynamoDB.  This version is currently punting DCNL and expecting you to provide a full and correct JSON body DCNL which is passed as is to DynamoDB. DCNL :type table_name: str DCNL :param table_name: The name of the table to query. DCNL :type hash_key_value: dict DCNL :param key: A DynamoDB-style HashKeyValue. DCNL :type range_key_conditions: dict DCNL :param range_key_conditions: A Python version of the DCNL RangeKeyConditions data structure. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type limit: int DCNL :param limit: The maximum number of items to return. DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Query operation, even if the DCNL operation has no matching items for the assigned filter. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :type scan_index_forward: bool DCNL :param scan_index_forward: Specified forward or backward DCNL traversal of the index.  Default is forward (True). DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query.'
def scan(self, table_name, scan_filter=None, attributes_to_get=None, limit=None, exclusive_start_key=None, object_hook=None, count=False): DCNL 'Perform a scan of DynamoDB.  This version is currently punting DCNL and expecting you to provide a full and correct JSON body DCNL which is passed as is to DynamoDB. DCNL :type table_name: str DCNL :param table_name: The name of the table to scan. DCNL :type scan_filter: dict DCNL :param scan_filter: A Python version of the DCNL ScanFilter data structure. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type limit: int DCNL :param limit: The maximum number of items to evaluate. DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Scan operation, even if the DCNL operation has no matching items for the assigned filter. DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query.'
def to_dict(self): DCNL 'Convert the Batch object into the format required for Layer1.'
def to_dict(self): DCNL 'Convert the Batch object into the format required for Layer1.'
def add_batch(self, table, keys, attributes_to_get=None, consistent_read=False): DCNL 'Add a Batch to this BatchList. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object in which the items are contained. DCNL :type keys: list DCNL :param keys: A list of scalar or tuple values.  Each element in the DCNL list represents one Item to retrieve.  If the schema for the DCNL table has both a HashKey and a RangeKey, each element in the DCNL list should be a tuple consisting of (hash_key, range_key).  If DCNL the schema for the table contains only a HashKey, each element DCNL in the list should be a scalar value of the appropriate type DCNL for the table schema. NOTE: The maximum number of items that DCNL can be retrieved for a single operation is 100. Also, the DCNL number of items retrieved is constrained by a 1 MB size limit. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned.'
def resubmit(self): DCNL 'Resubmit the batch to get the next result set. The request object is DCNL rebuild from scratch meaning that all batch added between ``submit`` DCNL and ``resubmit`` will be lost. DCNL Note: This method is experimental and subject to changes in future releases'
def to_dict(self): DCNL 'Convert a BatchList object into format required for Layer1.'
def add_batch(self, table, puts=None, deletes=None): DCNL 'Add a BatchWrite to this BatchWriteList. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object in which the items are contained. DCNL :type puts: list of :class:`boto.dynamodb.item.Item` objects DCNL :param puts: A list of items that you want to write to DynamoDB. DCNL :type deletes: A list DCNL :param deletes: A list of scalar or tuple values.  Each element DCNL in the list represents one Item to delete.  If the schema DCNL for the table has both a HashKey and a RangeKey, each DCNL element in the list should be a tuple consisting of DCNL (hash_key, range_key).  If the schema for the table DCNL contains only a HashKey, each element in the list should DCNL be a scalar value of the appropriate type for the table DCNL schema.'
def to_dict(self): DCNL 'Convert a BatchWriteList object into format required for Layer1.'
@classmethod DCNL def create(cls, hash_key, range_key=None): DCNL 'Convenience method to create a schema object. DCNL Example usage:: DCNL schema = Schema.create(hash_key=(\'foo\', \'N\')) DCNL schema2 = Schema.create(hash_key=(\'foo\', \'N\'), DCNL range_key=(\'bar\', \'S\')) DCNL :type hash_key: tuple DCNL :param hash_key: A tuple of (hash_key_name, hash_key_type) DCNL :type range_key: tuple DCNL :param hash_key: A tuple of (range_key_name, range_key_type)'
def encode(self, attr): DCNL 'Encodes a python type to the format expected DCNL by DynamoDB.'
def decode(self, attr): DCNL 'Takes the format returned by DynamoDB and constructs DCNL the appropriate python type.'
@property DCNL def count(self): DCNL 'The total number of items retrieved thus far.  This value changes with DCNL iteration and even when issuing a call with count=True, it is necessary DCNL to complete the iteration to assert an accurate count value.'
@property DCNL def scanned_count(self): DCNL 'As above, but representing the total number of items scanned by DCNL DynamoDB, without regard to any filters.'
@property DCNL def consumed_units(self): DCNL 'Returns a float representing the ConsumedCapacityUnits accumulated.'
@property DCNL def response(self): DCNL 'The current response to the call from DynamoDB.'
def next_response(self): DCNL 'Issue a call and return the result.  You can invoke this method DCNL while iterating over the TableGenerator in order to skip to the DCNL next "page" of results.'
def use_decimals(self, use_boolean=False): DCNL 'Use the ``decimal.Decimal`` type for encoding/decoding numeric types. DCNL By default, ints/floats are used to represent numeric types DCNL (\'N\', \'NS\') received from DynamoDB.  Using the ``Decimal`` DCNL type is recommended to prevent loss of precision.'
def dynamize_attribute_updates(self, pending_updates): DCNL 'Convert a set of pending item updates into the structure DCNL required by Layer1.'
def dynamize_range_key_condition(self, range_key_condition): DCNL 'Convert a layer2 range_key_condition parameter into the DCNL structure required by Layer1.'
def dynamize_scan_filter(self, scan_filter): DCNL 'Convert a layer2 scan_filter parameter into the DCNL structure required by Layer1.'
def dynamize_expected_value(self, expected_value): DCNL 'Convert an expected_value parameter into the data structure DCNL required for Layer1.'
def dynamize_last_evaluated_key(self, last_evaluated_key): DCNL 'Convert a last_evaluated_key parameter into the data structure DCNL required for Layer1.'
def build_key_from_values(self, schema, hash_key, range_key=None): DCNL 'Build a Key structure to be used for accessing items DCNL in Amazon DynamoDB.  This method takes the supplied hash_key DCNL and optional range_key and validates them against the DCNL schema.  If there is a mismatch, a TypeError is raised. DCNL Otherwise, a Python dict version of a Amazon DynamoDB Key DCNL data structure is returned. DCNL :type hash_key: int|float|str|unicode|Binary DCNL :param hash_key: The hash key of the item you are looking for. DCNL The type of the hash key should match the type defined in DCNL the schema. DCNL :type range_key: int|float|str|unicode|Binary DCNL :param range_key: The range key of the item your are looking for. DCNL This should be supplied only if the schema requires a DCNL range key.  The type of the range key should match the DCNL type defined in the schema.'
def new_batch_list(self): DCNL 'Return a new, empty :class:`boto.dynamodb.batch.BatchList` DCNL object.'
def new_batch_write_list(self): DCNL 'Return a new, empty :class:`boto.dynamodb.batch.BatchWriteList` DCNL object.'
def list_tables(self, limit=None): DCNL 'Return a list of the names of all tables associated with the DCNL current account and region. DCNL :type limit: int DCNL :param limit: The maximum number of tables to return.'
def describe_table(self, name): DCNL 'Retrieve information about an existing table. DCNL :type name: str DCNL :param name: The name of the desired table.'
def table_from_schema(self, name, schema): DCNL 'Create a Table object from a schema. DCNL This method will create a Table object without DCNL making any API calls.  If you know the name and schema DCNL of the table, you can use this method instead of DCNL ``get_table``. DCNL Example usage:: DCNL table = layer2.table_from_schema( DCNL \'tablename\', DCNL Schema.create(hash_key=(\'foo\', \'N\'))) DCNL :type name: str DCNL :param name: The name of the table. DCNL :type schema: :class:`boto.dynamodb.schema.Schema` DCNL :param schema: The schema associated with the table. DCNL :rtype: :class:`boto.dynamodb.table.Table` DCNL :return: A Table object representing the table.'
def get_table(self, name): DCNL 'Retrieve the Table object for an existing table. DCNL :type name: str DCNL :param name: The name of the desired table. DCNL :rtype: :class:`boto.dynamodb.table.Table` DCNL :return: A Table object representing the table.'
def create_table(self, name, schema, read_units, write_units): DCNL 'Create a new Amazon DynamoDB table. DCNL :type name: str DCNL :param name: The name of the desired table. DCNL :type schema: :class:`boto.dynamodb.schema.Schema` DCNL :param schema: The Schema object that defines the schema used DCNL by this table. DCNL :type read_units: int DCNL :param read_units: The value for ReadCapacityUnits. DCNL :type write_units: int DCNL :param write_units: The value for WriteCapacityUnits. DCNL :rtype: :class:`boto.dynamodb.table.Table` DCNL :return: A Table object representing the new Amazon DynamoDB table.'
def update_throughput(self, table, read_units, write_units): DCNL 'Update the ProvisionedThroughput for the Amazon DynamoDB Table. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object whose throughput is being updated. DCNL :type read_units: int DCNL :param read_units: The new value for ReadCapacityUnits. DCNL :type write_units: int DCNL :param write_units: The new value for WriteCapacityUnits.'
def delete_table(self, table): DCNL 'Delete this table and all items in it.  After calling this DCNL the Table objects status attribute will be set to \'DELETING\'. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object that is being deleted.'
def create_schema(self, hash_key_name, hash_key_proto_value, range_key_name=None, range_key_proto_value=None): DCNL 'Create a Schema object used when creating a Table. DCNL :type hash_key_name: str DCNL :param hash_key_name: The name of the HashKey for the schema. DCNL :type hash_key_proto_value: int|long|float|str|unicode|Binary DCNL :param hash_key_proto_value: A sample or prototype of the type DCNL of value you want to use for the HashKey.  Alternatively, DCNL you can also just pass in the Python type (e.g. int, float, etc.). DCNL :type range_key_name: str DCNL :param range_key_name: The name of the RangeKey for the schema. DCNL This parameter is optional. DCNL :type range_key_proto_value: int|long|float|str|unicode|Binary DCNL :param range_key_proto_value: A sample or prototype of the type DCNL of value you want to use for the RangeKey.  Alternatively, DCNL you can also pass in the Python type (e.g. int, float, etc.) DCNL This parameter is optional.'
def get_item(self, table, hash_key, range_key=None, attributes_to_get=None, consistent_read=False, item_class=Item): DCNL 'Retrieve an existing item from the table. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object from which the item is retrieved. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the requested item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key: int|long|float|str|unicode|Binary DCNL :param range_key: The optional RangeKey of the requested item. DCNL The type of the value must match the type defined in the DCNL schema for the table. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item`'
def batch_get_item(self, batch_list): DCNL 'Return a set of attributes for a multiple items in DCNL multiple tables using their primary keys. DCNL :type batch_list: :class:`boto.dynamodb.batch.BatchList` DCNL :param batch_list: A BatchList object which consists of a DCNL list of :class:`boto.dynamoddb.batch.Batch` objects. DCNL Each Batch object contains the information about one DCNL batch of objects that you wish to retrieve in this DCNL request.'
def batch_write_item(self, batch_list): DCNL 'Performs multiple Puts and Deletes in one batch. DCNL :type batch_list: :class:`boto.dynamodb.batch.BatchWriteList` DCNL :param batch_list: A BatchWriteList object which consists of a DCNL list of :class:`boto.dynamoddb.batch.BatchWrite` objects. DCNL Each Batch object contains the information about one DCNL batch of objects that you wish to put or delete.'
def put_item(self, item, expected_value=None, return_values=None): DCNL 'Store a new item or completely replace an existing item DCNL in Amazon DynamoDB. DCNL :type item: :class:`boto.dynamodb.item.Item` DCNL :param item: The Item to write to Amazon DynamoDB. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that you expect. DCNL This dictionary should have name/value pairs where the name DCNL is the name of the attribute and the value is either the value DCNL you are expecting or False if you expect the attribute not to DCNL exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def update_item(self, item, expected_value=None, return_values=None): DCNL 'Commit pending item updates to Amazon DynamoDB. DCNL :type item: :class:`boto.dynamodb.item.Item` DCNL :param item: The Item to update in Amazon DynamoDB.  It is expected DCNL that you would have called the add_attribute, put_attribute DCNL and/or delete_attribute methods on this Item prior to calling DCNL this method.  Those queued changes are what will be updated. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that you DCNL expect.  This dictionary should have name/value pairs where the DCNL name is the name of the attribute and the value is either the DCNL value you are expecting or False if you expect the attribute DCNL not to exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute name/value pairs DCNL before they were updated. Possible values are: None, \'ALL_OLD\', DCNL \'UPDATED_OLD\', \'ALL_NEW\' or \'UPDATED_NEW\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content of the old item DCNL is returned. If \'ALL_NEW\' is specified, then all the attributes of DCNL the new version of the item are returned. If \'UPDATED_NEW\' is DCNL specified, the new versions of only the updated attributes are DCNL returned.'
def delete_item(self, item, expected_value=None, return_values=None): DCNL 'Delete the item from Amazon DynamoDB. DCNL :type item: :class:`boto.dynamodb.item.Item` DCNL :param item: The Item to delete from Amazon DynamoDB. DCNL :type expected_value: dict DCNL :param expected_value: A dictionary of name/value pairs that you expect. DCNL This dictionary should have name/value pairs where the name DCNL is the name of the attribute and the value is either the value DCNL you are expecting or False if you expect the attribute not to DCNL exist. DCNL :type return_values: str DCNL :param return_values: Controls the return of attribute DCNL name-value pairs before then were changed.  Possible DCNL values are: None or \'ALL_OLD\'. If \'ALL_OLD\' is DCNL specified and the item is overwritten, the content DCNL of the old item is returned.'
def query(self, table, hash_key, range_key_condition=None, attributes_to_get=None, request_limit=None, max_results=None, consistent_read=False, scan_index_forward=True, exclusive_start_key=None, item_class=Item, count=False): DCNL 'Perform a query on the table. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object that is being queried. DCNL :type hash_key: int|long|float|str|unicode|Binary DCNL :param hash_key: The HashKey of the requested item.  The DCNL type of the value must match the type defined in the DCNL schema for the table. DCNL :type range_key_condition: :class:`boto.dynamodb.condition.Condition` DCNL :param range_key_condition: A Condition object. DCNL Condition object can be one of the following types: DCNL EQ|LE|LT|GE|GT|BEGINS_WITH|BETWEEN DCNL The only condition which expects or will accept two DCNL values is \'BETWEEN\', otherwise a single value should DCNL be passed to the Condition constructor. DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type request_limit: int DCNL :param request_limit: The maximum number of items to retrieve DCNL from Amazon DynamoDB on each request.  You may want to set DCNL a specific request_limit based on the provisioned throughput DCNL of your table.  The default behavior is to retrieve as many DCNL results as possible per request. DCNL :type max_results: int DCNL :param max_results: The maximum number of results that will DCNL be retrieved from Amazon DynamoDB in total.  For example, DCNL if you only wanted to see the first 100 results from the DCNL query, regardless of how many were actually available, you DCNL could set max_results to 100 and the generator returned DCNL from the query method will only yeild 100 results max. DCNL :type consistent_read: bool DCNL :param consistent_read: If True, a consistent read DCNL request is issued.  Otherwise, an eventually consistent DCNL request is issued. DCNL :type scan_index_forward: bool DCNL :param scan_index_forward: Specified forward or backward DCNL traversal of the index.  Default is forward (True). DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Query operation, even if the DCNL operation has no matching items for the assigned filter. DCNL If count is True, the actual items are not returned and DCNL the count is accessible as the ``count`` attribute of DCNL the returned object. DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item` DCNL :rtype: :class:`boto.dynamodb.layer2.TableGenerator`'
def scan(self, table, scan_filter=None, attributes_to_get=None, request_limit=None, max_results=None, exclusive_start_key=None, item_class=Item, count=False): DCNL 'Perform a scan of DynamoDB. DCNL :type table: :class:`boto.dynamodb.table.Table` DCNL :param table: The Table object that is being scanned. DCNL :type scan_filter: A dict DCNL :param scan_filter: A dictionary where the key is the DCNL attribute name and the value is a DCNL :class:`boto.dynamodb.condition.Condition` object. DCNL Valid Condition objects include: DCNL * EQ - equal (1) DCNL * NE - not equal (1) DCNL * LE - less than or equal (1) DCNL * LT - less than (1) DCNL * GE - greater than or equal (1) DCNL * GT - greater than (1) DCNL * NOT_NULL - attribute exists (0, use None) DCNL * NULL - attribute does not exist (0, use None) DCNL * CONTAINS - substring or value in list (1) DCNL * NOT_CONTAINS - absence of substring or value in list (1) DCNL * BEGINS_WITH - substring prefix (1) DCNL * IN - exact match in list (N) DCNL * BETWEEN - >= first value, <= second value (2) DCNL :type attributes_to_get: list DCNL :param attributes_to_get: A list of attribute names. DCNL If supplied, only the specified attribute names will DCNL be returned.  Otherwise, all attributes will be returned. DCNL :type request_limit: int DCNL :param request_limit: The maximum number of items to retrieve DCNL from Amazon DynamoDB on each request.  You may want to set DCNL a specific request_limit based on the provisioned throughput DCNL of your table.  The default behavior is to retrieve as many DCNL results as possible per request. DCNL :type max_results: int DCNL :param max_results: The maximum number of results that will DCNL be retrieved from Amazon DynamoDB in total.  For example, DCNL if you only wanted to see the first 100 results from the DCNL query, regardless of how many were actually available, you DCNL could set max_results to 100 and the generator returned DCNL from the query method will only yeild 100 results max. DCNL :type count: bool DCNL :param count: If True, Amazon DynamoDB returns a total DCNL number of items for the Scan operation, even if the DCNL operation has no matching items for the assigned filter. DCNL If count is True, the actual items are not returned and DCNL the count is accessible as the ``count`` attribute of DCNL the returned object. DCNL :type exclusive_start_key: list or tuple DCNL :param exclusive_start_key: Primary key of the item from DCNL which to continue an earlier query.  This would be DCNL provided as the LastEvaluatedKey in that query. DCNL :type item_class: Class DCNL :param item_class: Allows you to override the class used DCNL to generate the items. This should be a subclass of DCNL :class:`boto.dynamodb.item.Item` DCNL :rtype: :class:`boto.dynamodb.layer2.TableGenerator`'
def is_package(self, fullname): DCNL 'Return true, if the named module is a package. DCNL We need this method to get correct spec objects with DCNL Python 3.4 (see PEP451)'
def get_code(self, fullname): DCNL 'Return None DCNL Required, if is_package is implemented'
def construct_endpoint(self, service_name, region_name=None): DCNL 'Resolves an endpoint for a service and region combination. DCNL :type service_name: string DCNL :param service_name: Name of the service to resolve an endpoint for DCNL (e.g., s3) DCNL :type region_name: string DCNL :param region_name: Region/endpoint name to resolve (e.g., us-east-1) DCNL if no region is provided, the first found partition-wide endpoint DCNL will be used if available. DCNL :rtype: dict DCNL :return: Returns a dict containing the following keys: DCNL - partition: (string, required) Resolved partition name DCNL - endpointName: (string, required) Resolved endpoint name DCNL - hostname: (string, required) Hostname to use for this endpoint DCNL - sslCommonName: (string) sslCommonName to use for this endpoint. DCNL - credentialScope: (dict) Signature version 4 credential scope DCNL - region: (string) region name override when signing. DCNL - service: (string) service name override when signing. DCNL - signatureVersions: (list<string>) A list of possible signature DCNL versions, including s3, v4, v2, and s3v4 DCNL - protocols: (list<string>) A list of supported protocols DCNL (e.g., http, https) DCNL - ...: Other keys may be included as well based on the metadata'
def get_available_partitions(self): DCNL 'Lists the partitions available to the endpoint resolver. DCNL :return: Returns a list of partition names (e.g., ["aws", "aws-cn"]).'
def get_available_endpoints(self, service_name, partition_name='aws', allow_non_regional=False): DCNL 'Lists the endpoint names of a particular partition. DCNL :type service_name: string DCNL :param service_name: Name of a service to list endpoint for (e.g., s3) DCNL :type partition_name: string DCNL :param partition_name: Name of the partition to limit endpoints to. DCNL (e.g., aws for the public AWS endpoints, aws-cn for AWS China DCNL endpoints, aws-us-gov for AWS GovCloud (US) Endpoints, etc. DCNL :type allow_non_regional: bool DCNL :param allow_non_regional: Set to True to include endpoints that are DCNL not regional endpoints (e.g., s3-external-1, DCNL fips-us-gov-west-1, etc). DCNL :return: Returns a list of endpoint names (e.g., ["us-east-1"]).'
def __init__(self, endpoint_data): DCNL ':param endpoint_data: A dict of partition data.'
def __init__(self, host, config, provider): DCNL 'Constructs the handlers. DCNL :type host: string DCNL :param host: The host to which the request is being sent. DCNL :type config: boto.pyami.Config DCNL :param config: Boto configuration. DCNL :type provider: boto.provider.Provider DCNL :param provider: Provider details. DCNL Raises: DCNL NotReadyToAuthenticate: if this handler is not willing to DCNL authenticate for the given provider and config.'
def add_auth(self, http_request): DCNL 'Invoked to add authentication details to request. DCNL :type http_request: boto.connection.HTTPRequest DCNL :param http_request: HTTP request that needs to be authenticated.'
def setup_class(cls): DCNL 'Setup this class'
def teardown_class(cls): DCNL 'Remove our objects'
def test_find(self): DCNL 'Test using the "Find" method'
def test_like_filter(self): DCNL 'Test a "like" filter'
def test_equals_filter(self): DCNL 'Test an "=" and "!=" filter'
def test_or_filter(self): DCNL 'Test a filter function as an "or"'
def test_and_filter(self): DCNL 'Test Multiple filters which are an "and"'
def test_none_filter(self): DCNL 'Test filtering for a value that\'s not set'
def test_greater_filter(self): DCNL 'Test filtering Using >, >='
def test_less_filter(self): DCNL 'Test filtering Using <, <='
def test_query_on_list(self): DCNL 'Test querying on a list'
def test_like(self): DCNL 'Test with a "like" expression'
def setup_class(cls): DCNL 'Setup this class'
def teardown_class(cls): DCNL 'Remove our objects'
def test_list_order(self): DCNL 'Testing the order of lists'
def test_old_compat(self): DCNL 'Testing to make sure the old method of encoding lists will still return results'
def test_query_equals(self): DCNL 'We noticed a slight problem with querying, since the query uses the same encoder, DCNL it was asserting that the value was at the same position in the list, not just "in" the list'
def test_query_not_equals(self): DCNL 'Test a not equal filter'
def setup_class(cls): DCNL 'Setup this class'
def teardown_class(cls): DCNL 'Remove our sequences'
def test_sequence_generator_no_rollover(self): DCNL 'Test the sequence generator without rollover'
def test_sequence_generator_with_rollover(self): DCNL 'Test the sequence generator with rollover'
def test_sequence_simple_int(self): DCNL 'Test a simple counter sequence'
def test_fib(self): DCNL 'Test the fibonacci sequence generator'
def test_sequence_fib(self): DCNL 'Test the fibonacci sequence'
def test_sequence_string(self): DCNL 'Test the String incrementation sequence'
def set_etag(self): DCNL 'Set etag attribute by generating hex MD5 checksum on current DCNL contents of mock key.'
def compute_md5(self, fp): DCNL ':type fp: file DCNL :param fp: File pointer to the file to MD5 hash.  The file pointer DCNL will be reset to the beginning of the file before the DCNL method returns. DCNL :rtype: tuple DCNL :return: A tuple containing the hex digest version of the MD5 hash DCNL as the first element and the base64 encoded version of the DCNL plain digest as the second element.'
def __repr__(self): DCNL 'Returns string representation of URI.'
def test_tagging_from_objects(self): DCNL 'Create tags from python objects rather than raw xml.'
def testSetAclXml(self): DCNL 'Ensures that calls to the set_xml_acl functions succeed.'
def test_non_resumable_upload(self): DCNL 'Tests that non-resumable uploads work'
def test_upload_without_persistent_tracker(self): DCNL 'Tests a single resumable upload, with no tracker URI persistence'
def test_failed_upload_with_persistent_tracker(self): DCNL 'Tests that failed resumable upload leaves a correct tracker URI file'
def test_retryable_exception_recovery(self): DCNL 'Tests handling of a retryable exception'
def test_broken_pipe_recovery(self): DCNL 'Tests handling of a Broken Pipe (which interacts with an httplib bug)'
def test_non_retryable_exception_handling(self): DCNL 'Tests a resumable upload that fails with a non-retryable exception'
def test_failed_and_restarted_upload_with_persistent_tracker(self): DCNL 'Tests resumable upload that fails once and then completes, with tracker DCNL file'
def test_multiple_in_process_failures_then_succeed(self): DCNL 'Tests resumable upload that fails twice in one process, then completes'
def test_multiple_in_process_failures_then_succeed_with_tracker_file(self): DCNL 'Tests resumable upload that fails completely in one process, DCNL then when restarted completes, using a tracker file'
def test_upload_with_inital_partial_upload_before_failure(self): DCNL 'Tests resumable upload that successfully uploads some content DCNL before it fails, then restarts and completes'
def test_empty_file_upload(self): DCNL 'Tests uploading an empty file (exercises boundary conditions).'
def test_upload_retains_metadata(self): DCNL 'Tests that resumable upload correctly sets passed metadata'
def test_upload_with_file_size_change_between_starts(self): DCNL 'Tests resumable upload on a file that changes sizes between initial DCNL upload start and restart'
def test_upload_with_file_size_change_during_upload(self): DCNL 'Tests resumable upload on a file that changes sizes while upload DCNL in progress'
def test_upload_with_file_content_change_during_upload(self): DCNL 'Tests resumable upload on a file that changes one byte of content DCNL (so, size stays the same) while upload in progress.'
def test_upload_with_content_length_header_set(self): DCNL 'Tests resumable upload on a file when the user supplies a DCNL Content-Length header. This is used by gsutil, for example, DCNL to set the content length when gzipping a file.'
def test_upload_with_syntactically_invalid_tracker_uri(self): DCNL 'Tests resumable upload with a syntactically invalid tracker URI'
def test_upload_with_invalid_upload_id_in_tracker_file(self): DCNL 'Tests resumable upload with invalid upload ID'
def test_upload_with_unwritable_tracker_file(self): DCNL 'Tests resumable upload with an unwritable tracker file'
def _GetConnection(self): DCNL 'Returns the GSConnection object used to connect to GCS.'
def _MakeTempName(self): DCNL 'Creates and returns a temporary name for testing that is likely to be DCNL unique.'
def _MakeBucketName(self): DCNL 'Creates and returns a temporary bucket name for testing that is DCNL likely to be unique.'
def _MakeBucket(self): DCNL 'Creates and returns temporary bucket for testing. After the test, the DCNL contents of the bucket and the bucket itself will be deleted.'
def _MakeKey(self, data='', bucket=None, set_contents=True): DCNL 'Creates and returns a Key with provided data. If no bucket is given, DCNL a temporary bucket is created.'
def _MakeVersionedBucket(self): DCNL 'Creates and returns temporary versioned bucket for testing. After the DCNL test, the contents of the bucket and the bucket itself will be DCNL deleted.'
def _MakeTempDir(self): DCNL 'Creates and returns a temporary directory on disk. After the test, DCNL the contents of the directory and the directory itself will be DCNL deleted.'
def call(self, total_bytes_transferred, unused_total_size): DCNL 'To use this test harness, pass the \'call\' method of the instantiated DCNL object as the cb param to the set_contents_from_file() or DCNL get_contents_to_file() call.'
def test_non_resumable_download(self): DCNL 'Tests that non-resumable downloads work'
def test_download_without_persistent_tracker(self): DCNL 'Tests a single resumable download, with no tracker persistence'
def test_failed_download_with_persistent_tracker(self): DCNL 'Tests that failed resumable download leaves a correct tracker file'
def test_retryable_exception_recovery(self): DCNL 'Tests handling of a retryable exception'
def test_broken_pipe_recovery(self): DCNL 'Tests handling of a Broken Pipe (which interacts with an httplib bug)'
def test_non_retryable_exception_handling(self): DCNL 'Tests resumable download that fails with a non-retryable exception'
def test_failed_and_restarted_download_with_persistent_tracker(self): DCNL 'Tests resumable download that fails once and then completes, DCNL with tracker file'
def test_multiple_in_process_failures_then_succeed(self): DCNL 'Tests resumable download that fails twice in one process, then completes'
def test_multiple_in_process_failures_then_succeed_with_tracker_file(self): DCNL 'Tests resumable download that fails completely in one process, DCNL then when restarted completes, using a tracker file'
def test_download_with_inital_partial_download_before_failure(self): DCNL 'Tests resumable download that successfully downloads some content DCNL before it fails, then restarts and completes'
def test_zero_length_object_download(self): DCNL 'Tests downloading a zero-length object (exercises boundary conditions).'
def test_download_with_invalid_tracker_etag(self): DCNL 'Tests resumable download with a tracker file containing an invalid etag'
def test_download_with_inconsistent_etag_in_tracker(self): DCNL 'Tests resumable download with an inconsistent etag in tracker file'
def test_download_with_unwritable_tracker_file(self): DCNL 'Tests resumable download with an unwritable tracker file'
def test_read_write(self): DCNL 'Tests basic read/write to keys.'
def test_get_all_keys(self): DCNL 'Tests get_all_keys.'
def test_bucket_lookup(self): DCNL 'Test the bucket lookup method.'
def test_metadata(self): DCNL 'Test key metadata operations.'
def test_list_iterator(self): DCNL 'Test list and iterator.'
def test_acl(self): DCNL 'Test bucket and key ACLs.'
def test_logging(self): DCNL 'Test set/get raw logging subresource.'
def test_copy_key(self): DCNL 'Test copying a key from one bucket to another.'
def test_default_object_acls(self): DCNL 'Test default object acls.'
def test_default_object_acls_storage_uri(self): DCNL 'Test default object acls using storage_uri.'
def test_cors_xml_bucket(self): DCNL 'Test setting and getting of CORS XML documents on Bucket.'
def test_cors_xml_storage_uri(self): DCNL 'Test setting and getting of CORS XML documents with storage_uri.'
def test_lifecycle_config_bucket(self): DCNL 'Test setting and getting of lifecycle config on Bucket.'
def test_lifecycle_config_storage_uri(self): DCNL 'Test setting and getting of lifecycle config with storage_uri.'
def run_decider(self): DCNL 'run one iteration of a simple decision engine'
def run_worker(self): DCNL 'run one iteration of a simple worker engine'
def sample_service_call(self, conn): DCNL 'Subclasses should override this method to do a service call that will DCNL always succeed (like fetch a list, even if it\'s empty).'
def setUp(self): DCNL 'Creates a named load balancer that can be safely DCNL deleted at the end of each test'
def tearDown(self): DCNL 'Deletes the test load balancer after every test. DCNL It does not delete EVERY load balancer in your account'
def post_terminate_cleanup(self): DCNL 'Helper to run clean up tasks after instances are removed.'
def terminate_instances(self): DCNL 'Helper to remove all instances and kick off additional cleanup DCNL once they are terminated.'
def test_create_health_check_invalid_request_interval(self): DCNL 'Test that health checks cannot be created with an invalid DCNL \'request_interval\'.'
def test_create_health_check_invalid_failure_threshold(self): DCNL 'Test that health checks cannot be created with an invalid DCNL \'failure_threshold\'.'
def test_lookup_hash(self): DCNL 'Tests the "lookup" function with just a hash key'
def test_lookup_hash_and_range(self): DCNL 'Test the "lookup" function with a hash and range key'
def assert_request_parameters(self, params, ignore_params_values=None): DCNL 'Verify the actual parameters sent to the service API.'
def test_cloudsearch_results_meta(self): DCNL 'Check returned metadata is parsed correctly'
def test_cloudsearch_results_info(self): DCNL 'Check num_pages_needed is calculated correctly'
def test_cloudsearch_results_matched(self): DCNL 'Check that information objects are passed back through the API DCNL correctly.'
def test_cloudsearch_results_hits(self): DCNL 'Check that documents are parsed properly from AWS'
def test_cloudsearch_results_iterator(self): DCNL 'Check the results iterator'
def test_cloudsearch_results_internal_consistancy(self): DCNL 'Check the documents length matches the iterator details'
def test_cloudsearch_search_nextpage(self): DCNL 'Check next page query is correct'
def test_cloudsearch_connect_result_endpoints(self): DCNL 'Check that endpoints & ARNs are correctly returned from AWS'
def test_cloudsearch_connect_result_statuses(self): DCNL 'Check that domain statuses are correctly returned from AWS'
def test_cloudsearch_connect_result_details(self): DCNL 'Check that the domain information is correctly returned from AWS'
def test_cloudsearch_deletion(self): DCNL 'Check that the correct arguments are sent to AWS when creating a DCNL cloudsearch connection.'
def test_cloudsearch_index_documents(self): DCNL 'Check that the correct arguments are sent to AWS when indexing a DCNL domain.'
def test_cloudsearch_index_documents_resp(self): DCNL 'Check that the AWS response is being parsed correctly when indexing a DCNL domain.'
def test_cloudsearch_add_basics(self): DCNL 'Check that a simple add document actually sends an add document request DCNL to AWS.'
def test_cloudsearch_add_single_basic(self): DCNL 'Check that a simple add document sends correct document metadata to DCNL AWS.'
def test_cloudsearch_add_single_fields(self): DCNL 'Check that a simple add document sends the actual document to AWS.'
def test_cloudsearch_add_single_result(self): DCNL 'Check that the reply from adding a single document is correctly parsed.'
def test_cloudsearch_add_basics(self): DCNL 'Check that multiple documents are added correctly to AWS'
def test_cloudsearch_add_results(self): DCNL 'Check that the result from adding multiple documents is parsed DCNL correctly.'
def test_cloudsearch_delete(self): DCNL 'Test that the request for a single document deletion is done properly.'
def test_cloudsearch_delete_results(self): DCNL 'Check that the result of a single document deletion is parsed properly.'
def _setup_mock(self): DCNL 'Sets up a mock elb request. DCNL Returns: response, elb connection and LoadBalancer'
def _verify_attributes(self, attributes, attr_tests): DCNL 'Verifies an LbAttributes object.'
def test_get_all_lb_attributes(self): DCNL 'Tests getting the LbAttributes from the elb.connection.'
def test_get_lb_attribute(self): DCNL 'Tests getting a single attribute from elb.connection.'
def test_modify_lb_attribute(self): DCNL 'Tests setting the attributes from elb.connection.'
def test_lb_get_attributes(self): DCNL 'Tests the LbAttributes from the ELB object.'
def test_lb_is_cross_zone_load_balancing(self): DCNL 'Tests checking is_cross_zone_load_balancing.'
def test_lb_enable_cross_zone_load_balancing(self): DCNL 'Tests enabling cross zone balancing from LoadBalancer.'
def test_lb_disable_cross_zone_load_balancing(self): DCNL 'Tests disabling cross zone balancing from LoadBalancer.'
def test_lb_get_connection_settings(self): DCNL 'Tests checking connectionSettings attribute'
def _get_snapshots(self): DCNL 'Generate a list of fake snapshots with names and dates.'
def test_trim_defaults(self): DCNL 'Test trimming snapshots with the default arguments, which should DCNL keep all monthly backups forever. The result of this test should DCNL be that nothing is deleted.'
def test_trim_months(self): DCNL 'Test trimming monthly snapshots and ensure that older months DCNL get deleted properly. The result of this test should be that DCNL the two oldest snapshots get deleted.'
def test_none_token(self): DCNL 'Ensures that if the token is set to None, nothing is serialized.'
def test_binary_input(self): DCNL 'This test ensures that binary is base64 encoded when it is sent to DCNL the service.'
def test_non_binary_input_for_blobs_fails(self): DCNL 'This test ensures that only binary is used for blob type parameters.'
def test_binary_ouput(self): DCNL 'This test ensures that the output is base64 decoded before DCNL it is returned to the user.'
def test_multi_commands(self): DCNL 'Check connection re-use'
def test_connection_close(self): DCNL 'Check connection re-use after close header is received'
def test_required_launch_params(self): DCNL 'Make sure only the AWS required params are required by boto'
def test_wildcard_escape(self): DCNL 'Test that wildcards are retained as literals DCNL See: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects-paths'
def test_manual_pagination(self, num_invals=30, max_items=4): DCNL 'Test that paginating manually works properly'
def test_auto_pagination(self, num_invals=1024): DCNL 'Test that auto-pagination works properly'
def test_encode_custom_policy_1(self): DCNL 'Test base64 encoding custom policy 1 from Amazon\'s documentation.'
def test_encode_custom_policy_2(self): DCNL 'Test base64 encoding custom policy 2 from Amazon\'s documentation.'
def test_sign_canned_policy(self): DCNL 'Test signing the canned policy from amazon\'s cloudfront documentation.'
def test_sign_canned_policy_pk_file(self): DCNL 'Test signing the canned policy from amazon\'s cloudfront documentation DCNL with a file object.'
def test_sign_canned_policy_pk_file_name(self): DCNL 'Test signing the canned policy from amazon\'s cloudfront documentation DCNL with a file name.'
def test_sign_canned_policy_pk_file_like(self): DCNL 'Test signing the canned policy from amazon\'s cloudfront documentation DCNL with a file-like object (not a subclass of \'file\' type)'
def test_sign_canned_policy_unicode(self): DCNL 'Test signing the canned policy from amazon\'s cloudfront documentation.'
def test_sign_custom_policy_1(self): DCNL 'Test signing custom policy 1 from amazon\'s cloudfront documentation.'
def test_sign_custom_policy_2(self): DCNL 'Test signing custom policy 2 from amazon\'s cloudfront documentation.'
def test_create_canned_policy(self): DCNL 'Test that a canned policy is generated correctly.'
def test_custom_policy_expires_and_policy_url(self): DCNL 'Test that a custom policy can be created with an expire time and an DCNL arbitrary URL.'
def test_custom_policy_valid_after(self): DCNL 'Test that a custom policy can be created with a valid-after time and DCNL an arbitrary URL.'
def test_custom_policy_ip_address(self): DCNL 'Test that a custom policy can be created with an IP address and DCNL an arbitrary URL.'
def test_custom_policy_ip_range(self): DCNL 'Test that a custom policy can be created with an IP address and DCNL an arbitrary URL.'
def test_custom_policy_all(self): DCNL 'Test that a custom policy can be created with an IP address and DCNL an arbitrary URL.'
def test_params_canned_policy(self): DCNL 'Test the correct params are generated for a canned policy.'
def test_canned_policy(self): DCNL 'Generate signed url from the Example Canned Policy in Amazon\'s DCNL documentation.'
def test_bidprice_missing_spot(self): DCNL 'Test InstanceGroup init raises ValueError when market==spot and DCNL bidprice is not specified.'
def test_bidprice_missing_ondemand(self): DCNL 'Test InstanceGroup init accepts a missing bidprice arg, when market is DCNL ON_DEMAND.'
def test_bidprice_Decimal(self): DCNL 'Test InstanceGroup init works with bidprice type = Decimal.'
def test_bidprice_float(self): DCNL 'Test InstanceGroup init works with bidprice type = float.'
def test_bidprice_string(self): DCNL 'Test InstanceGroup init works with bidprice type = string.'
def test_cloudsearch_results_meta(self): DCNL 'Check returned metadata is parsed correctly'
def test_cloudsearch_results_info(self): DCNL 'Check num_pages_needed is calculated correctly'
def test_cloudsearch_results_matched(self): DCNL 'Check that information objects are passed back through the API DCNL correctly.'
def test_cloudsearch_results_hits(self): DCNL 'Check that documents are parsed properly from AWS'
def test_cloudsearch_results_iterator(self): DCNL 'Check the results iterator'
def test_cloudsearch_results_internal_consistancy(self): DCNL 'Check the documents length matches the iterator details'
def test_cloudsearch_search_nextpage(self): DCNL 'Check next page query is correct'
def test_cloudsearch_connect_result_endpoints(self): DCNL 'Check that endpoints & ARNs are correctly returned from AWS'
def test_cloudsearch_connect_result_statuses(self): DCNL 'Check that domain statuses are correctly returned from AWS'
def test_cloudsearch_connect_result_details(self): DCNL 'Check that the domain information is correctly returned from AWS'
def test_cloudsearch_deletion(self): DCNL 'Check that the correct arguments are sent to AWS when creating a DCNL cloudsearch connection.'
def test_cloudsearch_index_documents(self): DCNL 'Check that the correct arguments are sent to AWS when indexing a DCNL domain.'
def test_cloudsearch_index_documents_resp(self): DCNL 'Check that the AWS response is being parsed correctly when indexing a DCNL domain.'
def test_cloudsearch_add_basics(self): DCNL 'Check that a simple add document actually sends an add document request DCNL to AWS.'
def test_cloudsearch_add_single_basic(self): DCNL 'Check that a simple add document sends correct document metadata to DCNL AWS.'
def test_cloudsearch_add_single_fields(self): DCNL 'Check that a simple add document sends the actual document to AWS.'
def test_cloudsearch_add_single_result(self): DCNL 'Check that the reply from adding a single document is correctly parsed.'
def test_cloudsearch_add_basics(self): DCNL 'Check that multiple documents are added correctly to AWS'
def test_cloudsearch_add_results(self): DCNL 'Check that the result from adding multiple documents is parsed DCNL correctly.'
def test_cloudsearch_delete(self): DCNL 'Test that the request for a single document deletion is done properly.'
def test_cloudsearch_delete_results(self): DCNL 'Check that the result of a single document deletion is parsed properly.'
def clstest(self, cls): DCNL 'Insure that password.__eq__ hashes test value before compare.'
def test_decoding_full_doc(self): DCNL 'Simple List decoding that had caused some errors'
def test_pickle_deserialized_version(self): DCNL 'It seems the technique used to store and reload the object must DCNL result in an equivalent object, or subsequent pickles may fail. DCNL This tests a double-pickle to elicit that error.'
def __new__(cls, s, *args): DCNL 'Create a new instance. DCNL :param fmt: A format string explaining the reason for denial. DCNL :param args: Arguments are stored and used with the format string DCNL to generate the ``msg``.'
@property DCNL def msg(self): DCNL 'A string indicating why the result was generated.'
def __new__(cls, ace, acl, permission, principals, context): DCNL 'Create a new instance. DCNL :param ace: The :term:`ACE` that matched, triggering the result. DCNL :param acl: The :term:`ACL` containing ``ace``. DCNL :param permission: The required :term:`permission`. DCNL :param principals: The list of :term:`principals <principal>` provided. DCNL :param context: The :term:`context` providing the :term:`lineage` DCNL searched.'
@property DCNL def authenticated_userid(self): DCNL 'Return the userid of the currently authenticated user or DCNL ``None`` if there is no :term:`authentication policy` in effect or DCNL there is no currently authenticated user. DCNL .. versionadded:: 1.5'
@property DCNL def unauthenticated_userid(self): DCNL 'Return an object which represents the *claimed* (not verified) user DCNL id of the credentials present in the request. ``None`` if there is no DCNL :term:`authentication policy` in effect or there is no user data DCNL associated with the current request.  This differs from DCNL :attr:`~pyramid.request.Request.authenticated_userid`, because the DCNL effective authentication policy will not ensure that a record DCNL associated with the userid exists in persistent storage. DCNL .. versionadded:: 1.5'
@property DCNL def effective_principals(self): DCNL 'Return the list of \'effective\' :term:`principal` identifiers DCNL for the ``request``. If no :term:`authentication policy` is in effect, DCNL this will return a one-element list containing the DCNL :data:`pyramid.security.Everyone` principal. DCNL .. versionadded:: 1.5'
def has_permission(self, permission, context=None): DCNL 'Given a permission and an optional context, returns an instance of DCNL :data:`pyramid.security.Allowed` if the permission is granted to this DCNL request with the provided context, or the context already associated DCNL with the request.  Otherwise, returns an instance of DCNL :data:`pyramid.security.Denied`.  This method delegates to the current DCNL authentication and authorization policies.  Returns DCNL :data:`pyramid.security.Allowed` unconditionally if no authentication DCNL policy has been registered for this request.  If ``context`` is not DCNL supplied or is supplied as ``None``, the context used is the DCNL ``request.context`` attribute. DCNL :param permission: Does this request have the given permission? DCNL :type permission: unicode, str DCNL :param context: A resource object or ``None`` DCNL :type context: object DCNL :returns: Either :class:`pyramid.security.Allowed` or DCNL :class:`pyramid.security.Denied`. DCNL .. versionadded:: 1.5'
def permits(self, context, principals, permission): DCNL 'Return an instance of DCNL :class:`pyramid.security.ACLAllowed` instance if the policy DCNL permits access, return an instance of DCNL :class:`pyramid.security.ACLDenied` if not.'
def principals_allowed_by_permission(self, context, permission): DCNL 'Return the set of principals explicitly granted the DCNL permission named ``permission`` according to the ACL directly DCNL attached to the ``context`` as well as inherited ACLs based on DCNL the :term:`lineage`.'
def invoke_exception_view(self, exc_info=None, request=None, secure=True, reraise=False): DCNL 'Executes an exception view related to the request it\'s called upon. DCNL The arguments it takes are these: DCNL ``exc_info`` DCNL If provided, should be a 3-tuple in the form provided by DCNL ``sys.exc_info()``.  If not provided, DCNL ``sys.exc_info()`` will be called to obtain the current DCNL interpreter exception information.  Default: ``None``. DCNL ``request`` DCNL If the request to be used is not the same one as the instance that DCNL this method is called upon, it may be passed here.  Default: DCNL ``None``. DCNL ``secure`` DCNL If the exception view should not be rendered if the current user DCNL does not have the appropriate permission, this should be ``True``. DCNL Default: ``True``. DCNL ``reraise`` DCNL A boolean indicating whether the original error should be reraised DCNL if a :term:`response` object could not be created. If ``False`` DCNL then an :class:`pyramid.httpexceptions.HTTPNotFound`` exception DCNL will be raised. Default: ``False``. DCNL If a response is generated then ``request.exception`` and DCNL ``request.exc_info`` will be left at the values used to render the DCNL response. Otherwise the previous values for ``request.exception`` and DCNL ``request.exc_info`` will be restored. DCNL .. versionadded:: 1.7 DCNL .. versionchanged:: 1.9 DCNL The ``request.exception`` and ``request.exc_info`` properties will DCNL reflect the exception used to render the response where previously DCNL they were reset to the values prior to invoking the method. DCNL Also added the ``reraise`` argument.'
@classmethod DCNL def make_property(cls, callable, name=None, reify=False): DCNL 'Convert a callable into one suitable for adding to the DCNL instance. This will return a 2-tuple containing the computed DCNL (name, property) pair.'
@classmethod DCNL def apply_properties(cls, target, properties): DCNL 'Accept a list or dict of ``properties`` generated from DCNL :meth:`.make_property` and apply them to a ``target`` object.'
@classmethod DCNL def set_property(cls, target, callable, name=None, reify=False): DCNL 'A helper method to apply a single property to an instance.'
def add_property(self, callable, name=None, reify=False): DCNL 'Add a new property configuration. DCNL This should be used in combination with :meth:`.apply` as a DCNL more efficient version of :meth:`.set_property`.'
def apply(self, target): DCNL 'Apply all configured properties to the ``target`` instance.'
def set_property(self, callable, name=None, reify=False): DCNL 'Add a callable or a property descriptor to the instance. DCNL Properties, unlike attributes, are lazily evaluated by executing DCNL an underlying callable when accessed. They can be useful for DCNL adding features to an object without any cost if those features DCNL go unused. DCNL A property may also be reified via the DCNL :class:`pyramid.decorator.reify` decorator by setting DCNL ``reify=True``, allowing the result of the evaluation to be DCNL cached. Using this method, the value of the property is only DCNL computed once for the lifetime of the object. DCNL ``callable`` can either be a callable that accepts the instance DCNL as its single positional parameter, or it can be a property DCNL descriptor. DCNL If the ``callable`` is a property descriptor, the ``name`` DCNL parameter must be supplied or a ``ValueError`` will be raised. DCNL Also note that a property descriptor cannot be reified, so DCNL ``reify`` must be ``False``. DCNL If ``name`` is None, the name of the property will be computed DCNL from the name of the ``callable``. DCNL .. code-block:: python DCNL :linenos: DCNL class Foo(InstancePropertyMixin): DCNL _x = 1 DCNL def _get_x(self): DCNL return _x DCNL def _set_x(self, value): DCNL self._x = value DCNL foo = Foo() DCNL foo.set_property(property(_get_x, _set_x), name=\'x\') DCNL foo.set_property(_get_x, name=\'y\', reify=True) DCNL >>> foo.x DCNL 1 DCNL >>> foo.y DCNL 1 DCNL >>> foo.x = 5 DCNL >>> foo.x DCNL 5 DCNL >>> foo.y # notice y keeps the original value DCNL 1'
def add(self, item): DCNL 'Add an item to the set.'
def _remove_by_id(self, oid): DCNL 'Remove an item from the set.'
def remove(self, item): DCNL 'Remove an item from the set.'
def empty(self): DCNL 'Clear all objects from the set.'
def remove(self, name): DCNL 'Remove a node from the sort input'
def add(self, name, val, after=None, before=None): DCNL 'Add a node to the sort input.  The ``name`` should be a string or DCNL any other hashable object, the ``val`` should be the sortable (doesn\'t DCNL need to be hashable).  ``after`` and ``before`` represents the name of DCNL one of the other sortables (or a sequence of such named) or one of the DCNL special sentinel values :attr:`pyramid.util.FIRST`` or DCNL :attr:`pyramid.util.LAST` representing the first or last positions DCNL respectively.  ``FIRST`` and ``LAST`` can also be part of a sequence DCNL passed as ``before`` or ``after``.  A sortable should not be added DCNL after LAST or before FIRST.  An example:: DCNL sorter = TopologicalSorter() DCNL sorter.add(\'a\', {\'a\':1}, before=LAST, after=\'b\') DCNL sorter.add(\'b\', {\'b\':2}, before=LAST, after=\'c\') DCNL sorter.add(\'c\', {\'c\':3}) DCNL sorter.sorted() # will be {\'c\':3}, {\'b\':2}, {\'a\':1}'
def sorted(self): DCNL 'Returns the sort input values in topologically sorted order'
def resolve(self, spec): DCNL 'Resolve the asset spec named as ``spec`` to an object that has the DCNL attributes and methods described in DCNL :class:`pyramid.interfaces.IAssetDescriptor`. DCNL If ``spec`` is an absolute filename DCNL (e.g. ``/path/to/myproject/templates/foo.pt``) or an absolute asset DCNL spec (e.g. ``myproject:templates.foo.pt``), an asset descriptor is DCNL returned without taking into account the ``package`` passed to this DCNL class\' constructor. DCNL If ``spec`` is a *relative* asset specification (an asset DCNL specification without a ``:`` in it, e.g. ``templates/foo.pt``), the DCNL ``package`` argument of the constructor is used as the package DCNL portion of the asset spec.  For example: DCNL .. code-block:: python DCNL a = AssetResolver(\'myproject\') DCNL resolver = a.resolve(\'templates/foo.pt\') DCNL print(resolver.abspath()) DCNL # -> /path/to/myproject/templates/foo.pt DCNL If the AssetResolver is constructed without a ``package`` argument of DCNL ``None``, and a relative asset specification is passed to DCNL ``resolve``, an :exc:`ValueError` exception is raised.'
def resolve(self, dotted): DCNL 'This method resolves a dotted name reference to a global Python DCNL object (an object which can be imported) to the object itself. DCNL Two dotted name styles are supported: DCNL - ``pkg_resources``-style dotted names where non-module attributes DCNL of a package are separated from the rest of the path using a ``:`` DCNL e.g. ``package.module:attr``. DCNL - ``zope.dottedname``-style dotted names where non-module DCNL attributes of a package are separated from the rest of the path DCNL using a ``.`` e.g. ``package.module.attr``. DCNL These styles can be used interchangeably.  If the supplied name DCNL contains a ``:`` (colon), the ``pkg_resources`` resolution DCNL mechanism will be chosen, otherwise the ``zope.dottedname`` DCNL resolution mechanism will be chosen. DCNL If the ``dotted`` argument passed to this method is not a string, a DCNL :exc:`ValueError` will be raised. DCNL When a dotted name cannot be resolved, a :exc:`ValueError` error is DCNL raised. DCNL Example: DCNL .. code-block:: python DCNL r = DottedNameResolver() DCNL v = r.resolve(\'xml\') # v is the xml module'
def maybe_resolve(self, dotted): DCNL 'This method behaves just like DCNL :meth:`~pyramid.path.DottedNameResolver.resolve`, except if the DCNL ``dotted`` value passed is not a string, it is simply returned.  For DCNL example: DCNL .. code-block:: python DCNL import xml DCNL r = DottedNameResolver() DCNL v = r.maybe_resolve(xml) DCNL # v is the xml module; no exception raised'
def _pkg_resources_style(self, value, package): DCNL 'package.module:attr style'
def _zope_dottedname_style(self, value, package): DCNL 'package.module.attr style'
def test_reset_reify(self): DCNL 'This is questionable behavior, but may as well get notified DCNL if it changes.'
def test_reset_reify(self): DCNL 'This is questionable behavior, but may as well get notified DCNL if it changes.'
def test__process_response_callback_adding_response_callback(self): DCNL 'When a response callback adds another callback, that new callback should still be called. DCNL See https://github.com/Pylons/pyramid/pull/1373'
def translate(self, tstring, domain=None, mapping=None): DCNL 'Translate a :term:`translation string` to the current language DCNL and interpolate any *replacement markers* in the result.  The DCNL ``translate`` method accepts three arguments: ``tstring`` DCNL (required), ``domain`` (optional) and ``mapping`` (optional). DCNL When called, it will translate the ``tstring`` translation DCNL string to a ``unicode`` object using the current locale.  If DCNL the current locale could not be determined, the result of DCNL interpolation of the default value is returned.  The optional DCNL ``domain`` argument can be used to specify or override the DCNL domain of the ``tstring`` (useful when ``tstring`` is a normal DCNL string rather than a translation string).  The optional DCNL ``mapping`` argument can specify or override the ``tstring`` DCNL interpolation mapping, useful when the ``tstring`` argument is DCNL a simple string instead of a translation string. DCNL Example:: DCNL from pyramid.18n import TranslationString DCNL ts = TranslationString(\'Add ${item}\', domain=\'mypackage\', DCNL mapping={\'item\':\'Item\'}) DCNL translated = localizer.translate(ts) DCNL Example:: DCNL translated = localizer.translate(\'Add ${item}\', domain=\'mypackage\', DCNL mapping={\'item\':\'Item\'})'
def pluralize(self, singular, plural, n, domain=None, mapping=None): DCNL 'Return a Unicode string translation by using two DCNL :term:`message identifier` objects as a singular/plural pair DCNL and an ``n`` value representing the number that appears in the DCNL message using gettext plural forms support.  The ``singular`` DCNL and ``plural`` objects should be unicode strings. There is no DCNL reason to use translation string objects as arguments as all DCNL metadata is ignored. DCNL ``n`` represents the number of elements. ``domain`` is the DCNL translation domain to use to do the pluralization, and ``mapping`` DCNL is the interpolation mapping that should be used on the result. If DCNL the ``domain`` is not supplied, a default domain is used (usually DCNL ``messages``). DCNL Example:: DCNL num = 1 DCNL translated = localizer.pluralize(\'Add ${num} item\', DCNL \'Add ${num} items\', DCNL num, DCNL mapping={\'num\':num}) DCNL If using the gettext plural support, which is required for DCNL languages that have pluralisation rules other than n != 1, the DCNL ``singular`` argument must be the message_id defined in the DCNL translation file. The plural argument is not used in this case. DCNL Example:: DCNL num = 1 DCNL translated = localizer.pluralize(\'item_plural\', DCNL num, DCNL mapping={\'num\':num})'
def __init__(self, fileobj=None, domain=DEFAULT_DOMAIN): DCNL 'Initialize the translations catalog. DCNL :param fileobj: the file-like object the translation should be read DCNL from'
@classmethod DCNL def load(cls, dirname=None, locales=None, domain=DEFAULT_DOMAIN): DCNL 'Load translations from the given directory. DCNL :param dirname: the directory containing the ``MO`` files DCNL :param locales: the list of locales in order of preference (items in DCNL this list can be either `Locale` objects or locale DCNL strings) DCNL :param domain: the message domain DCNL :return: the loaded catalog, or a ``NullTranslations`` instance if no DCNL matching translations were found DCNL :rtype: `Translations`'
def add(self, translations, merge=True): DCNL 'Add the given translations to the catalog. DCNL If the domain of the translations is different than that of the DCNL current catalog, they are added as a catalog that is only accessible DCNL by the various ``d*gettext`` functions. DCNL :param translations: the `Translations` instance with the messages to DCNL add DCNL :param merge: whether translations for message domains that have DCNL already been added should be merged with the existing DCNL translations DCNL :return: the `Translations` instance (``self``) so that `merge` calls DCNL can be easily chained DCNL :rtype: `Translations`'
def merge(self, translations): DCNL 'Merge the given translations into the catalog. DCNL Message translations in the specified catalog override any messages DCNL with the same identifier in the existing catalog. DCNL :param translations: the `Translations` instance with the messages to DCNL merge DCNL :return: the `Translations` instance (``self``) so that `merge` calls DCNL can be easily chained DCNL :rtype: `Translations`'
def dgettext(self, domain, message): DCNL 'Like ``gettext()``, but look the message up in the specified DCNL domain.'
def ldgettext(self, domain, message): DCNL 'Like ``lgettext()``, but look the message up in the specified DCNL domain.'
def dugettext(self, domain, message): DCNL 'Like ``ugettext()``, but look the message up in the specified DCNL domain.'
def dngettext(self, domain, singular, plural, num): DCNL 'Like ``ngettext()``, but look the message up in the specified DCNL domain.'
def ldngettext(self, domain, singular, plural, num): DCNL 'Like ``lngettext()``, but look the message up in the specified DCNL domain.'
def dungettext(self, domain, singular, plural, num): DCNL 'Like ``ungettext()`` but look the message up in the specified DCNL domain.'
@reify DCNL def localizer(self): DCNL 'Convenience property to return a localizer'
@action_method DCNL def set_authentication_policy(self, policy): DCNL 'Override the :app:`Pyramid` :term:`authentication policy` in the DCNL current configuration.  The ``policy`` argument must be an instance DCNL of an authentication policy or a :term:`dotted Python name` DCNL that points at an instance of an authentication policy. DCNL .. note:: DCNL Using the ``authentication_policy`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
@action_method DCNL def set_authorization_policy(self, policy): DCNL 'Override the :app:`Pyramid` :term:`authorization policy` in the DCNL current configuration.  The ``policy`` argument must be an instance DCNL of an authorization policy or a :term:`dotted Python name` that points DCNL at an instance of an authorization policy. DCNL .. note:: DCNL Using the ``authorization_policy`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
@action_method DCNL def set_default_permission(self, permission): DCNL 'Set the default permission to be used by all subsequent DCNL :term:`view configuration` registrations.  ``permission`` DCNL should be a :term:`permission` string to be used as the DCNL default permission.  An example of a permission DCNL string:``\'view\'``.  Adding a default permission makes it DCNL unnecessary to protect each view configuration with an DCNL explicit permission, unless your application policy requires DCNL some exception for a particular view. DCNL If a default permission is *not* set, views represented by DCNL view configuration registrations which do not explicitly DCNL declare a permission will be executable by entirely anonymous DCNL users (any authorization policy is ignored). DCNL Later calls to this method override will conflict with earlier calls; DCNL there can be only one default permission active at a time within an DCNL application. DCNL .. warning:: DCNL If a default permission is in effect, view configurations meant to DCNL create a truly anonymously accessible view (even :term:`exception DCNL view` views) *must* use the value of the permission importable as DCNL :data:`pyramid.security.NO_PERMISSION_REQUIRED`.  When this string DCNL is used as the ``permission`` for a view configuration, the default DCNL permission is ignored, and the view is registered, making it DCNL available to all callers regardless of their credentials. DCNL .. seealso:: DCNL See also :ref:`setting_a_default_permission`. DCNL .. note:: DCNL Using the ``default_permission`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
def add_permission(self, permission_name): DCNL 'A configurator directive which registers a free-standing DCNL permission without associating it with a view callable.  This can be DCNL used so that the permission shows up in the introspectable data under DCNL the ``permissions`` category (permissions mentioned via ``add_view`` DCNL already end up in there).  For example:: DCNL config = Configurator() DCNL config.add_permission(\'view\')'
@action_method DCNL def set_default_csrf_options(self, require_csrf=True, token='csrf_token', header='X-CSRF-Token', safe_methods=('GET', 'HEAD', 'OPTIONS', 'TRACE'), callback=None): DCNL 'Set the default CSRF options used by subsequent view registrations. DCNL ``require_csrf`` controls whether CSRF checks will be automatically DCNL enabled on each view in the application. This value is used as the DCNL fallback when ``require_csrf`` is left at the default of ``None`` on DCNL :meth:`pyramid.config.Configurator.add_view`. DCNL ``token`` is the name of the CSRF token used in the body of the DCNL request, accessed via ``request.POST[token]``. Default: ``csrf_token``. DCNL ``header`` is the name of the header containing the CSRF token, DCNL accessed via ``request.headers[header]``. Default: ``X-CSRF-Token``. DCNL If ``token`` or ``header`` are set to ``None`` they will not be used DCNL for checking CSRF tokens. DCNL ``safe_methods`` is an iterable of HTTP methods which are expected to DCNL not contain side-effects as defined by RFC2616. Safe methods will DCNL never be automatically checked for CSRF tokens. DCNL Default: ``(\'GET\', \'HEAD\', \'OPTIONS\', TRACE\')``. DCNL If ``callback`` is set, it must be a callable accepting ``(request)`` DCNL and returning ``True`` if the request should be checked for a valid DCNL CSRF token. This callback allows an application to support DCNL alternate authentication methods that do not rely on cookies which DCNL are not subject to CSRF attacks. For example, if a request is DCNL authenticated using the ``Authorization`` header instead of a cookie, DCNL this may return ``False`` for that request so that clients do not DCNL need to send the ``X-CSRF-Token`` header. The callback is only tested DCNL for non-safe methods as defined by ``safe_methods``. DCNL .. versionadded:: 1.7 DCNL .. versionchanged:: 1.8 DCNL Added the ``callback`` option.'
@action_method DCNL def set_csrf_storage_policy(self, policy): DCNL 'Set the :term:`CSRF storage policy` used by subsequent view DCNL registrations. DCNL ``policy`` is a class that implements the DCNL :meth:`pyramid.interfaces.ICSRFStoragePolicy` interface and defines DCNL how to generate and persist CSRF tokens.'
def setup_registry(self, settings=None, root_factory=None, authentication_policy=None, authorization_policy=None, renderers=None, debug_logger=None, locale_negotiator=None, request_factory=None, response_factory=None, default_permission=None, session_factory=None, default_view_mapper=None, exceptionresponse_view=default_exceptionresponse_view): DCNL 'When you pass a non-``None`` ``registry`` argument to the DCNL :term:`Configurator` constructor, no initial setup is performed DCNL against the registry.  This is because the registry you pass in may DCNL have already been initialized for use under :app:`Pyramid` via a DCNL different configurator.  However, in some circumstances (such as when DCNL you want to use a global registry instead of a registry created as a DCNL result of the Configurator constructor), or when you want to reset DCNL the initial setup of a registry, you *do* want to explicitly DCNL initialize the registry associated with a Configurator for use under DCNL :app:`Pyramid`.  Use ``setup_registry`` to do this initialization. DCNL ``setup_registry`` configures settings, a root factory, security DCNL policies, renderers, a debug logger, a locale negotiator, and various DCNL other settings using the configurator\'s current registry, as per the DCNL descriptions in the Configurator constructor.'
def _fix_registry(self): DCNL 'Fix up a ZCA component registry that is not a DCNL pyramid.registry.Registry by adding analogues of ``has_listeners``, DCNL ``notify``, ``queryAdapterOrSelf``, and ``registerSelfAdapter`` DCNL through monkey-patching.'
def action(self, discriminator, callable=None, args=(), kw=None, order=0, introspectables=(), **extra): DCNL 'Register an action which will be executed when DCNL :meth:`pyramid.config.Configurator.commit` is called (or executed DCNL immediately if ``autocommit`` is ``True``). DCNL .. warning:: This method is typically only used by :app:`Pyramid` DCNL framework extension authors, not by :app:`Pyramid` application DCNL developers. DCNL The ``discriminator`` uniquely identifies the action.  It must be DCNL given, but it can be ``None``, to indicate that the action never DCNL conflicts.  It must be a hashable value. DCNL The ``callable`` is a callable object which performs the task DCNL associated with the action when the action is executed.  It is DCNL optional. DCNL ``args`` and ``kw`` are tuple and dict objects respectively, which DCNL are passed to ``callable`` when this action is executed.  Both are DCNL optional. DCNL ``order`` is a grouping mechanism; an action with a lower order will DCNL be executed before an action with a higher order (has no effect when DCNL autocommit is ``True``). DCNL ``introspectables`` is a sequence of :term:`introspectable` objects DCNL (or the empty sequence if no introspectable objects are associated DCNL with this action).  If this configurator\'s ``introspection`` DCNL attribute is ``False``, these introspectables will be ignored. DCNL ``extra`` provides a facility for inserting extra keys and values DCNL into an action dictionary.'
def commit(self): DCNL 'Commit any pending configuration actions. If a configuration DCNL conflict is detected in the pending configuration actions, this method DCNL will raise a :exc:`ConfigurationConflictError`; within the traceback DCNL of this error will be information about the source of the conflict, DCNL usually including file names and line numbers of the cause of the DCNL configuration conflicts. DCNL .. warning:: DCNL You should think very carefully before manually invoking DCNL ``commit()``. Especially not as part of any reusable configuration DCNL methods. Normally it should only be done by an application author at DCNL the end of configuration in order to override certain aspects of an DCNL addon.'
def include(self, callable, route_prefix=None): DCNL 'Include a configuration callable, to support imperative DCNL application extensibility. DCNL .. warning:: In versions of :app:`Pyramid` prior to 1.2, this DCNL function accepted ``*callables``, but this has been changed DCNL to support only a single callable. DCNL A configuration callable should be a callable that accepts a single DCNL argument named ``config``, which will be an instance of a DCNL :term:`Configurator`.  However, be warned that it will not be the same DCNL configurator instance on which you call this method.  The DCNL code which runs as a result of calling the callable should invoke DCNL methods on the configurator passed to it which add configuration DCNL state.  The return value of a callable will be ignored. DCNL Values allowed to be presented via the ``callable`` argument to DCNL this method: any callable Python object or any :term:`dotted Python DCNL name` which resolves to a callable Python object.  It may also be a DCNL Python :term:`module`, in which case, the module will be searched for DCNL a callable named ``includeme``, which will be treated as the DCNL configuration callable. DCNL For example, if the ``includeme`` function below lives in a module DCNL named ``myapp.myconfig``: DCNL .. code-block:: python DCNL :linenos: DCNL # myapp.myconfig module DCNL def my_view(request): DCNL from pyramid.response import Response DCNL return Response(\'OK\') DCNL def includeme(config): DCNL config.add_view(my_view) DCNL You might cause it to be included within your Pyramid application like DCNL so: DCNL .. code-block:: python DCNL :linenos: DCNL from pyramid.config import Configurator DCNL def main(global_config, **settings): DCNL config = Configurator() DCNL config.include(\'myapp.myconfig.includeme\') DCNL Because the function is named ``includeme``, the function name can DCNL also be omitted from the dotted name reference: DCNL .. code-block:: python DCNL :linenos: DCNL from pyramid.config import Configurator DCNL def main(global_config, **settings): DCNL config = Configurator() DCNL config.include(\'myapp.myconfig\') DCNL Included configuration statements will be overridden by local DCNL configuration statements if an included callable causes a DCNL configuration conflict by registering something with the same DCNL configuration parameters. DCNL If the ``route_prefix`` is supplied, it must be a string.  Any calls DCNL to :meth:`pyramid.config.Configurator.add_route` within the included DCNL callable will have their pattern prefixed with the value of DCNL ``route_prefix``. This can be used to help mount a set of routes at a DCNL different location than the included callable\'s author intended, while DCNL still maintaining the same route names.  For example: DCNL .. code-block:: python DCNL :linenos: DCNL from pyramid.config import Configurator DCNL def included(config): DCNL config.add_route(\'show_users\', \'/show\') DCNL def main(global_config, **settings): DCNL config = Configurator() DCNL config.include(included, route_prefix=\'/users\') DCNL In the above configuration, the ``show_users`` route will have an DCNL effective route pattern of ``/users/show``, instead of ``/show`` DCNL because the ``route_prefix`` argument will be prepended to the DCNL pattern. DCNL .. versionadded:: 1.2 DCNL The ``route_prefix`` parameter. DCNL .. versionchanged:: 1.9 DCNL The included function is wrapped with a call to DCNL :meth:`pyramid.config.Configurator.begin` and DCNL :meth:`pyramid.config.Configurator.end` while it is executed.'
def add_directive(self, name, directive, action_wrap=True): DCNL 'Add a directive method to the configurator. DCNL .. warning:: This method is typically only used by :app:`Pyramid` DCNL framework extension authors, not by :app:`Pyramid` application DCNL developers. DCNL Framework extenders can add directive methods to a configurator by DCNL instructing their users to call ``config.add_directive(\'somename\', DCNL \'some.callable\')``.  This will make ``some.callable`` accessible as DCNL ``config.somename``.  ``some.callable`` should be a function which DCNL accepts ``config`` as a first argument, and arbitrary positional and DCNL keyword arguments following.  It should use config.action as DCNL necessary to perform actions.  Directive methods can then be invoked DCNL like \'built-in\' directives such as ``add_view``, ``add_route``, etc. DCNL The ``action_wrap`` argument should be ``True`` for directives which DCNL perform ``config.action`` with potentially conflicting DCNL discriminators.  ``action_wrap`` will cause the directive to be DCNL wrapped in a decorator which provides more accurate conflict DCNL cause information. DCNL ``add_directive`` does not participate in conflict detection, and DCNL later calls to ``add_directive`` will override earlier calls.'
def with_package(self, package): DCNL 'Return a new Configurator instance with the same registry DCNL as this configurator. ``package`` may be an actual Python package DCNL object or a :term:`dotted Python name` representing a package.'
def maybe_dotted(self, dotted): DCNL 'Resolve the :term:`dotted Python name` ``dotted`` to a DCNL global Python object.  If ``dotted`` is not a string, return DCNL it without attempting to do any name resolution.  If DCNL ``dotted`` is a relative dotted name (e.g. ``.foo.bar``, DCNL consider it relative to the ``package`` argument supplied to DCNL this Configurator\'s constructor.'
def absolute_asset_spec(self, relative_spec): DCNL 'Resolve the potentially relative :term:`asset DCNL specification` string passed as ``relative_spec`` into an DCNL absolute asset specification string and return the string. DCNL Use the ``package`` of this configurator as the package to DCNL which the asset specification will be considered relative DCNL when generating an absolute asset specification.  If the DCNL provided ``relative_spec`` argument is already absolute, or if DCNL the ``relative_spec`` is not a string, it is simply returned.'
def begin(self, request=_marker): DCNL 'Indicate that application or test configuration has begun. DCNL This pushes a dictionary containing the :term:`application DCNL registry` implied by ``registry`` attribute of this DCNL configurator and the :term:`request` implied by the DCNL ``request`` argument onto the :term:`thread local` stack DCNL consulted by various :mod:`pyramid.threadlocal` API DCNL functions. DCNL If ``request`` is not specified and the registry owned by the DCNL configurator is already pushed as the current threadlocal registry DCNL then this method will keep the current threadlocal request unchanged. DCNL .. versionchanged:: 1.8 DCNL The current threadlocal request is propagated if the current DCNL threadlocal registry remains unchanged.'
def end(self): DCNL 'Indicate that application or test configuration has ended. DCNL This pops the last value pushed onto the :term:`thread local` DCNL stack (usually by the ``begin`` method) and returns that DCNL value.'
def scan(self, package=None, categories=None, onerror=None, ignore=None, **kw): DCNL 'Scan a Python package and any of its subpackages for objects DCNL marked with :term:`configuration decoration` such as DCNL :class:`pyramid.view.view_config`.  Any decorated object found will DCNL influence the current configuration state. DCNL The ``package`` argument should be a Python :term:`package` or module DCNL object (or a :term:`dotted Python name` which refers to such a DCNL package or module).  If ``package`` is ``None``, the package of the DCNL *caller* is used. DCNL The ``categories`` argument, if provided, should be the DCNL :term:`Venusian` \'scan categories\' to use during scanning.  Providing DCNL this argument is not often necessary; specifying scan categories is DCNL an extremely advanced usage.  By default, ``categories`` is ``None`` DCNL which will execute *all* Venusian decorator callbacks including DCNL :app:`Pyramid`-related decorators such as DCNL :class:`pyramid.view.view_config`.  See the :term:`Venusian` DCNL documentation for more information about limiting a scan by using an DCNL explicit set of categories. DCNL The ``onerror`` argument, if provided, should be a Venusian DCNL ``onerror`` callback function.  The onerror function is passed to DCNL :meth:`venusian.Scanner.scan` to influence error behavior when an DCNL exception is raised during the scanning process.  See the DCNL :term:`Venusian` documentation for more information about ``onerror`` DCNL callbacks. DCNL The ``ignore`` argument, if provided, should be a Venusian ``ignore`` DCNL value.  Providing an ``ignore`` argument allows the scan to ignore DCNL particular modules, packages, or global objects during a scan. DCNL ``ignore`` can be a string or a callable, or a list containing DCNL strings or callables.  The simplest usage of ``ignore`` is to provide DCNL a module or package by providing a full path to its dotted name.  For DCNL example: ``config.scan(ignore=\'my.module.subpackage\')`` would ignore DCNL the ``my.module.subpackage`` package during a scan, which would DCNL prevent the subpackage and any of its submodules from being imported DCNL and scanned.  See the :term:`Venusian` documentation for more DCNL information about the ``ignore`` argument. DCNL To perform a ``scan``, Pyramid creates a Venusian ``Scanner`` object. DCNL The ``kw`` argument represents a set of keyword arguments to pass to DCNL the Venusian ``Scanner`` object\'s constructor.  See the DCNL :term:`venusian` documentation (its ``Scanner`` class) for more DCNL information about the constructor.  By default, the only keyword DCNL arguments passed to the Scanner constructor are ``{\'config\':self}`` DCNL where ``self`` is this configurator object.  This services the DCNL requirement of all built-in Pyramid decorators, but extension systems DCNL may require additional arguments.  Providing this argument is not DCNL often necessary; it\'s an advanced usage. DCNL .. versionadded:: 1.1 DCNL The ``**kw`` argument. DCNL .. versionadded:: 1.3 DCNL The ``ignore`` argument.'
def make_wsgi_app(self): DCNL 'Commits any pending configuration statements, sends a DCNL :class:`pyramid.events.ApplicationCreated` event to all listeners, DCNL adds this configuration\'s registry to DCNL :attr:`pyramid.config.global_registries`, and returns a DCNL :app:`Pyramid` WSGI application representing the committed DCNL configuration state.'
def processSpec(self, spec): DCNL 'Check whether a callable needs to be processed.  The ``spec`` DCNL refers to a unique identifier for the callable. DCNL Return True if processing is needed and False otherwise. If DCNL the callable needs to be processed, it will be marked as DCNL processed, assuming that the caller will procces the callable if DCNL it needs to be processed.'
def action(self, discriminator, callable=None, args=(), kw=None, order=0, includepath=(), info=None, introspectables=(), **extra): DCNL 'Add an action with the given discriminator, callable and arguments'
def execute_actions(self, clear=True, introspector=None): DCNL 'Execute the configuration actions DCNL This calls the action callables after resolving conflicts DCNL For example: DCNL >>> output = [] DCNL >>> def f(*a, **k): DCNL ...    output.append((\'f\', a, k)) DCNL >>> context = ActionState() DCNL >>> context.actions = [ DCNL ...   (1, f, (1,)), DCNL ...   (1, f, (11,), {}, (\'x\', )), DCNL ...   (2, f, (2,)), DCNL >>> context.execute_actions() DCNL >>> output DCNL [(\'f\', (1,), {}), (\'f\', (2,), {})] DCNL If the action raises an error, we convert it to a DCNL ConfigurationExecutionError. DCNL >>> output = [] DCNL >>> def bad(): DCNL ...    bad.xxx DCNL >>> context.actions = [ DCNL ...   (1, f, (1,)), DCNL ...   (1, f, (11,), {}, (\'x\', )), DCNL ...   (2, f, (2,)), DCNL ...   (3, bad, (), {}, (), \'oops\') DCNL >>> try: DCNL ...    v = context.execute_actions() DCNL ... except ConfigurationExecutionError, v: DCNL ...    pass DCNL >>> print(v) DCNL exceptions.AttributeError: \'function\' object has no attribute \'xxx\' DCNL in: DCNL oops DCNL Note that actions executed before the error still have an effect: DCNL >>> output DCNL [(\'f\', (1,), {}), (\'f\', (2,), {})] DCNL The execution is re-entrant such that actions may be added by other DCNL actions with the one caveat that the order of any added actions must DCNL be equal to or larger than the current action. DCNL >>> output = [] DCNL >>> def f(*a, **k): DCNL ...   output.append((\'f\', a, k)) DCNL ...   context.actions.append((3, g, (8,), {})) DCNL >>> def g(*a, **k): DCNL ...    output.append((\'g\', a, k)) DCNL >>> context.actions = [ DCNL ...   (1, f, (1,)), DCNL >>> context.execute_actions() DCNL >>> output DCNL [(\'f\', (1,), {}), (\'g\', (8,), {})]'
@action_method DCNL def set_locale_negotiator(self, negotiator): DCNL 'Set the :term:`locale negotiator` for this application.  The DCNL :term:`locale negotiator` is a callable which accepts a DCNL :term:`request` object and which returns a :term:`locale DCNL name`.  The ``negotiator`` argument should be the locale DCNL negotiator implementation or a :term:`dotted Python name` DCNL which refers to such an implementation. DCNL Later calls to this method override earlier calls; there can DCNL be only one locale negotiator active at a time within an DCNL application.  See :ref:`activating_translation` for more DCNL information. DCNL .. note:: DCNL Using the ``locale_negotiator`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
@action_method DCNL def add_translation_dirs(self, *specs, **kw): DCNL 'Add one or more :term:`translation directory` paths to the DCNL current configuration state.  The ``specs`` argument is a DCNL sequence that may contain absolute directory paths DCNL (e.g. ``/usr/share/locale``) or :term:`asset specification` DCNL names naming a directory path (e.g. ``some.package:locale``) DCNL or a combination of the two. DCNL Example: DCNL .. code-block:: python DCNL config.add_translation_dirs(\'/usr/share/locale\', DCNL \'some.package:locale\') DCNL The translation directories are defined as a list in which DCNL translations defined later have precedence over translations defined DCNL earlier. DCNL By default, consecutive calls to ``add_translation_dirs`` will add DCNL directories to the start of the list. This means later calls to DCNL ``add_translation_dirs`` will have their translations trumped by DCNL earlier calls. If you explicitly need this call to trump an earlier DCNL call then you may set ``override`` to ``True``. DCNL If multiple specs are provided in a single call to DCNL ``add_translation_dirs``, the directories will be inserted in the DCNL order they\'re provided (earlier items are trumped by later items). DCNL .. versionchanged:: 1.8 DCNL The ``override`` parameter was added to allow a later call DCNL to ``add_translation_dirs`` to override an earlier call, inserting DCNL folders at the beginning of the translation directory list.'
def add_settings(self, settings=None, **kw): DCNL 'Augment the :term:`deployment settings` with one or more DCNL key/value pairs. DCNL You may pass a dictionary:: DCNL config.add_settings({\'external_uri\':\'http://example.com\'}) DCNL Or a set of key/value pairs:: DCNL config.add_settings(external_uri=\'http://example.com\') DCNL This function is useful when you need to test code that accesses the DCNL :attr:`pyramid.registry.Registry.settings` API (or the DCNL :meth:`pyramid.config.Configurator.get_settings` API) and DCNL which uses values from that API.'
def get_settings(self): DCNL 'Return a :term:`deployment settings` object for the current DCNL application.  A deployment settings object is a dictionary-like DCNL object that contains key/value pairs based on the dictionary passed DCNL as the ``settings`` argument to the DCNL :class:`pyramid.config.Configurator` constructor. DCNL .. note:: the :attr:`pyramid.registry.Registry.settings` API DCNL performs the same duty.'
def get_resource_filename(self, manager, resource_name): DCNL 'Return a true filesystem path for resource_name, DCNL co-ordinating the extraction with manager, if the resource DCNL must be unpacked to the filesystem.'
def get_resource_stream(self, manager, resource_name): DCNL 'Return a readable file-like object for resource_name.'
def get_resource_string(self, manager, resource_name): DCNL 'Return a string containing the contents of resource_name.'
def get_data(self, path): DCNL 'See IPEP302Loader.'
def is_package(self, fullname): DCNL 'See IPEP302Loader.'
def get_code(self, fullname): DCNL 'See IPEP302Loader.'
def get_source(self, fullname): DCNL 'See IPEP302Loader.'
@action_method DCNL def override_asset(self, to_override, override_with, _override=None): DCNL 'Add a :app:`Pyramid` asset override to the current DCNL configuration state. DCNL ``to_override`` is an :term:`asset specification` to the DCNL asset being overridden. DCNL ``override_with`` is an :term:`asset specification` to the DCNL asset that is performing the override. This may also be an absolute DCNL path. DCNL See :ref:`assets_chapter` for more DCNL information about asset overrides.'
def testing_securitypolicy(self, userid=None, groupids=(), permissive=True, remember_result=None, forget_result=None): DCNL 'Unit/integration testing helper: Registers a pair of faux DCNL :app:`Pyramid` security policies: a :term:`authentication DCNL policy` and a :term:`authorization policy`. DCNL The behavior of the registered :term:`authorization policy` DCNL depends on the ``permissive`` argument.  If ``permissive`` is DCNL true, a permissive :term:`authorization policy` is registered; DCNL this policy allows all access.  If ``permissive`` is false, a DCNL nonpermissive :term:`authorization policy` is registered; this DCNL policy denies all access. DCNL ``remember_result``, if provided, should be the result returned by DCNL the ``remember`` method of the faux authentication policy.  If it is DCNL not provided (or it is provided, and is ``None``), the default value DCNL ``[]`` (the empty list) will be returned by ``remember``. DCNL ``forget_result``, if provided, should be the result returned by DCNL the ``forget`` method of the faux authentication policy.  If it is DCNL not provided (or it is provided, and is ``None``), the default value DCNL ``[]`` (the empty list) will be returned by ``forget``. DCNL The behavior of the registered :term:`authentication policy` DCNL depends on the values provided for the ``userid`` and DCNL ``groupids`` argument.  The authentication policy will return DCNL the userid identifier implied by the ``userid`` argument and DCNL the group ids implied by the ``groupids`` argument when the DCNL :attr:`pyramid.request.Request.authenticated_userid` or DCNL :attr:`pyramid.request.Request.effective_principals` APIs are DCNL used. DCNL This function is most useful when testing code that uses DCNL the APIs named :meth:`pyramid.request.Request.has_permission`, DCNL :attr:`pyramid.request.Request.authenticated_userid`, DCNL :attr:`pyramid.request.Request.effective_principals`, and DCNL :func:`pyramid.security.principals_allowed_by_permission`. DCNL .. versionadded:: 1.4 DCNL The ``remember_result`` argument. DCNL .. versionadded:: 1.4 DCNL The ``forget_result`` argument.'
def testing_resources(self, resources): DCNL 'Unit/integration testing helper: registers a dictionary of DCNL :term:`resource` objects that can be resolved via the DCNL :func:`pyramid.traversal.find_resource` API. DCNL The :func:`pyramid.traversal.find_resource` API is called with DCNL a path as one of its arguments.  If the dictionary you DCNL register when calling this method contains that path as a DCNL string key (e.g. ``/foo/bar`` or ``foo/bar``), the DCNL corresponding value will be returned to ``find_resource`` (and DCNL thus to your code) when DCNL :func:`pyramid.traversal.find_resource` is called with an DCNL equivalent path string or tuple.'
@action_method DCNL def testing_add_subscriber(self, event_iface=None): DCNL 'Unit/integration testing helper: Registers a DCNL :term:`subscriber` which listens for events of the type DCNL ``event_iface``.  This method returns a list object which is DCNL appended to by the subscriber whenever an event is captured. DCNL When an event is dispatched that matches the value implied by DCNL the ``event_iface`` argument, that event will be appended to DCNL the list.  You can then compare the values in the list to DCNL expected event notifications.  This method is useful when DCNL testing code that wants to call DCNL :meth:`pyramid.registry.Registry.notify`, DCNL or :func:`zope.component.event.dispatch`. DCNL The default value of ``event_iface`` (``None``) implies a DCNL subscriber registered for *any* kind of event.'
def testing_add_renderer(self, path, renderer=None): DCNL 'Unit/integration testing helper: register a renderer at DCNL ``path`` (usually a relative filename ala ``templates/foo.pt`` DCNL or an asset specification) and return the renderer object. DCNL If the ``renderer`` argument is None, a \'dummy\' renderer will DCNL be used.  This function is useful when testing code that calls DCNL the :func:`pyramid.renderers.render` function or DCNL :func:`pyramid.renderers.render_to_response` function or DCNL any other ``render_*`` or ``get_*`` API of the DCNL :mod:`pyramid.renderers` module. DCNL Note that calling this method for with a ``path`` argument DCNL representing a renderer factory type (e.g. for ``foo.pt`` DCNL usually implies the ``chameleon_zpt`` renderer factory) DCNL clobbers any existing renderer factory registered for that DCNL type. DCNL .. note:: This method is also available under the alias DCNL ``testing_add_template`` (an older name for it).'
@action_method DCNL def add_renderer(self, name, factory): DCNL 'Add a :app:`Pyramid` :term:`renderer` factory to the DCNL current configuration state. DCNL The ``name`` argument is the renderer name.  Use ``None`` to DCNL represent the default renderer (a renderer which will be used for all DCNL views unless they name another renderer specifically). DCNL The ``factory`` argument is Python reference to an DCNL implementation of a :term:`renderer` factory or a DCNL :term:`dotted Python name` to same.'
def hook_zca(self): DCNL 'Call :func:`zope.component.getSiteManager.sethook` with the DCNL argument :data:`pyramid.threadlocal.get_current_registry`, causing DCNL the :term:`Zope Component Architecture` \'global\' APIs such as DCNL :func:`zope.component.getSiteManager`, DCNL :func:`zope.component.getAdapter` and others to use the DCNL :app:`Pyramid` :term:`application registry` rather than the Zope DCNL \'global\' registry.'
def unhook_zca(self): DCNL 'Call :func:`zope.component.getSiteManager.reset` to undo the DCNL action of :meth:`pyramid.config.Configurator.hook_zca`.'
@action_method DCNL def add_route(self, name, pattern=None, permission=None, factory=None, for_=None, header=None, xhr=None, accept=None, path_info=None, request_method=None, request_param=None, traverse=None, custom_predicates=(), use_global_views=False, path=None, pregenerator=None, static=False, **predicates): DCNL 'Add a :term:`route configuration` to the current DCNL configuration state, as well as possibly a :term:`view DCNL configuration` to be used to specify a :term:`view callable` DCNL that will be invoked when this route matches.  The arguments DCNL to this method are divided into *predicate*, *non-predicate*, DCNL and *view-related* types.  :term:`Route predicate` arguments DCNL narrow the circumstances in which a route will be match a DCNL request; non-predicate arguments are informational. DCNL Non-Predicate Arguments DCNL name DCNL The name of the route, e.g. ``myroute``.  This attribute is DCNL required.  It must be unique among all defined routes in a given DCNL application. DCNL factory DCNL A Python object (often a function or a class) or a :term:`dotted DCNL Python name` which refers to the same object that will generate a DCNL :app:`Pyramid` root resource object when this route matches. For DCNL example, ``mypackage.resources.MyFactory``.  If this argument is DCNL not specified, a default root factory will be used.  See DCNL :ref:`the_resource_tree` for more information about root factories. DCNL traverse DCNL If you would like to cause the :term:`context` to be DCNL something other than the :term:`root` object when this route DCNL matches, you can spell a traversal pattern as the DCNL ``traverse`` argument.  This traversal pattern will be used DCNL as the traversal path: traversal will begin at the root DCNL object implied by this route (either the global root, or the DCNL object returned by the ``factory`` associated with this DCNL route). DCNL The syntax of the ``traverse`` argument is the same as it is DCNL for ``pattern``. For example, if the ``pattern`` provided to DCNL ``add_route`` is ``articles/{article}/edit``, and the DCNL ``traverse`` argument provided to ``add_route`` is DCNL ``/{article}``, when a request comes in that causes the route DCNL to match in such a way that the ``article`` match value is DCNL ``\'1\'`` (when the request URI is ``/articles/1/edit``), the DCNL traversal path will be generated as ``/1``.  This means that DCNL the root object\'s ``__getitem__`` will be called with the DCNL name ``\'1\'`` during the traversal phase.  If the ``\'1\'`` object DCNL exists, it will become the :term:`context` of the request. DCNL :ref:`traversal_chapter` has more information about DCNL traversal. DCNL If the traversal path contains segment marker names which DCNL are not present in the ``pattern`` argument, a runtime error DCNL will occur.  The ``traverse`` pattern should not contain DCNL segment markers that do not exist in the ``pattern`` DCNL argument. DCNL A similar combining of routing and traversal is available DCNL when a route is matched which contains a ``*traverse`` DCNL remainder marker in its pattern (see DCNL :ref:`using_traverse_in_a_route_pattern`).  The ``traverse`` DCNL argument to add_route allows you to associate route patterns DCNL with an arbitrary traversal path without using a DCNL ``*traverse`` remainder marker; instead you can use other DCNL match information. DCNL Note that the ``traverse`` argument to ``add_route`` is DCNL ignored when attached to a route that has a ``*traverse`` DCNL remainder marker in its pattern. DCNL pregenerator DCNL This option should be a callable object that implements the DCNL :class:`pyramid.interfaces.IRoutePregenerator` interface.  A DCNL :term:`pregenerator` is a callable called by the DCNL :meth:`pyramid.request.Request.route_url` function to augment or DCNL replace the arguments it is passed when generating a URL for the DCNL route.  This is a feature not often used directly by applications, DCNL it is meant to be hooked by frameworks that use :app:`Pyramid` as DCNL a base. DCNL use_global_views DCNL When a request matches this route, and view lookup cannot DCNL find a view which has a ``route_name`` predicate argument DCNL that matches the route, try to fall back to using a view DCNL that otherwise matches the context, request, and view name DCNL (but which does not match the route_name predicate). DCNL static DCNL If ``static`` is ``True``, this route will never match an incoming DCNL request; it will only be useful for URL generation.  By default, DCNL ``static`` is ``False``.  See :ref:`static_route_narr`. DCNL .. versionadded:: 1.1 DCNL accept DCNL This value represents a match query for one or more mimetypes in the DCNL ``Accept`` HTTP request header.  If this value is specified, it must DCNL be in one of the following forms: a mimetype match token in the form DCNL ``text/plain``, a wildcard mimetype match token in the form DCNL ``text/*`` or a match-all wildcard mimetype match token in the form DCNL ``*/*``.  If any of the forms matches the ``Accept`` header of the DCNL request, or if the ``Accept`` header isn\'t set at all in the request, DCNL this will match the current route. If this does not match the DCNL ``Accept`` header of the request, route matching continues. DCNL Predicate Arguments DCNL pattern DCNL The pattern of the route e.g. ``ideas/{idea}``.  This DCNL argument is required.  See :ref:`route_pattern_syntax` DCNL for information about the syntax of route patterns.  If the DCNL pattern doesn\'t match the current URL, route matching DCNL continues. DCNL .. note:: DCNL For backwards compatibility purposes (as of :app:`Pyramid` 1.0), a DCNL ``path`` keyword argument passed to this function will be used to DCNL represent the pattern value if the ``pattern`` argument is DCNL ``None``.  If both ``path`` and ``pattern`` are passed, ``pattern`` DCNL wins. DCNL xhr DCNL This value should be either ``True`` or ``False``.  If this DCNL value is specified and is ``True``, the :term:`request` must DCNL possess an ``HTTP_X_REQUESTED_WITH`` (aka DCNL ``X-Requested-With``) header for this route to match.  This DCNL is useful for detecting AJAX requests issued from jQuery, DCNL Prototype and other Javascript libraries.  If this predicate DCNL returns ``False``, route matching continues. DCNL request_method DCNL A string representing an HTTP method name, e.g. ``GET``, ``POST``, DCNL ``HEAD``, ``DELETE``, ``PUT`` or a tuple of elements containing DCNL HTTP method names.  If this argument is not specified, this route DCNL will match if the request has *any* request method.  If this DCNL predicate returns ``False``, route matching continues. DCNL .. versionchanged:: 1.2 DCNL The ability to pass a tuple of items as ``request_method``. DCNL Previous versions allowed only a string. DCNL path_info DCNL This value represents a regular expression pattern that will DCNL be tested against the ``PATH_INFO`` WSGI environment DCNL variable.  If the regex matches, this predicate will return DCNL ``True``.  If this predicate returns ``False``, route DCNL matching continues. DCNL request_param DCNL This value can be any string.  A view declaration with this DCNL argument ensures that the associated route will only match DCNL when the request has a key in the ``request.params`` DCNL dictionary (an HTTP ``GET`` or ``POST`` variable) that has a DCNL name which matches the supplied value.  If the value DCNL supplied as the argument has a ``=`` sign in it, DCNL e.g. ``request_param="foo=123"``, then the key DCNL (``foo``) must both exist in the ``request.params`` dictionary, and DCNL the value must match the right hand side of the expression (``123``) DCNL for the route to "match" the current request.  If this predicate DCNL returns ``False``, route matching continues. DCNL header DCNL This argument represents an HTTP header name or a header DCNL name/value pair.  If the argument contains a ``:`` (colon), DCNL it will be considered a name/value pair DCNL (e.g. ``User-Agent:Mozilla/.*`` or ``Host:localhost``).  If DCNL the value contains a colon, the value portion should be a DCNL regular expression.  If the value does not contain a colon, DCNL the entire value will be considered to be the header name DCNL (e.g. ``If-Modified-Since``).  If the value evaluates to a DCNL header name only without a value, the header specified by DCNL the name must be present in the request for this predicate DCNL to be true.  If the value evaluates to a header name/value DCNL pair, the header specified by the name must be present in DCNL the request *and* the regular expression specified as the DCNL value must match the header value.  Whether or not the value DCNL represents a header name or a header name/value pair, the DCNL case of the header name is not significant.  If this DCNL predicate returns ``False``, route matching continues. DCNL effective_principals DCNL If specified, this value should be a :term:`principal` identifier or DCNL a sequence of principal identifiers.  If the DCNL :attr:`pyramid.request.Request.effective_principals` property DCNL indicates that every principal named in the argument list is present DCNL in the current request, this predicate will return True; otherwise it DCNL will return False.  For example: DCNL ``effective_principals=pyramid.security.Authenticated`` or DCNL ``effective_principals=(\'fred\', \'group:admins\')``. DCNL .. versionadded:: 1.4a4 DCNL custom_predicates DCNL .. deprecated:: 1.5 DCNL This value should be a sequence of references to custom DCNL predicate callables.  Use custom predicates when no set of DCNL predefined predicates does what you need.  Custom predicates DCNL can be combined with predefined predicates as necessary. DCNL Each custom predicate callable should accept two arguments: DCNL ``info`` and ``request`` and should return either ``True`` DCNL or ``False`` after doing arbitrary evaluation of the info DCNL and/or the request.  If all custom and non-custom predicate DCNL callables return ``True`` the associated route will be DCNL considered viable for a given request.  If any predicate DCNL callable returns ``False``, route matching continues.  Note DCNL that the value ``info`` passed to a custom route predicate DCNL is a dictionary containing matching information; see DCNL :ref:`custom_route_predicates` for more information about DCNL ``info``. DCNL predicates DCNL Pass a key/value pair here to use a third-party predicate DCNL registered via DCNL :meth:`pyramid.config.Configurator.add_route_predicate`.  More than DCNL one key/value pair can be used at the same time.  See DCNL :ref:`view_and_route_predicates` for more information about DCNL third-party predicates. DCNL .. versionadded:: 1.4'
@action_method DCNL def add_route_predicate(self, name, factory, weighs_more_than=None, weighs_less_than=None): DCNL 'Adds a route predicate factory.  The view predicate can later be DCNL named as a keyword argument to DCNL :meth:`pyramid.config.Configurator.add_route`. DCNL ``name`` should be the name of the predicate.  It must be a valid DCNL Python identifier (it will be used as a keyword argument to DCNL ``add_route``). DCNL ``factory`` should be a :term:`predicate factory` or :term:`dotted DCNL Python name` which refers to a predicate factory. DCNL See :ref:`view_and_route_predicates` for more information. DCNL .. versionadded:: 1.4'
def get_routes_mapper(self): DCNL 'Return the :term:`routes mapper` object associated with DCNL this configurator\'s :term:`registry`.'
def add_tween(self, tween_factory, under=None, over=None): DCNL '.. versionadded:: 1.2 DCNL Add a \'tween factory\'.  A :term:`tween` (a contraction of \'between\') DCNL is a bit of code that sits between the Pyramid router\'s main request DCNL handling function and the upstream WSGI component that uses DCNL :app:`Pyramid` as its \'app\'.  Tweens are a feature that may be used DCNL by Pyramid framework extensions, to provide, for example, DCNL Pyramid-specific view timing support, bookkeeping code that examines DCNL exceptions before they are returned to the upstream WSGI application, DCNL or a variety of other features.  Tweens behave a bit like DCNL :term:`WSGI` \'middleware\' but they have the benefit of running in a DCNL context in which they have access to the Pyramid :term:`application DCNL registry` as well as the Pyramid rendering machinery. DCNL .. note:: You can view the tween ordering configured into a given DCNL Pyramid application by using the ``ptweens`` DCNL command.  See :ref:`displaying_tweens`. DCNL The ``tween_factory`` argument must be a :term:`dotted Python name` DCNL to a global object representing the tween factory. DCNL The ``under`` and ``over`` arguments allow the caller of DCNL ``add_tween`` to provide a hint about where in the tween chain this DCNL tween factory should be placed when an implicit tween chain is used. DCNL These hints are only used when an explicit tween chain is not used DCNL (when the ``pyramid.tweens`` configuration value is not set). DCNL Allowable values for ``under`` or ``over`` (or both) are: DCNL - ``None`` (the default). DCNL - A :term:`dotted Python name` to a tween factory: a string DCNL representing the dotted name of a tween factory added in a call to DCNL ``add_tween`` in the same configuration session. DCNL - One of the constants :attr:`pyramid.tweens.MAIN`, DCNL :attr:`pyramid.tweens.INGRESS`, or :attr:`pyramid.tweens.EXCVIEW`. DCNL - An iterable of any combination of the above. This allows the user DCNL to specify fallbacks if the desired tween is not included, as well DCNL as compatibility with multiple other tweens. DCNL ``under`` means \'closer to the main Pyramid application than\', DCNL ``over`` means \'closer to the request ingress than\'. DCNL For example, calling ``add_tween(\'myapp.tfactory\', DCNL over=pyramid.tweens.MAIN)`` will attempt to place the tween factory DCNL represented by the dotted name ``myapp.tfactory`` directly \'above\' DCNL (in ``ptweens`` order) the main Pyramid request handler. DCNL Likewise, calling ``add_tween(\'myapp.tfactory\', DCNL over=pyramid.tweens.MAIN, under=\'mypkg.someothertween\')`` will DCNL attempt to place this tween factory \'above\' the main handler but DCNL \'below\' (a fictional) \'mypkg.someothertween\' tween factory. DCNL If all options for ``under`` (or ``over``) cannot be found in the DCNL current configuration, it is an error. If some options are specified DCNL purely for compatibilty with other tweens, just add a fallback of DCNL MAIN or INGRESS. For example, ``under=(\'mypkg.someothertween\', DCNL \'mypkg.someothertween2\', INGRESS)``.  This constraint will require DCNL the tween to be located under both the \'mypkg.someothertween\' tween, DCNL the \'mypkg.someothertween2\' tween, and INGRESS. If any of these is DCNL not in the current configuration, this constraint will only organize DCNL itself based on the tweens that are present. DCNL Specifying neither ``over`` nor ``under`` is equivalent to specifying DCNL ``under=INGRESS``. DCNL Implicit tween ordering is obviously only best-effort.  Pyramid will DCNL attempt to present an implicit order of tweens as best it can, but DCNL the only surefire way to get any particular ordering is to use an DCNL explicit tween order.  A user may always override the implicit tween DCNL ordering by using an explicit ``pyramid.tweens`` configuration value DCNL setting. DCNL ``under``, and ``over`` arguments are ignored when an explicit tween DCNL chain is specified using the ``pyramid.tweens`` configuration value. DCNL For more information, see :ref:`registering_tweens`.'
@viewdefaults DCNL @action_method DCNL def add_view(self, view=None, name='', for_=None, permission=None, request_type=None, route_name=None, request_method=None, request_param=None, containment=None, attr=None, renderer=None, wrapper=None, xhr=None, accept=None, header=None, path_info=None, custom_predicates=(), context=None, decorator=None, mapper=None, http_cache=None, match_param=None, check_csrf=None, require_csrf=None, exception_only=False, **view_options): DCNL 'Add a :term:`view configuration` to the current DCNL configuration state.  Arguments to ``add_view`` are broken DCNL down below into *predicate* arguments and *non-predicate* DCNL arguments.  Predicate arguments narrow the circumstances in DCNL which the view callable will be invoked when a request is DCNL presented to :app:`Pyramid`; non-predicate arguments are DCNL informational. DCNL Non-Predicate Arguments DCNL view DCNL A :term:`view callable` or a :term:`dotted Python name` DCNL which refers to a view callable.  This argument is required DCNL unless a ``renderer`` argument also exists.  If a DCNL ``renderer`` argument is passed, and a ``view`` argument is DCNL not provided, the view callable defaults to a callable that DCNL returns an empty dictionary (see DCNL :ref:`views_which_use_a_renderer`). DCNL permission DCNL A :term:`permission` that the user must possess in order to invoke DCNL the :term:`view callable`.  See :ref:`view_security_section` for DCNL more information about view security and permissions.  This is DCNL often a string like ``view`` or ``edit``. DCNL If ``permission`` is omitted, a *default* permission may be used DCNL for this view registration if one was named as the DCNL :class:`pyramid.config.Configurator` constructor\'s DCNL ``default_permission`` argument, or if DCNL :meth:`pyramid.config.Configurator.set_default_permission` was used DCNL prior to this view registration.  Pass the value DCNL :data:`pyramid.security.NO_PERMISSION_REQUIRED` as the permission DCNL argument to explicitly indicate that the view should always be DCNL executable by entirely anonymous users, regardless of the default DCNL permission, bypassing any :term:`authorization policy` that may be DCNL in effect. DCNL attr DCNL This knob is most useful when the view definition is a class. DCNL The view machinery defaults to using the ``__call__`` method DCNL of the :term:`view callable` (or the function itself, if the DCNL view callable is a function) to obtain a response.  The DCNL ``attr`` value allows you to vary the method attribute used DCNL to obtain the response.  For example, if your view was a DCNL class, and the class has a method named ``index`` and you DCNL wanted to use this method instead of the class\' ``__call__`` DCNL method to return the response, you\'d say ``attr="index"`` in the DCNL view configuration for the view. DCNL renderer DCNL This is either a single string term (e.g. ``json``) or a DCNL string implying a path or :term:`asset specification` DCNL (e.g. ``templates/views.pt``) naming a :term:`renderer` DCNL implementation.  If the ``renderer`` value does not contain DCNL a dot ``.``, the specified string will be used to look up a DCNL renderer implementation, and that renderer implementation DCNL will be used to construct a response from the view return DCNL value.  If the ``renderer`` value contains a dot (``.``), DCNL the specified term will be treated as a path, and the DCNL filename extension of the last element in the path will be DCNL used to look up the renderer implementation, which will be DCNL passed the full path.  The renderer implementation will be DCNL used to construct a :term:`response` from the view return DCNL value. DCNL Note that if the view itself returns a :term:`response` (see DCNL :ref:`the_response`), the specified renderer implementation DCNL is never called. DCNL When the renderer is a path, although a path is usually just DCNL a simple relative pathname (e.g. ``templates/foo.pt``, DCNL implying that a template named "foo.pt" is in the DCNL "templates" directory relative to the directory of the DCNL current :term:`package` of the Configurator), a path can be DCNL absolute, starting with a slash on UNIX or a drive letter DCNL prefix on Windows.  The path can alternately be a DCNL :term:`asset specification` in the form DCNL ``some.dotted.package_name:relative/path``, making it DCNL possible to address template assets which live in a DCNL separate package. DCNL The ``renderer`` attribute is optional.  If it is not DCNL defined, the "null" renderer is assumed (no rendering is DCNL performed and the value is passed back to the upstream DCNL :app:`Pyramid` machinery unmodified). DCNL http_cache DCNL .. versionadded:: 1.1 DCNL When you supply an ``http_cache`` value to a view configuration, DCNL the ``Expires`` and ``Cache-Control`` headers of a response DCNL generated by the associated view callable are modified.  The value DCNL for ``http_cache`` may be one of the following: DCNL - A nonzero integer.  If it\'s a nonzero integer, it\'s treated as a DCNL number of seconds.  This number of seconds will be used to DCNL compute the ``Expires`` header and the ``Cache-Control: DCNL max-age`` parameter of responses to requests which call this view. DCNL For example: ``http_cache=3600`` instructs the requesting browser DCNL to \'cache this response for an hour, please\'. DCNL - A ``datetime.timedelta`` instance.  If it\'s a DCNL ``datetime.timedelta`` instance, it will be converted into a DCNL number of seconds, and that number of seconds will be used to DCNL compute the ``Expires`` header and the ``Cache-Control: DCNL max-age`` parameter of responses to requests which call this view. DCNL For example: ``http_cache=datetime.timedelta(days=1)`` instructs DCNL the requesting browser to \'cache this response for a day, please\'. DCNL - Zero (``0``).  If the value is zero, the ``Cache-Control`` and DCNL ``Expires`` headers present in all responses from this view will DCNL be composed such that client browser cache (and any intermediate DCNL caches) are instructed to never cache the response. DCNL - A two-tuple.  If it\'s a two tuple (e.g. ``http_cache=(1, DCNL {\'public\':True})``), the first value in the tuple may be a DCNL nonzero integer or a ``datetime.timedelta`` instance; in either DCNL case this value will be used as the number of seconds to cache DCNL the response.  The second value in the tuple must be a DCNL dictionary.  The values present in the dictionary will be used as DCNL input to the ``Cache-Control`` response header.  For example: DCNL ``http_cache=(3600, {\'public\':True})`` means \'cache for an hour, DCNL and add ``public`` to the Cache-Control header of the response\'. DCNL All keys and values supported by the DCNL ``webob.cachecontrol.CacheControl`` interface may be added to the DCNL dictionary.  Supplying ``{\'public\':True}`` is equivalent to DCNL calling ``response.cache_control.public = True``. DCNL Providing a non-tuple value as ``http_cache`` is equivalent to DCNL calling ``response.cache_expires(value)`` within your view\'s body. DCNL Providing a two-tuple value as ``http_cache`` is equivalent to DCNL calling ``response.cache_expires(value[0], **value[1])`` within your DCNL view\'s body. DCNL If you wish to avoid influencing, the ``Expires`` header, and DCNL instead wish to only influence ``Cache-Control`` headers, pass a DCNL tuple as ``http_cache`` with the first element of ``None``, e.g.: DCNL ``(None, {\'public\':True})``. DCNL If you wish to prevent a view that uses ``http_cache`` in its DCNL configuration from having its caching response headers changed by DCNL this machinery, set ``response.cache_control.prevent_auto = True`` DCNL before returning the response from the view.  This effectively DCNL disables any HTTP caching done by ``http_cache`` for that response. DCNL require_csrf DCNL .. versionadded:: 1.7 DCNL A boolean option or ``None``. Default: ``None``. DCNL If this option is set to ``True`` then CSRF checks will be enabled DCNL for requests to this view. The required token or header default to DCNL ``csrf_token`` and ``X-CSRF-Token``, respectively. DCNL CSRF checks only affect "unsafe" methods as defined by RFC2616. By DCNL default, these methods are anything except DCNL ``GET``, ``HEAD``, ``OPTIONS``, and ``TRACE``. DCNL The defaults here may be overridden by DCNL :meth:`pyramid.config.Configurator.set_default_csrf_options`. DCNL This feature requires a configured :term:`session factory`. DCNL If this option is set to ``False`` then CSRF checks will be disabled DCNL regardless of the default ``require_csrf`` setting passed DCNL to ``set_default_csrf_options``. DCNL See :ref:`auto_csrf_checking` for more information. DCNL wrapper DCNL The :term:`view name` of a different :term:`view DCNL configuration` which will receive the response body of this DCNL view as the ``request.wrapped_body`` attribute of its own DCNL :term:`request`, and the :term:`response` returned by this DCNL view as the ``request.wrapped_response`` attribute of its DCNL own request.  Using a wrapper makes it possible to "chain" DCNL views together to form a composite response.  The response DCNL of the outermost wrapper view will be returned to the user. DCNL The wrapper view will be found as any view is found: see DCNL :ref:`view_lookup`.  The "best" wrapper view will be found DCNL based on the lookup ordering: "under the hood" this wrapper DCNL view is looked up via DCNL ``pyramid.view.render_view_to_response(context, request, DCNL \'wrapper_viewname\')``. The context and request of a wrapper DCNL view is the same context and request of the inner view.  If DCNL this attribute is unspecified, no view wrapping is done. DCNL decorator DCNL A :term:`dotted Python name` to function (or the function itself, DCNL or an iterable of the aforementioned) which will be used to DCNL decorate the registered :term:`view callable`.  The decorator DCNL function(s) will be called with the view callable as a single DCNL argument.  The view callable it is passed will accept DCNL ``(context, request)``.  The decorator(s) must return a DCNL replacement view callable which also accepts ``(context, DCNL request)``. DCNL If decorator is an iterable, the callables will be combined and DCNL used in the order provided as a decorator. DCNL For example:: DCNL @view_config(..., DCNL decorator=(decorator2, DCNL decorator1)) DCNL def myview(request): DCNL Is similar to doing:: DCNL @view_config(...) DCNL @decorator2 DCNL @decorator1 DCNL def myview(request): DCNL Except with the existing benefits of ``decorator=`` (having a common DCNL decorator syntax for all view calling conventions and not having to DCNL think about preserving function attributes such as ``__name__`` and DCNL ``__module__`` within decorator logic). DCNL An important distinction is that each decorator will receive a DCNL response object implementing :class:`pyramid.interfaces.IResponse` DCNL instead of the raw value returned from the view callable. All DCNL decorators in the chain must return a response object or raise an DCNL exception: DCNL .. code-block:: python DCNL def log_timer(wrapped): DCNL def wrapper(context, request): DCNL start = time.time() DCNL response = wrapped(context, request) DCNL duration = time.time() - start DCNL response.headers[\'X-View-Time\'] = \'%.3f\' % (duration,) DCNL log.info(\'view took %.3f seconds\', duration) DCNL return response DCNL return wrapper DCNL .. versionchanged:: 1.4a4 DCNL Passing an iterable. DCNL mapper DCNL A Python object or :term:`dotted Python name` which refers to a DCNL :term:`view mapper`, or ``None``.  By default it is ``None``, which DCNL indicates that the view should use the default view mapper.  This DCNL plug-point is useful for Pyramid extension developers, but it\'s not DCNL very useful for \'civilians\' who are just developing stock Pyramid DCNL applications. Pay no attention to the man behind the curtain. DCNL accept DCNL This value represents a match query for one or more mimetypes in the DCNL ``Accept`` HTTP request header.  If this value is specified, it must DCNL be in one of the following forms: a mimetype match token in the form DCNL ``text/plain``, a wildcard mimetype match token in the form DCNL ``text/*`` or a match-all wildcard mimetype match token in the form DCNL ``*/*``.  If any of the forms matches the ``Accept`` header of the DCNL request, or if the ``Accept`` header isn\'t set at all in the request, DCNL this will match the current view. If this does not match the DCNL ``Accept`` header of the request, view matching continues. DCNL Predicate Arguments DCNL name DCNL The :term:`view name`.  Read :ref:`traversal_chapter` to DCNL understand the concept of a view name. DCNL context DCNL An object or a :term:`dotted Python name` referring to an DCNL interface or class object that the :term:`context` must be DCNL an instance of, *or* the :term:`interface` that the DCNL :term:`context` must provide in order for this view to be DCNL found and called.  This predicate is true when the DCNL :term:`context` is an instance of the represented class or DCNL if the :term:`context` provides the represented interface; DCNL it is otherwise false.  This argument may also be provided DCNL to ``add_view`` as ``for_`` (an older, still-supported DCNL spelling). If the view should *only* match when handling DCNL exceptions, then set the ``exception_only`` to ``True``. DCNL exception_only DCNL .. versionadded:: 1.8 DCNL When this value is ``True``, the ``context`` argument must be DCNL a subclass of ``Exception``. This flag indicates that only an DCNL :term:`exception view` should be created, and that this view should DCNL not match if the traversal :term:`context` matches the ``context`` DCNL argument. If the ``context`` is a subclass of ``Exception`` and DCNL this value is ``False`` (the default), then a view will be DCNL registered to match the traversal :term:`context` as well. DCNL route_name DCNL This value must match the ``name`` of a :term:`route DCNL configuration` declaration (see :ref:`urldispatch_chapter`) DCNL that must match before this view will be called. DCNL request_type DCNL This value should be an :term:`interface` that the DCNL :term:`request` must provide in order for this view to be DCNL found and called.  This value exists only for backwards DCNL compatibility purposes. DCNL request_method DCNL This value can be either a string (such as ``"GET"``, ``"POST"``, DCNL ``"PUT"``, ``"DELETE"``, ``"HEAD"`` or ``"OPTIONS"``) representing DCNL an HTTP ``REQUEST_METHOD``, or a tuple containing one or more of DCNL these strings.  A view declaration with this argument ensures that DCNL the view will only be called when the ``method`` attribute of the DCNL request (aka the ``REQUEST_METHOD`` of the WSGI environment) matches DCNL a supplied value.  Note that use of ``GET`` also implies that the DCNL view will respond to ``HEAD`` as of Pyramid 1.4. DCNL .. versionchanged:: 1.2 DCNL The ability to pass a tuple of items as ``request_method``. DCNL Previous versions allowed only a string. DCNL request_param DCNL This value can be any string or any sequence of strings.  A view DCNL declaration with this argument ensures that the view will only be DCNL called when the :term:`request` has a key in the ``request.params`` DCNL dictionary (an HTTP ``GET`` or ``POST`` variable) that has a DCNL name which matches the supplied value (if the value is a string) DCNL or values (if the value is a tuple).  If any value DCNL supplied has a ``=`` sign in it, DCNL e.g. ``request_param="foo=123"``, then the key (``foo``) DCNL must both exist in the ``request.params`` dictionary, *and* DCNL the value must match the right hand side of the expression DCNL (``123``) for the view to "match" the current request. DCNL match_param DCNL .. versionadded:: 1.2 DCNL This value can be a string of the format "key=value" or a tuple DCNL containing one or more of these strings. DCNL A view declaration with this argument ensures that the view will DCNL only be called when the :term:`request` has key/value pairs in its DCNL :term:`matchdict` that equal those supplied in the predicate. DCNL e.g. ``match_param="action=edit"`` would require the ``action`` DCNL parameter in the :term:`matchdict` match the right hand side of DCNL the expression (``edit``) for the view to "match" the current DCNL request. DCNL If the ``match_param`` is a tuple, every key/value pair must match DCNL for the predicate to pass. DCNL containment DCNL This value should be a Python class or :term:`interface` (or a DCNL :term:`dotted Python name`) that an object in the DCNL :term:`lineage` of the context must provide in order for this view DCNL to be found and called.  The nodes in your object graph must be DCNL "location-aware" to use this feature.  See DCNL :ref:`location_aware` for more information about DCNL location-awareness. DCNL xhr DCNL This value should be either ``True`` or ``False``.  If this DCNL value is specified and is ``True``, the :term:`request` DCNL must possess an ``HTTP_X_REQUESTED_WITH`` (aka DCNL ``X-Requested-With``) header that has the value DCNL ``XMLHttpRequest`` for this view to be found and called. DCNL This is useful for detecting AJAX requests issued from DCNL jQuery, Prototype and other Javascript libraries. DCNL header DCNL This value represents an HTTP header name or a header DCNL name/value pair.  If the value contains a ``:`` (colon), it DCNL will be considered a name/value pair DCNL (e.g. ``User-Agent:Mozilla/.*`` or ``Host:localhost``).  The DCNL value portion should be a regular expression.  If the value DCNL does not contain a colon, the entire value will be DCNL considered to be the header name DCNL (e.g. ``If-Modified-Since``).  If the value evaluates to a DCNL header name only without a value, the header specified by DCNL the name must be present in the request for this predicate DCNL to be true.  If the value evaluates to a header name/value DCNL pair, the header specified by the name must be present in DCNL the request *and* the regular expression specified as the DCNL value must match the header value.  Whether or not the value DCNL represents a header name or a header name/value pair, the DCNL case of the header name is not significant. DCNL path_info DCNL This value represents a regular expression pattern that will DCNL be tested against the ``PATH_INFO`` WSGI environment DCNL variable.  If the regex matches, this predicate will be DCNL ``True``. DCNL check_csrf DCNL .. deprecated:: 1.7 DCNL Use the ``require_csrf`` option or see :ref:`auto_csrf_checking` DCNL instead to have :class:`pyramid.exceptions.BadCSRFToken` DCNL exceptions raised. DCNL If specified, this value should be one of ``None``, ``True``, DCNL ``False``, or a string representing the \'check name\'.  If the value DCNL is ``True`` or a string, CSRF checking will be performed.  If the DCNL value is ``False`` or ``None``, CSRF checking will not be performed. DCNL If the value provided is a string, that string will be used as the DCNL \'check name\'.  If the value provided is ``True``, ``csrf_token`` will DCNL be used as the check name. DCNL If CSRF checking is performed, the checked value will be the value of DCNL ``request.params[check_name]``. This value will be compared against DCNL the value of ``policy.get_csrf_token()`` (where ``policy`` is an DCNL implementation of :meth:`pyramid.interfaces.ICSRFStoragePolicy`), and the DCNL check will pass if these two values are the same. If the check DCNL passes, the associated view will be permitted to execute. If the DCNL check fails, the associated view will not be permitted to execute. DCNL .. versionadded:: 1.4a2 DCNL .. versionchanged:: 1.9 DCNL This feature requires either a :term:`session factory` to have been DCNL configured, or a :term:`CSRF storage policy` other than the default DCNL to be in use. DCNL physical_path DCNL If specified, this value should be a string or a tuple representing DCNL the :term:`physical path` of the context found via traversal for this DCNL predicate to match as true.  For example: ``physical_path=\'/\'`` or DCNL ``physical_path=\'/a/b/c\'`` or ``physical_path=(\'\', \'a\', \'b\', \'c\')``. DCNL This is not a path prefix match or a regex, it\'s a whole-path match. DCNL It\'s useful when you want to always potentially show a view when some DCNL object is traversed to, but you can\'t be sure about what kind of DCNL object it will be, so you can\'t use the ``context`` predicate.  The DCNL individual path elements inbetween slash characters or in tuple DCNL elements should be the Unicode representation of the name of the DCNL resource and should not be encoded in any way. DCNL .. versionadded:: 1.4a3 DCNL effective_principals DCNL If specified, this value should be a :term:`principal` identifier or DCNL a sequence of principal identifiers.  If the DCNL :attr:`pyramid.request.Request.effective_principals` property DCNL indicates that every principal named in the argument list is present DCNL in the current request, this predicate will return True; otherwise it DCNL will return False.  For example: DCNL ``effective_principals=pyramid.security.Authenticated`` or DCNL ``effective_principals=(\'fred\', \'group:admins\')``. DCNL .. versionadded:: 1.4a4 DCNL custom_predicates DCNL .. deprecated:: 1.5 DCNL This value should be a sequence of references to custom DCNL predicate callables.  Use custom predicates when no set of DCNL predefined predicates do what you need.  Custom predicates DCNL can be combined with predefined predicates as necessary. DCNL Each custom predicate callable should accept two arguments: DCNL ``context`` and ``request`` and should return either DCNL ``True`` or ``False`` after doing arbitrary evaluation of DCNL the context and/or the request.  The ``predicates`` argument DCNL to this method and the ability to register third-party view DCNL predicates via DCNL :meth:`pyramid.config.Configurator.add_view_predicate` DCNL obsoletes this argument, but it is kept around for backwards DCNL compatibility. DCNL view_options DCNL Pass a key/value pair here to use a third-party predicate or set a DCNL value for a view deriver. See DCNL :meth:`pyramid.config.Configurator.add_view_predicate` and DCNL :meth:`pyramid.config.Configurator.add_view_deriver`. See DCNL :ref:`view_and_route_predicates` for more information about DCNL third-party predicates and :ref:`view_derivers` for information DCNL about view derivers. DCNL .. versionadded: 1.4a1 DCNL .. versionchanged: 1.7 DCNL Support setting view deriver options. Previously, only custom DCNL view predicate values could be supplied.'
@action_method DCNL def add_view_predicate(self, name, factory, weighs_more_than=None, weighs_less_than=None): DCNL '.. versionadded:: 1.4 DCNL Adds a view predicate factory.  The associated view predicate can DCNL later be named as a keyword argument to DCNL :meth:`pyramid.config.Configurator.add_view` in the DCNL ``predicates`` anonyous keyword argument dictionary. DCNL ``name`` should be the name of the predicate.  It must be a valid DCNL Python identifier (it will be used as a keyword argument to DCNL ``add_view`` by others). DCNL ``factory`` should be a :term:`predicate factory` or :term:`dotted DCNL Python name` which refers to a predicate factory. DCNL See :ref:`view_and_route_predicates` for more information.'
@action_method DCNL def add_view_deriver(self, deriver, name=None, under=None, over=None): DCNL '.. versionadded:: 1.7 DCNL Add a :term:`view deriver` to the view pipeline. View derivers are DCNL a feature used by extension authors to wrap views in custom code DCNL controllable by view-specific options. DCNL ``deriver`` should be a callable conforming to the DCNL :class:`pyramid.interfaces.IViewDeriver` interface. DCNL ``name`` should be the name of the view deriver.  There are no DCNL restrictions on the name of a view deriver. If left unspecified, the DCNL name will be constructed from the name of the ``deriver``. DCNL The ``under`` and ``over`` options can be used to control the ordering DCNL of view derivers by providing hints about where in the view pipeline DCNL the deriver is used. Each option may be a string or a list of strings. DCNL At least one view deriver in each, the over and under directions, must DCNL exist to fully satisfy the constraints. DCNL ``under`` means closer to the user-defined :term:`view callable`, DCNL and ``over`` means closer to view pipeline ingress. DCNL The default value for ``over`` is ``rendered_view`` and ``under`` is DCNL ``decorated_view``. This places the deriver somewhere between the two DCNL in the view pipeline. If the deriver should be placed elsewhere in the DCNL pipeline, such as above ``decorated_view``, then you MUST also specify DCNL ``under`` to something earlier in the order, or a DCNL ``CyclicDependencyError`` will be raised when trying to sort the DCNL derivers. DCNL See :ref:`view_derivers` for more information.'
def derive_view(self, view, attr=None, renderer=None): DCNL 'Create a :term:`view callable` using the function, instance, DCNL or class (or :term:`dotted Python name` referring to the same) DCNL provided as ``view`` object. DCNL .. warning:: DCNL This method is typically only used by :app:`Pyramid` framework DCNL extension authors, not by :app:`Pyramid` application developers. DCNL This is API is useful to framework extenders who create DCNL pluggable systems which need to register \'proxy\' view DCNL callables for functions, instances, or classes which meet the DCNL requirements of being a :app:`Pyramid` view callable.  For DCNL example, a ``some_other_framework`` function in another DCNL framework may want to allow a user to supply a view callable, DCNL but he may want to wrap the view callable in his own before DCNL registering the wrapper as a :app:`Pyramid` view callable. DCNL Because a :app:`Pyramid` view callable can be any of a DCNL number of valid objects, the framework extender will not know DCNL how to call the user-supplied object.  Running it through DCNL ``derive_view`` normalizes it to a callable which accepts two DCNL arguments: ``context`` and ``request``. DCNL For example: DCNL .. code-block:: python DCNL def some_other_framework(user_supplied_view): DCNL config = Configurator(reg) DCNL proxy_view = config.derive_view(user_supplied_view) DCNL def my_wrapper(context, request): DCNL do_something_that_mutates(request) DCNL return proxy_view(context, request) DCNL config.add_view(my_wrapper) DCNL The ``view`` object provided should be one of the following: DCNL - A function or another non-class callable object that accepts DCNL a :term:`request` as a single positional argument and which DCNL returns a :term:`response` object. DCNL - A function or other non-class callable object that accepts DCNL two positional arguments, ``context, request`` and which DCNL returns a :term:`response` object. DCNL - A class which accepts a single positional argument in its DCNL constructor named ``request``, and which has a ``__call__`` DCNL method that accepts no arguments that returns a DCNL :term:`response` object. DCNL - A class which accepts two positional arguments named DCNL ``context, request``, and which has a ``__call__`` method DCNL that accepts no arguments that returns a :term:`response` DCNL object. DCNL - A :term:`dotted Python name` which refers to any of the DCNL kinds of objects above. DCNL This API returns a callable which accepts the arguments DCNL ``context, request`` and which returns the result of calling DCNL the provided ``view`` object. DCNL The ``attr`` keyword argument is most useful when the view DCNL object is a class.  It names the method that should be used as DCNL the callable.  If ``attr`` is not provided, the attribute DCNL effectively defaults to ``__call__``.  See DCNL :ref:`class_as_view` for more information. DCNL The ``renderer`` keyword argument should be a renderer DCNL name. If supplied, it will cause the returned callable to use DCNL a :term:`renderer` to convert the user-supplied view result to DCNL a :term:`response` object.  If a ``renderer`` argument is not DCNL supplied, the user-supplied view must itself return a DCNL :term:`response` object.'
@viewdefaults DCNL @action_method DCNL def add_forbidden_view(self, view=None, attr=None, renderer=None, wrapper=None, route_name=None, request_type=None, request_method=None, request_param=None, containment=None, xhr=None, accept=None, header=None, path_info=None, custom_predicates=(), decorator=None, mapper=None, match_param=None, **view_options): DCNL 'Add a forbidden view to the current configuration state.  The DCNL view will be called when Pyramid or application code raises a DCNL :exc:`pyramid.httpexceptions.HTTPForbidden` exception and the set of DCNL circumstances implied by the predicates provided are matched.  The DCNL simplest example is: DCNL .. code-block:: python DCNL def forbidden(request): DCNL return Response(\'Forbidden\', status=\'403 Forbidden\') DCNL config.add_forbidden_view(forbidden) DCNL If ``view`` argument is not provided, the view callable defaults to DCNL :func:`~pyramid.httpexceptions.default_exceptionresponse_view`. DCNL All arguments have the same meaning as DCNL :meth:`pyramid.config.Configurator.add_view` and each predicate DCNL argument restricts the set of circumstances under which this forbidden DCNL view will be invoked.  Unlike DCNL :meth:`pyramid.config.Configurator.add_view`, this method will raise DCNL an exception if passed ``name``, ``permission``, ``require_csrf``, DCNL ``context``, ``for_``, or ``exception_only`` keyword arguments. These DCNL argument values make no sense in the context of a forbidden DCNL :term:`exception view`. DCNL .. versionadded:: 1.3 DCNL .. versionchanged:: 1.8 DCNL The view is created using ``exception_only=True``.'
@viewdefaults DCNL @action_method DCNL def add_notfound_view(self, view=None, attr=None, renderer=None, wrapper=None, route_name=None, request_type=None, request_method=None, request_param=None, containment=None, xhr=None, accept=None, header=None, path_info=None, custom_predicates=(), decorator=None, mapper=None, match_param=None, append_slash=False, **view_options): DCNL 'Add a default :term:`Not Found View` to the current configuration DCNL state. The view will be called when Pyramid or application code raises DCNL an :exc:`pyramid.httpexceptions.HTTPNotFound` exception (e.g., when a DCNL view cannot be found for the request).  The simplest example is: DCNL .. code-block:: python DCNL def notfound(request): DCNL return Response(\'Not Found\', status=\'404 Not Found\') DCNL config.add_notfound_view(notfound) DCNL If ``view`` argument is not provided, the view callable defaults to DCNL :func:`~pyramid.httpexceptions.default_exceptionresponse_view`. DCNL All arguments except ``append_slash`` have the same meaning as DCNL :meth:`pyramid.config.Configurator.add_view` and each predicate DCNL argument restricts the set of circumstances under which this notfound DCNL view will be invoked.  Unlike DCNL :meth:`pyramid.config.Configurator.add_view`, this method will raise DCNL an exception if passed ``name``, ``permission``, ``require_csrf``, DCNL ``context``, ``for_``, or ``exception_only`` keyword arguments. These DCNL argument values make no sense in the context of a Not Found View. DCNL If ``append_slash`` is ``True``, when this Not Found View is invoked, DCNL and the current path info does not end in a slash, the notfound logic DCNL will attempt to find a :term:`route` that matches the request\'s path DCNL info suffixed with a slash.  If such a route exists, Pyramid will DCNL issue a redirect to the URL implied by the route; if it does not, DCNL Pyramid will return the result of the view callable provided as DCNL ``view``, as normal. DCNL If the argument provided as ``append_slash`` is not a boolean but DCNL instead implements :class:`~pyramid.interfaces.IResponse`, the DCNL append_slash logic will behave as if ``append_slash=True`` was passed, DCNL but the provided class will be used as the response class instead of DCNL the default :class:`~pyramid.httpexceptions.HTTPFound` response class DCNL when a redirect is performed.  For example: DCNL .. code-block:: python DCNL from pyramid.httpexceptions import HTTPMovedPermanently DCNL config.add_notfound_view(append_slash=HTTPMovedPermanently) DCNL The above means that a redirect to a slash-appended route will be DCNL attempted, but instead of :class:`~pyramid.httpexceptions.HTTPFound` DCNL being used, :class:`~pyramid.httpexceptions.HTTPMovedPermanently will DCNL be used` for the redirect response if a slash-appended route is found. DCNL .. versionadded:: 1.3 DCNL .. versionchanged:: 1.6 DCNL The ``append_slash`` argument was modified to allow any object that DCNL implements the ``IResponse`` interface to specify the response class DCNL used when a redirect is performed. DCNL .. versionchanged:: 1.8 DCNL The view is created using ``exception_only=True``.'
@viewdefaults DCNL @action_method DCNL def add_exception_view(self, view=None, context=None, **view_options): DCNL 'Add an :term:`exception view` for the specified ``exception`` to DCNL the current configuration state. The view will be called when Pyramid DCNL or application code raises the given exception. DCNL This method accepts almost all of the same arguments as DCNL :meth:`pyramid.config.Configurator.add_view` except for ``name``, DCNL ``permission``, ``for_``, ``require_csrf``, and ``exception_only``. DCNL By default, this method will set ``context=Exception``, thus DCNL registering for most default Python exceptions. Any subclass of DCNL ``Exception`` may be specified. DCNL .. versionadded:: 1.8'
@action_method DCNL def set_view_mapper(self, mapper): DCNL 'Setting a :term:`view mapper` makes it possible to make use of DCNL :term:`view callable` objects which implement different call DCNL signatures than the ones supported by :app:`Pyramid` as described in DCNL its narrative documentation. DCNL The ``mapper`` argument should be an object implementing DCNL :class:`pyramid.interfaces.IViewMapperFactory` or a :term:`dotted DCNL Python name` to such an object.  The provided ``mapper`` will become DCNL the default view mapper to be used by all subsequent :term:`view DCNL configuration` registrations. DCNL .. seealso:: DCNL See also :ref:`using_a_view_mapper`. DCNL .. note:: DCNL Using the ``default_view_mapper`` argument to the DCNL :class:`pyramid.config.Configurator` constructor DCNL can be used to achieve the same purpose.'
@action_method DCNL def add_static_view(self, name, path, **kw): DCNL 'Add a view used to render static assets such as images DCNL and CSS files. DCNL The ``name`` argument is a string representing an DCNL application-relative local URL prefix.  It may alternately be a full DCNL URL. DCNL The ``path`` argument is the path on disk where the static files DCNL reside.  This can be an absolute path, a package-relative path, or a DCNL :term:`asset specification`. DCNL The ``cache_max_age`` keyword argument is input to set the DCNL ``Expires`` and ``Cache-Control`` headers for static assets served. DCNL Note that this argument has no effect when the ``name`` is a *url DCNL prefix*.  By default, this argument is ``None``, meaning that no DCNL particular Expires or Cache-Control headers are set in the response. DCNL The ``permission`` keyword argument is used to specify the DCNL :term:`permission` required by a user to execute the static view.  By DCNL default, it is the string DCNL :data:`pyramid.security.NO_PERMISSION_REQUIRED`, a special sentinel DCNL which indicates that, even if a :term:`default permission` exists for DCNL the current application, the static view should be renderered to DCNL completely anonymous users.  This default value is permissive DCNL because, in most web apps, static assets seldom need protection from DCNL viewing.  If ``permission`` is specified, the security checking will DCNL be performed against the default root factory ACL. DCNL Any other keyword arguments sent to ``add_static_view`` are passed on DCNL to :meth:`pyramid.config.Configurator.add_route` (e.g. ``factory``, DCNL perhaps to define a custom factory with a custom ACL for this static DCNL view). DCNL *Usage* DCNL The ``add_static_view`` function is typically used in conjunction DCNL with the :meth:`pyramid.request.Request.static_url` method. DCNL ``add_static_view`` adds a view which renders a static asset when DCNL some URL is visited; :meth:`pyramid.request.Request.static_url` DCNL generates a URL to that asset. DCNL The ``name`` argument to ``add_static_view`` is usually a simple URL DCNL prefix (e.g. ``\'images\'``).  When this is the case, the DCNL :meth:`pyramid.request.Request.static_url` API will generate a URL DCNL which points to a Pyramid view, which will serve up a set of assets DCNL that live in the package itself. For example: DCNL .. code-block:: python DCNL add_static_view(\'images\', \'mypackage:images/\') DCNL Code that registers such a view can generate URLs to the view via DCNL :meth:`pyramid.request.Request.static_url`: DCNL .. code-block:: python DCNL request.static_url(\'mypackage:images/logo.png\') DCNL When ``add_static_view`` is called with a ``name`` argument that DCNL represents a URL prefix, as it is above, subsequent calls to DCNL :meth:`pyramid.request.Request.static_url` with paths that start with DCNL the ``path`` argument passed to ``add_static_view`` will generate a DCNL URL something like ``http://<Pyramid app URL>/images/logo.png``, DCNL which will cause the ``logo.png`` file in the ``images`` subdirectory DCNL of the ``mypackage`` package to be served. DCNL ``add_static_view`` can alternately be used with a ``name`` argument DCNL which is a *URL*, causing static assets to be served from an external DCNL webserver.  This happens when the ``name`` argument is a fully DCNL qualified URL (e.g. starts with ``http://`` or similar).  In this DCNL mode, the ``name`` is used as the prefix of the full URL when DCNL generating a URL using :meth:`pyramid.request.Request.static_url`. DCNL Furthermore, if a protocol-relative URL (e.g. ``//example.com/images``) DCNL is used as the ``name`` argument, the generated URL will use the DCNL protocol of the request (http or https, respectively). DCNL For example, if ``add_static_view`` is called like so: DCNL .. code-block:: python DCNL add_static_view(\'http://example.com/images\', \'mypackage:images/\') DCNL Subsequently, the URLs generated by DCNL :meth:`pyramid.request.Request.static_url` for that static view will DCNL be prefixed with ``http://example.com/images`` (the external webserver DCNL listening on ``example.com`` must be itself configured to respond DCNL properly to such a request.): DCNL .. code-block:: python DCNL static_url(\'mypackage:images/logo.png\', request) DCNL See :ref:`static_assets_section` for more information.'
def add_cache_buster(self, path, cachebust, explicit=False): DCNL 'Add a cache buster to a set of files on disk. DCNL The ``path`` should be the path on disk where the static files DCNL reside.  This can be an absolute path, a package-relative path, or a DCNL :term:`asset specification`. DCNL The ``cachebust`` argument may be set to cause DCNL :meth:`~pyramid.request.Request.static_url` to use cache busting when DCNL generating URLs. See :ref:`cache_busting` for general information DCNL about cache busting. The value of the ``cachebust`` argument must DCNL be an object which implements DCNL :class:`~pyramid.interfaces.ICacheBuster`. DCNL If ``explicit`` is set to ``True`` then the ``path`` for the cache DCNL buster will be matched based on the ``rawspec`` instead of the DCNL ``pathspec`` as defined in the DCNL :class:`~pyramid.interfaces.ICacheBuster` interface. DCNL Default: ``False``.'
@action_method DCNL def set_root_factory(self, factory): DCNL 'Add a :term:`root factory` to the current configuration DCNL state.  If the ``factory`` argument is ``None`` a default root DCNL factory will be registered. DCNL .. note:: DCNL Using the ``root_factory`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
@action_method DCNL def set_session_factory(self, factory): DCNL 'Configure the application with a :term:`session factory`.  If this DCNL method is called, the ``factory`` argument must be a session DCNL factory callable or a :term:`dotted Python name` to that factory. DCNL .. note:: DCNL Using the ``session_factory`` argument to the DCNL :class:`pyramid.config.Configurator` constructor can be used to DCNL achieve the same purpose.'
@action_method DCNL def set_request_factory(self, factory): DCNL 'The object passed as ``factory`` should be an object (or a DCNL :term:`dotted Python name` which refers to an object) which DCNL will be used by the :app:`Pyramid` router to create all DCNL request objects.  This factory object must have the same DCNL methods and attributes as the DCNL :class:`pyramid.request.Request` class (particularly DCNL ``__call__``, and ``blank``). DCNL See :meth:`pyramid.config.Configurator.add_request_method` DCNL for a less intrusive way to extend the request objects with DCNL custom methods and properties. DCNL .. note:: DCNL Using the ``request_factory`` argument to the DCNL :class:`pyramid.config.Configurator` constructor DCNL can be used to achieve the same purpose.'
@action_method DCNL def set_response_factory(self, factory): DCNL 'The object passed as ``factory`` should be an object (or a DCNL :term:`dotted Python name` which refers to an object) which DCNL will be used by the :app:`Pyramid` as the default response DCNL objects. The factory should conform to the DCNL :class:`pyramid.interfaces.IResponseFactory` interface. DCNL .. note:: DCNL Using the ``response_factory`` argument to the DCNL :class:`pyramid.config.Configurator` constructor DCNL can be used to achieve the same purpose.'
@action_method DCNL def add_request_method(self, callable=None, name=None, property=False, reify=False): DCNL 'Add a property or method to the request object. DCNL When adding a method to the request, ``callable`` may be any DCNL function that receives the request object as the first DCNL parameter. If ``name`` is ``None`` then it will be computed DCNL from the name of the ``callable``. DCNL When adding a property to the request, ``callable`` can either DCNL be a callable that accepts the request as its single positional DCNL parameter, or it can be a property descriptor. If ``name`` is DCNL ``None``, the name of the property will be computed from the DCNL name of the ``callable``. DCNL If the ``callable`` is a property descriptor a ``ValueError`` DCNL will be raised if ``name`` is ``None`` or ``reify`` is ``True``. DCNL See :meth:`pyramid.request.Request.set_property` for more DCNL details on ``property`` vs ``reify``. When ``reify`` is DCNL ``True``, the value of ``property`` is assumed to also be DCNL ``True``. DCNL In all cases, ``callable`` may also be a DCNL :term:`dotted Python name` which refers to either a callable or DCNL a property descriptor. DCNL If ``callable`` is ``None`` then the method is only used to DCNL assist in conflict detection between different addons requesting DCNL the same attribute on the request object. DCNL This is the recommended method for extending the request object DCNL and should be used in favor of providing a custom request DCNL factory via DCNL :meth:`pyramid.config.Configurator.set_request_factory`. DCNL .. versionadded:: 1.4'
@action_method DCNL def set_request_property(self, callable, name=None, reify=False): DCNL 'Add a property to the request object. DCNL .. deprecated:: 1.5 DCNL :meth:`pyramid.config.Configurator.add_request_method` should be DCNL used instead.  (This method was docs-deprecated in 1.4 and DCNL issues a real deprecation warning in 1.5). DCNL .. versionadded:: 1.3'
@action_method DCNL def set_execution_policy(self, policy): DCNL 'Override the :app:`Pyramid` :term:`execution policy` in the DCNL current configuration.  The ``policy`` argument must be an instance DCNL of an :class:`pyramid.interfaces.IExecutionPolicy` or a DCNL :term:`dotted Python name` that points at an instance of an DCNL execution policy.'
@action_method DCNL def add_subscriber(self, subscriber, iface=None, **predicates): DCNL 'Add an event :term:`subscriber` for the event stream DCNL implied by the supplied ``iface`` interface. DCNL The ``subscriber`` argument represents a callable object (or a DCNL :term:`dotted Python name` which identifies a callable); it will be DCNL called with a single object ``event`` whenever :app:`Pyramid` emits DCNL an :term:`event` associated with the ``iface``, which may be an DCNL :term:`interface` or a class or a :term:`dotted Python name` to a DCNL global object representing an interface or a class. DCNL Using the default ``iface`` value, ``None`` will cause the subscriber DCNL to be registered for all event types. See :ref:`events_chapter` for DCNL more information about events and subscribers. DCNL Any number of predicate keyword arguments may be passed in DCNL ``**predicates``.  Each predicate named will narrow the set of DCNL circumstances in which the subscriber will be invoked.  Each named DCNL predicate must have been registered via DCNL :meth:`pyramid.config.Configurator.add_subscriber_predicate` before it DCNL can be used.  See :ref:`subscriber_predicates` for more information. DCNL .. versionadded:: 1.4 DCNL The ``**predicates`` argument.'
@action_method DCNL def add_subscriber_predicate(self, name, factory, weighs_more_than=None, weighs_less_than=None): DCNL '.. versionadded:: 1.4 DCNL Adds a subscriber predicate factory.  The associated subscriber DCNL predicate can later be named as a keyword argument to DCNL :meth:`pyramid.config.Configurator.add_subscriber` in the DCNL ``**predicates`` anonymous keyword argument dictionary. DCNL ``name`` should be the name of the predicate.  It must be a valid DCNL Python identifier (it will be used as a ``**predicates`` keyword DCNL argument to :meth:`~pyramid.config.Configurator.add_subscriber`). DCNL ``factory`` should be a :term:`predicate factory` or :term:`dotted DCNL Python name` which refers to a predicate factory. DCNL See :ref:`subscriber_predicates` for more information.'
@action_method DCNL def add_response_adapter(self, adapter, type_or_iface): DCNL 'When an object of type (or interface) ``type_or_iface`` is DCNL returned from a view callable, Pyramid will use the adapter DCNL ``adapter`` to convert it into an object which implements the DCNL :class:`pyramid.interfaces.IResponse` interface.  If ``adapter`` is DCNL None, an object returned of type (or interface) ``type_or_iface`` DCNL will itself be used as a response object. DCNL ``adapter`` and ``type_or_interface`` may be Python objects or DCNL strings representing dotted names to importable Python global DCNL objects. DCNL See :ref:`using_iresponse` for more information.'
@action_method DCNL def add_traverser(self, adapter, iface=None): DCNL 'The superdefault :term:`traversal` algorithm that :app:`Pyramid` uses DCNL is explained in :ref:`traversal_algorithm`.  Though it is rarely DCNL necessary, this default algorithm can be swapped out selectively for DCNL a different traversal pattern via configuration.  The section DCNL entitled :ref:`changing_the_traverser` details how to create a DCNL traverser class. DCNL For example, to override the superdefault traverser used by Pyramid, DCNL you might do something like this: DCNL .. code-block:: python DCNL from myapp.traversal import MyCustomTraverser DCNL config.add_traverser(MyCustomTraverser) DCNL This would cause the Pyramid superdefault traverser to never be used; DCNL instead all traversal would be done using your ``MyCustomTraverser`` DCNL class, no matter which object was returned by the :term:`root DCNL factory` of this application.  Note that we passed no arguments to DCNL the ``iface`` keyword parameter.  The default value of ``iface``, DCNL ``None`` represents that the registered traverser should be used when DCNL no other more specific traverser is available for the object returned DCNL by the root factory. DCNL However, more than one traversal algorithm can be active at the same DCNL time.  The traverser used can depend on the result of the :term:`root DCNL factory`.  For instance, if your root factory returns more than one DCNL type of object conditionally, you could claim that an alternate DCNL traverser adapter should be used against one particular class or DCNL interface returned by that root factory.  When the root factory DCNL returned an object that implemented that class or interface, a custom DCNL traverser would be used.  Otherwise, the default traverser would be DCNL used.  The ``iface`` argument represents the class of the object that DCNL the root factory might return or an :term:`interface` that the object DCNL might implement. DCNL To use a particular traverser only when the root factory returns a DCNL particular class: DCNL .. code-block:: python DCNL config.add_traverser(MyCustomTraverser, MyRootClass) DCNL When more than one traverser is active, the "most specific" traverser DCNL will be used (the one that matches the class or interface of the DCNL value returned by the root factory most closely). DCNL Note that either ``adapter`` or ``iface`` can be a :term:`dotted DCNL Python name` or a Python object. DCNL See :ref:`changing_the_traverser` for more information.'
@action_method DCNL def add_resource_url_adapter(self, adapter, resource_iface=None): DCNL '.. versionadded:: 1.3 DCNL When you add a traverser as described in DCNL :ref:`changing_the_traverser`, it\'s convenient to continue to use the DCNL :meth:`pyramid.request.Request.resource_url` API.  However, since the DCNL way traversal is done may have been modified, the URLs that DCNL ``resource_url`` generates by default may be incorrect when resources DCNL are returned by a custom traverser. DCNL If you\'ve added a traverser, you can change how DCNL :meth:`~pyramid.request.Request.resource_url` generates a URL for a DCNL specific type of resource by calling this method. DCNL The ``adapter`` argument represents a class that implements the DCNL :class:`~pyramid.interfaces.IResourceURL` interface.  The class DCNL constructor should accept two arguments in its constructor (the DCNL resource and the request) and the resulting instance should provide DCNL the attributes detailed in that interface (``virtual_path`` and DCNL ``physical_path``, in particular). DCNL The ``resource_iface`` argument represents a class or interface that DCNL the resource should possess for this url adapter to be used when DCNL :meth:`pyramid.request.Request.resource_url` looks up a resource url DCNL adapter.  If ``resource_iface`` is not passed, or it is passed as DCNL ``None``, the url adapter will be used for every type of resource. DCNL See :ref:`changing_resource_url` for more information.'
def loads(self, bstruct): DCNL 'Accept bytes and return a Python object.'
def dumps(self, appstruct): DCNL 'Accept a Python object and return bytes.'
def invoke_subrequest(self, request, use_tweens=False): DCNL 'Obtain a response object from the Pyramid application based on DCNL information in the ``request`` object provided.  The ``request`` DCNL object must be an object that implements the Pyramid request DCNL interface (such as a :class:`pyramid.request.Request` instance).  If DCNL ``use_tweens`` is ``True``, the request will be sent to the DCNL :term:`tween` in the tween stack closest to the request ingress.  If DCNL ``use_tweens`` is ``False``, the request will be sent to the main DCNL router handler, and no tweens will be invoked. DCNL See the API for pyramid.request for complete documentation.'
def request_context(self, environ): DCNL 'Create a new request context from a WSGI environ. DCNL The request context is used to push/pop the threadlocals required DCNL when processing the request. It also contains an initialized DCNL :class:`pyramid.interfaces.IRequest` instance using the registered DCNL :class:`pyramid.interfaces.IRequestFactory`. The context may be DCNL used as a context manager to control the threadlocal lifecycle: DCNL .. code-block:: python DCNL with router.request_context(environ) as request: DCNL Alternatively, the context may be used without the ``with`` statement DCNL by manually invoking its ``begin()`` and ``end()`` methods. DCNL .. code-block:: python DCNL ctx = router.request_context(environ) DCNL request = ctx.begin() DCNL try: DCNL finally: DCNL ctx.end()'
def invoke_request(self, request, _use_tweens=True): DCNL 'Execute a request through the request processing pipeline and DCNL return the generated response.'
def __call__(self, environ, start_response): DCNL 'Accept ``environ`` and ``start_response``; create a DCNL :term:`request` and route the request to a :app:`Pyramid` DCNL view based on introspection of :term:`view configuration` DCNL within the application registry; call ``start_response`` and DCNL return an iterable.'
def __getattr__(self, k): DCNL 'Backwards compatibility'
def assert_(self, **kw): DCNL 'Accept an arbitrary set of assertion key/value pairs.  For DCNL each assertion key/value pair assert that the renderer DCNL (eg. :func:`pyramid.renderers.render_to_response`) DCNL received the key with a value that equals the asserted DCNL value. If the renderer did not receive the key at all, or the DCNL value received by the renderer doesn\'t match the assertion DCNL value, raise an :exc:`AssertionError`.'
def __init__(self, __name__=None, __parent__=None, __provides__=None, **kw): DCNL 'The resource\'s ``__name__`` attribute will be set to the DCNL value of the ``__name__`` argument, and the resource\'s DCNL ``__parent__`` attribute will be set to the value of the DCNL ``__parent__`` argument.  If ``__provides__`` is specified, it DCNL should be an interface object or tuple of interface objects DCNL that will be attached to the resulting resource via DCNL :func:`zope.interface.alsoProvides`. Any extra keywords passed DCNL in the ``kw`` argumnent will be set as direct attributes of DCNL the resource object. DCNL .. note:: For backwards compatibility purposes, this class can also DCNL be imported as :class:`pyramid.testing.DummyModel`.'
def __setitem__(self, name, val): DCNL 'When the ``__setitem__`` method is called, the object DCNL passed in as ``val`` will be decorated with a ``__parent__`` DCNL attribute pointing at the dummy resource and a ``__name__`` DCNL attribute that is the value of ``name``.  The value will then DCNL be returned when dummy resource\'s ``__getitem__`` is called with DCNL the name ``name```.'
def __getitem__(self, name): DCNL 'Return a named subobject (see ``__setitem__``)'
def values(self): DCNL 'Return the values set by __setitem__'
def items(self): DCNL 'Return the items set by __setitem__'
def keys(self): DCNL 'Return the keys set by __setitem__'
def clone(self, __name__=_marker, __parent__=_marker, **kw): DCNL 'Create a clone of the resource object.  If ``__name__`` or DCNL ``__parent__`` arguments are passed, use these values to DCNL override the existing ``__name__`` or ``__parent__`` of the DCNL resource.  If any extra keyword args are passed in via the ``kw`` DCNL argument, use these keywords to add to or override existing DCNL resource keywords (attributes).'
def _find_view(self, request): DCNL 'Accept ``url`` and ``registry``; create a :term:`request` and DCNL find a :app:`Pyramid` view based on introspection of :term:`view DCNL configuration` within the application registry; return the view.'
def pre(self, command, output_dir, vars): DCNL 'Overrides :meth:`pyramid.scaffolds.template.Template.pre`, adding DCNL several variables to the default variables list (including DCNL ``random_string``, and ``package_logger``).  It also prevents common DCNL misnamings (such as naming a package "site" or naming a package DCNL logger "root".'
def post(self, command, output_dir, vars): DCNL 'Overrides :meth:`pyramid.scaffolds.template.Template.post`, to DCNL print "Welcome to Pyramid.  Sorry for the convenience." after a DCNL successful scaffolding rendering.'
def render_template(self, content, vars, filename=None): DCNL 'Return a bytestring representing a templated file based on the DCNL input (content) and the variable names defined (vars).  ``filename`` DCNL is used for exception reporting.'
def template_dir(self): DCNL 'Return the template directory of the scaffold.  By default, it DCNL returns the value of ``os.path.join(self.module_dir(), DCNL self._template_dir)`` (``self.module_dir()`` returns the module in DCNL which your subclass has been defined).  If ``self._template_dir`` is DCNL a tuple this method just returns the value instead of trying to DCNL construct a path.  If _template_dir is a tuple, it should be a DCNL 2-element tuple: ``(package_name, package_relative_path)``.'
def pre(self, command, output_dir, vars): DCNL 'Called before template is applied.'
def post(self, command, output_dir, vars): DCNL 'Called after template is applied.'
def parse_manifest(self, content): DCNL 'Parse the ``content`` read from the ``manifest_path`` into a DCNL dictionary mapping. DCNL Subclasses may override this method to use something other than DCNL ``json.loads`` to load any type of file format and return a conforming DCNL dictionary.'
@property DCNL def manifest(self): DCNL 'The current manifest dictionary.'
def __init__(self, serializer=json.dumps, adapters=(), **kw): DCNL 'Any keyword arguments will be passed to the ``serializer`` DCNL function.'
def add_adapter(self, type_or_iface, adapter): DCNL 'When an object of the type (or interface) ``type_or_iface`` fails DCNL to automatically encode using the serializer, the renderer will use DCNL the adapter ``adapter`` to convert it into a JSON-serializable DCNL object.  The adapter must accept two arguments: the object and the DCNL currently active request. DCNL .. code-block:: python DCNL class Foo(object): DCNL x = 5 DCNL def foo_adapter(obj, request): DCNL return obj.x DCNL renderer = JSON(indent=4) DCNL renderer.add_adapter(Foo, foo_adapter) DCNL When you\'ve done this, the JSON renderer will be able to serialize DCNL instances of the ``Foo`` class when they\'re encountered in your view DCNL results.'
def __call__(self, info): DCNL 'Returns a plain JSON-encoded string with content-type DCNL ``application/json``. The content-type may be overridden by DCNL setting ``request.response.content_type``.'
def __call__(self, info): DCNL 'Returns JSONP-encoded string with content-type DCNL ``application/javascript`` if query parameter matching DCNL ``self.param_name`` is present in request.GET; otherwise returns DCNL plain-JSON encoded string with content-type ``application/json``'
def authenticated_userid(self, request): DCNL 'Return the authenticated userid or ``None``. DCNL If no callback is registered, this will be the same as DCNL ``unauthenticated_userid``. DCNL If a ``callback`` is registered, this will return the userid if DCNL and only if the callback returns a value that is not ``None``.'
def effective_principals(self, request): DCNL 'A list of effective principals derived from request. DCNL This will return a list of principals including, at least, DCNL :data:`pyramid.security.Everyone`. If there is no authenticated DCNL userid, or the ``callback`` returns ``None``, this will be the DCNL only principal: DCNL .. code-block:: python DCNL return [Everyone] DCNL If the ``callback`` does not return ``None`` and an authenticated DCNL userid is found, then the principals will include DCNL :data:`pyramid.security.Authenticated`, the ``authenticated_userid`` DCNL and the list of principals returned by the ``callback``: DCNL .. code-block:: python DCNL extra_principals = callback(userid, request) DCNL return [Everyone, Authenticated, userid] + extra_principals'
def authenticated_userid(self, request): DCNL 'Return the authenticated userid or ``None``. DCNL If no callback is registered, this will be the same as DCNL ``unauthenticated_userid``. DCNL If a ``callback`` is registered, this will return the userid if DCNL and only if the callback returns a value that is not ``None``.'
def unauthenticated_userid(self, request): DCNL 'Return the ``repoze.who.userid`` key from the detected identity.'
def effective_principals(self, request): DCNL 'A list of effective principals derived from the identity. DCNL This will return a list of principals including, at least, DCNL :data:`pyramid.security.Everyone`. If there is no identity, or DCNL the ``callback`` returns ``None``, this will be the only principal. DCNL If the ``callback`` does not return ``None`` and an identity is DCNL found, then the principals will include DCNL :data:`pyramid.security.Authenticated`, the ``authenticated_userid`` DCNL and the list of principals returned by the ``callback``.'
def remember(self, request, userid, **kw): DCNL 'Store the ``userid`` as ``repoze.who.userid``. DCNL The identity to authenticated to :mod:`repoze.who` DCNL will contain the given userid as ``userid``, and DCNL provide all keyword arguments as additional identity DCNL keys. Useful keys could be ``max_age`` or ``userdata``.'
def forget(self, request): DCNL 'Forget the current authenticated user. DCNL Return headers that, if included in a response, will delete the DCNL cookie responsible for tracking the current user.'
def unauthenticated_userid(self, request): DCNL 'The ``REMOTE_USER`` value found within the ``environ``.'
def remember(self, request, userid, **kw): DCNL 'A no-op. The ``REMOTE_USER`` does not provide a protocol for DCNL remembering the user. This will be application-specific and can DCNL be done somewhere else or in a subclass.'
def forget(self, request): DCNL 'A no-op. The ``REMOTE_USER`` does not provide a protocol for DCNL forgetting the user. This will be application-specific and can DCNL be done somewhere else or in a subclass.'
def unauthenticated_userid(self, request): DCNL 'The userid key within the auth_tkt cookie.'
def remember(self, request, userid, **kw): DCNL 'Accepts the following kw args: ``max_age=<int-seconds>, DCNL ``tokens=<sequence-of-ascii-strings>``. DCNL Return a list of headers which will set appropriate cookies on DCNL the response.'
def forget(self, request): DCNL 'A list of headers which will delete appropriate cookies.'
def identify(self, request): DCNL 'Return a dictionary with authentication information, or ``None`` DCNL if no valid auth_tkt is attached to ``request``'
def forget(self, request): DCNL 'Return a set of expires Set-Cookie headers, which will destroy DCNL any existing auth_tkt cookie when attached to a response'
def remember(self, request, userid, max_age=None, tokens=()): DCNL 'Return a set of Set-Cookie headers; when set into a response, DCNL these headers will represent a valid authentication ticket. DCNL ``max_age`` DCNL The max age of the auth_tkt cookie, in seconds.  When this value is DCNL set, the cookie\'s ``Max-Age`` and ``Expires`` settings will be set, DCNL allowing the auth_tkt cookie to last between browser sessions.  If DCNL this value is ``None``, the ``max_age`` value provided to the DCNL helper itself will be used as the ``max_age`` value.  Default: DCNL ``None``. DCNL ``tokens`` DCNL A sequence of strings that will be placed into the auth_tkt tokens DCNL field.  Each string in the sequence must be of the Python ``str`` DCNL type and must match the regex ``^[A-Za-z][A-Za-z0-9+_-]*$``. DCNL Tokens are available in the returned identity when an auth_tkt is DCNL found in the request and unpacked.  Default: ``()``.'
def remember(self, request, userid, **kw): DCNL 'Store a userid in the session.'
def forget(self, request): DCNL 'Remove the stored userid from the session.'
def unauthenticated_userid(self, request): DCNL 'The userid parsed from the ``Authorization`` request header.'
def remember(self, request, userid, **kw): DCNL 'A no-op. Basic authentication does not provide a protocol for DCNL remembering the user. Credentials are sent on every request.'
def forget(self, request): DCNL 'Returns challenge headers. This should be attached to a response DCNL to indicate that credentials are required.'
def new_csrf_token(self, request): DCNL 'Sets a new CSRF token into the session and returns it.'
def get_csrf_token(self, request): DCNL 'Returns the currently active CSRF token from the session, DCNL generating a new one if needed.'
def check_csrf_token(self, request, supplied_token): DCNL 'Returns ``True`` if the ``supplied_token`` is valid.'
def new_csrf_token(self, request): DCNL 'Sets a new CSRF token into the session and returns it.'
def get_csrf_token(self, request): DCNL 'Returns the currently active CSRF token from the session, DCNL generating a new one if needed.'
def check_csrf_token(self, request, supplied_token): DCNL 'Returns ``True`` if the ``supplied_token`` is valid.'
def new_csrf_token(self, request): DCNL 'Sets a new CSRF token into the request and returns it.'
def get_csrf_token(self, request): DCNL 'Returns the currently active CSRF token by checking the cookies DCNL sent with the current request.'
def check_csrf_token(self, request, supplied_token): DCNL 'Returns ``True`` if the ``supplied_token`` is valid.'
def _partial_application_url(self, scheme=None, host=None, port=None): DCNL 'Construct the URL defined by request.application_url, replacing any DCNL of the default scheme, host, or port portions with user-supplied DCNL variants. DCNL If ``scheme`` is passed as ``https``, and the ``port`` is *not* DCNL passed, the ``port`` value is assumed to ``443``.  Likewise, if DCNL ``scheme`` is passed as ``http`` and ``port`` is not passed, the DCNL ``port`` value is assumed to be ``80``.'
def route_url(self, route_name, *elements, **kw): DCNL 'Generates a fully qualified URL for a named :app:`Pyramid` DCNL :term:`route configuration`. DCNL Use the route\'s ``name`` as the first positional argument. DCNL Additional positional arguments (``*elements``) are appended to the DCNL URL as path segments after it is generated. DCNL Use keyword arguments to supply values which match any dynamic DCNL path elements in the route definition.  Raises a :exc:`KeyError` DCNL exception if the URL cannot be generated for any reason (not DCNL enough arguments, for example). DCNL For example, if you\'ve defined a route named "foobar" with the path DCNL ``{foo}/{bar}/*traverse``:: DCNL request.route_url(\'foobar\', DCNL foo=\'1\')             => <KeyError exception> DCNL request.route_url(\'foobar\', DCNL foo=\'1\', DCNL bar=\'2\')             => <KeyError exception> DCNL request.route_url(\'foobar\', DCNL foo=\'1\', DCNL bar=\'2\', DCNL traverse=(\'a\',\'b\'))  => http://e.com/1/2/a/b DCNL request.route_url(\'foobar\', DCNL foo=\'1\', DCNL bar=\'2\', DCNL traverse=\'/a/b\')     => http://e.com/1/2/a/b DCNL Values replacing ``:segment`` arguments can be passed as strings DCNL or Unicode objects.  They will be encoded to UTF-8 and URL-quoted DCNL before being placed into the generated URL. DCNL Values replacing ``*remainder`` arguments can be passed as strings DCNL *or* tuples of Unicode/string values.  If a tuple is passed as a DCNL ``*remainder`` replacement value, its values are URL-quoted and DCNL encoded to UTF-8.  The resulting strings are joined with slashes DCNL and rendered into the URL.  If a string is passed as a DCNL ``*remainder`` replacement value, it is tacked on to the URL DCNL after being URL-quoted-except-for-embedded-slashes. DCNL If no ``_query`` keyword argument is provided, the request query string DCNL will be returned in the URL. If it is present, it will be used to DCNL compose a query string that will be tacked on to the end of the URL, DCNL replacing any request query string.  The value of ``_query`` may be a DCNL sequence of two-tuples *or* a data structure with an ``.items()`` DCNL method that returns a sequence of two-tuples (presumably a dictionary). DCNL This data structure will be turned into a query string per the DCNL documentation of :func:`pyramid.url.urlencode` function.  This will DCNL produce a query string in the ``x-www-form-urlencoded`` format.  A DCNL non-``x-www-form-urlencoded`` query string may be used by passing a DCNL *string* value as ``_query`` in which case it will be URL-quoted DCNL (e.g. query="foo bar" will become "foo%20bar").  However, the result DCNL will not need to be in ``k=v`` form as required by DCNL ``x-www-form-urlencoded``.  After the query data is turned into a query DCNL string, a leading ``?`` is prepended, and the resulting string is DCNL appended to the generated URL. DCNL .. note:: DCNL Python data structures that are passed as ``_query`` which are DCNL sequences or dictionaries are turned into a string under the same DCNL rules as when run through :func:`urllib.urlencode` with the ``doseq`` DCNL argument equal to ``True``.  This means that sequences can be passed DCNL as values, and a k=v pair will be placed into the query string for DCNL each value. DCNL If a keyword argument ``_anchor`` is present, its string DCNL representation will be quoted per :rfc:`3986#section-3.5` and used as DCNL a named anchor in the generated URL DCNL (e.g. if ``_anchor`` is passed as ``foo`` and the route URL is DCNL ``http://example.com/route/url``, the resulting generated URL will DCNL be ``http://example.com/route/url#foo``). DCNL .. note:: DCNL If ``_anchor`` is passed as a string, it should be UTF-8 encoded. If DCNL ``_anchor`` is passed as a Unicode object, it will be converted to DCNL UTF-8 before being appended to the URL. DCNL If both ``_anchor`` and ``_query`` are specified, the anchor DCNL element will always follow the query element, DCNL e.g. ``http://example.com?foo=1#bar``. DCNL If any of the keyword arguments ``_scheme``, ``_host``, or ``_port`` DCNL is passed and is non-``None``, the provided value will replace the DCNL named portion in the generated URL.  For example, if you pass DCNL ``_host=\'foo.com\'``, and the URL that would have been generated DCNL without the host replacement is ``http://example.com/a``, the result DCNL will be ``http://foo.com/a``. DCNL Note that if ``_scheme`` is passed as ``https``, and ``_port`` is not DCNL passed, the ``_port`` value is assumed to have been passed as DCNL ``443``.  Likewise, if ``_scheme`` is passed as ``http`` and DCNL ``_port`` is not passed, the ``_port`` value is assumed to have been DCNL passed as ``80``. To avoid this behavior, always explicitly pass DCNL ``_port`` whenever you pass ``_scheme``. DCNL If a keyword ``_app_url`` is present, it will be used as the DCNL protocol/hostname/port/leading path prefix of the generated URL. DCNL For example, using an ``_app_url`` of DCNL ``http://example.com:8080/foo`` would cause the URL DCNL ``http://example.com:8080/foo/fleeb/flub`` to be returned from DCNL this function if the expansion of the route pattern associated DCNL with the ``route_name`` expanded to ``/fleeb/flub``.  If DCNL ``_app_url`` is not specified, the result of DCNL ``request.application_url`` will be used as the prefix (the DCNL default). DCNL If both ``_app_url`` and any of ``_scheme``, ``_host``, or ``_port`` DCNL are passed, ``_app_url`` takes precedence and any values passed for DCNL ``_scheme``, ``_host``, and ``_port`` will be ignored. DCNL This function raises a :exc:`KeyError` if the URL cannot be DCNL generated due to missing replacement names.  Extra replacement DCNL names are ignored. DCNL If the route object which matches the ``route_name`` argument has DCNL a :term:`pregenerator`, the ``*elements`` and ``**kw`` DCNL arguments passed to this function might be augmented or changed. DCNL .. versionchanged:: 1.5 DCNL Allow the ``_query`` option to be a string to enable alternative DCNL encodings. DCNL The ``_anchor`` option will be escaped instead of using DCNL its raw string representation. DCNL .. versionchanged:: 1.9 DCNL If ``_query`` or ``_anchor`` are falsey (such as ``None`` or an DCNL empty string) they will not be included in the generated url.'
def route_path(self, route_name, *elements, **kw): DCNL 'Generates a path (aka a \'relative URL\', a URL minus the host, scheme, DCNL and port) for a named :app:`Pyramid` :term:`route configuration`. DCNL This function accepts the same argument as DCNL :meth:`pyramid.request.Request.route_url` and performs the same duty. DCNL It just omits the host, port, and scheme information in the return DCNL value; only the script_name, path, query parameters, and anchor data DCNL are present in the returned string. DCNL For example, if you\'ve defined a route named \'foobar\' with the path DCNL ``/{foo}/{bar}``, this call to ``route_path``:: DCNL request.route_path(\'foobar\', foo=\'1\', bar=\'2\') DCNL Will return the string ``/1/2``. DCNL .. note:: DCNL Calling ``request.route_path(\'route\')`` is the same as calling DCNL ``request.route_url(\'route\', _app_url=request.script_name)``. DCNL :meth:`pyramid.request.Request.route_path` is, in fact, DCNL implemented in terms of :meth:`pyramid.request.Request.route_url` DCNL in just this way. As a result, any ``_app_url`` passed within the DCNL ``**kw`` values to ``route_path`` will be ignored.'
def resource_url(self, resource, *elements, **kw): DCNL 'Generate a string representing the absolute URL of the DCNL :term:`resource` object based on the ``wsgi.url_scheme``, DCNL ``HTTP_HOST`` or ``SERVER_NAME`` in the request, plus any DCNL ``SCRIPT_NAME``.  The overall result of this method is always a DCNL UTF-8 encoded string. DCNL Examples:: DCNL request.resource_url(resource) => DCNL http://example.com/ DCNL request.resource_url(resource, \'a.html\') => DCNL http://example.com/a.html DCNL request.resource_url(resource, \'a.html\', query={\'q\':\'1\'}) => DCNL http://example.com/a.html?q=1 DCNL request.resource_url(resource, \'a.html\', anchor=\'abc\') => DCNL http://example.com/a.html#abc DCNL request.resource_url(resource, app_url=\'\') => DCNL Any positional arguments passed in as ``elements`` must be strings DCNL Unicode objects, or integer objects.  These will be joined by slashes DCNL and appended to the generated resource URL.  Each of the elements DCNL passed in is URL-quoted before being appended; if any element is DCNL Unicode, it will converted to a UTF-8 bytestring before being DCNL URL-quoted. If any element is an integer, it will be converted to its DCNL string representation before being URL-quoted. DCNL .. warning:: if no ``elements`` arguments are specified, the resource DCNL URL will end with a trailing slash.  If any DCNL ``elements`` are used, the generated URL will *not* DCNL end in a trailing slash. DCNL If a keyword argument ``query`` is present, it will be used to compose DCNL a query string that will be tacked on to the end of the URL.  The value DCNL of ``query`` may be a sequence of two-tuples *or* a data structure with DCNL an ``.items()`` method that returns a sequence of two-tuples DCNL (presumably a dictionary).  This data structure will be turned into a DCNL query string per the documentation of :func:`pyramid.url.urlencode` DCNL function.  This will produce a query string in the DCNL ``x-www-form-urlencoded`` encoding.  A non-``x-www-form-urlencoded`` DCNL query string may be used by passing a *string* value as ``query`` in DCNL which case it will be URL-quoted (e.g. query="foo bar" will become DCNL "foo%20bar").  However, the result will not need to be in ``k=v`` form DCNL as required by ``x-www-form-urlencoded``.  After the query data is DCNL turned into a query string, a leading ``?`` is prepended, and the DCNL resulting string is appended to the generated URL. DCNL .. note:: DCNL Python data structures that are passed as ``query`` which are DCNL sequences or dictionaries are turned into a string under the same DCNL rules as when run through :func:`urllib.urlencode` with the ``doseq`` DCNL argument equal to ``True``.  This means that sequences can be passed DCNL as values, and a k=v pair will be placed into the query string for DCNL each value. DCNL If a keyword argument ``anchor`` is present, its string DCNL representation will be used as a named anchor in the generated URL DCNL (e.g. if ``anchor`` is passed as ``foo`` and the resource URL is DCNL ``http://example.com/resource/url``, the resulting generated URL will DCNL be ``http://example.com/resource/url#foo``). DCNL .. note:: DCNL If ``anchor`` is passed as a string, it should be UTF-8 encoded. If DCNL ``anchor`` is passed as a Unicode object, it will be converted to DCNL UTF-8 before being appended to the URL. DCNL If both ``anchor`` and ``query`` are specified, the anchor element DCNL will always follow the query element, DCNL e.g. ``http://example.com?foo=1#bar``. DCNL If any of the keyword arguments ``scheme``, ``host``, or ``port`` is DCNL passed and is non-``None``, the provided value will replace the named DCNL portion in the generated URL.  For example, if you pass DCNL ``host=\'foo.com\'``, and the URL that would have been generated DCNL without the host replacement is ``http://example.com/a``, the result DCNL will be ``http://foo.com/a``. DCNL If ``scheme`` is passed as ``https``, and an explicit ``port`` is not DCNL passed, the ``port`` value is assumed to have been passed as ``443``. DCNL Likewise, if ``scheme`` is passed as ``http`` and ``port`` is not DCNL passed, the ``port`` value is assumed to have been passed as DCNL ``80``. To avoid this behavior, always explicitly pass ``port`` DCNL whenever you pass ``scheme``. DCNL If a keyword argument ``app_url`` is passed and is not ``None``, it DCNL should be a string that will be used as the port/hostname/initial DCNL path portion of the generated URL instead of the default request DCNL application URL.  For example, if ``app_url=\'http://foo\'``, then the DCNL resulting url of a resource that has a path of ``/baz/bar`` will be DCNL ``http://foo/baz/bar``.  If you want to generate completely relative DCNL URLs with no leading scheme, host, port, or initial path, you can DCNL pass ``app_url=\'\'``.  Passing ``app_url=\'\'`` when the resource path is DCNL ``/baz/bar`` will return ``/baz/bar``. DCNL If ``app_url`` is passed and any of ``scheme``, ``port``, or ``host`` DCNL are also passed, ``app_url`` will take precedence and the values DCNL passed for ``scheme``, ``host``, and/or ``port`` will be ignored. DCNL If the ``resource`` passed in has a ``__resource_url__`` method, it DCNL will be used to generate the URL (scheme, host, port, path) for the DCNL base resource which is operated upon by this function. DCNL .. seealso:: DCNL See also :ref:`overriding_resource_url_generation`. DCNL If ``route_name`` is passed, this function will delegate its URL DCNL production to the ``route_url`` function.  Calling DCNL ``resource_url(someresource, \'element1\', \'element2\', query={\'a\':1}, DCNL route_name=\'blogentry\')`` is roughly equivalent to doing:: DCNL traversal_path = request.resource_path(someobject) DCNL url = request.route_url( DCNL \'blogentry\', DCNL \'element1\', DCNL \'element2\', DCNL _query={\'a\':\'1\'}, DCNL traverse=traversal_path, DCNL It is only sensible to pass ``route_name`` if the route being named has DCNL a ``*remainder`` stararg value such as ``*traverse``.  The remainder DCNL value will be ignored in the output otherwise. DCNL By default, the resource path value will be passed as the name DCNL ``traverse`` when ``route_url`` is called.  You can influence this by DCNL passing a different ``route_remainder_name`` value if the route has a DCNL different ``*stararg`` value at its end.  For example if the route DCNL pattern you want to replace has a ``*subpath`` stararg ala DCNL ``/foo*subpath``:: DCNL request.resource_url( DCNL resource, DCNL route_name=\'myroute\', DCNL route_remainder_name=\'subpath\' DCNL If ``route_name`` is passed, it is also permissible to pass DCNL ``route_kw``, which will passed as additional keyword arguments to DCNL ``route_url``.  Saying ``resource_url(someresource, \'element1\', DCNL \'element2\', route_name=\'blogentry\', route_kw={\'id\':\'4\'}, DCNL _query={\'a\':\'1\'})`` is roughly equivalent to:: DCNL traversal_path = request.resource_path_tuple(someobject) DCNL kw = {\'id\':\'4\', \'_query\':{\'a\':\'1\'}, \'traverse\':traversal_path} DCNL url = request.route_url( DCNL \'blogentry\', DCNL \'element1\', DCNL \'element2\', DCNL **kw, DCNL If ``route_kw`` or ``route_remainder_name`` is passed, but DCNL ``route_name`` is not passed, both ``route_kw`` and DCNL ``route_remainder_name`` will be ignored.  If ``route_name`` DCNL is passed, the ``__resource_url__`` method of the resource passed is DCNL ignored unconditionally.  This feature is incompatible with DCNL resources which generate their own URLs. DCNL .. note:: DCNL If the :term:`resource` used is the result of a :term:`traversal`, it DCNL must be :term:`location`-aware.  The resource can also be the context DCNL of a :term:`URL dispatch`; contexts found this way do not need to be DCNL location-aware. DCNL .. note:: DCNL If a \'virtual root path\' is present in the request environment (the DCNL value of the WSGI environ key ``HTTP_X_VHM_ROOT``), and the resource DCNL was obtained via :term:`traversal`, the URL path will not include the DCNL virtual root prefix (it will be stripped off the left hand side of DCNL the generated URL). DCNL .. note:: DCNL For backwards compatibility purposes, this method is also DCNL aliased as the ``model_url`` method of request. DCNL .. versionchanged:: 1.3 DCNL Added the ``app_url`` keyword argument. DCNL .. versionchanged:: 1.5 DCNL Allow the ``query`` option to be a string to enable alternative DCNL encodings. DCNL The ``anchor`` option will be escaped instead of using DCNL its raw string representation. DCNL Added the ``route_name``, ``route_kw``, and DCNL ``route_remainder_name`` keyword arguments. DCNL .. versionchanged:: 1.9 DCNL If ``query`` or ``anchor`` are falsey (such as ``None`` or an DCNL empty string) they will not be included in the generated url.'
def resource_path(self, resource, *elements, **kw): DCNL 'Generates a path (aka a \'relative URL\', a URL minus the host, scheme, DCNL and port) for a :term:`resource`. DCNL This function accepts the same argument as DCNL :meth:`pyramid.request.Request.resource_url` and performs the same DCNL duty.  It just omits the host, port, and scheme information in the DCNL return value; only the script_name, path, query parameters, and DCNL anchor data are present in the returned string. DCNL .. note:: DCNL Calling ``request.resource_path(resource)`` is the same as calling DCNL ``request.resource_path(resource, app_url=request.script_name)``. DCNL :meth:`pyramid.request.Request.resource_path` is, in fact, DCNL implemented in terms of DCNL :meth:`pyramid.request.Request.resource_url` in just this way. As DCNL a result, any ``app_url`` passed within the ``**kw`` values to DCNL ``route_path`` will be ignored.  ``scheme``, ``host``, and DCNL ``port`` are also ignored.'
def static_url(self, path, **kw): DCNL 'Generates a fully qualified URL for a static :term:`asset`. DCNL The asset must live within a location defined via the DCNL :meth:`pyramid.config.Configurator.add_static_view` DCNL :term:`configuration declaration` (see :ref:`static_assets_section`). DCNL Example:: DCNL request.static_url(\'mypackage:static/foo.css\') => DCNL http://example.com/static/foo.css DCNL The ``path`` argument points at a file or directory on disk which DCNL a URL should be generated for.  The ``path`` may be either a DCNL relative path (e.g. ``static/foo.css``) or an absolute path (e.g. DCNL ``/abspath/to/static/foo.css``) or a :term:`asset specification` DCNL (e.g. ``mypackage:static/foo.css``). DCNL The purpose of the ``**kw`` argument is the same as the purpose of DCNL the :meth:`pyramid.request.Request.route_url` ``**kw`` argument.  See DCNL the documentation for that function to understand the arguments which DCNL you can provide to it.  However, typically, you don\'t need to pass DCNL anything as ``*kw`` when generating a static asset URL. DCNL This function raises a :exc:`ValueError` if a static view DCNL definition cannot be found which matches the path specification.'
def static_path(self, path, **kw): DCNL 'Generates a path (aka a \'relative URL\', a URL minus the host, scheme, DCNL and port) for a static resource. DCNL This function accepts the same argument as DCNL :meth:`pyramid.request.Request.static_url` and performs the DCNL same duty.  It just omits the host, port, and scheme information in DCNL the return value; only the script_name, path, query parameters, and DCNL anchor data are present in the returned string. DCNL Example:: DCNL request.static_path(\'mypackage:static/foo.css\') => DCNL /static/foo.css DCNL .. note:: DCNL Calling ``request.static_path(apath)`` is the same as calling DCNL ``request.static_url(apath, _app_url=request.script_name)``. DCNL :meth:`pyramid.request.Request.static_path` is, in fact, implemented DCNL in terms of `:meth:`pyramid.request.Request.static_url` in just this DCNL way. As a result, any ``_app_url`` passed within the ``**kw`` values DCNL to ``static_path`` will be ignored.'
def current_route_url(self, *elements, **kw): DCNL 'Generates a fully qualified URL for a named :app:`Pyramid` DCNL :term:`route configuration` based on the \'current route\'. DCNL This function supplements DCNL :meth:`pyramid.request.Request.route_url`. It presents an easy way to DCNL generate a URL for the \'current route\' (defined as the route which DCNL matched when the request was generated). DCNL The arguments to this method have the same meaning as those with the DCNL same names passed to :meth:`pyramid.request.Request.route_url`.  It DCNL also understands an extra argument which ``route_url`` does not named DCNL ``_route_name``. DCNL The route name used to generate a URL is taken from either the DCNL ``_route_name`` keyword argument or the name of the route which is DCNL currently associated with the request if ``_route_name`` was not DCNL passed.  Keys and values from the current request :term:`matchdict` DCNL are combined with the ``kw`` arguments to form a set of defaults DCNL named ``newkw``.  Then ``request.route_url(route_name, *elements, DCNL **newkw)`` is called, returning a URL. DCNL Examples follow. DCNL If the \'current route\' has the route pattern ``/foo/{page}`` and the DCNL current url path is ``/foo/1`` , the matchdict will be DCNL ``{\'page\':\'1\'}``.  The result of ``request.current_route_url()`` in DCNL this situation will be ``/foo/1``. DCNL If the \'current route\' has the route pattern ``/foo/{page}`` and the DCNL current url path is ``/foo/1``, the matchdict will be DCNL ``{\'page\':\'1\'}``.  The result of DCNL ``request.current_route_url(page=\'2\')`` in this situation will be DCNL ``/foo/2``. DCNL Usage of the ``_route_name`` keyword argument: if our routing table DCNL defines routes ``/foo/{action}`` named \'foo\' and DCNL ``/foo/{action}/{page}`` named ``fooaction``, and the current url DCNL pattern is ``/foo/view`` (which has matched the ``/foo/{action}`` DCNL route), we may want to use the matchdict args to generate a URL to DCNL the ``fooaction`` route.  In this scenario, DCNL ``request.current_route_url(_route_name=\'fooaction\', page=\'5\')`` DCNL Will return string like: ``/foo/view/5``.'
def current_route_path(self, *elements, **kw): DCNL 'Generates a path (aka a \'relative URL\', a URL minus the host, scheme, DCNL and port) for the :app:`Pyramid` :term:`route configuration` matched DCNL by the current request. DCNL This function accepts the same argument as DCNL :meth:`pyramid.request.Request.current_route_url` and performs the DCNL same duty.  It just omits the host, port, and scheme information in DCNL the return value; only the script_name, path, query parameters, and DCNL anchor data are present in the returned string. DCNL For example, if the route matched by the current request has the DCNL pattern ``/{foo}/{bar}``, this call to ``current_route_path``:: DCNL request.current_route_path(foo=\'1\', bar=\'2\') DCNL Will return the string ``/1/2``. DCNL .. note:: DCNL Calling ``request.current_route_path(\'route\')`` is the same DCNL as calling ``request.current_route_url(\'route\', DCNL _app_url=request.script_name)``. DCNL :meth:`pyramid.request.Request.current_route_path` is, in fact, DCNL implemented in terms of DCNL :meth:`pyramid.request.Request.current_route_url` in just this DCNL way. As a result, any ``_app_url`` passed within the ``**kw`` DCNL values to ``current_route_path`` will be ignored.'
def add_response_callback(self, callback): DCNL 'Add a callback to the set of callbacks to be called by the DCNL :term:`router` at a point after a :term:`response` object is DCNL successfully created.  :app:`Pyramid` does not have a DCNL global response object: this functionality allows an DCNL application to register an action to be performed against the DCNL response once one is created. DCNL A \'callback\' is a callable which accepts two positional DCNL parameters: ``request`` and ``response``.  For example: DCNL .. code-block:: python DCNL :linenos: DCNL def cache_callback(request, response): DCNL \'Set the cache_control max_age for the response\' DCNL response.cache_control.max_age = 360 DCNL request.add_response_callback(cache_callback) DCNL Response callbacks are called in the order they\'re added DCNL (first-to-most-recently-added).  No response callback is DCNL called if an exception happens in application code, or if the DCNL response object returned by :term:`view` code is invalid. DCNL All response callbacks are called *after* the tweens and DCNL *before* the :class:`pyramid.events.NewResponse` event is sent. DCNL Errors raised by callbacks are not handled specially.  They DCNL will be propagated to the caller of the :app:`Pyramid` DCNL router application. DCNL .. seealso:: DCNL See also :ref:`using_response_callbacks`.'
def add_finished_callback(self, callback): DCNL 'Add a callback to the set of callbacks to be called DCNL unconditionally by the :term:`router` at the very end of DCNL request processing. DCNL ``callback`` is a callable which accepts a single positional DCNL parameter: ``request``.  For example: DCNL .. code-block:: python DCNL :linenos: DCNL import transaction DCNL def commit_callback(request): DCNL \'\'\'commit or abort the transaction associated with request\'\'\' DCNL if request.exception is not None: DCNL transaction.abort() DCNL else: DCNL transaction.commit() DCNL request.add_finished_callback(commit_callback) DCNL Finished callbacks are called in the order they\'re added ( DCNL first- to most-recently- added).  Finished callbacks (unlike DCNL response callbacks) are *always* called, even if an exception DCNL happens in application code that prevents a response from DCNL being generated. DCNL The set of finished callbacks associated with a request are DCNL called *very late* in the processing of that request; they are DCNL essentially the last thing called by the :term:`router`. They DCNL are called after response processing has already occurred in a DCNL top-level ``finally:`` block within the router request DCNL processing code.  As a result, mutations performed to the DCNL ``request`` provided to a finished callback will have no DCNL meaningful effect, because response processing will have DCNL already occurred, and the request\'s scope will expire almost DCNL immediately after all finished callbacks have been processed. DCNL Errors raised by finished callbacks are not handled specially. DCNL They will be propagated to the caller of the :app:`Pyramid` DCNL router application. DCNL .. seealso:: DCNL See also :ref:`using_finished_callbacks`.'
@reify DCNL def session(self): DCNL 'Obtain the :term:`session` object associated with this DCNL request.  If a :term:`session factory` has not been registered DCNL during application configuration, a DCNL :class:`pyramid.exceptions.ConfigurationError` will be raised'
@reify DCNL def response(self): DCNL 'This attribute is actually a "reified" property which returns an DCNL instance of the :class:`pyramid.response.Response`. class.  The DCNL response object returned does not exist until this attribute is DCNL accessed.  Subsequent accesses will return the same Response object. DCNL The ``request.response`` API is used by renderers.  A render obtains DCNL the response object it will return from a view that uses that renderer DCNL by accessing ``request.response``.  Therefore, it\'s possible to use the DCNL ``request.response`` API to set up a response object with "the DCNL right" attributes (e.g. by calling ``request.response.set_cookie()``) DCNL within a view that uses a renderer.  Mutations to this response object DCNL will be preserved in the response sent to the client.'
def is_response(self, ob): DCNL 'Return ``True`` if the object passed as ``ob`` is a valid DCNL response object, ``False`` otherwise.'
@classmethod DCNL def create_new(cls): DCNL 'Creates a new job of this class type. DCNL Returns: DCNL str. The unique id of this job. DCNL Raises: DCNL Exception: This method (instead of a subclass method) was directly DCNL used to create a new job.'
@classmethod DCNL def enqueue(cls, job_id, additional_job_params=None): DCNL 'Marks a job as queued and adds it to a queue for processing. DCNL Args: DCNL job_id: str. The ID of the job to enqueue. DCNL additional_job_params: dict(str : *) or None. Additional parameters DCNL for the job.'
@classmethod DCNL def register_start(cls, job_id, metadata=None): DCNL 'Marks a job as started. DCNL Args: DCNL job_id: str. The ID of the job to start. DCNL metadata: dict(str : *) or None. Additional metadata of the job.'
@classmethod DCNL def register_completion(cls, job_id, output_list): DCNL 'Marks a job as completed. DCNL Args: DCNL job_id: str. The ID of the job to complete. DCNL output_list: list(object). The output produced by the job.'
@classmethod DCNL def _compress_output_list(cls, output_list, test_only_max_output_len_chars=None): DCNL 'Returns compressed list of strings within a max length of chars. DCNL Ensures that the payload (i.e., [str(output) for output in output_list]) DCNL makes up at most max_output_chars of the final output data. DCNL Args: DCNL output_list: list(*). Collection of objects to be stringified. DCNL test_only_max_output_len_chars: int or None. Overrides the intended DCNL max output len limit when not None. DCNL Returns: DCNL list(str). The compressed stringified output values.'
@classmethod DCNL def register_failure(cls, job_id, error): DCNL 'Marks a job as failed. DCNL Args: DCNL job_id: str. The ID of the job to fail. DCNL error: str. The error raised by the job.'
@classmethod DCNL def cancel(cls, job_id, user_id): DCNL 'Marks a job as canceled. DCNL Args: DCNL job_id: str. The ID of the job to cancel. DCNL user_id: str. The id of the user who cancelled the job.'
@classmethod DCNL def is_active(cls, job_id): DCNL 'Returns whether the job is still active. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL bool. Whether the job is active or not.'
@classmethod DCNL def has_finished(cls, job_id): DCNL 'Returns whether the job has finished. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL bool. Whether the job has finished or not.'
@classmethod DCNL def cancel_all_unfinished_jobs(cls, user_id): DCNL 'Cancels all queued or started jobs of this job type. DCNL Args: DCNL user_id: str. The id of the user who is cancelling the jobs.'
@classmethod DCNL def _real_enqueue(cls, job_id, additional_job_params): DCNL 'Does the actual work of enqueueing a job for deferred execution. DCNL Args: DCNL job_id: str. The ID of the job to enqueue. DCNL additional_job_params: dict(str : *). Additional parameters on jobs.'
@classmethod DCNL def get_status_code(cls, job_id): DCNL 'Returns the status code of the job. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL str. Status code of the job.'
@classmethod DCNL def get_time_queued_msec(cls, job_id): DCNL 'Returns the time the job got queued. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL float. The time the job got queued in milliseconds after the Epoch.'
@classmethod DCNL def get_time_started_msec(cls, job_id): DCNL 'Returns the time the job got started. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL float. The time the job got started in milliseconds after the Epoch.'
@classmethod DCNL def get_time_finished_msec(cls, job_id): DCNL 'Returns the time the job got finished. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL float. The time the job got finished in milliseconds after the DCNL Epoch.'
@classmethod DCNL def get_metadata(cls, job_id): DCNL 'Returns the metadata of the job. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL dict(str : *). The metadata of the job.'
@classmethod DCNL def get_output(cls, job_id): DCNL 'Returns the output of the job. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL *. The output of the job.'
@classmethod DCNL def get_error(cls, job_id): DCNL 'Returns the error encountered by the job. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL Returns: DCNL str. Describes the error encountered by the job.'
@classmethod DCNL def _require_valid_transition(cls, job_id, old_status_code, new_status_code): DCNL 'Asserts that the transition of the job status code is valid. DCNL Args: DCNL job_id: str. The ID of the job to query. DCNL old_status_code: str. Old status code. DCNL new_status_code: str. New status code. DCNL Raises: DCNL Exception: The given status code change is invalid.'
@classmethod DCNL def _require_correct_job_type(cls, job_type): DCNL 'Returns validity of given job type. DCNL Args: DCNL job_type: str. Name of a job class. DCNL Raises: DCNL Exception: The given job type is incorrect.'
@classmethod DCNL def _run(cls, additional_job_params): DCNL 'Function that performs the main business logic of the job. DCNL Args: DCNL additional_job_params: dict(str : *). Additional parameters on jobs.'
@classmethod DCNL def _run_job(cls, job_id, additional_job_params): DCNL 'Starts the job. DCNL Args: DCNL job_id: str. The ID of the job to run. DCNL additional_job_params: dict(str : *). Additional parameters on job. DCNL Raises: DCNL PermanentTaskFailure: No further work can be scheduled.'
@classmethod DCNL def _real_enqueue(cls, job_id, additional_job_params): DCNL 'Puts the job in the task queue. DCNL Args: DCNL job_id: str. The ID of the job to enqueue. DCNL additional_job_params: dict(str : *). Additional params to pass into DCNL the job\'s _run() method.'
def run(self, job_id, job_class_str, kwargs): DCNL 'Returns a coroutine which runs the job pipeline and stores results. DCNL Args: DCNL job_id: str. The ID of the job to run. DCNL job_class_str: str. Should uniquely identify each type of job. DCNL kwargs: dict(str : object). Extra arguments used to build the DCNL MapreducePipeline. DCNL Yields: DCNL MapreducePipeline. Ready to start processing. Expects the output of DCNL that pipeline to be sent back. DCNL StoreMapReduceResults. Will be constructed with whatever output the DCNL caller sends back to the coroutine.'
def finalized(self): DCNL 'Suppresses the default pipeline behavior of sending email.'
def run(self, job_id, job_class_str, output): DCNL 'Extracts the results of a MR job and registers its completion. DCNL Args: DCNL job_id: str. The ID of the job to run. DCNL job_class_str: str. Should uniquely identify each type of job. DCNL output: str. The output produced by the job.'
def write(self, data): DCNL 'Writes that data serialized in JSON format. DCNL Args: DCNL data: *. Data to be serialized in JSON format.'
@staticmethod DCNL def get_mapper_param(param_name): DCNL 'Returns current value of given param_name for this job. DCNL Args: DCNL param_name: str. One of the configurable parameters of this DCNL particular mapreduce job. DCNL Returns: DCNL *. The current value of the parameter. DCNL Raises: DCNL Exception: The parameter is not associated to this job type.'
@classmethod DCNL def entity_classes_to_map_over(cls): DCNL 'Return a list of datastore class references to map over.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function. Must be declared @staticmethod. DCNL This function may yield as many times as appropriate (including zero) DCNL to return key/value 2-tuples. For example, to get a count of all DCNL explorations, one might yield (exploration.id, 1). DCNL WARNING: The OutputWriter converts mapper output keys to type str. So, DCNL if you have keys that are of type unicode, you must yield DCNL "key.encode(\'utf-8\')", rather than "key". DCNL Args: DCNL item: *. A single element of the type given by entity_class().'
@staticmethod DCNL def reduce(key, values): DCNL 'Implements the reduce function. Must be declared @staticmethod. DCNL This function should yield a JSON string. All emitted outputs from all DCNL reducers will be collected in an array and set into the output value DCNL for the job, so don\'t pick anything huge. If you need something huge, DCNL persist it out into the datastore instead and return a reference (and DCNL dereference it later to load content as needed). DCNL This code can assume that it is the only process handling values for the DCNL given key. DCNL TODO(brianrodri): Verify whether it can also assume that it will be DCNL called exactly once for each key with all of the output. DCNL Args: DCNL key: *. A key value as emitted from the map() function, above. DCNL values: list(*). A list of all values from all mappers that were DCNL tagged with the given key.'
@classmethod DCNL def _real_enqueue(cls, job_id, additional_job_params): DCNL 'Configures, creates, and queues the pipeline for the given job and DCNL params. DCNL Args: DCNL job_id: str. The ID of the job to enqueue. DCNL additional_job_params: dict(str : *). Additional params to pass into DCNL the job\'s _run() method. DCNL Raises: DCNL Exception: Passed a value to a parameter in the mapper which has DCNL already been given a value.'
@staticmethod DCNL def _entity_created_before_job_queued(entity): DCNL 'Checks that the given entity was created before the MR job was DCNL queued. DCNL Mapper methods may want to use this as a precomputation check, DCNL especially if the datastore classes being iterated over are append-only DCNL event logs. DCNL Args: DCNL entity: BaseModel. An entity this job type is responsible for DCNL handling. DCNL Returns: DCNL bool. Whether the entity was queued before the job was created.'
@classmethod DCNL def from_json(cls, input_shard_state): DCNL 'Creates an instance of the InputReader for the given input shard DCNL state. DCNL Args: DCNL input_shard_state: dict(str : *). The InputReader state as a DCNL dict-like object. DCNL Returns: DCNL *. An instance of the InputReader configured using the input shard DCNL state.'
def to_json(self): DCNL 'Returns an input shard state for the remaining inputs. DCNL Returns: DCNL dict(str : *). A json-izable version of the remaining InputReader.'
@classmethod DCNL def split_input(cls, mapper_spec): DCNL 'Returns a list of input readers. DCNL This method creates a list of input readers, each for one shard. It DCNL attempts to split inputs among readers evenly. DCNL Args: DCNL mapper_spec: model.MapperSpec. Specifies the inputs and additional DCNL parameters to define the behavior of input readers. DCNL Returns: DCNL list(InputReaders). None or [] when no input data can be found.'
@classmethod DCNL def validate(cls, unused_mapper_spec): DCNL 'Validates mapper spec and all mapper parameters. DCNL Input reader parameters are expected to be passed as "input_reader" DCNL subdictionary in mapper_spec.params. DCNL Pre 1.6.4 API mixes input reader parameters with all other parameters. DCNL Thus to be compatible, input reader check mapper_spec.params as well and DCNL issue a warning if "input_reader" subdicationary is not present. DCNL Args: DCNL mapper_spec: model.MapperSpec. The MapperSpec for this InputReader. DCNL Raises: DCNL BadReaderParamsError: Required parameters are missing or invalid.'
@classmethod DCNL def _get_continuous_computation_class(cls): DCNL 'Returns the ContinuousComputationManager class associated with this DCNL MapReduce job.'
@staticmethod DCNL def _get_job_queued_msec(): DCNL 'Returns the time when the job got queued, in milliseconds past the DCNL Epoch.'
@staticmethod DCNL def _entity_created_before_job_queued(entity): DCNL 'Checks that the given entity was created before the MR job was DCNL queued. DCNL Mapper methods may want to use this as a precomputation check, DCNL especially if the datastore classes being iterated over are append-only DCNL event logs. DCNL Args: DCNL entity: BaseModel. An entity this job type is responsible for DCNL handling. DCNL Returns: DCNL bool. Whether the entity was created before the given MR job was DCNL queued.'
@classmethod DCNL def get_realtime_id(cls, layer_index, raw_entity_id): DCNL 'Returns a valid id for the given (realtime layer, entity) pair. DCNL Args: DCNL layer_index: int. The realtime layer id, one of: 0, 1. DCNL raw_entity_id: int. The id of an entity that is to be stored in the DCNL given realtime layer. DCNL Returns: DCNL str. Uniquely identifies the (realtime layer, entity) pair.'
@classmethod DCNL def delete_layer(cls, layer_index, latest_created_on_datetime): DCNL 'Deletes all entities in the given layer which were created before DCNL the given datetime. DCNL Args: DCNL layer_index: int. The realtime layer id, should be either 0 or 1. DCNL latest_created_on_datetime: datetime.datetime. All remaining DCNL entities after the deletion will have been created on or after DCNL this time.'
@classmethod DCNL def _is_valid_realtime_id(cls, realtime_id): DCNL 'Returns whether the realtime_id represents a valid (realtime layer, DCNL entity) pair. DCNL Args: DCNL realtime_id: str. The id to query. DCNL Returns: DCNL bool. Whether the realtime_id represents a valid (realtime layer, DCNL entity) pair.'
@classmethod DCNL def get(cls, entity_id, strict=True): DCNL 'Gets an entity by its id. DCNL Args: DCNL entity_id: str. Unique identifier for an entity. DCNL strict: bool. Whether to fail noisily if no entity with the given DCNL id exists in the datastore. Default is True. DCNL Returns: DCNL * or None. The entity instance that corresponds to the given id, or DCNL None if strict == False and no undeleted entity with the given DCNL id exists in the datastore. DCNL Raises: DCNL base_models.BaseModel.EntityNotFoundError: strict == True and no DCNL undeleted entity with the given id exists in the datastore.'
def put(self): DCNL 'Stores the current realtime layer entity into the database. DCNL Raises: DCNL Exception: The current instance has an invalid realtime layer id.'
@classmethod DCNL def get_event_types_listened_to(cls): DCNL 'Returns a list of event types that this class subscribes to.'
@classmethod DCNL def _get_realtime_datastore_class(cls): DCNL 'Returns the datastore class used by the realtime layer, which should DCNL subclass BaseRealtimeDatastoreClassForContinuousComputations. See DCNL StartExplorationRealtimeModel in core/jobs_test.py for an example DCNL of how to do this.'
@classmethod DCNL def _get_batch_job_manager_class(cls): DCNL 'Returns the manager class for the continuously-running batch job. DCNL See jobs_test.py for an example of how to do this.'
@classmethod DCNL def _handle_incoming_event(cls, active_realtime_layer, event_type, *args, **kwargs): DCNL 'Records incoming events in the given realtime layer. DCNL This method should be implemented by subclasses. The args are the DCNL same as those sent to the event handler corresponding to the event DCNL type, so check that for documentation. Note that there may be more than DCNL one event type. DCNL IMPORTANT: This method only gets called as part of the dequeue process DCNL from a deferred task queue. Developers should expect a delay to occur DCNL between when the incoming event arrives and when this method is called, DCNL and should resolve any arguments that depend on local session DCNL variables (such as the user currently in session) before enqueueing DCNL this method in the corresponding event handler. DCNL IMPORTANT: If an exception is raised here, the task queue will retry DCNL calling it and any mutations made will be redone -- unless the DCNL exception has type taskqueue_services.PermanentTaskFailure. Developers DCNL should therefore ensure that _handle_incoming_event() is robust to DCNL multiple calls for the same incoming event. DCNL Args: DCNL active_realtime_layer: int. The currently active realtime DCNL datastore layer. DCNL event_type: str. The event triggered by a student. For example, when DCNL a student starts an exploration, event of type `start` is DCNL triggered. If he/she completes an exploration, event of type DCNL `complete` is triggered. DCNL *args: list(*). Forwarded to the _handle_event() method. DCNL **kwargs: dict(* : *). Forwarded to the _handle_event() method.'
@classmethod DCNL def _get_active_realtime_index(cls): DCNL 'Returns the currently active realtime layer index for this class. DCNL Additionally, takes care to register the relevant DCNL ContinuousComputationModel, if it does not already exist. DCNL Returns: DCNL str. The active realtime layer index of this class.'
@classmethod DCNL def get_active_realtime_layer_id(cls, entity_id): DCNL 'Returns an ID used to identify the element with the given entity id DCNL in the currently active realtime datastore layer. DCNL Args: DCNL entity_id: str. Unique identifier for an entity. DCNL Returns: DCNL str. Unique identifier for the given entity for storage in active DCNL realtime layer.'
@classmethod DCNL def get_multi_active_realtime_layer_ids(cls, entity_ids): DCNL 'Returns a list of IDs of elements in the currently active realtime DCNL datastore layer corresponding to the given entity ids. DCNL Args: DCNL entity_ids: str. Collection of unique identifiers for entities. DCNL Returns: DCNL list(str). Unique identifiers for each given entity for storage in DCNL the currently active realtime layer.'
@classmethod DCNL def _switch_active_realtime_class(cls): DCNL 'Switches the currently-active realtime layer for this continuous DCNL computation.'
@classmethod DCNL def _clear_inactive_realtime_layer(cls, latest_created_on_datetime): DCNL 'Deletes all entries in the inactive realtime datastore class whose DCNL created_on date is before latest_created_on_datetime. DCNL Args: DCNL latest_created_on_datetime: datetime.datetime. Entities created DCNL before this datetime will be removed.'
@classmethod DCNL def _kickoff_batch_job(cls): DCNL 'Create and enqueue a new batch job.'
@classmethod DCNL def _register_end_of_batch_job_and_return_status(cls): DCNL 'Processes a \'job finished\' event and returns the job\'s updated status DCNL code. DCNL Note that \'finish\' in this context might mean \'completed successfully\' DCNL or \'failed\'. DCNL Processing means the following: if the job is currently \'stopping\', its DCNL status is set to \'idle\'; otherwise, its status remains as \'running\'.'
@classmethod DCNL def get_status_code(cls): DCNL 'Returns the status code of the job.'
@classmethod DCNL def start_computation(cls): DCNL '(Re)starts the continuous computation corresponding to this class. DCNL Raises: DCNL Exception: The computation wasn\'t idle before trying to start.'
@classmethod DCNL def stop_computation(cls, user_id): DCNL 'Cancels the currently-running batch job. DCNL No further batch runs will be kicked off. DCNL Args: DCNL user_id: str. The id of the user stopping the job.'
@classmethod DCNL def on_incoming_event(cls, event_type, *args, **kwargs): DCNL 'Handles an incoming event by recording it in both realtime datastore DCNL layers. DCNL The *args and **kwargs match those passed to the _handle_event() method DCNL of the corresponding EventHandler subclass. DCNL Args: DCNL event_type: str. The event triggered by a student. For example, when DCNL a student starts an exploration, event of type `start` is DCNL triggered. If he/she completes an exploration, event of type DCNL `complete` is triggered. DCNL *args: Forwarded to _handle_event() method. DCNL *kwargs: Forwarded to _handle_event() method.'
@classmethod DCNL def _process_job_completion_and_return_status(cls): DCNL 'Deletes all data in the currently-active realtime_datastore class, DCNL then switches the active class. DCNL This seam was created so that tests would be able to override DCNL on_batch_job_completion() to avoid kicking off the next job DCNL immediately. DCNL Returns: DCNL str. The final status of the job.'
@classmethod DCNL def _kickoff_batch_job_after_previous_one_ends(cls): DCNL 'Seam that can be overridden by tests.'
@classmethod DCNL def on_batch_job_completion(cls): DCNL 'Marks the existing job as complete and kicks off a new batch job.'
@classmethod DCNL def on_batch_job_canceled(cls): DCNL 'Marks the batch job as cancelled and verifies that the continuous DCNL computation is now idle.'
@classmethod DCNL def on_batch_job_failure(cls): DCNL 'Gives up on the existing batch job and kicks off a new one.'
@classmethod DCNL def entity_classes_to_map_over(cls): DCNL 'The entity types this job will handle.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function which will clean up jobs that have not DCNL finished. DCNL Args: DCNL item: mapreduce_model.MapreduceState or mapreduce_model.ShardState. DCNL A shard or job which may still be running. DCNL Yields: DCNL tuple(str, int). Describes the action taken for the item, and the DCNL number of items this action was applied to.'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Implements the reduce function which logs the results of the mapping DCNL function. DCNL Args: DCNL key: str. Describes the action taken by a map call. One of: DCNL \'mr_state_deleted\', \'mr_state_remaining\', \'shard_state_deleted\', DCNL \'shard_state_remaining\'. DCNL stringified_values: list(str). A list where each element is a DCNL stringified number, counting the mapped items sharing the key.'
@classmethod DCNL def import_models(cls, model_names): DCNL 'Imports and returns the storage modules listed in model_names. DCNL Args: DCNL model_names: list(str). List of storage module names. DCNL Returns: DCNL tuple(module): Tuple of storage modules. DCNL Raises: DCNL Exception: Invalid model name.'
@classmethod DCNL def import_transaction_services(cls): DCNL 'Imports and returns gae_transaction_services module. DCNL Returns: DCNL module. The gae_transaction_services module.'
@classmethod DCNL def import_current_user_services(cls): DCNL 'Imports and returns gae_current_user_services module. DCNL Returns: DCNL module. The gae_current_user_services module.'
@classmethod DCNL def import_datastore_services(cls): DCNL 'Imports and returns gae_datastore_services module. DCNL Returns: DCNL module. The gae_datastore_services module.'
@classmethod DCNL def import_app_identity_services(cls): DCNL 'Imports and returns gae_app_identity_services module. DCNL Returns: DCNL module. The gae_app_identity_services module.'
@classmethod DCNL def import_email_services(cls): DCNL 'Imports and returns the email services module specified in feconf.py. DCNL Returns: DCNL module. The email_services module to use, based on the feconf.py DCNL setting. DCNL Raises: DCNL Exception: feconf.EMAIL_SERVICE_PROVIDER does not correspond DCNL to a valid email_services module.'
@classmethod DCNL def import_memcache_services(cls): DCNL 'Imports and returns gae_memcache_services. DCNL Returns: DCNL module. The gae_memcache_services module.'
@classmethod DCNL def import_taskqueue_services(cls): DCNL 'Imports and returns gae_taskqueue_services module. DCNL Returns: DCNL module. The gae_taskqueue_services module.'
@classmethod DCNL def import_search_services(cls): DCNL 'Imports and returns gae_search_services module. DCNL Returns: DCNL module. The gae_search_services module.'
@classmethod DCNL def _get(cls): DCNL 'Returns the appropriate interface class for platform-specific DCNL imports. DCNL Returns: DCNL class: The corresponding platform-specific interface class.'
@classmethod DCNL def import_models(cls, model_names): DCNL 'Imports and returns the storage modules listed in model_names. DCNL Args: DCNL model_names: list(str). List of storage module names. DCNL Returns: DCNL list(module). The corresponding storage-layer modules.'
@classmethod DCNL def import_current_user_services(cls): DCNL 'Imports and returns current_user_services module. DCNL Returns: DCNL module. The current_user_services module.'
@classmethod DCNL def import_datastore_services(cls): DCNL 'Imports and returns datastore_services module. DCNL Returns: DCNL module. The datastore_services module.'
@classmethod DCNL def import_transaction_services(cls): DCNL 'Imports and returns transaction_services module. DCNL Returns: DCNL module. The transaction_services module.'
@classmethod DCNL def import_app_identity_services(cls): DCNL 'Imports and returns app_identity_services module. DCNL Returns: DCNL module. The app_identity_services module.'
@classmethod DCNL def import_email_services(cls): DCNL 'Imports and returns email_services module. DCNL Returns: DCNL module. The email_services module.'
@classmethod DCNL def import_memcache_services(cls): DCNL 'Imports and returns memcache_services module. DCNL Returns: DCNL module. The memcache_services module.'
@classmethod DCNL def import_taskqueue_services(cls): DCNL 'Imports and returns taskqueue_services module. DCNL Returns: DCNL module. The taskqueue_services module.'
@classmethod DCNL def import_search_services(cls): DCNL 'Imports and returns search_services module. DCNL Returns: DCNL module. The search_services module.'
def _get_put_error(self, num_res, transient=None): DCNL 'returns a PutError. with num_res results. DCNL If transient is given, it should be an index in the DCNL results array. The result at that index will have a transient DCNL error code.'
def _get_delete_error(self, num_res, transient=None): DCNL 'returns a DeleteError. with num_res results. DCNL If transient is given, it should be an index in the DCNL results array. The result at that index will have a transient DCNL error code.'
def test_create_new(self): DCNL 'Test the creation of a new job.'
def test_enqueue_job(self): DCNL 'Test the enqueueing of a job.'
def test_deferred_job_with_additional_params(self): DCNL 'Test the enqueueing of a job with additional parameters.'
def test_status_code_transitions(self): DCNL 'Test that invalid status code transitions are caught.'
def _populate_data(self): DCNL 'Populate the datastore with four NumbersModel instances.'
def setUp(self): DCNL 'Create an exploration so that there is something to count.'
def setUp(self): DCNL 'Create an exploration so that there is something to count.'
@classmethod DCNL def _kickoff_batch_job_after_previous_one_ends(cls): DCNL 'Override this method so that it does not immediately start a DCNL new MapReduce job. Non-test subclasses should not do this.'
@classmethod DCNL def get_count(cls, exploration_id): DCNL 'Return the number of \'start exploration\' events received. DCNL Answers the query by combining the existing MR job output and the DCNL active realtime_datastore_class.'
def setUp(self): DCNL 'Create an exploration and register the event listener manually.'
def test_continuous_computation_workflow(self): DCNL 'An integration test for continuous computations.'
def test_wrapper_calls_subclass_methods(self): DCNL 'Tests the basic functionality of FunctionWrapper.'
def test_wrapper_calls_passed_method(self): DCNL 'Tests that FunctionWrapper also works for methods'
def test_wrapper_calls_passed_class_method(self): DCNL 'Tests that FunctionWrapper also works for class methods'
def test_wrapper_calls_passed_static_method(self): DCNL 'Tests that FunctionWrapper also works for static methods'
def _validate(self): DCNL 'Validates various properties of a PageSessionMetrics object.'
def get_request_count(self): DCNL 'Returns the number of requests made prior to the page load DCNL completing.'
def get_total_page_size_bytes(self): DCNL 'Returns the total size of a page including all of its resources.'
def get_page_load_time_millisecs(self): DCNL 'Returns the total page load time.'
def get_dom_ready_time_millisecs(self): DCNL 'Returns the time spent constructing the dom tree.'
def get_request_time_millisecs(self): DCNL 'Returns the time spent during request.'
def get_ready_start_time_millisecs(self): DCNL 'Returns the time consumed preparing the new page.'
def get_redirect_time_millisecs(self): DCNL 'Returns the time spent during redirection.'
def get_appcache_time_millisecs(self): DCNL 'Returns the time spent for appcache.'
def get_unload_event_time_millisecs(self): DCNL 'Returns the time spent unloading documents.'
def get_lookup_domain_time_millisecs(self): DCNL 'Returns the time spent for the domain name lookup for the current DCNL document.'
def get_connect_time_millisecs(self): DCNL 'Returns the time spent for establishing the connection to the server DCNL to retrieve the current document.'
def get_init_dom_tree_time_millisecs(self): DCNL 'Returns the time from request to completion of DOM loading.'
def get_load_event_time_millisecs(self): DCNL 'Returns the time spent for completion of the load event of the DCNL current document. The load event is fired when a resource and its DCNL dependent resources have finished loading.'
def print_details(self): DCNL 'Helper function to print details for all the events.'
def get_average_page_load_time_millisecs(self): DCNL 'Returns the average total page load time (in milliseconds).'
def get_average_dom_ready_time_millisecs(self): DCNL 'Returns the average dom ready time (in milliseconds).'
def get_average_request_time_millisecs(self): DCNL 'Returns the average request time (in milliseconds).'
def __init__(self, browser, preload_option, username=None): DCNL 'preload_options can be either of the possible preload options DCNL described in test_config.'
def load_url(self, page_url): DCNL 'Loads the specified url, resulting in server-side caching of related DCNL resources. Used to obtain a uniform and warm-cache state for the tests, DCNL similar to a typical production server state.'
def get_page_metrics_from_uncached_session(self, page_url): DCNL 'Returns a PageSessionMetrics domain object for a given page URL.'
def get_page_metrics_from_cached_session(self, page_url): DCNL 'Returns a PageSessionMetrics domain object for a given page URL DCNL while simulating a cached session i.e, a return user. DCNL Note: This method is stand-alone and does not require DCNL `get_page_session_metrics_for_url` to be called before it.'
def get_page_timings_from_uncached_session(self, page_url): DCNL 'Returns a PageSessionMetrics domain object initialized using DCNL page load timings for a page URL.'
def get_page_timings_from_cached_session(self, page_url): DCNL 'Returns a PageSessionMetrics domain object initialized using page DCNL load timings for a page URL while simulating a cached session i.e, a DCNL return user.'
def _setup_driver(self, proxy=None, use_proxy=False): DCNL 'Initializes a Selenium webdriver instance to programmatically DCNL interact with a browser.'
def _is_current_user_logged_in(self, driver): DCNL 'Checks whether a user is already logged in.'
def __init__(self): DCNL 'Initializes StringClassifierBenchmark by parsing the data DCNL file containing samples.'
@measure_runtime DCNL def train(self, num): DCNL 'Trains a model with num samples. DCNL Args: DCNL num: int. The number of samples to run with. DCNL Returns: DCNL dict. The dict representing the resulting classifier model.'
def generate_training_benchmarks(self): DCNL 'Conduct benchmarking on model training at a pace of adding DCNL 100 samples each time.'
@measure_runtime DCNL def predict(self, num): DCNL 'Predicts the label for num samples with self.classifier. DCNL Args: DCNL num: int. The number of samples to predict the label for.'
def generate_prediction_benchmarks(self): DCNL 'Conduct benchmarking on predicting with self.classifier DCNL at a pace of adding 100 samples each time.'
def _assert_validation_error(self, item, error_substring): DCNL 'Checks that the given item passes default validation.'
def signup_superadmin_user(self): DCNL 'Signs up a superadmin user. Should be called at the end of setUp().'
def log_line(self, line): DCNL 'Print the line with a prefix that can be identified by the DCNL script that calls the test.'
def _stash_current_user_env(self): DCNL 'Stashes the current user-specific env variables for later retrieval. DCNL Developers: please don\'t use this method outside this class -- it makes DCNL the individual tests harder to follow.'
def _restore_stashed_user_env(self): DCNL 'Restores a stashed set of user-specific env variables. DCNL Developers: please don\'t use this method outside this class -- it makes DCNL the individual tests harder to follow.'
def shortDescription(self): DCNL 'Additional information logged during unit test invocation.'
def get_expected_login_url(self, slug): DCNL 'Returns the expected login URL.'
def get_expected_logout_url(self, slug): DCNL 'Returns the expected logout URL.'
def _parse_json_response(self, json_response, expect_errors=False): DCNL 'Convert a JSON server response to an object (such as a dict).'
def get_json(self, url, params=None, expect_errors=False): DCNL 'Get a JSON response, transformed to a Python object.'
def post_json(self, url, payload, csrf_token=None, expect_errors=False, expected_status_int=200, upload_files=None): DCNL 'Post an object to the server by JSON; return the received object.'
def put_json(self, url, payload, csrf_token=None, expect_errors=False, expected_status_int=200): DCNL 'Put an object to the server by JSON; return the received object.'
def get_csrf_token_from_response(self, response): DCNL 'Retrieve the CSRF token from a GET response.'
def signup(self, email, username): DCNL 'Complete the signup process for the user with the given username.'
def set_config_property(self, config_obj, new_config_value): DCNL 'Sets a given configuration object\'s value to the new value specified DCNL using a POST request.'
def set_admins(self, admin_usernames): DCNL 'Set the ADMIN_USERNAMES property.'
def set_moderators(self, moderator_usernames): DCNL 'Set the MODERATOR_USERNAMES property.'
def set_banned_users(self, banned_usernames): DCNL 'Set the BANNED_USERNAMES property.'
def set_collection_editors(self, collection_editor_usernames): DCNL 'Set the WHITELISTED_COLLECTION_EDITOR_USERNAMES property.'
def set_email_senders(self, email_sender_usernames): DCNL 'Set the WHITELISTED_EMAIL_SENDERS property.'
def save_new_default_exploration(self, exploration_id, owner_id, title='A DCSP title'): DCNL 'Saves a new default exploration written by owner_id. DCNL Returns the exploration domain object.'
def save_new_valid_exploration(self, exploration_id, owner_id, title='A DCSP title', category='A DCSP category', objective='An DCSP objective', language_code=constants.DEFAULT_LANGUAGE_CODE, end_state_name=None, interaction_id='TextInput'): DCNL 'Saves a new strictly-validated exploration. DCNL Returns the exploration domain object.'
def save_new_exp_with_states_schema_v0(self, exp_id, user_id, title): DCNL 'Saves a new default exploration with a default version 0 states DCNL dictionary. DCNL This function should only be used for creating explorations in tests DCNL involving migration of datastore explorations that use an old states DCNL schema version. DCNL Note that it makes an explicit commit to the datastore instead of using DCNL the usual functions for updating and creating explorations. This is DCNL because the latter approach would result in an exploration with the DCNL *current* states schema version.'
def save_new_default_collection(self, collection_id, owner_id, title='A DCSP title', category='A DCSP category', objective='An DCSP objective', language_code=constants.DEFAULT_LANGUAGE_CODE): DCNL 'Saves a new default collection written by owner_id. DCNL Returns the collection domain object.'
def get_updated_param_dict(self, param_dict, param_changes, exp_param_specs): DCNL 'Updates a param dict using the given list of param_changes. DCNL Note that the list of parameter changes is ordered. Parameter DCNL changes later in the list may depend on parameter changes that have DCNL been set earlier in the same list.'
def get_static_asset_filepath(self): DCNL 'Returns filepath for referencing static files on disk. DCNL examples: \'\' or \'build/\''
def get_static_asset_url(self, asset_suffix): DCNL 'Returns the relative path for the asset, appending it to the DCNL corresponding cache slug. asset_suffix should have a leading DCNL slash.'
@contextlib.contextmanager DCNL def swap(self, obj, attr, newvalue): DCNL 'Swap an object\'s attribute value within the context of a DCNL \'with\' statement. The object can be anything that supports DCNL getattr and setattr, such as class instances, modules, ... DCNL Example usage: DCNL import math DCNL with self.swap(math, \'sqrt\', lambda x: 42): DCNL print math.sqrt(16.0)  # prints 42 DCNL print math.sqrt(16.0)  # prints 4 as expected. DCNL Note that this does not work directly for classmethods. In this case, DCNL you will need to import the \'types\' module, as follows: DCNL import types DCNL with self.swap( DCNL SomePythonClass, \'some_classmethod\', DCNL types.MethodType(new_classmethod, SomePythonClass)): DCNL NOTE: self.swap and other context managers that are created using DCNL contextlib.contextmanager use generators that yield exactly once. This DCNL means that you can only use them once after construction, otherwise, DCNL the generator will immediately raise StopIteration, and contextlib will DCNL raise a RuntimeError.'
@contextlib.contextmanager DCNL def urlfetch_mock(self, content='', status_code=200, headers=None): DCNL 'Enables the custom urlfetch mock (URLFetchServiceMock) within the DCNL context of a \'with\' statement. DCNL This mock is currently used for signup to prevent external HTTP DCNL requests to fetch the Gravatar profile picture for new users while the DCNL backend tests are being run. DCNL args: DCNL - content: Response content or body. DCNL - status_code: Response status code. DCNL - headers: Response headers.'
def count_jobs_in_taskqueue(self, queue_name=None): DCNL 'Counts the jobs in the given queue. If queue_name is None, DCNL defaults to counting the jobs in all queues available.'
def get_pending_tasks(self, queue_name=None): DCNL 'Returns the jobs in the given queue. If queue_name is None, DCNL defaults to returning the jobs in all queues available.'
def process_and_flush_pending_tasks(self, queue_name=None): DCNL 'Runs and flushes pending tasks. If queue_name is None, does so for DCNL all queues; otherwise, this only runs and flushes tasks for the DCNL specified queue. DCNL For more information on self.taskqueue_stub see DCNL https://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/api/taskqueue/taskqueue_stub.py'
def __init__(self, func): DCNL 'Creates a new FunctionWrapper instance. DCNL args: DCNL - func: a callable, or data descriptor. If it\'s a descriptor, its DCNL __get__ should return a bound method. For example, func can be a DCNL function, a method, a static or class method, but not a @property.'
def __init__(self, f): DCNL 'Counts the number of times the given function has been called. DCNL See FunctionWrapper for arguments.'
def __init__(self, f, exception, num_tries_before_success): DCNL 'Create a new Failing function. DCNL args: DCNL - f: see FunctionWrapper. DCNL - exception: the exception to be raised. DCNL - num_tries_before_success: the number of times to raise an DCNL exception, before a call succeeds. If this is 0, all calls will DCNL succeed, if it is FailingFunction.INFINITY, all calls will fail.'
@acl_decorators.can_access_creator_dashboard DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_creator_dashboard DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_creator_dashboard DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_create_exploration DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.can_create_collection DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.can_upload_exploration DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.can_manage_email_dashboard DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_manage_email_dashboard DCNL def post(self): DCNL 'Post handler for query.'
def _validate(self, data): DCNL 'Validator for data obtained from fontend.'
@acl_decorators.can_perform_cron_tasks DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_perform_cron_tasks DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_perform_cron_tasks DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_perform_cron_tasks DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_perform_cron_tasks DCNL def get(self): DCNL 'Clean up intermediate data items for completed M/R jobs that DCNL started more than MAX_MAPREDUCE_METADATA_RETENTION_MSECS milliseconds DCNL ago. DCNL Map/reduce runs leave around a large number of rows in several DCNL tables.  This data is useful to have around for a while: DCNL - it helps diagnose any problems with jobs that may be occurring DCNL - it shows where resource usage is occurring DCNL However, after a few days, this information is less relevant, and DCNL should be cleaned up.'
@acl_decorators.can_play_collection DCNL def get(self, collection_id): DCNL 'Handles GET requests.'
@acl_decorators.can_play_collection DCNL def get(self, collection_id): DCNL 'Populates the data on the individual collection page.'
def test_library_page(self): DCNL 'Test access to the library page.'
def test_library_handler_demo_exploration(self): DCNL 'Test the library data handler on demo explorations.'
def test_library_handler_for_created_explorations(self): DCNL 'Test the library data handler for manually created explirations.'
def test_library_group_pages(self): DCNL 'Test access to the top rated and recently published pages.'
def test_handler_for_recently_published_library_group_page(self): DCNL 'Test library handler for recently published group page.'
def test_handler_for_top_rated_library_group_page(self): DCNL 'Test library handler for top rated group page.'
def get(self): DCNL 'Logs the user out, and returns them to a specified follow-up DCNL page (or the home page if no follow-up page is specified).'
def dispatch(self): DCNL 'Overrides dispatch method in webapp2 superclass. DCNL Raises: DCNL Exception: The CSRF token is missing. DCNL UnauthorizedUserException: The CSRF token is invalid.'
def get(self, *args, **kwargs): DCNL 'Base method to handle GET requests.'
def post(self, *args): DCNL 'Base method to handle POST requests.'
def put(self, *args): DCNL 'Base method to handle PUT requests.'
def delete(self, *args): DCNL 'Base method to handle DELETE requests.'
def render_json(self, values): DCNL 'Prepares JSON response to be sent to the client. DCNL Args: DCNL values: dict. The key-value pairs to encode in the JSON response.'
def render_template(self, filepath, iframe_restriction='DENY', redirect_url_on_logout=None): DCNL 'Prepares an HTML response to be sent to the client. DCNL Args: DCNL filepath: str. The template filepath. DCNL iframe_restriction: str or None. Possible values are DCNL \'DENY\' and \'SAMEORIGIN\': DCNL DENY: Strictly prevents the template to load in an iframe. DCNL SAMEORIGIN: The template can only be displayed in a frame DCNL on the same origin as the page itself. DCNL redirect_url_on_logout: str or None. URL to redirect to on logout.'
def _render_exception(self, error_code, values): DCNL 'Renders an error page, or an error JSON response. DCNL Args: DCNL error_code: int. The HTTP status code (expected to be one of DCNL 400, 401, 404 or 500). DCNL values: dict. The key-value pairs to include in the response.'
def handle_exception(self, exception, unused_debug_mode): DCNL 'Overwrites the default exception handler. DCNL Args: DCNL exception: The exception that was thrown. DCNL unused_debug_mode: bool. True if the web application is running DCNL in debug mode.'
@classmethod DCNL def init_csrf_secret(cls): DCNL 'Verify that non-default CSRF secret exists; creates one if not.'
@classmethod DCNL def _create_token(cls, user_id, issued_on): DCNL 'Creates a new CSRF token. DCNL Args: DCNL user_id: str. The user_id for whom the token is generated. DCNL issued_on: float. The timestamp at which the token was issued. DCNL Returns: DCNL str: The generated CSRF token.'
@classmethod DCNL def is_csrf_token_valid(cls, user_id, token): DCNL 'Validates a given CSRF token. DCNL Args: DCNL user_id: str. The user_id to validate the CSRF token against. DCNL token: str. The CSRF token to validate.'
@acl_decorators.open_access DCNL def get(self, username): DCNL 'Handles GET requests for the publicly-viewable profile page.'
@acl_decorators.open_access DCNL def get(self, username): DCNL 'Handles GET requests.'
@acl_decorators.can_manage_own_profile DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_manage_own_profile DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_manage_own_profile DCNL def put(self): DCNL 'Handles POST requests.'
@acl_decorators.can_manage_own_profile DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.require_user_id_else_redirect_to_homepage DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.require_user_id_else_redirect_to_homepage DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.require_user_id_else_redirect_to_homepage DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.require_user_id_else_redirect_to_homepage DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.can_manage_own_profile DCNL def put(self): DCNL 'Handles PUT requests.'
def setUp(self): DCNL 'Before each individual test, create a dummy exploration.'
def setUp(self): DCNL 'Before the test, create an exploration_dict.'
def test_classification_handler(self): DCNL 'Test the classification handler for a right answer.'
def test_give_feedback_handler(self): DCNL 'Test giving feedback handler.'
def test_get_init_params(self): DCNL 'Test the get_init_params() method.'
def test_update_learner_params(self): DCNL 'Test the update_learner_params() method.'
def test_assign_and_read_ratings(self): DCNL 'Test the PUT and GET methods for ratings.'
def test_non_logged_in_users_cannot_rate(self): DCNL 'Check non logged-in users can view but not submit ratings.'
def test_ratings_by_different_users(self): DCNL 'Check that ratings by different users do not interfere.'
def test_that_emails_are_sent(self): DCNL 'Check that emails are sent to moderaters when a logged-in DCNL user reports.'
def test_non_logged_in_users_cannot_report(self): DCNL 'Check that non-logged in users cannot report.'
def test_independent_exp_complete_event_handler(self): DCNL 'Test handler for completion of explorations not in the context of DCNL collections.'
def test_exp_complete_event_in_collection(self): DCNL 'Test handler for completion of explorations in the context of DCNL collections.'
def test_exp_incomplete_event_handler(self): DCNL 'Test handler for leaving an exploration incomplete.'
def test_remove_exp_from_incomplete_list_handler(self): DCNL 'Test handler for removing explorations from the partially completed DCNL list.'
def test_remove_collection_from_incomplete_list_handler(self): DCNL 'Test handler for removing collections from incomplete list.'
def test_logged_out_homepage(self): DCNL 'Test the logged-out version of the home page.'
def test_notifications_dashboard_redirects_for_logged_out_users(self): DCNL 'Test the logged-out view of the notifications dashboard.'
def test_logged_in_notifications_dashboard(self): DCNL 'Test the logged-in view of the notifications dashboard.'
def _record_start(self, exp_id, exp_version, state): DCNL 'Record start event to an exploration. DCNL Completing the exploration is not necessary here since the total_plays DCNL are currently being counted taking into account only the # of starts.'
def _rate_exploration(self, exp_id, ratings): DCNL 'Create num_ratings ratings for exploration with exp_id, DCNL of values from ratings.'
def _get_recent_notifications_mock_by_viewer(self, unused_user_id): DCNL 'Returns a single feedback thread by VIEWER_ID.'
def _get_recent_notifications_mock_by_anonymous_user(self, unused_user_id): DCNL 'Returns a single feedback thread by an anonymous user.'
def test_author_ids_are_handled_correctly(self): DCNL 'Test that author ids are converted into author usernames DCNL and that anonymous authors are handled correctly.'
def test_new_exploration_ids(self): DCNL 'Test generation of exploration ids.'
def test_exploration_upload_button(self): DCNL 'Test that the exploration upload button appears when appropriate.'
def setUp(self): DCNL 'Before each individual test, create a dummy collection.'
def test_welcome_collection(self): DCNL 'Test a learner\'s progression through the default collection.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests for group pages.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self, obj_type): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self, generator_id): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self, exploration_id, encoded_filepath): DCNL 'Returns an image. DCNL Args: DCNL exploration_id: the id of the exploration. DCNL encoded_filepath: a string representing the image filepath. This DCNL string is encoded in the frontend using encodeURIComponent().'
@acl_decorators.open_access DCNL def get(self, exploration_id, filename): DCNL 'Returns an audio file. DCNL Args: DCNL encoded_filepath: a string representing the audio filepath. This DCNL string is encoded in the frontend using encodeURIComponent().'
def test_about_page(self): DCNL 'Test the About page.'
def setUp(self): DCNL 'Complete the signup process for self.ADMIN_EMAIL.'
def test_admin_page_rights(self): DCNL 'Test access rights to the admin page.'
def test_change_configuration_property(self): DCNL 'Test that configuration properties can be changed.'
def test_change_about_page_config_property(self): DCNL 'Test that config property values are changed correctly.'
def setUp(self): DCNL 'Complete the signup process for self.ADMIN_EMAIL.'
def setUp(self): DCNL 'Complete the signup process for self.ADMIN_EMAIL.'
def setUp(self): DCNL 'Complete the signup process for self.ADMIN_EMAIL.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self, *args, **kwargs): DCNL 'Handles GET requests.'
def setUp(self): DCNL 'Completes the sign-up process for self.EDITOR_EMAIL.'
def assert_can_edit(self, response_body): DCNL 'Returns True if the response body indicates that the exploration is DCNL editable.'
def assert_cannot_edit(self, response_body): DCNL 'Returns True if the response body indicates that the exploration is DCNL not editable.'
def test_editor_page(self): DCNL 'Test access to editor pages for the sample exploration.'
def test_new_state_template(self): DCNL 'Test the validity of the NEW_STATE_TEMPLATE.'
def test_that_default_exploration_cannot_be_published(self): DCNL 'Test that publishing a default exploration raises an error DCNL due to failing strict validation.'
def test_add_new_state_error_cases(self): DCNL 'Test the error cases for adding a new state to an exploration.'
def test_deletion_rights_for_unpublished_exploration(self): DCNL 'Test rights management for deletion of unpublished explorations.'
def test_deletion_rights_for_published_exploration(self): DCNL 'Test rights management for deletion of published explorations.'
def test_logging_info_after_deletion(self): DCNL 'Test correctness of logged statements while deleting exploration.'
def setUp(self): DCNL 'Create exploration with two versions'
def test_reverting_to_old_exploration(self): DCNL 'Test reverting to old exploration versions.'
def test_versioning_for_default_exploration(self): DCNL 'Test retrieval of old exploration versions.'
def test_user_banning(self): DCNL 'Test that banned users are banned.'
def test_exploration_rights_handler(self): DCNL 'Test exploration rights handler.'
def test_user_exploration_emails_handler(self): DCNL 'Test user exploration emails handler.'
@acl_decorators.can_access_moderator_page DCNL def get(self): DCNL 'Handles GET requests.'
def setUp(self): DCNL 'Load a demo exploration and register self.EDITOR_EMAIL.'
def test_image_upload_and_download(self): DCNL 'Test image uploading and downloading.'
def test_upload_empty_image(self): DCNL 'Test upload of an empty image.'
def test_upload_bad_image(self): DCNL 'Test upload of a malformed image.'
def test_get_invalid_image(self): DCNL 'Test retrieval of invalid images.'
def test_invalid_extension_is_detected(self): DCNL 'Test that invalid extensions are caught.'
def test_upload_empty_audio(self): DCNL 'Test upload of empty audio.'
def test_upload_bad_audio(self): DCNL 'Test upload of malformed audio.'
def test_missing_extensions_are_detected(self): DCNL 'Test upload of filenames with no extensions are caught.'
def test_exceed_max_length_detected(self): DCNL 'Test that audio file is less than max playback length.'
def test_non_matching_extensions_are_detected(self): DCNL 'Test that filenames with extensions that don\'t match the audio are DCNL detected.'
def setUp(self): DCNL 'Completes the sign-up process for self.EDITOR_EMAIL.'
def test_access_collection_editor_page(self): DCNL 'Test access to editor pages for the sample collection.'
def test_editable_collection_handler_put_cannot_access(self): DCNL 'Check that non-editors cannot access editable put handler'
def test_editable_collection_handler_put_can_access(self): DCNL 'Check that editors can access put handler'
def test_dev_indicator_appears_in_dev_and_not_in_production(self): DCNL 'Test dev indicator appears in dev and not in production.'
def test_that_no_get_results_in_500_error(self): DCNL 'Test that no GET request results in a 500 error.'
def test_requests_for_invalid_paths(self): DCNL 'Test that requests for invalid paths result in a 404 error.'
def test_redirect_in_logged_out_states(self): DCNL 'Test for a redirect in logged out state on \'/\'.'
def get(self): DCNL 'Handles GET requests.'
def post(self): DCNL 'Handles POST requests.'
def test_logout_page(self): DCNL 'Tests for logout handler.'
def _get_tags(self, input_string, key, filename): DCNL 'Returns the parts in the input string that lie within <...> DCNL characters.'
def test_i18n_keys(self): DCNL 'Tests that the keys in all JSON files are a subset of those in DCNL en.json.'
def test_alphabetic_i18n_keys(self): DCNL 'Tests that the keys of all i18n json files are arranged in DCNL alphabetical order.'
def test_keys_match_en_qqq(self): DCNL 'Tests that en.json and qqq.json have the exact same set of keys.'
def test_keys_in_source_code_match_en(self): DCNL 'Tests that keys in HTML files are present in en.json.'
def test_html_in_translations_is_preserved_correctly(self): DCNL 'Tests that HTML in translated strings matches the original DCNL structure.'
@acl_decorators.can_access_admin_page DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_admin_page DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_admin_page DCNL def post(self): DCNL 'Handles POST requests.'
def _generate_dummy_explorations(self, num_dummy_exps_to_generate, num_dummy_exps_to_publish): DCNL 'Generates and publishes the given number of dummy explorations. DCNL Args: DCNL num_dummy_exps_to_generate: int. Count of dummy explorations to DCNL be generated. DCNL num_dummy_exps_to_publish: int. Count of explorations to DCNL be published. DCNL Raises: DCNL Exception: Environment is not DEVMODE.'
@acl_decorators.can_access_admin_page DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def get(self, challenge): DCNL 'Handles GET requests.'
def test_email_preferences_updates(self): DCNL 'Test that Preferences Handler correctly updates the email DCNL preferences of the user.'
def test_save_site_language_handler(self): DCNL 'Test the language is saved in the preferences when handler is called.'
@acl_decorators.can_access_moderator_page DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_moderator_page DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_moderator_page DCNL def post(self): DCNL 'Handles POST requests.'
@acl_decorators.can_send_moderator_emails DCNL def get(self, action): DCNL 'Handles GET requests.'
@acl_decorators.can_access_learner_dashboard DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_access_learner_dashboard DCNL def get(self, exploration_id, thread_id): DCNL 'Handles GET requests.'
def test_moderator_page(self): DCNL 'Tests access to the Moderator page'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.can_edit_collection DCNL def get(self, collection_id): DCNL 'Handles GET requests.'
def _require_valid_version(self, version_from_payload, collection_version): DCNL 'Check that the payload version matches the given collection version.'
@acl_decorators.can_edit_collection DCNL def get(self, collection_id): DCNL 'Populates the data on the individual collection page.'
@acl_decorators.can_edit_collection DCNL def put(self, collection_id): DCNL 'Updates properties of the given collection.'
@acl_decorators.can_edit_collection DCNL def get(self, collection_id): DCNL 'Gets the editing rights for the given collection.'
@acl_decorators.can_manage_collection_publish_status DCNL def put(self, collection_id): DCNL 'Updates the editing rights for the given collection.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET requests.'
@acl_decorators.open_access DCNL def post(self): DCNL 'Handles POST requests.'
def test_subscribe_handler(self): DCNL 'Test handler for new subscriptions to creators'
def test_unsubscribe_handler(self): DCNL 'Test handler for unsubscriptions.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
def _get_exploration_data(self, exploration_id, apply_draft=False, version=None): DCNL 'Returns a description of the given exploration.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Gets the data for the exploration overview page.'
@acl_decorators.can_edit_exploration DCNL def put(self, exploration_id): DCNL 'Updates properties of the given exploration.'
@acl_decorators.can_delete_exploration DCNL def delete(self, exploration_id): DCNL 'Deletes the given exploration.'
@acl_decorators.can_modify_exploration_roles DCNL def put(self, exploration_id): DCNL 'Updates the editing rights for the given exploration.'
def _publish_exploration(self, exploration_id): DCNL 'Publish an exploration. DCNL Args: DCNL exploration_id: str. Id of the exploration. DCNL Raises: DCNL InvalidInputException: Given exploration is invalid.'
def _unpublicize_exploration(self, exploration_id): DCNL 'Unpublicize an exploration. DCNL Args: DCNL exploration_id: str. Id of the exploration. DCNL Raises: DCNL InvalidInputException: Given exploration is invalid.'
@acl_decorators.can_access_moderator_page DCNL def put(self, exploration_id): DCNL 'Updates the publication status of the given exploration, and sends DCNL an email to all its owners.'
@acl_decorators.can_edit_exploration DCNL def put(self, exploration_id): DCNL 'Updates the email notification preferences for the given exploration. DCNL Args: DCNL exploration_id: str. The exploration id. DCNL Raises: DCNL InvalidInputException: Invalid message type.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id, escaped_state_name): DCNL 'Handles GET requests.'
@acl_decorators.can_download_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_play_exploration DCNL def post(self, unused_exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_edit_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_edit_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_view_exploration_stats DCNL def get(self, exploration_id, exploration_version): DCNL 'Handles GET requests.'
@acl_decorators.can_view_exploration_stats DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_view_exploration_stats DCNL def get(self, exploration_id, escaped_state_name): DCNL 'Handles GET requests.'
@acl_decorators.can_edit_exploration DCNL def post(self, exploration_id): DCNL 'Saves an image uploaded by a content creator.'
@acl_decorators.can_edit_exploration DCNL def post(self, exploration_id): DCNL 'Saves an audio file uploaded by a content creator.'
@acl_decorators.can_play_exploration DCNL def post(self, unused_exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_edit_exploration DCNL def put(self, exploration_id): DCNL 'Handles PUT requests for draft updation.'
@acl_decorators.can_edit_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST request for discarding draft changes.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Populates the data on the individual exploration page.'
@acl_decorators.can_play_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_play_exploration DCNL def post(self, unused_exploration_id): DCNL 'Handle POST requests. DCNL Note: unused_exploration_id is needed because DCNL @acl_decorators.can_play_exploration needs 2 arguments.'
@acl_decorators.can_play_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_play_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_play_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_play_exploration DCNL def post(self, exploration_id): DCNL 'Handles POST requests.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@acl_decorators.can_rate_exploration DCNL def put(self, exploration_id): DCNL 'Handles PUT requests for submitting ratings at the end of an DCNL exploration.'
@acl_decorators.can_play_exploration DCNL def get(self, exploration_id): DCNL 'Handles GET requests.'
@classmethod DCNL def dispatch_event(cls, event_type, *args, **kwargs): DCNL 'Dispatches an incoming event to the ContinuousComputation DCNL classes which listen to events of that type.'
@classmethod DCNL def is_normalized_username_taken(cls, normalized_username): DCNL 'Returns whether or not a given normalized_username is taken. DCNL Args: DCNL normalized_username: str. The given user\'s normalized username. DCNL Returns: DCNL bool. Whether the normalized_username has already been taken.'
@classmethod DCNL def get_by_normalized_username(cls, normalized_username): DCNL 'Returns a user model given a normalized username. DCNL Args: DCNL normalized_username: str. The user\'s normalized username. DCNL Returns: DCNL UserSettingsModel. The UserSettingsModel instance which contains DCNL the same normalized_username.'
@classmethod DCNL def get_by_role(cls, role): DCNL 'Returns user models with given role. DCNL Args: DCNL role: str. The role Id that is being queried for. DCNL Returns: DCNL list(UserSettingsModel). The UserSettingsModel instances which DCNL have the given role Id.'
@classmethod DCNL def create(cls, user_id, exploration_id): DCNL 'Creates a new ExpUserLastPlaythroughModel instance and returns it. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL ExpUserLastPlaythroughModel. The newly created DCNL ExpUserLastPlaythroughModel instance.'
@classmethod DCNL def get(cls, user_id, exploration_id): DCNL 'Gets the ExpUserLastPlaythroughModel for the given user and DCNL exploration id. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL ExpUserLastPlaythroughModel. The ExpUserLastPlaythroughModel DCNL instance which matches with the given user_id and exploration_id.'
@classmethod DCNL def get_or_create(cls, user_id): DCNL 'Creates a new UserStatsModel instance, if it does not already exist. DCNL Args: DCNL user_id: str. The user_id to be associated with the UserStatsModel. DCNL Returns: DCNL UserStatsModel. Either an existing one which matches the DCNL given user_id, or the newly created one if it did not already exist.'
@classmethod DCNL def create(cls, user_id, exploration_id): DCNL 'Creates a new ExplorationUserDataModel instance and returns it. DCNL Note that the client is responsible for actually saving this entity to DCNL the datastore. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL ExplorationUserDataModel. The newly created DCNL ExplorationUserDataModel instance.'
@classmethod DCNL def get(cls, user_id, exploration_id): DCNL 'Gets the ExplorationUserDataModel for the given user and exploration DCNL ids. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL ExplorationUserDataModel. The ExplorationUserDataModel instance DCNL which matches with the given user_id and exploration_id.'
@classmethod DCNL def get_multi(cls, user_ids, exploration_id): DCNL 'Gets the ExplorationUserDataModel for the given user and exploration DCNL ids. DCNL Args: DCNL user_ids: list(str). A list of user_ids. DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL ExplorationUserDataModel. The ExplorationUserDataModel instance DCNL which matches with the given user_ids and exploration_id.'
@classmethod DCNL def create(cls, user_id, collection_id): DCNL 'Creates a new CollectionProgressModel instance and returns it. DCNL Note: the client is responsible for actually saving this entity to the DCNL datastore. DCNL Args: DCNL user_id: str. The id of the user. DCNL collection_id: str. The id of the collection. DCNL Returns: DCNL CollectionProgressModel. The newly created CollectionProgressModel DCNL instance.'
@classmethod DCNL def get(cls, user_id, collection_id): DCNL 'Gets the CollectionProgressModel for the given user and collection DCNL id. DCNL Args: DCNL user_id: str. The id of the user. DCNL collection_id: str. The id of the collection. DCNL Returns: DCNL CollectionProgressModel. The CollectionProgressModel instance which DCNL matches the given user_id and collection_id.'
@classmethod DCNL def get_multi(cls, user_id, collection_ids): DCNL 'Gets the CollectionProgressModels for the given user and collection DCNL ids. DCNL Args: DCNL user_id: str. The id of the user. DCNL collection_ids: list(str). The ids of the collections. DCNL Returns: DCNL list(CollectionProgressModel). The list of CollectionProgressModel DCNL instances which matches the given user_id and collection_ids.'
@classmethod DCNL def get_or_create(cls, user_id, collection_id): DCNL 'Gets the CollectionProgressModel for the given user and collection DCNL ids, or creates a new instance with if no such instance yet exists DCNL within the datastore. DCNL Args: DCNL user_id: str. The id of the user. DCNL collection_id: str. The id of the collection. DCNL Returns: DCNL CollectionProgressModel. Either an existing one which DCNL matches the given user_id and collection_id, or the newly created DCNL one if it does not already exist.'
@classmethod DCNL def fetch_page(cls, page_size, cursor): DCNL 'Fetches a list of all query_models sorted by creation date. DCNL Args: DCNL page_size: int. The maximum number of entities to be returned. DCNL cursor: str or None. The list of returned entities starts from this DCNL datastore cursor. DCNL Returns: DCNL 3-tuple of (query_models, cursor, more) as described in fetch_page() DCNL at: DCNL https://developers.google.com/appengine/docs/python/ndb/queryclass, DCNL where: DCNL query_models: List of UserQueryModel instances. DCNL next_cursor: str or None. A query cursor pointing to the next DCNL batch of results. If there are no more results, this might DCNL be None. DCNL more: bool. If True, there are probably more results after DCNL this batch. If False, there are no further results after DCNL this batch.'
@classmethod DCNL def _generate_id(cls, intent): DCNL 'Generates an ID for a new SentEmailModel instance. DCNL Args: DCNL intent: str. The intent string, i.e. the purpose of the email. DCNL Valid intent strings are defined in feconf.py. DCNL Returns: DCNL str. The newly-generated ID for the SentEmailModel instance. DCNL Raises: DCNL Exception: The id generator for SentEmailModel is producing DCNL too many collisions.'
@classmethod DCNL def create(cls, recipient_id, recipient_email, sender_id, sender_email, intent, subject, html_body, sent_datetime): DCNL 'Creates a new SentEmailModel entry. DCNL Args: DCNL recipient_id: str. The user ID of the email recipient. DCNL recipient_email: str. The email address of the recipient. DCNL sender_id: str. The user ID of the email sender. DCNL sender_email: str. The email address used to send the notification. DCNL intent: str. The intent string, i.e. the purpose of the email. DCNL subject: str. The subject line of the email. DCNL html_body: str. The HTML content of the email body. DCNL sent_datetime: datetime.datetime. The datetime the email was sent, DCNL in UTC.'
def put(self): DCNL 'Saves this SentEmailModel instance to the datastore.'
@classmethod DCNL def get_by_hash(cls, email_hash, sent_datetime_lower_bound=None): DCNL 'Returns all messages with a given email_hash. DCNL This also takes an optional sent_datetime_lower_bound argument, DCNL which is a datetime instance. If this is given, only DCNL SentEmailModel instances sent after sent_datetime_lower_bound DCNL should be returned. DCNL Args: DCNL email_hash: str. The hash value of the email. DCNL sent_datetime_lower_bound: datetime.datetime. The lower bound on DCNL sent_datetime of the email to be searched. DCNL Returns: DCNL list(SentEmailModel). A list of emails which have the given hash DCNL value and sent more recently than sent_datetime_lower_bound. DCNL Raises: DCNL Exception: sent_datetime_lower_bound is not a valid DCNL datetime.datetime.'
@classmethod DCNL def _generate_hash(cls, recipient_id, email_subject, email_body): DCNL 'Generate hash for a given recipient_id, email_subject and cleaned DCNL email_body. DCNL Args: DCNL recipient_id: str. The user ID of the email recipient. DCNL email_subject: str. The subject line of the email. DCNL email_body: str. The HTML content of the email body. DCNL Returns: DCNL str. The generated hash value of the given email.'
@classmethod DCNL def check_duplicate_message(cls, recipient_id, email_subject, email_body): DCNL 'Check for a given recipient_id, email_subject and cleaned DCNL email_body, whether a similar message has been sent in the last DCNL DUPLICATE_EMAIL_INTERVAL_MINS. DCNL Args: DCNL recipient_id: str. The user ID of the email recipient. DCNL email_subject: str. The subject line of the email. DCNL email_body: str. The HTML content of the email body. DCNL Returns: DCNL bool. Whether a similar message has been sent to the same recipient DCNL in the last DUPLICATE_EMAIL_INTERVAL_MINS.'
@classmethod DCNL def create(cls, instance_id, recipient_ids, sender_id, sender_email, intent, subject, html_body, sent_datetime): DCNL 'Creates a new BulkEmailModel entry. DCNL Args: DCNL instance_id: str. The ID of the instance. DCNL recipient_ids: list(str). The user IDs of the email recipients. DCNL sender_id: str. The user ID of the email sender. DCNL sender_email: str. The email address used to send the notification. DCNL intent: str. The intent string, i.e. the purpose of the email. DCNL subject: str. The subject line of the email. DCNL html_body: str. The HTML content of the email body. DCNL sent_datetime: datetime.datetime. The date and time the email DCNL was sent, in UTC.'
@classmethod DCNL def create(cls, user_id, exploration_id, thread_id): DCNL 'Creates a new FeedbackEmailUniqueIDModel entry. DCNL Args: DCNL user_id: str. ID of the corresponding user. DCNL exploration_id: str. ID of the corresponding exploration. DCNL thread_id: str. ID of the corresponding thread. DCNL Returns: DCNL str. A unique ID that can be used in \'reply-to\' email address. DCNL Raises: DCNL Exception: Model instance for given user_id, exploration_id and DCNL thread_id already exists.'
@property DCNL def id(self): DCNL 'A unique id for this model instance.'
def _pre_put_hook(self): DCNL 'This is run before model instances are saved to the datastore. DCNL Subclasses of BaseModel should override this method.'
@classmethod DCNL def get(cls, entity_id, strict=True): DCNL 'Gets an entity by id. DCNL Args: DCNL entity_id: str. DCNL strict: bool. Whether to fail noisily if no entity with the given id DCNL exists in the datastore. Default is True. DCNL Returns: DCNL None, if strict == False and no undeleted entity with the given id DCNL exists in the datastore. Otherwise, the entity instance that DCNL corresponds to the given id. DCNL Raises: DCNL base_models.BaseModel.EntityNotFoundError: if strict == True and DCNL no undeleted entity with the given id exists in the datastore.'
@classmethod DCNL def get_multi(cls, entity_ids, include_deleted=False): DCNL 'Gets list of entities by list of ids. DCNL Args: DCNL entity_ids: list(str). DCNL include_deleted: bool. Whether to include deleted entities in the DCNL return list. Default is False. DCNL Returns: DCNL list(*|None). A list that contains model instances that match DCNL the corresponding entity_ids in the input list. If an instance is DCNL not found, or it has been deleted and include_deleted is False, DCNL then the corresponding entry is None.'
@classmethod DCNL def put_multi(cls, entities): DCNL 'Stores the given ndb.Model instances. DCNL Args: DCNL entities: list(ndb.Model).'
def delete(self): DCNL 'Deletes this instance.'
@classmethod DCNL def get_all(cls, include_deleted=False): DCNL 'Gets iterable of all entities of this class. DCNL Args: DCNL include_deleted: bool. If True, then entities that have been marked DCNL deleted are returned as well. Defaults to False. DCNL Returns: DCNL iterable. Filterable iterable of all entities of this class.'
@classmethod DCNL def get_new_id(cls, entity_name): DCNL 'Gets a new id for an entity, based on its name. DCNL The returned id is guaranteed to be unique among all instances of this DCNL entity. DCNL Args: DCNL entity_name: The name of the entity. Coerced to a utf-8 encoded DCNL string. Defaults to \'\'. DCNL Returns: DCNL str. New unique id for this entity class. DCNL Raises: DCNL Exception: An ID cannot be generated within a reasonable number DCNL of attempts.'
@classmethod DCNL def _fetch_page_sorted_by_last_updated(cls, query, page_size, urlsafe_start_cursor): DCNL 'Fetches a page of entities sorted by their last_updated attribute in DCNL descending order (newly updated first). DCNL Args: DCNL query: ndb.Query. DCNL page_size: int. The maximum number of entities to be returned. DCNL urlsafe_start_cursor: str or None. If provided, the list of returned DCNL entities starts from this datastore cursor. Otherwise, DCNL the returned entities start from the beginning of the full DCNL list of entities. DCNL Returns: DCNL 3-tuple of (results, cursor, more) as described in fetch_page() at: DCNL https://developers.google.com/appengine/docs/python/ndb/queryclass, DCNL where: DCNL results: List of query results. DCNL cursor: str or None. A query cursor pointing to the next batch DCNL of results. If there are no more results, this will be None. DCNL more: bool. If True, there are (probably) more results after DCNL this batch. If False, there are no further results after DCNL this batch.'
def _compute_snapshot(self): DCNL 'Generates a snapshot (dict) from the model property values.'
def _reconstitute_from_snapshot_id(self, snapshot_id): DCNL 'Gets a reconstituted instance of this model class, based on the given DCNL snapshot id. DCNL Args: DCNL snapshot_id: str. DCNL Returns: DCNL VersionedModel. Reconstituted instance.'
@classmethod DCNL def _get_snapshot_id(cls, instance_id, version_number): DCNL 'Gets a unique snapshot id for this instance and version. DCNL Args: DCNL instance_id: str. DCNL version_number: int. DCNL Returns: DCNL str. The unique snapshot id corresponding to the given instance and DCNL version.'
def _trusted_commit(self, committer_id, commit_type, commit_message, commit_cmds): DCNL 'Evaluates and executes commit. Main function for all commit types. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_type: str. Unique identifier of commit type. Possible values DCNL are in COMMIT_TYPE_CHOICES. DCNL commit_message: str. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, should give sufficient information to DCNL reconstruct the commit. Dict always contains: DCNL cmd: str. Unique command. DCNL And then additional arguments for that command. For example: DCNL {\'cmd\': \'AUTO_revert_version_number\' DCNL \'version_number\': 4} DCNL Raises: DCNL Exception: No snapshot metadata class has been defined. DCNL Exception: No snapshot content class has been defined. DCNL Exception: commit_cmds is not a list of dicts.'
def delete(self, committer_id, commit_message, force_deletion=False): DCNL 'Deletes this model instance. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_message: str. DCNL force_deletion: bool. If True this model is deleted DCNL completely from storage, otherwise it is only marked as deleted. DCNL Default is False. DCNL Raises: DCNL Exception: This model instance has been already deleted.'
def put(self, *args, **kwargs): DCNL 'For VersionedModels, this method is replaced with commit().'
def commit(self, committer_id, commit_message, commit_cmds): DCNL 'Saves a version snapshot and updates the model. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_message: str. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, should give sufficient information to DCNL reconstruct the commit. Dict always contains: DCNL cmd: str. Unique command. DCNL And then additional arguments for that command. For example: DCNL {\'cmd\': \'AUTO_revert_version_number\' DCNL \'version_number\': 4} DCNL Raises: DCNL Exception: This model instance has been already deleted. DCNL Exception: commit_cmd is in invalid format.'
@classmethod DCNL def revert(cls, model, committer_id, commit_message, version_number): DCNL 'Reverts model to previous version. DCNL Args: DCNL model: VersionedModel. DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_message: str. DCNL version_number: int. Version to revert to. DCNL Raises: DCNL Exception: This model instance has been deleted. DCNL Exception: Reverting is not allowed on this model.'
@classmethod DCNL def get_version(cls, entity_id, version_number): DCNL 'Gets model instance representing the given version. DCNL The snapshot content is used to populate this model instance. The DCNL snapshot metadata is not used. DCNL Args: DCNL entity_id: str. DCNL version_number: int. DCNL Returns: DCNL VersionedModel. Model instance representing given version. DCNL Raises: DCNL Exception: This model instance has been deleted.'
@classmethod DCNL def get(cls, entity_id, strict=True, version=None): DCNL 'Gets model instance. DCNL Args: DCNL entity_id: str. DCNL strict: bool. Whether to fail noisily if no entity with the given id DCNL exists in the datastore. Default is True. DCNL version: int. Version we want to get. Default is None. DCNL Returns: DCNL VersionedModel. If version is None, get the newest version of the DCNL model. Otherwise, get the specified version.'
@classmethod DCNL def get_snapshots_metadata(cls, model_instance_id, version_numbers, allow_deleted=False): DCNL 'Gets a list of dicts, each representing a model snapshot. DCNL One dict is returned for each version number in the list of version DCNL numbers requested. If any of the version numbers does not exist, an DCNL error is raised. DCNL Args: DCNL model_instance_id: str. Id of requested model. DCNL version_numbers: list(int). List of version numbers. DCNL allow_deleted: bool. If is False, an error is raised if the current DCNL model has been deleted. Default is False. DCNL Returns: DCNL list(dict). Each dict contains metadata for a particular snapshot. DCNL It has the following keys: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_message: str. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, should give sufficient information to DCNL reconstruct the commit. Dict always contains: DCNL cmd: str. Unique command. DCNL And then additional arguments for that command. For example: DCNL {\'cmd\': \'AUTO_revert_version_number\' DCNL \'version_number\': 4} DCNL commit_type: str. Unique identifier of commit type. Possible DCNL values are in COMMIT_TYPE_CHOICES. DCNL version_number: int. DCNL created_on_ms: float. Snapshot creation time in milliseconds DCNL since the Epoch. DCNL Raises: DCNL Exception: There is no model instance corresponding to at least one DCNL of the given version numbers.'
def get_unversioned_instance_id(self): DCNL 'Gets the instance id from the snapshot id. DCNL Returns: DCNL str. Instance id part of snapshot id.'
def get_version_string(self): DCNL 'Gets the version number from the snapshot id. DCNL Returns: DCNL str. Version number part of snapshot id.'
def get_unversioned_instance_id(self): DCNL 'Gets the instance id from the snapshot id. DCNL Returns: DCNL str. Instance id part of snapshot id.'
def get_version_string(self): DCNL 'Gets the version number from the snapshot id. DCNL Returns: DCNL str. Version number part of snapshot id.'
def tearDown(self): DCNL 'Deletes all model entities.'
@classmethod DCNL def get_collection_count(cls): DCNL 'Returns the total number of collections.'
def _trusted_commit(self, committer_id, commit_type, commit_message, commit_cmds): DCNL 'Record the event to the commit log after the model commit. DCNL Note that this extends the superclass method. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_type: str. The type of commit. Possible values are in DCNL core.storage.base_models.COMMIT_TYPE_CHOICES. DCNL commit_message: str. The commit description message. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, which should give sufficient information to DCNL reconstruct the commit. Each dict always contains: DCNL cmd: str. Unique command. DCNL and then additional arguments for that command.'
def save(self, committer_id, commit_message, commit_cmds): DCNL 'Updates the collection rights model by applying the given DCNL commit_cmds, then saves it. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_message: str. The commit description message. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, which should give sufficient information to DCNL reconstruct the commit. Each dict always contains: DCNL cmd: str. Unique command. DCNL and additional arguments for that command.'
def _trusted_commit(self, committer_id, commit_type, commit_message, commit_cmds): DCNL 'Record the event to the commit log after the model commit. DCNL Note that this overrides the superclass method. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_type: str. The type of commit. Possible values are in DCNL core.storage.base_models.COMMIT_TYPE_CHOICES. DCNL commit_message: str. The commit description message. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, should give sufficient information to DCNL reconstruct the commit. Each dict always contains: DCNL cmd: str. Unique command. DCNL and then additional arguments for that command.'
@classmethod DCNL def get_all_commits(cls, page_size, urlsafe_start_cursor): DCNL 'Fetches a list of all the commits sorted by their last updated DCNL attribute. DCNL Args: DCNL page_size: int. The maximum number of entities to be returned. DCNL urlsafe_start_cursor: str or None. If provided, the list of DCNL returned entities starts from this datastore cursor. DCNL Otherwise, the returned entities start from the beginning DCNL of the full list of entities. DCNL Returns: DCNL 3-tuple of (results, cursor, more) as described in fetch_page() at: DCNL https://developers.google.com/appengine/docs/python/ndb/queryclass, DCNL where: DCNL results: List of query results. DCNL cursor: str or None. A query cursor pointing to the next DCNL batch of results. If there are no more results, this might DCNL be None. DCNL more: bool. If True, there are (probably) more results after DCNL this batch. If False, there are no further results after DCNL this batch.'
@classmethod DCNL def get_non_private(cls): DCNL 'Returns an iterable with non-private collection summary models. DCNL Returns: DCNL iterable. An iterable with non-private collection summary models.'
@classmethod DCNL def get_private_at_least_viewable(cls, user_id): DCNL 'Returns an iterable with private collection summary models that are DCNL at least viewable by the given user. DCNL Args: DCNL user_id: The id of the given user. DCNL Returns: DCNL iterable. An iterable with private collection summary models that DCNL are at least viewable by the given user.'
@classmethod DCNL def get_at_least_editable(cls, user_id): DCNL 'Returns an iterable with collection summary models that are at least DCNL editable by the given user. DCNL Args: DCNL user_id: The id of the given user. DCNL Returns: DCNL iterable. An iterable with collection summary models that are at DCNL least viewable by the given user.'
@classmethod DCNL def generate_new_thread_id(cls, exploration_id): DCNL 'Generates a new thread ID which is unique within the exploration. DCNL Args: DCNL exploration_id: str. The ID of the exploration. DCNL Returns: DCNL str. A thread ID that is different from the IDs of all DCNL the existing threads within the given exploration. DCNL Raises: DCNL Exception: There were too many collisions with existing thread IDs DCNL when attempting to generate a new thread ID.'
@classmethod DCNL def generate_full_thread_id(cls, exploration_id, thread_id): DCNL 'Generates a full thread ID, given the exploration ID and DCNL the thread ID. DCNL Args: DCNL exploration_id: str. The exploration ID the thread belongs to. DCNL thread_id: str. The thread ID. DCNL Returns: DCNL str. Full thread ID.'
@classmethod DCNL def get_exploration_and_thread_ids(cls, full_thread_ids): DCNL 'Gives back the exploration ids and thread ids corresponding to the DCNL full thread ids. DCNL Args: DCNL full_thread_ids: str. The list of full thread ids. DCNL Returns: DCNL list(str). The list of exploration ids to which the threads belong. DCNL list(str). The ids of the threads corresponding to the full thread DCNL ids.'
@property DCNL def thread_id(self): DCNL 'Returns the thread_id (not including the exploration_id) for this DCNL model instance. DCNL Returns: DCNL str. thread_id for this FeedbackThreadModel instance.'
@classmethod DCNL def create(cls, exploration_id, thread_id): DCNL 'Creates a new FeedbackThreadModel entry. DCNL Args: DCNL exploration_id: str. The ID of the exploration the thread DCNL belongs to. DCNL thread_id: str. Thread ID of the newly-created thread. DCNL Returns: DCNL str. The full thread ID for the newly-created FeedbackThreadModel DCNL instance. (This ID includes the exploration ID as a DCNL prefix.) DCNL Raises: DCNL Exception: A thread with the given exploration ID DCNL and thread ID combination exists already.'
@classmethod DCNL def get_by_exp_and_thread_id(cls, exploration_id, thread_id): DCNL 'Gets the FeedbackThreadModel entry for the given ID. DCNL Args: DCNL exploration_id: str. ID of the exploration. DCNL thread_id: str. ID of the thread. DCNL Returns: DCNL FeedbackThreadModel, or None if the thread is not found or is DCNL already deleted.'
@classmethod DCNL def get_threads(cls, exploration_id, limit=feconf.DEFAULT_QUERY_LIMIT): DCNL 'Returns a list of threads associated with the exploration, ordered DCNL by their "last updated" field. The number of entities fetched is DCNL limited by the `limit` argument to this method, whose default DCNL value is equal to the default query limit. DCNL Args: DCNL exploration_id: str. DCNL limit: int. The maximum possible number of items DCNL in the returned list. DCNL Returns: DCNL list(FeedbackThreadModel). List of threads associated with the DCNL exploration. Doesn\'t include deleted entries.'
@classmethod DCNL def _generate_id(cls, exploration_id, thread_id, message_id): DCNL 'Generates full message ID given the exploration ID, thread DCNL ID and message ID. DCNL Args: DCNL exploration_id: str. ID of the exploration to which the message DCNL belongs. DCNL thread_id: str. Thread ID of the thread to which the message DCNL belongs. DCNL message_id: int. Message ID of the message. DCNL Returns: DCNL str. Full message ID.'
@classmethod DCNL def create(cls, exploration_id, thread_id, message_id): DCNL 'Creates a new FeedbackMessageModel entry. DCNL Args: DCNL exploration_id: str. ID of the exploration to which DCNL the message belongs. DCNL thread_id: str. ID of the thread. DCNL message_id: int. ID of the message. DCNL Returns: DCNL FeedbackMessageModel. Instance of the new FeedbackMessageModel DCNL entry. DCNL Raises: DCNL Exception: A message with the same ID already exists DCNL in the given thread.'
@classmethod DCNL def get(cls, exploration_id, thread_id, message_id, strict=True): DCNL 'Gets the FeedbackMessageModel entry for the given ID. Raises an DCNL error if no undeleted message with the given ID is found and DCNL strict == True. DCNL Args: DCNL exploration_id: str. ID of the exploration. DCNL thread_id: str. ID of the thread. DCNL message_id: int. ID of the message. DCNL strict: bool. Whether to raise an error if no FeedbackMessageModel DCNL entry is found for the given IDs. DCNL Returns: DCNL FeedbackMessageModel or None. If strict == False and no undeleted DCNL message with the given message_id exists in the datastore, then DCNL returns None. Otherwise, returns the FeedbackMessageModel DCNL instance that corresponds to the given ID. DCNL Raises: DCNL EntityNotFoundError: If strict == True and message ID is not valid DCNL or message is marked as deleted. No error will be raised if DCNL strict == False.'
@classmethod DCNL def get_messages(cls, exploration_id, thread_id): DCNL 'Returns a list of messages in the given thread. The number of DCNL messages returned is capped by feconf.DEFAULT_QUERY_LIMIT. DCNL Args: DCNL exploration_id: str. ID of the exploration the thread DCNL belongs to. DCNL thread_id: str. ID of the thread. DCNL Returns: DCNL list(FeedbackMessageModel). A list of messages in the DCNL given thread, up to a maximum of feconf.DEFAULT_QUERY_LIMIT DCNL messages.'
@classmethod DCNL def get_most_recent_message(cls, exploration_id, thread_id): DCNL 'Returns the last message in the thread. DCNL Args: DCNL exploration_id: str. ID of the exploration that the thread DCNL belongs to. DCNL thread_id: str. ID of the thread. DCNL Returns: DCNL FeedbackMessageModel. Last message in the thread.'
@classmethod DCNL def get_message_count(cls, exploration_id, thread_id): DCNL 'Returns the number of messages in the thread. Includes the DCNL deleted entries. DCNL Args: DCNL exploration_id: str. ID of the exploration that the thread DCNL belongs to. DCNL thread_id: str. ID of the thread. DCNL Returns: DCNL int. Number of messages in the thread.'
@classmethod DCNL def get(cls, user_id, exploration_id, thread_id): DCNL 'Gets the FeedbackThreadUserModel corresponding to the given user and DCNL the thread given by the exploration id and thread id. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration to which the thread DCNL belongs. DCNL thread_id: str. The id of the thread. DCNL Returns: DCNL FeedbackThreadUserModel. The FeedbackThreadUserModel instance which DCNL matches with the given user_id, exploration_id and thread id.'
@classmethod DCNL def create(cls, user_id, exploration_id, thread_id): DCNL 'Creates a new FeedbackThreadUserModel instance and returns it. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_id: str. The id of the exploration to which the thread DCNL belongs. DCNL thread_id: str. The id of the thread. DCNL Returns: DCNL FeedbackThreadUserModel. The newly created FeedbackThreadUserModel DCNL instance.'
@classmethod DCNL def get_multi(cls, user_id, exploration_ids, thread_ids): DCNL 'Gets the ExplorationUserDataModel corresponding to the given user and DCNL the exploration and thread ids. DCNL Args: DCNL user_id: str. The id of the user. DCNL exploration_ids: list(str). The ids of the explorations to which DCNL the threads belong. DCNL thread_ids: list(str). The ids of the threads. DCNL Returns: DCNL list(FeedbackThreadUserModel). The FeedbackThreadUserModels DCNL corresponding to the given user and the exploration and thread DCNL ids.'
@classmethod DCNL def create(cls, model_id, num_open_threads, num_total_threads): DCNL 'Creates a new FeedbackAnalyticsModel entry. DCNL Args: DCNL model_id: str. ID of the model instance to be created. This DCNL is the same as the exploration ID. DCNL num_open_threads: int. Number of open feedback threads for DCNL this exploration. DCNL num_total_threads: int. Total number of feedback threads for DCNL this exploration.'
@classmethod DCNL def _convert_suggestion_html_to_legacy_state_content(cls, suggestion_html): DCNL 'Converts a suggestion HTML string to a legacy state content object. DCNL The state content object is a dict containing two keys, "type" and DCNL "value". For historical reasons, the value of "type" is always "text" DCNL while the value of "value" is the actual suggestion made by the learner DCNL in the form of html content. DCNL Args: DCNL suggestion_html: str. The HTML representing the suggestion. DCNL Returns: DCNL dict. The legacy content object that corresponds to the given DCNL suggestion HTML.'
@classmethod DCNL def _get_instance_id(cls, exploration_id, thread_id): DCNL 'Returns the full thread ID corresponding to the DCNL given exploration ID and thread ID. DCNL Args: DCNL exploration_id: str. ID of the exploration the thread DCNL belongs to. DCNL thread_id: str. ID of the thread. DCNL Returns: DCNL str. Returns the full thread ID corresponding to DCNL the given exploration ID and thread ID.'
@classmethod DCNL def create(cls, exploration_id, thread_id, author_id, exploration_version, state_name, description, suggestion_html): DCNL 'Creates a new SuggestionModel entry. DCNL Args: DCNL exploration_id: str. ID of the corresponding exploration. DCNL thread_id: str. ID of the corresponding thread. DCNL author_id: str. ID of the user who submitted the suggestion. DCNL exploration_version: int. exploration version for which the DCNL suggestion was made. DCNL state_name: str. ID of the state the suggestion is for. DCNL description: str. Learner-provided description of suggestion. DCNL suggestion_html: str. The content of the suggestion. DCNL Raises: DCNL Exception: There is already a feedback thread with the same DCNL exploration_id and thread_id.'
def get_suggestion_html(self): DCNL 'Retrieves the suggestion HTML of this instance as a string. DCNL Returns: DCNL str. The suggested content HTML string.'
@classmethod DCNL def get_by_exploration_and_thread_id(cls, exploration_id, thread_id): DCNL 'Gets a suggestion by the corresponding exploration and thread IDs. DCNL Args: DCNL exploration_id: str. ID of the exploration to which the DCNL suggestion belongs. DCNL thread_id: str. Thread ID of the suggestion thread. DCNL Returns: DCNL SuggestionModel or None. Suggestion related to the given DCNL exploration and thread IDs, or None if no such SuggestionModel DCNL exists.'
def _get_suggestion_models_for_test(self, suggestions_list): DCNL 'Removes fields that are set to default values in the base model and DCNL are thus not explicitly verified in tests.'
@classmethod DCNL def get_exploration_count(cls): DCNL 'Returns the total number of explorations.'
def _trusted_commit(self, committer_id, commit_type, commit_message, commit_cmds): DCNL 'Record the event to the commit log after the model commit. DCNL Note that this extends the superclass method. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_type: str. The type of commit. Possible values are in DCNL core.storage.base_models.COMMIT_TYPE_CHOICES. DCNL commit_message: str. The commit description message. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, which should give sufficient information to DCNL reconstruct the commit. Each dict always contains: DCNL cmd: str. Unique command. DCNL and then additional arguments for that command.'
def _trusted_commit(self, committer_id, commit_type, commit_message, commit_cmds): DCNL 'Record the event to the commit log after the model commit. DCNL Note that this extends the superclass method. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the DCNL change. DCNL commit_type: str. The type of commit. Possible values are in DCNL core.storage.base_models.COMMIT_TYPE_CHOICES. DCNL commit_message: str. The commit description message. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, should give sufficient information to DCNL reconstruct the commit. Each dict always contains: DCNL cmd: str. Unique command. DCNL and then additional arguments for that command.'
@classmethod DCNL def get_all_commits(cls, page_size, urlsafe_start_cursor): DCNL 'Fetches a list of all the commits sorted by their last updated DCNL attribute. DCNL Args: DCNL page_size: int. The maximum number of entities to be returned. DCNL urlsafe_start_cursor: str or None. If provided, the list of DCNL returned entities starts from this datastore cursor. DCNL Otherwise, the returned entities start from the beginning DCNL of the full list of entities. DCNL Returns: DCNL 3-tuple of (results, cursor, more) as described in fetch_page() at: DCNL https://developers.google.com/appengine/docs/python/ndb/queryclass, DCNL where: DCNL results: List of query results. DCNL cursor: str or None. A query cursor pointing to the next DCNL batch of results. If there are no more results, this will DCNL be None. DCNL more: bool. If True, there are (probably) more results after DCNL this batch. If False, there are no further results after DCNL this batch.'
@classmethod DCNL def get_all_non_private_commits(cls, page_size, urlsafe_start_cursor, max_age=None): DCNL 'Fetches a list of all the non-private commits sorted by their DCNL last updated attribute. DCNL Args: DCNL page_size: int. The maximum number of entities to be returned. DCNL urlsafe_start_cursor: str or None. If provided, the list of DCNL returned entities starts from this datastore cursor. DCNL Otherwise, the returned entities start from the beginning DCNL of the full list of entities. DCNL max_age: datetime.timedelta. The maximum time duration within which DCNL commits are needed. DCNL Returns: DCNL 3-tuple of (results, cursor, more) which were created which were DCNL created no earlier than max_age before the current time where: DCNL results: List of query results. DCNL cursor: str or None. A query cursor pointing to the next DCNL batch of results. If there are no more results, this will DCNL be None. DCNL more: bool. If True, there are (probably) more results after DCNL this batch. If False, there are no further results after DCNL this batch.'
@classmethod DCNL def get_non_private(cls): DCNL 'Returns an iterable with non-private ExpSummary models. DCNL Returns: DCNL iterable. An iterable with non-private ExpSummary models.'
@classmethod DCNL def get_top_rated(cls, limit): DCNL 'Fetches the top-rated exp summaries that are public in descending DCNL order of scaled_average_rating. DCNL Args: DCNL limit: int. The maximum number of results to return. DCNL Returns: DCNL iterable. An iterable with the top rated exp summaries that are DCNL public in descending order of scaled_average_rating.'
@classmethod DCNL def get_private_at_least_viewable(cls, user_id): DCNL 'Fetches private exp summaries that are at least viewable by the DCNL given user. DCNL Args: DCNL user_id: The id of the given user. DCNL Returns: DCNL iterable. An iterable with private exp summaries that are at least DCNL viewable by the given user.'
@classmethod DCNL def get_at_least_editable(cls, user_id): DCNL 'Fetches exp summaries that are at least editable by the given user. DCNL Args: DCNL user_id: The id of the given user. DCNL Returns: DCNL iterable. An iterable with exp summaries that are at least DCNL editable by the given user.'
@classmethod DCNL def get_recently_published(cls, limit): DCNL 'Fetches exp summaries that are recently published. DCNL Args: DCNL limit: int. The maximum number of results to return. DCNL Returns: DCNL An iterable with exp summaries that are recently published. The DCNL returned list is sorted by the time of publication with latest DCNL being first in the list.'
@classmethod DCNL def get_or_create(cls, list_name): DCNL 'This creates the relevant model instance, if it does not already DCNL exist.'
@classmethod DCNL def create(cls, exp_id, exp_version, state_name, session_id, params, play_type, unused_version=1): DCNL 'Creates a new start exploration event.'
@classmethod DCNL def create(cls, exp_id, exp_version, state_name, session_id, client_time_spent_in_secs, params, play_type): DCNL 'Creates a new leave exploration event.'
@classmethod DCNL def create(cls, exp_id, exp_version, state_name, session_id, client_time_spent_in_secs, params, play_type): DCNL 'Creates a new exploration completion event.'
@classmethod DCNL def create(cls, exp_id, user_id, rating, old_rating): DCNL 'Creates a new rate exploration event.'
@classmethod DCNL def create(cls, exp_id, exp_version, state_name, session_id, params, play_type): DCNL 'Creates a new leave exploration event.'
@classmethod DCNL def create(cls, exp_id, version, num_starts, num_completions, state_hit_counts): DCNL 'Creates a new ExplorationAnnotationsModel.'
@classmethod DCNL def get_master_model(cls, exploration_id, exploration_version, state_name): DCNL 'Retrieves the master model associated with the specific exploration DCNL state. Returns None if no answers have yet been submitted to the DCNL specified exploration state. DCNL Args: DCNL exploration_id: str. The exploration ID. DCNL exploration_version: int. The version of the exploration to fetch DCNL answers for. DCNL state_name: str. The name of the state to fetch answers for. DCNL Returns: DCNL StateAnswersModel|None. The master model associated with the DCNL specified exploration state, or None if no answers have been DCNL submitted to this state.'
@classmethod DCNL def get_all_models(cls, exploration_id, exploration_version, state_name): DCNL 'Retrieves all models and shards associated with the specific DCNL exploration state. Returns None if no answers have yet been submitted to DCNL the specified exploration state.'
@classmethod DCNL def _insert_submitted_answers_unsafe(cls, exploration_id, exploration_version, state_name, interaction_id, new_submitted_answer_dict_list): DCNL 'See the insert_submitted_answers for general documentation of what DCNL this method does. It\'s only safe to call this method from within a DCNL transaction.'
@classmethod DCNL def insert_submitted_answers(cls, exploration_id, exploration_version, state_name, interaction_id, new_submitted_answer_dict_list): DCNL 'Given an exploration ID, version, state name, and interaction ID, DCNL attempt to insert a list of specified SubmittedAnswers into this model, DCNL performing sharding operations as necessary. This method automatically DCNL commits updated/new models to the data store. This method returns DCNL nothing. This method can guarantee atomicity since mutations are DCNL performed transactionally, but it cannot guarantee uniqueness for answer DCNL submission. Answers may be duplicated in cases where a past transaction DCNL is interrupted and retried. Furthermore, this method may fail with a DCNL DeadlineExceededError if too many answers are attempted for submission DCNL simultaneously.'
@classmethod DCNL def _shard_answers(cls, current_answer_list, current_answer_list_size, new_answer_list): DCNL 'Given a current answer list which can fit within one NDB entity and DCNL a list of new answers which need to try and fit in the current answer DCNL list, shard the answers such that a list of answer lists are returned. DCNL The first entry is guaranteed to contain all answers of the current DCNL answer list.'
@classmethod DCNL def _get_answer_dict_size(cls, answer_dict): DCNL 'Returns a size overestimate (in bytes) of the given answer dict.'
@classmethod DCNL def create(cls, classifier_id, exp_id, exp_version_when_created, state_name, algorithm_id, classifier_data, data_schema_version): DCNL 'Creates a new ClassifierDataModel entry. DCNL Args: DCNL classifier_id: str. ID of the job used for training the classifier. DCNL exp_id: str. ID of the exploration. DCNL exp_version_when_created: int. The version of the exploration when DCNL this classification model was created. DCNL state_name: str. The name of the state to which the classifier DCNL belongs. DCNL algorithm_id: str. ID of the algorithm used to generate the model. DCNL classifier_data: dict. The model used for classification. DCNL data_schema_version: int. Schema version of the DCNL data used by the classifier. DCNL Returns: DCNL ID of the new ClassifierDataModel entry. DCNL Raises: DCNL Exception: A model with the same ID already exists.'
@classmethod DCNL def _generate_id(cls, exp_id): DCNL 'Generates a unique id for the training job of the form DCNL {{exp_id}}.{{random_hash_of_16_chars}} DCNL Args: DCNL exp_id: str. ID of the exploration. DCNL Returns: DCNL ID of the new ClassifierTrainingJobModel instance. DCNL Raises: DCNL Exception: The id generator for ClassifierTrainingJobModel is DCNL producing too many collisions.'
@classmethod DCNL def create(cls, algorithm_id, interaction_id, exp_id, exp_version, training_data, state_name, status): DCNL 'Creates a new ClassifierTrainingJobModel entry. DCNL Args: DCNL algorithm_id: str. ID of the algorithm used to generate the model. DCNL interaction_id: str. ID of the interaction to which the algorithm DCNL belongs. DCNL exp_id: str. ID of the exploration. DCNL exp_version: int. The exploration version at the time DCNL this training job was created. DCNL state_name: str. The name of the state to which the classifier DCNL belongs. DCNL status: str. The status of the training job. DCNL training_data: dict. The data used in training phase. DCNL Returns: DCNL ID of the new ClassifierModel entry. DCNL Raises: DCNL Exception: A model with the same ID already exists.'
@classmethod DCNL def create_multi(cls, job_dicts_list): DCNL 'Creates multiple new  ClassifierTrainingJobModel entries. DCNL Args: DCNL job_dicts_list: list(dict). The list of dicts where each dict DCNL represents the attributes of one ClassifierTrainingJobModel. DCNL Returns: DCNL list(str). List of job IDs.'
@classmethod DCNL def _generate_id(cls, exp_id, exp_version, state_name): DCNL 'Generates a unique ID for the Classifier Exploration Mapping of the DCNL form {{exp_id}}.{{exp_version}}.{{utf8_encoded_state_name}} DCNL Args: DCNL exp_id: str. ID of the exploration. DCNL exp_version: int. The exploration version at the time DCNL this training job was created. DCNL state_name: unicode. The name of the state to which the classifier DCNL belongs. DCNL Returns: DCNL str. ID of the new Classifier Exploration Mapping instance.'
@classmethod DCNL def get_models(cls, exp_id, exp_version, state_names): DCNL 'Retrieves the Classifier Exploration Mapping models given Exploration DCNL attributes. DCNL Args: DCNL exp_id: str. ID of the exploration. DCNL exp_version: int. The exploration version at the time DCNL this training job was created. DCNL state_names: list(unicode). The state names for which we retrieve DCNL the mapping models. DCNL Returns: DCNL list(ClassifierExplorationMappingModel|None). The model instances DCNL for the classifier exploration mapping.'
@classmethod DCNL def create(cls, exp_id, exp_version, state_name, job_id): DCNL 'Creates a new ClassifierExplorationMappingModel entry. DCNL Args: DCNL exp_id: str. ID of the exploration. DCNL exp_version: int. The exploration version at the time DCNL this training job was created. DCNL state_name: unicode. The name of the state to which the classifier DCNL belongs. DCNL job_id: str. The ID of the training job corresponding to this DCNL combination of <exp_id, exp_version, state_name>. DCNL Returns: DCNL ID of the new ClassifierExplorationMappingModel entry. DCNL Raises: DCNL Exception: A model with the same ID already exists.'
@classmethod DCNL def create_multi(cls, job_exploration_mappings): DCNL 'Creates multiple new  TrainingJobExplorationMappingModel entries. DCNL Args: DCNL job_exploration_mappings: list(TrainingJobExplorationMapping). The DCNL list of TrainingJobExplorationMapping Domain objects.'
@classmethod DCNL def get_new_id(cls, entity_name): DCNL 'Overwrites superclass method. DCNL Args: DCNL entity_name: str. The name of the entity to create a new job id for. DCNL Returns: DCNL str. A job id.'
@classmethod DCNL def get_recent_jobs(cls, limit, recency_msec): DCNL 'Gets at most limit jobs with respect to a time after recency_msec. DCNL Args: DCNL limit: int. A limit on the number of jobs to return. DCNL recency_msec: int. The number of milliseconds earlier DCNL than the current time. DCNL Returns: DCNL list(JobModel) or None. A list of at most `limit` jobs DCNL that come after recency_msec time.'
@classmethod DCNL def get_all_unfinished_jobs(cls, limit): DCNL 'Gets at most `limit` unfinished jobs. DCNL Args: DCNL limit: int. A limit on the number of jobs to return. DCNL Returns: DCNL list(JobModel) or None. A list of at most `limit` number DCNL of unfinished jobs.'
@classmethod DCNL def get_unfinished_jobs(cls, job_type): DCNL 'Gets jobs that are unfinished. DCNL Args: DCNL job_type: str. The type of jobs that may be unfinished. DCNL Returns: DCNL list(JobModel) or None. A list of all jobs that belong DCNL to the given job_type.'
@classmethod DCNL def do_unfinished_jobs_exist(cls, job_type): DCNL 'Checks if unfinished jobs exist. DCNL Returns: DCNL bool. True if unfinished jobs exist, otherwise false.'
@classmethod DCNL def get_undeleted(cls): DCNL 'Returns a list of undeleted FileMetadataModel instances. At most DCNL feconf.DEFAULT_QUERY_LIMIT results are returned. DCNL Returns: DCNL list(FileMetadataModel). Contains all undeleted instances of DCNL this class.'
@classmethod DCNL def _construct_id(cls, exploration_id, filepath): DCNL 'Constructs and returns an id string uniquely identifying the given DCNL exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the DCNL exploration. DCNL Returns: DCNL str. Uniquely identifying string for the given exploration and DCNL filepath (concatenation of exploration id and filepath).'
@classmethod DCNL def create(cls, exploration_id, filepath): DCNL 'Creates and returns a FileMetadataModel instance describing the given DCNL exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL Returns: DCNL FileMetadataModel. An instance of this class.'
@classmethod DCNL def get_model(cls, exploration_id, filepath, strict=False): DCNL 'Returns the newest version of an existing FileMetadataModel instance DCNL describing the given exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL Returns: DCNL FileMetadataModel. An instance of this class, uniquely DCNL identified by exploration_id and filepath.'
@classmethod DCNL def get_version(cls, exploration_id, filepath, version_number): DCNL 'Returns the specified version of an existing FileMetadataModel DCNL instance describing the given exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL version_number: int. The version number of the instance to DCNL be returned. DCNL Returns: DCNL FileMetadataModel. An instance of this class, uniquely identified DCNL by exploration_id, filepath, and version_number.'
def commit(self, committer_id, commit_cmds): DCNL 'Saves a version snapshot of a FileMetadataModel instance and updates DCNL the instance. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_cmds: list(dict). A list of commands describing changes made DCNL in this instance. Must give sufficient information to DCNL reconstruct the commit. Dict always contains: DCNL cmd: str. Unique command. DCNL followed by additional arguments for that command. For example: DCNL {\'cmd\': \'AUTO_revert_version_number\' DCNL \'version_number\': 4}'
def _reconstitute(self, snapshot_blob): DCNL 'Overrides the superclass method. Reconstitutes a FileModel DCNL instance from a snapshot. DCNL Args: DCNL snapshot_blob: str. A bytestring to which this instance\'s content DCNL field will be set. DCNL Returns: DCNL FileModel. An instance of this class, with content set to DCNL snapshot_blob.'
def _compute_snapshot(self): DCNL 'Manually overwrite the superclass method. Returns the content of DCNL this FileModel instance. DCNL Returns: DCNL str. A bytestring snapshot of this instance\'s content.'
@classmethod DCNL def _construct_id(cls, exploration_id, filepath): DCNL 'Constructs and returns an id string uniquely identifying the given DCNL exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL Returns: DCNL str. Uniquely identifying string for the given exploration and DCNL filepath.'
@classmethod DCNL def create(cls, exploration_id, filepath): DCNL 'Creates and returns a FileModel instance specified by the given DCNL exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL Returns: DCNL FileModel. An instance of this class.'
@classmethod DCNL def get_model(cls, exploration_id, filepath, strict=False): DCNL 'Returns the newest version of an existing FileModel instance DCNL specified by the given exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL Returns: DCNL FileModel. An instance of this class, uniquely DCNL identified by exploration_id and filepath.'
def commit(self, committer_id, commit_cmds): DCNL 'Saves a version snapshot of a FileModel instance and updates the DCNL instance. DCNL Args: DCNL committer_id: str. The user_id of the user who committed the change. DCNL commit_cmds: list(dict). A list of commands describing changes made DCNL in this instance. Must give sufficient information to DCNL reconstruct the commit. Dict always contains: DCNL cmd: str. Unique command. DCNL followed by additional arguments for that command. For example: DCNL {\'cmd\': \'AUTO_revert_version_number\' DCNL \'version_number\': 4}'
@classmethod DCNL def get_version(cls, exploration_id, filepath, version_number): DCNL 'Returns the chosen version of an existing FileModel instance DCNL specified by the given exploration and filepath. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL filepath: str. The path to the relevant file within the exploration. DCNL version_number: int. The version number of the instance to DCNL be returned. DCNL Returns: DCNL FileModel. An instance of this class, uniquely DCNL identified by exploration_id, filepath, and version_number.'
def __init__(self, incomplete_exp_summaries, incomplete_collection_summaries, completed_exp_summaries, completed_collection_summaries, exploration_playlist, collection_playlist): DCNL 'Constructs a LearnerProgress domain object. DCNL Args: DCNL incomplete_exp_summaries: list(ExplorationSummary). The summaries DCNL of the explorations partially completed by the learner. DCNL incomplete_collection_summaries: list(CollectionSummary). The DCNL summaries of the explorations partially completed by the DCNL learner. DCNL completed_exp_summaries: list(ExplorationSummary). The summaries of DCNL the explorations partially completed by the learner. DCNL completed_collection_summaries: list(CollectionSummary). The DCNL summaries of the collections partially completed by the learner. DCNL exploration_playlist: list(ExplorationSummary). The summaries of the DCNL explorations in the learner playlist. DCNL collection_playlist: list(CollectionSummary). The summaries of the DCNL collections in the learner playlist.'
@classmethod DCNL def _notify_continuous_computation_listeners_async(cls, *args, **kwargs): DCNL 'Dispatch events asynchronously to continuous computation realtime DCNL layers that are listening for them.'
@classmethod DCNL def _handle_event(cls, *args, **kwargs): DCNL 'Perform in-request processing of an incoming event.'
@classmethod DCNL def record(cls, *args, **kwargs): DCNL 'Process incoming events. DCNL Callers of event handlers should call this method, not _handle_event().'
@classmethod DCNL def _handle_event(cls, exploration_id, exploration_version, state_name, interaction_id, answer_group_index, rule_spec_index, classification_categorization, session_id, time_spent_in_secs, params, normalized_answer): DCNL 'Records an event when an answer triggers a rule. The answer recorded DCNL here is a Python-representation of the actual answer submitted by the DCNL user.'
@classmethod DCNL def _refresh_registry(cls): DCNL 'Regenerates the event handler registry.'
@classmethod DCNL def get_event_class_by_type(cls, event_type): DCNL 'Gets an event handler class by its type. DCNL Refreshes once if the event type is not found; subsequently, throws an DCNL error.'
def _run_one_off_job(self, query_id): DCNL 'Runs the one-off MapReduce job.'
def setUp(self): DCNL 'Publish two explorations and one collection.'
def _assert_validation_error(self, expected_error_substring): DCNL 'Checks that the collection passes strict validation.'
def test_initial_validation(self): DCNL 'Test validating a new, valid collection.'
def test_is_demo_property(self): DCNL 'Test the is_demo property.'
def test_collection_export_import(self): DCNL 'Test that to_dict and from_dict preserve all data within an DCNL collection.'
def test_add_delete_node(self): DCNL 'Test that add_node and delete_node fail in the correct situations.'
def test_add_skill(self): DCNL 'Test that add_skill correctly adds skills.'
def test_update_skill(self): DCNL 'Test that update_skill correctly updates skills.'
def test_adding_duplicate_skill_raises_error(self): DCNL 'Test that adding a duplicate skill name raises an error.'
def test_adding_after_deleting_skill_increments_skill_id(self): DCNL 'Test that re-adding a deleted skill assigns a new skill id.'
def test_delete_skill(self): DCNL 'Test that deleting skills works.'
def test_initial_explorations(self): DCNL 'Any exploration without prerequisites should be an initial DCNL exploration.'
def test_next_explorations(self): DCNL 'Explorations should be suggested based on prerequisite and DCNL acquired skills, as well as which explorations have already been played DCNL in the collection.'
def test_yaml_import_and_export(self): DCNL 'Test the from_yaml() and to_yaml() methods.'
def test_correct_collection_contents_schema_conversion_methods_exist(self): DCNL 'Test that the right collection_contents schema conversion methods DCNL exist.'
def test_correct_collection_schema_conversion_methods_exist(self): DCNL 'Test that the right collection schema conversion methods exist.'
def test_load_from_v1(self): DCNL 'Test direct loading from a v1 yaml file.'
def test_load_from_v2(self): DCNL 'Test direct loading from a v2 yaml file.'
def test_load_from_v3(self): DCNL 'Test direct loading from a v3 yaml file.'
def test_load_from_v4(self): DCNL 'Test direct loading from a v4 yaml file.'
def _run_computation(self): DCNL 'Runs the MapReduce job after running the continuous DCNL statistics aggregator for explorations to get the correct num DCNL completion events.'
def _generate_user_ids(self, count): DCNL 'Generate unique user ids to rate an exploration. Each user id needs DCNL to be unique since each user can only give an exploration one rating.'
def _record_start(self, exp_id, exp_version, state): DCNL 'Record start event to an exploration. DCNL Completing the exploration is not necessary here since the total_plays DCNL are currently being counted taking into account only the # of starts.'
def _rate_exploration(self, exp_id, num_ratings, rating): DCNL 'Create num_ratings ratings for exploration with exp_id, DCNL of value rating.'
def test_stats_for_user_with_no_explorations(self): DCNL 'Test that a user who is not a contributor on any exploration DCNL is not assigned value of impact score, total plays and average ratings.'
def test_only_yield_when_rating_greater_than_two(self): DCNL 'Tests that map only yields an impact score for an DCNL exploration when the impact score is greater than 0.'
def test_impact_for_exp_with_no_answers(self): DCNL 'Test that when an exploration has no answers, it is considered to DCNL have no reach.'
def test_impact_for_exp_with_no_ratings(self): DCNL 'Test that when an exploration has no ratings, the impact returned DCNL from the impact function is 0.'
def setUp(self): DCNL 'Create exploration with two versions'
def test_legacy_user(self): DCNL 'Test the case of a user who existed in the system before the DCNL last-login check was introduced.'
def setUp(self): DCNL 'Create users for creating and editing exploration.'
def test_legacy_user(self): DCNL 'Test the case of a user who are editing exploration for first time DCNL after the last edited time check was introduced.'
def setUp(self): DCNL 'Create user for creating exploration.'
def test_legacy_user(self): DCNL 'Test the case of a user who are creating exploration for first time DCNL after the last edited time check was introduced.'
@classmethod DCNL def get_all_classifier_algorithm_ids(cls): DCNL 'Retrieves a list of all classifier algorithm IDs. DCNL Returns: DCNL A list containing all the classifier algorithm IDs.'
@classmethod DCNL def _refresh(cls): DCNL 'Refreshes the dict mapping algorithm IDs to instances of DCNL classifiers.'
@classmethod DCNL def get_all_classifiers(cls): DCNL 'Retrieves a list of instances of all classifiers. DCNL Returns: DCNL A list of instances of all the classification algorithms.'
@classmethod DCNL def get_classifier_by_algorithm_id(cls, classifier_algorithm_id): DCNL 'Retrieves a classifier instance by its algorithm id. DCNL Refreshes once if the classifier is not found; subsequently, throws a DCNL KeyError. DCNL Args: DCNL classifier_algorithm_id: str. The ID of the classifier algorithm. DCNL Raises: DCNL KeyError: If the classifier is not found the first time. DCNL Returns: DCNL An instance of the classifier.'
@classmethod DCNL def get_dependency_html(cls, dependency_id): DCNL 'Returns the HTML template needed to inject this dependency in the DCNL client webpage.'
@classmethod DCNL def get_angular_modules(cls, dependency_id): DCNL 'Returns a list of additional modules that the main Angular module DCNL in the client webpage needs to depend on.'
@classmethod DCNL def get_deps_html_and_angular_modules(cls, dependency_ids): DCNL 'Returns data needed to load the given dependencies. DCNL The return value is a 2-tuple. The first element of the tuple is the DCNL additional HTML to insert on the page. The second element of the tuple DCNL is a de-duplicated list of strings, each representing an additional DCNL angular module that should be loaded.'
def _is_camel_cased(self, name): DCNL 'Check whether a name is in CamelCase.'
def _is_alphanumeric_string(self, input_string): DCNL 'Check whether a string is alphanumeric.'
def _listdir_omit_ignored(self, directory): DCNL 'List all files and directories within \'directory\', omitting the ones DCNL whose name ends in one of the IGNORED_FILE_SUFFIXES.'
def test_allowed_rich_text_components_and_counts(self): DCNL 'Do sanity checks on the ALLOWED_RTE_EXTENSIONS dict in feconf.py.'
def test_image_thumbnails_for_rte_components(self): DCNL 'Test the thumbnails for the RTE component icons.'
def test_default_rte_components_are_valid(self): DCNL 'Test that the default RTE components are valid.'
@classmethod DCNL def get_html_template(cls): DCNL 'Returns the HTML template for the class. DCNL Returns: DCNL str. The HTML template corresponding to the class.'
@classmethod DCNL def get_js_template(cls): DCNL 'Returns the JavaScript template for the class. DCNL Returns: DCNL str. The JS template corresponding to the class.'
def generate_value(self, *args, **kwargs): DCNL 'Generates a new value, using the given customization args. DCNL The first arg should be context_params.'
@classmethod DCNL def _refresh_registry(cls): DCNL 'Refreshes the dictionary mapping between generator_id and the DCNL corresponding generator classes.'
@classmethod DCNL def get_all_generator_classes(cls): DCNL 'Get the dict of all value generator classes.'
@classmethod DCNL def get_generator_class_by_id(cls, generator_id): DCNL 'Gets a generator class by its id. DCNL Refreshes once if the generator is not found; subsequently, throws an DCNL error. DCNL Args: DCNL generator_id: str. An id corresponding to a generator class. DCNL Returns: DCNL class(BaseValueGenerator). A generator class mapping to the DCNL generator id given. DCNL Raises: DCNL KeyError: The given generator_id is invalid.'
def __init__(self, user_id, email, role, username=None, last_agreed_to_terms=None, last_started_state_editor_tutorial=None, last_logged_in=None, last_created_an_exploration=None, last_edited_an_exploration=None, profile_picture_data_url=None, default_dashboard=None, user_bio='', subject_interests=None, first_contribution_msec=None, preferred_language_codes=None, preferred_site_language_code=None): DCNL 'Constructs a UserSettings domain object. DCNL Args: DCNL user_id: str. The user id. DCNL email: str. The user email. DCNL role: str. Role of the user. This is used in conjunction with DCNL PARENT_ROLES to determine which actions the user can perform. DCNL username: str or None. Identifiable username to display in the UI. DCNL last_agreed_to_terms: datetime.datetime or None. When the user DCNL last agreed to the terms of the site. DCNL last_started_state_editor_tutorial: datetime.datetime or None. When DCNL the user last started the state editor tutorial. DCNL last_logged_in: datetime.datetime or None. When the user last DCNL logged in. DCNL last_created_an_exploration: datetime.datetime or None. When the DCNL user last created an exploration. DCNL last_edited_an_exploration: datetime.datetime or None. When the DCNL user last edited an exploration. DCNL profile_picture_data_url: str or None. User uploaded profile DCNL picture as a dataURI string. DCNL user_bio: str. User-specified biography. DCNL subject_interests: list(str) or None. Subject interests specified by DCNL the user. DCNL first_contribution_msec: float or None. The time in milliseconds DCNL when the user first contributed to Oppia. DCNL preferred_language_codes: list(str) or None. Exploration language DCNL preferences specified by the user. DCNL preferred_site_language_code: str or None. System language DCNL preference.'
def validate(self): DCNL 'Checks that user_id and email fields of this UserSettings domain DCNL object are valid. DCNL Raises: DCNL ValidationError: user_id is not str. DCNL ValidationError: email is not str. DCNL ValidationError: email is invalid. DCNL ValidationError: role is not str. DCNL ValidationError: Given role does not exist.'
@property DCNL def truncated_email(self): DCNL 'Returns truncated email by replacing last two characters before @ DCNL with period. DCNL Returns: DCNL str. The truncated email address of this UserSettings DCNL domain object.'
@property DCNL def is_known_user(self): DCNL 'Returns bool based on whether or not UserSettings domain DCNL object contains an email property. DCNL Returns: DCNL bool. Whether this domain object contains an \'email\' property. DCNL If the return value is not True, something has gone wrong.'
@property DCNL def normalized_username(self): DCNL 'Returns username in lowercase or None if it does not exist. DCNL Returns: DCNL str or None. If this object has a \'username\' property, returns DCNL the normalized version of the username. Otherwise, returns None.'
@classmethod DCNL def normalize_username(cls, username): DCNL 'Returns the normalized version of the given username, DCNL or None if the passed-in \'username\' is None. DCNL Args: DCNL username: str. Identifiable username to display in the UI. DCNL Returns: DCNL str or None. The normalized version of the given username, DCNL or None if the passed-in username is None.'
@classmethod DCNL def require_valid_username(cls, username): DCNL 'Checks if the given username is valid or not. DCNL Args: DCNL username: str. The username to validate. DCNL Raises: DCNL ValidationError: An empty username is supplied. DCNL ValidationError: The given username exceeds the maximum allowed DCNL number of characters. DCNL ValidationError: The given username contains non-alphanumeric DCNL characters. DCNL ValidationError: The given username contains reserved substrings DCNL (\'admin\', \'oppia\').'
def __init__(self, user_id, created_exploration_ids, edited_exploration_ids): DCNL 'Constructs a UserContributions domain object. DCNL Args: DCNL user_id: str. The user id. DCNL created_exploration_ids: list(str). IDs of explorations that this DCNL user has created. DCNL edited_exploration_ids: list(str). IDs of explorations that this DCNL user has edited.'
def validate(self): DCNL 'Checks that user_id, created_exploration_ids and DCNL edited_exploration_ids fields of this UserContributions DCNL domain object are valid. DCNL Raises: DCNL ValidationError: user_id is not str. DCNL ValidationError: created_exploration_ids is not a list. DCNL ValidationError: exploration_id in created_exploration_ids DCNL is not str. DCNL ValidationError: edited_exploration_ids is not a list. DCNL ValidationError: exploration_id in edited_exploration_ids DCNL is not str.'
@abc.abstractmethod DCNL def from_dict(self, model): DCNL 'Initializes the properties of this classifier from a dict DCNL constructed using to_dict(). DCNL Args: DCNL model: A dict representing the classifier.'
@abc.abstractmethod DCNL def to_dict(self, model): DCNL 'Returns a dict representing this classifier. DCNL Returns: DCNL dict. A representation of the state of the classifier.'
@abc.abstractmethod DCNL def predict(self, predicting_data): DCNL 'Returns the predicted label from the predicting_data\'s prediction DCNL report. DCNL Args: DCNL predicting_data: list of \'predicting_data\'. DCNL Returns: DCNL list of str. The labels predicted by the classifier DCNL for the given \'predicting_data\'.'
@abc.abstractmethod DCNL def train(self, training_data): DCNL 'Loads examples for training. DCNL Args: DCNL training_data: list of \'training_data\'. Each training_data is DCNL represented by a 2-element list. The first item of the list DCNL is the single training data, and the second item is a list DCNL of labels that the data should be matched.'
@abc.abstractmethod DCNL def validate(self, classifier_data): DCNL 'Validates classifier data. DCNL Args: DCNL classifier_data: dict of the classifier attributes specific to DCNL the classifier algorithm used.'
@property DCNL def value(self): DCNL 'Get the latest value from memcache, datastore, or use default.'
def set_value(self, committer_id, raw_value): DCNL 'Sets the value of the property. In general, this should not be DCNL called directly -- use config_services.set_property() instead.'
@classmethod DCNL def get_config_property_schemas(cls): DCNL 'Return a dict of editable config property schemas. DCNL The keys of the dict are config property names. The values are dicts DCNL with the following keys: schema, description, value.'
@classmethod DCNL def get_all_interaction_ids(cls): DCNL 'Get a list of all interaction ids.'
@classmethod DCNL def get_all_interactions(cls): DCNL 'Get a list of instances of all interactions.'
@classmethod DCNL def get_interaction_by_id(cls, interaction_id): DCNL 'Gets an interaction by its id. DCNL Refreshes once if the interaction is not found; subsequently, throws a DCNL KeyError.'
@classmethod DCNL def get_interaction_html(cls, interaction_ids): DCNL 'Returns the HTML bodies for the given list of interaction ids.'
@classmethod DCNL def get_deduplicated_dependency_ids(cls, interaction_ids): DCNL 'Return a list of dependency ids for the given interactions. DCNL Each entry of the resulting list is unique. The list is sorted in no DCNL particular order.'
@classmethod DCNL def get_all_specs(cls): DCNL 'Returns a dict containing the full specs of each interaction.'
def test_get_object_class_by_type_method(self): DCNL 'Tests the normal behavior of get_object_class_by_type().'
def test_fake_class_is_not_gettable(self): DCNL 'Tests that trying to retrieve a fake class raises an error.'
def test_base_object_is_not_gettable(self): DCNL 'Tests that BaseObject exists and cannot be set as an obj_type.'
def test_all_rule_input_fields_have_default_values(self): DCNL 'Checks that all rule input fields have a default value, and this DCNL is provided in get_default_values().'
def test_get_object_default_values_is_valid(self): DCNL 'Checks that the default values provided by get_default_values() DCNL correspond to the ones defined in objects.py.'
def test_string_classifier_classification(self): DCNL 'All these responses trigger the string classifier.'
def test_creation_of_jobs_and_mappings(self): DCNL 'Test the handle_trainable_states method and DCNL handle_non_retrainable_states method by triggering DCNL update_exploration() method.'
def test_handle_trainable_states(self): DCNL 'Test the handle_trainable_states method.'
def test_handle_non_retrainable_states(self): DCNL 'Test the handle_non_retrainable_states method.'
def test_retrieval_of_classifiers(self): DCNL 'Test the get_classifier_by_id method.'
def test_deletion_of_classifiers(self): DCNL 'Test the delete_classifier method.'
def test_creation_of_classifiers(self): DCNL 'Test the create_classifier method.'
def test_retrieval_of_classifier_training_jobs(self): DCNL 'Test the get_classifier_training_job_by_id method.'
def test_deletion_of_classifier_training_jobs(self): DCNL 'Test the delete_classifier_training_job method.'
def test_mark_training_job_complete(self): DCNL 'Test the mark_training_job_complete method.'
def test_retrieval_of_classifier_training_jobs_from_exploration_attributes(self): DCNL 'Test the get_classifier_training_jobs method.'
def __init__(self, can_receive_email_updates, can_receive_editor_role_email, can_receive_feedback_message_email, can_receive_subscription_email): DCNL 'Constructs a UserGlobalPrefs domain object. DCNL Args: DCNL can_receive_email_updates: bool. Whether the user can receive DCNL email updates. DCNL can_receive_editor_role_email: bool. Whether the user can receive DCNL emails notifying them of role changes. DCNL can_receive_feedback_message_email: bool. Whether the user can DCNL receive emails when users submit feedback to their explorations. DCNL can_receive_subscription_email: bool. Whether the user can receive DCNL subscription emails notifying them about new explorations.'
@classmethod DCNL def create_default_prefs(cls): DCNL 'Returns UserGlobalPrefs with default attributes.'
def __init__(self, mute_feedback_notifications, mute_suggestion_notifications): DCNL 'Constructs a UserExplorationPrefs domain object. DCNL Args: DCNL mute_feedback_notifications: bool. Whether the given user has muted DCNL feedback emails. DCNL mute_suggestion_notifications: bool. Whether the given user has DCNL muted suggestion emails.'
@classmethod DCNL def create_default_prefs(cls): DCNL 'Returns UserExplorationPrefs with default attributes.'
def to_dict(self): DCNL 'Return dictionary representation of UserExplorationPrefs. DCNL Return: DCNL dict. The keys of the dict are: DCNL \'mute_feedback_notifications\': bool. Whether the given user has DCNL muted feedback emails. DCNL \'mute_suggestion_notifications\': bool. Whether the given user DCNL has muted suggestion emails.'
def update_last_played_information(self, last_played_exp_version, last_played_state_name): DCNL 'Updates the last playthrough information of the user. DCNL Args: DCNL last_played_exp_version: int. The version of the exploration that DCNL was played by the user. DCNL last_played_state_name: str. The name of the state at which the DCNL learner left the exploration.'
def add_exploration_id(self, exploration_id): DCNL 'Adds the exploration id to the list of incomplete exploration ids.'
def remove_exploration_id(self, exploration_id): DCNL 'Removes the exploration id from the list of incomplete exploration DCNL ids.'
def add_collection_id(self, collection_id): DCNL 'Adds the collection id to the list of incomplete collection ids.'
def remove_collection_id(self, collection_id): DCNL 'Removes the collection id from the list of incomplete collection DCNL ids.'
def add_exploration_id(self, exploration_id): DCNL 'Adds the exploration id to the list of completed exploration ids.'
def remove_exploration_id(self, exploration_id): DCNL 'Removes the exploration id from the list of completed exploration DCNL ids.'
def add_collection_id(self, collection_id): DCNL 'Adds the collection id to the list of completed collection ids.'
def remove_collection_id(self, collection_id): DCNL 'Removes the collection id from the list of completed collection DCNL ids.'
def insert_exploration_id_at_given_position(self, exploration_id, position_to_be_inserted): DCNL 'Inserts the given exploration id at the given position. DCNL Args: DCNL exploration_id: str. The exploration id to be inserted into the DCNL play later list. DCNL position_to_be_inserted: The position at which it is to be inserted.'
def add_exploration_id_to_list(self, exploration_id): DCNL 'Inserts the exploration id at the end of the list. DCNL Args: DCNL exploration_id: str. The exploration id to be appended to the end DCNL of the list.'
def insert_collection_id_at_given_position(self, collection_id, position_to_be_inserted): DCNL 'Inserts the given collection id at the given position. DCNL Args: DCNL collection_id: str. The collection id to be inserted into the DCNL play later list. DCNL position_to_be_inserted: The position at which it is to be inserted.'
def add_collection_id_to_list(self, collection_id): DCNL 'Inserts the collection id at the end of the list. DCNL Args: DCNL collection_id: str. The collection id to be appended to the end DCNL of the list.'
def remove_exploration_id(self, exploration_id): DCNL 'Removes the exploration id from the learner playlist. DCNL exploration_id: str. The id of the exploration to be removed.'
def remove_collection_id(self, collection_id): DCNL 'Removes the collection id from the learner playlist. DCNL collection_id: str. The id of the collection to be removed.'
def setUp(self): DCNL 'Before each individual test, create a dummy exploration.'
def test_retrieval_of_explorations(self): DCNL 'Test the get_exploration_by_id() method.'
def test_soft_deletion_of_explorations(self): DCNL 'Test that soft deletion of explorations works correctly.'
def test_hard_deletion_of_explorations(self): DCNL 'Test that hard deletion of explorations works correctly.'
def test_summaries_of_hard_deleted_explorations(self): DCNL 'Test that summaries of hard deleted explorations are DCNL correctly deleted.'
def test_explorations_are_removed_from_index_when_deleted(self): DCNL 'Tests that explorations are removed from the search index when DCNL deleted.'
def test_loading_and_validation_and_deletion_of_demo_explorations(self): DCNL 'Test loading, validation and deletion of the demo explorations.'
def test_export_to_zip_file(self): DCNL 'Test the export_to_zip_file() method.'
def test_export_to_zip_file_with_assets(self): DCNL 'Test exporting an exploration with assets to a zip file.'
def test_export_by_versions(self): DCNL 'Test export_to_zip_file() for different versions.'
def test_export_to_dict(self): DCNL 'Test the export_to_dict() method.'
def test_export_by_versions(self): DCNL 'Test export_to_dict() for different versions.'
def test_add_gadget_cmd(self): DCNL 'Test adding of a gadget.'
def test_rename_gadget_cmd(self): DCNL 'Test renaming a gadget.'
def test_delete_gadget_cmd(self): DCNL 'Test deleting a gadget.'
def test_add_state_cmd(self): DCNL 'Test adding of states.'
def test_rename_state_cmd(self): DCNL 'Test updating of state name'
def test_rename_state_cmd_with_unicode(self): DCNL 'Test updating of state name to one that uses unicode characters.'
def test_delete_state_cmd(self): DCNL 'Test deleting a state name.'
def test_update_param_changes(self): DCNL 'Test updating of param_changes.'
def test_update_invalid_param_changes(self): DCNL 'Check that updates cannot be made to non-existent parameters.'
def test_update_invalid_generator(self): DCNL 'Test for check that the generator_id in param_changes exists.'
def test_update_interaction_id(self): DCNL 'Test updating of interaction_id.'
def test_update_interaction_customization_args(self): DCNL 'Test updating of interaction customization_args.'
def test_update_interaction_handlers_fails(self): DCNL 'Test legacy interaction handler updating.'
def test_update_interaction_answer_groups(self): DCNL 'Test updating of interaction_answer_groups.'
def test_update_interaction_fallbacks(self): DCNL 'Test updating of interaction_fallbacks.'
def test_update_interaction_fallbacks_invalid_dest(self): DCNL 'Test updating of interaction_fallbacks with an invalid dest state.'
def test_update_state_invalid_state(self): DCNL 'Test that rule destination states cannot be non-existent.'
def test_update_state_missing_keys(self): DCNL 'Test that missing keys in interaction_answer_groups produce an DCNL error.'
def test_update_state_variable_types(self): DCNL 'Test that parameters in rules must have the correct type.'
def test_update_content(self): DCNL 'Test updating of content.'
def test_update_content_missing_key(self): DCNL 'Test that missing keys in content yield an error.'
def test_record_commit_message(self): DCNL 'Check published explorations record commit messages.'
def test_demand_commit_message(self): DCNL 'Check published explorations demand commit messages'
def test_unpublished_explorations_can_accept_commit_message(self): DCNL 'Test unpublished explorations can accept optional commit messages'
def setUp(self): DCNL 'Populate the database of explorations to be queried against. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Bob edits the title of EXP_ID_1. DCNL - (3) Albert creates EXP_ID_2. DCNL - (4) Albert edits the title of EXP_ID_1. DCNL - (5) Albert edits the title of EXP_ID_2. DCNL - (6) Bob reverts Albert\'s last edit to EXP_ID_1. DCNL - (7) Albert deletes EXP_ID_1. DCNL - Bob tries to publish EXP_ID_2, and is denied access. DCNL - (8) Albert publishes EXP_ID_2.'
def test_contributors_not_updated_on_revert(self): DCNL 'Test that a user who only makes a revert on an exploration DCNL is not counted in the list of that exploration\'s contributors.'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Bob edits the title of EXP_ID_1. DCNL - (3) Albert creates EXP_ID_2. DCNL - (4) Albert edits the title of EXP_ID_1. DCNL - (5) Albert edits the title of EXP_ID_2. DCNL - (6) Bob reverts Albert\'s last edit to EXP_ID_1. DCNL - Bob tries to publish EXP_ID_2, and is denied access. DCNL - (7) Albert publishes EXP_ID_2. DCNL - (8) Albert creates EXP_ID_3 DCNL - (9) Albert publishes EXP_ID_3 DCNL - (10) Albert deletes EXP_ID_3'
def test_migration_then_reversion_maintains_valid_exploration(self): DCNL 'This integration test simulates the behavior of the domain layer DCNL prior to the introduction of a states schema. In particular, it deals DCNL with an exploration that was created before any states schema DCNL migrations occur. The exploration is constructed using multiple change DCNL lists, then a migration job is run. The test thereafter tests if DCNL reverting to a version prior to the migration still maintains a valid DCNL exploration. It tests both the exploration domain object and the DCNL exploration model stored in the datastore for validity. DCNL Note: It is important to distinguish between when the test is testing DCNL the exploration domain versus its model. It is operating at the domain DCNL layer when using exp_services.get_exploration_by_id. Otherwise, it DCNL loads the model explicitly using exp_models.ExplorationModel.get and DCNL then converts it to an exploration domain object for validation using DCNL exp_services.get_exploration_from_model. This is NOT the same process DCNL as exp_services.get_exploration_by_id as it skips many steps which DCNL include the conversion pipeline (which is crucial to this test).'
def test_loading_old_exploration_does_not_break_domain_object_ctor(self): DCNL 'This test attempts to load an exploration that is stored in the data DCNL store as pre-states schema version 0. The DCNL exp_services.get_exploration_by_id function should properly load and DCNL convert the exploration without any issues. Structural changes to the DCNL states schema will not break the exploration domain class constructor.'
def __init__(self, change_dict): DCNL 'Initializes an ExplorationChange object from a dict. DCNL Args: DCNL change_dict: dict. Represents a command. It should have a \'cmd\' key DCNL and one or more other keys. The keys depend on what the value DCNL for \'cmd\' is. The possible values for \'cmd\' are listed below, DCNL together with the other keys in the dict: DCNL - \'add_state\' (with state_name) DCNL - \'rename_state\' (with old_state_name and new_state_name) DCNL - \'delete_state\' (with state_name) DCNL - \'edit_state_property\' (with state_name, property_name, DCNL new_value and, optionally, old_value) DCNL - \'add_gadget\' (with gadget_dict and panel) DCNL - \'rename_gadget\' (with old_gadget_name, new_gadget_name) DCNL - \'delete_gadget\' (with gadget_name) DCNL - \'edit_gadget_property\' (with gadget_name, property_name, DCNL new_value, and optionally, old_value) DCNL - \'edit_exploration_property\' (with property_name, DCNL new_value and, optionally, old_value) DCNL - \'migrate_states_schema\' (with from_version, to_version) DCNL For a state, property_name must be one of STATE_PROPERTIES. DCNL For an exploration, property_name must be one of DCNL EXPLORATION_PROPERTIES. For a gadget, property_name must be one DCNL of GADGET_PROPERTIES. DCNL Raises: DCNL Exception: The given change_dict is not valid.'
def __init__(self, created_on, last_updated, user_id, username, exploration_id, commit_type, commit_message, commit_cmds, version, post_commit_status, post_commit_community_owned, post_commit_is_private): DCNL 'Initializes a ExplorationCommitLogEntry domain object. DCNL Args: DCNL created_on: datetime.datetime. Date and time when the exploration DCNL commit was created. DCNL last_updated: datetime.datetime. Date and time when the exploration DCNL commit was last updated. DCNL user_id: str. User id of the user who has made the commit. DCNL username: str. Username of the user who has made the commit. DCNL exploration_id: str. Id of the exploration. DCNL commit_type: str. The type of commit. DCNL commit_message: str. A description of changes made to the DCNL exploration. DCNL commit_cmds: list(dict). A list of commands, describing changes DCNL made in this model, which should give sufficient information to DCNL reconstruct the commit. Each dict always contains the following DCNL key: DCNL - cmd: str. Unique command. DCNL and then additional arguments for that command. DCNL version: int. The version of the exploration after the commit. DCNL post_commit_status: str. The new exploration status after the DCNL commit. DCNL post_commit_community_owned: bool. Whether the exploration is DCNL community-owned after the edit event. DCNL post_commit_is_private: bool. Whether the exploration is private DCNL after the edit event.'
def to_dict(self): DCNL 'Returns a dict representing this ExplorationCommitLogEntry domain DCNL object. This omits created_on, user_id and commit_cmds. DCNL Returns: DCNL dict. A dict, mapping all fields of ExplorationCommitLogEntry DCNL instance, except created_on, user_id and commit_cmds fields.'
def to_dict(self): DCNL 'Returns a dict representing this AudioTranslation domain object. DCNL Returns: DCNL dict. A dict, mapping all fields of AudioTranslation instance.'
@classmethod DCNL def from_dict(cls, audio_translation_dict): DCNL 'Return a AudioTranslation domain object from a dict. DCNL Args: DCNL audio_translation_dict: dict. The dict representation of DCNL AudioTranslation object. DCNL Returns: DCNL AudioTranslation. The corresponding AudioTranslation domain object.'
def __init__(self, filename, file_size_bytes, needs_update): DCNL 'Initializes a AudioTranslation domain object. DCNL Args: DCNL filename: str. The corresponding audio file path. DCNL file_size_bytes: int. The file size, in bytes. Used to display DCNL potential bandwidth usage to the learner before they download DCNL the file. DCNL needs_update: bool. Whether audio is marked for needing review.'
def validate(self): DCNL 'Validates properties of the Content. DCNL Raises: DCNL ValidationError: One or more attributes of the AudioTranslation are DCNL invalid.'
def __init__(self, html, audio_translations): DCNL 'Initializes a SubtitledHtml domain object. DCNL Args: DCNL html: str. A piece of user submitted HTML. This is cleaned in such DCNL a way as to contain a restricted set of HTML tags. DCNL audio_translations: dict(str: AudioTranslation). Dict mapping DCNL language codes (such as "en" or "hi") to AudioTranslation DCNL domain objects. Hybrid languages will be represented using DCNL composite language codes, such as "hi-en" for Hinglish.'
def to_dict(self): DCNL 'Returns a dict representing this SubtitledHtml domain object. DCNL Returns: DCNL dict. A dict, mapping all fields of SubtitledHtml instance.'
@classmethod DCNL def from_dict(cls, subtitled_html_dict): DCNL 'Return a SubtitledHtml domain object from a dict. DCNL Args: DCNL subtitled_html_dict: dict. The dict representation of SubtitledHtml DCNL object. DCNL Returns: DCNL SubtitledHtml. The corresponding SubtitledHtml domain object.'
def validate(self): DCNL 'Validates properties of the SubtitledHtml. DCNL Raises: DCNL ValidationError: One or more attributes of the SubtitledHtml are DCNL invalid.'
def to_html(self, params): DCNL 'Exports this SubtitledHTML object to an HTML string. The HTML is DCNL parameterized using the parameters in `params`. DCNL Args: DCNL params: dict. The keys are the parameter names and the values are DCNL the values of parameters. DCNL Raises: DCNL Exception: \'params\' is not a dict.'
def to_dict(self): DCNL 'Returns a dict representing this RuleSpec domain object. DCNL Returns: DCNL dict. A dict, mapping all fields of RuleSpec instance.'
@classmethod DCNL def from_dict(cls, rulespec_dict): DCNL 'Return a RuleSpec domain object from a dict. DCNL Args: DCNL rulespec_dict: dict. The dict representation of RuleSpec object. DCNL Returns: DCNL RuleSpec. The corresponding RuleSpec domain object.'
def __init__(self, rule_type, inputs): DCNL 'Initializes a RuleSpec domain object. DCNL Args: DCNL rule_type: str. The rule type, e.g. "CodeContains" or "Equals". A DCNL full list of rule types can be found in DCNL extensions/interactions/rule_templates.json. DCNL inputs: dict. The values of the parameters needed in order to fully DCNL specify the rule. The keys for this dict can be deduced from DCNL the relevant description field in DCNL extensions/interactions/rule_templates.json -- they are DCNL enclosed in {{...}} braces.'
def validate(self, rule_params_list, exp_param_specs_dict): DCNL 'Validates a RuleSpec value object. It ensures the inputs dict does DCNL not refer to any non-existent parameters and that it contains values DCNL for all the parameters the rule expects. DCNL Args: DCNL rule_params_list: A list of parameters used by the rule represented DCNL by this RuleSpec instance, to be used to validate the inputs of DCNL this RuleSpec. Each element of the list represents a single DCNL parameter and is a tuple with two elements: DCNL 0: The name (string) of the parameter. DCNL 1: The typed object instance for that DCNL parameter (e.g. Real). DCNL exp_param_specs_dict: A dict of specified parameters used in this DCNL exploration. Keys are parameter names and values are ParamSpec DCNL value objects with an object type property (obj_type). RuleSpec DCNL inputs may have a parameter value which refers to one of these DCNL exploration parameters. DCNL Raises: DCNL ValidationError: One or more attributes of the RuleSpec are DCNL invalid.'
def to_dict(self): DCNL 'Returns a dict representing this Outcome domain object. DCNL Returns: DCNL dict. A dict, mapping all fields of Outcome instance.'
@classmethod DCNL def from_dict(cls, outcome_dict): DCNL 'Return a Outcome domain object from a dict. DCNL Args: DCNL outcome_dict: dict. The dict representation of Outcome object. DCNL Returns: DCNL Outcome. The corresponding Outcome domain object.'
def __init__(self, dest, feedback, param_changes): DCNL 'Initializes a Outcome domain object. DCNL Args: DCNL dest: str. The name of the destination state. DCNL feedback: list(str). List of feedback to show the user if this rule DCNL is triggered. DCNL param_changes: list(ParamChange). List of exploration-level DCNL parameter changes to make if this rule is triggered.'
def validate(self): DCNL 'Validates various properties of the Outcome. DCNL Raises: DCNL ValidationError: One or more attributes of the Outcome are invalid.'
def to_dict(self): DCNL 'Returns a dict representing this AnswerGroup domain object. DCNL Returns: DCNL dict. A dict, mapping all fields of AnswerGroup instance.'
@classmethod DCNL def from_dict(cls, answer_group_dict): DCNL 'Return a AnswerGroup domain object from a dict. DCNL Args: DCNL answer_group_dict: dict. The dict representation of AnswerGroup DCNL object. DCNL Returns: DCNL AnswerGroup. The corresponding AnswerGroup domain object.'
def __init__(self, outcome, rule_specs, correct): DCNL 'Initializes a AnswerGroup domain object. DCNL Args: DCNL outcome: Outcome. The outcome corresponding to the answer group. DCNL rule_specs: list(RuleSpec). List of rule specifications. DCNL correct: bool. Whether this answer group represents a "correct" DCNL answer.'
def validate(self, interaction, exp_param_specs_dict): DCNL 'Verifies that all rule classes are valid, and that the AnswerGroup DCNL only has one classifier rule. DCNL Args: DCNL exp_param_specs_dict: dict. A dict of all parameters used in the DCNL exploration. Keys are parameter names and values are ParamSpec DCNL value objects with an object type property (obj_type). DCNL Raises: DCNL ValidationError: One or more attributes of the AnswerGroup are DCNL invalid. DCNL ValidationError: The AnswerGroup contains more than one classifier DCNL rule.'
def get_classifier_rule_index(self): DCNL 'Gets the index of the classifier in the answer groups. DCNL Returns: DCNL int or None. The index of the classifier in the answer DCNL groups, or None if it doesn\'t exist.'
def __init__(self, trigger_type, customization_args): DCNL 'Initializes a TriggerInstance domain object. DCNL Args: DCNL trigger_type: str. The type of trigger. DCNL customization_args: dict. The customization dict. The keys are DCNL names of customization_args and the values are dicts with a DCNL single key, \'value\', whose corresponding value is the value of DCNL the customization arg.'
def to_dict(self): DCNL 'Returns a dict representing this TriggerInstance domain object. DCNL Returns: DCNL dict. A dict mapping all fields of TriggerInstance instance.'
@classmethod DCNL def from_dict(cls, trigger_dict): DCNL 'Return a TriggerInstance domain object from a dict. DCNL Args: DCNL trigger_dict: dict. The dict representation of TriggerInstance DCNL object. DCNL Returns: DCNL TriggerInstance. The corresponding TriggerInstance domain object.'
def validate(self): DCNL 'Validates various properties of the TriggerInstance. DCNL Raises: DCNL ValidationError: One or more attributes of the TriggerInstance are DCNL invalid.'
def __init__(self, trigger, outcome): DCNL 'Initializes a Fallback domain object. DCNL Args: DCNL trigger: TriggerInstance. The satisfied trigger. DCNL outcome: Outcome. The outcome to apply when the user hits the DCNL trigger.'
def to_dict(self): DCNL 'Returns a dict representing this Fallback domain object. DCNL Returns: DCNL dict. A dict mapping all fields of Fallback instance.'
@classmethod DCNL def from_dict(cls, fallback_dict): DCNL 'Return a Fallback domain object from a dict. DCNL Args: DCNL fallback_dict: dict. The dict representation of Fallback object. DCNL Returns: DCNL Fallback. The corresponding Fallback domain object.'
def __init__(self, hint_text): DCNL 'Constructs a Hint domain object. DCNL Args: DCNL hint_text: str. The hint text.'
def to_dict(self): DCNL 'Returns a dict representing this Hint domain object. DCNL Returns: DCNL dict. A dict mapping the field of Hint instance.'
@classmethod DCNL def from_dict(cls, hint_dict): DCNL 'Return a Hint domain object from a dict. DCNL Args: DCNL hint_dict: dict. The dict representation of Hint object. DCNL Returns: DCNL Hint. The corresponding Hint domain object.'
def validate(self): DCNL 'Validates all properties of Hint. DCNL Raises: DCNL ValidationError: \'hint_text\' is not a string.'
def __init__(self, interaction_id, answer_is_exclusive, correct_answer, explanation): DCNL 'Constructs a Solution domain object. DCNL Args: DCNL interaction_id: str. The interaction id. DCNL answer_is_exclusive: bool. True if is the only correct answer; DCNL False if is one of possible answer. DCNL correct_answer: str. The correct answer; this answer enables the DCNL learner to progress to the next card. DCNL explanation: str. HTML string containing an explanation for the DCNL solution.'
def to_dict(self): DCNL 'Returns a dict representing this Solution domain object. DCNL Returns: DCNL dict. A dict mapping all fields of Solution instance.'
@classmethod DCNL def from_dict(cls, interaction_id, solution_dict): DCNL 'Return a Solution domain object from a dict. DCNL Args: DCNL interaction_id: str. The interaction id. DCNL solution_dict: dict. The dict representation of Solution object. DCNL Returns: DCNL Solution. The corresponding Solution domain object.'
def validate(self, interaction_id): DCNL 'Validates all properties of Solution. DCNL Args: DCNL interaction_id: str. The interaction id. DCNL Raises: DCNL ValidationError: One or more attributes of the Solution are not DCNL valid.'
def to_dict(self): DCNL 'Returns a dict representing this InteractionInstance domain object. DCNL Returns: DCNL dict. A dict mapping all fields of InteractionInstance instance.'
@classmethod DCNL def from_dict(cls, interaction_dict): DCNL 'Return a InteractionInstance domain object from a dict. DCNL Args: DCNL interaction_dict: dict. The dict representation of DCNL InteractionInstance object. DCNL Returns: DCNL InteractionInstance. The corresponding InteractionInstance domain DCNL object.'
def __init__(self, interaction_id, customization_args, answer_groups, default_outcome, confirmed_unclassified_answers, fallbacks, hints, solution): DCNL 'Initializes a InteractionInstance domain object. DCNL Args: DCNL interaction_id: str. The interaction id. DCNL customization_args: dict. The customization dict. The keys are DCNL names of customization_args and the values are dicts with a DCNL single key, \'value\', whose corresponding value is the value of DCNL the customization arg. DCNL answer_groups: list(AnswerGroup). List of answer groups of the DCNL interaction instance. DCNL default_outcome: Outcome. The default outcome of the interaction DCNL instance. DCNL confirmed_unclassified_answers: list(AnswerGroup). List of answers DCNL which have been confirmed to be associated with the default DCNL outcome. DCNL fallbacks: list(Fallback). List of fallbacks for this interaction. DCNL hints: list(Hint). List of hints for this interaction. DCNL solution: Solution. A possible solution for the question asked in DCNL this interaction.'
@property DCNL def is_terminal(self): DCNL 'Determines if this interaction type is terminal. If no ID is set for DCNL this interaction, it is assumed to not be terminal. DCNL Returns: DCNL bool. Whether the interaction is terminal.'
def get_all_non_fallback_outcomes(self): DCNL 'Returns a list of all non-fallback outcomes of this interaction, DCNL i.e. every answer group and the default outcome. DCNL Returns: DCNL list(Outcome). List of non-fallback outcomes of this interaction.'
def get_all_outcomes(self): DCNL 'Returns a list of all outcomes of this interaction, taking into DCNL consideration every answer group, the default outcome, and every DCNL fallback. DCNL Returns: DCNL list(Outcome). List of all outcomes of this interaction.'
def validate(self, exp_param_specs_dict): DCNL 'Validates various properties of the InteractionInstance. DCNL Args: DCNL exp_param_specs_dict: dict. A dict of specified parameters used in DCNL the exploration. Keys are parameter names and values are DCNL ParamSpec value objects with an object type property(obj_type). DCNL Is used to validate AnswerGroup objects. DCNL Raises: DCNL ValidationError: One or more attributes of the InteractionInstance DCNL are invalid.'
@classmethod DCNL def create_default_interaction(cls, default_dest_state_name): DCNL 'Create a default InteractionInstance domain object: DCNL - customization_args: empty dictionary; DCNL - answer_groups: empty list; DCNL - default_outcome: dest is set to \'default_dest_state_name\' and DCNL feedback and param_changes are initialized as empty lists; DCNL - confirmed_unclassified_answers: empty list; DCNL - fallbacks: empty list; DCNL Args: DCNL default_dest_state_name: str. The default destination state. DCNL Returns: DCNL InteractionInstance. The corresponding InteractionInstance domain DCNL object with default values.'
def __init__(self, gadget_type, gadget_name, visible_in_states, customization_args): DCNL 'Initializes a GadgetInstance domain object. DCNL Args: DCNL gadget_type: str. Backend ID referring to the gadget\'s type in DCNL gadget registry. DCNL gadget_name: str. The gadget name. DCNL visible_in_states: list(str). List of state name where this DCNL gadget is visible. DCNL customization_args: dict. The customization args for the gadget\'s DCNL view.'
@property DCNL def gadget(self): DCNL 'Gets a gadget spec based on its type. DCNL Returns: DCNL GadgetInstance. The corresponding GadgetInstance domain object.'
@property DCNL def width(self): DCNL 'Gets the gadget width in pixels. DCNL Returns: DCNL int. The gadget width, in pixels.'
@property DCNL def height(self): DCNL 'Gets the gadget height in pixels. DCNL Returns: DCNL int. The gadget height, in pixels.'
@staticmethod DCNL def _validate_gadget_name(gadget_name): DCNL 'Validates gadget_name property of the GadgetInstance. gadget_name is DCNL a non-empty string of alphanumerics allowing spaces. DCNL Raises: DCNL ValidationError: gadget_name is a empty string or not alphanumeric DCNL or is too long.'
def validate(self): DCNL 'Validates properties of the GadgetInstance. DCNL Raises: DCNL ValidationError: One or more attributes of the GadgetInstance are DCNL invalid.'
def to_dict(self): DCNL 'Returns a dict representing this GadgetInstance domain object. DCNL Returns: DCNL dict. A dict mapping all fields of GadgetInstance instance.'
@classmethod DCNL def from_dict(cls, gadget_dict): DCNL 'Return a GadgetInstance domain object from a dict. DCNL Args: DCNL gadget_dict: dict. The dict representation of GadgetInstance DCNL object. DCNL Returns: DCNL GadgetInstance. The corresponding GadgetInstance domain object.'
def update_customization_args(self, customization_args): DCNL 'Updates the GadgetInstance\'s customization arguments. DCNL Args: DCNL customization_args: dict. The customization args for the gadget\'s DCNL view.'
def update_visible_in_states(self, visible_in_states): DCNL 'Updates the GadgetInstance\'s visibility in different states. DCNL Args: DCNL visible_in_states: list(str). List of state names where this gadget DCNL is visible.'
def _get_full_customization_args(self): DCNL 'Populates the customization_args dict of the gadget with DCNL default values, if any of the expected customization_args are missing. DCNL Returns: DCNL dict. The customization_args dict of the gadget.'
def __init__(self, skin_id, skin_customizations): DCNL 'Initializes SkinInstance with any customizations provided. DCNL If no customizations are necessary, skin_customizations may be set to DCNL None, in which case defaults will be generated that provide empty DCNL gadget panels for each panel specified in the skin. DCNL Args: DCNL skin_id: str. The id of the skin. DCNL skin_customizations: dict. The customization dictionary.'
@staticmethod DCNL def _get_default_skin_customizations(): DCNL 'Generates default skin customizations when none are specified. DCNL Returns: DCNL dict. The default skin customizations.'
def validate_gadget_panel(self, panel_name, gadget_list): DCNL 'Validate proper fit given space requirements specified by DCNL feconf.PANELS_PROPERTIES. DCNL Args: DCNL panel_name: str. Unique name that identifies this panel in the DCNL skin. This should correspond to an entry in DCNL feconf.PANELS_PROPERTIES. DCNL gadget_list: list(GadgetInstance). List of GadgetInstance DCNL instances. DCNL Raises: DCNL ValidationError: The space requirements are not satisfied.'
def validate(self): DCNL 'Validates that gadgets fit the skin panel dimensions, and that the DCNL gadgets themselves are valid. DCNL Raises: DCNL ValidationError: One or more attributes of the SkinInstance are DCNL invalid.'
def to_dict(self): DCNL 'Returns a dict representing this SkinInstance domain object. DCNL Returns: DCNL dict. A dict mapping all fields of SkinInstance instance.'
@classmethod DCNL def from_dict(cls, skin_dict): DCNL 'Return a SkinInstance domain object from a dict. DCNL Args: DCNL content_dict: dict. The dict representation of SkinInstance object. DCNL Returns: DCNL SkinInstance. The corresponding SkinInstance domain object.'
def get_state_names_required_by_gadgets(self): DCNL 'Returns a list of strings representing State names required by DCNL GadgetInstances in this skin. DCNL Returns: DCNL list(str). List of State names required.'
def __init__(self, content, param_changes, interaction, classifier_model_id=None): DCNL 'Initializes a State domain object. DCNL Args: DCNL content: list(Content). The contents displayed to the reader in DCNL this state. This list must have only one element. DCNL param_changes: list(ParamChange). Parameter changes associated with DCNL this state. DCNL interaction: InteractionInstance. The interaction instance DCNL associated with this state. DCNL classifier_model_id: str or None. The classifier model ID DCNL associated with this state, if applicable.'
def validate(self, exp_param_specs_dict, allow_null_interaction): DCNL 'Validates various properties of the State. DCNL Args: DCNL exp_param_specs_dict: dict. A dict of specified parameters used in DCNL this exploration. Keys are parameter names and values are DCNL ParamSpec value objects with an object type property(obj_type). DCNL allow_null_interaction. bool. Whether this state\'s interaction is DCNL allowed to be unspecified. DCNL Raises: DCNL ValidationError: One or more attributes of the State are invalid.'
def get_training_data(self): DCNL 'Retrieves training data from the State domain object.'
def can_undergo_classification(self): DCNL 'Checks whether the answers for this state satisfy the preconditions DCNL for a ML model to be trained. DCNL Returns: DCNL bool: True, if the conditions are satisfied.'
def update_content(self, content_dict): DCNL 'Update the list of Content of this state. DCNL Args: DCNL content_dict. dict. The dict representation of SubtitledHtml DCNL object.'
def update_param_changes(self, param_change_dicts): DCNL 'Update the param_changes dict attribute. DCNL Args: DCNL param_change_dicts. list(dict). List of param_change dicts that DCNL represent ParamChange domain object.'
def update_interaction_id(self, interaction_id): DCNL 'Update the interaction id attribute. DCNL Args: DCNL interaction_id. str. The new interaction id to set.'
def update_interaction_customization_args(self, customization_args): DCNL 'Update the customization_args of InteractionInstance domain object. DCNL Args: DCNL customization_args. dict. The new customization_args to set.'
def update_interaction_answer_groups(self, answer_groups_list): DCNL 'Update the list of AnswerGroup in IteractioInstancen domain object. DCNL Args: DCNL answer_groups_list. list(dict). List of dicts that represent DCNL AnswerGroup domain object.'
def update_interaction_default_outcome(self, default_outcome_dict): DCNL 'Update the default_outcome of InteractionInstance domain object. DCNL Args: DCNL default_outcome_dict. dict. Dict that represents Outcome domain DCNL object.'
def update_interaction_confirmed_unclassified_answers(self, confirmed_unclassified_answers): DCNL 'Update the confirmed_unclassified_answers of IteractionInstance DCNL domain object. DCNL Args: DCNL confirmed_unclassified_answers. list(AnswerGroup). The new list of DCNL answers which have been confirmed to be associated with the DCNL default outcome. DCNL Raises: DCNL Exception: \'confirmed_unclassified_answers\' is not a list.'
def update_interaction_fallbacks(self, fallbacks_list): DCNL 'Update the fallbacks of InteractionInstance domain object. DCNL Args: DCNL fallbacks_list. list(dict). List of dicts that represent Fallback DCNL domain object.'
def update_interaction_hints(self, hints_list): DCNL 'Update the list of hints. DCNL Args: DCNL hint_list: list(dict). A list of dict; each dict represents a Hint DCNL object. DCNL Raises: DCNL Exception: \'hint_list\' is not a list.'
def update_interaction_solution(self, solution_dict): DCNL 'Update the solution of interaction. DCNL Args: DCNL solution_dict: dict. The dict representation of Solution object. DCNL Raises: DCNL Exception: \'hint_list\' is not a list.'
def add_hint(self, hint_text): DCNL 'Add a new hint to the list of hints. DCNL Args: DCNL hint_text: str. The hint text.'
def delete_hint(self, index): DCNL 'Delete a hint from the list of hints. DCNL Args: DCNL index: int. The position of the hint in the list of hints. DCNL Raises: DCNL IndexError: Index is less than 0. DCNL IndexError: Index is greater than or equal than the length of hints DCNL list.'
def to_dict(self): DCNL 'Returns a dict representing this State domain object. DCNL Returns: DCNL dict. A dict mapping all fields of State instance.'
@classmethod DCNL def from_dict(cls, state_dict): DCNL 'Return a State domain object from a dict. DCNL Args: DCNL state_dict: dict. The dict representation of State object. DCNL Returns: DCNL State. The corresponding State domain object.'
@classmethod DCNL def create_default_state(cls, default_dest_state_name, is_initial_state=False): DCNL 'Return a State domain object with default value. DCNL Args: DCNL default_dest_state_name: str. The default destination state. DCNL is_initial_state: bool. Whether this state represents the initial DCNL state of an exploration. DCNL Returns: DCNL State. The corresponding State domain object.'
def __init__(self, exploration_id, title, category, objective, language_code, tags, blurb, author_notes, skin_customizations, states_schema_version, init_state_name, states_dict, param_specs_dict, param_changes_list, version, created_on=None, last_updated=None): DCNL 'Initializes an Exploration domain object. DCNL Args: DCNL exploration_id: str. The exploration id. DCNL title: str. The exploration title. DCNL category: str. The category of the exploration. DCNL objective: str. The objective of the exploration. DCNL language_code: str. The language code of the exploration. DCNL tags: list(str). The tags given to the exploration. DCNL blurb: str. The blurb of the exploration. DCNL author_notes: str. The author notes. DCNL skin_customizations: dict. The customization dictionary of DCNL SkinInstance domain object. DCNL states_schema_version: int. Tbe schema version of the exploration. DCNL init_state_name: str. The name for the initial state of the DCNL exploration. DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL param_specs_dict: dict. A dict where each key-value pair represents DCNL respectively, a param spec name and a dict used to initialize a DCNL ParamSpec domain object. DCNL param_changes_list: list(dict). List of dict where each dict is DCNL used to initialize a ParamChange domain object. DCNL version: int. The version of the exploration. DCNL created_on: datetime.datetime. Date and time when the exploration DCNL is created. DCNL last_updated: datetime.datetime. Date and time when the exploration DCNL was last updated.'
@classmethod DCNL def create_default_exploration(cls, exploration_id, title=feconf.DEFAULT_EXPLORATION_TITLE, category=feconf.DEFAULT_EXPLORATION_CATEGORY, objective=feconf.DEFAULT_EXPLORATION_OBJECTIVE, language_code=constants.DEFAULT_LANGUAGE_CODE): DCNL 'Returns a Exploration domain object with default values. DCNL \'title\', \'category\', \'objective\' if not provided are taken from DCNL feconf; \'tags\' and \'param_changes_list\' are initialized to empty DCNL list; \'states_schema_version\' and \'init_state_name\' are taken from DCNL feconf; \'states_dict\' is derived from feconf; \'param_specs_dict\' is DCNL an empty dict; \'blurb\' and \'author_notes\' are initialized to empty DCNL empty string; \'skin_customizations\' is a null object; \'version\' is DCNL initializated to 0. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL title: str. The exploration title. DCNL category: str. The category of the exploration. DCNL objective: str. The objective of the exploration. DCNL language_code: str. The language code of the exploration. DCNL Returns: DCNL Exploration. The Exploration domain object with default DCNL values.'
@classmethod DCNL def from_dict(cls, exploration_dict, exploration_version=0, exploration_created_on=None, exploration_last_updated=None): DCNL 'Return a Exploration domain object from a dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of Exploration DCNL object. DCNL exploration_version: int. The version of the exploration. DCNL exploration_created_on: datetime.datetime. Date and time when the DCNL exploration is created. DCNL exploration_last_updated: datetime.datetime. Date and time when the DCNL exploration was last updated. DCNL Returns: DCNL Exploration. The corresponding Exploration domain object.'
@classmethod DCNL def _require_valid_state_name(cls, name): DCNL 'Validates name string. DCNL Args: DCNL name: str. The name to validate.'
def validate(self, strict=False): DCNL 'Validates various properties of the Exploration. DCNL Args: DCNL strict: bool. If True, the exploration is assumed to be published, DCNL and the validation checks are stricter. DCNL Raises: DCNL ValidationError: One or more attributes of the Exploration are DCNL invalid.'
def _verify_all_states_reachable(self): DCNL 'Verifies that all states are reachable from the initial state. DCNL Raises: DCNL ValidationError: One or more states are not reachable from the DCNL initial state of the Exploration.'
def _verify_no_dead_ends(self): DCNL 'Verifies that all states can reach a terminal state without using DCNL fallbacks. DCNL Raises: DCNL ValidationError: If is impossible to complete the exploration from DCNL a state.'
@property DCNL def init_state(self): DCNL 'The state which forms the start of this exploration. DCNL Returns: DCNL State. The corresponding State domain object.'
@property DCNL def param_specs_dict(self): DCNL 'A dict of param specs, each represented as Python dicts. DCNL Returns: DCNL dict. Dict of parameter specs.'
@property DCNL def param_change_dicts(self): DCNL 'A list of param changes, represented as JSONifiable Python dicts. DCNL Returns: DCNL list(dict). List of dicts, each representing a parameter change.'
@classmethod DCNL def is_demo_exploration_id(cls, exploration_id): DCNL 'Whether the given exploration id is a demo exploration. DCNL Args: DCNL exploration_id: str. The exploration id. DCNL Returns: DCNL bool. Whether the corresponding exploration is a demo exploration.'
@property DCNL def is_demo(self): DCNL 'Whether the exploration is one of the demo explorations. DCNL Returns: DCNL bool. True is the current exploration is a demo exploration.'
def update_title(self, title): DCNL 'Update the exploration title. DCNL Args: DCNL title: str. The exploration title to set.'
def update_category(self, category): DCNL 'Update the exploration category. DCNL Args: DCNL category: str. The exploration category to set.'
def update_objective(self, objective): DCNL 'Update the exploration objective. DCNL Args: DCNL objective: str. The exploration objective to set.'
def update_language_code(self, language_code): DCNL 'Update the exploration language code. DCNL Args: DCNL language_code: str. The exploration language code to set.'
def update_tags(self, tags): DCNL 'Update the tags of the exploration. DCNL Args: DCNL tags: list(str). List of tags to set.'
def update_blurb(self, blurb): DCNL 'Update the blurb of the exploration. DCNL Args: DCNL blurb: str. The blurb to set.'
def update_author_notes(self, author_notes): DCNL 'Update the author notes of the exploration. DCNL Args: DCNL author_notes: str. The author notes to set.'
def update_param_specs(self, param_specs_dict): DCNL 'Update the param spec dict. DCNL Args: DCNL param_specs_dict: dict. A dict where each key-value pair represents DCNL respectively, a param spec name and a dict used to initialize a DCNL ParamSpec domain object.'
def update_param_changes(self, param_changes_list): DCNL 'Update the param change dict. DCNL Args: DCNL param_changes_list: list(dict). List of dict where each dict is DCNL used to initialize a ParamChange domain object.'
def update_init_state_name(self, init_state_name): DCNL 'Update the name for the initial state of the exploration. DCNL Args: DCNL init_state_name: str. The new name of the initial state.'
def add_states(self, state_names): DCNL 'Adds multiple states to the exploration. DCNL Args: DCNL state_names: list(str). List of state names to add. DCNL Raises: DCNL ValueError: At least one of the new state names already exists in DCNL the states dict.'
def rename_state(self, old_state_name, new_state_name): DCNL 'Renames the given state. DCNL Args: DCNL old_state_names: str. The old name of state to rename. DCNL new_state_names: str. The new state name. DCNL Raises: DCNL ValueError: The old state name does not exist or the new state name DCNL is already in states dict.'
def delete_state(self, state_name): DCNL 'Deletes the given state. DCNL Args: DCNL state_names: str. The state name to be deleted. DCNL Raises: DCNL ValueError: The state does not exist or is the initial state of the DCNL exploration.'
def get_state_names_mapping(self, change_list): DCNL 'Creates a mapping from the current state names of the exploration DCNL to their corresponding state names of the older version. DCNL Args: DCNL change_list: list(dict). A list of changes introduced in this DCNL commit. DCNL Returns: DCNL dict. The new_to_old_state_names mapping dict.'
def get_trainable_states_dict(self, old_states, new_to_old_state_names): DCNL 'Retrieves the state names of all trainable states in an exploration DCNL segregated into state names with changed and unchanged answer groups. DCNL In this method, the new_state_name refers to the name of the state in DCNL the current version of the exploration whereas the old_state_name refers DCNL to the name of the state in the previous version of the exploration. DCNL Args: DCNL old_states: dict. Dictionary containing all State domain objects. DCNL new_to_old_state_names: dict. A mapping from current state names to DCNL state names from previous version of the exploration. DCNL Returns: DCNL dict. The trainable states dict. This dict has three keys DCNL representing state names with changed answer groups and DCNL unchanged answer groups respectively.'
def add_gadget(self, gadget_dict, panel): DCNL 'Adds a gadget to the associated panel. DCNL Args: DCNL gadget_dict: dict. The dict representation of GadgetInstance DCNL object. DCNL panel: str. The panel name.'
def rename_gadget(self, old_gadget_name, new_gadget_name): DCNL 'Renames the given gadget. DCNL Args: DCNL old_gadget_name: str. The old name of gadget to rename. DCNL new_gadget_name: str. The new gadget name. DCNL Raises: DCNL ValueError: The old gadget name does not exist or the new gadget DCNL name already exists.'
def delete_gadget(self, gadget_name): DCNL 'Deletes the given gadget. DCNL Args: DCNL gadget_name: str. The name of the gadget to be deleted. DCNL Raises: DCNL ValueError: The gadget does not exist.'
def get_gadget_instance_by_name(self, gadget_name): DCNL 'Returns the GadgetInstance with the given name. DCNL Args: DCNL gadget_name: str. The gadget name. DCNL Returns: DCNL GadgetInstance. The corresponding GadgetInstance domain object. DCNL Raises: DCNL ValueError: The gadget does not exist.'
def get_all_gadget_names(self): DCNL 'Gets a list of names of all gadgets used in this exploration. DCNL Returns: DCNL list(GadgetInstance). The list of all gadget names.'
def _get_panel_for_gadget(self, gadget_name): DCNL 'Returns the panel name for the given GadgetInstance. DCNL Args: DCNL gadget_name: str. The gadget name. DCNL Returns: DCNL str. The corresponding panel name. DCNL Raises: DCNL ValueError: The gadget does not exist.'
def _update_gadget_visibilities_for_renamed_state(self, old_state_name, new_state_name): DCNL 'Updates the visible_in_states property for gadget instances DCNL visible in the renamed state. DCNL Args: DCNL old_state_name: str. The name of state to remove. DCNL new_state_name: str. The new gadget name to append in DCNL \'visible_in_states\' list.'
def _update_gadget_visibilities_for_deleted_state(self, state_name): DCNL 'Updates the visible_in_states property for gadget instances DCNL visible in the deleted state. DCNL Args: DCNL state_name: str. The state name.'
def _get_gadget_instances_visible_in_state(self, state_name): DCNL 'Helper function to retrieve gadget instances visible in DCNL a given state. DCNL Args: DCNL state_name: str. The name of state in which search for gadgets. DCNL Returns: DCNL list(GadgetInstance). List of gadgets visibile in a givent state.'
@classmethod DCNL def _convert_states_v0_dict_to_v1_dict(cls, states_dict): DCNL 'Converts old states schema to the modern v1 schema. v1 contains the DCNL schema version 1 and does not contain any old constructs, such as DCNL widgets. This is a complete migration of everything previous to the DCNL schema versioning update to the earliest versioned schema. DCNL Note that the states_dict being passed in is modified in-place. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v1_dict_to_v2_dict(cls, states_dict): DCNL 'Converts from version 1 to 2. Version 1 assumes the existence of an DCNL implicit \'END\' state, but version 2 does not. As a result, the DCNL conversion process involves introducing a proper ending state for all DCNL explorations previously designed under this assumption. DCNL Note that the states_dict being passed in is modified in-place. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v2_dict_to_v3_dict(cls, states_dict): DCNL 'Converts from version 2 to 3. Version 3 introduces a triggers list DCNL within interactions. DCNL Note that the states_dict being passed in is modified in-place. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v3_dict_to_v4_dict(cls, states_dict): DCNL 'Converts from version 3 to 4. Version 4 introduces a new structure DCNL for rules by organizing them into answer groups instead of handlers. DCNL This migration involves a 1:1 mapping from rule specs to answer groups DCNL containing just that single rule. Default rules have their destination DCNL state name and feedback copied to the default_outcome portion of an DCNL interaction instance. DCNL Note that the states_dict being passed in is modified in-place. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v4_dict_to_v5_dict(cls, states_dict): DCNL 'Converts from version 4 to 5. Version 5 removes the triggers list DCNL within interactions, and replaces it with a fallbacks list. DCNL Note that the states_dict being passed in is modified in-place. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v5_dict_to_v6_dict(cls, states_dict): DCNL 'Converts from version 5 to 6. Version 6 introduces a list of DCNL confirmed unclassified answers. Those are answers which are confirmed DCNL to be associated with the default outcome during classification. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v6_dict_to_v7_dict(cls, states_dict): DCNL 'Converts from version 6 to 7. Version 7 forces all CodeRepl DCNL interactions to use Python. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v7_dict_to_v8_dict(cls, states_dict): DCNL 'Converts from version 7 to 8. Version 8 contains classifier DCNL model id. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v8_dict_to_v9_dict(cls, states_dict): DCNL 'Converts from version 8 to 9. Version 9 contains \'correct\' DCNL field in answer groups. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v9_dict_to_v10_dict(cls, states_dict): DCNL 'Converts from version 9 to 10. Version 10 contains hints DCNL and solution in each interaction. DCNL Args: DCNL states_dict: dict. A dict where each key-value pair represents, DCNL respectively, a state name and a dict used to initialize a DCNL State domain object. DCNL Returns: DCNL dict. The converted states_dict.'
@classmethod DCNL def _convert_states_v10_dict_to_v11_dict(cls, states_dict): DCNL 'Converts from version 10 to 11. Version 11 refactors the content to DCNL be an HTML string with audio translations.'
@classmethod DCNL def _convert_states_v11_dict_to_v12_dict(cls, states_dict): DCNL 'Converts from version 11 to 12. Version 12 refactors audio DCNL translations from a list to a dict keyed by language code.'
@classmethod DCNL def update_states_from_model(cls, versioned_exploration_states, current_states_schema_version): DCNL 'Converts the states blob contained in the given DCNL versioned_exploration_states dict from current_states_schema_version to DCNL current_states_schema_version + 1. DCNL Note that the versioned_exploration_states being passed in is modified DCNL in-place. DCNL Args: DCNL versioned_exploration_states: dict. A dict with two keys: DCNL - states_schema_version: int. The states schema version for the DCNL exploration. DCNL - states: dict. The dict of states comprising the exploration. DCNL The keys are state names and the values are dicts used to DCNL initialize a State domain object. DCNL current_states_schema_version: int. The current states DCNL schema version.'
@classmethod DCNL def _convert_v1_dict_to_v2_dict(cls, exploration_dict): DCNL 'Converts a v1 exploration dict into a v2 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v1. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v2.'
@classmethod DCNL def _convert_v2_dict_to_v3_dict(cls, exploration_dict): DCNL 'Converts a v2 exploration dict into a v3 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v2. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v3.'
@classmethod DCNL def _convert_v3_dict_to_v4_dict(cls, exploration_dict): DCNL 'Converts a v3 exploration dict into a v4 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v3. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v4.'
@classmethod DCNL def _convert_v4_dict_to_v5_dict(cls, exploration_dict): DCNL 'Converts a v4 exploration dict into a v5 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v4. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v5.'
@classmethod DCNL def _convert_v5_dict_to_v6_dict(cls, exploration_dict): DCNL 'Converts a v5 exploration dict into a v6 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v5. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v6.'
@classmethod DCNL def _convert_v6_dict_to_v7_dict(cls, exploration_dict): DCNL 'Converts a v6 exploration dict into a v7 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v6. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v7.'
@classmethod DCNL def _convert_v7_dict_to_v8_dict(cls, exploration_dict): DCNL 'Converts a v7 exploration dict into a v8 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v7. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v8.'
@classmethod DCNL def _convert_v8_dict_to_v9_dict(cls, exploration_dict): DCNL 'Converts a v8 exploration dict into a v9 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v8. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v9.'
@classmethod DCNL def _convert_v9_dict_to_v10_dict(cls, exploration_dict, title, category): DCNL 'Converts a v9 exploration dict into a v10 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v9. DCNL title: str. The exploration title. DCNL category: str. The exploration category. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v10.'
@classmethod DCNL def _convert_v10_dict_to_v11_dict(cls, exploration_dict): DCNL 'Converts a v10 exploration dict into a v11 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v10. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v11.'
@classmethod DCNL def _convert_v11_dict_to_v12_dict(cls, exploration_dict): DCNL 'Converts a v11 exploration dict into a v12 exploration dict. DCNL Args: DCNL exploration_dict: dict. The dict representation of an exploration DCNL with schema version v11. DCNL Returns: DCNL dict. The dict representation of the Exploration domain object, DCNL following schema version v12.'
@classmethod DCNL def _convert_v12_dict_to_v13_dict(cls, exploration_dict): DCNL 'Converts a v12 exploration dict into a v13 exploration dict.'
@classmethod DCNL def _convert_v13_dict_to_v14_dict(cls, exploration_dict): DCNL 'Converts a v13 exploration dict into a v14 exploration dict.'
@classmethod DCNL def _convert_v14_dict_to_v15_dict(cls, exploration_dict): DCNL 'Converts a v14 exploration dict into a v15 exploration dict.'
@classmethod DCNL def _migrate_to_latest_yaml_version(cls, yaml_content, title=None, category=None): DCNL 'Return the YAML content of the exploration in the latest schema DCNL format. DCNL Args: DCNL yaml_content: str. The YAML representation of the exploration. DCNL title: str. The exploration title. DCNL category: str. The exploration category. DCNL Returns: DCNL tuple(dict, int). The dict \'exploration_dict\' is the representation DCNL of the Exploration and the \'initial_schema_version\' is the initial DCNL schema version provided in \'yaml_content\'. DCNL Raises: DCNL Exception: \'yaml_content\' or the exploration schema version is not DCNL valid.'
@classmethod DCNL def from_yaml(cls, exploration_id, yaml_content): DCNL 'Creates and returns exploration from a YAML text string for YAML DCNL schema versions 10 and later. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL yaml_content: str. The YAML representation of the exploration. DCNL Returns: DCNL Exploration. The corresponding exploration domain object. DCNL Raises: DCNL Exception: The initial schema version of exploration is less than DCNL or equal to 9.'
@classmethod DCNL def from_untitled_yaml(cls, exploration_id, title, category, yaml_content): DCNL 'Creates and returns exploration from a YAML text string. This is DCNL for importing explorations using YAML schema version 9 or earlier. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL title: str. The exploration title. DCNL category: str. The exploration category. DCNL yaml_content: str. The YAML representation of the exploration. DCNL Returns: DCNL Exploration. The corresponding exploration domain object. DCNL Raises: DCNL Exception: The initial schema version of exploration is less than DCNL or equal to 9.'
def to_yaml(self): DCNL 'Convert the exploration domain object into YAML string. DCNL Returns: DCNL str. The YAML representation of this exploration.'
def to_dict(self): DCNL 'Returns a copy of the exploration as a dictionary. It includes all DCNL necessary information to represent the exploration. DCNL Returns: DCNL dict. A dict mapping all fields of Exploration instance.'
def to_player_dict(self): DCNL 'Returns a copy of the exploration suitable for inclusion in the DCNL learner view. DCNL Returns: DCNL dict. A dict mapping some fields of Exploration instance. The DCNL fields inserted in the dict (as key) are: DCNL - init_state_name: str. The name for the initial state of the DCNL exploration. DCNL - param_change. list(dict). List of param_change dicts that DCNL represent ParamChange domain object. DCNL - param_specs: dict. A dict where each key-value pair DCNL represents respectively, a param spec name and a dict used DCNL to initialize a ParamSpec domain object. DCNL - skin_customizations: dict. The customization dictionary of DCNL SkinInstance domain object. DCNL - states: dict. Keys are states names and values are dict DCNL representation of State domain object. DCNL - title: str. The exploration title. DCNL - language_code: str. The language code of the exploration.'
def get_gadget_types(self): DCNL 'Gets all gadget types used in this exploration. DCNL Returns: DCNL set(str). The collection of gadget types.'
def get_interaction_ids(self): DCNL 'Gets all interaction ids used in this exploration. DCNL Returns: DCNL list(str). The list of interaction ids.'
def __init__(self, exploration_id, title, category, objective, language_code, tags, ratings, scaled_average_rating, status, community_owned, owner_ids, editor_ids, viewer_ids, contributor_ids, contributors_summary, version, exploration_model_created_on, exploration_model_last_updated, first_published_msec): DCNL 'Initializes a ExplorationSummary domain object. DCNL Args: DCNL exploration_id: str. The exploration id. DCNL title: str. The exploration title. DCNL category: str. The exploration category. DCNL objective: str. The exploration objective. DCNL language_code: str. The code that represents the exploration DCNL language. DCNL tags: list(str). List of tags. DCNL ratings: dict. Dict whose keys are \'1\', \'2\', \'3\', \'4\', \'5\' and DCNL whose values are nonnegative integers representing frequency DCNL counts. Note that the keys need to be strings in order for this DCNL dict to be JSON-serializable. DCNL scaled_average_rating: float. The average rating. DCNL status: str. The status of the exploration. DCNL community_owned: bool. Whether the exploration is community-owned. DCNL owner_ids: list(str). List of the users ids who are the owners of DCNL this exploration. DCNL editor_ids: list(str). List of the users ids who have access to DCNL edit this exploration. DCNL viewer_ids: list(str). List of the users ids who have access to DCNL view this exploration. DCNL contributor_ids: list(str). List of the users ids of the user who DCNL have contributed to this exploration. DCNL contributors_summary: dict. A summary about contributors of current DCNL exploration. The keys are user ids and the values are the DCNL number of commits made by that user. DCNL version: int. The version of the exploration. DCNL exploration_model_created_on: datetime.datetime. Date and time when DCNL the exploration model is created. DCNL exploration_model_last_updated: datetime.datetime. Date and time DCNL when the exploration model was last updated. DCNL first_published_msec: int. Time in milliseconds since the Epoch, DCNL when the exploration was first published.'
def to_metadata_dict(self): DCNL 'Given an exploration summary, this method returns a dict containing DCNL id, title and objective of the exploration. DCNL Returns: DCNL A metadata dict for the given exploration summary. DCNL The metadata dict has three keys: DCNL - \'id\': str. The exploration ID. DCNL - \'title\': str. The exploration title. DCNL - \'objective\': str. The exploration objective.'
def test_interaction_registry(self): DCNL 'Do some sanity checks on the interaction registry.'
def test_get_all_specs(self): DCNL 'Test the get_all_specs() method.'
def test_validation(self): DCNL 'Tests to verify validate method of classifier domain.'
def test_validation(self): DCNL 'Tests to verify validate method of ClassifierTrainingJob domain.'
def test_validation(self): DCNL 'Tests to verify validate method of TrainingJobExplorationMapping DCNL domain.'
def __init__(self, exploration_id, exploration_version, state_name, interaction_id, submitted_answer_list, schema_version=feconf.CURRENT_STATE_ANSWERS_SCHEMA_VERSION): DCNL 'Constructs a StateAnswers domain object. DCNL Args: DCNL exploration_id. The ID of the exploration corresponding to submitted DCNL answers. DCNL exploration_version. The version of the exploration corresponding to DCNL submitted answers. DCNL state_name. The state to which the answers were submitted. DCNL interaction_id. The ID of the interaction which created the answers. DCNL submitted_answer_list. The list of SubmittedAnswer domain objects DCNL that were submitted to the exploration and version specified in DCNL this object. DCNL schema_version. The schema version of this answers object.'
def get_submitted_answer_dict_list(self): DCNL 'Returns the submitted_answer_list stored within this object as a list DCNL of StateAnswer dicts.'
def validate(self): DCNL 'Validates StateAnswers domain object entity.'
def validate(self): DCNL 'Validates this submitted answer object.'
def __init__(self, exploration_id, exploration_version, state_name, calculation_id, calculation_output): DCNL 'Initialize domain object for state answers calculation output. DCNL calculation_output is a list of dicts containing the results of the DCNL specific calculation.'
def save(self): DCNL 'Validate the domain object and commit it to storage.'
def validate(self): DCNL 'Validates StateAnswersCalcOutputModel domain object entity before DCNL it is commited to storage.'
def __init__(self, content, version, metadata): DCNL 'The args are a file content blob and a metadata model object.'
def read(self): DCNL 'Emulates stream.read(). Returns all bytes and emulates EOF.'
def _get_file_metadata(self, filepath, version): DCNL 'Return the desired file metadata. DCNL Returns None if the file does not exist.'
def _get_file_data(self, filepath, version): DCNL 'Return the desired file content. DCNL Returns None if the file does not exist.'
def _save_file(self, user_id, filepath, raw_bytes): DCNL 'Create or update a file.'
def get(self, filepath, version=None, mode=None): DCNL 'Gets a file as an unencoded stream of raw bytes. DCNL If `version` is not supplied, the latest version is retrieved. If the DCNL file does not exist, None is returned. DCNL The \'mode\' argument is unused. It is included so that this method DCNL signature matches that of other file systems.'
def commit(self, user_id, filepath, raw_bytes, unused_mimetype): DCNL 'Saves a raw bytestring as a file in the database.'
def delete(self, user_id, filepath): DCNL 'Marks the current version of a file as deleted.'
def isfile(self, filepath): DCNL 'Checks the existence of a file.'
def listdir(self, dir_name): DCNL 'Lists all files in a directory. DCNL Args: DCNL dir_name: The directory whose files should be listed. This should DCNL not start with \'/\' or end with \'/\'. DCNL Returns: DCNL List of str. This is a lexicographically-sorted list of filenames, DCNL each of which is prefixed with dir_name.'
def __init__(self, root): DCNL 'Constructor for this class. DCNL Args: DCNL root: the path to append to the oppia/ directory.'
def isfile(self, filepath): DCNL 'Checks if a file exists.'
def get(self, filepath, version=None, mode='r'): DCNL 'Returns a bytestring with the file content, but no metadata.'
def _check_filepath(self, filepath): DCNL 'Raises an error if a filepath is invalid.'
def isfile(self, filepath): DCNL 'Checks if a file exists. Similar to os.path.isfile(...).'
def open(self, filepath, version=None, mode='r'): DCNL 'Returns a stream with the file content. Similar to open(...).'
def get(self, filepath, version=None, mode='r'): DCNL 'Returns a bytestring with the file content, but no metadata.'
def commit(self, user_id, filepath, raw_bytes, mimetype=None): DCNL 'Replaces the contents of the file with the given bytestring.'
def delete(self, user_id, filepath): DCNL 'Deletes a file and the metadata associated with it.'
def listdir(self, dir_name): DCNL 'Lists all the files in a directory. Similar to os.listdir(...).'
def setUp(self): DCNL 'Before each individual test, create dummy users.'
def test_retrieval_of_collections(self): DCNL 'Test the get_collection_by_id() method.'
def test_soft_deletion_of_collections(self): DCNL 'Test that soft deletion of collections works correctly.'
def test_hard_deletion_of_collections(self): DCNL 'Test that hard deletion of collections works correctly.'
def test_summaries_of_hard_deleted_collections(self): DCNL 'Test that summaries of hard deleted collections are DCNL correctly deleted.'
def test_collections_are_removed_from_index_when_deleted(self): DCNL 'Tests that deleted collections are removed from the search index.'
def test_loading_and_validation_and_deletion_of_demo_collections(self): DCNL 'Test loading, validation and deletion of the demo collections.'
def test_add_node_with_private_exploration_in_public_collection(self): DCNL 'Ensures public collections cannot reference private explorations.'
def test_add_node_with_public_exploration_in_private_collection(self): DCNL 'Ensures private collections can reference public and private DCNL explorations.'
def test_record_commit_message(self): DCNL 'Check published collections record commit messages.'
def test_demand_commit_message(self): DCNL 'Check published collections demand commit messages.'
def test_unpublished_collections_can_accept_commit_message(self): DCNL 'Test unpublished collections can accept optional commit messages.'
def setUp(self): DCNL 'Populate the database of collections to be queried against. DCNL The sequence of events is: DCNL - (1) Albert creates COLLECTION_ID_1. DCNL - (2) Bob edits the title of COLLECTION_ID_1. DCNL - (3) Albert creates COLLECTION_ID_2. DCNL - (4) Albert edits the title of COLLECTION_ID_1. DCNL - (5) Albert edits the title of COLLECTION_ID_2. DCNL - (6) Albert deletes COLLECTION_ID_1. DCNL - Bob tries to publish COLLECTION_ID_2, and is denied access. DCNL - (7) Albert publishes COLLECTION_ID_2.'
def test_answers_across_multiple_exp_versions_different_interactions(self): DCNL 'Similar to test_answers_across_multiple_exploration_versions except DCNL the exploration has changed interactions in the new versions. The DCNL aggregation job should not include answers corresponding to exploration DCNL versions which do not match the latest version\'s interaction ID.'
def test_param_spec_validation(self): DCNL 'Test validation of param specs.'
def test_param_change_validation(self): DCNL 'Test validation of parameter changes.'
def test_param_change_class(self): DCNL 'Test the ParamChange class.'
def __init__(self, obj_type): DCNL 'Initializes a ParamSpec object with the specified object type. DCNL Args: DCNL obj_type: unicode. The object type with which the parameter is DCNL initialized.'
def to_dict(self): DCNL 'Returns a dict representation of this ParamSpec. DCNL Returns: DCNL dict. A dict with a single key, whose value is the type DCNL of the parameter represented by this ParamSpec.'
@classmethod DCNL def from_dict(cls, param_spec_dict): DCNL 'Creates a ParamSpec object from its dict representation. DCNL Args: DCNL param_spec_dict: dict. The dictionary containing the specification DCNL of the parameter. It contains the following key (object_type). DCNL `object_type` determines the data type of the parameter. DCNL Returns: DCNL ParamSpec. A ParamSpec object created from the specified DCNL object type.'
def validate(self): DCNL 'Validate the existence of the object class.'
def __init__(self, name, generator_id, customization_args): DCNL 'Initialize a ParamChange object with the specified arguments. DCNL Args: DCNL name: unicode. The name of the parameter. DCNL generator_id: unicode. The type of generator used to create the DCNL parameter, e.g., "Copier". DCNL customization_args: dict. A dict containing the following keys: DCNL (value, parse_with_jinja). `value` specifies the value of the DCNL parameter, and `parse_with_jinja` indicates whether parsing is DCNL to be done with the Jinja template engine. If the parameter is DCNL specified using one of several possible values, this dict DCNL contains a list (`list_of_values`) of possible values (instead DCNL of `value`).'
@property DCNL def name(self): DCNL 'The name of the changing parameter. DCNL Returns: DCNL unicode. The name of the parameter.'
@property DCNL def generator(self): DCNL 'The value generator used to define the new value of the DCNL changing parameter. DCNL Returns: DCNL subclass of BaseValueGenerator. The generator object for the DCNL parameter.'
@property DCNL def customization_args(self): DCNL 'A dict containing several arguments that determine the changing value DCNL of the parameter. DCNL Returns: DCNL dict: A dict specifying the following customization arguments for DCNL the parameter. In case of a parameter change to a single value, DCNL this dict contains the value of the parameter and a key-value DCNL pair specifying whether parsing is done using the Jinja template DCNL engine. If the parameter is changed to one amongst several values, DCNL this dict contains a list of possible values.'
@classmethod DCNL def from_dict(cls, param_change_dict): DCNL 'Create a ParamChange object with the specified arguments. DCNL Args: DCNL param_change_dict: dict. A dict containing data about the DCNL following keys: (customization_args(dict), name, generator_id). DCNL `customization_args` is a dict with the following keys: DCNL (value, parse_with_jinja). `value` specifies the value of the DCNL parameter and `parse_with_jinja` indicates whether parsing DCNL change be performed using the Jinja template engine. If the DCNL parameter changed to one amongst several values, this dict DCNL contains a list of possible values. DCNL `name` is the name of the parameter. DCNL `generator_id` is the type of value generator used to DCNL generate the new value for the parameter. DCNL Returns: DCNL ParamChange. The ParamChange object created from the DCNL `param_change_dict` dict, which specifies the name, DCNL customization arguments and the generator used.'
def _get_value(self, context_params): DCNL 'Generates a single value for a parameter change.'
def get_normalized_value(self, obj_type, context_params): DCNL 'Generates a single normalized value for a parameter change.'
def validate(self): DCNL 'Checks that the properties of this ParamChange object are valid.'
@classmethod DCNL def get_all_gadget_types(cls): DCNL 'Get a list of all gadget types.'
@classmethod DCNL def get_all_gadgets(cls): DCNL 'Get a list of instances of all gadgets.'
@classmethod DCNL def get_gadget_by_type(cls, gadget_type): DCNL 'Gets a gadget by its id. DCNL Refreshes once if the gadget is not found; subsequently, throws a DCNL KeyError.'
@classmethod DCNL def get_gadget_html(cls, gadget_types): DCNL 'Returns the HTML bodies for the given list of gadget types.'
@classmethod DCNL def get_deduplicated_dependency_ids(cls, gadget_types): DCNL 'Return a list of dependency ids for the given gadgets. DCNL Each entry of the resulting list is unique. The list is sorted in no DCNL particular order.'
@classmethod DCNL def get_all_specs(cls): DCNL 'Returns a dict containing the full specs of each gadget.'
def test_sending_email_with_different_recipient_but_same_hash(self): DCNL 'Hash for both messages is same but recipients are different'
def test_sending_email_with_different_subject_but_same_hash(self): DCNL 'Hash for both messages is same but subjects are different'
def test_sending_email_with_different_body_but_same_hash(self): DCNL 'Hash for both messages is same but body is different'
def test_migration_job_does_not_convert_up_to_date_collection(self): DCNL 'Tests that the collection migration job does not convert an DCNL collection that is already the latest collection content schema version.'
def test_migration_job_skips_deleted_collection(self): DCNL 'Tests that the collection migration job skips deleted collection DCNL and does not attempt to migrate.'
def test_migrate_colections_failing_strict_validation(self): DCNL 'Tests that the collection migration job migrates collections which DCNL do not pass strict validation.'
def test_migration_job_migrates_collection_nodes(self): DCNL 'Tests that the collection migration job migrates content from DCNL nodes to collection_contents if collection_contents is empty.'
def test_dicts_have_same_keys(self): DCNL 'Test that PARENT_ROLES and ROLE_ACTIONS have same keys.'
def test_dicts_have_list_value(self): DCNL 'Test that PARENT_ROLES and ROLE_ACTIONS, both have list as value DCNL to all the keys.'
def test_every_dict_entry_is_string(self): DCNL 'Test that all keys and values(elements in lists) in PARENT_ROLES DCNL and ROLE_ACTIONS are string.'
def test_valid_parents(self): DCNL 'Test that all the roles present in value list for any key in DCNL PARENT_ROLES are valid(i.e there exists a key with that name).'
def test_that_role_graph_has_no_directed_cycles(self): DCNL 'Visits each role and checks that there is no cycle from that DCNL role.'
def test_get_all_actions(self): DCNL 'Test that get_all_actions works as expected.'
def __init__(self, change_dict): DCNL 'Initializes an CollectionChange object from a dict. DCNL Args: DCNL change_dict: dict. Represents a command. It should have a \'cmd\' DCNL key, and one or more other keys. The keys depend on what the DCNL value for \'cmd\' is. The possible values for \'cmd\' are listed DCNL below, together with the other keys in the dict: DCNL - \'add_collection_node\' (with exploration_id) DCNL - \'delete_collection_node\' (with exploration_id) DCNL - \'edit_collection_node_property\' (with exploration_id, DCNL property_name, new_value and, optionally, old_value) DCNL - \'edit_collection_property\' (with property_name, new_value DCNL and, optionally, old_value) DCNL - \'migrate_schema\' (with from_version and to_version) DCNL For a collection node, property_name must be one of DCNL COLLECTION_NODE_PROPERTIES. For a collection, property_name must be DCNL one of COLLECTION_PROPERTIES. DCNL Raises: DCNL Exception: The given change_dict is not valid.'
def __init__(self, created_on, last_updated, user_id, username, collection_id, commit_type, commit_message, commit_cmds, version, post_commit_status, post_commit_community_owned, post_commit_is_private): DCNL 'Initializes a CollectionCommitLogEntry domain object. DCNL Args: DCNL created_on: datetime.datetime. Date and time when the collection DCNL commits was created. DCNL last_updated: datetime.datetime. Date and time when the collection DCNL commits was last updated. DCNL user_id: str. User id of the user who has made the commit. DCNL username: str. Username of the user who has made the commit. DCNL collection_id: str. Id of the collection. DCNL commit_type: str. The type of commit. DCNL commit_message: str. A description of changes made to the DCNL collection. DCNL commit_cmds: list(dict). A list of change commands made to the DCNL given collection. DCNL version: int. The version of the collection. DCNL post_commit_status: str. The new collection status after the DCNL commit. DCNL post_commit_community_owned: bool. Whether the collection is DCNL community-owned after the edit event. DCNL post_commit_is_private: bool. Whether the collection is private DCNL after the edit event.'
def to_dict(self): DCNL 'Returns a dict representing this CollectionCommitLogEntry domain DCNL object. This omits created_on, user_id and (for now) commit_cmds. DCNL Returns: DCNL A dict, mapping all fields of CollectionCommitLogEntry instance, DCNL except created_on, user_id and (for now) commit_cmds field.'
def __init__(self, exploration_id, prerequisite_skill_ids, acquired_skill_ids): DCNL 'Initializes a CollectionNode domain object. DCNL Args: DCNL exploration_id: str. A valid ID of an exploration referenced by DCNL this node. DCNL prerequisite_skill_ids: list(str). A list of prerequisite skill ids. DCNL acquired_skill_ids: list(str). A list of acquired skill ids once the DCNL exploration is completed.'
def to_dict(self): DCNL 'Returns a dict representing this CollectionNode domain object. DCNL Returns: DCNL A dict, mapping all fields (exploration_id, prerequisite_skill_ids, DCNL acquired_skill_ids) of CollectionNode instance.'
@classmethod DCNL def from_dict(cls, node_dict): DCNL 'Return a CollectionNode domain object from a dict. DCNL Args: DCNL node_dict: dict. The dict representation of CollectionNode object. DCNL Returns: DCNL CollectionNode. The corresponding CollectionNode domain object.'
@property DCNL def skills(self): DCNL 'Returns a set of skill IDs. DCNL Returns: DCNL set(str). The union of the prerequisite and acquired skill IDs. DCNL Each skill is represented at most once.'
def update_prerequisite_skill_ids(self, prerequisite_skill_ids): DCNL 'Update the prerequise skill IDs. DCNL Args: DCNL prerequisite_skill_ids: list(str). The new list of prerequisite DCNL skill IDs to set.'
def update_acquired_skill_ids(self, acquired_skill_ids): DCNL 'Update the acquired skill IDs. DCNL Args: DCNL acquired_skill_ids: list(str). The new list of acquired skill IDs to DCNL set.'
def validate(self): DCNL 'Validates various properties of the collection node. DCNL Raises: DCNL ValidationError: One or more attributes of the collection node are DCNL invalid.'
@classmethod DCNL def create_default_node(cls, exploration_id): DCNL 'Returns a CollectionNode domain object with default values. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL CollectionNode. The CollectionNode domain object with default DCNL value. The prerequisite and acquired skill ids lists are empty.'
def __init__(self, skill_id, name, question_ids): DCNL 'Constructs a new CollectionSkill object. DCNL Args: DCNL skill_id: str. the skill ID. DCNL name: str. the displayed name of the skill. DCNL question_ids: list(str). The list of question IDs DCNL associated with the skill.'
def validate(self): DCNL 'Validates various properties of collection skill.'
def __init__(self, collection_id, title, category, objective, language_code, tags, schema_version, nodes, skills, next_skill_id, version, created_on=None, last_updated=None): DCNL 'Constructs a new collection given all the information necessary to DCNL represent a collection. DCNL Note: The schema_version represents the version of any underlying DCNL dictionary or list structures stored within the collection. In DCNL particular, the schema for CollectionNodes is represented by this DCNL version. If the schema for CollectionNode changes, then a migration DCNL function will need to be added to this class to convert from the DCNL current schema version to the new one. This function should be called DCNL in both from_yaml in this class and DCNL collection_services._migrate_collection_contents_to_latest_schema. DCNL feconf.CURRENT_COLLECTION_SCHEMA_VERSION should be incremented and the DCNL new value should be saved in the collection after the migration DCNL process, ensuring it represents the latest schema version. DCNL Args: DCNL collection_id: str. The unique id of the collection. DCNL title: str. The title of the collection. DCNL category: str. The category of the collection. DCNL objective: str. The objective of the collection. DCNL language_code: str. The language code of the collection (like \'en\' DCNL for English). DCNL tags: list(str). The list of tags given to the collection. DCNL schema_version: int. The schema version for the collection. DCNL nodes: list(CollectionNode). The list of nodes present in the DCNL collection. DCNL version: int. The version of the collection. DCNL created_on: datetime.datetime. Date and time when the collection is DCNL created. DCNL last_updated: datetime.datetime. Date and time when the DCNL collection was last updated.'
def to_dict(self): DCNL 'Returns a dict representing this Collection domain object. DCNL Returns: DCNL A dict, mapping all fields of Collection instance.'
@classmethod DCNL def create_default_collection(cls, collection_id, title=feconf.DEFAULT_COLLECTION_TITLE, category=feconf.DEFAULT_COLLECTION_CATEGORY, objective=feconf.DEFAULT_COLLECTION_OBJECTIVE, language_code=constants.DEFAULT_LANGUAGE_CODE): DCNL 'Returns a Collection domain object with default values. DCNL Args: DCNL collection_id: str. The unique id of the collection. DCNL title: str. The title of the collection. DCNL category: str. The category of the collection. DCNL objective: str. The objective of the collection. DCNL language_code: str. The language code of the collection (like \'en\' DCNL for English). DCNL Returns: DCNL Collection. The Collection domain object with the default DCNL values.'
@classmethod DCNL def from_dict(cls, collection_dict, collection_version=0, collection_created_on=None, collection_last_updated=None): DCNL 'Return a Collection domain object from a dict. DCNL Args: DCNL collection_dict: dict. The dictionary representation of  the DCNL collection. DCNL collection_version: int. The version of the collection. DCNL collection_created_on: datetime.datetime. Date and time when the DCNL collection is created. DCNL collection_last_updated: datetime.datetime. Date and time when DCNL the collection is updated last time. DCNL Returns: DCNL Collection. The corresponding Collection domain object.'
def to_yaml(self): DCNL 'Convert the Collection domain object into YAML. DCNL Returns: DCNL str. The YAML representation of this Collection.'
@classmethod DCNL def _convert_v1_dict_to_v2_dict(cls, collection_dict): DCNL 'Converts a v1 collection dict into a v2 collection dict. DCNL Adds a language code, and tags. DCNL Args: DCNL collection_dict: dict. The dict representation of a collection with DCNL schema version v1. DCNL Returns: DCNL dict. The dict representation of the Collection domain object, DCNL following schema version v2.'
@classmethod DCNL def _convert_v2_dict_to_v3_dict(cls, collection_dict): DCNL 'Converts a v2 collection dict into a v3 collection dict. DCNL This function does nothing as the collection structure is changed in DCNL collection_services.get_collection_from_model. DCNL Args: DCNL collection_dict: dict. The dict representation of a collection with DCNL schema version v2. DCNL Returns: DCNL dict. The dict representation of the Collection domain object, DCNL following schema version v3.'
@classmethod DCNL def _convert_v3_dict_to_v4_dict(cls, collection_dict): DCNL 'Converts a v3 collection dict into a v4 collection dict. DCNL This migrates the structure of skills, see the docstring in DCNL _convert_collection_contents_v3_dict_to_v4_dict.'
@classmethod DCNL def _migrate_to_latest_yaml_version(cls, yaml_content): DCNL 'Return the YAML content of the collection in the latest schema DCNL format. DCNL Args: DCNL yaml_content: str. The YAML representation of the collection. DCNL Returns: DCNL str. The YAML representation of the collection, in the latest DCNL schema format. DCNL Raises: DCNL Exception: \'yaml_content\' or the collection schema version is not DCNL valid.'
@classmethod DCNL def from_yaml(cls, collection_id, yaml_content): DCNL 'Converts a YAML string to a Collection domain object. DCNL Args: DCNL collection_id: str. The id of the collection. DCNL yaml_content: str. The YAML representation of the collection. DCNL Returns: DCNL Collection. The corresponding collection domain object.'
@classmethod DCNL def _convert_collection_contents_v1_dict_to_v2_dict(cls, collection_contents): DCNL 'Converts from version 1 to 2. Does nothing since this migration only DCNL changes the language code. DCNL Args: DCNL collection_contents: Collection. The Collection domain object to DCNL convert. DCNL Returns: DCNL Collection. The new Collection domain object.'
@classmethod DCNL def _convert_collection_contents_v2_dict_to_v3_dict(cls, collection_contents): DCNL 'Converts from version 2 to 3. Does nothing since the changes are DCNL handled while loading the collection. DCNL Args: DCNL collection_contents: Collection. The Collection domain object to DCNL convert. DCNL Returns: DCNL Collection. The new Collection domain object.'
@classmethod DCNL def _convert_collection_contents_v3_dict_to_v4_dict(cls, collection_contents): DCNL 'Converts from version 3 to 4. DCNL Adds a skills dict and skill id counter. Migrates prerequisite_skills DCNL and acquired_skills to prerequistite_skill_ids and acquired_skill_ids. DCNL Then, gets skills in prerequisite_skill_ids and acquired_skill_ids in DCNL nodes, and assigns them integer IDs.'
@classmethod DCNL def update_collection_contents_from_model(cls, versioned_collection_contents, current_version): DCNL 'Converts the states blob contained in the given DCNL versioned_collection_contents dict from current_version to DCNL current_version + 1. Note that the versioned_collection_contents being DCNL passed in is modified in-place. DCNL Args: DCNL versioned_collection_contents: dict. A dict with two keys: DCNL - schema_version: str. The schema version for the collection. DCNL - collection_contents: dict. The dict comprising the collection DCNL contents. DCNL current_version: int. The current collection schema version. DCNL Raises: DCNL Exception: The value of the key \'schema_version\' in DCNL versioned_collection_contents is not valid.'
@property DCNL def exploration_ids(self): DCNL 'Returns a list of all the exploration IDs that are part of this DCNL collection. DCNL Returns: DCNL list(str). List of exploration IDs.'
@property DCNL def init_exploration_ids(self): DCNL 'Returns a list of exploration IDs that are starting points for this DCNL collection (ie, they require no prior skills to complete). The order DCNL of these IDs is given by the order each respective exploration was DCNL added to the collection. DCNL Returns: DCNL list(str). List of exploration IDs.'
def get_next_exploration_ids(self, completed_exploration_ids): DCNL 'Returns a list of exploration IDs for which the prerequisite skills DCNL are satisfied. These are the next explorations to complete for a user. DCNL If the list returned is empty and the collection is valid, then all DCNL skills have been acquired and the collection is completed. If the input DCNL list is empty, then only explorations with no prerequisite skills are DCNL returned. The order of the exploration IDs is given by the order in DCNL which each exploration was added to the collection. DCNL Args: DCNL completed_exploration_ids: list(str). List of completed exploration DCNL ids. DCNL Returns: DCNL list(str). A list of exploration IDs for which the prerequisite DCNL skills are satisfied.'
def get_next_exploration_ids_in_sequence(self, current_exploration_id): DCNL 'Returns a list of exploration IDs that a logged-out user should DCNL complete next based on the prerequisite skill ids they must have DCNL attained by the time they completed the current exploration. This DCNL recursively compiles a list of \'learned skills\' then, depending on DCNL the \'learned skills\' and the current exploration\'s acquired skill ids, DCNL returns either a list of exploration ids that have either just DCNL unlocked or the user is qualified to explore.  If neither of these DCNL lists can be generated a blank list is returned instead. DCNL Args: DCNL current_exploration_id: str. The id of exploration currently DCNL completed. DCNL Returns: DCNL list(str). List of exploration IDs that a logged-out user should DCNL complete next.'
@classmethod DCNL def is_demo_collection_id(cls, collection_id): DCNL 'Whether the collection id is that of a demo collection. DCNL Args: DCNL collection_id: str. The id of the collection. DCNL Returs: DCNL bool. True if the collection is a demo else False.'
@property DCNL def is_demo(self): DCNL 'Whether the collection is one of the demo collections. DCNL Returs: DCNL bool. True if the collection is a demo else False.'
def update_title(self, title): DCNL 'Updates the title of the collection. DCNL Args: DCNL title: str. The new title of the collection.'
def update_category(self, category): DCNL 'Updates the category of the collection. DCNL Args: DCNL category: str. The new category of the collection.'
def update_objective(self, objective): DCNL 'Updates the objective of the collection. DCNL Args: DCNL objective: str. The new objective of the collection.'
def update_language_code(self, language_code): DCNL 'Updates the language code of the collection. DCNL Args: DCNL language_code: str. The new language code of the collection.'
def update_tags(self, tags): DCNL 'Updates the tags of the collection. DCNL Args: DCNL tags: list(str). The new tags of the collection.'
def _find_node(self, exploration_id): DCNL 'Returns the index of the collection node with the given exploration DCNL id, or None if the exploration id is not in the nodes list. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL int or None. The index of the corresponding node, or None if there DCNL is no such node.'
def get_node(self, exploration_id): DCNL 'Retrieves a collection node from the collection based on an DCNL exploration ID. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL Returns: DCNL CollectionNode or None. If the list of nodes contains the given DCNL exploration then it will return the corresponding node, else None.'
def add_node(self, exploration_id): DCNL 'Adds a new node to the collection; the new node represents the given DCNL exploration_id. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL Raises: DCNL ValueError: The exploration is alredy part of the colletion.'
def delete_node(self, exploration_id): DCNL 'Deletes the node corresponding to the given exploration from the DCNL collection. DCNL Args: DCNL exploration_id: str. The id of the exploration. DCNL Raises: DCNL ValueError: The exploration is not part of the collection.'
def add_skill(self, skill_name): DCNL 'Adds the new skill domain object with the specified name.'
def update_skill(self, skill_id, new_skill_name): DCNL 'Renames skill with specified id to the new skill name.'
def delete_skill(self, skill_id): DCNL 'Deletes skill with specified id.'
def validate(self, strict=True): DCNL 'Validates all properties of this collection and its constituents. DCNL Raises: DCNL ValidationError: One or more attributes of the Collection are not DCNL valid.'
def __init__(self, collection_id, title, category, objective, language_code, tags, status, community_owned, owner_ids, editor_ids, viewer_ids, contributor_ids, contributors_summary, version, node_count, collection_model_created_on, collection_model_last_updated): DCNL 'Constructs a CollectionSummary domain object. DCNL Args: DCNL collection_id: str. The unique id of the collection. DCNL title: str. The title of the collection. DCNL category: str. The category of the collection. DCNL objective: str. The objective of the collection. DCNL language_code: str. The language code of the collection. DCNL tags: list(str). The tags given to the collection. DCNL status: str. The status of the collection. DCNL community_owned: bool. Whether the collection is community-owned. DCNL owner_ids: list(str). List of the user ids who are the owner of DCNL this collection. DCNL editor_ids: list(str). List of the user ids of the users who have DCNL access to edit this collection. DCNL viewer_ids: lsit(str). List of the user ids of the users who have DCNL view this collection. DCNL contributor_ids: list(str). List of the user ids of the user who DCNL have contributed to  this collection. DCNL contributors_summary: dict. The summary given by the contributors DCNL to the collection, user id as the key and summary as value. DCNL version: int. The version of the collection. DCNL node_count: int. The number of nodes present in the collection. DCNL collection_model_created_on: datetime.datetime. Date and time when DCNL the collection model is created. DCNL collection_model_last_updated: datetime.datetime. Date and time DCNL when the collection model was last updated.'
def to_dict(self): DCNL 'Returns a dict representing this CollectionSummary domain object. DCNL Returns: DCNL A dict, mapping all fields of CollectionSummary instance.'
def is_editable_by(self, user_id=None): DCNL 'Checks if a given user may edit the collection. DCNL Args: DCNL user_id: str. User id of the user. DCNL Returns: DCNL bool. Whether the given user may edit the collection.'
@classmethod DCNL def get_all_object_classes(cls): DCNL 'Get the dict of all object classes.'
@classmethod DCNL def get_object_class_by_type(cls, obj_type): DCNL 'Gets an object class by its type. Types are CamelCased. DCNL Refreshes once if the class is not found; subsequently, throws an DCNL error.'
def test_allowed_gadgets_and_counts(self): DCNL 'Do sanity checks on the ALLOWED_GADGETS dict in feconf.py.'
def test_get_all_specs(self): DCNL 'Test the get_all_specs() method.'
def test_visualization_registry(self): DCNL 'Sanity checks on the visualization registry.'
def test_get_full_html(self): DCNL 'Check that the visualization HTML contains templates and directives DCNL for all visualizations.'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Bob edits the title of EXP_ID_1. DCNL - (3) Albert creates EXP_ID_2. DCNL - (4) Albert edits the title of EXP_ID_1. DCNL - (5) Albert edits the title of EXP_ID_2. DCNL - (6) Bob reverts Albert\'s last edit to EXP_ID_1. DCNL - Bob tries to publish EXP_ID_2, and is denied access. DCNL - (7) Albert publishes EXP_ID_2. DCNL - (8) Albert creates EXP_ID_3 DCNL - (9) Albert publishes EXP_ID_3 DCNL - (10) Albert deletes EXP_ID_3 DCNL - (1) User_3 (has a profile_picture) creates EXP_ID_4. DCNL - (2) User_4 edits the title of EXP_ID_4. DCNL - (3) User_4 edits the title of EXP_ID_4.'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Admin logs in. DCNL - (2) Admin access admin page. DCNL - (3) Admin reloads exploration with id \'2\'. DCNL - (4) Admin logs out.'
def test_get_library_groups(self): DCNL 'The exploration with id \'2\' is an exploration in the Mathematics DCNL category. The call to get_library_groups() should return the DCNL exploration as part of the Mathematics & Statistics group.'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Albert creates EXP_ID_2. DCNL - (3) Albert publishes EXP_ID_1. DCNL - (4) Albert publishes EXP_ID_2. DCNL - (5) Admin user is set up.'
def test_for_featured_explorations(self): DCNL 'Note that both EXP_ID_1 and EXP_ID_2 are public. However, only DCNL EXP_ID_2 is featured, so the call to get_featured_explorations() should DCNL only return [EXP_ID_2].'
def test_language_code_filter(self): DCNL 'Note that both EXP_ID_1 is in Spanish and EXP_ID_2 is in English.'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Albert creates EXP_ID_2. DCNL - (3) Albert creates EXP_ID_3. DCNL - (4) Albert creates EXP_ID_4. DCNL - (5) Albert creates EXP_ID_5. DCNL - (6) Albert creates EXP_ID_6. DCNL - (7) Albert creates EXP_ID_7. DCNL - (8) Albert creates EXP_ID_8. DCNL - (9) Albert creates EXP_ID_9. DCNL - (10) Albert publishes EXP_ID_1. DCNL - (11) Albert publishes EXP_ID_2. DCNL - (12) Albert publishes EXP_ID_3. DCNL - (13) Albert publishes EXP_ID_4. DCNL - (14) Albert publishes EXP_ID_5. DCNL - (15) Albert publishes EXP_ID_6. DCNL - (16) Albert publishes EXP_ID_7. DCNL - (17) Albert publishes EXP_ID_8. DCNL - (18) Albert publishes EXP_ID_9. DCNL - (19) Admin user is set up.'
def test_at_most_eight_top_rated_explorations(self): DCNL 'Note that at most 8 explorations should be returned.'
def test_only_explorations_with_ratings_are_returned(self): DCNL 'Note that only explorations with ratings will be included'
def setUp(self): DCNL 'Populate the database of explorations and their summaries. DCNL The sequence of events is: DCNL - (1) Albert creates EXP_ID_1. DCNL - (2) Albert creates EXP_ID_2. DCNL - (3) Albert creates EXP_ID_3. DCNL - (4) Albert publishes EXP_ID_1. DCNL - (5) Albert publishes EXP_ID_2. DCNL - (6) Albert publishes EXP_ID_3. DCNL - (7) Admin user is set up.'
def test_for_recently_published_explorations(self): DCNL 'Tests for recently published explorations.'
def validate(self): DCNL 'Validates an ActivityRights object. DCNL Raises: DCNL utils.ValidationError: if any of the owners, editors and viewers DCNL lists overlap, or if a community-owned exploration has owners, DCNL editors or viewers specified.'
def to_dict(self): DCNL 'Returns a dict suitable for use by the frontend. DCNL Returns: DCNL dict. A dict version of ActivityRights suitable for use by the DCNL frontend.'
def is_owner(self, user_id): DCNL 'Checks whether given user is owner of activity. DCNL Args: DCNL user_id: str or None. Id of the user. DCNL Returns: DCNL bool. Whether user is in activity owners.'
def is_editor(self, user_id): DCNL 'Checks whether given user is editor of activity. DCNL Args: DCNL user_id: str or None. Id of the user. DCNL Returns: DCNL bool. Whether user is in activity editors.'
def is_viewer(self, user_id): DCNL 'Checks whether given user is viewer of activity. DCNL Args: DCNL user_id: str or None. Id of the user. DCNL Returns: DCNL bool. Whether user is in activity viewers of.'
def is_published(self): DCNL 'Checks whether activity is published. DCNL Args: DCNL activity_rights: object. Activity rights object. DCNL Returns: DCNL bool. Whether activity is published.'
def is_private(self): DCNL 'Checks whether activity is private. DCNL Returns: DCNL bool. Whether activity is private.'
def is_admin(self): DCNL 'Returns whether this user is an administrator. DCNL Returns: DCNL bool. Whether this user is an administrator.'
def is_moderator(self): DCNL 'Returns whether this user is a moderator. DCNL Returns: DCNL bool. Whether this user is a moderator.'
def is_owner(self, activity_type, activity_id): DCNL 'Returns whether this user is an owner of the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is an owner of the given activity.'
def has_editing_rights(self, activity_type, activity_id): DCNL 'Returns whether this user has editing rights for the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is in the owner/editor list for the given DCNL activity.'
def has_viewing_rights(self, activity_type, activity_id): DCNL 'Returns whether this user has viewing rights for the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to view the given activity.'
def can_play(self, activity_type, activity_id): DCNL 'Returns whether this user has rights to play the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to play the given activity.'
def can_view(self, activity_type, activity_id): DCNL 'Returns whether this user has rights to view the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to view the given activity.'
def can_edit(self, activity_type, activity_id): DCNL 'Returns whether this user has rights to edit the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to edit the given activity.'
def can_delete(self, activity_type, activity_id): DCNL 'Returns whether this user has rights to delete the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to delete the given activity.'
def can_change_private_viewability(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to change the viewability of DCNL the given private activity. DCNL The caller is responsible for ensuring that the given activity is DCNL private. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is allowed to change the viewability of DCNL the given private activity.'
def can_publish(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to publish the given activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is allowed to publish the given activity.'
def can_unpublish(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to unpublish the given DCNL activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is allowed to unpublish the given DCNL activity.'
def can_modify_roles(self, activity_type, activity_id): DCNL 'Returns whether this user has the right to modify roles for the given DCNL activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has the right to modify roles for the given DCNL activity.'
def can_release_ownership(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to release ownership of the DCNL given activity to the community. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user is allowed to release ownership of the DCNL given activity to the community.'
def can_publicize(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to publicize the given DCNL activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has a right to publicize the given activity.'
def can_unpublicize(self, activity_type, activity_id): DCNL 'Returns whether this user is allowed to unpublicize the given DCNL activity. DCNL Args: DCNL activity_type: str. The type of activity. Possible values: DCNL constants.ACTIVITY_TYPE_EXPLORATION DCNL constants.ACTIVITY_TYPE_COLLECTION DCNL activity_id: str. ID of the activity. DCNL Returns: DCNL bool. Whether the user has a right to unpublicize the given DCNL activity.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_null_case(self): DCNL 'Tests the case where user has no created or edited explorations.'
def test_created_exp(self): DCNL 'Tests the case where user has created (and therefore edited) DCNL an exploration.'
def test_edited_exp(self): DCNL 'Tests the case where user has an edited exploration.'
def test_for_duplicates(self): DCNL 'Tests the case where user has an edited exploration, and edits DCNL it again making sure it is not duplicated.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_null_case(self): DCNL 'Tests the case when there are no signed up users but there is one DCNL default user having the username - \'tmpsuperadm1n\'.'
def test_single_user_case(self): DCNL 'Tests the case when there is only one signed up user and a default DCNL user - \'tmpsuperadm1n\'.'
def test_multiple_users_case(self): DCNL 'Tests the case when there are multiple signed up users and a DCNL default user - \'tmpsuperadm1n\'.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_no_userbio_returns_empty_list(self): DCNL 'Tests the case when userbio is None.'
def test_short_userbio_returns_empty_list(self): DCNL 'Tests the case where the userbio is less than 500 characters.'
def test_long_userbio_length(self): DCNL 'Tests the case where the userbio is more than 500 characters.'
def test_same_userbio_length(self): DCNL 'Tests the case where two users have same userbio length.'
def test_diff_userbio_length(self): DCNL 'Tests the case where two users have different userbio lengths.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def _null_fn(self, *args, **kwargs): DCNL 'A mock for functions of the form subscribe_to_*() to represent DCNL behavior prior to the implementation of subscriptions.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_create_user_with_different_roles_and_run_migration_job(self): DCNL 'Tests the working of roles migration job. A sample set of users DCNL is created with varying roles. The migration job is run and resulted DCNL change in roles is tested against expected values.'
def __init__(self, activity_type, activity_id): DCNL 'Constructs an ActivityReference domain object. DCNL Args: DCNL activity_type: str. The activity type. DCNL activity_id: str. The activity id.'
def get_hash(self): DCNL 'Returns a unique string for this ActivityReference domain object.'
def validate(self): DCNL 'Checks that all fields of this ActivityReference domain object DCNL are valid. DCNL Raises: DCNL Exception: The activity type is invalid.'
def to_dict(self): DCNL 'Returns a dict representing this ActivityReference domain object. DCNL Returns: DCNL A dict, mapping type and id of a ActivityReference DCNL instance to corresponding keys \'type\' and \'id\'.'
@classmethod DCNL def _refresh(cls): DCNL 'Repopulate the registry.'
@classmethod DCNL def get_all_rte_components(cls): DCNL 'Get a list of instances of all custom RTE components.'
@classmethod DCNL def get_rte_component(cls, component_name): DCNL 'Get an instance of the given RTE component.'
@classmethod DCNL def get_tag_list_with_attrs(cls): DCNL 'Returns a dict of HTML tag names and attributes for RTE components. DCNL The keys are tag names starting with \'oppia-noninteractive-\', followed DCNL by the hyphenated version of the name of the RTE component. The values DCNL are lists of allowed attributes of the form DCNL [PARAM_NAME]-with-[CUSTOMIZATION_ARG_NAME].'
@classmethod DCNL def get_html_for_all_components(cls): DCNL 'Returns the HTML bodies for all custom RTE components.'
@classmethod DCNL def get_all_specs(cls): DCNL 'Returns a dict containing the full specs of each RTE component.'
@classmethod DCNL def _handle_incoming_event(cls, active_realtime_layer, event_type, *args): DCNL 'Records incoming events in the given realtime layer. DCNL Args: DCNL active_realtime_layer: int. Currently active realtime datastore DCNL layer. DCNL event_type: str. The event triggered by a student. For example, when DCNL a student starts an exploration, event of type `start` is DCNL triggered. If he/she completes an exploration, event of type DCNL `complete` is triggered. DCNL *args: Variable length argument list. The first element of *args DCNL corresponds to the id of the exploration currently being played.'
@classmethod DCNL def get_statistics(cls, exploration_id, exploration_version): DCNL 'Gets the statistics for the specified exploration and version. DCNL Args: DCNL exploration_id: str. The id of the exploration to get statistics DCNL for. DCNL exploration_version: str. Which version of the exploration to DCNL get statistics for. This can be a version number, the string DCNL \'all\', or the string \'none\'. DCNL Returns: DCNL dict. The keys of the dict are: DCNL \'start_exploration_count\': # of times exploration was started. DCNL \'complete_exploration_count\': # of times exploration was DCNL completed. DCNL \'state_hit_counts\': a dict containing the hit counts for the DCNL states in the exploration. It is formatted as follows: DCNL state_name: { DCNL \'first_entry_count\': # of sessions which hit DCNL this state. DCNL \'total_entry_count\': # of total hits for this DCNL state. DCNL \'no_answer_count\': # of hits with no answer for DCNL this state.'
@classmethod DCNL def get_views_multi(cls, exploration_ids): DCNL 'Generates the view counts for the given exploration IDs. DCNL Args: DCNL exploration_ids: list(str). The list of exploration IDs to get view DCNL counts for. DCNL Returns: DCNL list(int). The number of times each exploration in exploration_ids DCNL has been viewed.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function. Must be declared @staticmethod. DCNL Args: DCNL item: StartExplorationEventLogEntryModel or DCNL MaybeLeaveExplorationEventLogEntryModel or DCNL CompleteExplorationEventLogEntryModel or DCNL StateHitEventLogEntryModel or StateCounterModel. If item is of DCNL type StateCounterModel the information yielded corresponds to DCNL the various counts related to the exploration. If it is of any DCNL LogEntryModel type the information yielded corresponds to the DCNL type of the event and other details related to the exploration. DCNL Yields: DCNL tuple. 2-tuple in the form (\'exploration_id:version\', value). DCNL `exploration_id` corresponds to the id of the exploration. DCNL `version` corresponds to the version of the exploration. DCNL `value`: If item is of type StateCounterModel, the value DCNL yielded is: DCNL \'type\': \'counter\', DCNL \'exploration_id\': The ID of the exploration, DCNL \'version\': Version of the exploration, DCNL \'state_name\': Name of current state, DCNL \'first_entry_count\': Number of times the state was DCNL entered for the first time in a reader session, DCNL \'subsequent_entries_count\': Number of times the state DCNL was entered for the second time or later in a reader DCNL session, DCNL \'resolved_answer_count\': Number of times an answer DCNL submitted for this state was subsequently resolved DCNL by an exploration editor and removed from the answer DCNL logs, DCNL \'active_answer_count\': Number of times an answer was DCNL entered for this state and was not subsequently DCNL resolved by an exploration admin} DCNL If item is of LogEntryModel type, value yielded is: DCNL \'type\': \'event\', DCNL \'event_type\': Type of event triggered, DCNL \'session_id\': ID of current student\'s session, DCNL \'state_name\': Name of current state, DCNL \'created_on\': How many milliseconds ago the exploration DCNL was created, DCNL \'exploration_id\': The ID of the exploration, DCNL \'version\': Version of exploration}'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Updates statistics for the given (exploration, version) and list of DCNL events and creates batch model(ExplorationAnnotationsModel) for storing DCNL this output. DCNL Args: DCNL key: str. The exploration id and version of the exploration in the DCNL form \'exploration_id.version\'. DCNL stringified_values: list(str). A list of stringified values DCNL associated with the given key. It includes information depending DCNL on the type of event. If type of event is \'event\', DCNL an element of stringified_values would be: DCNL \'type\': \'event\', DCNL \'event_type\': Type of event triggered, DCNL \'session_id\': ID of current student\'s session, DCNL \'state_name\': Name of current state, DCNL \'created_on\': How many milliseconds ago the exploration was DCNL created, DCNL \'exploration_id\': The ID of the exploration, DCNL \'version\': Version of exploration}\' DCNL If type is \'counter\', then an element of stringified_values DCNL would be of the form: DCNL \'type\': \'counter\', DCNL \'exploration_id\': The ID of the exploration, DCNL \'version\': Version of the exploration, DCNL \'state_name\': Name of current state, DCNL \'first_entry_count\': Number of times the state was entered DCNL for the first time in a reader session, DCNL \'subsequent_entries_count\': Number of times the state was DCNL entered for the second time or later in a reader DCNL session, DCNL \'resolved_answer_count\': Number of times an answer DCNL submitted for this state was subsequently resolved by DCNL an exploration admin and removed from the answer logs, DCNL \'active_answer_count\': Number of times an answer was entered DCNL for this state and was not subsequently resolved by an DCNL exploration admin}\''
@classmethod DCNL def get_calc_output(cls, exploration_id, state_name, calculation_id, exploration_version=VERSION_ALL): DCNL 'Get state answers calculation output domain object obtained from DCNL StateAnswersCalcOutputModel instance stored in the data store. This DCNL aggregator does not have a real-time layer, which means the results DCNL from this function may be out of date. The calculation ID comes from DCNL the name of the calculation class used to compute aggregate data from DCNL submitted user answers. DCNL If \'exploration_version\' is VERSION_ALL, this will return aggregated DCNL output for all versions of the specified state and exploration.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function. Must be declared @staticmethod. DCNL Args: DCNL item: ExplorationAnnotationsModel or DCNL StateCounterModel. DCNL Yields: DCNL tuple. For StateCounterModel, a 2-tuple in the form DCNL (_STATE_COUNTER_ERROR_KEY, error message). DCNL tuple. For ExplorationAnnotationModel, a 2-tuple in the form DCNL (\'exploration_id\', value). DCNL \'exploration_id\': str. the id of the exploration. DCNL \'value\': a dict, whose structure is as follows: DCNL \'version\': str. version of the exploration. DCNL \'starts\': int. # of times exploration was started. DCNL \'completions\': int. # of times exploration was DCNL completed. DCNL \'state_hit\': a dict containing the hit counts for the DCNL states in the exploration. It is formatted as DCNL follows: DCNL state_name: { DCNL \'first_entry_count\': int. # of sessions DCNL which hit this state. DCNL \'total_entry_count\': int. # of total hits DCNL for this state. DCNL \'no_answer_count\': int. # of hits with no DCNL answer for this state.'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Updates statistics for the given exploration. DCNL Args: DCNL key: str. The id of the exploration. DCNL stringified_values: list(str). A list of stringified values DCNL associated with the given key. An element of stringified_values DCNL would be of the form: DCNL \'version\': str. version of the exploration. DCNL \'starts\': int. # of times exploration was started. DCNL \'completions\': int. # of times exploration was DCNL completed. DCNL \'state_hit\': dict. a dict containing the hit counts DCNL for the states in the exploration. It is formatted DCNL as follows: DCNL state_name: { DCNL \'first_entry_count\': int. # of sessions DCNL which hit this state. DCNL \'total_entry_count\': int. # of total DCNL hits for this state. DCNL \'no_answer_count\': int. # of hits with DCNL no answer for this state. DCNL Yields: DCNL tuple(str). A 1-tuple whose only element is an error message.'
@classmethod DCNL def _handle_incoming_event(cls, active_realtime_layer, event_type, *args): DCNL 'Records thread analytics in the given realtime layer. DCNL Args: DCNL active_realtime_layer: int. The currently active realtime DCNL datastore layer. DCNL event_type: str. The event triggered by the student. DCNL *args: Variable length argument list. The first element of *args DCNL corresponds to the id of the exploration currently being DCNL played.'
@classmethod DCNL def get_thread_analytics_multi(cls, exploration_ids): DCNL 'Gets the thread analytics for the explorations specified by the DCNL exploration_ids. DCNL Args: DCNL exploration_ids: list(str). IDs of the explorations to get DCNL analytics for. DCNL Returns: DCNL list(dict). Each dict in this list corresponds to an DCNL exploration ID in the input list, and has two keys: DCNL - num_open_threads: int. The count of open feedback threads DCNL for this exploration. DCNL - num_total_threads: int. The count of all feedback threads DCNL for this exploration.'
@classmethod DCNL def get_thread_analytics(cls, exploration_id): DCNL 'Retrieves the analytics for feedback threads. DCNL Args: DCNL exploration_id: str. ID of exploration to get statistics for. DCNL Returns: DCNL dict with two keys: DCNL - num_open_threads: int. The count of open feedback threads for DCNL this exploration. DCNL - num_total_threads: int. The count of all feedback DCNL threads for this exploration.'
@staticmethod DCNL def map(item): DCNL 'Map function. DCNL Args: DCNL item: FeedbackThreadModel. A feedback thread model instance. DCNL Yields: DCNL A tuple of two elements: DCNL - str. The exploration id associated to the feedback thread. DCNL - str. The feedback thread\'s status.'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Reduce function. DCNL Args: DCNL key: str. The exploration ID. DCNL stringified_values: list(str). List of all statuses from all DCNL mappers tagged with the given key.'
def test_all_exps_publicized(self): DCNL 'Test exploration summary batch job if all explorations are DCNL publicized.'
def test_all_exps_public(self): DCNL 'Test summary batch job if all explorations are public DCNL but not publicized.'
def test_exps_some_publicized(self): DCNL 'Test summary batch job if some explorations are publicized.'
def _run_batch_job_once_and_verify_output(self, exp_specs, default_title='A DCSP title', default_category='A DCSP category', default_status=rights_manager.ACTIVITY_STATUS_PUBLICIZED): DCNL 'Run batch job for creating exploration summaries once and verify its DCNL output. exp_specs is a list of dicts with exploration specifications. DCNL Allowed keys are category, status, title. If a key is not specified, DCNL the default value is used.'
def test_first_published_time_of_exploration_that_is_unpublished(self): DCNL 'This tests that, if an exploration is published, unpublished, and DCNL then published again, the job uses the first publication time as the DCNL value for first_published_msec.'
def test_contributors_for_valid_contribution(self): DCNL 'Test that if only one commit is made, that the contributor DCNL list consists of that contributor\'s user id.'
def test_repeat_contributors(self): DCNL 'Test that if the same user makes more than one commit that changes DCNL the content of an exploration, the user is only represented once in the DCNL list of contributors for that exploration.'
def test_contributors_with_only_reverts_not_counted(self): DCNL 'Test that contributors who have only done reverts do not DCNL have their user id appear in the contributor list.'
def test_nonhuman_committers_not_counted(self): DCNL 'Test that only human committers are counted as contributors.'
def test_contributors_for_valid_nonrevert_contribution(self): DCNL 'Test that if only non-revert commits are made by DCNL contributor then the contributions summary shows same DCNL exact number of commits for that contributor\'s ID'
def test_contributors_with_only_reverts_not_included(self): DCNL 'Test that if only reverts are made by contributor then the DCNL contributions summary shouldn’t contain that contributor’s ID'
def test_reverts_not_counted(self): DCNL 'Test that if both non-revert commits and revert are DCNL made by contributor then the contributions summary shows DCNL only non-revert commits for that contributor. However, DCNL the commits made after the version to which we have reverted DCNL shouldn\'t be counted either.'
def test_nonhuman_committers_not_counted(self): DCNL 'Test that only human committers are counted as contributors.'
def test_migration_job_does_not_convert_up_to_date_exp(self): DCNL 'Tests that the exploration migration job does not convert an DCNL exploration that is already the latest states schema version.'
def test_migration_job_does_not_have_validation_fail_on_default_exp(self): DCNL 'Tests that the exploration migration job does not have a validation DCNL failure for a default exploration (of states schema version 0), due to DCNL the exploration having a null interaction ID in its initial state.'
def test_migration_job_skips_deleted_explorations(self): DCNL 'Tests that the exploration migration job skips deleted explorations DCNL and does not attempt to migrate.'
def test_explorations_with_gadgets_are_listed(self): DCNL 'Tests that explorations with gadgets are listed.'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_message_count(self): DCNL 'Test if the job returns the correct message count.'
def setUp(self): DCNL 'Before each individual test, set up dummy explorations, users DCNL and admin.'
@classmethod DCNL def get_trigger(cls, trigger_type): DCNL 'Gets a trigger by its type. DCNL Refreshes once if the trigger is not found; subsequently, throws a DCNL KeyError.'
def __init__(self, full_thread_id, exploration_id, state_name, original_author_id, status, subject, summary, has_suggestion, message_count, created_on, last_updated): DCNL 'Initializes a FeedbackThread object.'
def get_thread_id(self): DCNL 'Returns the ID of the FeedbackThread instance. DCNL Returns: DCNL str. The ID of this FeedbackThread instance.'
def to_dict(self): DCNL 'Returns a dict representation of this FeedbackThread object. DCNL Returns: DCNL dict. A dict representation of the FeedbackThread object.'
@staticmethod DCNL def get_exp_id_from_full_thread_id(full_thread_id): DCNL 'Returns the ID of the exploration that the thread belongs to. DCNL Args: DCNL full_thread_id: str. The "full ID" of the feedback thread. (This is DCNL a concatenation of the exploration ID and the thread ID.) DCNL Returns: DCNL str. The ID of the associated exploration.'
@staticmethod DCNL def get_thread_id_from_full_thread_id(full_thread_id): DCNL 'Returns the ID of the feedback thread. DCNL Args: DCNL full_thread_id: str. The "full ID" of the feedback thread. (This is DCNL a concatenation of the exploration ID and the thread ID.) DCNL Returns: DCNL str. The ID of the feedback thread.'
def get_full_message_id(self, message_id): DCNL 'Returns the full id of the message. DCNL Args: DCNL message_id: int. The id of the message for which we have to fetch DCNL the complete message id. DCNL Returns: DCNL str. The full id corresponding to the given message id.'
def get_last_two_message_ids(self): DCNL 'Returns the full message ids of the last two messages of the thread. DCNL If the thread has only one message, the id of the second last message is DCNL None. DCNL Returns: DCNL list(str|None). The ids of the last two messages of the thread. If DCNL the message does not exist, None is returned.'
@property DCNL def exploration_id(self): DCNL 'Returns the exploration ID corresponding to this FeedbackMessage DCNL instance. DCNL Returns: DCNL str. The exploration_id.'
def to_dict(self): DCNL 'Returns a dict representation of this FeedbackMessage object. DCNL Returns: DCNL dict. Dict representation of the FeedbackMessage object.'
def __init__(self, exploration_id, num_open_threads, num_total_threads): DCNL 'Initializes a FeedbackAnalytics object.'
def to_dict(self): DCNL 'Returns the numbers of threads in the FeedbackAnalytics object. DCNL Attributes: DCNL dict. Dict representation of the numbers of threads in the DCNL FeedbackAnalytics object.'
def __init__(self, full_thread_id, author_id, exploration_id, exploration_version, state_name, description, suggestion_html): DCNL 'Initializes a Suggestion object.'
def get_author_name(self): DCNL 'Returns the author\'s username. DCNL Returns: DCNL str. The username of the author of the suggestion.'
def to_dict(self): DCNL 'Returns a dict representation of the Suggestion object. DCNL Returns: DCNL dict. Dict representation of the Suggestion object.'
def __init__(self, exploration_id, thread_id, message_id): DCNL 'Initializes FeedbackMessageReference object.'
def to_dict(self): DCNL 'Returns dict representation of the FeedbackMessageReference object. DCNL Returns: DCNL dict. Dict representation of the FeedbackMessageReference object.'
@classmethod DCNL def get_full_html(cls): DCNL 'Returns the HTML bodies for all visualizations.'
@classmethod DCNL def get_visualization_class(cls, visualization_id): DCNL 'Gets a visualization class by its id (which is also its class name). DCNL The registry will refresh if the desired class is not found. If it\'s DCNL still not found after the refresh, this method will throw an error.'
@classmethod DCNL def get_all_visualization_ids(cls): DCNL 'Gets a visualization class by its id (which is also its class name).'
def _run_one_off_job(self): DCNL 'Runs the one-off MapReduce job.'
def test_feedback_ids(self): DCNL 'Test various conventions for thread and message ids.'
def test_create_events(self): DCNL 'Basic test that makes sure there are no exceptions thrown.'
@classmethod DCNL def get_calculation_by_id(cls, calculation_id): DCNL 'Gets a calculation instance by its id (which is also its class name). DCNL Refreshes once if the class is not found; subsequently, throws an DCNL error.'
def __init__(self, classifier_id, exp_id, exp_version_when_created, state_name, algorithm_id, classifier_data, data_schema_version): DCNL 'Constructs a ClassifierData domain object. DCNL Args: DCNL classifier_id: str. The unique id of the classifier. DCNL exp_id: str. The exploration id to which the classifier belongs. DCNL exp_version_when_created: int. The version of the exploration when DCNL this classification model was created. DCNL state_name: str. The name of the state to which the classifier DCNL belongs. DCNL algorithm_id: str. The id of the algorithm used for generating DCNL classifier. DCNL classifier_data: dict. The actual classifier model used for DCNL classification purpose. DCNL data_schema_version: int. Schema version of the DCNL data used by the classifier.'
def to_dict(self): DCNL 'Constructs a dict representation of ClassifierData domain object. DCNL Returns: DCNL A dict representation of ClassifierData domain object.'
def validate(self): DCNL 'Validates the classifier before it is saved to storage.'
def __init__(self, job_id, algorithm_id, interaction_id, exp_id, exp_version, state_name, status, training_data): DCNL 'Constructs a ClassifierTrainingJob domain object. DCNL Args: DCNL job_id: str. The unique id of the classifier training job. DCNL algorithm_id: str. The id of the algorithm that will be used for DCNL generating the classifier. DCNL interaction_id: str. The id of the interaction to which the algorithm DCNL belongs. DCNL exp_id: str. The id of the exploration id that contains the state DCNL for which classifier will be generated. DCNL exp_version: str. The version of the exploration when DCNL the training job was generated. DCNL state_name: str. The name of the state for which the classifier will be DCNL generated. DCNL status: str. The status of the training job request. This can be either DCNL NEW (default), PENDING (when a job has been picked up) or COMPLETE. DCNL training_data: list. The training data that is used for training the DCNL classifier. This is populated lazily when the job request is picked DCNL up by the VM. The list contains dicts where each dict DCNL represents a single training data group, for example: DCNL training_data = [ DCNL \'answer_group_index\': 1, DCNL \'answers\': [\'a1\', \'a2\'] DCNL \'answer_group_index\': 2, DCNL \'answers\': [\'a2\', \'a3\']'
def update_status(self, status): DCNL 'Updates the status attribute of the ClassifierTrainingJob domain DCNL object. DCNL Args: DCNL status: str. The status of the classifier training job.'
def to_dict(self): DCNL 'Constructs a dict representation of training job domain object. DCNL Returns: DCNL A dict representation of training job domain object.'
def validate(self): DCNL 'Validates the training job before it is saved to storage.'
def __init__(self, exp_id, exp_version, state_name, job_id): DCNL 'Constructs a TrainingJobExplorationMapping domain object. DCNL Args: DCNL exp_id: str. ID of the exploration. DCNL exp_version: int. The exploration version at the time the DCNL corresponding classifier\'s training job was created. DCNL state_name: str. The name of the state to which the classifier DCNL belongs. DCNL job_id: str. The unique ID of the training job.'
def to_dict(self): DCNL 'Constructs a dict representation of TrainingJobExplorationMapping DCNL domain object. DCNL Returns: DCNL A dict representation of TrainingJobExplorationMapping domain DCNL object.'
def validate(self): DCNL 'Validates the mapping before it is saved to storage.'
def test_rating_assignation(self): DCNL 'Check ratings are correctly assigned to an exploration'
def test_time_of_ratings_recorded(self): DCNL 'Check that the time a rating is given is recorded correctly.'
def test_rating_assignations_do_not_conflict(self): DCNL 'Check that ratings of different explorations are independant.'
@classmethod DCNL def get_recent_notifications(cls, user_id): DCNL 'Gets a list of recent notifications to show on the user\'s DCNL dashboard. DCNL Args: DCNL user_id: str. The unique ID of the user. DCNL Returns: DCNL tuple(float, list(dict)). A 2-tuple with following entries: DCNL - float. The time, in milliseconds since the Epoch, when the job was DCNL queued. DCNL - list(dict). A list of recent updates to explorations and feedback DCNL threads; Each entry in the list is a dict with keys: DCNL - \'type\': str. Either feconf.UPDATE_TYPE_EXPLORATION_COMMIT or DCNL feconf.UPDATE_TYPE_FEEDBACK_MESSAGE. DCNL - \'activity_id\': str. The ID of the exploration being committed DCNL to or to which the feedback thread belongs. DCNL - \'activity_title\': str. The title of the activity. DCNL - \'last_updated_ms\': float. The time when the update was made, DCNL in milliseconds since the Epoch. DCNL - \'author_id\': str. The ID of the author who made the update. DCNL - \'subject\': str. A brief description of the notification.'
@staticmethod DCNL def _get_most_recent_activity_commits(activity_model_cls, activity_ids_list, activity_type, commit_type, delete_commit_message): DCNL 'Gets and returns a list of dicts representing the most recent DCNL commits made for each activity represented by each ID provided in the DCNL activity_ids_list parameter. These are the latest commits made by users DCNL to each activity (that is, it will skip over any automated commits such DCNL as those from the Oppia migration bot). DCNL Args: DCNL activity_model_cls: The storage layer object for an activity, such DCNL as exp_models.ExplorationModel. DCNL activity_ids_list: A list of activity IDs (such as exploration IDS) DCNL for which the latest commits will be retrieved. DCNL activity_type: str. The type of activity being referenced, such DCNL as \'exploration\' or \'collection\'. DCNL commit_type: str. This represents the activity update commit DCNL type, such as feconf.UPDATE_TYPE_EXPLORATION_COMMIT. DCNL delete_commit_message: str. This represents the commit message DCNL to use when an activity is found to be deleted, such as DCNL feconf.COMMIT_MESSAGE_EXPLORATION_DELETED. DCNL Returns: DCNL tuple(list(dict), list(ExplorationModel|CollectionModel)). A 2-tuple DCNL with following entries: DCNL - list(dict): A list, having information for every activity in DCNL activity_ids_list. Each dict in this list has the following DCNL keys: DCNL - \'type\': str. The value of the commit_type argument. DCNL - \'activity_id\': str. The ID of the activity for this DCNL commit. DCNL - \'activity_title\': str. The title of the activity. DCNL - \'author_id\': str. The ID of the author who made the DCNL commit. DCNL - \'last_update_ms\': float. The time when the commit was DCNL created, in milliseconds since Epoch. DCNL - \'subject\': str. The commit message, or (if the activity DCNL has been deleted) a message indicating that the activity DCNL was deleted. DCNL - list(ExplorationModel|CollectionModel): A list containing DCNL valid Exploration or Collection model instances which are DCNL mappable to feedback threads.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function (generator). DCNL Computes most recent activity commits and feedbacks of a specific user. DCNL Args: DCNL item: UserSubscriptionsModel. An instance of UserSubscriptionsModel. DCNL Yields: DCNL This function may yield as many times as appropriate (including DCNL zero) 2-tuples in the format (str, dict), where DCNL - str: A key of the form \'user_id@job_queued_msec\'. DCNL - dict: A dictionary with the following keys: DCNL - \'type\': str. Either feconf.UPDATE_TYPE_EXPLORATION_COMMIT DCNL or feconf.UPDATE_TYPE_FEEDBACK_MESSAGE. DCNL - \'activity_id\': str. The ID of the exploration being DCNL committed to or to which the feedback thread belongs. DCNL - \'activity_title\': str. The title of the activity. DCNL - \'last_updated_ms\': float. The time when the update was DCNL made, in milliseconds since the Epoch. DCNL - \'author_id\': str. The ID of the author who made the DCNL update. DCNL - \'subject\': str. A brief description of the recent updates.'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Implements the reduce function. DCNL This function updates an instance of UserRecentChangesBatchModel DCNL for a particular user, storing the most recent changes corresponding DCNL to things the user (for the given user_id) subscribes to. DCNL Args: DCNL key: str. Should be of the form \'user_id@job_queued_msec\'. DCNL stringified_values: list(str). A list of all recent_activity_commits DCNL and feedback_threads that are tagged with the given key. Each DCNL entry is a stringified dict having the following keys: DCNL - \'type\': str. Either feconf.UPDATE_TYPE_EXPLORATION_COMMIT or DCNL feconf.UPDATE_TYPE_FEEDBACK_MESSAGE. DCNL - \'activity_id\': str. The ID of the exploration being committed DCNL to or to which the feedback thread belongs. DCNL - \'activity_title\': str. The title of the activity. DCNL - \'last_updated_ms\': float. The time when the changes were made, DCNL in milliseconds since the Epoch. DCNL - \'author_id\': str. The ID of the author who made the changes. DCNL - \'subject\': str. The commit message or message indicating a DCNL feedback update.'
@classmethod DCNL def _handle_incoming_event(cls, active_realtime_layer, event_type, *args): DCNL 'Records incoming events in the given realtime layer. DCNL Args: DCNL active_realtime_layer: int. The currently active realtime datastore DCNL layer. DCNL event_type: str. The event triggered by a student. For example, when DCNL a student starts an exploration, an event of type `start` is DCNL triggered and the total play count is incremented. If he/she DCNL rates an exploration, an event of type `rate` is triggered and DCNL average rating of the realtime model is refreshed. DCNL *args: DCNL If event_type is \'start\', then this is a 1-element list with DCNL following entry: DCNL - str. The ID of the exploration currently being played. DCNL If event_type is \'rate_exploration\', then this is a 3-element DCNL list with following entries: DCNL - str. The ID of the exploration currently being played. DCNL - float. The rating given by user to the exploration. DCNL - float. The old rating of the exploration, before it is DCNL refreshed.'
@classmethod DCNL def get_dashboard_stats(cls, user_id): DCNL 'Args: DCNL user_id: str. The ID of the user. DCNL Returns a dict with the following keys: DCNL \'total_plays\': int. Number of times the user\'s explorations were DCNL played. DCNL \'num_ratings\': int. Number of times the explorations have been DCNL rated. DCNL \'average_ratings\': float. Average of average ratings across all DCNL explorations.'
@staticmethod DCNL def map(item): DCNL 'Implements the map function (generator). DCNL Computes exploration data for every contributor and owner of the DCNL exploration. DCNL Args: DCNL item: ExpSummaryModel. An instance of ExpSummaryModel. DCNL Yields: DCNL This function may yield as many times as appropriate 2-tuples in the DCNL format (str, dict), where DCNL - str. The unique ID of the user. DCNL - dict: A dict that includes entries for all the explorations that DCNL this user contributes to or owns. Each entry has the following DCNL keys: DCNL - \'exploration_impact_score\': float. The impact score of all the DCNL explorations contributed to by the user. DCNL - \'total_plays_for_owned_exp\': int. Total plays of all DCNL explorations owned by the user. DCNL - \'average_rating_for_owned_exp\': float. Average of average DCNL ratings of all explorations owned by the user. DCNL - \'num_ratings_for_owned_exp\': int. Total number of ratings of DCNL all explorations owned by the user.'
@staticmethod DCNL def reduce(key, stringified_values): DCNL 'Implements the reduce function. DCNL This function creates or updates the UserStatsModel instance for the DCNL given user. It updates the impact score, total plays of all DCNL explorations, number of ratings across all explorations and average DCNL rating. DCNL Args: DCNL key: str. The unique ID of the user. DCNL stringified_values: list(str). A list of information regarding all DCNL the explorations that this user contributes to or owns. Each DCNL entry is a stringified dict having the following keys: DCNL - \'exploration_impact_score\': float. The impact score of all the DCNL explorations contributed to by the user. DCNL - \'total_plays_for_owned_exp\': int. Total plays of all DCNL explorations owned by the user. DCNL - \'average_rating_for_owned_exp\': float. Average of average DCNL ratings of all explorations owned by the user. DCNL - \'num_ratings_for_owned_exp\': int. Total number of ratings of DCNL all explorations owned by the user.'
def test_validation(self): DCNL 'Test validation of explorations.'
def test_fallbacks_validation(self): DCNL 'Test validation of state fallbacks.'
def test_hints_validation(self): DCNL 'Test validation of state hints.'
def test_solution_validation(self): DCNL 'Test validation of state solution.'
def test_tag_validation(self): DCNL 'Test validation of exploration tags.'
def test_exploration_skin_and_gadget_validation(self): DCNL 'Test that Explorations including gadgets validate properly.'
def test_gadget_name_validation(self): DCNL 'Test that gadget naming conditions validate properly.'
def test_exploration_get_gadget_types(self): DCNL 'Test that Exploration.get_gadget_types returns apt results.'
def test_title_category_and_objective_validation(self): DCNL 'Test that titles, categories and objectives are validated only in DCNL \'strict\' mode.'
def test_audio_translation_validation(self): DCNL 'Test validation of audio translations.'
def test_subtitled_html_validation(self): DCNL 'Test validation of subtitled HTML.'
def test_get_state_names_mapping(self): DCNL 'Test the get_state_names_mapping() method.'
def test_get_trainable_states_dict(self): DCNL 'Test the get_trainable_states_dict() method.'
def test_is_demo_property(self): DCNL 'Test the is_demo property.'
def test_exploration_export_import(self): DCNL 'Test that to_dict and from_dict preserve all data within an DCNL exploration.'
def test_interaction_with_none_id_is_not_terminal(self): DCNL 'Test that an interaction with an id of None leads to is_terminal DCNL being false.'
def test_export_state_to_dict(self): DCNL 'Test exporting a state to a dict.'
def test_yaml_import_and_export(self): DCNL 'Test the from_yaml() and to_yaml() methods.'
def test_yaml_import_and_export_without_gadgets(self): DCNL 'Test from_yaml() and to_yaml() methods without gadgets.'
def test_yaml_import_and_export_with_gadgets(self): DCNL 'Test from_yaml() and to_yaml() methods including gadgets.'
def test_correct_states_schema_conversion_methods_exist(self): DCNL 'Test that the right states schema conversion methods exist.'
def test_correct_exploration_schema_conversion_methods_exist(self): DCNL 'Test that the right exploration schema conversion methods exist.'
def test_load_from_v1(self): DCNL 'Test direct loading from a v1 yaml file.'
def test_load_from_v2(self): DCNL 'Test direct loading from a v2 yaml file.'
def test_load_from_v3(self): DCNL 'Test direct loading from a v3 yaml file.'
def test_load_from_v4(self): DCNL 'Test direct loading from a v4 yaml file.'
def test_load_from_v5(self): DCNL 'Test direct loading from a v5 yaml file.'
def test_load_from_v6(self): DCNL 'Test direct loading from a v6 yaml file.'
def test_load_from_v7(self): DCNL 'Test direct loading from a v7 yaml file.'
def test_load_from_v8(self): DCNL 'Test direct loading from a v8 yaml file.'
def test_load_from_v9(self): DCNL 'Test direct loading from a v9 yaml file.'
def test_load_from_v10(self): DCNL 'Test direct loading from a v10 yaml file.'
def test_load_from_v11(self): DCNL 'Test direct loading from a v11 yaml file.'
def test_load_from_v12(self): DCNL 'Test direct loading from a v12 yaml file.'
def test_load_from_v13(self): DCNL 'Test direct loading from a v13 yaml file.'
def test_load_from_v14(self): DCNL 'Test direct loading from a v14 yaml file.'
def test_load_from_v15(self): DCNL 'Test direct loading from a v15 yaml file.'
def test_can_undergo_classification(self): DCNL 'Test the can_undergo_classification() function.'
def test_get_training_data(self): DCNL 'Test retrieval of training data.'
def test_delete_state(self): DCNL 'Test deletion of states.'
def test_state_operations(self): DCNL 'Test adding, updating and checking existence of states.'
def test_gadget_operations(self): DCNL 'Test deletion of gadgets.'
def test_get_state_names_required_by_gadgets(self): DCNL 'Test accurate computation of state_names_required_by_gadgets.'
def test_generation_of_get_default_skin_customizations(self): DCNL 'Tests that default skin customizations are created properly.'
def test_conversion_of_skin_to_and_from_dict(self): DCNL 'Tests conversion of SkinInstance to and from dict representations.'
def test_gadget_instantiation(self): DCNL 'Test instantiation of GadgetInstances.'
def test_gadget_instance_properties(self): DCNL 'Test accurate representation of gadget properties.'
def test_gadget_instance_validation(self): DCNL 'Test validation of GadgetInstance.'
def test_conversion_of_gadget_instance_to_and_from_dict(self): DCNL 'Test conversion of GadgetInstance to and from dict.'
def test_retrieving_affected_gadgets(self): DCNL 'Test that appropriate gadgets are retrieved.'
def test_js_string_filter(self): DCNL 'Test js_string filter.'
@acl_decorators.open_access DCNL def post(self): DCNL 'Records errors reported by the frontend.'
@acl_decorators.open_access DCNL def get(self): DCNL 'Handles GET warmup requests.'
def run(self): DCNL 'Runs all tests corresponding to the given test target.'
@staticmethod DCNL def normalize_spaces(obj): DCNL 'Collapses multiple spaces into single spaces. DCNL Args: DCNL obj: a string. DCNL Returns: DCNL a string that is the same as `obj`, except that each block of DCNL whitespace is collapsed into a single space character.'
@staticmethod DCNL def sanitize_url(obj): DCNL 'Takes a string representing a URL and sanitizes it. DCNL Args: DCNL obj: a string representing a URL. DCNL Returns: DCNL An empty string if the URL does not start with http:// or https://. DCNL Otherwise, returns the original URL.'
@staticmethod DCNL def has_length_at_least(obj, min_value): DCNL 'Returns True iff the given object (a list) has at least DCNL `min_value` elements.'
@staticmethod DCNL def has_length_at_most(obj, max_value): DCNL 'Returns True iff the given object (a list) has at most DCNL `max_value` elements.'
@staticmethod DCNL def is_nonempty(obj): DCNL 'Returns True iff the given object (a string) is nonempty.'
@staticmethod DCNL def is_uniquified(obj): DCNL 'Returns True iff the given object (a list) has no duplicates.'
@staticmethod DCNL def is_at_least(obj, min_value): DCNL 'Ensures that `obj` (an int/float) is at least `min_value`.'
@staticmethod DCNL def is_at_most(obj, max_value): DCNL 'Ensures that `obj` (an int/float) is at most `max_value`.'
@staticmethod DCNL def is_regex(obj): DCNL 'Ensures that `obj` (a string) defines a valid regex.'
@staticmethod DCNL def matches_regex(obj, regex): DCNL 'Ensures that `obj` (a string) matches the given regex.'
def __init__(self): DCNL 'Initializes constants for the classifier. DCNL This class uses index notation with the format "_V_XY", where V is the DCNL element of an array, and X and Y are the indices used to measure V. DCNL https://en.wikipedia.org/wiki/Index_notation DCNL The following maps index notation letters to their meanings: DCNL b - boolean value for whether Y is set in X DCNL c - count of Y\'s in X DCNL p - position of a value V in X DCNL l - label id DCNL w - word id DCNL d - doc id'
def _get_word_id(self, word): DCNL 'Returns a word\'s id if it exists, otherwise assigns DCNL a new id to the word and returns it.'
def _get_label_id(self, label): DCNL 'Returns a label\'s id if it exists, otherwise assigns DCNL a new id to the label and returns it.'
def _get_label_name(self, l): DCNL 'Returns a label\'s string name given its internal id. DCNL If the id does not have a corresponding name, an exception is DCNL raised.'
def _get_doc_with_label_vector(self, d): DCNL 'Given a doc id, return the doc and its label bit vector.'
def _get_label_vector(self, labels): DCNL 'Generate and return a label bit vector given a list of labels that DCNL are turned on for the vector.'
def _update_counting_matrices(self, d, w, l, val): DCNL 'Updates counting matrices (ones that begin with _c) when a label DCNL is assigned and unassigned to a word.'
def _increment_counting_matrices(self, d, w, l): DCNL 'Updates counting matrices when a label is assigned to a word DCNL instance in a doc.'
def _decrement_counting_matrices(self, d, w, l): DCNL 'Updates counting matrices when a label is unassigned from a word DCNL instance in a doc.'
def _run_gibbs_sampling(self, doc_ids): DCNL 'Runs one iteration of Gibbs sampling on the provided docs. DCNL The statez variable is used for debugging, and possibly convergence DCNL testing in the future.'
def _get_label_probabilities(self, d): DCNL 'Returns a list of label probabilities for a given doc, indexed by DCNL label id.'
def _get_prediction_report_for_doc(self, d): DCNL 'Generates and returns a prediction report for a given doc. DCNL The prediction report is a dict with the following keys: DCNL - \'prediction_label_id\': the document\'s predicted label id DCNL - \'prediction_label_name\': prediction_label_id\'s label name DCNL - \'prediction_confidence\': the prediction confidence. This is DCNL Prob(the doc should be assigned this label | DCNL the doc is not assigned DEFAULT_LABEL). DCNL - \'all_predictions\': a dict mapping each label to DCNL Prob(the doc should be assigned to this label). DCNL Because DEFAULT_LABEL is a special label that captures unspecial DCNL tokens (how ironic), its probability is not a good predicting DCNL indicator. For the current normalization process, it has on DCNL average a higher probability than other labels. To combat this, DCNL all other labels are normalized as if the default label did not DCNL exist. For example, if we have two labels with probability 0.2 DCNL and 0.3 with the default label having probability 0.5, the DCNL normalized probability for the two labels without the default DCNL label is 0.4 and 0.6, respectively. DCNL The prediction threshold is currently defined at the classifier level. DCNL A higher prediction threshold indicates that the predictor needs DCNL more confidence prior to making a prediction, otherwise it will DCNL predict DEFAULT_LABEL. This will make non-default predictions more DCNL accurate, but result in fewer of them.'
def _parse_examples(self, examples): DCNL 'Unzips docs and label lists from examples and returns the two lists. DCNL Docs are split on whitespace. Order is preserved.'
def _iterate_gibbs_sampling(self, iterations, doc_ids): DCNL 'Runs Gibbs sampling for "iterations" number of times on the provided DCNL docs.'
def _add_examples(self, examples, iterations): DCNL 'Adds examples to the internal state of the classifier, assigns DCNL random initial labels to only the added docs, and runs Gibbs sampling DCNL for iterations number of iterations.'
def add_examples_for_training(self, training_examples): DCNL 'Adds examples to the classifier with _training_iterations number of DCNL iterations. DCNL Args: DCNL training_examples: list of \'examples\'. Each example is represented DCNL by a 2-element list. The first item of the list is a str DCNL representing a doc, and the second item is a list of labels DCNL that the doc should be matched to. E.g.: DCNL training_examples = [ DCNL [\'i eat fish and vegetables\', [\'food\']], DCNL [\'fish are pets\', [\'pets\']], DCNL [\'my kitten eats fish\', [\'food\', \'pets\']] DCNL Returns: DCNL xrange. An iterator over the ids of the docs just added.'
def _add_docs_for_predicting(self, prediction_docs): DCNL 'Adds examples to the classifier with _prediction_iterations number DCNL of iterations. DCNL Args: DCNL prediction_examples: list of str. A list of docs. DCNL prediction_examples = [ DCNL \'i only eat fish and vegetables\' DCNL Returns: DCNL xrange. An iterator over the ids of the docs just added.'
def _predict_label_for_doc(self, sample): DCNL 'Returns the predicted label from a sample\'s prediction report. DCNL Args: DCNL sample: int. A doc id (see example in class docstring). DCNL Returns: DCNL str. The label predicted by the classifier for the given sample.'
def to_dict(self): DCNL 'Returns a dict representing this StringClassifier. DCNL Returns: DCNL dict. A representation of the state of the classifier.'
def from_dict(self, model): DCNL 'Initializes the properties of this classifier from a dict DCNL constructed using to_dict(). DCNL Args: DCNL model: A dict representing a StringClassifier.'
def train(self, training_data): DCNL 'Sets the internal state of the classifier, assigns random initial DCNL labels to the docs, and runs Gibbs sampling for _training_iterations DCNL number of iterations. DCNL Args: DCNL training_data: list of free form texts. Each item is represented DCNL by a 2-element list. The first item of the list is a str DCNL representing a sample, and the second item is a list of labels DCNL that the sample should be matched to. E.g.: [ DCNL [\'i eat fish and vegetables\', [\'food\']], DCNL [\'fish are pets\', [\'pets\']], DCNL [\'my kitten eats fish\', [\'food\', \'pets\']]'
def predict(self, predicting_data): DCNL 'Predicts what labels should be set to each sample in DCNL \'predicting_data\' DCNL Args: DCNL predicting_data: list(str). Each item represents a free form DCNL text input by user. DCNL Returns: DCNL list(prediction report). Each item is a prediction report DCNL for the corresponding sample.'
def validate(self, classifier_data): DCNL 'Validates cached classifier data. DCNL Args: DCNL classifier_data: dict. Consists of various parameter of the DCNL classifier.'
def test_predict_label_for_doc(self): DCNL 'This test ensures that the predictor is predicting the labels that DCNL are provided (in this case, \'food\', \'pets\', and the generic label DCNL \'_default\'). This test does not cover prediction accuracy, so DCNL _DEFAULT_MIN_DOCS_TO_PREDICT and _DEFAULT_MIN_LABELS_TO_PREDICT have DCNL been set to zero. This allows the predictor to predict on smaller data DCNL sets, which is useful for testing purposes. Setting the above constants DCNL to zero is not recommended in a serving system.'
def test_validate(self): DCNL 'Test to verify validate method of LDAStringClassifier.'
@property DCNL def preview_url_template(self): DCNL 'Returns a URL template which can be interpolated to a URL for the DCNL image that represents the component in the RTE. The interpolation DCNL dictionary used is the component\'s customization_args dict, extended DCNL with an additional \'explorationId\' key whose value corresponds to the DCNL id of the containing exploration.'
@property DCNL def html_body(self): DCNL 'The HTML code containing directives and templates for the component. DCNL This contains everything needed to display the component once the DCNL necessary attributes are supplied. For rich-text components, this DCNL consists of a single directive/template pair.'
def to_dict(self): DCNL 'Gets a dict representing this component. Only the default values for DCNL customization args are provided.'
def normalize_answer(self, answer): DCNL 'Normalizes a learner\'s input to this interaction.'
@property DCNL def rules_dict(self): DCNL 'A dict of rule names to rule properties.'
@property DCNL def html_body(self): DCNL 'The HTML code containing directives and templates for the DCNL interaction. This contains everything needed to display the interaction DCNL once the necessary attributes are supplied. DCNL Each interaction has two directive/template pairs, one for the DCNL interaction itself and the other for displaying the learner\'s response DCNL in a read-only view after it has been submitted.'
@property DCNL def validator_html(self): DCNL 'The HTML code containing validators for the interaction\'s DCNL customization_args and submission handler.'
def to_dict(self): DCNL 'Gets a dict representing this interaction. Only default values are DCNL provided.'
def get_rule_description(self, rule_name): DCNL 'Gets a rule description, given its name.'
def get_rule_param_list(self, rule_name): DCNL 'Gets the parameter list for a given rule.'
def get_rule_param_type(self, rule_name, rule_param_name): DCNL 'Gets the parameter type for a given rule parameter name.'
def test_rules_property(self): DCNL 'Test that answer normalization behaves as expected.'
def _is_camel_cased(self, name): DCNL 'Check whether a name is in CamelCase.'
def _is_alphanumeric_string(self, input_string): DCNL 'Check whether a string is alphanumeric.'
def _listdir_omit_ignored(self, directory): DCNL 'List all files and directories within \'directory\', omitting the ones DCNL whose name ends in one of the IGNORED_FILE_SUFFIXES.'
def test_interaction_properties(self): DCNL 'Test the standard properties of interactions.'
def test_default_interactions_are_valid(self): DCNL 'Test that the default interactions are valid.'
def test_trainable_interactions_have_more_than_just_a_classifier(self): DCNL 'This ensures that trainable interactions cannot only have a soft DCNL rule, as that would break frontend functionality (users would not be DCNL able to create manual answer groups).'
def test_linear_interactions(self): DCNL 'Sanity-check for the number of linear interactions.'
def test_linear_interaction_ids_list_matches_linear_interactions(self): DCNL 'Sanity-check the feconf constant which lists all linear interaction DCNL IDs.'
def generate_value(self, context_params, value, parse_with_jinja=False): DCNL 'Returns a copy of the input value. DCNL If parse_with_jinja is True, strings within the input value are treated DCNL as templates and parsed against context_params. The output will be a DCNL unicode string. DCNL If parse_with_jinja is False, the input value is copied and returned DCNL without changing its type.'
@classmethod DCNL def normalize(cls, raw): DCNL 'Validates and normalizes a raw Python object. DCNL Returns: DCNL a normalized Python object describing the Object specified by this DCNL class. DCNL Raises: DCNL TypeError: if the Python object cannot be normalized.'
@classmethod DCNL def normalize(cls, raw): DCNL 'Validates and normalizes a raw Python object.'
@classmethod DCNL def normalize(cls, raw): DCNL 'Validates and normalizes a raw Python object.'
@classmethod DCNL def normalize(cls, raw): DCNL 'Validates and normalizes a raw Python object.'
@classmethod DCNL def normalize(cls, raw): DCNL 'Validates and normalizes a raw Python object. DCNL Checks that there are no self-loops or multiple edges. DCNL Checks that unlabeled graphs have all labels empty. DCNL Checks that unweighted graphs have all weights set to 1. DCNL TODO(czx): Think about support for multigraphs?'
def check_normalization(self, cls, mappings, invalid_items): DCNL 'Test that values are normalized correctly. DCNL Args: DCNL cls: the class whose normalize() method is to be tested. DCNL mappings: a list of 2-element tuples. The first element of DCNL each item is expected to be normalized to the second. DCNL invalid_items: a list of values. Each of these is expected to raise DCNL a TypeError when normalized.'
def test_boolean_validation(self): DCNL 'Tests objects of type Boolean.'
def test_real_validation(self): DCNL 'Tests objects of type Real.'
def test_int_validation(self): DCNL 'Tests objects of type Int.'
def test_nonnegative_int_validation(self): DCNL 'Tests objects of type NonnegativeInt.'
def test_code_evaluation_validation(self): DCNL 'Tests objects of type codeEvaluation.'
def test_coord_two_dim_validation(self): DCNL 'Tests objects of type CoordTwoDim.'
def test_list_validation(self): DCNL 'Tests objects of type ListOfUnicodeString.'
def test_music_phrase(self): DCNL 'Tests objects of type MusicPhrase.'
def test_set_of_unicode_string_validation(self): DCNL 'Tests objects of type SetOfUnicodeString.'
def test_unicode_string_validation(self): DCNL 'Tests objects of type UnicodeString.'
def test_html_validation(self): DCNL 'Tests objects of type HTML.'
def test_normalized_string_validation(self): DCNL 'Tests objects of type NormalizedString.'
def test_math_latex_string_validation(self): DCNL 'Tests objects of type MathLatexString.'
def test_checked_proof_validation(self): DCNL 'Tests objects of type CheckedProof'
def test_logic_question_validation(self): DCNL 'Tests objects of type LogicQuestion'
def test_logic_error_category_validation(self): DCNL 'Tests objects of type LogicErrorCategory'
def test_graph(self): DCNL 'Tests objects of type Graph'
def test_graph_property_validation(self): DCNL 'Tests objects of type GraphProperty'
def test_set_of_html_string(self): DCNL 'Tests objects of the type StringList'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Perform calculation on a single StateAnswers entity. This is run DCNL in the context of a batch MapReduce job. DCNL This method must be overwritten in subclasses.'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Computes the number of occurrences of each answer, and returns a DCNL list of dicts; each dict has keys \'answer\' and \'frequency\'. DCNL This method is run from within the context of a MapReduce job.'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Computes the number of occurrences of each answer, keeping only DCNL the top 5 answers, and returns a list of dicts; each dict has keys DCNL \'answer\' and \'frequency\'. DCNL This method is run from within the context of a MapReduce job.'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Computes the number of occurrences of each answer, keeping only DCNL the top 10 answers, and returns a list of dicts; each dict has keys DCNL \'answer\' and \'frequency\'. DCNL This method is run from within the context of a MapReduce job.'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Computes the number of occurrences of each element across DCNL all given answers, keeping only the top 10 elements. Returns a DCNL list of dicts; each dict has keys \'element\' and \'frequency\'. DCNL This method is run from within the context of a MapReduce job.'
def calculate_from_state_answers_dict(self, state_answers_dict): DCNL 'Computes the number of occurrences of each answer, split into groups DCNL based on the number of classification categories. DCNL This method is run from within the context of a MapReduce job.'
def _create_sample_answers(self, repeated_answer, times_spent_in_card, session_ids, repeat_count): DCNL 'This is similar to _create_sample_answer, except it repeats a single DCNL answer N times. It reuses times_spent_in_card and session_ids DCNL cyclically as it constructs the list of sample answers.'
def test_answer_frequencies_calculation(self): DCNL 'For multiple choice interactions, test if the most common answers DCNL are calculated correctly for interaction answer views.'
def test_top5_answer_frequencies_calculation(self): DCNL 'Ensure the top 5 most frequent answers are submitted for TextInput.'
def test_top5_answer_frequencies_calculation_with_less_than_5_answers(self): DCNL 'Verify the top 5 answer frequencies calculation still works if only DCNL one answer is submitted.'
def test_top_answers_by_categorization(self): DCNL 'Test top answers are recorded based on both their frequency and DCNL classification categorization.'
def test_top_answers_by_categorization_ignores_invalid_category(self): DCNL 'The TopAnswersByCategorization calculation cannot use answers with DCNL unknown categorizations. It will throw an exception in these DCNL situations.'
def validate(self): DCNL 'Validates a visualization object. DCNL This is only used in tests for the validity of interactions.'
def validate_customization_arg_values(self, customization_args): DCNL 'Validates customization arg values. The input is a dict whose DCNL keys are the names of the customization args.'
@property DCNL def html_body(self): DCNL 'The HTML code containing directives and templates for the DCNL gadget. This contains everything needed to display the gadget DCNL once the necessary attributes are supplied.'
def validate(self, customization_args): DCNL 'Subclasses may override to perform additional validation.'
def to_dict(self): DCNL 'Gets a dict representing this gadget. Only default values are DCNL provided.'
def validate(self, customization_args): DCNL 'Ensure AdviceBar retains reasonable config.'
def _is_camel_cased(self, name): DCNL 'Check whether a name is in CamelCase.'
def _is_alphanumeric_string(self, input_string): DCNL 'Check whether a string is alphanumeric.'
def _listdir_omit_ignored(self, directory): DCNL 'List all files and directories within \'directory\', omitting the ones DCNL whose name ends in one of the IGNORED_FILE_SUFFIXES.'
def test_gadget_properties(self): DCNL 'Test the standard properties of gadgets.'
def test_default_gadgets_are_valid(self): DCNL 'Test that the default gadgets are valid.'
def validate(self, customization_args): DCNL 'Ensure TestGadget retains reasonable config.'
def test_schemas_are_correctly_validated(self): DCNL 'Test validation of schemas.'
def check_normalization(self, schema, mappings, invalid_items): DCNL 'Validates the schema and tests that values are normalized correctly. DCNL Args: DCNL schema: the schema to normalize the value against. DCNL mappings: a list of 2-element tuples. The first element of DCNL each item is expected to be normalized to the second. DCNL invalid_items: a list of values. Each of these is expected to raise DCNL an AssertionError when normalized.'
def test_constants_file_is_existing(self): DCNL 'Test if the constants file is existing.'
def test_constants_file_contains_valid_json(self): DCNL 'Test if the constants file is valid json file.'
def test_create_enum_method(self): DCNL 'Test create_enum method.'
def test_get_comma_sep_string_from_list(self): DCNL 'Test get_comma_sep_string_from_list method.'
def test_to_ascii(self): DCNL 'Test to_ascii method.'
def test_yaml_dict_conversion(self): DCNL 'Test yaml_from_dict and dict_from_yaml methods.'
def test_recursively_remove_key(self): DCNL 'Test recursively_remove_key method.'
def test_camelcase_to_hyphenated(self): DCNL 'Test camelcase_to_hyphenated method.'
def test_set_url_query_parameter(self): DCNL 'Test set_url_query_parameter method.'
def test_convert_to_hash(self): DCNL 'Test convert_to_hash() method.'
def test_vfs_construct_path(self): DCNL 'Test vfs_construct_path method.'
def setup(self, draws, chain): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number'
def record(self, point): DCNL 'Record results of a sampling iteration. DCNL Parameters DCNL point : dict DCNL Values mapped to variable names'
def get_values(self, varname, burn=0, thin=1): DCNL 'Get values from trace. DCNL Parameters DCNL varname : str DCNL burn : int DCNL thin : int DCNL Returns DCNL A NumPy array'
def point(self, idx): DCNL 'Return dictionary of point values at `idx` for current chain DCNL with variables names as keys.'
def setup(self, draws, chain, sampler_vars=None): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number DCNL sampler_vars : list of dicts DCNL Names and dtypes of the variables that are DCNL exported by the samplers.'
def setup(self, draws, chain, sampler_vars=None): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number DCNL sampler_vars : list of dictionaries (name -> dtype), optional DCNL Diagnostics / statistics for each sampler. Before passing this DCNL to a backend, you should check, that the `supports_sampler_state` DCNL flag is set.'
def record(self, point, sampler_states=None): DCNL 'Record results of a sampling iteration. DCNL Parameters DCNL point : dict DCNL Values mapped to variable names DCNL sampler_states : list of dicts DCNL The diagnostic values for each sampler'
def close(self): DCNL 'Close the database backend. DCNL This is called after sampling has finished.'
def get_values(self, varname, burn=0, thin=1): DCNL 'Get values from trace. DCNL Parameters DCNL varname : str DCNL burn : int DCNL thin : int DCNL Returns DCNL A NumPy array'
def get_sampler_stats(self, varname, sampler_idx=None, burn=0, thin=1): DCNL 'Get sampler statistics from the trace. DCNL Parameters DCNL varname : str DCNL sampler_idx : int or None DCNL burn : int DCNL thin : int DCNL Returns DCNL If the `sampler_idx` is specified, return the statistic with DCNL the given name in a numpy array. If it is not specified and there DCNL is more than one sampler that provides this statistic, return DCNL a numpy array of shape (m, n), where `m` is the number of DCNL such samplers, and `n` is the number of samples.'
def _get_sampler_stats(self, varname, sampler_idx, burn, thin): DCNL 'Get sampler statistics.'
def _slice(self, idx): DCNL 'Slice trace object.'
def point(self, idx): DCNL 'Return dictionary of point values at `idx` for current chain DCNL with variables names as keys.'
def add_values(self, vals): DCNL 'add values to traces. DCNL Parameters DCNL vals : dict (str: array-like) DCNL The keys should be the names of the new variables. The values are DCNL expected to be array-like object. DCNL For traces with more than one chain the lenght of each value DCNL should match the number of total samples already in the trace DCNL (chains * iterations), otherwise a warning is raised.'
def get_values(self, varname, burn=0, thin=1, combine=True, chains=None, squeeze=True): DCNL 'Get values from traces. DCNL Parameters DCNL varname : str DCNL burn : int DCNL thin : int DCNL combine : bool DCNL If True, results from `chains` will be concatenated. DCNL chains : int or list of ints DCNL Chains to retrieve. If None, all chains are used. A single DCNL chain value can also be given. DCNL squeeze : bool DCNL Return a single array element if the resulting list of DCNL values only has one element. If False, the result will DCNL always be a list of arrays, even if `combine` is True. DCNL Returns DCNL A list of NumPy arrays or a single NumPy array (depending on DCNL `squeeze`).'
def get_sampler_stats(self, varname, burn=0, thin=1, combine=True, chains=None, squeeze=True): DCNL 'Get sampler statistics from the trace. DCNL Parameters DCNL varname : str DCNL sampler_idx : int or None DCNL burn : int DCNL thin : int DCNL Returns DCNL If the `sampler_idx` is specified, return the statistic with DCNL the given name in a numpy array. If it is not specified and there DCNL is more than one sampler that provides this statistic, return DCNL a numpy array of shape (m, n), where `m` is the number of DCNL such samplers, and `n` is the number of samples.'
def _slice(self, idx): DCNL 'Return a new MultiTrace object sliced according to `idx`.'
def point(self, idx, chain=None): DCNL 'Return a dictionary of point values at `idx`. DCNL Parameters DCNL idx : int DCNL chain : int DCNL If a chain is not given, the highest chain number is used.'
def setup(self, draws, chain): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number'
def record(self, point): DCNL 'Record results of a sampling iteration. DCNL Parameters DCNL point : dict DCNL Values mapped to variable names'
def get_values(self, varname, burn=0, thin=1): DCNL 'Get values from trace. DCNL Parameters DCNL varname : str DCNL burn : int DCNL thin : int DCNL Returns DCNL A NumPy array'
def point(self, idx): DCNL 'Return dictionary of point values at `idx` for current chain DCNL with variables names as keys.'
def stage_number(self, stage_path): DCNL 'Inverse function of TextStage.path'
def highest_sampled_stage(self): DCNL 'Return stage number of stage that has been sampled before the final stage. DCNL Returns DCNL stage number : int'
def atmip_path(self, stage_number): DCNL 'Consistent naming for atmip params.'
def load_atmip_params(self, stage_number, model): DCNL 'Load saved parameters from last sampled ATMIP stage. DCNL Parameters DCNL stage number : int DCNL of stage number or -1 for last stage'
def dump_atmip_params(self, step): DCNL 'Save atmip params to file.'
def clean_directory(self, stage, chains, rm_flag): DCNL 'Optionally remove directory for the stage.  Does nothing if rm_flag is False.'
def load_multitrace(self, stage_number, model=None): DCNL 'Load TextChain database. DCNL Parameters DCNL stage_number : int DCNL Number of stage to load files from (one per chain) DCNL model : Model DCNL If None, the model is taken from the `with` context. DCNL Returns DCNL A :class:`pymc3.backend.base.MultiTrace` instance'
def check_multitrace(self, mtrace, draws, n_chains): DCNL 'Check multitrace for incomplete sampling and return indexes from chains DCNL that need to be resampled. DCNL Parameters DCNL mtrace : :class:`pymc3.backend.base.MultiTrace` DCNL Multitrace object containing the sampling traces DCNL draws : int DCNL Number of steps (i.e. chain length for each Markov Chain) DCNL n_chains : int DCNL Number of Markov Chains DCNL Returns DCNL list of indexes for chains that need to be resampled'
def create_result_trace(self, stage_number=(-1), idxs=((-1),), step=None, model=None): DCNL 'Concatenate points from all traces into one single trace, which can be used by DCNL traceplot. Stores result trace in stage_-2. DCNL Parameters DCNL stage_number : int DCNL stage of which result traces are loaded DCNL idxs : iterable DCNL of indexes to the point at each chain to extract and concatenate DCNL Returns DCNL MultiTrace'
def load_result_trace(self, model=None): DCNL 'Load pymc3 format trace object to be used for plotting and summary. DCNL Parameters DCNL model : Model DCNL If None, the model is taken from the `with` context. DCNL Returns DCNL MutliTrace'
def setup(self, draws, chain): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number'
def record(self, lpoint): DCNL 'Record results of a sampling iteration. DCNL Parameters DCNL lpoint : List of variable values DCNL Values mapped to variable names'
def get_values(self, varname, burn=0, thin=1): DCNL 'Get values from trace. DCNL Parameters DCNL varname : str DCNL Variable name for which values are to be retrieved. DCNL burn : int DCNL Burn-in samples from trace. This is the number of samples to be DCNL thrown out from the start of the trace DCNL thin : int DCNL Nuber of thinning samples. Throw out every \'thin\' sample of the DCNL trace. DCNL Returns DCNL :class:`numpy.array`'
def point(self, idx): DCNL 'Get point of current chain with variables names as keys. DCNL Parameters DCNL idx : int DCNL Index of the nth step of the chain DCNL Returns DCNL dictionary of point values'
def setup(self, draws, chain, sampler_vars=None): DCNL 'Perform chain-specific setup. DCNL Parameters DCNL draws : int DCNL Expected number of draws DCNL chain : int DCNL Chain number DCNL sampler_vars : list of dicts DCNL Names and dtypes of the variables that are DCNL exported by the samplers.'
def record(self, point, sampler_stats=None): DCNL 'Record results of a sampling iteration. DCNL Parameters DCNL point : dict DCNL Values mapped to variable names'
def get_values(self, varname, burn=0, thin=1): DCNL 'Get values from trace. DCNL Parameters DCNL varname : str DCNL burn : int DCNL thin : int DCNL Returns DCNL A NumPy array'
def point(self, idx): DCNL 'Return dictionary of point values at `idx` for current chain DCNL with variable names as keys.'
def _repr_latex_(self, name=None, dist=None): DCNL 'Magic method name for IPython to use for LaTeX formatting.'
def _quaddist(self, value): DCNL 'Compute (x - mu).T @ Sigma^-1 @ (x - mu) and the logdet of Sigma.'
def _ppf(self, p): DCNL 'The percentile point function (the inverse of the cumulative DCNL distribution function) of the discrete Weibull distribution.'
def grad(self, inputs, gradients): DCNL 'Cholesky decomposition reverse-mode gradient update. DCNL Symbolic expression for reverse-mode Cholesky gradient taken from [0]_ DCNL References DCNL .. [0] I. Murray, "Differentiation of the Cholesky decomposition", DCNL http://arxiv.org/abs/1602.07527'
def __init__(self, dist, transform, *args, **kwargs): DCNL 'Parameters DCNL dist : Distribution DCNL transform : Transform DCNL args, kwargs DCNL arguments to Distribution'
def test_pandas_to_array(self): DCNL 'Ensure that pandas_to_array returns the dense array, masked array, DCNL graph variable, TensorVariable, or sparse matrix as appropriate.'
def test_as_tensor(self): DCNL 'Check returned values for `data` given known inputs to `as_tensor()`. DCNL Note that ndarrays should return a TensorConstant and sparse inputs DCNL should return a Sparse Theano object.'
@pytest.mark.parametrize('value,mu,sigma,nu,logp', [(0.5, (-50.0), 0.5, 0.5, (-99.8068528)), (1.0, (-1.0), 0.001, 0.001, (-1992.5922447)), (2.0, 0.001, 1.0, 1.0, (-1.6720416)), (5.0, 0.5, 2.5, 2.5, (-2.4543644)), (7.5, 2.0, 5.0, 5.0, (-2.8259429)), (15.0, 5.0, 7.5, 7.5, (-3.3093854)), (50.0, 50.0, 10.0, 10.0, (-3.6436067)), (1000.0, 500.0, 10.0, 20.0, (-27.8707323))]) DCNL def test_ex_gaussian(self, value, mu, sigma, nu, logp): DCNL 'Log probabilities calculated using the dexGAUS function from the R package gamlss. DCNL See e.g., doi: 10.1111/j.1467-9876.2005.00510.x, or http://www.gamlss.org/.'
def check_trace(self, step_method): DCNL 'Tests whether the trace for step methods is exactly the same as on master. DCNL Code changes that effect how random numbers are drawn may change this, and require DCNL `master_samples` to be updated, but such changes should be noted and justified in the DCNL commit. DCNL This method may also be used to benchmark step methods across commits, by running, for DCNL example DCNL BENCHMARK=100000 ./scripts/test.sh -s pymc3/tests/test_step.py:TestStepMethods DCNL on multiple commits.'
@pytest.mark.skipif((theano.config.floatX == 'float32'), reason='Test DCSP fails DCSP on DCSP 32 DCSP bit DCSP due DCSP to DCSP linalg DCSP issues') DCNL def test_non_blocked(self): DCNL 'Test that samplers correctly create non-blocked compound steps.'
def test_bernoulli(self): DCNL 'Test bernoulli distribution is assigned binary gibbs metropolis method'
def test_normal(self): DCNL 'Test normal distribution is assigned NUTS method'
def test_categorical(self): DCNL 'Test categorical distribution is assigned categorical gibbs metropolis method'
def test_binomial(self): DCNL 'Test binomial distribution is assigned metropolis method.'
def test_good(self): DCNL 'Confirm Gelman-Rubin statistic is close to 1 for a reasonable number of samples.'
def test_bad(self): DCNL 'Confirm Gelman-Rubin statistic is far from 1 for a small number of samples.'
def test_right_shape_python_float(self, shape=None, test_shape=None): DCNL 'Check Gelman-Rubin statistic shape is correct w/ python float'
def test_right_shape_scalar_tuple(self): DCNL 'Check Gelman-Rubin statistic shape is correct w/ scalar as shape=()'
def test_right_shape_tensor(self, shape=(5, 3, 2), test_shape=None): DCNL 'Check Gelman-Rubin statistic shape is correct w/ tensor variable'
def test_right_shape_scalar_array(self): DCNL 'Check Gelman-Rubin statistic shape is correct w/ scalar as shape=(1,)'
def test_right_shape_scalar_one(self): DCNL 'Check Gelman-Rubin statistic shape is correct w/ scalar as shape=1'
def test_geweke_negative(self): DCNL 'Confirm Geweke diagnostic is larger than 1 for a small number of samples.'
def test_geweke_positive(self): DCNL 'Confirm Geweke diagnostic is smaller than 1 for a reasonable number of samples.'
def test_effective_n(self): DCNL 'Check effective sample size is equal to number of samples when initializing with MAP'
def test_effective_n_right_shape_python_float(self, shape=None, test_shape=None): DCNL 'Check effective sample size shape is correct w/ python float'
def test_effective_n_right_shape_scalar_tuple(self): DCNL 'Check effective sample size shape is correct w/ scalar as shape=()'
def test_effective_n_right_shape_tensor(self): DCNL 'Check effective sample size shape is correct w/ tensor variable'
def test_effective_n_right_shape_scalar_array(self): DCNL 'Check effective sample size shape is correct w/ scalar as shape=(1,)'
def test_effective_n_right_shape_scalar_one(self): DCNL 'Check effective sample size shape is correct w/ scalar as shape=1'
def matches(self, **kwargs): DCNL 'Look for a saved dict whose keys/values match the supplied arguments.'
def matches(self, d, **kwargs): DCNL 'Try to match a single dict with the supplied arguments. DCNL Keys whose values are strings and which are in self._partial_matches DCNL will be checked for partial (i.e. substring) matches. You can extend DCNL this scheme to (for example) do regular expression matching, etc.'
def match_value(self, k, dv, v): DCNL 'Try to match a single stored value (dv) with a supplied value (v).'
def test_autocorr(self): DCNL 'Test autocorrelation and autocovariance functions'
def test_dic(self): DCNL 'Test deviance information criterion calculation'
def test_bpic(self): DCNL 'Test Bayesian predictive information criterion'
def test_waic(self): DCNL 'Test widely available information criterion calculation'
def test_hpd(self): DCNL 'Test HPD calculation'
def test_make_indices(self): DCNL 'Test make_indices function'
def test_mc_error(self): DCNL 'Test batch standard deviation function'
def test_quantiles(self): DCNL 'Test quantiles function'
def test_thread_safety(self): DCNL 'Regression test for issue #1552: Thread safety of model context manager DCNL This test creates two threads that attempt to construct two DCNL unrelated models at the same time. DCNL For repeatable testing, the two threads are syncronised such DCNL that thread A enters the context manager first, then B, DCNL then A attempts to declare a variable while B is still in the context manager.'
def __call__(self, input): DCNL 'Replaces the single input of symbolic variable to be the passed argument. DCNL Parameters DCNL input : TensorVariable'
def map(self, dpt): DCNL 'Maps value from dict space to array space DCNL Parameters DCNL dpt : dict'
def rmap(self, apt): DCNL 'Maps value from array space to dict space DCNL Parameters DCNL apt : array'
def mapf(self, f): DCNL 'function f : DictSpace -> T to ArraySpace -> T DCNL Parameters DCNL f : dict -> T DCNL Returns DCNL f : array -> T'
def fmap(self, list_arrays): DCNL 'Maps values from List space to array space DCNL Parameters DCNL list_arrays : list DCNL of :class:`numpy.ndarray` DCNL Returns DCNL array : :class:`numpy.ndarray` DCNL single array comprising all the input arrays'
def dmap(self, dpt): DCNL 'Maps values from dict space to List space DCNL Parameters DCNL list_arrays : list DCNL of :class:`numpy.ndarray` DCNL Returns DCNL point'
def rmap(self, array): DCNL 'Maps value from array space to List space DCNL Inverse operation of fmap. DCNL Parameters DCNL array : :class:`numpy.ndarray` DCNL Returns DCNL a_list : list DCNL of :class:`numpy.ndarray`'
@staticmethod DCNL def competence(var): DCNL 'BinaryMetropolis is only suitable for binary (bool) DCNL and Categorical variables with k=1.'
@staticmethod DCNL def competence(var): DCNL 'BinaryMetropolis is only suitable for Bernoulli DCNL and Categorical variables with k=2.'
@staticmethod DCNL def competence(var): DCNL 'CategoricalGibbsMetropolis is only suitable for Bernoulli and DCNL Categorical variables.'
def calc_beta(self): DCNL 'Calculate next tempering beta and importance weights based on DCNL current beta and sample likelihoods. DCNL Returns DCNL beta(m+1) : scalar, float DCNL tempering parameter of the next stage DCNL beta(m) : scalar, float DCNL tempering parameter of the current stage DCNL weights : :class:`numpy.ndarray` DCNL Importance weights (floats)'
def calc_covariance(self): DCNL 'Calculate trace covariance matrix based on importance weights. DCNL Returns DCNL cov : :class:`numpy.ndarray` DCNL weighted covariances (NumPy > 1.10. required)'
def select_end_points(self, mtrace): DCNL 'Read trace results (variables and model likelihood) and take end points DCNL for each chain and set as start population for the next stage. DCNL Parameters DCNL mtrace : :class:`.base.MultiTrace` DCNL Returns DCNL population : list DCNL of :func:`pymc3.Point` dictionaries DCNL array_population : :class:`numpy.ndarray` DCNL Array of trace end-points DCNL likelihoods : :class:`numpy.ndarray` DCNL Array of likelihoods of the trace end-points'
def get_chain_previous_lpoint(self, mtrace): DCNL 'Read trace results and take end points for each chain and set as DCNL previous chain result for comparison of metropolis select. DCNL Parameters DCNL mtrace : :class:`.base.MultiTrace` DCNL Returns DCNL chain_previous_lpoint : list DCNL all unobservedRV values, including dataset likelihoods'
def mean_end_points(self): DCNL 'Calculate mean of the end-points and return point. DCNL Returns DCNL Dictionary of trace variables'
def resample(self): DCNL 'Resample pdf based on importance weights. DCNL based on Kitagawas deterministic resampling algorithm. DCNL Returns DCNL outindex : :class:`numpy.ndarray` DCNL Array of resampled trace indexes'
def __init__(self, potential, logp_dlogp_func): DCNL 'Leapfrog integrator using CPU.'
def compute_state(self, q, p): DCNL 'Compute Hamiltonian functions using a position and momentum.'
def step(self, epsilon, state, out=None): DCNL 'Leapfrog integrator step. DCNL Half a momentum update, full position update, half momentum update. DCNL Parameters DCNL epsilon: float, > 0 DCNL step scale DCNL state: State namedtuple, DCNL current position data DCNL out: (optional) State namedtuple, DCNL preallocated arrays to write to in place DCNL Returns DCNL None if `out` is provided, else a State namedtuple'
def __init__(self, vars=None, Emax=1000, target_accept=0.8, gamma=0.05, k=0.75, t0=10, adapt_step_size=True, max_treedepth=10, on_error='summary', early_max_treedepth=8, **kwargs): DCNL 'Set up the No-U-Turn sampler. DCNL Parameters DCNL vars : list of Theano variables, default all continuous vars DCNL Emax : float, default 1000 DCNL Maximum energy change allowed during leapfrog steps. Larger DCNL deviations will abort the integration. DCNL target_accept : float (0,1), default .8 DCNL Try to find a step size such that the average acceptance DCNL probability across the trajectories are close to target_accept. DCNL Higher values for target_accept lead to smaller step sizes. DCNL step_scale : float, default 0.25 DCNL Size of steps to take, automatically scaled down by `1/n**(1/4)`. DCNL If step size adaptation is switched off, the resulting step size DCNL is used. If adaptation is enabled, it is used as initial guess. DCNL gamma : float, default .05 DCNL k : float (.5,1) default .75 DCNL scaling of speed of adaptation DCNL t0 : int, default 10 DCNL slows initial adaptation DCNL adapt_step_size : bool, default=True DCNL Whether step size adaptation should be enabled. If this is DCNL disabled, `k`, `t0`, `gamma` and `target_accept` are ignored. DCNL max_treedepth : int, default=10 DCNL The maximum tree depth. Trajectories are stoped when this DCNL depth is reached. DCNL early_max_treedepth : int, default=8 DCNL The maximum tree depth during the first 200 tuning samples. DCNL integrator : str, default "leapfrog" DCNL The integrator to use for the trajectories. One of "leapfrog", DCNL "two-stage" or "three-stage". The second two can increase DCNL sampling speed for some high dimensional problems. DCNL scaling : array_like, ndim = {1,2} DCNL The inverse mass, or precision matrix. One dimensional arrays are DCNL interpreted as diagonal matrices. If `is_cov` is set to True, DCNL this will be interpreded as the mass or covariance matrix. DCNL is_cov : bool, default=False DCNL Treat the scaling as mass or covariance matrix. DCNL on_error : {\'summary\', \'warn\', \'raise\'}, default=\'summary\' DCNL How to report problems during sampling. DCNL * `summary`: Print one warning after sampling. DCNL * `warn`: Print individual warnings as soon as they appear. DCNL * `raise`: Raise an error on the first problem. DCNL potential : Potential, optional DCNL An object that represents the Hamiltonian with methods `velocity`, DCNL `energy`, and `random` methods. It can be specified instead DCNL of the scaling matrix. DCNL model : pymc3.Model DCNL The model DCNL kwargs: passed to BaseHMC DCNL Notes DCNL The step size adaptation stops when `self.tune` is set to False. DCNL This is usually achieved by setting the `tune` parameter if DCNL `pm.sample` to the desired number of tuning steps.'
def astep(self, q0): DCNL 'Perform a single NUTS iteration.'
@staticmethod DCNL def competence(var): DCNL 'Check how appropriate this class is for sampling a random variable.'
def __init__(self, ndim, integrator, start, step_size, Emax): DCNL 'Binary tree from the NUTS algorithm. DCNL Parameters DCNL leapfrog : function DCNL A function that performs a single leapfrog step. DCNL start : integration.State DCNL The starting point of the trajectory. DCNL step_size : float DCNL The step size to use in this tree DCNL Emax : float DCNL The maximum energy change to accept before aborting the DCNL transition as diverging.'
def extend(self, direction): DCNL 'Double the treesize by extending the tree in the given direction. DCNL If direction is larger than 0, extend it to the right, otherwise DCNL extend it to the left. DCNL Return a tuple `(diverging, turning)` of type (bool, bool). DCNL `diverging` indicates, that the tree extension was aborted because DCNL the energy change exceeded `self.Emax`. `turning` indicates that DCNL the tree extension was stopped because the termination criterior DCNL was reached (the trajectory is turning back).'
def _single_step(self, left, epsilon): DCNL 'Perform a leapfrog step and handle error cases.'
def _finalize(self, strace): DCNL 'Print warnings for obviously problematic chains.'
def __init__(self, vars=None, scaling=None, step_scale=0.25, is_cov=False, model=None, blocked=True, potential=None, integrator='leapfrog', dtype=None, **theano_kwargs): DCNL 'Set up Hamiltonian samplers with common structures. DCNL Parameters DCNL vars : list of theano variables DCNL scaling : array_like, ndim = {1,2} DCNL Scaling for momentum distribution. 1d arrays interpreted matrix DCNL diagonal. DCNL step_scale : float, default=0.25 DCNL Size of steps to take, automatically scaled down by 1/n**(1/4) DCNL is_cov : bool, default=False DCNL Treat scaling as a covariance matrix/vector if True, else treat DCNL it as a precision matrix/vector DCNL model : pymc3 Model instance DCNL blocked: bool, default=True DCNL potential : Potential, optional DCNL An object that represents the Hamiltonian with methods `velocity`, DCNL `energy`, and `random` methods. DCNL **theano_kwargs: passed to theano functions'
def velocity(self, x, out=None): DCNL 'Compute the current velocity at a position in parameter space.'
def adapt(self, sample, grad): DCNL 'Inform the potential about a new sample during tuning. DCNL This can be used by adaptive potentials to change the DCNL mass matrix.'
def __init__(self, n, initial_mean, initial_diag=None, initial_weight=0, adaptation_window=100, dtype=None): DCNL 'Set up a diagonal mass matrix.'
def velocity(self, x, out=None): DCNL 'Compute the current velocity at a position in parameter space.'
def energy(self, x, velocity=None): DCNL 'Compute kinetic energy at a position in parameter space.'
def velocity_energy(self, x, v_out): DCNL 'Compute velocity and return kinetic energy at a position in parameter space.'
def random(self): DCNL 'Draw random value from QuadPotential.'
def adapt(self, sample, grad): DCNL 'Inform the potential about a new sample during tuning.'
def adapt(self, sample, grad): DCNL 'Inform the potential about a new sample during tuning.'
def __init__(self, v, dtype=None): DCNL 'Use a vector to represent a diagonal matrix for a covariance matrix. DCNL Parameters DCNL v : vector, 0 <= ndim <= 1 DCNL Diagonal of covariance matrix for the potential vector'
def velocity(self, x, out=None): DCNL 'Compute the current velocity at a position in parameter space.'
def random(self): DCNL 'Draw random value from QuadPotential.'
def energy(self, x, velocity=None): DCNL 'Compute kinetic energy at a position in parameter space.'
def velocity_energy(self, x, v_out): DCNL 'Compute velocity and return kinetic energy at a position in parameter space.'
def __init__(self, A, dtype=None): DCNL 'Compute the lower cholesky decomposition of the potential. DCNL Parameters DCNL A : matrix, ndim = 2 DCNL Inverse of covariance matrix for the potential vector'
def velocity(self, x, out=None): DCNL 'Compute the current velocity at a position in parameter space.'
def random(self): DCNL 'Draw random value from QuadPotential.'
def energy(self, x, velocity=None): DCNL 'Compute kinetic energy at a position in parameter space.'
def velocity_energy(self, x, v_out): DCNL 'Compute velocity and return kinetic energy at a position in parameter space.'
def __init__(self, A, dtype=None): DCNL 'Compute the lower cholesky decomposition of the potential. DCNL Parameters DCNL A : matrix, ndim = 2 DCNL scaling matrix for the potential vector'
def velocity(self, x, out=None): DCNL 'Compute the current velocity at a position in parameter space.'
def random(self): DCNL 'Draw random value from QuadPotential.'
def energy(self, x, velocity=None): DCNL 'Compute kinetic energy at a position in parameter space.'
def velocity_energy(self, x, v_out): DCNL 'Compute velocity and return kinetic energy at a position in parameter space.'
def __init__(self, vars=None, path_length=2.0, step_rand=unif, **kwargs): DCNL 'Set up the Hamiltonian Monte Carlo sampler. DCNL Parameters DCNL vars : list of theano variables DCNL path_length : float, default=2 DCNL total length to travel DCNL step_rand : function float -> float, default=unif DCNL A function which takes the step size and returns an new one used to DCNL randomize the step size at each iteration. DCNL step_scale : float, default=0.25 DCNL Initial size of steps to take, automatically scaled down DCNL by 1/n**(1/4). DCNL scaling : array_like, ndim = {1,2} DCNL The inverse mass, or precision matrix. One dimensional arrays are DCNL interpreted as diagonal matrices. If `is_cov` is set to True, DCNL this will be interpreded as the mass or covariance matrix. DCNL is_cov : bool, default=False DCNL Treat the scaling as mass or covariance matrix. DCNL potential : Potential, optional DCNL An object that represents the Hamiltonian with methods `velocity`, DCNL `energy`, and `random` methods. It can be specified instead DCNL of the scaling matrix. DCNL model : pymc3.Model DCNL The model DCNL **kwargs : passed to BaseHMC'
def astep(self, q0): DCNL 'Perform a single HMC iteration.'
@staticmethod DCNL def competence(var): DCNL 'Check how appropriate this class is for sampling a random variable.'
def _initialize_values(self): DCNL 'Initializes the parameters for the stochastic gradient minibatch DCNL algorithm'
def training_complete(self): DCNL 'Returns boolean if astep has been called expected iter number of times'
def astep(self, q0): DCNL 'Perform a single update in the stochastic gradient method. DCNL Returns new shared values and values sampled DCNL The size and ordering of q0 and q must be the same DCNL Parameters DCNL q0: list DCNL List of shared values and values sampled from last estimate DCNL Returns DCNL q'
def __init__(self, vars=None, B=None, **kwargs): DCNL 'Parameters DCNL vars : list DCNL Theano variables, default continuous vars DCNL B : np.array DCNL Symmetric positive Semi-definite Matrix DCNL kwargs: passed to BaseHMC'
def __init__(self, vars, shared, blocked=True): DCNL 'Parameters DCNL vars : list of sampling variables DCNL shared : dict of theano variable -> shared variable DCNL blocked : Boolean (default True)'
def astep(self, q0, logp): DCNL 'q0 : current state DCNL logp : log probability function'
def updates(self, obj_n_mc=None, tf_n_mc=None, obj_optimizer=adagrad_window, test_optimizer=adagrad_window, more_obj_params=None, more_tf_params=None, more_updates=None, more_replacements=None, total_grad_norm_constraint=None): DCNL 'Calculates gradients for objective function, test function and then DCNL constructs updates for optimization step DCNL Parameters DCNL obj_n_mc : `int` DCNL Number of monte carlo samples used for approximation of objective gradients DCNL tf_n_mc : `int` DCNL Number of monte carlo samples used for approximation of test function gradients DCNL obj_optimizer : function (loss, params) -> updates DCNL Optimizer that is used for objective params DCNL test_optimizer : function (loss, params) -> updates DCNL Optimizer that is used for test function params DCNL more_obj_params : `list` DCNL Add custom params for objective optimizer DCNL more_tf_params : `list` DCNL Add custom params for test function optimizer DCNL more_updates : `dict` DCNL Add custom updates to resulting updates DCNL more_replacements : `dict` DCNL Apply custom replacements before calculating gradients DCNL total_grad_norm_constraint : `float` DCNL Bounds gradient norm, prevents exploding gradient problem DCNL Returns DCNL :class:`ObjectiveUpdates`'
@memoize DCNL @change_flags(compute_test_value='off') DCNL def step_function(self, obj_n_mc=None, tf_n_mc=None, obj_optimizer=adagrad_window, test_optimizer=adagrad_window, more_obj_params=None, more_tf_params=None, more_updates=None, more_replacements=None, total_grad_norm_constraint=None, score=False, fn_kwargs=None): DCNL 'Step function that should be called on each optimization step. DCNL Generally it solves the following problem: DCNL .. math:: DCNL \mathbf{\lambda^{*}} = \inf_{\lambda} \sup_{\theta} t(\mathbb{E}_{\lambda}[(O^{p,q}f_{\theta})(z)]) DCNL Parameters DCNL obj_n_mc : `int` DCNL Number of monte carlo samples used for approximation of objective gradients DCNL tf_n_mc : `int` DCNL Number of monte carlo samples used for approximation of test function gradients DCNL obj_optimizer : function (loss, params) -> updates DCNL Optimizer that is used for objective params DCNL test_optimizer : function (loss, params) -> updates DCNL Optimizer that is used for test function params DCNL more_obj_params : `list` DCNL Add custom params for objective optimizer DCNL more_tf_params : `list` DCNL Add custom params for test function optimizer DCNL more_updates : `dict` DCNL Add custom updates to resulting updates DCNL total_grad_norm_constraint : `float` DCNL Bounds gradient norm, prevents exploding gradient problem DCNL score : `bool` DCNL calculate loss on each step? Defaults to False for speed DCNL fn_kwargs : `dict` DCNL Add kwargs to theano.function (e.g. `{\'profile\': True}`) DCNL more_replacements : `dict` DCNL Apply custom replacements before calculating gradients DCNL Returns DCNL `theano.function`'
@memoize DCNL @change_flags(compute_test_value='off') DCNL def score_function(self, sc_n_mc=None, more_replacements=None, fn_kwargs=None): DCNL 'Compiles scoring function that operates which takes no inputs and returns Loss DCNL Parameters DCNL sc_n_mc : `int` DCNL number of scoring MC samples DCNL more_replacements: DCNL Apply custom replacements before compiling a function DCNL fn_kwargs: `dict` DCNL arbitrary kwargs passed to theano.function DCNL Returns DCNL theano.function'
def apply(self, f): DCNL 'Operator itself DCNL .. math:: DCNL (O^{p,q}f_{\theta})(z) DCNL Parameters DCNL f : :class:`TestFunction` or None DCNL function that takes `z = self.input` and returns DCNL same dimensional output DCNL Returns DCNL `TensorVariable` DCNL symbolically applied operator'
def create_shared_params(self, dim): DCNL 'Returns DCNL {dict|list|theano.shared}'
def _setup(self, dim): DCNL 'Does some preparation stuff before calling :func:`Approximation.create_shared_params` DCNL Parameters DCNL dim : int DCNL dimension of posterior distribution'
def seed(self, random_seed=None): DCNL 'Reinitialize RandomStream used by this approximation DCNL Parameters DCNL random_seed : `int` DCNL New random seed'
def check_model(self, model, **kwargs): DCNL 'Checks that model is valid for variational inference'
def construct_replacements(self, include=None, exclude=None, more_replacements=None): DCNL 'Construct replacements with given conditions DCNL Parameters DCNL include : `list` DCNL latent variables to be replaced DCNL exclude : `list` DCNL latent variables to be excluded for replacements DCNL more_replacements : `dict` DCNL add custom replacements to graph, e.g. change input source DCNL Returns DCNL `dict` DCNL Replacements'
def to_flat_input(self, node): DCNL 'Replaces vars with flattened view stored in self.input'
@change_flags(compute_test_value='off') DCNL def apply_replacements(self, node, deterministic=False, include=None, exclude=None, more_replacements=None): DCNL 'Replace variables in graph with variational approximation. By default, replaces all variables DCNL Parameters DCNL node : Theano Variables (or Theano expressions) DCNL node or nodes for replacements DCNL deterministic : bool DCNL whether to use zeros as initial distribution DCNL if True - zero initial point will produce constant latent variables DCNL include : `list` DCNL latent variables to be replaced DCNL exclude : `list` DCNL latent variables to be excluded for replacements DCNL more_replacements : `dict` DCNL add custom replacements to graph, e.g. change input source DCNL Returns DCNL node(s) with replacements'
@change_flags(compute_test_value='off') DCNL def sample_node(self, node, size=100, more_replacements=None): DCNL 'Samples given node or nodes over shared posterior DCNL Parameters DCNL node : Theano Variables (or Theano expressions) DCNL size : scalar DCNL number of samples DCNL more_replacements : `dict` DCNL add custom replacements to graph, e.g. change input source DCNL Returns DCNL sampled node(s) with replacements'
def scale_grad(self, inp): DCNL 'Rescale gradient of input DCNL References DCNL - Geoffrey Roeder, Yuhuai Wu, David Duvenaud, 2016 DCNL Sticking the Landing: A Simple Reduced-Variance Gradient for ADVI DCNL approximateinference.org/accepted/RoederEtAl2016.pdf'
def random_local(self, size=None, deterministic=False): DCNL 'Implements posterior distribution from initial latent space DCNL Parameters DCNL size : `scalar` DCNL number of samples from distribution DCNL deterministic : `bool` DCNL whether use deterministic distribution DCNL Returns DCNL local posterior space'
def random_global(self, size=None, deterministic=False): DCNL 'Implements posterior distribution from initial latent space DCNL Parameters DCNL size : `scalar` DCNL number of samples from distribution DCNL deterministic : `bool` DCNL whether use deterministic distribution DCNL Returns DCNL global posterior space'
def sample(self, draws=500, include_transformed=True): DCNL 'Draw samples from variational posterior. DCNL Parameters DCNL draws : `int` DCNL Number of random samples. DCNL include_transformed : `bool` DCNL If True, transformed variables are also sampled. Default is False. DCNL Returns DCNL trace : :class:`pymc3.backends.base.MultiTrace` DCNL Samples drawn from variational posterior.'
@node_property DCNL def normalizing_constant(self): DCNL 'Constant to divide when we want to scale down loss from minibatches'
@node_property DCNL def logq(self): DCNL 'Total logq for approximation'
def view_global(self, space, name, reshape=True): DCNL 'Construct view on a variable from flattened `space` DCNL Parameters DCNL space : matrix or vector DCNL space to take view of variable from DCNL name : `str` DCNL name of variable DCNL reshape : `bool` DCNL whether to reshape variable from vectorized view DCNL Returns DCNL (reshaped) slice of matrix DCNL variable view'
def view_local(self, space, name, reshape=True): DCNL 'Construct view on a variable from flattened `space` DCNL Parameters DCNL space : matrix or vector DCNL space to take view of variable from DCNL name : `str` DCNL name of variable DCNL reshape : `bool` DCNL whether to reshape variable from vectorized view DCNL Returns DCNL (reshaped) slice of matrix DCNL variable view'
@node_property DCNL def symbolic_log_q_W_global(self): DCNL 'log_q_W samples over q for global vars'
@node_property DCNL def symbolic_log_q_W_global(self): DCNL 'log_q_W samples over q for global vars'
@classmethod DCNL def from_mean_field(cls, mean_field, gpu_compat=False): DCNL 'Construct FullRank from MeanField approximation DCNL Parameters DCNL mean_field : :class:`MeanField` DCNL approximation to start with DCNL Other Parameters DCNL gpu_compat : `bool` DCNL use GPU compatible version or not DCNL Returns DCNL :class:`FullRank`'
@property DCNL def histogram(self): DCNL 'Shortcut to flattened Trace'
@classmethod DCNL def from_noise(cls, size, jitter=0.01, local_rv=None, start=None, model=None, random_seed=None, **kwargs): DCNL 'Initialize Histogram with random noise DCNL Parameters DCNL size : `int` DCNL number of initial particles DCNL jitter : `float` DCNL initial sd DCNL local_rv : `dict` DCNL mapping {model_variable -> local_variable} DCNL Local Vars are used for Autoencoding Variational Bayes DCNL See (AEVB; Kingma and Welling, 2014) for details DCNL start : `Point` DCNL initial point DCNL model : :class:`pymc3.Model` DCNL PyMC3 model for inference DCNL random_seed : None or `int` DCNL leave None to use package global RandomStream or other DCNL valid value to create instance specific one DCNL kwargs : other kwargs passed to init DCNL Returns DCNL :class:`Empirical`'
def fit(self, n=10000, score=None, callbacks=None, progressbar=True, **kwargs): DCNL 'Performs Operator Variational Inference DCNL Parameters DCNL n : int DCNL number of iterations DCNL score : bool DCNL evaluate loss on each iteration or not DCNL callbacks : list[function : (Approximation, losses, i) -> None] DCNL calls provided functions after each iteration step DCNL progressbar : bool DCNL whether to show progressbar or not DCNL kwargs : kwargs DCNL additional kwargs for :func:`ObjectiveFunction.step_function` DCNL Returns DCNL Approximation'
@classmethod DCNL def from_mean_field(cls, mean_field): DCNL 'Construct ADVI from MeanField approximation DCNL Parameters DCNL mean_field : :class:`MeanField` DCNL approximation to start with DCNL Returns DCNL :class:`ADVI`'
@classmethod DCNL def from_full_rank(cls, full_rank): DCNL 'Construct FullRankADVI from FullRank approximation DCNL Parameters DCNL full_rank : :class:`FullRank` DCNL approximation to start with DCNL Returns DCNL :class:`FullRankADVI`'
@classmethod DCNL def from_mean_field(cls, mean_field, gpu_compat=False): DCNL 'Construct FullRankADVI from MeanField approximation DCNL Parameters DCNL mean_field : :class:`MeanField` DCNL approximation to start with DCNL Other Parameters DCNL gpu_compat : `bool` DCNL use GPU compatible version or not DCNL Returns DCNL :class:`FullRankADVI`'
@classmethod DCNL def from_advi(cls, advi, gpu_compat=False): DCNL 'Construct FullRankADVI from ADVI DCNL Parameters DCNL advi : :class:`ADVI` DCNL Other Parameters DCNL gpu_compat : bool DCNL use GPU compatible version or not DCNL Returns DCNL :class:`FullRankADVI`'
def fit(self, n=10000, score=None, callbacks=None, progressbar=True, obj_n_mc=300, **kwargs): DCNL 'Performs Amortized Stein Variational Gradient Descent DCNL Parameters DCNL n : int DCNL number of iterations DCNL score : bool DCNL evaluate loss on each iteration or not DCNL callbacks : list[function : (Approximation, losses, i) -> None] DCNL calls provided functions after each iteration step DCNL progressbar : bool DCNL whether to show progressbar or not DCNL obj_n_mc : int DCNL sample `n` particles for Stein gradient DCNL kwargs : kwargs DCNL additional kwargs for :func:`ObjectiveFunction.step_function` DCNL Returns DCNL Approximation'
@classmethod DCNL def from_flow(cls, flow): DCNL 'Get inference from initialized :class:`NormalizingFlow` DCNL Parameters DCNL flow : :class:`NormalizingFlow` DCNL initialized normalizing flow DCNL Returns DCNL :class:`NFVI`'
@classmethod DCNL def get_context(cls): DCNL 'Return the deepest context on the stack.'
@property DCNL def logp(self): DCNL 'Compiled log probability density function'
def dlogp(self, vars=None): DCNL 'Compiled log probability density gradient function'
def d2logp(self, vars=None): DCNL 'Compiled log probability density hessian function'
@property DCNL def fastlogp(self): DCNL 'Compiled log probability density function'
def fastdlogp(self, vars=None): DCNL 'Compiled log probability density gradient function'
def fastd2logp(self, vars=None): DCNL 'Compiled log probability density hessian function'
@property DCNL def logpt(self): DCNL 'Theano scalar of log-probability of the model'
@property DCNL def profile(self): DCNL 'Profiling information of the underlying theano function.'
def dict_to_array(self, point): DCNL 'Convert a dictionary with values for grad_vars to an array.'
def array_to_dict(self, array): DCNL 'Convert an array to a dictionary containing the grad_vars.'
def array_to_full_dict(self, array): DCNL 'Convert an array to a dictionary with grad_vars and extra_vars.'
@property DCNL def logpt(self): DCNL 'Theano scalar of log-probability of the model'
@property DCNL def varlogpt(self): DCNL 'Theano scalar of log-probability of the unobserved random variables DCNL (excluding deterministic).'
@property DCNL def vars(self): DCNL 'List of unobserved random variables used as inputs to the model DCNL (which excludes deterministics).'
@property DCNL def basic_RVs(self): DCNL 'List of random variables the model is defined in terms of DCNL (which excludes deterministics).'
@property DCNL def unobserved_RVs(self): DCNL 'List of all random variable, including deterministic ones.'
@property DCNL def test_point(self): DCNL 'Test point used to check that the model doesn\'t generate errors'
@property DCNL def disc_vars(self): DCNL 'All the discrete variables in the model'
@property DCNL def cont_vars(self): DCNL 'All the continuous variables in the model'
def Var(self, name, dist, data=None, total_size=None): DCNL 'Create and add (un)observed random variable to the model with an DCNL appropriate prior distribution. DCNL Parameters DCNL name : str DCNL dist : distribution for the random variable DCNL data : array_like (optional) DCNL If data is provided, the variable is observed. If None, DCNL the variable is unobserved. DCNL total_size : scalar DCNL upscales logp of variable with :math:`coef = total_size/var.shape[0]` DCNL Returns DCNL FreeRV or ObservedRV'
def add_random_variable(self, var): DCNL 'Add a random variable to the named variables of the model.'
def name_for(self, name): DCNL 'Checks if name has prefix and adds if needed'
def name_of(self, name): DCNL 'Checks if name has prefix and deletes if needed'
def makefn(self, outs, mode=None, *args, **kwargs): DCNL 'Compiles a Theano function which returns `outs` and takes the variable DCNL ancestors of `outs` as inputs. DCNL Parameters DCNL outs : Theano variable or iterable of Theano variables DCNL mode : Theano compilation mode DCNL Returns DCNL Compiled Theano function'
def fn(self, outs, mode=None, *args, **kwargs): DCNL 'Compiles a Theano function which returns the values of `outs` DCNL and takes values of model vars as arguments. DCNL Parameters DCNL outs : Theano variable or iterable of Theano variables DCNL mode : Theano compilation mode DCNL Returns DCNL Compiled Theano function'
def fastfn(self, outs, mode=None, *args, **kwargs): DCNL 'Compiles a Theano function which returns `outs` and takes values DCNL of model vars as a dict as an argument. DCNL Parameters DCNL outs : Theano variable or iterable of Theano variables DCNL mode : Theano compilation mode DCNL Returns DCNL Compiled Theano function as point function.'
def profile(self, outs, n=1000, point=None, profile=True, *args, **kwargs): DCNL 'Compiles and profiles a Theano function which returns `outs` and DCNL takes values of model vars as a dict as an argument. DCNL Parameters DCNL outs : Theano variable or iterable of Theano variables DCNL n : int, default 1000 DCNL Number of iterations to run DCNL point : point DCNL Point to pass to the function DCNL profile : True or ProfileStats DCNL *args, **kwargs DCNL Compilation args DCNL Returns DCNL ProfileStats DCNL Use .summary() to print stats.'
def flatten(self, vars=None, order=None, inputvar=None): DCNL 'Flattens model\'s input and returns: DCNL FlatView with DCNL * input vector variable DCNL * replacements `input_var -> vars` DCNL * view {variable: VarMap} DCNL Parameters DCNL vars : list of variables or None DCNL if None, then all model.free_RVs are used for flattening input DCNL order : ArrayOrdering DCNL Optional, use predefined ordering DCNL inputvar : tt.vector DCNL Optional, use predefined inputvar DCNL Returns DCNL flat_view'
def __init__(self, type=None, owner=None, index=None, name=None, distribution=None, total_size=None, model=None): DCNL 'Parameters DCNL type : theano type (optional) DCNL owner : theano owner (optional) DCNL name : str DCNL distribution : Distribution DCNL model : Model DCNL total_size : scalar Tensor (optional) DCNL needed for upscaling logp'
@property DCNL def init_value(self): DCNL 'Convenience attribute to return tag.test_value'
def __init__(self, type=None, owner=None, index=None, name=None, data=None, distribution=None, total_size=None, model=None): DCNL 'Parameters DCNL type : theano type (optional) DCNL owner : theano owner (optional) DCNL name : str DCNL distribution : Distribution DCNL model : Model DCNL total_size : scalar Tensor (optional) DCNL needed for upscaling logp'
@property DCNL def init_value(self): DCNL 'Convenience attribute to return tag.test_value'
def __init__(self, name, data, distribution, total_size=None, model=None): DCNL 'Parameters DCNL type : theano type (optional) DCNL owner : theano owner (optional) DCNL name : str DCNL distribution : Distribution DCNL model : Model DCNL total_size : scalar Tensor (optional) DCNL needed for upscaling logp'
def __init__(self, type=None, owner=None, index=None, name=None, distribution=None, model=None, transform=None, total_size=None): DCNL 'Parameters DCNL type : theano type (optional) DCNL owner : theano owner (optional) DCNL name : str DCNL distribution : Distribution DCNL model : Model DCNL total_size : scalar Tensor (optional) DCNL needed for upscaling logp'
@property DCNL def init_value(self): DCNL 'Convenience attribute to return tag.test_value'
def __call__(self, X, Z=None, diag=False): DCNL 'Evaluate the kernel/covariance function. DCNL Parameters DCNL X : The training inputs to the kernel. DCNL Z : The optional prediction set of inputs the kernel.  If Z is None, Z = X. DCNL diag: Return only the diagonal of the covariance function.  Default is False.'
def __array_wrap__(self, result): DCNL 'Required to allow radd/rmul by numpy arrays.'
def __call__(self, X): DCNL 'Evaluate the mean function. DCNL Parameters DCNL X : The training inputs to the mean function.'
def _get_priors(self, model=None, name=''): DCNL 'Return prior distributions of the likelihood. DCNL Returns DCNL dict : mapping name -> pymc3 distribution'
def create_likelihood(self, name, y_est, y_data, model=None): DCNL 'Create likelihood distribution of observed data. DCNL Parameters DCNL y_est : theano.tensor DCNL Estimate of dependent variable DCNL y_data : array DCNL Observed dependent variable'
@staticmethod DCNL def grab_options(complex_args, module_args): DCNL 'Grab passed options from Ansible complex and module args. DCNL :param complex_args: ``dict`` DCNL :param module_args: ``dict`` DCNL :returns: ``dict``'
def return_config_overrides_ini(self, config_overrides, resultant, list_extend=True): DCNL 'Returns string value from a modified config file. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_json(self, config_overrides, resultant, list_extend=True): DCNL 'Returns config json DCNL Its important to note that file ordering will not be preserved as the DCNL information within the json file will be sorted by keys. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_yaml(self, config_overrides, resultant, list_extend=True): DCNL 'Return config yaml. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def _merge_dict(self, base_items, new_items, list_extend=True): DCNL 'Recursively merge new_items into base_items. DCNL :param base_items: ``dict`` DCNL :param new_items: ``dict`` DCNL :returns: ``dict``'
def run(self, conn, tmp, module_name, module_args, inject, complex_args=None, **kwargs): DCNL 'Run the method'
def return_config_overrides_ini(self, config_overrides, resultant, list_extend=True): DCNL 'Returns string value from a modified config file. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_json(self, config_overrides, resultant, list_extend=True): DCNL 'Returns config json DCNL Its important to note that file ordering will not be preserved as the DCNL information within the json file will be sorted by keys. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_yaml(self, config_overrides, resultant, list_extend=True): DCNL 'Return config yaml. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def _merge_dict(self, base_items, new_items, list_extend=True): DCNL 'Recursively merge new_items into base_items. DCNL :param base_items: ``dict`` DCNL :param new_items: ``dict`` DCNL :returns: ``dict``'
def _load_options_and_status(self, task_vars): DCNL 'Return options and status from module load.'
def run(self, tmp=None, task_vars=None): DCNL 'Run the method'
@staticmethod DCNL def grab_options(complex_args, module_args): DCNL 'Grab passed options from Ansible complex and module args. DCNL :param complex_args: ``dict`` DCNL :param module_args: ``dict`` DCNL :returns: ``dict``'
def return_config_overrides_ini(self, config_overrides, resultant, list_extend=True): DCNL 'Returns string value from a modified config file. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_json(self, config_overrides, resultant, list_extend=True): DCNL 'Returns config json DCNL Its important to note that file ordering will not be preserved as the DCNL information within the json file will be sorted by keys. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_yaml(self, config_overrides, resultant, list_extend=True): DCNL 'Return config yaml. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def _merge_dict(self, base_items, new_items, list_extend=True): DCNL 'Recursively merge new_items into base_items. DCNL :param base_items: ``dict`` DCNL :param new_items: ``dict`` DCNL :returns: ``dict``'
def run(self, conn, tmp, module_name, module_args, inject, complex_args=None, **kwargs): DCNL 'Run the method'
def return_config_overrides_ini(self, config_overrides, resultant, list_extend=True): DCNL 'Returns string value from a modified config file. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_json(self, config_overrides, resultant, list_extend=True): DCNL 'Returns config json DCNL Its important to note that file ordering will not be preserved as the DCNL information within the json file will be sorted by keys. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def return_config_overrides_yaml(self, config_overrides, resultant, list_extend=True): DCNL 'Return config yaml. DCNL :param config_overrides: ``dict`` DCNL :param resultant: ``str`` || ``unicode`` DCNL :returns: ``str``'
def _merge_dict(self, base_items, new_items, list_extend=True): DCNL 'Recursively merge new_items into base_items. DCNL :param base_items: ``dict`` DCNL :param new_items: ``dict`` DCNL :returns: ``dict``'
def _load_options_and_status(self, task_vars): DCNL 'Return options and status from module load.'
def run(self, tmp=None, task_vars=None): DCNL 'Run the method'
def testResults(self): DCNL 'Tests reproducibility of Torch results.'
@parameterized.expand([(None, {'net': {'net': 'CoordinateWiseDeepLSTM', 'net_options': {'layers': (1, 1)}}}), ([('net', ['x_0', 'x_1'])], {'net': {'net': 'CoordinateWiseDeepLSTM', 'net_options': {'layers': (1,)}}}), ([('net1', ['x_0']), ('net2', ['x_1'])], {'net1': {'net': 'CoordinateWiseDeepLSTM', 'net_options': {'layers': (1,)}}, 'net2': {'net': 'Adam'}}), ([('net1', ['x_0']), ('net2', ['x_0'])], {'net1': {'net': 'CoordinateWiseDeepLSTM', 'net_options': {'layers': (1,)}}, 'net2': {'net': 'CoordinateWiseDeepLSTM', 'net_options': {'layers': (1,)}}})]) DCNL def testMultiOptimizer(self, net_assignments, net_config): DCNL 'Tests different variable->net mappings in multi-optimizer problem.'
def testSecondDerivatives(self): DCNL 'Tests second derivatives for simple problem.'
def testConvolutional(self): DCNL 'Tests L2L applied to problem with convolutions.'
def testWhileLoopProblem(self): DCNL 'Tests L2L applied to problem with while loop.'
def testSaveAndLoad(self): DCNL 'Tests saving and loading a meta-optimizer.'
def testTrainable(self): DCNL 'Tests the network contains trainable variables.'
@parameterized.expand([['zeros'], [{'w': 'zeros', 'b': 'zeros', 'bad': 'bad'}], [{'w': tf.zeros_initializer(), 'b': np.array([0])}], [{'linear': {'w': tf.zeros_initializer(), 'b': 'zeros'}}]]) DCNL def testResults(self, initializer): DCNL 'Tests zero updates when last layer is initialized to zero.'
def testTrainable(self): DCNL 'Tests the network contains trainable variables.'
@parameterized.expand([['zeros'], [{'w': 'zeros', 'b': 'zeros', 'bad': 'bad'}], [{'w': tf.zeros_initializer(), 'b': np.array([0])}], [{'linear': {'w': tf.zeros_initializer(), 'b': 'zeros'}}]]) DCNL def testResults(self, initializer): DCNL 'Tests zero updates when last layer is initialized to zero.'
def testNonTrainable(self): DCNL 'Tests the network doesn\'t contain trainable variables.'
def testResults(self): DCNL 'Tests network produces zero updates with learning rate equal to zero.'
def testNonTrainable(self): DCNL 'Tests the network doesn\'t contain trainable variables.'
def testZeroLearningRate(self): DCNL 'Tests network produces zero updates with learning rate equal to zero.'
def __init__(self, **kwargs): DCNL 'Creates a MetaOptimizer. DCNL Args: DCNL **kwargs: A set of keyword arguments mapping network identifiers (the DCNL keys) to parameters that will be passed to networks.Factory (see docs DCNL for more info).  These can be used to assign different optimizee DCNL parameters to different optimizers (see net_assignments in the DCNL meta_loss method).'
def save(self, sess, path=None): DCNL 'Save meta-optimizer.'
def meta_loss(self, make_loss, len_unroll, net_assignments=None, second_derivatives=False): DCNL 'Returns an operator computing the meta-loss. DCNL Args: DCNL make_loss: Callable which returns the optimizee loss; note that this DCNL should create its ops in the default graph. DCNL len_unroll: Number of steps to unroll. DCNL net_assignments: variable to optimizer mapping. If not None, it should be DCNL a list of (k, names) tuples, where k is a valid key in the kwargs DCNL passed at at construction time and names is a list of variable names. DCNL second_derivatives: Use second derivatives (default is false). DCNL Returns: DCNL namedtuple containing (loss, update, reset, fx, x)'
def meta_minimize(self, make_loss, len_unroll, learning_rate=0.01, **kwargs): DCNL 'Returns an operator minimizing the meta-loss. DCNL Args: DCNL make_loss: Callable which returns the optimizee loss; note that this DCNL should create its ops in the default graph. DCNL len_unroll: Number of steps to unroll. DCNL learning_rate: Learning rate for the Adam optimizer. DCNL **kwargs: keyword arguments forwarded to meta_loss. DCNL Returns: DCNL namedtuple containing (step, update, reset, fx, x)'
@abc.abstractmethod DCNL def initial_state_for_inputs(self, inputs, **kwargs): DCNL 'Initial state given inputs.'
def __init__(self, output_size, layers, preprocess_name='identity', preprocess_options=None, scale=1.0, initializer=None, name='deep_lstm'): DCNL 'Creates an instance of `StandardDeepLSTM`. DCNL Args: DCNL output_size: Output sizes of the final linear layer. DCNL layers: Output sizes of LSTM layers. DCNL preprocess_name: Gradient preprocessing class name (in `l2l.preprocess` or DCNL tf modules). Default is `tf.identity`. DCNL preprocess_options: Gradient preprocessing options. DCNL scale: Gradient scaling (default is 1.0). DCNL initializer: Variable initializer for linear layer. See `snt.Linear` and DCNL `snt.LSTM` docs for more info. This parameter can be a string (e.g. DCNL "zeros" will be converted to tf.zeros_initializer). DCNL name: Module name.'
def _build(self, inputs, prev_state): DCNL 'Connects the `StandardDeepLSTM` module into the graph. DCNL Args: DCNL inputs: 2D `Tensor` ([batch_size, input_size]). DCNL prev_state: `DeepRNN` state. DCNL Returns: DCNL `Tensor` shaped as `inputs`.'
def __init__(self, name='cw_deep_lstm', **kwargs): DCNL 'Creates an instance of `CoordinateWiseDeepLSTM`. DCNL Args: DCNL name: Module name. DCNL **kwargs: Additional `DeepLSTM` args.'
def _build(self, inputs, prev_state): DCNL 'Connects the CoordinateWiseDeepLSTM module into the graph. DCNL Args: DCNL inputs: Arbitrarily shaped `Tensor`. DCNL prev_state: `DeepRNN` state. DCNL Returns: DCNL `Tensor` shaped as `inputs`.'
def __init__(self, kernel_shape, name='kernel_deep_lstm', **kwargs): DCNL 'Creates an instance of `KernelDeepLSTM`. DCNL Args: DCNL kernel_shape: Kernel shape (2D `tuple`). DCNL name: Module name. DCNL **kwargs: Additional `DeepLSTM` args.'
def _build(self, inputs, prev_state): DCNL 'Connects the KernelDeepLSTM module into the graph. DCNL Args: DCNL inputs: 4D `Tensor` (convolutional filter). DCNL prev_state: `DeepRNN` state. DCNL Returns: DCNL `Tensor` shaped as `inputs`.'
def initial_state_for_inputs(self, inputs, **kwargs): DCNL 'Batch size given inputs.'
def __init__(self, learning_rate=0.001, name='sgd'): DCNL 'Creates an instance of the Identity optimizer network. DCNL Args: DCNL learning_rate: constant learning rate to use. DCNL name: Module name.'
def __init__(self, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, name='adam'): DCNL 'Creates an instance of Adam.'
def _build(self, g, prev_state): DCNL 'Connects the Adam module into the graph.'
def testSimple(self): DCNL 'Tests L2L applied to simple problem.'
def _build(self, gradients): DCNL 'Connects the LogAndSign module into the graph. DCNL Args: DCNL gradients: `Tensor` of gradients with shape `[d_1, ..., d_n]`. DCNL Returns: DCNL `Tensor` with shape `[d_1, ..., d_n-1, 2 * d_n]`. The first `d_n` elements DCNL along the nth dimension correspond to the log output and the remaining DCNL `d_n` elements to the sign output.'
def setUp(self): DCNL 'Method called to prepare the test fixture. This is called by the DCNL unittest framework immediately before calling the test method; any exception DCNL raised by this method will be considered an error rather than a test DCNL failure. The default implementation does nothing.'
def tearDown(self): DCNL 'Method called immediately after the test method has been called and the DCNL result recorded. This is called even if the test method raised an exception, DCNL so the implementation in subclasses may need to be particularly careful DCNL about checking internal state. Any exception raised by this method will be DCNL considered an error rather than a test failure. This method will only be DCNL called if the setUp() succeeds, regardless of the outcome of the test DCNL method. The default implementation does nothing.'
def shortDescription(self): DCNL 'Override to force unittest framework to use test method names instead DCNL of docstrings in the report.'
def _printTestHeader(self): DCNL 'Print out what test we are running'
def _setDataPath(self, env): DCNL 'Put the path to our datasets int the NTA_DATA_PATH variable which DCNL will be used to set the environment for each of the workers DCNL Parameters: DCNL env: The current environment dict'
def _launchWorkers(self, cmdLine, numWorkers): DCNL 'Launch worker processes to execute the given command line DCNL Parameters: DCNL cmdLine: The command line for each worker DCNL numWorkers: number of workers to launch DCNL retval: list of workers'
def _getJobInfo(self, cjDAO, workers, jobID): DCNL 'Return the job info for a job DCNL Parameters: DCNL cjDAO:   client jobs database instance DCNL workers: list of workers for this job DCNL jobID:   which job ID DCNL retval: job info'
def _generateHSJobParams(self, expDirectory=None, hsImp='v2', maxModels=2, predictionCacheMaxRecords=None, dataPath=None, maxRecords=10): DCNL 'This method generates a canned Hypersearch Job Params structure based DCNL on some high level options DCNL Parameters: DCNL predictionCacheMaxRecords: DCNL If specified, determine the maximum number of records in DCNL the prediction cache. DCNL dataPath:      When expDirectory is not specified, this is the data file DCNL to be used for the operation. If this value is not specified, DCNL it will use the /extra/qa/hotgym/qa_hotgym.csv.'
def _runPermutationsLocal(self, jobParams, loggingLevel=logging.INFO, env=None, waitForCompletion=True, continueJobId=None, ignoreErrModels=False): DCNL 'This runs permutations on the given experiment using just 1 worker DCNL in the current process DCNL Parameters: DCNL jobParams:        filled in job params for a hypersearch DCNL loggingLevel:    logging level to use in the Hypersearch worker DCNL env:             if not None, this is a dict of environment variables DCNL that should be sent to each worker process. These can DCNL aid in re-using the same description/permutations file DCNL for different tests. DCNL waitForCompletion: If True, wait for job to complete before returning DCNL If False, then return resultsInfoForAllModels and DCNL metricResults will be None DCNL continueJobId:    If not None, then this is the JobId of a job we want DCNL to continue working on with another worker. DCNL ignoreErrModels:  If true, ignore erred models DCNL retval:          (jobId, jobInfo, resultsInfoForAllModels, metricResults)'
def _runPermutationsCluster(self, jobParams, loggingLevel=logging.INFO, maxNumWorkers=4, env=None, waitForCompletion=True, ignoreErrModels=False, timeoutSec=DEFAULT_JOB_TIMEOUT_SEC): DCNL 'Given a prepared, filled in jobParams for a hypersearch, this starts DCNL the job, waits for it to complete, and returns the results for all DCNL models. DCNL Parameters: DCNL jobParams:        filled in job params for a hypersearch DCNL loggingLevel:    logging level to use in the Hypersearch worker DCNL maxNumWorkers:    max # of worker processes to use DCNL env:             if not None, this is a dict of environment variables DCNL that should be sent to each worker process. These can DCNL aid in re-using the same description/permutations file DCNL for different tests. DCNL waitForCompletion: If True, wait for job to complete before returning DCNL If False, then return resultsInfoForAllModels and DCNL metricResults will be None DCNL ignoreErrModels:  If true, ignore erred models DCNL retval:          (jobID, jobInfo, resultsInfoForAllModels, metricResults)'
def runPermutations(self, expDirectory, hsImp='v2', maxModels=2, maxNumWorkers=4, loggingLevel=logging.INFO, onCluster=False, env=None, waitForCompletion=True, continueJobId=None, dataPath=None, maxRecords=None, timeoutSec=None, ignoreErrModels=False, predictionCacheMaxRecords=None, **kwargs): DCNL 'This runs permutations on the given experiment using just 1 worker DCNL Parameters: DCNL expDirectory:    directory containing the description.py and permutations.py DCNL hsImp:           which implementation of Hypersearch to use DCNL maxModels:       max # of models to generate DCNL maxNumWorkers:   max # of workers to use, N/A if onCluster is False DCNL loggingLevel:    logging level to use in the Hypersearch worker DCNL onCluster:       if True, run on the Hadoop cluster DCNL env:             if not None, this is a dict of environment variables DCNL that should be sent to each worker process. These can DCNL aid in re-using the same description/permutations file DCNL for different tests. DCNL waitForCompletion: If True, wait for job to complete before returning DCNL If False, then return resultsInfoForAllModels and DCNL metricResults will be None DCNL continueJobId:    If not None, then this is the JobId of a job we want DCNL to continue working on with another worker. DCNL ignoreErrModels:  If true, ignore erred models DCNL maxRecords:       This value is passed to the function, _generateHSJobParams(), DCNL to represent the maximum number of records to generate for DCNL the operation. DCNL dataPath:         This value is passed to the function, _generateHSJobParams(), DCNL which points to the data file for the operation. DCNL predictionCacheMaxRecords: DCNL If specified, determine the maximum number of records in DCNL the prediction cache. DCNL retval:          (jobID, jobInfo, resultsInfoForAllModels, metricResults, DCNL minErrScore)'
def testSimpleV2(self, onCluster=False, env=None, **kwargs): DCNL 'Try running simple permutations'
def testDeltaV2(self, onCluster=False, env=None, **kwargs): DCNL 'Try running a simple permutations with delta encoder DCNL Test which tests the delta encoder. Runs a swarm of the sawtooth dataset DCNL With a functioning delta encoder this should give a perfect result DCNL DEBUG: disabled temporarily because this test takes too long!!!'
def testSimpleV2NoSpeculation(self, onCluster=False, env=None, **kwargs): DCNL 'Try running a simple permutations'
def testHTMPredictionModelV2(self, onCluster=False, env=None, maxModels=2, **kwargs): DCNL 'Try running a simple permutations using an actual CLA model, not DCNL a dummy'
def testCLAMultistepModel(self, onCluster=False, env=None, maxModels=2, **kwargs): DCNL 'Try running a simple permutations using an actual CLA model, not DCNL a dummy'
def testLegacyCLAMultistepModel(self, onCluster=False, env=None, maxModels=2, **kwargs): DCNL 'Try running a simple permutations using an actual CLA model, not DCNL a dummy. This is a legacy CLA multi-step model that doesn\'t declare a DCNL separate \'classifierOnly\' encoder for the predicted field.'
def testFilterV2(self, onCluster=False): DCNL 'Try running a simple permutations'
def testLateWorker(self, onCluster=False): DCNL 'Try running a simple permutations where a worker comes in late, DCNL after the some models have already been evaluated'
def testOrphanedModel(self, onCluster=False, modelRange=(0, 1)): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testOrphanedModelGen1(self): DCNL 'Run a worker on a model for a while, then have it exit before a DCNL model finishes in gen index 2. Then, run another worker, which should detect DCNL the orphaned model.'
def testErredModel(self, onCluster=False, modelRange=(6, 7)): DCNL 'Run with 1 or more models generating errors'
def testJobFailModel(self, onCluster=False, modelRange=(6, 7)): DCNL 'Run with 1 or more models generating jobFail exception'
def testTooManyErredModels(self, onCluster=False, modelRange=(5, 10)): DCNL 'Run with too many models generating errors'
def testFieldThreshold(self, onCluster=False, env=None, **kwargs): DCNL 'Test minimum field contribution threshold for a field to be included in further sprints'
def testSpatialClassification(self, onCluster=False, env=None, **kwargs): DCNL 'Try running a spatial classification swarm'
def testAlwaysInputPredictedField(self, onCluster=False, env=None, **kwargs): DCNL 'Run a swarm where \'inputPredictedField\' is set in the permutations DCNL file. The dummy model for this swarm is designed to give the lowest DCNL error when the predicted field is INCLUDED, so make sure we don\'t get DCNL this low error'
def testFieldThresholdNoPredField(self, onCluster=False, env=None, **kwargs): DCNL 'Test minimum field contribution threshold for a field to be included DCNL in further sprints when doing a temporal search that does not require DCNL the predicted field.'
def testSimpleV2(self): DCNL 'Try running a simple permutations'
def testDeltaV2(self): DCNL 'Try running a simple permutations'
def testSmartSpeculation(self, onCluster=True, env=None, **kwargs): DCNL 'Try running a simple permutations'
def testSmartSpeculationSpatialClassification(self, onCluster=True, env=None, **kwargs): DCNL 'Test that smart speculation does the right thing with spatial DCNL classification models. This also applies to temporal models where the DCNL predicted field is optional (or excluded) since Hypersearch treats them DCNL the same.'
def testFieldBranching(self, onCluster=True, env=None, **kwargs): DCNL 'Try running a simple permutations'
def testFieldThreshold(self, onCluster=True, env=None, **kwargs): DCNL 'Test minimum field contribution threshold for a field to be included in further sprints'
def testFieldContributions(self, onCluster=True, env=None, **kwargs): DCNL 'Try running a simple permutations'
def testHTMPredictionModelV2(self): DCNL 'Try running a simple permutations through a real CLA model'
def testCLAMultistepModel(self): DCNL 'Try running a simple permutations through a real CLA model that DCNL uses multistep'
def testLegacyCLAMultistepModel(self): DCNL 'Try running a simple permutations through a real CLA model that DCNL uses multistep'
def testSimpleV2VariableWaits(self): DCNL 'Try running a simple permutations where certain field combinations DCNL take longer to complete, this lets us test that we successfully kill DCNL models in bad swarms that are still running.'
def testOrphanedModel(self, modelRange=(0, 2)): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testTwoOrphanedModels(self, modelRange=(0, 2)): DCNL 'Test behavior when a worker marks 2 models orphaned at the same time.'
def testOrphanedModelGen1(self): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testOrphanedModelMaxModels(self): DCNL 'Test to make sure that the maxModels parameter doesn\'t include DCNL orphaned models. Run a test with maxModels set to 2, where one becomes DCNL orphaned. At the end, there should be 3 models in the models table, one DCNL of which will be the new model that adopted the orphaned model'
def testOrphanedModelConnection(self): DCNL 'Test for the correct behavior when a model uses a different connection id DCNL than what is stored in the db. The correct behavior is for the worker to log DCNL this as a warning and move on to a new model'
def testErredModel(self, modelRange=(6, 7)): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testJobFailModel(self): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testTooManyErredModels(self, modelRange=(5, 10)): DCNL 'Run a worker on a model for a while, then have it exit before the DCNL model finishes. Then, run another worker, which should detect the orphaned DCNL model.'
def testSpatialClassification(self): DCNL 'Try running a simple permutations'
def testMatureInterleaved(self): DCNL 'Test to make sure that the best model continues running even when it has DCNL matured. The 2nd model (constant) will be marked as mature first and will DCNL continue to run till the end. The 2nd model reaches maturity and should DCNL stop before all the records are consumed, and should be the best model DCNL because it has a lower error'
def testConstant(self): DCNL 'Sanity check to make sure that when only 1 model is running, it continues DCNL to run even when it has reached maturity'
def testSimple(self, useCluster=False): DCNL 'Run with one really bad swarm to see if terminator picks it up correctly'
@classmethod DCNL def _processArgs(cls): DCNL 'Parse our command-line args/options and strip them from sys.argv DCNL Returns the tuple (parsedOptions, remainingArgs)'
@classmethod DCNL def parseArgs(cls): DCNL 'Returns the test arguments after parsing'
@classmethod DCNL def consumeArgs(cls): DCNL 'Consumes the test arguments and returns the remaining arguments meant DCNL for unittest.man'
def _testSequence(self, trainingSet, nSequencePresentations=1, tm=None, testSequences=None, doResets=True, relativeFrequencies=None): DCNL 'Test a single set of sequences once and check that individual DCNL predictions reflect the true relative frequencies. Return a success code DCNL as well as the trained TM. Success code is 1 for pass, 0 for fail. DCNL The trainingSet is a set of 3 sequences that share the same first 4 DCNL elements but differ in the 5th element. After feeding in the first 4 elements, DCNL we want to correctly compute the confidences for the 5th element based on DCNL the frequency with which each sequence was presented during learning. DCNL For example: DCNL trainingSequences[0]: (10% probable) DCNL pat A: (array([0, 1, 2, 3, 4]),) DCNL pat B: (array([5, 6, 7, 8, 9]),) DCNL pat C: (array([10, 11, 12, 13, 14]),) DCNL pat D: (array([15, 16, 17, 18, 19]),) DCNL pat E: (array([20, 21, 22, 23, 24]),) DCNL trainingSequences[1]: (20% probable) DCNL pat A: (array([0, 1, 2, 3, 4]),) DCNL pat B: (array([5, 6, 7, 8, 9]),) DCNL pat C: (array([10, 11, 12, 13, 14]),) DCNL pat D: (array([15, 16, 17, 18, 19]),) DCNL pat F: (array([25, 26, 27, 28, 29]),) DCNL trainingSequences[2]: (70% probable) DCNL pat A: (array([0, 1, 2, 3, 4]),) DCNL pat B: (array([5, 6, 7, 8, 9]),) DCNL pat C: (array([10, 11, 12, 13, 14]),) DCNL pat D: (array([15, 16, 17, 18, 19]),) DCNL pat G: (array([30, 31, 32, 33, 34]),) DCNL allTrainingPatterns: DCNL pat A: (array([0, 1, 2, 3, 4]),) DCNL pat B: (array([5, 6, 7, 8, 9]),) DCNL pat C: (array([10, 11, 12, 13, 14]),) DCNL pat D: (array([15, 16, 17, 18, 19]),) DCNL pat E: (array([20, 21, 22, 23, 24]),) DCNL pat F: (array([25, 26, 27, 28, 29]),) DCNL pat G: (array([30, 31, 32, 33, 34]),)'
def testFastLearning(self): DCNL 'Test with fast learning, make sure PAM allows us to train with fewer DCNL repeats of the training data.'
def testSlowLearning(self): DCNL 'Test with slow learning, make sure PAM allows us to train with fewer DCNL repeats of the training data.'
def testSlowLearningWithOverlap(self): DCNL 'Test with slow learning, some overlap in the patterns, and TM thresholds DCNL of 80% of newSynapseCount DCNL Make sure PAM allows us to train with fewer repeats of the training data.'
def testForbesLikeData(self): DCNL 'Test with "Forbes-like" data. A bunch of sequences of lengths between 2 DCNL and 10 elements long. DCNL We will test with both fast and slow learning. DCNL Make sure PAM allows us to train with fewer repeats of the training data.'
def runTestKNNClassifier(self, short=0): DCNL 'Test the KNN classifier in this module. short can be: DCNL 0 (short), 1 (medium), or 2 (long)'
def testFirstOrder(self): DCNL 'Basic first order sequences'
def testHighOrder(self): DCNL 'High order sequences (in order)'
def testHighOrderAlternating(self): DCNL 'High order sequences (alternating)'
def testEndlesslyRepeating(self): DCNL 'Endlessly repeating sequence of 2 elements'
def testEndlesslyRepeatingWithNoNewSynapses(self): DCNL 'Endlessly repeating sequence of 2 elements with maxNewSynapseCount=1'
def testLongRepeatingWithNovelEnding(self): DCNL 'Long repeating sequence with novel pattern at the end'
def testSingleEndlesslyRepeating(self): DCNL 'A single endlessly repeating pattern'
def _printOneTrainingVector(self, x): DCNL 'Print a single vector succinctly.'
def _printAllTrainingSequences(self, trainingSequences): DCNL 'Print all vectors'
def _setVerbosity(self, verbosity, tm, tmPy): DCNL 'Set verbosity level on the TM'
def _createTMs(self, numCols, fixedResources=False, checkSynapseConsistency=True): DCNL 'Create an instance of the appropriate temporal memory. We isolate DCNL all parameters as constants specified here.'
def _getSimplePatterns(self, numOnes, numPatterns): DCNL 'Very simple patterns. Each pattern has numOnes consecutive DCNL bits on. There are numPatterns*numOnes bits in the vector. These patterns DCNL are used as elements of sequences when building up a training set.'
def _buildSegmentLearningTrainingSet(self, numOnes=10, numRepetitions=10): DCNL 'A simple sequence of 5 patterns. The left half of the vector contains DCNL the pattern elements, each with numOnes consecutive bits. The right half DCNL contains numOnes random bits. The function returns a pair: DCNL trainingSequences:    A list containing numRepetitions instances of the DCNL above sequence DCNL testSequence:         A single clean test sequence containing the 5 patterns DCNL but with no noise on the right half'
def _buildSL2TrainingSet(self, numOnes=10, numRepetitions=10): DCNL 'Three simple sequences, composed of the same 5 static patterns. The left DCNL half of the vector contains the pattern elements, each with numOnes DCNL consecutive bits. The right half contains numOnes random bits. DCNL Sequence 1 is: p0, p1, p2, p3, p4 DCNL Sequence 2 is: p4, p3, p2, p1, p0 DCNL Sequence 3 is: p2, p0, p4, p1, p3 DCNL The function returns a pair: DCNL trainingSequences:    A list containing numRepetitions instances of the DCNL above sequences DCNL testSequence:         Clean test sequences with no noise on the right half'
def _testSegmentLearningSequence(self, tms, trainingSequences, testSequences, doResets=True): DCNL 'Train the given TM once on the entire training set. on the Test a single DCNL set of sequences once and check that individual predictions reflect the true DCNL relative frequencies. Return a success code. Success code is 1 for pass, 0 DCNL for fail.'
def _testSL1(self, numOnes=10, numRepetitions=6, fixedResources=False, checkSynapseConsistency=True): DCNL 'Test segment learning'
def _testSL2(self, numOnes=10, numRepetitions=10, fixedResources=False, checkSynapseConsistency=True): DCNL 'Test segment learning'
def test_SL1NoFixedResources(self): DCNL 'Test segment learning without fixed resources'
def test_SL1WithFixedResources(self): DCNL 'Test segment learning with fixed resources'
def test_SL2NoFixedResources(self): DCNL 'Test segment learning without fixed resources'
def test_SL2WithFixedResources(self): DCNL 'Test segment learning with fixed resources'
def testB1(self): DCNL 'Basic sequence learner.  M=1, N=100, P=1.'
def testB3(self): DCNL 'N=300, M=1, P=1. (See how high we can go with N)'
def testB4(self): DCNL 'N=100, M=3, P=1. (See how high we can go with N*M)'
def testB5(self): DCNL 'Like B1 but with cellsPerColumn = 4. DCNL First order sequences should still work just fine.'
def testB6(self): DCNL 'Like B4 but with cellsPerColumn = 4. DCNL First order sequences should still work just fine.'
def testB7(self): DCNL 'Like B1 but with slower learning. DCNL Set the following parameters differently: DCNL initialPermanence = 0.2 DCNL connectedPermanence = 0.7 DCNL permanenceIncrement = 0.2 DCNL Now we train the TM with the B1 sequence 4 times (P=4). This will increment DCNL the permanences to be above 0.8 and at that point the inference will be correct. DCNL This test will ensure the basic match function and segment activation rules are DCNL working correctly.'
def testB8(self): DCNL 'Like B7 but with 4 cells per column. DCNL Should still work.'
def testB9(self): DCNL 'Like B7 but present the sequence less than 4 times. DCNL The inference should be incorrect.'
def testB11(self): DCNL 'Like B5, but with activationThreshold = 8 and with each pattern DCNL corrupted by a small amount of spatial noise (X = 0.05).'
def testH1(self): DCNL 'Learn two sequences with a short shared pattern. DCNL Parameters should be the same as B1. DCNL Since cellsPerColumn == 1, it should make more predictions than necessary.'
def testH2(self): DCNL 'Same as H1, but with cellsPerColumn == 4, and train multiple times. DCNL It should make just the right number of predictions.'
def testH3(self): DCNL 'Like H2, except the shared subsequence is in the beginning. DCNL (e.g. "ABCDEF" and "ABCGHIJ") At the point where the shared subsequence DCNL ends, all possible next patterns should be predicted. As soon as you see DCNL the first unique pattern, the predictions should collapse to be a perfect DCNL prediction.'
def testH4(self): DCNL 'Shared patterns. Similar to H2 except that patterns are shared between DCNL sequences.  All sequences are different shufflings of the same set of N DCNL patterns (there is no shared subsequence).'
def testH5(self): DCNL 'Combination of H4) and H2). DCNL Shared patterns in different sequences, with a shared subsequence.'
def testH9(self): DCNL 'Sensitivity to small amounts of spatial noise during inference DCNL (X = 0.05). Parameters the same as B11, and sequences like H2.'
def testH10(self): DCNL 'Orphan Decay mechanism reduce predicted inactive cells (extra predictions). DCNL Test feeds in noisy sequences (X = 0.05) to TM with and without orphan decay. DCNL TM with orphan decay should has many fewer predicted inactive columns. DCNL Parameters the same as B11, and sequences like H9.'
def getOpfExperimentPath(self, experimentName): DCNL 'experimentName:     e.g., "gym"; this string will be used to form DCNL a directory path to the experiment. DCNL Returns:            absolute path to the experiment directory'
def setUp(self): DCNL 'Method called to prepare the test fixture. This is called immediately DCNL before calling the test method; any exception raised by this method will be DCNL considered an error rather than a test failure. The default implementation DCNL does nothing.'
def tearDown(self): DCNL 'Method called immediately after the test method has been called and the DCNL result recorded. This is called even if the test method raised an exception, DCNL so the implementation in subclasses may need to be particularly careful DCNL about checking internal state. Any exception raised by this method will be DCNL considered an error rather than a test failure. This method will only be DCNL called if the setUp() succeeds, regardless of the outcome of the test DCNL method. The default implementation does nothing.'
def shortDescription(self): DCNL 'Override to force unittest framework to use test method names instead DCNL of docstrings in the report.'
def executePositiveOpfExperiment(self, experimentName, short=False): DCNL 'Executes a positive OPF RunExperiment test as a subprocess and validates DCNL its exit status. DCNL experimentName:     e.g., "gym"; this string will be used to form DCNL a directory path to the experiment. DCNL short:              if True, attempt to run the experiment with --testMode DCNL flag turned on, which causes all inference and training DCNL iteration counts to be overridden with small counts. DCNL Returns:            result from _executeExternalCmdAndReapOutputs'
def __executePositiveRunExperimentTest(self, runnerPath, experimentDirPath, customOptions=[], short=False): DCNL 'Executes a positive RunExperiment.py test and performs DCNL basic validation DCNL runnerPath:         experiment running (LPF or OPF RunExperiment.py path) DCNL experimentDirPath:  directory containing the description.py file of interest DCNL short:              if True, attempt to run the experiment with --testMode DCNL flag turned on, which causes all inference and training DCNL iteration counts to be overridden with small counts. DCNL NOTE: if the (possibly aggregated) dataset has fewer DCNL rows than the count overrides, then an LPF experiment DCNL will fail. DCNL Returns:            result from _executeExternalCmdAndReapOutputs'
def setUp(self): DCNL 'Method called to prepare the test fixture. This is called by the DCNL unittest framework immediately before calling the test method; any exception DCNL raised by this method will be considered an error rather than a test DCNL failure. The default implementation does nothing.'
def tearDown(self): DCNL 'Method called immediately after the test method has been called and the DCNL result recorded. This is called even if the test method raised an exception, DCNL so the implementation in subclasses may need to be particularly careful DCNL about checking internal state. Any exception raised by this method will be DCNL considered an error rather than a test failure. This method will only be DCNL called if the setUp() succeeds, regardless of the outcome of the test DCNL method. The default implementation does nothing.'
def shortDescription(self): DCNL 'Override to force unittest framework to use test method names instead DCNL of docstrings in the report.'
def getModules(self, expDesc, hsVersion='v2'): DCNL 'This does the following: DCNL 1.) Calls ExpGenerator to generate a base description file and permutations DCNL file from expDescription. DCNL 2.) Verifies that description.py and permutations.py are valid python DCNL modules that can be loaded DCNL 3.) Returns the loaded base description module and permutations module DCNL Parameters: DCNL expDesc:       JSON format experiment description DCNL hsVersion:     which version of hypersearch to use (\'v2\'; \'v1\' was dropped) DCNL retval:        (baseModule, permutationsModule)'
def runBaseDescriptionAndPermutations(self, expDesc, hsVersion, maxModels=2): DCNL 'This does the following: DCNL 1.) Calls ExpGenerator to generate a base description file and permutations DCNL file from expDescription. DCNL 2.) Verifies that description.py and permutations.py are valid python DCNL modules that can be loaded DCNL 3.) Runs the base description.py as an experiment using OPF RunExperiment. DCNL 4.) Runs a Hypersearch using the generated permutations.py by passing it DCNL to HypersearchWorker. DCNL Parameters: DCNL expDesc:       JSON format experiment description DCNL hsVersion:     which version of hypersearch to use (\'v2\'; \'v1\' was dropped) DCNL retval:        list of model results'
def assertValidSwarmingAggregations(self, expDesc, expectedAttempts): DCNL 'Test that the set of aggregations produced for a swarm are correct DCNL Parameters: DCNL expDesc:   JSON experiment description DCNL expectedAttempts: list of (minAggregationMultiple, predictionSteps) pairs DCNL that we expect to find in the aggregation choices.'
def test_ShowSchema(self): DCNL 'Test showing the schema'
def test_PredictionElement(self): DCNL 'Test correct behavior in response to different settings in the DCNL prediction element'
def test_Metrics(self): DCNL 'Test to make sure that the correct metrics are generated'
def test_IncludedFields(self): DCNL 'Test correct behavior in response to different settings in the DCNL includedFields element'
def test_Aggregation(self): DCNL 'Test that aggregation gets pulled out of the streamDef as it should'
def test_ResetPeriod(self): DCNL 'Test that reset period gets handled correctly'
def test_RunningExperimentHSv2(self): DCNL 'Try running a basic Hypersearch V2 experiment and permutations'
def test_MultiStep(self): DCNL 'Test the we correctly generate a multi-step prediction experiment'
def test_AggregationSwarming(self): DCNL 'Test the we correctly generate a multi-step prediction experiment that DCNL uses aggregation swarming'
def test_SwarmSize(self): DCNL 'Test correct behavior in response to different settings in the DCNL swarmSize element'
def test_FixedFields(self): DCNL 'Test correct behavior in response to setting the fixedFields swarming DCNL option.'
def test_FastSwarmModelParams(self): DCNL 'Test correct behavior in response to setting the fastSwarmModelParams DCNL swarming option.'
def test_AnomalyParams(self): DCNL 'Test correct behavior in response to setting the anomalyParams DCNL experiment description options'
def test_NontemporalClassification(self): DCNL 'Test the we correctly generate a Nontemporal classification experiment'
def testSaveAndReload(self): DCNL 'This function tests saving and loading. It will train a network for 500 DCNL iterations, then save it and reload it as a second network instance. It will DCNL then run both networks for 100 iterations and ensure they return identical DCNL results.'
def testMaxEnabledPhase(self): DCNL 'Test maxEnabledPhase'
def testExperimentResults(self): DCNL 'Run specific experiments and verify that they are producing the correct DCNL results. DCNL opfDir is the examples/opf directory in the install path DCNL and is used to find run_opf_experiment.py DCNL The testdir is the directory that contains the experiments we will be DCNL running. When running in the auto-build setup, this will be a temporary DCNL directory that has had this script, as well as the specific experiments DCNL we will be running, copied into it by the qa/autotest/prediction_results.py DCNL script. DCNL When running stand-alone from the command line, this will point to the DCNL examples/prediction directory in the install tree (same as predictionDir)'
def shortDescription(self): DCNL 'Override to force unittest framework to use test method names instead DCNL of docstrings in the report.'
def compareOPFPredictionFiles(self, path1, path2, temporal, maxMismatches=None): DCNL 'Compare temporal or non-temporal predictions for the given experiment DCNL that just finished executing DCNL experimentName:     e.g., "gym"; this string will be used to form DCNL a directory path to the experiments. DCNL maxMismatches:      Maximum number of row mismatches to report before DCNL terminating the comparison; None means: report all DCNL mismatches DCNL Returns:            True if equal; False if different'
def _openOpfPredictionCsvFile(self, filepath): DCNL 'Open an OPF prediction CSV file and advance it to the first data row DCNL Returns:      the tuple (csvReader, fieldNames), where \'csvReader\' is the DCNL csv reader object, and \'fieldNames\' is a sequence of field DCNL names.'
def _testSamePredictions(self, experiment, predSteps, checkpointAt, predictionsFilename, additionalFields=None, newSerialization=False): DCNL 'Test that we get the same predictions out from the following two DCNL scenarios: DCNL a_plus_b: Run the network for \'a\' iterations followed by \'b\' iterations DCNL a, followed by b: Run the network for \'a\' iterations, save it, load it DCNL back in, then run for \'b\' iterations. DCNL Parameters: DCNL experiment:   base directory of the experiment. This directory should DCNL contain the following: DCNL base.py DCNL a_plus_b/description.py DCNL a/description.py DCNL b/description.py DCNL The sub-directory description files should import the DCNL base.py and only change the first and last record used DCNL from the data file. DCNL predSteps:   Number of steps ahead predictions are for DCNL checkpointAt: Number of iterations that \'a\' runs for. DCNL IMPORTANT: This must match the number of records that DCNL a/description.py runs for - it is NOT dynamically stuffed into DCNL the a/description.py. DCNL predictionsFilename: The name of the predictions file that the OPF DCNL generates for this experiment (for example DCNL \'DefaulTask.NontemporalMultiStep.predictionLog.csv\') DCNL newSerialization: Whether to use new capnproto serialization.'
@staticmethod DCNL def _testBackwardsCompatibility(experiment, checkpointName): DCNL 'Test that we can load in a checkpoint saved by an earlier version of DCNL the OPF. DCNL Parameters: DCNL experiment:       Directory of the experiment. DCNL checkpointName:   which checkpoint to verify'
def test_NonTemporalMultiStep(self): DCNL 'Test that we get the same predictions out of a model that was DCNL saved and reloaded from a checkpoint as we do from one that runs DCNL continuously.'
@unittest.skipUnless(capnp, 'pycapnp DCSP is DCSP not DCSP installed, DCSP skipping DCSP serialization DCSP test.') DCNL def test_NonTemporalMultiStepNew(self): DCNL 'Test that we get the same predictions out of a model that was DCNL saved and reloaded from a checkpoint as we do from one that runs DCNL continuously. DCNL Uses new capnproto serialization.'
@unittest.skip('Currently DCSP Fails: DCSP NUP-1864') DCNL def test_TemporalMultiStep(self): DCNL 'Test that we get the same predictions out of a model that was DCNL saved and reloaded from a checkpoint as we do from one that runs DCNL continuously.'
@unittest.skip('Currently DCSP Fails: DCSP NUP-1864') DCNL def test_TemporalAnomaly(self): DCNL 'Test that we get the same predictions out of a model that was DCNL saved and reloaded from a checkpoint as we do from one that runs DCNL continuously.'
@unittest.skip("We DCSP aren't DCSP currently DCSP supporting DCSP serialization DCSP backward DCSP compatibility") DCNL def test_BackwardsCompatibility(self): DCNL 'Test that we can load in a checkpoint saved by an earlier version of DCNL the OPF.'
def setUp(self): DCNL 'Method called to prepare the test fixture. This is called immediately DCNL before calling the test method; any exception raised by this method will be DCNL considered an error rather than a test failure. The default implementation DCNL does nothing. DCNL NOTE: this is called once for every sub-test and a new AggregationTests DCNL instance is constructed for every sub-test.'
def testAll(self): DCNL 'Run all the tests in our suite, catching any exceptions that might be DCNL thrown.'
def _testNetLoad(self): DCNL 'Test loading a network with this sensor in it.'
def _testFakeLoadFile(self): DCNL 'Test reading in a fake file.'
def _testRunWithoutFile(self): DCNL 'Test running the network without a file loaded. This should be run DCNL before any file has been loaded in!'
def _testRepeatCount(self): DCNL 'Test setting and getting repeat count using parameters.'
def _testLoadFile(self, dataFile, fileFormat='', iterations=''): DCNL 'Test reading our sample vector file. The sample file DCNL has 5 vectors of the correct length, plus one with incorrect length. DCNL The sensor should ignore the last line.'
def _testAppendFile(self, dataFile, fileFormat='', iterations='', numVecs=''): DCNL 'Test appending our sample vector file. The sample file DCNL has 5 vectors of the correct length, plus one with incorrect length. DCNL The sensor should ignore the last line.'
def _testRun(self): DCNL 'This is the basic workhorse test routine. It runs the net several times DCNL to ensure the sensor is outputting the correct values. The routine tests DCNL looping, tests each vector, and tests repeat count.'
def _testOutputCounts(self, vectorCount): DCNL 'Test maxOutputVectorCount with different repeat counts.'
def _testPosition(self): DCNL 'Test setting and getting position parameter. Run compute once to verify DCNL it went to the right position.'
def _testScaling(self, dataFile, fileFormat=''): DCNL 'Specific tests for setScaleVector, setOffsetVector, and scalingMode'
def _testUnknownCommand(self): DCNL 'Test that exception is thrown when unknown execute command sent.'
def _testOptionalOutputs(self): DCNL 'This is the basic workhorse test routine. It runs the net several times DCNL to ensure the sensor is outputting the correct values. The routine tests DCNL looping, tests each vector, and tests repeat count.'
def testTMPyCpp(self): DCNL 'Test compatibility between C++ and Python TM implementation.'
def __updateProcessCounter(self): DCNL 'Function that iterates through the running Processes DCNL and counts the number of processes that are currently alive. DCNL Sets numRunningProcs to this count'
def cancelJobs(self): DCNL 'Function that cancels all the jobs in the DCNL process queue.'
def runJobs(self, maxJobs): DCNL 'Function that launched Hypersearch benchmark jobs. DCNL Runs jobs contained in self.testQ, until maxJobs are running DCNL in parallel at which point it waits until some jobs finish.'
def setUpExportDicts(self): DCNL 'Setup up a dict of branchings and particles'
def benchmarkHotGym(self): DCNL 'Try running a basic experiment and permutations.'
def benchmarkSine(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkTwoVars(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkThreeVars(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkFourVars(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkCategories(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkTwoVarsSquare(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkSawtooth(self): DCNL 'Try running a basic experiment and permutations'
def benchmarkHotGymSC(self): DCNL 'The HotGym dataset, only the first gym, solved using spatial DCNL classification. This model learns the association between the date/time DCNL stamp and the consumption - the model does not get consumption fed in at DCNL the bottom.'
def generateModules(self, expDesc, outdir): DCNL 'This calls ExpGenerator to generate a base description file and DCNL permutations file from expDesc. DCNL Parameters: DCNL expDesc:       Experiment description dict DCNL outDir:        Which output directory to use'
def testOPFBenchmarks(self): DCNL 'Run the entire set of OPF benchmark experiments'
def testTemporalAnomalyModelFactory(self): DCNL 'Simple test to assert that ModelFactory.create() with a given specific DCNL Temporal Anomaly configuration will return a model that can return DCNL inferences'
def setUp(self): DCNL 'Set up an interpreter directing output to a BytesIO stream.'
def testPrimitives(self): DCNL 'Verify basic primitives'
def testConditionals(self): DCNL 'Verify basic if statements'
def testBlacklist(self): DCNL 'Verify that src with blacklisted nodes fail'
def testParse(self): DCNL 'Verify that parse() returns an AST instance'
def testCompile(self): DCNL 'Verify that parse() returns a compile()-able AST'
def testSum(self): DCNL 'Verify that sum() works and is correct'
def testRecursive(self): DCNL 'Verify that a recursive function raises a runtime error'
def testOpen(self): DCNL 'Verify that an attempt to open a file raises a runtime error'
def testModelParams(self): DCNL 'Test that clusterParams loads returns a valid dict that can be instantiated DCNL as a HTMPredictionModel.'
def testWindowedTrivialAAE(self): DCNL 'Trivial Average Error metric test'
def testWindowedTrivialAccuract(self): DCNL 'Trivial AAE metric test'
def testWindowedTrivialAccuracy(self): DCNL 'Trivial Accuracy metric test'
def testWindowedTrivialAverageError(self): DCNL 'Trivial Average Error metric test'
def testMultistepAAE(self): DCNL 'Multistep AAE metric test'
def testMultistepAAEMultipleSteps(self): DCNL 'Multistep AAE metric test, predicting 2 different step sizes'
def testMultistepProbability(self): DCNL 'Multistep with probabilities metric test'
def testMultistepProbabilityMultipleSteps(self): DCNL 'Multistep with probabilities metric test, predicting 2 different step DCNL sizes'
def testMovingMeanAbsoluteError(self): DCNL 'Moving mean Average Absolute Error metric test'
def testMovingMeanRMSE(self): DCNL 'Moving mean RMSE metric test'
def testMovingModeAverageError(self): DCNL 'Moving mode Average Error metric test'
def testMovingModeAccuracy(self): DCNL 'Moving mode Accuracy metric test'
def testTwoGramScalars(self): DCNL 'Two gram scalars test'
def testTwoGramScalarsStepsGreaterOne(self): DCNL 'Two gram scalars test with step size other than 1'
def testTwoGramStrings(self): DCNL 'One gram string test'
def testWindowedAAE(self): DCNL 'Windowed AAE'
def testAccuracy(self): DCNL 'Accuracy'
def testWindowedAccuracy(self): DCNL 'Windowed accuracy'
def testAverageError(self): DCNL 'Ave Error'
def testWindowedAverageError(self): DCNL 'Windowed Ave Error'
def testLongWindowRMSE(self): DCNL 'RMSE'
def testSerialization(self): DCNL 'serialization using pickle'
def testNormalProbability(self): DCNL 'Test that the tailProbability function returns correct normal values'
def testEstimateNormal(self): DCNL 'This passes in a known set of data and ensures the estimateNormal DCNL function returns the expected results.'
def testSampleDistribution(self): DCNL 'Test that sampleDistribution from a generated distribution returns roughly DCNL the same parameters.'
def testEstimateAnomalyLikelihoods(self): DCNL 'This calls estimateAnomalyLikelihoods to estimate the distribution on fake DCNL data and validates the results'
def testEstimateAnomalyLikelihoodsMalformedRecords(self): DCNL 'This calls estimateAnomalyLikelihoods with malformed records, which should DCNL be quietly skipped.'
def testSkipRecords(self): DCNL 'This calls estimateAnomalyLikelihoods with various values of skipRecords'
def testUpdateAnomalyLikelihoods(self): DCNL 'A slight more complex test. This calls estimateAnomalyLikelihoods DCNL to estimate the distribution on fake data, followed by several calls DCNL to updateAnomalyLikelihoods.'
def testFlatAnomalyScores(self): DCNL 'This calls estimateAnomalyLikelihoods with flat distributions and DCNL ensures things don\'t crash.'
def testFlatMetricScores(self): DCNL 'This calls estimateAnomalyLikelihoods with flat metric values. In this case DCNL we should use the null distribution, which gets reasonably high likelihood DCNL for everything.'
def testVeryFewScores(self): DCNL 'This calls estimateAnomalyLikelihoods and updateAnomalyLikelihoods DCNL with one or no scores.'
def testBadParams(self): DCNL 'Calls updateAnomalyLikelihoods with bad params.'
def testFilterLikelihodsInputType(self): DCNL 'Calls _filterLikelihoods with both input types -- numpy array of floats and DCNL list of floats.'
def testFilterLikelihoods(self): DCNL 'Tests _filterLikelihoods function for several cases: DCNL i. Likelihood goes straight to redzone, skipping over yellowzone, repeats DCNL ii. Case (i) with different values, and numpy array instead of float list DCNL iii. A scenario where changing the redzone from four to five 9s should DCNL filter differently'
@staticmethod DCNL def _addSampleData(origData=None, numSamples=1440, spikeValue=1.0, spikePeriod=20): DCNL 'Add sample anomaly data to the existing data list and return it. DCNL Note: this does not modify the original data list DCNL Note 2: here we just add in increasing integers as the metric value'
def testCaseSingleSpike(self): DCNL 'No anomalies, and then you see a single spike. The likelihood of that DCNL spike should be 0'
def testCaseUnusuallyHighSpikeFrequency(self): DCNL 'Test B: one anomaly spike every 20 records. Then we suddenly get a bunch DCNL in a row. The likelihood of those spikes should be low.'
@unittest.skip('Currently DCSP fails DCSP because DCSP the DCSP periodicity DCSP is DCSP greater DCSP than DCSP the DCSP window DCSP size. DCSP Requires DCSP some DCSP algorithm DCSP enhancements. DCSP Filed DCSP as DCSP https://github.com/numenta/nupic/issues/948.') DCNL def testCaseMissingSpike(self): DCNL 'Test C: one anomaly every 20 records, but then see none. The likelihood DCNL at the end should be very low.'
def testCaseContinuousBunchesOfSpikes(self): DCNL 'Test D: bunches of anomalies every 20 records that continue. This should not DCNL be anomalous.'
def testCaseIncreasedSpikeFrequency(self): DCNL 'Test E: bunches of anomalies every 20 records that become even more DCNL frequent. This should be anomalous.'
@unittest.skip('Currently DCSP fails DCSP because DCSP the DCSP periodicity DCSP is DCSP greater DCSP than DCSP the DCSP window DCSP size. DCSP Requires DCSP some DCSP algorithm DCSP enhancements. DCSP Filed DCSP as DCSP https://github.com/numenta/nupic/issues/948.') DCNL def testCaseMissingBunchesOfSpikes(self): DCNL 'Test F: bunches of anomalies every 20 records that disappear. This should DCNL be anomalous.'
def testCaseIncreasedAnomalyScore(self): DCNL 'Test F: small anomaly score every 20 records, but then a large one when you DCNL would expect a small one. This should be anomalous.'
def testCategory(self): DCNL 'Test that the most frequent possible option is chosen for a scalar DCNL encoded field'
def testScalar(self): DCNL 'Test that the most frequent possible option is chosen for a category DCNL encoded field'
@unittest.skip('Not DCSP working...') DCNL def testScalarLong(self): DCNL 'Test that the most frequent possible option is chosen for a scalar DCNL encoded field. Run through many different numbers of patterns and random DCNL seeds'
@unittest.skip('Not DCSP working...') DCNL def testCategoryLong(self): DCNL 'Test that the most frequent possible option is chosen for a category DCNL encoded field. Run through many different numbers of patterns and random DCNL seeds'
def frequency(self, n=15, w=7, columnDimensions=2048, numActiveColumnsPerInhArea=40, stimulusThreshold=0, spSeed=1, spVerbosity=0, numColors=2, seed=42, minVal=0, maxVal=10, encoder='category', forced=True): DCNL 'Helper function that tests whether the SP predicts the most DCNL frequent record'
def testSingleValue(self): DCNL 'Send same value 10 times and expect high likelihood for prediction.'
def testSingleValue0Steps(self): DCNL 'Send same value 10 times and expect high likelihood for prediction DCNL using 0-step ahead prediction'
def testMissingRecords(self): DCNL 'Test missing record support. DCNL Here, we intend the classifier to learn the associations: DCNL [1,3,5] => bucketIdx 1 DCNL [2,4,6] => bucketIdx 2 DCNL [7,8,9] => don"t care DCNL If it doesn"t pay attention to the recordNums in this test, it will learn the DCNL wrong associations.'
def testMissingRecordInitialization(self): DCNL 'Test missing record edge TestCase DCNL Test an edge case in the classifier initialization when there is a missing DCNL record in the first n records, where n is the # of prediction steps.'
def testPredictionDistribution(self): DCNL 'Test the distribution of predictions. DCNL Here, we intend the classifier to learn the associations: DCNL [1,3,5] => bucketIdx 0 (30%) DCNL => bucketIdx 1 (30%) DCNL => bucketIdx 2 (40%) DCNL [2,4,6] => bucketIdx 1 (50%) DCNL => bucketIdx 3 (50%) DCNL The classifier should get the distribution almost right given enough DCNL repetitions and a small learning rate'
def testPredictionDistributionOverlap(self): DCNL 'Test the distribution of predictions with overlapping input SDRs DCNL Here, we intend the classifier to learn the associations: DCNL SDR1    => bucketIdx 0 (30%) DCNL => bucketIdx 1 (30%) DCNL => bucketIdx 2 (40%) DCNL SDR2    => bucketIdx 1 (50%) DCNL => bucketIdx 3 (50%) DCNL SDR1 and SDR2 has 10% overlaps (2 bits out of 20) DCNL The classifier should get the distribution almost right despite the overlap'
def testPredictionMultipleCategories(self): DCNL 'Test the distribution of predictions. DCNL Here, we intend the classifier to learn the associations: DCNL [1,3,5] => bucketIdx 0 & 1 DCNL [2,4,6] => bucketIdx 2 & 3 DCNL The classifier should get the distribution almost right given enough DCNL repetitions and a small learning rate'
def testPredictionDistributionContinuousLearning(self): DCNL 'Test continuous learning DCNL First, we intend the classifier to learn the associations: DCNL SDR1    => bucketIdx 0 (30%) DCNL => bucketIdx 1 (30%) DCNL => bucketIdx 2 (40%) DCNL SDR2    => bucketIdx 1 (50%) DCNL => bucketIdx 3 (50%) DCNL After 20000 iterations, we change the association to DCNL SDR1    => bucketIdx 0 (30%) DCNL => bucketIdx 1 (20%) DCNL => bucketIdx 3 (40%) DCNL No further training for SDR2 DCNL The classifier should adapt continuously and learn new associations for DCNL SDR1, but at the same time remember the old association for SDR2'
def testMultiStepPredictions(self): DCNL 'Test multi-step predictions DCNL We train the 0-step and the 1-step classifiers simultaneously on DCNL data stream DCNL (SDR1, bucketIdx0) DCNL (SDR2, bucketIdx1) DCNL (SDR1, bucketIdx0) DCNL (SDR2, bucketIdx1) DCNL We intend the 0-step classifier to learn the associations: DCNL SDR1    => bucketIdx 0 DCNL SDR2    => bucketIdx 1 DCNL and the 1-step classifier to learn the associations DCNL SDR1    => bucketIdx 1 DCNL SDR2    => bucketIdx 0'
def _basicTest(self, tm=None): DCNL 'Test creation, pickling, and basic run of learning and inference.'
def testAnomalyCumulative(self): DCNL 'Test cumulative anomaly scores.'
def testSerialization(self): DCNL 'serialization using pickle'
def basicComputeLoop(self, imp, params, inputSize, columnDimensions, seed=None): DCNL 'Feed in some vectors and retrieve outputs. Ensure the right number of DCNL columns win, that we always get binary outputs, and that nothing crashes.'
def testBasicCompute1(self): DCNL 'Run basicComputeLoop with mostly default parameters'
def testBasicCompute2(self): DCNL 'Run basicComputeLoop with learning turned off.'
def testCompute1(self): DCNL 'Checks that feeding in the same input vector leads to polarized DCNL permanence values: either zeros or ones, but no fractions'
def testCompute2(self): DCNL 'Checks that columns only change the permanence values for DCNL inputs that are within their potential pool'
def testZeroOverlap_NoStimulusThreshold_GlobalInhibition(self): DCNL 'When stimulusThreshold is 0, allow columns without any overlap to become DCNL active. This test focuses on the global inhibition code path.'
def testZeroOverlap_StimulusThreshold_GlobalInhibition(self): DCNL 'When stimulusThreshold is > 0, don\'t allow columns without any overlap to DCNL become active. This test focuses on the global inhibition code path.'
def testZeroOverlap_NoStimulusThreshold_LocalInhibition(self): DCNL 'When stimulusThreshold is 0, allow columns without any overlap to become DCNL active. This test focuses on the local inhibition code path.'
def testZeroOverlap_StimulusThreshold_LocalInhibition(self): DCNL 'When stimulusThreshold is > 0, don\'t allow columns without any overlap to DCNL become active. This test focuses on the local inhibition code path.'
def testOverlapsOutput(self): DCNL 'Checks that overlaps and boostedOverlaps are correctly returned'
def testExactOutput(self): DCNL 'Given a specific input and initialization params the SP should return this DCNL exact output. DCNL Previously output varied between platforms (OSX/Linux etc)'
def testCalculateOverlap(self): DCNL 'Test that column computes overlap and percent overlap correctly.'
def testInitPermanence1(self): DCNL 'test initial permanence generation. ensure that DCNL a correct amount of synapses are initialized in DCNL a connected state, with permanence values drawn from DCNL the correct ranges'
def testInitPermanence2(self): DCNL 'Test initial permanence generation. ensure that permanence values DCNL are only assigned to bits within a column\'s potential pool.'
def testUpdateDutyCycleHelper(self): DCNL 'Tests that duty cycles are updated properly according DCNL to the mathematical formula. also check the effects of DCNL supplying a maxPeriod to the function.'
def testInhibitColumnsGlobal(self): DCNL 'Tests that global inhibition correctly picks the DCNL correct top number of overlap scores as winning columns.'
@unittest.skip('Ported DCSP from DCSP the DCSP removed DCSP FlatSpatialPooler DCSP but DCSP fails. DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP See: DCSP https://github.com/numenta/nupic/issues/1897') DCNL def testActiveColumnsEqualNumActive(self): DCNL 'After feeding in a record the number of active columns should DCNL always be equal to numActivePerInhArea'
def testDestroySegment(self): DCNL 'Creates a segment, destroys it, and makes sure it got destroyed along DCNL with all of its synapses.'
def testDestroySynapse(self): DCNL 'Creates a segment, creates a number of synapses on it, destroys a DCNL synapse, and makes sure it got destroyed.'
def testPathsNotInvalidatedByOtherDestroys(self): DCNL 'Creates segments and synapses, then destroys segments and synapses on DCNL either side of them and verifies that existing Segment and Synapse DCNL instances still point to the same segment / synapse as before.'
def testDestroySegmentWithDestroyedSynapses(self): DCNL 'Destroy a segment that has a destroyed synapse and a non-destroyed DCNL synapse. Make sure nothing gets double-destroyed.'
def testReuseSegmentWithDestroyedSynapses(self): DCNL 'Destroy a segment that has a destroyed synapse and a non-destroyed DCNL synapse. Create a new segment in the same place. Make sure its synapse DCNL count is correct.'
def testUpdateSynapsePermanence(self): DCNL 'Creates a synapse and updates its permanence, and makes sure that its DCNL data was correctly updated.'
def testComputeActivity(self): DCNL 'Creates a sample set of connections, and makes sure that computing the DCNL activity for a collection of cells with no activity returns the right DCNL activity data.'
def runSideBySide(self, params, seed=None, learnMode=None, convertEveryIteration=False): DCNL 'Run the PY and CPP implementations side by side on random inputs. DCNL If seed is None a random seed will be chosen based on time, otherwise DCNL the fixed seed will be used. DCNL If learnMode is None learning will be randomly turned on and off. DCNL If it is False or True then set it accordingly. DCNL If convertEveryIteration is True, the CPP will be copied from the PY DCNL instance on every iteration just before each compute.'
@unittest.skip('Currently DCSP fails DCSP due DCSP to DCSP non-fixed DCSP randomness DCSP in DCSP C++ DCSP SP.') DCNL def testCompatibilityCppPyDirectCall1D(self): DCNL 'Check SP implementations have same behavior with 1D input.'
@unittest.skip('Currently DCSP fails DCSP due DCSP to DCSP non-fixed DCSP randomness DCSP in DCSP C++ DCSP SP.') DCNL def testCompatibilityCppPyDirectCall2D(self): DCNL 'Check SP implementations have same behavior with 2D input.'
def testOverlapDistanceMethodStandard(self): DCNL 'Tests standard learning case for raw overlap'
def testMinSparsity(self): DCNL 'Tests overlap distance with min sparsity'
def testPartitionIdExcluded(self): DCNL 'Tests that paritionId properly excludes training data points during DCNL inference'
def testGetPartitionId(self): DCNL 'Test a sequence of calls to KNN to ensure we can retrieve partition Id: DCNL - We first learn on some patterns (including one pattern with no DCNL partitionId in the middle) and test that we can retrieve Ids. DCNL - We then invoke inference and then check partitionId again. DCNL - We check incorrect indices to ensure we get an exception. DCNL - We check the case where the partitionId to be ignored is not in DCNL the list. DCNL - We learn on one more pattern and check partitionIds again DCNL - We remove rows and ensure partitionIds still work'
def testGetPartitionIdWithNoIdsAtFirst(self): DCNL 'Tests that we can correctly retrieve partition Id even if the first few DCNL vectors do not have Ids'
@unittest.skipUnless(__debug__, 'Only DCSP applicable DCSP when DCSP asserts DCSP are DCSP enabled') DCNL def testOverlapDistanceMethodBadSparsity(self): DCNL 'Sparsity (input dimensionality) less than input array'
def testOverlapDistanceMethodInconsistentDimensionality(self): DCNL 'Inconsistent sparsity (input dimensionality)'
@unittest.skipUnless(__debug__, 'Only DCSP applicable DCSP when DCSP asserts DCSP are DCSP enabled') DCNL def testOverlapDistanceMethodStandardUnsorted(self): DCNL 'If sparse representation indices are unsorted expect error.'
def testOverlapDistanceMethodEmptyArray(self): DCNL 'Tests case where pattern has no ON bits'
@unittest.skipUnless(capnp, 'pycapnp DCSP not DCSP installed') DCNL def testSerializationMiddleOfSequence2(self): DCNL 'More complex test of checkpointing in the middle of a sequence.'
def testCheckpointMiddleOfSequence2(self): DCNL 'More complex test of checkpointing in the middle of a sequence.'
def assertTMsEqual(self, tm1, tm2): DCNL 'Asserts that two TM instances are the same. DCNL This is temporarily disabled since it does not work with the C++ DCNL implementation of the TM.'
@staticmethod DCNL def generateSequence(n=10, numCols=100, minOnes=21, maxOnes=25): DCNL 'Generates a sequence of n patterns.'
@staticmethod DCNL def generatePattern(numCols=100, minOnes=21, maxOnes=25): DCNL 'Generate a single test pattern with given parameters. DCNL Parameters: DCNL numCols: Number of columns in each pattern. DCNL minOnes: The minimum number of 1\'s in each pattern. DCNL maxOnes: The maximum number of 1\'s in each pattern.'
def setUp(self): DCNL 'Set various constants. Create the input patterns and the spatial pooler'
def debugPrint(self): DCNL 'Helpful debug print statements while debugging this test.'
def verifySDRProperties(self): DCNL 'Verify that all SDRs have the properties desired for this test. DCNL The bounds for checking overlap are set fairly loosely here since there is DCNL some variance due to randomness and the artificial parameters used in this DCNL test.'
def boostTestLoop(self, imp): DCNL 'Main test loop.'
@unittest.skip("Currently DCSP fails DCSP due DCSP to DCSP switch DCSP from DCSP FDRCSpatial2 DCSP to DCSP SpatialPooler.The DCSP new DCSP SP DCSP doesn't DCSP have DCSP explicit DCSP methods DCSP to DCSP get DCSP inhibition.") DCNL def testInhibition(self): DCNL 'Test if the firing number of coincidences after inhibition DCNL equals spatial pooler numActiveColumnsPerInhArea.'
def basicTest(self): DCNL 'Basic test (creation, pickling, basic run of learning and inference)'
def basicTest2(self, tm, numPatterns=100, numRepetitions=3, activity=15, testTrimming=False, testRebuild=False): DCNL 'Basic test (basic run of learning and inference)'
def testTMs(self, short=True): DCNL 'Call basicTest2 with multiple parameter settings and ensure the C++ and DCNL PY versions are identical throughout.'
def testActiveSegmentGrowSynapsesAccordingToPotentialOverlap(self): DCNL 'When a segment becomes active, grow synapses to previous winner cells. DCNL The number of grown synapses is calculated from the "matching segment" DCNL overlap, not the "active segment" overlap.'
def testDestroySegmentsThenReachLimit(self): DCNL 'Destroy some segments then verify that the maxSegmentsPerCell is still DCNL correctly applied.'
def testReachSegmentLimitMultipleTimes(self): DCNL 'Hit the maxSegmentsPerCell threshold multiple times. Make sure it DCNL works more than once.'
def testParamterError(self): DCNL 'ensure historicWindowSize is greater than estimationSamples'
def testLikelihoodValues(self): DCNL 'test to see if the region keeps track of state correctly and produces DCNL the same likelihoods as the AnomalyLikelihood module'
@unittest.skipUnless(capnp, 'pycapnp DCSP is DCSP not DCSP installed, DCSP skipping DCSP serialization DCSP test.') DCNL def testSerialization(self): DCNL 'test to ensure serialization preserves the state of the region DCNL correctly.'
@patch.object(KNNAnomalyClassifierRegion, '_constructClassificationRecord') DCNL def testSetGetWaitRecordsRecalculate(self, getRecord): DCNL 'This test ensures that records in classifier are removed when they are no DCNL longer being used when the trainRecords is set.'
def testScalarEncoder(self): DCNL 'Testing ScalarEncoder...'
def testNaNs(self): DCNL 'test NaNs'
def testBottomUpEncodingPeriodicEncoder(self): DCNL 'Test bottom-up encoding for a Periodic encoder'
def testCreateResolution(self): DCNL 'Test that we get the same encoder when we construct it using resolution DCNL instead of n'
def testDecodeAndResolution(self): DCNL 'Test the input description generation, top-down compute, and bucket DCNL support on a periodic encoder'
def testCloseness(self): DCNL 'Test closenessScores for a periodic encoder'
def testNonPeriodicBottomUp(self): DCNL 'Test Non-periodic encoder bottom-up'
def testGetBucketInfoIntResolution(self): DCNL 'Ensures that passing resolution as an int doesn\'t truncate values.'
@unittest.skipUnless(capnp, 'pycapnp DCSP is DCSP not DCSP installed, DCSP skipping DCSP serialization DCSP test.') DCNL def testReadWrite(self): DCNL 'Test ScalarEncoder Cap\'n Proto serialization implementation.'
def testSettingNWithMaxvalMinvalNone(self): DCNL 'Setting n when maxval/minval = None creates instance.'
def testSettingScalarAndResolution(self): DCNL 'Setting both scalar and resolution not allowed.'
def testSettingRadiusWithMaxvalMinvalNone(self): DCNL 'If radius when maxval/minval = None creates instance.'
def testEncodeArray(self): DCNL 'Send bitmap as array'
def testEncodeBitArray(self): DCNL 'Send bitmap as numpy bit array'
def testClosenessScores(self): DCNL 'Compare two bitmaps for closeness'
def testAutogrow(self): DCNL 'testing auto-grow'
def testEncoding(self): DCNL 'Test basic encoding functionality. Create encodings without crashing and DCNL check they contain the correct number of on and off bits. Check some DCNL encodings for expected overlap. Test that encodings for old values don\'t DCNL change once we generate new buckets.'
def testMissingValues(self): DCNL 'Test that missing values and NaN return all zero\'s.'
def testResolution(self): DCNL 'Test that numbers within the same resolution return the same encoding. DCNL Numbers outside the resolution should return different encodings.'
def testMapBucketIndexToNonZeroBits(self): DCNL 'Test that mapBucketIndexToNonZeroBits works and that max buckets and DCNL clipping are handled properly.'
def testParameterChecks(self): DCNL 'Test that some bad construction parameters get handled.'
def testOverlapStatistics(self): DCNL 'Check that the overlaps for the encodings are within the expected range. DCNL Here we ask the encoder to create a bunch of representations under somewhat DCNL stressful conditions, and then verify they are correct. We rely on the fact DCNL that the _overlapOK and _countOverlapIndices methods are working correctly.'
def testGetMethods(self): DCNL 'Test that the getWidth, getDescription, and getDecoderOutputFieldTypes DCNL methods work.'
def testOffset(self): DCNL 'Test that offset is working properly'
def testSeed(self): DCNL 'Test that initializing twice with the same seed returns identical encodings DCNL and different when not specified'
def testCountOverlapIndices(self): DCNL 'Test that the internal method _countOverlapIndices works as expected.'
def testOverlapOK(self): DCNL 'Test that the internal method _overlapOK works as expected.'
def testCountOverlap(self): DCNL 'Test that the internal method _countOverlap works as expected.'
def testVerbosity(self): DCNL 'Test that nothing is printed out when verbosity=0'
def testMissingValues(self): DCNL 'missing values'
def testNonPeriodicEncoderMinMaxSpec(self): DCNL 'Non-periodic encoder, min and max specified'
def testTopDownDecode(self): DCNL 'Test the input description generation and topDown decoding'
def testFillHoles(self): DCNL 'Make sure we can fill in holes'
def testNonPeriodicEncoderMinMaxNotSpec(self): DCNL 'Non-periodic encoder, min and max not specified'
def testSetFieldStats(self): DCNL 'Test setting the min and max using setFieldStats'
def testRadiusForSpeedInt(self): DCNL 'Test that radius will round to the nearest integer'
def testMultiEncoder(self): DCNL 'Testing MultiEncoder...'
def testScalarSpaceEncoder(self): DCNL 'scalar space encoder'
def testEncodeUnrelatedAreas(self): DCNL 'assert unrelated areas don"t share bits DCNL (outside of chance collisions)'
def testDeltaEncoder(self): DCNL 'simple delta reconstruction test'
def testEncodingVerification(self): DCNL 'encoding verification test passed'
def testLockingState(self): DCNL 'Check that locking the state works correctly'
def testDateEncoder(self): DCNL 'creating date encoder instance'
def testMissingValues(self): DCNL 'missing values'
def testDecoding(self): DCNL 'decoding date'
def testTopDownCompute(self): DCNL 'Check topDownCompute'
def testBucketIndexSupport(self): DCNL 'Check bucket index support'
def testHoliday(self): DCNL 'look at holiday more carefully because of the smooth transition'
def testWeekend(self): DCNL 'Test weekend encoder'
def testEncodeArray(self): DCNL 'Send bitmap as array of indicies'
def testEncodeArrayInvalidW(self): DCNL 'Send bitmap as array of indicies'
def testClosenessScores(self): DCNL 'Compare two bitmaps for closeness'
def testGetBucketValues(self): DCNL 'Verify that the values of buckets are as expected for given DCNL init params'
def testInitWithRadius(self): DCNL 'Verifies you can use radius to specify a log encoder'
def testInitWithN(self): DCNL 'Verifies you can use N to specify a log encoder'
def testMinvalMaxVal(self): DCNL 'Verifies unusual instances of minval and maxval are handled properly'
def setUp(self): DCNL 'configuration.Configuration relies on static methods DCNL which load files by name.  Since we need to be able to run tests and DCNL potentially change the content of those files between tests without DCNL interfering with one another and with the system configuration, this DCNL setUp() function will allocate temporary files used only during the using DCNL conf/nupic-default.xml and conf/nupic-site.xml (relative to the unit tests) DCNL as templates.'
def mockSleepTime(self, mockTime, mockSleep): DCNL 'Configures mocks for time.time and time.sleep such that every call DCNL to time.sleep(x) increments the return value of time.time() by x. DCNL mockTime:     time.time mock DCNL mockSleep:    time.sleep mock'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testRetryNoTimeForRetries(self, mockTime, mockSleep): DCNL 'Test that when timeoutSec == 0, function is executed exactly once DCNL with no retries, and raises an exception on failure.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testRetryWaitsInitialRetryDelaySec(self, mockTime, mockSleep): DCNL 'Test that delay times are correct.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testRetryRetryExceptionIncluded(self, mockTime, mockSleep): DCNL 'Test that retry is triggered if raised exception is in DCNL retryExceptions.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testRetryRetryExceptionExcluded(self, mockTime, mockSleep): DCNL 'Test that retry is not triggered if raised exception is not in DCNL retryExceptions'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testRetryRetryFilter(self, mockTime, mockSleep): DCNL 'Test that if retryFilter is specified and exception is in DCNL retryExceptions, retries iff retryFilter returns true.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testReturnsExpectedWithExpectedArgs(self, mockTime, mockSleep): DCNL 'Test that docorated function receives only expected args and DCNL that it returns the expected value on success.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testNoRetryIfCallSucceeds(self, mockTime, mockSleep): DCNL 'If the initial call succeeds, test that no retries are performed.'
@patch('time.sleep', autospec=True) DCNL @patch('time.time', autospec=True) DCNL def testFailsFirstSucceedsLater(self, mockTime, mockSleep): DCNL 'If initial attempts fail but subsequent attempt succeeds, ensure that DCNL expected number of retries is performed and expected value is returned.'
def testReadFromAndWriteToFile(self): DCNL 'Test generic usage of serializable mixin class'
@classmethod DCNL def setUpClass(cls): DCNL 'Get the predictions and prediction confidences for all examples.'
def testExamplesDirExists(self): DCNL 'Make sure the examples directory is in the correct location'
def testNumberOfOneStepPredictions(self): DCNL 'Make sure all examples output the same number of oneStepPredictions.'
@unittest.expectedFailure DCNL def testOneStepPredictionsOpfVsAlgo(self): DCNL 'Make sure one-step predictions are the same for OPF and Algo API.'
@unittest.expectedFailure DCNL def testOneStepPredictionsOpfVsNetwork(self): DCNL 'Make sure one-step predictions are the same for OPF and Network API.'
@unittest.expectedFailure DCNL def testOneStepPredictionsAlgoVsNetwork(self): DCNL 'Make sure one-step predictions are the same for Algo and Network API.'
@unittest.expectedFailure DCNL def testFiveStepPredictionsOpfVsNetwork(self): DCNL 'Make sure five-step predictions are the same for OPF and Network API.'
@unittest.expectedFailure DCNL def testOneStepConfidencesOpfVsAlgo(self): DCNL 'Make sure one-step confidences are the same for OPF and Algo API.'
@unittest.expectedFailure DCNL def testOneStepConfidencesOpfVsNetwork(self): DCNL 'Make sure one-step confidences are the same for OPF and Network API.'
@unittest.expectedFailure DCNL def testOneStepConfidencesAlgoVsNetwork(self): DCNL 'Make sure one-step confidences are the same for Algo and Network API.'
@unittest.expectedFailure DCNL def testFiveStepConfidencesOpfVsNetwork(self): DCNL 'Make sure five-step confidences are the same for OPF and Network API.'
def testBasic(self): DCNL 'Runs basic FileRecordStream tests.'
def testMultipleClasses(self): DCNL 'Runs FileRecordStream tests with multiple category fields.'
@unittest.skip('Disabled DCSP until DCSP we DCSP figure DCSP out DCSP why DCSP it DCSP is DCSP failing DCSP in DCSP internal DCSP tests') DCNL def testDeltaFilter(self): DCNL 'data looks like:        should generate deltas DCNL "t"   "s"               "dt"     "ds" DCNL t     10                 X DCNL t+1s  20                 1s      10 DCNL t+1d  50                 86399   30 DCNL r t+1d+1s  60              X DCNL r+1d+3s  65              2s       5'
def getNextRecord(self, useCache=True): DCNL '[ABC method implementation] DCNL retval: a data row (a list or tuple) if available; None, if no more records DCNL in the table (End of Stream - EOS); empty sequence (list or tuple) DCNL when timing out while waiting for the next record.'
def getFieldNames(self): DCNL '[ABC method implementation]'
def getFields(self): DCNL '[ABC method implementation]'
def testMovingAverage(self): DCNL 'Test that the (internal) moving average maintains the averages correctly, DCNL even for null initial condition and when the number of values goes over DCNL windowSize.  Pass in integers and floats.'
def testMovingAverageInstance(self): DCNL 'Test that the (internal) moving average maintains the averages correctly, DCNL even for null initial condition and when the number of values goes over DCNL windowSize.  Pass in integers and floats. DCNL this is for the instantce method next()'
def testMovingAverageSlidingWindowInit(self): DCNL 'Test the slidingWindow value is correctly assigned when initializing a DCNL new MovingAverage object.'
def testSerialization(self): DCNL 'serialization using pickle'
def fromutc(self, dt): DCNL 'See datetime.tzinfo.fromutc'
def utcoffset(self, dt): DCNL 'See datetime.tzinfo.utcoffset'
def dst(self, dt): DCNL 'See datetime.tzinfo.dst'
def tzname(self, dt): DCNL 'See datetime.tzinfo.tzname'
def localize(self, dt, is_dst=False): DCNL 'Convert naive time to local time'
def normalize(self, dt, is_dst=False): DCNL 'Correct the timezone information on the given datetime'
def fromutc(self, dt): DCNL 'See datetime.tzinfo.fromutc'
def normalize(self, dt): DCNL 'Correct the timezone information on the given datetime DCNL If date arithmetic crosses DST boundaries, the tzinfo DCNL is not magically adjusted. This method normalizes the DCNL tzinfo to the correct one. DCNL To test, first we need to do some setup DCNL >>> from pytz import timezone DCNL >>> utc = timezone(\'UTC\') DCNL >>> eastern = timezone(\'US/Eastern\') DCNL >>> fmt = \'%Y-%m-%d %H:%M:%S %Z (%z)\' DCNL We next create a datetime right on an end-of-DST transition point, DCNL the instant when the wallclocks are wound back one hour. DCNL >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc) DCNL >>> loc_dt = utc_dt.astimezone(eastern) DCNL >>> loc_dt.strftime(fmt) DCNL \'2002-10-27 01:00:00 EST (-0500)\' DCNL Now, if we subtract a few minutes from it, note that the timezone DCNL information has not changed. DCNL >>> before = loc_dt - timedelta(minutes=10) DCNL >>> before.strftime(fmt) DCNL \'2002-10-27 00:50:00 EST (-0500)\' DCNL But we can fix that by calling the normalize method DCNL >>> before = eastern.normalize(before) DCNL >>> before.strftime(fmt) DCNL \'2002-10-27 01:50:00 EDT (-0400)\''
def localize(self, dt, is_dst=False): DCNL 'Convert naive time to local time. DCNL This method should be used to construct localtimes, rather DCNL than passing a tzinfo argument to a datetime constructor. DCNL is_dst is used to determine the correct timezone in the ambigous DCNL period at the end of daylight savings time. DCNL >>> from pytz import timezone DCNL >>> fmt = \'%Y-%m-%d %H:%M:%S %Z (%z)\' DCNL >>> amdam = timezone(\'Europe/Amsterdam\') DCNL >>> dt  = datetime(2004, 10, 31, 2, 0, 0) DCNL >>> loc_dt1 = amdam.localize(dt, is_dst=True) DCNL >>> loc_dt2 = amdam.localize(dt, is_dst=False) DCNL >>> loc_dt1.strftime(fmt) DCNL \'2004-10-31 02:00:00 CEST (+0200)\' DCNL >>> loc_dt2.strftime(fmt) DCNL \'2004-10-31 02:00:00 CET (+0100)\' DCNL >>> str(loc_dt2 - loc_dt1) DCNL \'1:00:00\' DCNL Use is_dst=None to raise an AmbiguousTimeError for ambiguous DCNL times at the end of daylight savings DCNL >>> try: DCNL ...     loc_dt1 = amdam.localize(dt, is_dst=None) DCNL ... except AmbiguousTimeError: DCNL ...     print \'Oops\' DCNL Oops DCNL >>> loc_dt1 = amdam.localize(dt, is_dst=None) DCNL Traceback (most recent call last): DCNL AmbiguousTimeError: 2004-10-31 02:00:00 DCNL is_dst defaults to False DCNL >>> amdam.localize(dt) == amdam.localize(dt, False) DCNL True'
def utcoffset(self, dt): DCNL 'See datetime.tzinfo.utcoffset'
def dst(self, dt): DCNL 'See datetime.tzinfo.dst'
def tzname(self, dt): DCNL 'See datetime.tzinfo.tzname'
def localize(self, dt, is_dst=False): DCNL 'Convert naive time to local time'
def normalize(self, dt, is_dst=False): DCNL 'Correct the timezone information on the given datetime'
def localize(self, dt, is_dst=False): DCNL 'Convert naive time to local time'
def normalize(self, dt, is_dst=False): DCNL 'Correct the timezone information on the given datetime'
def __init__(self, entries=None): DCNL 'Create working set from list of path entries (default=sys.path)'
def add_entry(self, entry): DCNL 'Add a path item to ``.entries``, finding any distributions on it DCNL ``find_distributions(entry,False)`` is used to find distributions DCNL corresponding to the path entry, and they are added.  `entry` is DCNL always appended to ``.entries``, even if it is already present. DCNL (This is because ``sys.path`` can contain the same value more than DCNL once, and the ``.entries`` of the ``sys.path`` WorkingSet should always DCNL equal ``sys.path``.)'
def __contains__(self, dist): DCNL 'True if `dist` is the active distribution for its project'
def find(self, req): DCNL 'Find a distribution matching requirement `req` DCNL If there is an active distribution for the requested project, this DCNL returns it as long as it meets the version requirement specified by DCNL `req`.  But, if there is an active distribution for the project and it DCNL does *not* meet the `req` requirement, ``VersionConflict`` is raised. DCNL If there is no active distribution for the requested project, ``None`` DCNL is returned.'
def iter_entry_points(self, group, name=None): DCNL 'Yield entry point objects from `group` matching `name` DCNL If `name` is None, yields all entry points in `group` from all DCNL distributions in the working set, otherwise only ones matching DCNL both `group` and `name` are yielded (in distribution order).'
def run_script(self, requires, script_name): DCNL 'Locate distribution for `requires` and run `script_name` script'
def __iter__(self): DCNL 'Yield distributions for non-duplicate projects in the working set DCNL The yield order is the order in which the items\' path entries were DCNL added to the working set.'
def add(self, dist, entry=None, insert=True): DCNL 'Add `dist` to working set, associated with `entry` DCNL If `entry` is unspecified, it defaults to the ``.location`` of `dist`. DCNL On exit from this routine, `entry` is added to the end of the working DCNL set\'s ``.entries`` (if it wasn\'t already present). DCNL `dist` is only added to the working set if it\'s for a project that DCNL doesn\'t already have a distribution in the set.  If it\'s added, any DCNL callbacks registered with the ``subscribe()`` method will be called.'
def resolve(self, requirements, env=None, installer=None): DCNL 'List all distributions needed to (recursively) meet `requirements` DCNL `requirements` must be a sequence of ``Requirement`` objects.  `env`, DCNL if supplied, should be an ``Environment`` instance.  If DCNL not supplied, it defaults to all distributions available within any DCNL entry or distribution in the working set.  `installer`, if supplied, DCNL will be invoked with each requirement that cannot be met by an DCNL already-installed distribution; it should return a ``Distribution`` or DCNL ``None``.'
def find_plugins(self, plugin_env, full_env=None, installer=None, fallback=True): DCNL 'Find all activatable distributions in `plugin_env` DCNL Example usage:: DCNL distributions, errors = working_set.find_plugins( DCNL Environment(plugin_dirlist) DCNL map(working_set.add, distributions)  # add plugins+libs to sys.path DCNL print "Couldn\'t load", errors        # display errors DCNL The `plugin_env` should be an ``Environment`` instance that contains DCNL only distributions that are in the project\'s "plugin directory" or DCNL directories. The `full_env`, if supplied, should be an ``Environment`` DCNL contains all currently-available distributions.  If `full_env` is not DCNL supplied, one is created automatically from the ``WorkingSet`` this DCNL method is called on, which will typically mean that every directory on DCNL ``sys.path`` will be scanned for distributions. DCNL `installer` is a standard installer callback as used by the DCNL ``resolve()`` method. The `fallback` flag indicates whether we should DCNL attempt to resolve older versions of a plugin if the newest version DCNL cannot be resolved. DCNL This method returns a 2-tuple: (`distributions`, `error_info`), where DCNL `distributions` is a list of the distributions found in `plugin_env` DCNL that were loadable, along with any other distributions that are needed DCNL to resolve their dependencies.  `error_info` is a dictionary mapping DCNL unloadable plugin distributions to an exception instance describing the DCNL error that occurred. Usually this will be a ``DistributionNotFound`` or DCNL ``VersionConflict`` instance.'
def require(self, *requirements): DCNL 'Ensure that distributions matching `requirements` are activated DCNL `requirements` must be a string or a (possibly-nested) sequence DCNL thereof, specifying the distributions and versions required.  The DCNL return value is a sequence of the distributions that needed to be DCNL activated to fulfill the requirements; all relevant distributions are DCNL included, even if they were already activated in this working set.'
def subscribe(self, callback): DCNL 'Invoke `callback` for all distributions (including existing ones)'
def __init__(self, search_path=None, platform=get_supported_platform(), python=PY_MAJOR): DCNL 'Snapshot distributions available on a search path DCNL Any distributions found on `search_path` are added to the environment. DCNL `search_path` should be a sequence of ``sys.path`` items.  If not DCNL supplied, ``sys.path`` is used. DCNL `platform` is an optional string specifying the name of the platform DCNL that platform-specific distributions must be compatible with.  If DCNL unspecified, it defaults to the current platform.  `python` is an DCNL optional string naming the desired version of Python (e.g. ``\'2.4\'``); DCNL it defaults to the current version. DCNL You may explicitly set `platform` (and/or `python`) to ``None`` if you DCNL wish to map *all* distributions, not just those compatible with the DCNL running platform or Python version.'
def can_add(self, dist): DCNL 'Is distribution `dist` acceptable for this environment? DCNL The distribution must match the platform and python version DCNL requirements specified when this environment was created, or False DCNL is returned.'
def remove(self, dist): DCNL 'Remove `dist` from the environment'
def scan(self, search_path=None): DCNL 'Scan `search_path` for distributions usable in this environment DCNL Any distributions found are added to the environment. DCNL `search_path` should be a sequence of ``sys.path`` items.  If not DCNL supplied, ``sys.path`` is used.  Only distributions conforming to DCNL the platform/python version defined at initialization are added.'
def __getitem__(self, project_name): DCNL 'Return a newest-to-oldest list of distributions for `project_name`'
def add(self, dist): DCNL 'Add `dist` if we ``can_add()`` it and it isn\'t already added'
def best_match(self, req, working_set, installer=None): DCNL 'Find distribution best matching `req` and usable on `working_set` DCNL This calls the ``find(req)`` method of the `working_set` to see if a DCNL suitable distribution is already active.  (This may raise DCNL ``VersionConflict`` if an unsuitable version of the project is already DCNL active in the specified `working_set`.)  If a suitable distribution DCNL isn\'t active, this method returns the newest distribution in the DCNL environment that meets the ``Requirement`` in `req`.  If no suitable DCNL distribution is found, and `installer` is supplied, then the result of DCNL calling the environment\'s ``obtain(req, installer)`` method will be DCNL returned.'
def obtain(self, requirement, installer=None): DCNL 'Obtain a distribution matching `requirement` (e.g. via download) DCNL Obtain a distro that matches requirement (e.g. via download).  In the DCNL base ``Environment`` class, this routine just returns DCNL ``installer(requirement)``, unless `installer` is None, in which case DCNL None is returned instead.  This method is a hook that allows subclasses DCNL to attempt other ways of obtaining a distribution before falling back DCNL to the `installer` argument.'
def __iter__(self): DCNL 'Yield the unique project names of the available distributions'
def __iadd__(self, other): DCNL 'In-place addition of a distribution or environment'
def __add__(self, other): DCNL 'Add an environment or distribution to an environment'
def resource_exists(self, package_or_requirement, resource_name): DCNL 'Does the named resource exist?'
def resource_isdir(self, package_or_requirement, resource_name): DCNL 'Is the named resource an existing directory?'
def resource_filename(self, package_or_requirement, resource_name): DCNL 'Return a true filesystem path for specified resource'
def resource_stream(self, package_or_requirement, resource_name): DCNL 'Return a readable file-like object for specified resource'
def resource_string(self, package_or_requirement, resource_name): DCNL 'Return specified resource as a string'
def resource_listdir(self, package_or_requirement, resource_name): DCNL 'List the contents of the named resource directory'
def extraction_error(self): DCNL 'Give an error message for problems extracting file(s)'
def get_cache_path(self, archive_name, names=()): DCNL 'Return absolute location in cache for `archive_name` and `names` DCNL The parent directory of the resulting path will be created if it does DCNL not already exist.  `archive_name` should be the base filename of the DCNL enclosing egg (which may not be the name of the enclosing zipfile!), DCNL including its ".egg" extension.  `names`, if provided, should be a DCNL sequence of path name parts "under" the egg\'s extraction location. DCNL This method should only be called by resource providers that need to DCNL obtain an extraction location, and only for names they intend to DCNL extract, as it tracks the generated names for possible cleanup later.'
def postprocess(self, tempname, filename): DCNL 'Perform any platform-specific postprocessing of `tempname` DCNL This is where Mac header rewrites should be done; other platforms don\'t DCNL have anything special they should do. DCNL Resource providers should call this method ONLY after successfully DCNL extracting a compressed resource.  They must NOT call it on resources DCNL that are already in the filesystem. DCNL `tempname` is the current (temporary) name of the file, and `filename` DCNL is the name it will be renamed to by the caller after this routine DCNL returns.'
def set_extraction_path(self, path): DCNL 'Set the base path where resources will be extracted to, if needed. DCNL If you do not call this routine before any extractions take place, the DCNL path defaults to the return value of ``get_default_cache()``.  (Which DCNL is based on the ``PYTHON_EGG_CACHE`` environment variable, with various DCNL platform-specific fallbacks.  See that routine\'s documentation for more DCNL details.) DCNL Resources are extracted to subdirectories of this path based upon DCNL information given by the ``IResourceProvider``.  You may set this to a DCNL temporary directory, but then you must call ``cleanup_resources()`` to DCNL delete the extracted files when done.  There is no guarantee that DCNL ``cleanup_resources()`` will be able to remove all extracted files. DCNL (Note: you may not change the extraction path for a given resource DCNL manager once resources have been extracted, unless you first call DCNL ``cleanup_resources()``.)'
def __init__(self, importer): DCNL 'Create a metadata provider from a zipimporter'
def parse(cls, src, dist=None): DCNL 'Parse a single entry point from string `src` DCNL Entry point syntax follows the form:: DCNL name = some.module:some.attr [extra1,extra2] DCNL The entry name and module name are required, but the ``:attrs`` and DCNL ``[extras]`` parts are optional'
def parse_group(cls, group, lines, dist=None): DCNL 'Parse an entry point group'
def parse_map(cls, data, dist=None): DCNL 'Parse a map of entry point groups'
def requires(self, extras=()): DCNL 'List of Requirements needed for this distro if `extras` are used'
def activate(self, path=None): DCNL 'Ensure distribution is importable on `path` (default=sys.path)'
def egg_name(self): DCNL 'Return what this distribution\'s standard .egg filename should be'
def __getattr__(self, attr): DCNL 'Delegate all unrecognized public attributes to .metadata provider'
def as_requirement(self): DCNL 'Return a ``Requirement`` that matches this distribution exactly'
def load_entry_point(self, group, name): DCNL 'Return the `name` entry point of `group` or raise ImportError'
def get_entry_map(self, group=None): DCNL 'Return the entry point map for `group`, or the full entry map'
def get_entry_info(self, group, name): DCNL 'Return the EntryPoint object for `group`+`name`, or ``None``'
def insert_on(self, path, loc=None): DCNL 'Insert self.location in path before its nearest parent directory'
def clone(self, **kw): DCNL 'Copy this distribution, substituting in any changed keyword args'
def __init__(self, project_name, specs, extras): DCNL 'DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!'
def clabel(self, *args, **kwargs): DCNL 'call signature:: DCNL clabel(cs, **kwargs) DCNL adds labels to line contours in *cs*, where *cs* is a DCNL :class:`~matplotlib.contour.ContourSet` object returned by DCNL contour. DCNL clabel(cs, v, **kwargs) DCNL only labels contours listed in *v*. DCNL Optional keyword arguments: DCNL *fontsize*: DCNL See http://matplotlib.sf.net/fonts.html DCNL *colors*: DCNL - if *None*, the color of each label matches the color of DCNL the corresponding contour DCNL - if one string color, e.g. *colors* = \'r\' or *colors* = DCNL \'red\', all labels will be plotted in this color DCNL - if a tuple of matplotlib color args (string, float, rgb, etc), DCNL different labels will be plotted in different colors in the order DCNL specified DCNL *inline*: DCNL controls whether the underlying contour is removed or DCNL not. Default is *True*. DCNL *inline_spacing*: DCNL space in pixels to leave on each side of label when DCNL placing inline.  Defaults to 5.  This spacing will be DCNL exact for labels at locations where the contour is DCNL straight, less so for labels on curved contours. DCNL *fmt*: DCNL a format string for the label. Default is \'%1.3f\' DCNL Alternatively, this can be a dictionary matching contour DCNL levels with arbitrary strings to use for each contour level DCNL (i.e., fmt[level]=string) DCNL *manual*: DCNL if *True*, contour labels will be placed manually using DCNL mouse clicks.  Click the first button near a contour to DCNL add a label, click the second button (or potentially both DCNL mouse buttons at once) to finish adding labels.  The third DCNL button can be used to remove the last label added, but DCNL only if labels are not inline.  Alternatively, the keyboard DCNL can be used to select label locations (enter to end label DCNL placement, delete or backspace act like the third mouse button, DCNL and any other key will select a label location). DCNL .. plot:: mpl_examples/pylab_examples/contour_demo.py'
def print_label(self, linecontour, labelwidth): DCNL 'if contours are too short, don\'t plot a label'
def too_close(self, x, y, lw): DCNL 'if there\'s a label already nearby, find a better place'
def get_label_coords(self, distances, XX, YY, ysize, lw): DCNL 'labels are ploted at a location with the smallest DCNL dispersion of the contour from a straight line DCNL unless there\'s another label nearby, in which case DCNL the second best place on the contour is picked up DCNL if there\'s no good place a label isplotted at the DCNL beginning of the contour'
def get_label_width(self, lev, fmt, fsize): DCNL 'get the width of the label in points'
def get_real_label_width(self, lev, fmt, fsize): DCNL 'This computes actual onscreen label width. DCNL This uses some black magic to determine onscreen extent of non-drawn DCNL label.  This magic may not be very robust.'
def set_label_props(self, label, text, color): DCNL 'set the label properties - color, fontsize, text'
def get_text(self, lev, fmt): DCNL 'get the text of the label'
def locate_label(self, linecontour, labelwidth): DCNL 'find a good place to plot a label (relatively flat DCNL part of the contour) and the angle of rotation for the DCNL text object'
def calc_label_rot_and_inline(self, slc, ind, lw, lc=None, spacing=5): DCNL 'This function calculates the appropriate label rotation given DCNL the linecontour coordinates in screen units, the index of the DCNL label location and the label width. DCNL It will also break contour and calculate inlining if *lc* is DCNL not empty (lc defaults to the empty list if None).  *spacing* DCNL is the space around the label in pixels to leave empty. DCNL Do both of these tasks at once to avoid calling mlab.path_length DCNL multiple times, which is relatively costly. DCNL The method used here involves calculating the path length DCNL along the contour in pixel coordinates and then looking DCNL approximately label width / 2 away from central point to DCNL determine rotation and then to break contour if desired.'
def pop_label(self, index=(-1)): DCNL 'Defaults to removing last label, but any index can be supplied'
def __init__(self, ax, *args, **kwargs): DCNL 'Draw contour lines or filled regions, depending on DCNL whether keyword arg \'filled\' is False (default) or True. DCNL The first argument of the initializer must be an axes DCNL object.  The remaining arguments and keyword arguments DCNL are described in ContourSet.contour_doc.'
def _autolev(self, z, N): DCNL 'Select contour levels to span the data. DCNL We need two more levels for filled contours than for DCNL line contours, because for the latter we need to specify DCNL the lower and upper boundary of each range. For example, DCNL a single contour boundary, say at z = 0, requires only DCNL one contour line, but two filled regions, and therefore DCNL three levels to provide boundaries for both regions.'
def _initialize_x_y(self, z): DCNL 'Return X, Y arrays such that contour(Z) will match imshow(Z) DCNL if origin is not None. DCNL The center of pixel Z[i,j] depends on origin: DCNL if origin is None, x = j, y = i; DCNL if origin is \'lower\', x = j + 0.5, y = i + 0.5; DCNL if origin is \'upper\', x = j + 0.5, y = Nrows - i - 0.5 DCNL If extent is not None, x and y will be scaled to match, DCNL as in imshow. DCNL If origin is None and extent is not None, then extent DCNL will give the minimum and maximum values of x and y.'
def _check_xyz(self, args): DCNL 'For functions like contour, check that the dimensions DCNL of the input arrays match; if x and y are 1D, convert DCNL them to 2D using meshgrid. DCNL Possible change: I think we should make and use an ArgumentError DCNL Exception class (here and elsewhere).'
def _process_colors(self): DCNL 'Color argument processing for contouring. DCNL Note that we base the color mapping on the contour levels, DCNL not on the actual range of the Z values.  This means we DCNL don\'t have to worry about bad values in Z, and we always have DCNL the full dynamic range available for the selected levels. DCNL The color is based on the midpoint of the layer, except for DCNL an extended end layers.'
def get_alpha(self): DCNL 'returns alpha to be applied to all ContourSet artists'
def set_alpha(self, alpha): DCNL 'sets alpha for all ContourSet artists'
def find_nearest_contour(self, x, y, indices=None, pixel=True): DCNL 'Finds contour that is closest to a point.  Defaults to DCNL measuring distance in pixels (screen space - useful for manual DCNL contour labeling), but this can be controlled via a keyword DCNL argument. DCNL Returns a tuple containing the contour, segment, index of DCNL segment, x & y of segment point and distance to minimum point. DCNL Call signature:: DCNL conmin,segmin,imin,xmin,ymin,dmin = find_nearest_contour( DCNL self, x, y, indices=None, pixel=True ) DCNL Optional keyword arguments:: DCNL *indices*: DCNL Indexes of contour levels to consider when looking for DCNL nearest point.  Defaults to using all levels. DCNL *pixel*: DCNL If *True*, measure distance in pixel space, if not, measure DCNL distance in axes space.  Defaults to *True*.'
def get_basefile(self, tex, fontsize, dpi=None): DCNL 'returns a filename based on a hash of the string, fontsize, and dpi'
def get_font_config(self): DCNL 'Reinitializes self if relevant rcParams on have changed.'
def get_font_preamble(self): DCNL 'returns a string containing font configuration for the tex preamble'
def get_custom_preamble(self): DCNL 'returns a string containing user additions to the tex preamble'
def _get_shell_cmd(self, *args): DCNL 'On windows, changing directories can be complicated by the presence of DCNL multiple drives. get_shell_cmd deals with this issue.'
def make_tex(self, tex, fontsize): DCNL 'Generate a tex file to render the tex string at a specific font size DCNL returns the file name'
def make_dvi(self, tex, fontsize): DCNL 'generates a dvi file containing latex\'s layout of tex string DCNL returns the file name'
def make_png(self, tex, fontsize, dpi): DCNL 'generates a png file containing latex\'s rendering of tex string DCNL returns the filename'
def make_ps(self, tex, fontsize): DCNL 'generates a postscript file containing latex\'s rendering of tex string DCNL returns the file name'
def get_ps_bbox(self, tex, fontsize): DCNL 'returns a list containing the postscript bounding box for latex\'s DCNL rendering of the tex string'
def get_grey(self, tex, fontsize=None, dpi=None): DCNL 'returns the alpha channel'
def get_rgba(self, tex, fontsize=None, dpi=None, rgb=(0, 0, 0)): DCNL 'Returns latex\'s rendering of the tex string as an rgba array'
def get_text(self): DCNL 'Return the cell Text intance'
def get_fontsize(self): DCNL 'Return the cell fontsize'
def auto_set_font_size(self, renderer): DCNL 'Shrink font size until text fits.'
def _set_text_position(self, renderer): DCNL 'Set text up so it draws in the right place. DCNL Currently support \'left\', \'center\' and \'right\''
def get_text_bounds(self, renderer): DCNL 'Get text bounds in axes co-ordinates.'
def get_required_width(self, renderer): DCNL 'Get width required for this cell.'
def set_text_props(self, **kwargs): DCNL 'update the text properties with kwargs'
def add_cell(self, row, col, *args, **kwargs): DCNL 'Add a cell to the table.'
def _get_grid_bbox(self, renderer): DCNL 'Get a bbox, in axes co-ordinates for the cells. DCNL Only include those in the range (0,0) to (maxRow, maxCol)'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred in the table. DCNL Returns T/F, {}'
def get_children(self): DCNL 'Return the Artists contained by the table'
def get_window_extent(self, renderer): DCNL 'Return the bounding box of the table in window coords'
def _do_cell_alignment(self): DCNL 'Calculate row heights and column widths. DCNL Position cells accordingly.'
def _auto_set_column_width(self, col, renderer): DCNL 'Automagically set width for column.'
def auto_set_font_size(self, value=True): DCNL 'Automatically set font size.'
def scale(self, xscale, yscale): DCNL 'Scale column widths by xscale and row heights by yscale.'
def set_fontsize(self, size): DCNL 'Set the fontsize of the cell text DCNL ACCEPTS: a float in points'
def _offset(self, ox, oy): DCNL 'Move all the artists by ox,oy (axes coords)'
def get_celld(self): DCNL 'return a dict of cells in the table'
def _collapse_duplicate_points(self): DCNL 'Generate index array that picks out unique x,y points. DCNL This appears to be required by the underlying delaunay triangulation DCNL code.'
def _compute_convex_hull(self): DCNL 'Extract the convex hull from the triangulation information. DCNL The output will be a list of point_id\'s in counter-clockwise order DCNL forming the convex hull of the data set.'
def linear_interpolator(self, z, default_value=np.nan): DCNL 'Get an object which can interpolate within the convex hull by DCNL assigning a plane to each triangle. DCNL z -- an array of floats giving the known function values at each point DCNL in the triangulation.'
def nn_interpolator(self, z, default_value=np.nan): DCNL 'Get an object which can interpolate within the convex hull by DCNL the natural neighbors method. DCNL z -- an array of floats giving the known function values at each point DCNL in the triangulation.'
def node_graph(self): DCNL 'Return a graph of node_id\'s pointing to node_id\'s. DCNL The arcs of the graph correspond to the edges in the triangulation. DCNL {node_id: set([node_id, ...]), ...}'
def __init__(self, bitmap, dpi): DCNL 'Initialise a wxWindows renderer instance.'
def get_text_width_height_descent(self, s, prop, ismath): DCNL 'get the width and height in display coords of the string s DCNL with FontPropertry prop'
def get_canvas_width_height(self): DCNL 'return the canvas width and height in display coords'
def draw_text(self, gc, x, y, s, prop, angle, ismath): DCNL 'Render the matplotlib.text.Text instance DCNL None)'
def new_gc(self): DCNL 'Return an instance of a GraphicsContextWx, and sets the current gc copy'
def get_gc(self): DCNL 'Fetch the locally cached gc.'
def get_wx_font(self, s, prop): DCNL 'Return a wx font.  Cache instances in a font dictionary for DCNL efficiency'
def points_to_pixels(self, points): DCNL 'convert point measures to pixes using dpi and the pixels per DCNL inch of the display'
def select(self): DCNL 'Select the current bitmap into this wxDC instance'
def unselect(self): DCNL 'Select a Null bitmasp into this wxDC instance'
def set_foreground(self, fg, isRGB=None): DCNL 'Set the foreground color.  fg can be a matlab format string, a DCNL html hex color string, an rgb unit tuple, or a float between 0 DCNL and 1.  In the latter case, grayscale is used.'
def set_graylevel(self, frac): DCNL 'Set the foreground color.  fg can be a matlab format string, a DCNL html hex color string, an rgb unit tuple, or a float between 0 DCNL and 1.  In the latter case, grayscale is used.'
def set_linewidth(self, w): DCNL 'Set the line width.'
def set_capstyle(self, cs): DCNL 'Set the capstyle as a string in (\'butt\', \'round\', \'projecting\')'
def set_joinstyle(self, js): DCNL 'Set the join style to be one of (\'miter\', \'round\', \'bevel\')'
def set_linestyle(self, ls): DCNL 'Set the line style to be one of'
def get_wxcolour(self, color): DCNL 'return a wx.Colour from RGB format'
def __init__(self, parent, id, figure): DCNL 'Initialise a FigureWx instance. DCNL - Initialise the FigureCanvasBase and wxPanel parents. DCNL - Set event handlers for: DCNL EVT_SIZE  (Resize event) DCNL EVT_PAINT (Paint event)'
def Copy_to_Clipboard(self, event=None): DCNL 'copy bitmap of canvas to system clipboard'
def Printer_Init(self): DCNL 'initialize printer settings using wx methods'
def Printer_Setup(self, event=None): DCNL 'set up figure for printing.  The standard wx Printer DCNL Setup Dialog seems to die easily. Therefore, this setup DCNL simply asks for image width and margin for printing.'
def Printer_Setup2(self, event=None): DCNL 'set up figure for printing.  Using the standard wx Printer DCNL Setup Dialog.'
def Printer_Preview(self, event=None): DCNL 'generate Print Preview with wx Print mechanism'
def Printer_Print(self, event=None): DCNL 'Print figure using wx Print mechanism'
def draw_idle(self): DCNL 'Delay rendering until the GUI is idle.'
def draw(self, drawDC=None): DCNL 'Render the figure using RendererWx instance renderer, or using a DCNL previously defined renderer if none is specified.'
def start_event_loop(self, timeout=0): DCNL 'Start an event loop.  This is used to start a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events.  This should not be DCNL confused with the main GUI event loop, which is always running DCNL and has nothing to do with this. DCNL Call signature:: DCNL start_event_loop(self,timeout=0) DCNL This call blocks until a callback function triggers DCNL stop_event_loop() or *timeout* is reached.  If *timeout* is DCNL <=0, never timeout. DCNL Raises RuntimeError if event loop is already running.'
def stop_event_loop(self, event=None): DCNL 'Stop an event loop.  This is used to stop a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events. DCNL Call signature:: DCNL stop_event_loop_default(self)'
def _get_imagesave_wildcards(self): DCNL 'return the wildcard string for the filesave dialog'
def gui_repaint(self, drawDC=None): DCNL 'Performs update of the displayed image on the GUI canvas, using the DCNL supplied device context.  If drawDC is None, a ClientDC will be used to DCNL redraw the image.'
def _onPaint(self, evt): DCNL 'Called when wxPaintEvt is generated'
def _onEraseBackground(self, evt): DCNL 'Called when window is redrawn; since we are blitting the entire DCNL image, we can leave this blank to suppress flicker.'
def _onSize(self, evt): DCNL 'Called when wxEventSize is generated. DCNL In this application we attempt to resize to fit the window, so it DCNL is better to take the performance hit and redraw the whole window.'
def _onIdle(self, evt): DCNL 'a GUI idle event'
def _onKeyDown(self, evt): DCNL 'Capture key press.'
def _onKeyUp(self, evt): DCNL 'Release key.'
def _onRightButtonDown(self, evt): DCNL 'Start measuring on an axis.'
def _onRightButtonUp(self, evt): DCNL 'End measuring on an axis.'
def _onLeftButtonDown(self, evt): DCNL 'Start measuring on an axis.'
def _onLeftButtonUp(self, evt): DCNL 'End measuring on an axis.'
def _onMouseWheel(self, evt): DCNL 'Translate mouse wheel events into matplotlib events'
def _onMotion(self, evt): DCNL 'Start measuring on an axis.'
def _onLeave(self, evt): DCNL 'Mouse has left the window.'
def _onEnter(self, evt): DCNL 'Mouse has entered the window.'
def GetToolBar(self): DCNL 'Override wxFrame::GetToolBar as we don\'t have managed toolbar'
def resize(self, width, height): DCNL 'Set the canvas size in pixels'
def _onMenuButton(self, evt): DCNL 'Handle menu button pressed.'
def _handleSelectAllAxes(self, evt): DCNL 'Called when the \'select all axes\' menu item is selected.'
def _handleInvertAxesSelected(self, evt): DCNL 'Called when the invert all menu item is selected'
def _onMenuItemSelected(self, evt): DCNL 'Called whenever one of the specific axis menu items is selected'
def updateAxes(self, maxAxis): DCNL 'Ensures that there are entries for max_axis axes in the menu DCNL (selected by default).'
def getActiveAxes(self): DCNL 'Return a list of the selected axes.'
def updateButtonText(self, lst): DCNL 'Update the list of selected axes in the menu button'
def draw_rubberband(self, event, x0, y0, x1, y1): DCNL 'adapted from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/189744'
def __init__(self, canvas, can_kill=False): DCNL 'figure is the Figure instance that the toolboar controls DCNL win, if not None, is the wxWindow the Figure is embedded in'
def _create_menu(self): DCNL 'Creates the \'menu\' - implemented as a button which opens a DCNL pop-up menu since wxPython does not allow a menu as a control'
def _create_controls(self, can_kill): DCNL 'Creates the button controls, and links them to event handlers'
def set_active(self, ind): DCNL 'ind is a list of index numbers for the axes which are to be made active'
def get_last_control(self): DCNL 'Returns the identity of the last toolbar button pressed.'
def update(self): DCNL 'Update the toolbar menu - called when (e.g.) a new subplot or axes are added'
def _do_nothing(self, d): DCNL 'A NULL event handler - does nothing whatsoever'
def __init__(self, id, len, file, extra=None): DCNL 'id: object id of stream; len: an unused Reference object for the DCNL length of the stream, or None (to use a memory buffer); file: DCNL a PdfFile; extra: a dictionary of extra key-value pairs to DCNL include in the stream header'
def end(self): DCNL 'Finalize stream.'
def write(self, data): DCNL 'Write some data on the stream.'
def _flush(self): DCNL 'Flush the compression object.'
def fontName(self, fontprop): DCNL 'Select a font based on fontprop and return a name suitable for DCNL Op.selectfont. If fontprop is a string, it will be interpreted DCNL as the filename of the font.'
def embedTTF(self, filename, characters): DCNL 'Embed the TTF font from the named file into the document.'
def alphaState(self, alpha): DCNL 'Return name of an ExtGState that sets alpha to the given value'
def imageObject(self, image): DCNL 'Return name of an image XObject representing the given image.'
def markerObject(self, path, trans, fillp, lw): DCNL 'Return name of a marker XObject representing the given path.'
def reserveObject(self, name=''): DCNL 'Reserve an ID for an indirect object. DCNL The name is used for debugging in case we forget to print out DCNL the object with writeObject.'
def writeXref(self): DCNL 'Write out the xref table.'
def writeTrailer(self): DCNL 'Write out the PDF trailer.'
def track_characters(self, font, s): DCNL 'Keeps track of which characters are required from DCNL each font.'
def clip_cmd(self, cliprect, clippath): DCNL 'Set clip rectangle. Calls self.pop() and self.push().'
def delta(self, other): DCNL 'Copy properties of other into self and return PDF commands DCNL needed to transform self into other.'
def copy_properties(self, other): DCNL 'Copy properties of other into self.'
def finalize(self): DCNL 'Make sure every pushed graphics state is popped.'
def __init__(self, width, height, pswriter, imagedpi=72): DCNL 'Although postscript itself is dpi independent, we need to DCNL imform the image code about a requested dpi to generate high DCNL res images and them scale them before embeddin them'
def track_characters(self, font, s): DCNL 'Keeps track of which characters are required from DCNL each font.'
def set_hatch(self, hatch): DCNL 'hatch can be one of: DCNL /   - diagonal hatching DCNL \   - back diagonal DCNL |   - vertical DCNL -   - horizontal DCNL +   - crossed DCNL X   - crossed diagonal DCNL letters can be combined, in which case all the specified DCNL hatchings are done DCNL if same letter repeats, it increases the density of hatching DCNL in that direction'
def get_canvas_width_height(self): DCNL 'return the canvas width and height in display coords'
def get_text_width_height_descent(self, s, prop, ismath): DCNL 'get the width and height in display coords of the string s DCNL with FontPropertry prop'
def flipy(self): DCNL 'return true if small y numbers are top for renderer'
def get_image_magnification(self): DCNL 'Get the factor by which to magnify images passed to draw_image. DCNL Allows a backend to have images at a different resolution to other DCNL artists.'
def draw_image(self, x, y, im, bbox, clippath=None, clippath_trans=None): DCNL 'Draw the Image instance into the current axes; x is the DCNL distance in pixels from the left hand side of the canvas and y DCNL is the distance from bottom DCNL bbox is a matplotlib.transforms.BBox instance for clipping, or DCNL None'
def draw_path(self, gc, path, transform, rgbFace=None): DCNL 'Draws a Path instance using the given affine transform.'
def draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None): DCNL 'Draw the markers defined by path at each of the positions in x DCNL and y.  path coordinates are points, x and y coords will be DCNL transformed by the transform'
def draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!'): DCNL 'draw a Text instance'
def draw_text(self, gc, x, y, s, prop, angle, ismath): DCNL 'draw a Text instance'
def draw_unicode(self, gc, x, y, s, prop, angle): DCNL 'draw a unicode string.  ps doesn\'t have unicode support, so DCNL we have to do this the hard way'
def draw_mathtext(self, gc, x, y, s, prop, angle): DCNL 'Draw the math text using matplotlib.mathtext'
def _draw_ps(self, ps, gc, rgbFace, fill=True, stroke=True, command=None): DCNL 'Emit the PostScript sniplet \'ps\' with all the attributes from \'gc\' DCNL applied.  \'ps\' must consist of PostScript commands to construct a path. DCNL The fill and/or stroke kwargs can be set to False if the DCNL \'ps\' string already includes filling and/or stroking, in DCNL which case _draw_ps is just supplying properties and DCNL clipping.'
def _print_figure(self, outfile, format, dpi=72, facecolor='w', edgecolor='w', orientation='portrait', isLandscape=False, papertype=None): DCNL 'Render the figure to hardcopy.  Set the figure patch face and DCNL edge colors.  This is useful because some of the GUIs have a DCNL gray figure face color background and you\'ll probably want to DCNL override this on hardcopy DCNL If outfile is a string, it is interpreted as a file name. DCNL If the extension matches .ep* write encapsulated postscript, DCNL otherwise write a stand-alone PostScript file. DCNL If outfile is a file object, a stand-alone PostScript file is DCNL written into this file object.'
def _print_figure_tex(self, outfile, format, dpi, facecolor, edgecolor, orientation, isLandscape, papertype): DCNL 'If text.usetex is True in rc, a temporary pair of tex/eps files DCNL are created to allow tex to manage the text layout via the PSFrags DCNL package. These files are processed to yield the final ps or eps file.'
def _renderer_init(self): DCNL 'Override by GTK backends to select a different renderer DCNL Renderer should provide the methods: DCNL set_pixmap () DCNL set_width_height () DCNL that are used by DCNL _render_figure() / _pixmap_prepare()'
def _pixmap_prepare(self, width, height): DCNL 'Make sure _._pixmap is at least width, height, DCNL create new pixmap if necessary'
def _render_figure(self, pixmap, width, height): DCNL 'used by GTK and GTKcairo. GTKAgg overrides'
def expose_event(self, widget, event): DCNL 'Expose_event for all GTK backends. Should not be overridden.'
def resize(self, width, height): DCNL 'set the canvas size in pixels'
def draw_rubberband(self, event, x0, y0, x1, y1): DCNL 'adapted from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/189744'
def __init__(self, canvas, window): DCNL 'figManager is the FigureManagerGTK instance that contains the DCNL toolbar, with attributes figure, window and drawingArea'
def panx(self, button, direction): DCNL 'panx in direction'
def pany(self, button, direction): DCNL 'pany in direction'
def zoomx(self, button, direction): DCNL 'zoomx in direction'
def zoomy(self, button, direction): DCNL 'zoomy in direction'
def show(self): DCNL 'populate the combo box'
def get_active_line(self): DCNL 'get the active line'
def get_active_linestyle(self): DCNL 'get the active lineinestyle'
def get_active_marker(self): DCNL 'get the active lineinestyle'
def _update(self): DCNL 'update the active line props from the widgets'
def on_combobox_lineprops_changed(self, item): DCNL 'update the widgets from the active line'
def on_colorbutton_markerface_color_set(self, button): DCNL 'called colorbutton marker clicked'
def __init__(self, width, height, dpi, vector_renderer, raster_renderer_class=None): DCNL 'width: The width of the canvas in logical units DCNL height: The height of the canvas in logical units DCNL dpi: The dpi of the canvas DCNL vector_renderer: An instance of a subclass of RendererBase DCNL that will be used for the vector drawing. DCNL raster_renderer_class: The renderer class to use for the DCNL raster drawing.  If not provided, this will use the Agg DCNL backend (which is currently the only viable option anyway.)'
def start_rasterizing(self): DCNL 'Enter "raster" mode.  All subsequent drawing commands (until DCNL stop_rasterizing is called) will be drawn with the raster DCNL backend. DCNL If start_rasterizing is called multiple times before DCNL stop_rasterizing is called, this method has no effect.'
def stop_rasterizing(self): DCNL 'Exit "raster" mode.  All of the drawing that was done since DCNL the last start_rasterizing command will be copied to the DCNL vector backend by calling draw_image. DCNL If stop_rasterizing is called multiple times before DCNL start_rasterizing is called, this method has no effect.'
def draw(self): DCNL 'Draw the figure using the renderer'
def print_foo(self, filename, *args, **kwargs): DCNL 'Write out format foo.  The dpi, facecolor and edgecolor are restored DCNL to their original values after this call, so you don\'t need to DCNL save and restore them.'
def _get_style(self, gc, rgbFace): DCNL 'return the style string. DCNL style is generated from the GraphicsContext, rgbFace and clippath'
def option_image_nocomposite(self): DCNL 'if svg.image_noscale is True, compositing multiple images into one is prohibited'
def _draw_mathtext(self, gc, x, y, s, prop, angle): DCNL 'Draw math text using matplotlib.mathtext'
def __init__(self, outfile, width, height, dpi): DCNL 'Initialize the renderer with a gd image instance'
def draw_arc(self, gcEdge, rgbFace, x, y, width, height, angle1, angle2, rotation): DCNL 'Draw an arc using GraphicsContext instance gcEdge, centered at x,y, DCNL with width and height and angles from 0.0 to 360.0 DCNL 0 degrees is at 3-o\'clock DCNL positive angles are anti-clockwise DCNL If the color rgbFace is not None, fill the arc with it.'
def draw_image(self, x, y, im, bbox): DCNL 'Draw the Image instance into the current axes; x is the DCNL distance in pixels from the left hand side of the canvas. y is DCNL the distance from the origin.  That is, if origin is upper, y DCNL is the distance from top.  If origin is lower, y is the DCNL distance from bottom DCNL bbox is a matplotlib.transforms.BBox instance for clipping, or DCNL None'
def draw_line(self, gc, x1, y1, x2, y2): DCNL 'Draw a single line from x1,y1 to x2,y2'
def draw_lines(self, gc, x, y): DCNL 'x and y are equal length arrays, draw lines connecting each DCNL point in x, y'
def draw_point(self, gc, x, y): DCNL 'Draw a single point at x,y DCNL Where \'point\' is a device-unit point (or pixel), not a matplotlib point'
def draw_polygon(self, gcEdge, rgbFace, points): DCNL 'Draw a polygon using the GraphicsContext instance gc. DCNL points is a len vertices tuple, each element DCNL giving the x,y coords a vertex DCNL If the color rgbFace is not None, fill the polygon with it'
def draw_rectangle(self, gcEdge, rgbFace, x, y, width, height): DCNL 'Draw a non-filled rectangle using the GraphicsContext instance gcEdge, DCNL with lower left at x,y with width and height. DCNL If rgbFace is not None, fill the rectangle with it.'
def draw_text(self, gc, x, y, s, prop, angle, ismath=False): DCNL 'Draw the text.Text instance s at x,y (display coords) with font DCNL properties instance prop at angle in degrees, using GraphicsContext gc DCNL **backend implementers note** DCNL When you are trying to determine if you have gotten your bounding box DCNL right (which is what enables the text layout/alignment to work DCNL properly), it helps to change the line in text.py DCNL if 0: bbox_artist(self, renderer) DCNL to if 1, and then the actual bounding box will be blotted along with DCNL your text.'
def draw_plain_text(self, gc, x, y, s, prop, angle): DCNL 'Draw a text string verbatim; no conversion is done.'
def draw_math_text(self, gc, x, y, s, prop, angle): DCNL 'Draw a subset of TeX, currently handles exponents only.  Since DCNL pyemf doesn\'t have any raster functionality yet, the DCNL texmanager.get_rgba won\'t help.'
def get_math_text_width_height(self, s, prop): DCNL 'get the width and height in display coords of the string s DCNL with FontPropertry prop, ripped right out of backend_ps.  This DCNL method must be kept in sync with draw_math_text.'
def flipy(self): DCNL 'return true if y small numbers are top for renderer DCNL Is used for drawing text (text.py) and images (image.py) only'
def get_canvas_width_height(self): DCNL 'return the canvas width and height in display coords'
def set_handle(self, type, handle): DCNL 'Update the EMF file with the current handle, but only if it DCNL isn\'t the same as the last one.  Don\'t want to flood the file DCNL with duplicate info.'
def get_font_handle(self, prop, angle): DCNL 'Look up the handle for the font based on the dict of DCNL properties *and* the rotation angle, since in EMF the font DCNL rotation is a part of the font definition.'
def select_pen(self, gc): DCNL 'Select a pen that includes the color, line width and line DCNL style.  Return the pen if it will draw a line, or None if the DCNL pen won\'t produce any output (i.e. the style is PS_NULL)'
def select_brush(self, rgb): DCNL 'Select a fill color, and return the brush if the color is DCNL valid or None if this won\'t produce a fill operation.'
def _get_font_ttf(self, prop): DCNL 'get the true type font properties, used because EMFs on DCNL windows will use true type fonts.'
def get_text_width_height(self, s, prop, ismath): DCNL 'get the width and height in display coords of the string s DCNL with FontPropertry prop, ripped right out of backend_ps'
def draw(self): DCNL 'Draw the figure using the renderer'
def _renderer_init(self): DCNL 'Override to use cairo (rather than GDK) renderer'
def set_width_height(self, width, height): DCNL 'w,h is the figure w,h not the pixmap w,h'
def _draw_rotated_text(self, gc, x, y, s, prop, angle): DCNL 'Draw the text rotated 90 degrees, other angles are not supported'
def _get_pango_layout(self, s, prop): DCNL 'Create a pango layout instance for Text \'s\' with properties \'prop\'. DCNL Return - pango layout (from cache if already exists) DCNL Note that pango assumes a logical DPI of 96 DCNL Ref: pango/fonts.c/pango_font_description_set_size() manual page'
def rgb_to_gdk_color(self, rgb): DCNL 'rgb - an RGB tuple (three 0.0-1.0 values) DCNL return an allocated gtk.gdk.Color'
def paintEvent(self, e): DCNL 'Draw to the Agg backend and then copy the image to the qt.drawable. DCNL In Qt, all drawing should be done inside of here when a widget is DCNL shown onscreen.'
def draw(self): DCNL 'Draw the figure when xwindows is ready for the update'
def blit(self, bbox=None): DCNL 'Blit the region in bbox'
def draw_idle(self): DCNL 'update drawing area only if idle'
def get_tk_widget(self): DCNL 'returns the Tk widget used to implement FigureCanvasTkAgg. DCNL Although the initial implementation uses a Tk canvas,  this routine DCNL is intended to hide that fact.'
def scroll_event_windows(self, event): DCNL 'MouseWheel event processor'
def show(self): DCNL 'this function doesn\'t segfault but causes the DCNL PyEval_RestoreThread: NULL state bug on win32'
def dynamic_update(self): DCNL 'update drawing area only if idle'
def draw_mathtext(self, gc, x, y, s, prop, angle): DCNL 'Draw the math text using matplotlib.mathtext'
def draw_text(self, gc, x, y, s, prop, angle, ismath): DCNL 'Render the text'
def get_text_width_height_descent(self, s, prop, ismath): DCNL 'get the width and height in display coords of the string s DCNL with FontPropertry prop DCNL # passing rgb is a little hack to make cacheing in the DCNL # texmanager more efficient.  It is not meant to be used DCNL # outside the backend'
def get_canvas_width_height(self): DCNL 'return the canvas width and height in display coords'
def _get_agg_font(self, prop): DCNL 'Get the font for text instance t, cacheing for efficiency'
def points_to_pixels(self, points): DCNL 'convert point measures to pixes using dpi and the pixels per DCNL inch of the display'
def draw(self): DCNL 'Draw the figure using the renderer'
def resize(self, width, height): DCNL 'set the canvas size in pixels'
def draw(self, drawDC=None): DCNL 'Render the figure using agg.'
def blit(self, bbox=None): DCNL 'Transfer the region of the agg buffer defined by bbox to the display. DCNL If bbox is None, the entire buffer is transferred.'
def __init__(self, dpi): DCNL ''
def paintEvent(self, e): DCNL 'Draw to the Agg backend and then copy the image to the qt.drawable. DCNL In Qt, all drawing should be done inside of here when a widget is DCNL shown onscreen.'
def draw(self): DCNL 'Draw the figure when xwindows is ready for the update'
def blit(self, bbox=None): DCNL 'Blit the region in bbox'
def resize(self, width, height): DCNL 'set the canvas size in pixels'
def __init__(self, canvas, parent, coordinates=True): DCNL 'coordinates: should we show the coordinates on the right?'
def __init__(self, fmt='%Y-%m-%d', missing='Null', missingval=None): DCNL 'use a :func:`time.strptime` format string for conversion'
def __init__(self, fmt='%Y-%m-%d', missing='Null', missingval=None): DCNL 'use a :func:`time.strptime` format string for conversion'
def __init__(self, signals): DCNL '*signals* is a sequence of valid signals'
def _check_signal(self, s): DCNL 'make sure *s* is a valid signal or raise a ValueError'
def connect(self, s, func): DCNL 'register *func* to be called when a signal *s* is generated DCNL func will be called'
def disconnect(self, cid): DCNL 'disconnect the callback registered with callback id *cid*'
def process(self, s, *args, **kwargs): DCNL 'process signal *s*.  All of the functions registered to receive DCNL callbacks on *s* will be called with *\*args* and *\*\*kwargs*'
def _make_regex(self): DCNL 'Build re object based on the keys of the current dictionary'
def __call__(self, match): DCNL 'Handler invoked for each regex *match*'
def xlat(self, text): DCNL 'Translate *text*, returns the modified text.'
def append(self, x): DCNL 'Append an element overwriting the oldest one.'
def get(self): DCNL 'return list of elements in correct order'
def append(self, x): DCNL 'append an element at the end of the buffer'
def get(self): DCNL 'Return a list of elements from the oldest to the newest.'
def __call__(self): DCNL 'return the current element, or None'
def forward(self): DCNL 'move the position forward and return the current element'
def back(self): DCNL 'move the position back and return the current element'
def push(self, o): DCNL 'push object onto stack at current position - all elements DCNL occurring later than the current position are discarded'
def home(self): DCNL 'push the first element onto the top of the stack'
def clear(self): DCNL 'empty the stack'
def bubble(self, o): DCNL 'raise *o* to the top of the stack and return *o*.  *o* must be DCNL in the stack'
def remove(self, o): DCNL 'remove element *o* from the stack'
def clean(self): DCNL 'Clean dead weak references from the dictionary'
def join(self, a, *args): DCNL 'Join given arguments into the same set.  Accepts one or more DCNL arguments.'
def joined(self, a, b): DCNL 'Returns True if *a* and *b* are members of the same set.'
def __iter__(self): DCNL 'Iterate over each of the disjoint sets as a list. DCNL The iterator is invalid if interleaved with calls to join().'
def get_siblings(self, a): DCNL 'Returns all of the items joined with *a*, including itself.'
def get_transform(self): DCNL 'Return the :class:`~matplotlib.transforms.Transform` object DCNL associated with this scale.'
def set_default_locators_and_formatters(self, axis): DCNL 'Set the :class:`~matplotlib.ticker.Locator` and DCNL :class:`~matplotlib.ticker.Formatter` objects on the given DCNL axis to match this scale.'
def limit_range_for_scale(self, vmin, vmax, minpos): DCNL 'Returns the range *vmin*, *vmax*, possibly limited to the DCNL domain supported by this scale. DCNL *minpos* should be the minimum positive value in the data. DCNL This is used by log scales to determine a minimum value.'
def set_default_locators_and_formatters(self, axis): DCNL 'Set the locators and formatters to reasonable defaults for DCNL linear scaling.'
def get_transform(self): DCNL 'The transform for linear scaling is just the DCNL :class:`~matplotlib.transforms.IdentityTransform`.'
def __init__(self, axis, **kwargs): DCNL '*basex*/*basey*: DCNL The base of the logarithm DCNL *subsx*/*subsy*: DCNL Where to place the subticks between each major tick. DCNL Should be a sequence of integers.  For example, in a log10 DCNL scale: ``[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`` DCNL will place 10 logarithmically spaced minor ticks between DCNL each major tick.'
def set_default_locators_and_formatters(self, axis): DCNL 'Set the locators and formatters to specialized versions for DCNL log scaling.'
def get_transform(self): DCNL 'Return a :class:`~matplotlib.transforms.Transform` instance DCNL appropriate for the given logarithm base.'
def limit_range_for_scale(self, vmin, vmax, minpos): DCNL 'Limit the domain to positive values.'
def __init__(self, axis, **kwargs): DCNL '*basex*/*basey*: DCNL The base of the logarithm DCNL *linthreshx*/*linthreshy*: DCNL The range (-*x*, *x*) within which the plot is linear (to DCNL avoid having the plot go to infinity around zero). DCNL *subsx*/*subsy*: DCNL Where to place the subticks between each major tick. DCNL Should be a sequence of integers.  For example, in a log10 DCNL scale: ``[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`` DCNL will place 10 logarithmically spaced minor ticks between DCNL each major tick.'
def set_default_locators_and_formatters(self, axis): DCNL 'Set the locators and formatters to specialized versions for DCNL symmetrical log scaling.'
def get_transform(self): DCNL 'Return a :class:`SymmetricalLogTransform` instance.'
def open_group(self, s): DCNL 'Open a grouping element with label *s*. Is only currently used by DCNL :mod:`~matplotlib.backends.backend_svg`'
def close_group(self, s): DCNL 'Close a grouping element with label *s* DCNL Is only currently used by :mod:`~matplotlib.backends.backend_svg`'
def draw_path(self, gc, path, transform, rgbFace=None): DCNL 'Draws a :class:`~matplotlib.path.Path` instance using the DCNL given affine transform.'
def draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None): DCNL 'Draws a marker at each of the vertices in path.  This includes DCNL all vertices, including control points on curves.  To avoid DCNL that behavior, those vertices should be removed before calling DCNL this function. DCNL *gc* DCNL the :class:`GraphicsContextBase` instance DCNL *marker_trans* DCNL is an affine transform applied to the marker. DCNL *trans* DCNL is an affine transform applied to the path. DCNL This provides a fallback implementation of draw_markers that DCNL makes multiple calls to :meth:`draw_path`.  Some backends may DCNL want to override this method in order to draw the marker only DCNL once and reuse it multiple times.'
def draw_path_collection(self, master_transform, cliprect, clippath, clippath_trans, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls): DCNL 'Draws a collection of paths, selecting drawing properties from DCNL the lists *facecolors*, *edgecolors*, *linewidths*, DCNL *linestyles* and *antialiaseds*. *offsets* is a list of DCNL offsets to apply to each of the paths.  The offsets in DCNL *offsets* are first transformed by *offsetTrans* before DCNL being applied. DCNL This provides a fallback implementation of DCNL :meth:`draw_path_collection` that makes multiple calls to DCNL draw_path.  Some backends may want to override this in order DCNL to render each set of path data only once, and then reference DCNL that path multiple times with the different offsets, colors, DCNL styles etc.  The generator methods DCNL :meth:`_iter_collection_raw_paths` and DCNL :meth:`_iter_collection` are provided to help with (and DCNL standardize) the implementation across backends.  It is highly DCNL recommended to use those generators, so that changes to the DCNL behavior of :meth:`draw_path_collection` can be made globally.'
def draw_quad_mesh(self, master_transform, cliprect, clippath, clippath_trans, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, showedges): DCNL 'This provides a fallback implementation of DCNL :meth:`draw_quad_mesh` that generates paths and then calls DCNL :meth:`draw_path_collection`.'
def _iter_collection_raw_paths(self, master_transform, paths, all_transforms): DCNL 'This is a helper method (along with :meth:`_iter_collection`) to make DCNL it easier to write a space-efficent :meth:`draw_path_collection` DCNL implementation in a backend. DCNL This method yields all of the base path/transform DCNL combinations, given a master transform, a list of paths and DCNL list of transforms. DCNL The arguments should be exactly what is passed in to DCNL :meth:`draw_path_collection`. DCNL The backend should take each yielded path and transform and DCNL create an object that can be referenced (reused) later.'
def _iter_collection(self, path_ids, cliprect, clippath, clippath_trans, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls): DCNL 'This is a helper method (along with DCNL :meth:`_iter_collection_raw_paths`) to make it easier to write DCNL a space-efficent :meth:`draw_path_collection` implementation in a DCNL backend. DCNL This method yields all of the path, offset and graphics DCNL context combinations to draw the path collection.  The caller DCNL should already have looped over the results of DCNL :meth:`_iter_collection_raw_paths` to draw this collection. DCNL The arguments should be the same as that passed into DCNL :meth:`draw_path_collection`, with the exception of DCNL *path_ids*, which is a list of arbitrary objects that the DCNL backend will use to reference one of the paths created in the DCNL :meth:`_iter_collection_raw_paths` stage. DCNL Each yielded result is of the form:: DCNL xo, yo, path_id, gc, rgbFace DCNL where *xo*, *yo* is an offset; *path_id* is one of the elements of DCNL *path_ids*; *gc* is a graphics context and *rgbFace* is a color to DCNL use for filling the path.'
def get_image_magnification(self): DCNL 'Get the factor by which to magnify images passed to :meth:`draw_image`. DCNL Allows a backend to have images at a different resolution to other DCNL artists.'
def draw_image(self, x, y, im, bbox, clippath=None, clippath_trans=None): DCNL 'Draw the image instance into the current axes; DCNL *x* DCNL is the distance in pixels from the left hand side of the canvas. DCNL *y* DCNL the distance from the origin.  That is, if origin is DCNL upper, y is the distance from top.  If origin is lower, y DCNL is the distance from bottom DCNL *im* DCNL the :class:`matplotlib._image.Image` instance DCNL *bbox* DCNL a :class:`matplotlib.transforms.Bbox` instance for clipping, or DCNL None'
def option_image_nocomposite(self): DCNL 'overwrite this method for renderers that do not necessarily DCNL want to rescale and composite raster images. (like SVG)'
def draw_text(self, gc, x, y, s, prop, angle, ismath=False): DCNL 'Draw the text instance DCNL *gc* DCNL the :class:`GraphicsContextBase` instance DCNL *x* DCNL the x location of the text in display coords DCNL *y* DCNL the y location of the text in display coords DCNL *s* DCNL a :class:`matplotlib.text.Text` instance DCNL *prop* DCNL a :class:`matplotlib.font_manager.FontProperties` instance DCNL *angle* DCNL the rotation angle in degrees DCNL **backend implementers note** DCNL When you are trying to determine if you have gotten your bounding box DCNL right (which is what enables the text layout/alignment to work DCNL properly), it helps to change the line in text.py:: DCNL if 0: bbox_artist(self, renderer) DCNL to if 1, and then the actual bounding box will be blotted along with DCNL your text.'
def flipy(self): DCNL 'Return true if y small numbers are top for renderer Is used DCNL for drawing text (:mod:`matplotlib.text`) and images DCNL (:mod:`matplotlib.image`) only'
def get_canvas_width_height(self): DCNL 'return the canvas width and height in display coords'
def get_texmanager(self): DCNL 'return the :class:`matplotlib.texmanager.TexManager` instance'
def get_text_width_height_descent(self, s, prop, ismath): DCNL 'get the width and height, and the offset from the bottom to the DCNL baseline (descent), in display coords of the string s with DCNL :class:`~matplotlib.font_manager.FontProperties` prop'
def new_gc(self): DCNL 'Return an instance of a :class:`GraphicsContextBase`'
def points_to_pixels(self, points): DCNL 'Convert points to display units DCNL *points* DCNL a float or a numpy array of float DCNL return points converted to pixels DCNL You need to override this function (unless your backend DCNL doesn\'t have a dpi, eg, postscript or svg).  Some imaging DCNL systems assume some value for pixels per inch:: DCNL points to pixels = points * pixels_per_inch/72.0 * dpi/72.0'
def copy_properties(self, gc): DCNL 'Copy properties from gc to self'
def get_alpha(self): DCNL 'Return the alpha value used for blending - not supported on DCNL all backends'
def get_antialiased(self): DCNL 'Return true if the object should try to do antialiased rendering'
def get_capstyle(self): DCNL 'Return the capstyle as a string in (\'butt\', \'round\', \'projecting\')'
def get_clip_rectangle(self): DCNL 'Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox` instance'
def get_clip_path(self): DCNL 'Return the clip path in the form (path, transform), where path DCNL is a :class:`~matplotlib.path.Path` instance, and transform is DCNL an affine transform to apply to the path before clipping.'
def get_dashes(self): DCNL 'Return the dash information as an offset dashlist tuple. DCNL The dash list is a even size list that gives the ink on, ink DCNL off in pixels. DCNL See p107 of to PostScript `BLUEBOOK DCNL <http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_ DCNL for more info. DCNL Default value is None'
def get_joinstyle(self): DCNL 'Return the line join style as one of (\'miter\', \'round\', \'bevel\')'
def get_linestyle(self, style): DCNL 'Return the linestyle: one of (\'solid\', \'dashed\', \'dashdot\', DCNL \'dotted\').'
def get_linewidth(self): DCNL 'Return the line width in points as a scalar'
def get_rgb(self): DCNL 'returns a tuple of three floats from 0-1.  color can be a DCNL matlab format string, a html hex color string, or a rgb tuple'
def get_url(self): DCNL 'returns a url if one is set, None otherwise'
def get_snap(self): DCNL 'returns the snap setting which may be: DCNL * True: snap vertices to the nearest pixel center DCNL * False: leave vertices as-is DCNL * None: (auto) If the path contains only rectilinear line DCNL segments, round to the nearest pixel center'
def set_alpha(self, alpha): DCNL 'Set the alpha value used for blending - not supported on DCNL all backends'
def set_antialiased(self, b): DCNL 'True if object should be drawn with antialiased rendering'
def set_capstyle(self, cs): DCNL 'Set the capstyle as a string in (\'butt\', \'round\', \'projecting\')'
def set_clip_rectangle(self, rectangle): DCNL 'Set the clip rectangle with sequence (left, bottom, width, height)'
def set_clip_path(self, path): DCNL 'Set the clip path and transformation.  Path should be a DCNL :class:`~matplotlib.transforms.TransformedPath` instance.'
def set_dashes(self, dash_offset, dash_list): DCNL 'Set the dash style for the gc. DCNL *dash_offset* DCNL is the offset (usually 0). DCNL *dash_list* DCNL specifies the on-off sequence as points.  ``(None, None)`` specifies a solid line'
def set_foreground(self, fg, isRGB=False): DCNL 'Set the foreground color.  fg can be a matlab format string, a DCNL html hex color string, an rgb unit tuple, or a float between 0 DCNL and 1.  In the latter case, grayscale is used. DCNL The :class:`GraphicsContextBase` converts colors to rgb DCNL internally.  If you know the color is rgb already, you can set DCNL ``isRGB=True`` to avoid the performace hit of the conversion'
def set_graylevel(self, frac): DCNL 'Set the foreground color to be a gray level with *frac*'
def set_joinstyle(self, js): DCNL 'Set the join style to be one of (\'miter\', \'round\', \'bevel\')'
def set_linewidth(self, w): DCNL 'Set the linewidth in points'
def set_linestyle(self, style): DCNL 'Set the linestyle to be one of (\'solid\', \'dashed\', \'dashdot\', DCNL \'dotted\').'
def set_url(self, url): DCNL 'Sets the url for links in compatible backends'
def set_snap(self, snap): DCNL 'Sets the snap setting which may be: DCNL * True: snap vertices to the nearest pixel center DCNL * False: leave vertices as-is DCNL * None: (auto) If the path contains only rectilinear line DCNL segments, round to the nearest pixel center'
def set_hatch(self, hatch): DCNL 'Sets the hatch style for filling'
def get_hatch(self): DCNL 'Gets the current hatch style'
def __init__(self, name, canvas, x, y, guiEvent=None): DCNL '*x*, *y* in figure coords, 0,0 = bottom, left'
def _update_enter_leave(self): DCNL 'process the figure/axes enter leave events'
def __init__(self, name, canvas, x, y, button=None, key=None, step=0, guiEvent=None): DCNL 'x, y in figure coords, 0,0 = bottom, left DCNL button pressed None, 1, 2, 3, \'up\', \'down\''
def onRemove(self, ev): DCNL 'Mouse event processor which removes the top artist DCNL under the cursor.  Connect this to the \'mouse_press_event\' DCNL using:: DCNL canvas.mpl_connect(\'mouse_press_event\',canvas.onRemove)'
def onHilite(self, ev): DCNL 'Mouse event processor which highlights the artists DCNL under the cursor.  Connect this to the \'motion_notify_event\' DCNL using:: DCNL canvas.mpl_connect(\'motion_notify_event\',canvas.onHilite)'
def blit(self, bbox=None): DCNL 'blit the canvas in bbox (default entire canvas)'
def resize(self, w, h): DCNL 'set the canvas size in pixels'
def draw_event(self, renderer): DCNL 'This method will be call all functions connected to the DCNL \'draw_event\' with a :class:`DrawEvent`'
def resize_event(self): DCNL 'This method will be call all functions connected to the DCNL \'resize_event\' with a :class:`ResizeEvent`'
def key_press_event(self, key, guiEvent=None): DCNL 'This method will be call all functions connected to the DCNL \'key_press_event\' with a :class:`KeyEvent`'
def key_release_event(self, key, guiEvent=None): DCNL 'This method will be call all functions connected to the DCNL \'key_release_event\' with a :class:`KeyEvent`'
def pick_event(self, mouseevent, artist, **kwargs): DCNL 'This method will be called by artists who are picked and will DCNL fire off :class:`PickEvent` callbacks registered listeners'
def scroll_event(self, x, y, step, guiEvent=None): DCNL 'Backend derived classes should call this function on any DCNL scroll wheel event.  x,y are the canvas coords: 0,0 is lower, DCNL left.  button and key are as defined in MouseEvent. DCNL This method will be call all functions connected to the DCNL \'scroll_event\' with a :class:`MouseEvent` instance.'
def button_press_event(self, x, y, button, guiEvent=None): DCNL 'Backend derived classes should call this function on any mouse DCNL button press.  x,y are the canvas coords: 0,0 is lower, left. DCNL button and key are as defined in :class:`MouseEvent`. DCNL This method will be call all functions connected to the DCNL \'button_press_event\' with a :class:`MouseEvent` instance.'
def button_release_event(self, x, y, button, guiEvent=None): DCNL 'Backend derived classes should call this function on any mouse DCNL button release. DCNL *x* DCNL the canvas coordinates where 0=left DCNL *y* DCNL the canvas coordinates where 0=bottom DCNL *guiEvent* DCNL the native UI event that generated the mpl event DCNL This method will be call all functions connected to the DCNL \'button_release_event\' with a :class:`MouseEvent` instance.'
def motion_notify_event(self, x, y, guiEvent=None): DCNL 'Backend derived classes should call this function on any DCNL motion-notify-event. DCNL *x* DCNL the canvas coordinates where 0=left DCNL *y* DCNL the canvas coordinates where 0=bottom DCNL *guiEvent* DCNL the native UI event that generated the mpl event DCNL This method will be call all functions connected to the DCNL \'motion_notify_event\' with a :class:`MouseEvent` instance.'
def leave_notify_event(self, guiEvent=None): DCNL 'Backend derived classes should call this function when leaving DCNL canvas DCNL *guiEvent* DCNL the native UI event that generated the mpl event'
def enter_notify_event(self, guiEvent=None): DCNL 'Backend derived classes should call this function when entering DCNL canvas DCNL *guiEvent* DCNL the native UI event that generated the mpl event'
def idle_event(self, guiEvent=None): DCNL 'call when GUI is idle'
def draw(self, *args, **kwargs): DCNL 'Render the :class:`~matplotlib.figure.Figure`'
def draw_idle(self, *args, **kwargs): DCNL ':meth:`draw` only if idle; defaults to draw but backends can overrride'
def draw_cursor(self, event): DCNL 'Draw a cursor in the event.axes if inaxes is not None.  Use DCNL native GUI drawing for efficiency if possible'
def get_width_height(self): DCNL 'return the figure width and height in points or pixels DCNL (depending on the backend), truncated to integers'
def print_figure(self, filename, dpi=None, facecolor='w', edgecolor='w', orientation='portrait', format=None, **kwargs): DCNL 'Render the figure to hardcopy. Set the figure patch face and edge DCNL colors.  This is useful because some of the GUIs have a gray figure DCNL face color background and you\'ll probably want to override this on DCNL hardcopy. DCNL Arguments are: DCNL *filename* DCNL can also be a file object on image backends DCNL *orientation* DCNL only currently applies to PostScript printing. DCNL *dpi* DCNL the dots per inch to save the figure in; if None, use savefig.dpi DCNL *facecolor* DCNL the facecolor of the figure DCNL *edgecolor* DCNL the edgecolor of the figure DCNL *orientation*  \' DCNL landscape\' | \'portrait\' (not supported on all backends) DCNL *format* DCNL when set, forcibly set the file format to save to'
def set_window_title(self, title): DCNL 'Set the title text of the window containing the figure.  Note that DCNL this has no effect if there is no window (eg, a PS backend).'
def switch_backends(self, FigureCanvasClass): DCNL 'instantiate an instance of FigureCanvasClass DCNL This is used for backend switching, eg, to instantiate a DCNL FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is DCNL not done, so any changes to one of the instances (eg, setting DCNL figure size or line props), will be reflected in the other'
def mpl_connect(self, s, func): DCNL 'Connect event with string *s* to *func*.  The signature of *func* is:: DCNL def func(event) DCNL where event is a :class:`matplotlib.backend_bases.Event`.  The DCNL following events are recognized DCNL - \'button_press_event\' DCNL - \'button_release_event\' DCNL - \'draw_event\' DCNL - \'key_press_event\' DCNL - \'key_release_event\' DCNL - \'motion_notify_event\' DCNL - \'pick_event\' DCNL - \'resize_event\' DCNL - \'scroll_event\' DCNL For the location events (button and key press/release), if the DCNL mouse is over the axes, the variable ``event.inaxes`` will be DCNL set to the :class:`~matplotlib.axes.Axes` the event occurs is DCNL over, and additionally, the variables ``event.xdata`` and DCNL ``event.ydata`` will be defined.  This is the mouse location DCNL in data coords.  See DCNL :class:`~matplotlib.backend_bases.KeyEvent` and DCNL :class:`~matplotlib.backend_bases.MouseEvent` for more info. DCNL Return value is a connection id that can be used with DCNL :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`. DCNL Example usage:: DCNL def on_press(event): DCNL print \'you pressed\', event.button, event.xdata, event.ydata DCNL cid = canvas.mpl_connect(\'button_press_event\', on_press)'
def mpl_disconnect(self, cid): DCNL 'disconnect callback id cid DCNL Example usage:: DCNL cid = canvas.mpl_connect(\'button_press_event\', on_press) DCNL #...later DCNL canvas.mpl_disconnect(cid)'
def flush_events(self): DCNL 'Flush the GUI events for the figure. Implemented only for DCNL backends with GUIs.'
def start_event_loop(self, timeout): DCNL 'Start an event loop.  This is used to start a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events.  This should not be DCNL confused with the main GUI event loop, which is always running DCNL and has nothing to do with this. DCNL This is implemented only for backends with GUIs.'
def stop_event_loop(self): DCNL 'Stop an event loop.  This is used to stop a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events. DCNL This is implemented only for backends with GUIs.'
def start_event_loop_default(self, timeout=0): DCNL 'Start an event loop.  This is used to start a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events.  This should not be DCNL confused with the main GUI event loop, which is always running DCNL and has nothing to do with this. DCNL This function provides default event loop functionality based DCNL on time.sleep that is meant to be used until event loop DCNL functions for each of the GUI backends can be written.  As DCNL such, it throws a deprecated warning. DCNL Call signature:: DCNL start_event_loop_default(self,timeout=0) DCNL This call blocks until a callback function triggers DCNL stop_event_loop() or *timeout* is reached.  If *timeout* is DCNL <=0, never timeout.'
def stop_event_loop_default(self): DCNL 'Stop an event loop.  This is used to stop a blocking event DCNL loop so that interactive functions, such as ginput and DCNL waitforbuttonpress, can wait for events. DCNL Call signature:: DCNL stop_event_loop_default(self)'
def resize(self, w, h): DCNL 'For gui backends: resize window in pixels'
def show_popup(self, msg): DCNL 'Display message in a popup -- GUI only'
def set_window_title(self, title): DCNL 'Set the title text of the window containing the figure.  Note that DCNL this has no effect if there is no window (eg, a PS backend).'
def set_message(self, s): DCNL 'display a message on toolbar or in status bar'
def back(self, *args): DCNL 'move back up the view lim stack'
def draw_rubberband(self, event, x0, y0, x1, y1): DCNL 'draw a rectangle rubberband to indicate zoom limits'
def forward(self, *args): DCNL 'move forward in the view lim stack'
def home(self, *args): DCNL 'restore the original view'
def _init_toolbar(self): DCNL 'This is where you actually build the GUI widgets (called by DCNL __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``, DCNL ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard DCNL across backends (there are ppm versions in CVS also). DCNL You just need to set the callbacks DCNL home         : self.home DCNL back         : self.back DCNL forward      : self.forward DCNL hand         : self.pan DCNL zoom_to_rect : self.zoom DCNL filesave     : self.save_figure DCNL You only need to define the last one - the others are in the base DCNL class implementation.'
def pan(self, *args): DCNL 'Activate the pan/zoom tool. pan with left button, zoom with right'
def press(self, event): DCNL 'this will be called whenver a mouse button is pressed'
def press_pan(self, event): DCNL 'the press mouse button in pan/zoom mode callback'
def press_zoom(self, event): DCNL 'the press mouse button in zoom to rect mode callback'
def push_current(self): DCNL 'push the current view limits and position onto the stack'
def release(self, event): DCNL 'this will be called whenever mouse button is released'
def release_pan(self, event): DCNL 'the release mouse button callback in pan/zoom mode'
def drag_pan(self, event): DCNL 'the drag callback in pan/zoom mode'
def release_zoom(self, event): DCNL 'the release mouse button callback in zoom to rect mode'
def draw(self): DCNL 'redraw the canvases, update the locators'
def _update_view(self): DCNL 'update the viewlim and position from the view and DCNL position stack for each axes'
def save_figure(self, *args): DCNL 'save the current figure'
def set_cursor(self, cursor): DCNL 'Set the current cursor to one of the :class:`Cursors` DCNL enums values'
def update(self): DCNL 'reset the axes stack'
def zoom(self, *args): DCNL 'activate zoom to rect mode'
def set_history_buttons(self): DCNL 'enable or disable back/forward button'
def draw_all(self): DCNL 'Calculate any free parameters based on the current cmap and norm, DCNL and do all the drawing.'
def _config_axes(self, X, Y): DCNL 'Make an axes patch and outline.'
def set_label(self, label, **kw): DCNL 'Label the long axis of the colorbar'
def _outline(self, X, Y): DCNL 'Return *x*, *y* arrays of colorbar bounding polygon, DCNL taking orientation into account.'
def _edges(self, X, Y): DCNL 'Return the separator line segments; helper for _add_solids.'
def _add_solids(self, X, Y, C): DCNL 'Draw the colors using :meth:`~matplotlib.axes.Axes.pcolor`; DCNL optionally add separators.'
def add_lines(self, levels, colors, linewidths): DCNL 'Draw lines on the colorbar.'
def _ticker(self): DCNL 'Return two sequences: ticks (colorbar data locations) DCNL and ticklabels (strings).'
def _process_values(self, b=None): DCNL 'Set the :attr:`_boundaries` and :attr:`_values` attributes DCNL based on the input boundaries and values.  Input boundaries DCNL can be *self.boundaries* or the argument *b*.'
def _find_range(self): DCNL 'Set :attr:`vmin` and :attr:`vmax` attributes to the first and DCNL last boundary excluding extended end boundaries.'
def _central_N(self): DCNL 'number of boundaries **before** extension of ends'
def _extended_N(self): DCNL 'Based on the colormap and extend variable, return the DCNL number of boundaries.'
def _uniform_y(self, N): DCNL 'Return colorbar data coordinates for *N* uniformly DCNL spaced boundaries, plus ends if required.'
def _proportional_y(self): DCNL 'Return colorbar data coordinates for the boundaries of DCNL a proportional colorbar.'
def _mesh(self): DCNL 'Return X,Y, the coordinate arrays for the colorbar pcolormesh. DCNL These are suitable for a vertical colorbar; swapping and DCNL transposition for a horizontal colorbar are done outside DCNL this function.'
def _locate(self, x): DCNL 'Given a possible set of color data values, return the ones DCNL within range, together with their corresponding colorbar DCNL data coordinates.'
def add_lines(self, CS): DCNL 'Add the lines from a non-filled DCNL :class:`~matplotlib.contour.ContourSet` to the colorbar.'
def update_bruteforce(self, mappable): DCNL 'Manually change any contour line colors.  This is called DCNL when the image or contour plot to which this colorbar belongs DCNL is changed.'
def set_level(self, level): DCNL 'set the verbosity to one of the Verbose.levels strings'
def report(self, s, level='helpful'): DCNL 'print message s to self.fileo if self.level>=level.  Return DCNL value indicates whether a message was issued'
def wrap(self, fmt, func, level='helpful', always=True): DCNL 'return a callable function that wraps func and reports it DCNL output through the verbose handler if current verbosity level DCNL is higher than level DCNL if always is True, the report will occur on every function DCNL call; otherwise only on the first time the function is called'
def ge(self, level): DCNL 'return true if self.level is >= level'
def __init__(self, control_points): DCNL '*control_points* : location of contol points. It needs have a DCNL shpae of n * 2, where n is the order of the bezier line. 1<= DCNL n <= 3 is supported.'
def point_at_t(self, t): DCNL 'evaluate a point at t'
def on_event(self, event): DCNL 'Event handler that will be passed to the current figure to DCNL retrieve events.'
def post_event(self): DCNL 'For baseclass, do nothing but collect events'
def cleanup(self): DCNL 'Disconnect all callbacks'
def add_event(self, event): DCNL 'For base class, this just appends an event to events.'
def pop_event(self, index=(-1)): DCNL 'This removes an event from the event list.  Defaults to DCNL removing last event, but an index can be supplied.  Note that DCNL this does not check that there are events, much like the DCNL normal pop method.  If not events exist, this will throw an DCNL exception.'
def __call__(self, n=1, timeout=30): DCNL 'Blocking call to retrieve n events'
def post_event(self): DCNL 'This will be called to process events'
def mouse_event(self): DCNL 'Process a mouse click event'
def key_event(self): DCNL 'Process a key click event.  This maps certain keys to appropriate DCNL mouse click events.'
def button1(self, event): DCNL 'Will be called for any event involving a button other than DCNL button 2 or 3.  This will add a click if it is inside axes.'
def button2(self, event): DCNL 'Will be called for any event involving button 2. DCNL Button 2 ends blocking input.'
def button3(self, event): DCNL 'Will be called for any event involving button 3. DCNL Button 3 removes the last click.'
def add_click(self, event): DCNL 'This add the coordinates of an event to the list of clicks'
def pop_click(self, index=(-1)): DCNL 'This removes a click from the list of clicks.  Defaults to DCNL removing the last click.'
def pop(self, index=(-1)): DCNL 'This removes a click and the associated event from the object. DCNL Defaults to removing the last click, but any index can be DCNL supplied.'
def __call__(self, n=1, timeout=30, show_clicks=True): DCNL 'Blocking call to retrieve n coordinate pairs through mouse DCNL clicks.'
def button1(self, event): DCNL 'This will be called if an event involving a button other than DCNL 2 or 3 occcurs.  This will add a label to a contour.'
def button3(self, event): DCNL 'This will be called if button 3 is clicked.  This will remove DCNL a label if not in inline mode.  Unfortunately, if one is doing DCNL inline labels, then there is currently no way to fix the DCNL broken contour - once humpty-dumpty is broken, he can\'t be put DCNL back together.  In inline mode, this does nothing.'
def post_event(self): DCNL 'Determines if it is a key event'
def __call__(self, timeout=30): DCNL 'Blocking call to retrieve a single mouse or key click DCNL Returns True if key click, False if mouse, or None if timeout'
def __init__(self, vertices, codes=None): DCNL 'Create a new path with the given vertices and codes. DCNL *vertices* is an Nx2 numpy float array, masked array or Python DCNL sequence. DCNL *codes* is an N-length numpy array or Python sequence of type DCNL :attr:`matplotlib.path.Path.code_type`. DCNL These two arrays must have the same length in the first DCNL dimension. DCNL If *codes* is None, *vertices* will be treated as a series of DCNL line segments. DCNL If *vertices* contains masked values, they will be converted DCNL to NaNs which are then handled correctly by the Agg DCNL PathIterator and other consumers of path data, such as DCNL :meth:`iter_segments`.'
def make_compound_path(*args): DCNL '(staticmethod) Make a compound path from a list of Path DCNL objects.  Only polygons (not curves) are supported.'
def iter_segments(self, simplify=None): DCNL 'Iterates over all of the curve segments in the path.  Each DCNL iteration returns a 2-tuple (*vertices*, *code*), where DCNL *vertices* is a sequence of 1 - 3 coordinate pairs, and *code* is DCNL one of the :class:`Path` codes. DCNL If *simplify* is provided, it must be a tuple (*width*, DCNL *height*) defining the size of the figure, in native units DCNL (e.g. pixels or points).  Simplification implies both removing DCNL adjacent line segments that are very close to parallel, and DCNL removing line segments outside of the figure.  The path will DCNL be simplified *only* if :attr:`should_simplify` is True, which DCNL is determined in the constructor by this criteria: DCNL - No curves DCNL - More than 128 vertices'
def transformed(self, transform): DCNL 'Return a transformed copy of the path. DCNL .. seealso:: DCNL :class:`matplotlib.transforms.TransformedPath`: DCNL A specialized path class that will cache the DCNL transformed result and automatically update when the DCNL transform changes.'
def contains_point(self, point, transform=None): DCNL 'Returns *True* if the path contains the given point. DCNL If *transform* is not *None*, the path will be transformed DCNL before performing the test.'
def contains_path(self, path, transform=None): DCNL 'Returns *True* if this path completely contains the given path. DCNL If *transform* is not *None*, the path will be transformed DCNL before performing the test.'
def get_extents(self, transform=None): DCNL 'Returns the extents (*xmin*, *ymin*, *xmax*, *ymax*) of the DCNL path. DCNL Unlike computing the extents on the *vertices* alone, this DCNL algorithm will take into account the curves and deal with DCNL control points appropriately.'
def intersects_path(self, other, filled=True): DCNL 'Returns *True* if this path intersects another given path. DCNL *filled*, when True, treats the paths as if they were filled. DCNL That is, if one path completely encloses the other, DCNL :meth:`intersects_path` will return True.'
def intersects_bbox(self, bbox, filled=True): DCNL 'Returns *True* if this path intersects a given DCNL :class:`~matplotlib.transforms.Bbox`. DCNL *filled*, when True, treats the path as if it was filled. DCNL That is, if one path completely encloses the other, DCNL :meth:`intersects_path` will return True.'
def interpolated(self, steps): DCNL 'Returns a new path resampled to length N x steps.  Does not DCNL currently handle interpolating curves.'
def to_polygons(self, transform=None, width=0, height=0): DCNL 'Convert this path to a list of polygons.  Each polygon is an DCNL Nx2 array of vertices.  In other words, each polygon has no DCNL ``MOVETO`` instructions or curves.  This is useful for DCNL displaying in backends that do not support compound paths or DCNL Bezier curves, such as GDK. DCNL If *width* and *height* are both non-zero then the lines will DCNL be simplified so that vertices outside of (0, 0), (width, DCNL height) will be clipped.'
def unit_rectangle(cls): DCNL '(staticmethod) Returns a :class:`Path` of the unit rectangle DCNL from (0, 0) to (1, 1).'
def unit_regular_polygon(cls, numVertices): DCNL '(staticmethod) Returns a :class:`Path` for a unit regular DCNL polygon with the given *numVertices* and radius of 1.0, DCNL centered at (0, 0).'
def unit_regular_star(cls, numVertices, innerCircle=0.5): DCNL '(staticmethod) Returns a :class:`Path` for a unit regular star DCNL with the given numVertices and radius of 1.0, centered at (0, DCNL 0).'
def unit_regular_asterisk(cls, numVertices): DCNL '(staticmethod) Returns a :class:`Path` for a unit regular DCNL asterisk with the given numVertices and radius of 1.0, DCNL centered at (0, 0).'
def unit_circle(cls): DCNL '(staticmethod) Returns a :class:`Path` of the unit circle. DCNL The circle is approximated using cubic Bezier curves.  This DCNL uses 8 splines around the circle using the approach presented DCNL here: DCNL Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four DCNL Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.'
def arc(cls, theta1, theta2, n=None, is_wedge=False): DCNL '(staticmethod) Returns an arc on the unit circle from angle DCNL *theta1* to angle *theta2* (in degrees). DCNL If *n* is provided, it is the number of spline segments to make. DCNL If *n* is not provided, the number of spline segments is DCNL determined based on the delta between *theta1* and *theta2*. DCNL Masionobe, L.  2003.  `Drawing an elliptical arc using DCNL polylines, quadratic or cubic Bezier curves DCNL <http://www.spaceroots.org/documents/ellipse/index.html>`_.'
def wedge(cls, theta1, theta2, n=None): DCNL '(staticmethod) Returns a wedge of the unit circle from angle DCNL *theta1* to angle *theta2* (in degrees). DCNL If *n* is provided, it is the number of spline segments to make. DCNL If *n* is not provided, the number of spline segments is DCNL determined based on the delta between *theta1* and *theta2*.'
def set_canvas_size(self, w, h, d): DCNL 'Dimension the drawing canvas'
def render_glyph(self, ox, oy, info): DCNL 'Draw a glyph described by *info* to the reference point (*ox*, DCNL *oy*).'
def render_filled_rect(self, x1, y1, x2, y2): DCNL 'Draw a filled black rectangle from (*x1*, *y1*) to (*x2*, *y2*).'
def get_results(self, box): DCNL 'Return a backend-specific tuple to return to the backend after DCNL all processing is done.'
def get_hinting_type(self): DCNL 'Get the Freetype hinting type to use with this particular DCNL backend.'
def __init__(self, default_font_prop, mathtext_backend): DCNL '*default_font_prop*: A DCNL :class:`~matplotlib.font_manager.FontProperties` object to use DCNL for the default non-math font, or the base font for Unicode DCNL (generic) font rendering. DCNL *mathtext_backend*: A subclass of :class:`MathTextBackend` DCNL used to delegate the actual rendering.'
def destroy(self): DCNL 'Fix any cyclical references before the object is about DCNL to be destroyed.'
def get_kern(self, font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi): DCNL 'Get the kerning distance for font between *sym1* and *sym2*. DCNL *fontX*: one of the TeX font names:: DCNL tt, it, rm, cal, sf, bf or default (non-math) DCNL *fontclassX*: TODO DCNL *symX*: a symbol in raw TeX form. e.g. \'1\', \'x\' or \'\sigma\' DCNL *fontsizeX*: the fontsize in points DCNL *dpi*: the current dots-per-inch'
def get_metrics(self, font, font_class, sym, fontsize, dpi): DCNL '*font*: one of the TeX font names:: DCNL tt, it, rm, cal, sf, bf or default (non-math) DCNL *font_class*: TODO DCNL *sym*:  a symbol in raw TeX form. e.g. \'1\', \'x\' or \'\sigma\' DCNL *fontsize*: font size in points DCNL *dpi*: current dots-per-inch DCNL Returns an object with the following attributes: DCNL - *advance*: The advance distance (in points) of the glyph. DCNL - *height*: The height of the glyph in points. DCNL - *width*: The width of the glyph in points. DCNL - *xmin*, *xmax*, *ymin*, *ymax* - the ink rectangle of the glyph DCNL - *iceberg* - the distance from the baseline to the top of DCNL the glyph.  This corresponds to TeX\'s definition of DCNL "height".'
def set_canvas_size(self, w, h, d): DCNL 'Set the size of the buffer used to render the math expression. DCNL Only really necessary for the bitmap backends.'
def render_glyph(self, ox, oy, facename, font_class, sym, fontsize, dpi): DCNL 'Draw a glyph at DCNL - *ox*, *oy*: position DCNL - *facename*: One of the TeX face names DCNL - *font_class*: DCNL - *sym*: TeX symbol name or single character DCNL - *fontsize*: fontsize in points DCNL - *dpi*: The dpi to draw at.'
def render_rect_filled(self, x1, y1, x2, y2): DCNL 'Draw a filled rectangle from (*x1*, *y1*) to (*x2*, *y2*).'
def get_xheight(self, font, fontsize, dpi): DCNL 'Get the xheight for the given *font* and *fontsize*.'
def get_underline_thickness(self, font, fontsize, dpi): DCNL 'Get the line thickness that matches the given font.  Used as a DCNL base unit for drawing lines such as in a fraction or radical.'
def get_used_characters(self): DCNL 'Get the set of characters that were used in the math DCNL expression.  Used by backends that need to subset fonts so DCNL they know which glyphs to include.'
def get_results(self, box): DCNL 'Get the data needed by the backend to render the math DCNL expression.  The return value is backend-specific.'
def get_sized_alternatives_for_symbol(self, fontname, sym): DCNL 'Override if your font provides multiple sizes of the same DCNL symbol.  Should return a list of symbols matching *sym* in DCNL various sizes.  The expression renderer will select the most DCNL appropriate size for a given situation from this list.'
def _get_info(self, fontname, font_class, sym, fontsize, dpi): DCNL 'load the cmfont, metrics and glyph with caching'
def shrink(self): DCNL 'Shrinks one level smaller.  There are only three levels of DCNL sizes, after which things will no longer get smaller.'
def grow(self): DCNL 'Grows one level larger.  There is no limit to how big DCNL something can get.'
def get_kerning(self, next): DCNL 'Return the amount of kerning between this and the given DCNL character.  Called when characters are strung together into DCNL :class:`Hlist` to create :class:`Kern` nodes.'
def render(self, x, y): DCNL 'Render the character to the canvas'
def render(self, x, y): DCNL 'Render the character to the canvas.'
def _determine_order(self, totals): DCNL 'A helper function to determine the highest order of glue DCNL used by the members of this list.  Used by vpack and hpack.'
def kern(self): DCNL 'Insert :class:`Kern` nodes between :class:`Char` nodes to set DCNL kerning.  The :class:`Char` nodes themselves determine the DCNL amount of kerning they need (in :meth:`~Char.get_kerning`), DCNL and this function just creates the linked list in the correct DCNL way.'
def hpack(self, w=0.0, m='additional'): DCNL 'The main duty of :meth:`hpack` is to compute the dimensions of DCNL the resulting boxes, and to adjust the glue if one of those DCNL dimensions is pre-specified.  The computed sizes normally DCNL enclose all of the material inside the new box; but some items DCNL may stick out if negative glue is used, if the box is DCNL overfull, or if a ``\vbox`` includes other boxes that have DCNL been shifted left. DCNL - *w*: specifies a width DCNL - *m*: is either \'exactly\' or \'additional\'. DCNL Thus, ``hpack(w, \'exactly\')`` produces a box whose width is DCNL exactly *w*, while ``hpack(w, \'additional\')`` yields a box DCNL whose width is the natural width plus *w*.  The default values DCNL produce a box with the natural width.'
def vpack(self, h=0.0, m='additional', l=float(inf)): DCNL 'The main duty of :meth:`vpack` is to compute the dimensions of DCNL the resulting boxes, and to adjust the glue if one of those DCNL dimensions is pre-specified. DCNL - *h*: specifies a height DCNL - *m*: is either \'exactly\' or \'additional\'. DCNL - *l*: a maximum height DCNL Thus, ``vpack(h, \'exactly\')`` produces a box whose height is DCNL exactly *h*, while ``vpack(h, \'additional\')`` yields a box DCNL whose height is the natural height plus *h*.  The default DCNL values produce a box with the natural width.'
def clear(self): DCNL 'Clear any state before parsing.'
def parse(self, s, fonts_object, fontsize, dpi): DCNL 'Parse expression *s* using the given *fonts_object* for DCNL output, at the given *fontsize* and *dpi*. DCNL Returns the parse tree of :class:`Node` instances.'
def get_state(self): DCNL 'Get the current :class:`State` of the parser.'
def pop_state(self): DCNL 'Pop a :class:`State` off of the stack.'
def push_state(self): DCNL 'Push a new :class:`State` onto the stack which is just a copy DCNL of the current state.'
def __init__(self, output): DCNL 'Create a MathTextParser for the given backend *output*.'
def parse(self, s, dpi=72, prop=None): DCNL 'Parse the given math expression *s* at the given *dpi*.  If DCNL *prop* is provided, it is a DCNL :class:`~matplotlib.font_manager.FontProperties` object DCNL specifying the "default" font to use in the math expression, DCNL used for all non-math text. DCNL The results are cached, so multiple calls to :meth:`parse` DCNL with the same expression should be fast.'
def to_mask(self, texstr, dpi=120, fontsize=14): DCNL '*texstr* DCNL A valid mathtext string, eg r\'IQ: $\sigma_i=15$\' DCNL *dpi* DCNL The dots-per-inch to render the text DCNL *fontsize* DCNL The font size in points DCNL Returns a tuple (*array*, *depth*) DCNL - *array* is an NxM uint8 alpha ubyte mask array of DCNL rasterized tex. DCNL - depth is the offset of the baseline from the bottom of the DCNL image in pixels.'
def to_rgba(self, texstr, color='black', dpi=120, fontsize=14): DCNL '*texstr* DCNL A valid mathtext string, eg r\'IQ: $\sigma_i=15$\' DCNL *color* DCNL Any matplotlib color argument DCNL *dpi* DCNL The dots-per-inch to render the text DCNL *fontsize* DCNL The font size in points DCNL Returns a tuple (*array*, *depth*) DCNL - *array* is an NxM uint8 alpha ubyte mask array of DCNL rasterized tex. DCNL - depth is the offset of the baseline from the bottom of the DCNL image in pixels.'
def to_png(self, filename, texstr, color='black', dpi=120, fontsize=14): DCNL 'Writes a tex expression to a PNG file. DCNL Returns the offset of the baseline from the bottom of the DCNL image in pixels. DCNL *filename* DCNL A writable filename or fileobject DCNL *texstr* DCNL A valid mathtext string, eg r\'IQ: $\sigma_i=15$\' DCNL *color* DCNL A valid matplotlib color argument DCNL *dpi* DCNL The dots-per-inch to render the text DCNL *fontsize* DCNL The font size in points DCNL Returns the offset of the baseline from the bottom of the DCNL image in pixels.'
def get_depth(self, texstr, dpi=120, fontsize=14): DCNL 'Returns the offset of the baseline from the bottom of the DCNL image in pixels. DCNL *texstr* DCNL A valid mathtext string, eg r\'IQ: $\sigma_i=15$\' DCNL *dpi* DCNL The dots-per-inch to render the text DCNL *fontsize* DCNL The font size in points'
def to_rgb(self, arg): DCNL 'Returns an *RGB* tuple of three floats from 0-1. DCNL *arg* can be an *RGB* or *RGBA* sequence or a string in any of DCNL several forms: DCNL 1) a letter from the set \'rgbcmykw\' DCNL 2) a hex color string, like \'#00FFFF\' DCNL 3) a standard name, like \'aqua\' DCNL 4) a float, like \'0.4\', indicating gray on a 0-1 scale DCNL if *arg* is *RGBA*, the *A* will simply be discarded.'
def to_rgba(self, arg, alpha=None): DCNL 'Returns an *RGBA* tuple of four floats from 0-1. DCNL For acceptable values of *arg*, see :meth:`to_rgb`. DCNL If *arg* is an *RGBA* sequence and *alpha* is not *None*, DCNL *alpha* will replace the original *A*.'
def to_rgba_array(self, c, alpha=None): DCNL 'Returns a numpy array of *RGBA* tuples. DCNL Accepts a single mpl color spec or a sequence of specs. DCNL Special case to handle "no color": if *c* is "none" (case-insensitive), DCNL then an empty array will be returned.  Same for an empty list.'
def __init__(self, name, N=256): DCNL 'Public class attributes: DCNL :attr:`N` : number of rgb quantization levels DCNL :attr:`name` : name of colormap'
def __call__(self, X, alpha=1.0, bytes=False): DCNL '*X* is either a scalar or an array (of any dimension). DCNL If scalar, a tuple of rgba values is returned, otherwise DCNL an array with the new shape = oldshape+(4,). If the X-values DCNL are integers, then they are used as indices into the array. DCNL If they are floating point, then they must be in the DCNL interval (0.0, 1.0). DCNL Alpha must be a scalar. DCNL If bytes is False, the rgba values will be floats on a DCNL 0-1 scale; if True, they will be uint8, 0-255.'
def set_bad(self, color='k', alpha=1.0): DCNL 'Set color to be used for masked values.'
def set_under(self, color='k', alpha=1.0): DCNL 'Set color to be used for low out-of-range values. DCNL Requires norm.clip = False'
def set_over(self, color='k', alpha=1.0): DCNL 'Set color to be used for high out-of-range values. DCNL Requires norm.clip = False'
def _init(): DCNL 'Generate the lookup table, self._lut'
def __init__(self, name, segmentdata, N=256): DCNL 'Create color map from linear mapping segments DCNL segmentdata argument is a dictionary with a red, green and blue DCNL entries. Each entry should be a list of *x*, *y0*, *y1* tuples, DCNL forming rows in a table. DCNL Example: suppose you want red to increase from 0 to 1 over DCNL the bottom half, green to do the same over the middle half, DCNL and blue over the top half.  Then you would use:: DCNL cdict = {\'red\':   [(0.0,  0.0, 0.0), DCNL (0.5,  1.0, 1.0), DCNL (1.0,  1.0, 1.0)], DCNL \'green\': [(0.0,  0.0, 0.0), DCNL (0.25, 0.0, 0.0), DCNL (0.75, 1.0, 1.0), DCNL (1.0,  1.0, 1.0)], DCNL \'blue\':  [(0.0,  0.0, 0.0), DCNL (0.5,  0.0, 0.0), DCNL (1.0,  1.0, 1.0)]} DCNL Each row in the table for a given color is a sequence of DCNL *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase DCNL monotonically from 0 to 1.  For any input value *z* falling DCNL between *x[i]* and *x[i+1]*, the output value of a given color DCNL will be linearly interpolated between *y1[i]* and *y0[i+1]*:: DCNL row i:   x  y0  y1 DCNL row i+1: x  y0  y1 DCNL Hence y0 in the first row and y1 in the last row are never used. DCNL .. seealso:: DCNL :func:`makeMappingArray`'
def __init__(self, colors, name='from_list', N=None): DCNL 'Make a colormap from a list of colors. DCNL *colors* DCNL a list of matplotlib color specifications, DCNL or an equivalent Nx3 floating point array (*N* rgb values) DCNL *name* DCNL a string to identify the colormap DCNL *N* DCNL the number of entries in the map.  The default is *None*, DCNL in which case there is one colormap entry for each DCNL element in the list of colors.  If:: DCNL N < len(colors) DCNL the list will be truncated at *N*.  If:: DCNL N > len(colors) DCNL the list will be extended by repetition.'
def __init__(self, vmin=None, vmax=None, clip=False): DCNL 'If *vmin* or *vmax* is not given, they are taken from the input\'s DCNL minimum and maximum value respectively.  If *clip* is *True* and DCNL the given value falls outside the range, the returned value DCNL will be 0 or 1, whichever is closer. Returns 0 if:: DCNL vmin==vmax DCNL Works with scalars or arrays, including masked arrays.  If DCNL *clip* is *True*, masked values are set to 1; otherwise they DCNL remain masked.  Clipping silently defeats the purpose of setting DCNL the over, under, and masked colors in the colormap, so it is DCNL likely to lead to surprises; therefore the default is DCNL *clip* = *False*.'
def autoscale(self, A): DCNL 'Set *vmin*, *vmax* to min, max of *A*.'
def autoscale_None(self, A): DCNL 'autoscale only None-valued vmin or vmax'
def scaled(self): DCNL 'return true if vmin and vmax set'
def __init__(self, boundaries, ncolors, clip=False): DCNL '*boundaries* DCNL a monotonically increasing sequence DCNL *ncolors* DCNL number of colors in the colormap to be used DCNL If:: DCNL b[i] <= v < b[i+1] DCNL then v is mapped to color j; DCNL as i varies from 0 to len(boundaries)-2, DCNL j goes from 0 to ncolors-1. DCNL Out-of-range values are mapped to -1 if low and ncolors DCNL if high; these are converted to valid indices by DCNL :meth:`Colormap.__call__` .'
def __init__(self, norm=None, cmap=None): DCNL '*norm* is an instance of :class:`colors.Normalize` or one of DCNL its subclasses, used to map luminance to 0-1. *cmap* is a DCNL :mod:`cm` colormap instance, for example :data:`cm.jet`'
def set_colorbar(self, im, ax): DCNL 'set the colorbar image and axes associated with mappable'
def to_rgba(self, x, alpha=1.0, bytes=False): DCNL 'Return a normalized rgba array corresponding to *x*. If *x* DCNL is already an rgb array, insert *alpha*; if it is already DCNL rgba, return it unchanged. If *bytes* is True, return rgba as DCNL 4 uint8s instead of 4 floats.'
def set_array(self, A): DCNL 'Set the image array from numpy array *A*'
def get_array(self): DCNL 'Return the array'
def get_cmap(self): DCNL 'return the colormap'
def get_clim(self): DCNL 'return the min, max of the color limits for image scaling'
def set_clim(self, vmin=None, vmax=None): DCNL 'set the norm limits for image scaling; if *vmin* is a length2 DCNL sequence, interpret it as ``(vmin, vmax)`` which is used to DCNL support setp DCNL ACCEPTS: a length 2 sequence of floats'
def set_cmap(self, cmap): DCNL 'set the colormap for luminance data DCNL ACCEPTS: a colormap'
def set_norm(self, norm): DCNL 'set the normalization instance'
def autoscale(self): DCNL 'Autoscale the scalar limits on the norm instance using the DCNL current array'
def autoscale_None(self): DCNL 'Autoscale the scalar limits on the norm instance using the DCNL current array, changing only limits that are None'
def add_checker(self, checker): DCNL 'Add an entry to a dictionary of boolean flags DCNL that are set to True when the mappable is changed.'
def check_update(self, checker): DCNL 'If mappable has changed since the last check, DCNL return True; else return False'
def changed(self): DCNL 'Call this whenever the mappable is changed to notify all the DCNL callbackSM listeners to the \'changed\' signal'
def _init(self): DCNL 'initialization delayed until first draw; DCNL allow time for axes setup.'
def _h_arrows(self, length): DCNL 'length is in arrow width units'
def _find_tails(self, mag, rounding=True, half=5, full=10, flag=50): DCNL 'Find how many of each of the tail pieces is necessary.  Flag DCNL specifies the increment for a flag, barb for a full barb, and half for DCNL half a barb. Mag should be the magnitude of a vector (ie. >= 0). DCNL This returns a tuple of: DCNL (*number of flags*, *number of barbs*, *half_flag*, *empty_flag*) DCNL *half_flag* is a boolean whether half of a barb is needed, DCNL since there should only ever be one half on a given DCNL barb. *empty_flag* flag is an array of flags to easily tell if DCNL a barb is empty (too low to plot any barbs/flags.'
def _make_barbs(self, u, v, nflags, nbarbs, half_barb, empty_flag, length, pivot, sizes, fill_empty, flip): DCNL 'This function actually creates the wind barbs.  *u* and *v* DCNL are components of the vector in the *x* and *y* directions, DCNL respectively. DCNL *nflags*, *nbarbs*, and *half_barb*, empty_flag* are, DCNL *respectively, the number of flags, number of barbs, flag for DCNL *half a barb, and flag for empty barb, ostensibly obtained DCNL *from :meth:`_find_tails`. DCNL *length* is the length of the barb staff in points. DCNL *pivot* specifies the point on the barb around which the DCNL entire barb should be rotated.  Right now, valid options are DCNL \'head\' and \'middle\'. DCNL *sizes* is a dictionary of coefficients specifying the ratio DCNL of a given feature to the length of the barb. These features DCNL include: DCNL - *spacing*: space between features (flags, full/half DCNL barbs) DCNL - *height*: distance from shaft of top of a flag or full DCNL barb DCNL - *width* - width of a flag, twice the width of a full barb DCNL - *emptybarb* - radius of the circle used for low DCNL magnitudes DCNL *fill_empty* specifies whether the circle representing an DCNL empty barb should be filled or not (this changes the drawing DCNL of the polygon). DCNL *flip* is a flag indicating whether the features should be flipped to DCNL the other side of the barb (useful for winds in the southern DCNL hemisphere. DCNL This function returns list of arrays of vertices, defining a polygon for DCNL each of the wind barbs.  These polygons have been rotated to properly DCNL align with the vector direction.'
def set_offsets(self, xy): DCNL 'Set the offsets for the barb polygons.  This saves the offets passed in DCNL and actually sets version masked as appropriate for the existing U/V DCNL data. *offsets* should be a sequence. DCNL ACCEPTS: sequence of pairs of floats'
def __init__(self, key, valid, ignorecase=False): DCNL 'valid is a list of legal strings'
def __call__(self, s): DCNL 'return a seq of n floats or raise'
def __call__(self, s): DCNL 'return a seq of n ints or raise'
def register(self, *projections): DCNL 'Register a new set of projection(s).'
def get_projection_class(self, name): DCNL 'Get a projection class from its *name*.'
def get_projection_names(self): DCNL 'Get a list of the names of all projections currently DCNL registered.'
def __init__(self, resolution): DCNL 'Create a new polar transform.  Resolution is the number of steps DCNL to interpolate between each input line segment to approximate its DCNL path in curved polar space.'
def format_coord(self, long, lat): DCNL 'return a format string formatting the coordinate'
def set_longitude_grid(self, degrees): DCNL 'Set the number of degrees between each longitude grid.'
def set_latitude_grid(self, degrees): DCNL 'Set the number of degrees between each longitude grid.'
def set_longitude_grid_ends(self, degrees): DCNL 'Set the latitude(s) at which to stop drawing the longitude grids.'
def get_data_ratio(self): DCNL 'Return the aspect ratio of the data itself.'
def can_zoom(self): DCNL 'Return True if this axes support the zoom box'
def __init__(self, resolution): DCNL 'Create a new Aitoff transform.  Resolution is the number of steps DCNL to interpolate between each input line segment to approximate its DCNL path in curved Aitoff space.'
def __init__(self, resolution): DCNL 'Create a new Hammer transform.  Resolution is the number of steps DCNL to interpolate between each input line segment to approximate its DCNL path in curved Hammer space.'
def __init__(self, resolution): DCNL 'Create a new Mollweide transform.  Resolution is the number of steps DCNL to interpolate between each input line segment to approximate its DCNL path in curved Mollweide space.'
def __init__(self, center_longitude, center_latitude, resolution): DCNL 'Create a new Lambert transform.  Resolution is the number of steps DCNL to interpolate between each input line segment to approximate its DCNL path in curved Lambert space.'
def __init__(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None): DCNL 'All dimensions are fraction of the figure width or height. DCNL All values default to their rc params DCNL The following attributes are available DCNL *left*  = 0.125 DCNL the left side of the subplots of the figure DCNL *right* = 0.9 DCNL the right side of the subplots of the figure DCNL *bottom* = 0.1 DCNL the bottom of the subplots of the figure DCNL *top* = 0.9 DCNL the top of the subplots of the figure DCNL *wspace* = 0.2 DCNL the amount of width reserved for blank space between subplots DCNL *hspace* = 0.2 DCNL the amount of height reserved for white space between subplots DCNL *validate* DCNL make sure the params are in a legal state (*left*<*right*, etc)'
def update(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None): DCNL 'Update the current values.  If any kwarg is None, default to DCNL the current value, if set, otherwise to rc'
def __init__(self, figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=1.0, frameon=True, subplotpars=None): DCNL '*figsize* DCNL w,h tuple in inches DCNL *dpi* DCNL dots per inch DCNL *facecolor* DCNL the figure patch facecolor; defaults to rc ``figure.facecolor`` DCNL *edgecolor* DCNL the figure patch edge color; defaults to rc ``figure.edgecolor`` DCNL *linewidth* DCNL the figure patch edge linewidth; the default linewidth of the frame DCNL *frameon* DCNL if False, suppress drawing the figure frame DCNL *subplotpars* DCNL a :class:`SubplotParams` instance, defaults to rc'
def autofmt_xdate(self, bottom=0.2, rotation=30, ha='right'): DCNL 'Date ticklabels often overlap, so it is useful to rotate them DCNL and right align them.  Also, a common use case is a number of DCNL subplots with shared xaxes where the x-axis is date data.  The DCNL ticklabels are often long, and it helps to rotate them on the DCNL bottom subplot and turn them off on other subplots, as well as DCNL turn off xlabels. DCNL *bottom* DCNL the bottom of the subplots for :meth:`subplots_adjust` DCNL *rotation* DCNL the rotation of the xtick labels DCNL *ha* DCNL the horizontal alignment of the xticklabels'
def get_children(self): DCNL 'get a list of artists contained in the figure'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred on the figure. DCNL Returns True,{}'
def get_window_extent(self, *args, **kwargs): DCNL 'get the figure bounding box in display space; kwargs are void'
def suptitle(self, t, **kwargs): DCNL 'Add a centered title to the figure. DCNL kwargs are :class:`matplotlib.text.Text` properties.  Using figure DCNL coordinates, the defaults are: DCNL - *x* = 0.5 DCNL the x location of text in figure coords DCNL - *y* = 0.98 DCNL the y location of the text in figure coords DCNL - *horizontalalignment* = \'center\' DCNL the horizontal alignment of the text DCNL - *verticalalignment* = \'top\' DCNL the vertical alignment of the text DCNL A :class:`matplotlib.text.Text` instance is returned. DCNL Example:: DCNL fig.subtitle(\'this is the figure title\', fontsize=12)'
def set_canvas(self, canvas): DCNL 'Set the canvas the contains the figure DCNL ACCEPTS: a FigureCanvas instance'
def hold(self, b=None): DCNL 'Set the hold state.  If hold is None (default), toggle the DCNL hold state.  Else set the hold state to boolean value b. DCNL Eg:: DCNL hold()      # toggle hold DCNL hold(True)  # hold is on DCNL hold(False) # hold is off'
def figimage(self, X, xo=0, yo=0, alpha=1.0, norm=None, cmap=None, vmin=None, vmax=None, origin=None): DCNL 'call signatures:: DCNL figimage(X, **kwargs) DCNL adds a non-resampled array *X* to the figure. DCNL figimage(X, xo, yo) DCNL with pixel offsets *xo*, *yo*, DCNL *X* must be a float array: DCNL * If *X* is MxN, assume luminance (grayscale) DCNL * If *X* is MxNx3, assume RGB DCNL * If *X* is MxNx4, assume RGBA DCNL Optional keyword arguments: DCNL Keyword     Description DCNL xo or yo    An integer, the *x* and *y* image offset in pixels DCNL cmap        a :class:`matplotlib.cm.ColorMap` instance, eg cm.jet. DCNL If None, default to the rc ``image.cmap`` value DCNL norm        a :class:`matplotlib.colors.Normalize` instance. The DCNL default is normalization().  This scales luminance -> 0-1 DCNL vmin|vmax   are used to scale a luminance image to 0-1.  If either is DCNL None, the min and max of the luminance values will be DCNL used.  Note if you pass a norm instance, the settings for DCNL *vmin* and *vmax* will be ignored. DCNL alpha       the alpha blending value, default is 1.0 DCNL origin      [ \'upper\' | \'lower\' ] Indicates where the [0,0] index of DCNL the array is in the upper left or lower left corner of DCNL the axes. Defaults to the rc image.origin value DCNL figimage complements the axes image DCNL (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled DCNL to fit the current axes.  If you want a resampled image to DCNL fill the entire figure, you can define an DCNL :class:`~matplotlib.axes.Axes` with size [0,1,0,1]. DCNL An :class:`matplotlib.image.FigureImage` instance is returned. DCNL .. plot:: mpl_examples/pylab_examples/figimage_demo.py'
def set_size_inches(self, *args, **kwargs): DCNL 'set_size_inches(w,h, forward=False) DCNL Set the figure size in inches DCNL Usage:: DCNL fig.set_size_inches(w,h)  # OR DCNL fig.set_size_inches((w,h) ) DCNL optional kwarg *forward=True* will cause the canvas size to be DCNL automatically updated; eg you can resize the figure window DCNL from the shell DCNL WARNING: forward=True is broken on all backends except GTK* DCNL and WX* DCNL ACCEPTS: a w,h tuple with w,h in inches'
def get_edgecolor(self): DCNL 'Get the edge color of the Figure rectangle'
def get_facecolor(self): DCNL 'Get the face color of the Figure rectangle'
def get_figwidth(self): DCNL 'Return the figwidth as a float'
def get_figheight(self): DCNL 'Return the figheight as a float'
def get_dpi(self): DCNL 'Return the dpi as a float'
def get_frameon(self): DCNL 'get the boolean indicating frameon'
def set_edgecolor(self, color): DCNL 'Set the edge color of the Figure rectangle DCNL ACCEPTS: any matplotlib color - see help(colors)'
def set_facecolor(self, color): DCNL 'Set the face color of the Figure rectangle DCNL ACCEPTS: any matplotlib color - see help(colors)'
def set_dpi(self, val): DCNL 'Set the dots-per-inch of the figure DCNL ACCEPTS: float'
def set_figwidth(self, val): DCNL 'Set the width of the figure in inches DCNL ACCEPTS: float'
def set_figheight(self, val): DCNL 'Set the height of the figure in inches DCNL ACCEPTS: float'
def set_frameon(self, b): DCNL 'Set whether the figure frame (background) is displayed or invisible DCNL ACCEPTS: boolean'
def delaxes(self, a): DCNL 'remove a from the figure and update the current axes'
def _make_key(self, *args, **kwargs): DCNL 'make a hashable key out of args and kwargs'
def add_axes(self, *args, **kwargs): DCNL 'Add an a axes with axes rect [*left*, *bottom*, *width*, DCNL *height*] where all quantities are in fractions of figure DCNL width and height.  kwargs are legal DCNL :class:`~matplotlib.axes.Axes` kwargs plus *projection* which DCNL sets the projection type of the axes.  (For backward DCNL compatibility, ``polar=True`` may also be provided, which is DCNL equivalent to ``projection=\'polar\'``).  Valid values for DCNL *projection* are: %(list)s.  Some of these projections support DCNL additional kwargs, which may be provided to :meth:`add_axes`:: DCNL rect = l,b,w,h DCNL fig.add_axes(rect) DCNL fig.add_axes(rect, frameon=False, axisbg=\'g\') DCNL fig.add_axes(rect, polar=True) DCNL fig.add_axes(rect, projection=\'polar\') DCNL fig.add_axes(ax)   # add an Axes instance DCNL If the figure already has an axes with the same parameters, DCNL then it will simply make that axes current and return it.  If DCNL you do not want this behavior, eg. you want to force the DCNL creation of a new axes, you must use a unique set of args and DCNL kwargs.  The axes :attr:`~matplotlib.axes.Axes.label` DCNL attribute has been exposed for this purpose.  Eg., if you want DCNL two axes that are otherwise identical to be added to the DCNL figure, make sure you give them unique labels:: DCNL fig.add_axes(rect, label=\'axes1\') DCNL fig.add_axes(rect, label=\'axes2\') DCNL The :class:`~matplotlib.axes.Axes` instance will be returned. DCNL The following kwargs are supported: DCNL %(Axes)s'
def add_subplot(self, *args, **kwargs): DCNL 'Add a subplot.  Examples: DCNL fig.add_subplot(111) DCNL fig.add_subplot(1,1,1)            # equivalent but more general DCNL fig.add_subplot(212, axisbg=\'r\')  # add subplot with red background DCNL fig.add_subplot(111, polar=True)  # add a polar subplot DCNL fig.add_subplot(sub)              # add Subplot instance sub DCNL *kwargs* are legal :class:`!matplotlib.axes.Axes` kwargs plus DCNL *projection*, which chooses a projection type for the axes. DCNL (For backward compatibility, *polar=True* may also be DCNL provided, which is equivalent to *projection=\'polar\'*). Valid DCNL values for *projection* are: %(list)s.  Some of these projections DCNL support additional *kwargs*, which may be provided to DCNL :meth:`add_axes`. DCNL The :class:`~matplotlib.axes.Axes` instance will be returned. DCNL If the figure already has a subplot with key (*args*, DCNL *kwargs*) then it will simply make that subplot current and DCNL return it. DCNL The following kwargs are supported: DCNL %(Axes)s'
def clf(self): DCNL 'Clear the figure'
def clear(self): DCNL 'Clear the figure -- synonym for fig.clf'
def draw(self, renderer): DCNL 'Render the figure using :class:`matplotlib.backend_bases.RendererBase` instance renderer'
def draw_artist(self, a): DCNL 'draw :class:`matplotlib.artist.Artist` instance *a* only -- DCNL this is available only after the figure is drawn'
def legend(self, handles, labels, *args, **kwargs): DCNL 'Place a legend in the figure.  Labels are a sequence of DCNL strings, handles is a sequence of DCNL :class:`~matplotlib.lines.Line2D` or DCNL :class:`~matplotlib.patches.Patch` instances, and loc can be a DCNL string or an integer specifying the legend location DCNL USAGE:: DCNL legend( (line1, line2, line3), DCNL (\'label1\', \'label2\', \'label3\'), DCNL \'upper right\') DCNL The *loc* location codes are:: DCNL \'best\' : 0,          (currently not supported for figure legends) DCNL \'upper right\'  : 1, DCNL \'upper left\'   : 2, DCNL \'lower left\'   : 3, DCNL \'lower right\'  : 4, DCNL \'right\'        : 5, DCNL \'center left\'  : 6, DCNL \'center right\' : 7, DCNL \'lower center\' : 8, DCNL \'upper center\' : 9, DCNL \'center\'       : 10, DCNL *loc* can also be an (x,y) tuple in figure coords, which DCNL specifies the lower left of the legend box.  figure coords are DCNL (0,0) is the left, bottom of the figure and 1,1 is the right, DCNL top. DCNL The legend instance is returned.  The following kwargs are supported DCNL *loc* DCNL the location of the legend DCNL *numpoints* DCNL the number of points in the legend line DCNL *prop* DCNL a :class:`matplotlib.font_manager.FontProperties` instance DCNL *pad* DCNL the fractional whitespace inside the legend border DCNL *markerscale* DCNL the relative size of legend markers vs. original DCNL *shadow* DCNL if True, draw a shadow behind legend DCNL *labelsep* DCNL the vertical space between the legend entries DCNL *handlelen* DCNL the length of the legend lines DCNL *handletextsep* DCNL the space between the legend line and legend text DCNL *axespad* DCNL the border between the axes and legend edge DCNL .. plot:: mpl_examples/pylab_examples/figlegend_demo.py'
def text(self, x, y, s, *args, **kwargs): DCNL 'Call signature:: DCNL figtext(x, y, s, fontdict=None, **kwargs) DCNL Add text to figure at location *x*, *y* (relative 0-1 DCNL coords). See :func:`~matplotlib.pyplot.text` for the meaning DCNL of the other arguments. DCNL kwargs control the :class:`~matplotlib.text.Text` properties: DCNL %(Text)s'
def gca(self, **kwargs): DCNL 'Return the current axes, creating one if necessary DCNL The following kwargs are supported DCNL %(Axes)s'
def sca(self, a): DCNL 'Set the current axes to be a and return a'
def add_axobserver(self, func): DCNL 'whenever the axes state change, func(self) will be called'
def savefig(self, *args, **kwargs): DCNL 'call signature:: DCNL savefig(fname, dpi=None, facecolor=\'w\', edgecolor=\'w\', DCNL orientation=\'portrait\', papertype=None, format=None, DCNL transparent=False): DCNL Save the current figure. DCNL The output formats available depend on the backend being used. DCNL Arguments: DCNL *fname*: DCNL A string containing a path to a filename, or a Python file-like object. DCNL If *format* is *None* and *fname* is a string, the output DCNL format is deduced from the extension of the filename. DCNL Keyword arguments: DCNL *dpi*: [ None | scalar > 0 ] DCNL The resolution in dots per inch.  If *None* it will default to DCNL the value ``savefig.dpi`` in the matplotlibrc file. DCNL *facecolor*, *edgecolor*: DCNL the colors of the figure rectangle DCNL *orientation*: [ \'landscape\' | \'portrait\' ] DCNL not supported on all backends; currently only on postscript output DCNL *papertype*: DCNL One of \'letter\', \'legal\', \'executive\', \'ledger\', \'a0\' through DCNL \'a10\', \'b0\' through \'b10\'. Only supported for postscript DCNL output. DCNL *format*: DCNL One of the file extensions supported by the active DCNL backend.  Most backends support png, pdf, ps, eps and svg. DCNL *transparent*: DCNL If *True*, the figure patch and axes patches will all be DCNL transparent.  This is useful, for example, for displaying DCNL a plot on top of a colored background on a web page.  The DCNL transparency of these patches will be restored to their DCNL original values upon exit of this function.'
def subplots_adjust(self, *args, **kwargs): DCNL 'fig.subplots_adjust(left=None, bottom=None, right=None, wspace=None, hspace=None) DCNL Update the :class:`SubplotParams` with *kwargs* (defaulting to rc where DCNL None) and update the subplot locations'
def ginput(self, n=1, timeout=30, show_clicks=True): DCNL 'call signature:: DCNL ginput(self, n=1, timeout=30, show_clicks=True) DCNL Blocking call to interact with the figure. DCNL This will wait for *n* clicks from the user and return a list of the DCNL coordinates of each click. DCNL If *timeout* is zero or negative, does not timeout. DCNL If *n* is zero or negative, accumulate clicks until a middle click DCNL (or potentially both mouse buttons at once) terminates the input. DCNL Right clicking cancels last input. DCNL The keyboard can also be used to select points in case your mouse DCNL does not have one or more of the buttons.  The delete and backspace DCNL keys act like right clicking (i.e., remove last point), the enter key DCNL terminates input and any other key (not already used by the window DCNL manager) selects a point.'
def waitforbuttonpress(self, timeout=(-1)): DCNL 'call signature:: DCNL waitforbuttonpress(self, timeout=-1) DCNL Blocking call to interact with the figure. DCNL This will return True is a key was pressed, False if a mouse DCNL button was pressed and None if *timeout* was reached without DCNL either being pressed. DCNL If *timeout* is negative, does not timeout.'
def __init__(self, x=0, y=0, text='', color=None, verticalalignment='bottom', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, **kwargs): DCNL 'Create a :class:`~matplotlib.text.Text` instance at *x*, *y* DCNL with string *text*. DCNL Valid kwargs are DCNL %(Text)s'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred in the patch. DCNL In the case of text, a hit is true anywhere in the DCNL axis-aligned bounding-box containing the text. DCNL Returns True or False.'
def _get_xy_display(self): DCNL 'get the (possibly unit converted) transformed x, y in display coords'
def get_rotation(self): DCNL 'return the text angle as float in degrees'
def update_from(self, other): DCNL 'Copy properties from other to self'
def set_bbox(self, rectprops): DCNL 'Draw a bounding box around self.  rectprops are any settable DCNL properties for a rectangle, eg facecolor=\'red\', alpha=0.5. DCNL t.set_bbox(dict(facecolor=\'red\', alpha=0.5)) DCNL If rectprops has "boxstyle" key. A FancyBboxPatch DCNL is initialized with rectprops and will be drawn. The mutation DCNL scale of the FancyBboxPath is set to the fontsize. DCNL ACCEPTS: rectangle prop dict'
def get_bbox_patch(self): DCNL 'Return the bbox Patch object. Returns None if the the DCNL FancyBboxPatch is not made.'
def update_bbox_position_size(self, renderer): DCNL 'Update the location and the size of the bbox. This method DCNL should be used when the position and size of the bbox needs to DCNL be updated before actually drawing the bbox.'
def _draw_bbox(self, renderer, posx, posy): DCNL 'Update the location and the size of the bbox DCNL (FancyBoxPatch), and draw'
def draw(self, renderer): DCNL 'Draws the :class:`Text` object to the given *renderer*.'
def get_color(self): DCNL 'Return the color of the text'
def get_fontproperties(self): DCNL 'Return the :class:`~font_manager.FontProperties` object'
def get_font_properties(self): DCNL 'alias for get_fontproperties'
def get_family(self): DCNL 'Return the list of font families used for font lookup'
def get_fontfamily(self): DCNL 'alias for get_family'
def get_name(self): DCNL 'Return the font name as string'
def get_style(self): DCNL 'Return the font style as string'
def get_size(self): DCNL 'Return the font size as integer'
def get_variant(self): DCNL 'Return the font variant as a string'
def get_fontvariant(self): DCNL 'alias for get_variant'
def get_weight(self): DCNL 'Get the font weight as string or number'
def get_fontname(self): DCNL 'alias for get_name'
def get_fontstyle(self): DCNL 'alias for get_style'
def get_fontsize(self): DCNL 'alias for get_size'
def get_fontweight(self): DCNL 'alias for get_weight'
def get_stretch(self): DCNL 'Get the font stretch as a string or number'
def get_fontstretch(self): DCNL 'alias for get_stretch'
def get_ha(self): DCNL 'alias for get_horizontalalignment'
def get_horizontalalignment(self): DCNL 'Return the horizontal alignment as string.  Will be one of DCNL \'left\', \'center\' or \'right\'.'
def get_position(self): DCNL 'Return the position of the text as a tuple (*x*, *y*)'
def get_prop_tup(self): DCNL 'Return a hashable tuple of properties. DCNL Not intended to be human readable, but useful for backends who DCNL want to cache derived information about text (eg layouts) and DCNL need to know if the text has changed.'
def get_text(self): DCNL 'Get the text as string'
def get_va(self): DCNL 'alias for :meth:`getverticalalignment`'
def get_verticalalignment(self): DCNL 'Return the vertical alignment as string.  Will be one of DCNL \'top\', \'center\', \'bottom\' or \'baseline\'.'
def get_window_extent(self, renderer=None, dpi=None): DCNL 'Return a :class:`~matplotlib.transforms.Bbox` object bounding DCNL the text, in display units. DCNL In addition to being used internally, this is useful for DCNL specifying clickable regions in a png file on a web page. DCNL *renderer* defaults to the _renderer attribute of the text DCNL object.  This is not assigned until the first execution of DCNL :meth:`draw`, so you must use this kwarg if you want DCNL to call :meth:`get_window_extent` prior to the first DCNL :meth:`draw`.  For getting web page regions, it is DCNL simpler to call the method after saving the figure. DCNL *dpi* defaults to self.figure.dpi; the renderer dpi is DCNL irrelevant.  For the web application, if figure.dpi is not DCNL the value used when saving the figure, then the value that DCNL was used must be specified as the *dpi* argument.'
def set_backgroundcolor(self, color): DCNL 'Set the background color of the text by updating the bbox. DCNL .. seealso:: DCNL :meth:`set_bbox` DCNL ACCEPTS: any matplotlib color'
def set_color(self, color): DCNL 'Set the foreground color of the text DCNL ACCEPTS: any matplotlib color'
def set_ha(self, align): DCNL 'alias for set_horizontalalignment'
def set_horizontalalignment(self, align): DCNL 'Set the horizontal alignment to one of DCNL ACCEPTS: [ \'center\' | \'right\' | \'left\' ]'
def set_ma(self, align): DCNL 'alias for set_verticalalignment'
def set_multialignment(self, align): DCNL 'Set the alignment for multiple lines layout.  The layout of the DCNL bounding box of all the lines is determined bu the horizontalalignment DCNL and verticalalignment properties, but the multiline text within that DCNL box can be DCNL ACCEPTS: [\'left\' | \'right\' | \'center\' ]'
def set_linespacing(self, spacing): DCNL 'Set the line spacing as a multiple of the font size. DCNL Default is 1.2. DCNL ACCEPTS: float (multiple of font size)'
def set_family(self, fontname): DCNL 'Set the font family.  May be either a single string, or a list DCNL of strings in decreasing priority.  Each string may be either DCNL a real font name or a generic font class name.  If the latter, DCNL the specific font names will be looked up in the DCNL :file:`matplotlibrc` file. DCNL ACCEPTS: [ FONTNAME | \'serif\' | \'sans-serif\' | \'cursive\' | \'fantasy\' | \'monospace\' ]'
def set_variant(self, variant): DCNL 'Set the font variant, either \'normal\' or \'small-caps\'. DCNL ACCEPTS: [ \'normal\' | \'small-caps\' ]'
def set_fontvariant(self, variant): DCNL 'alias for set_variant'
def set_name(self, fontname): DCNL 'alias for set_family'
def set_fontname(self, fontname): DCNL 'alias for set_family'
def set_style(self, fontstyle): DCNL 'Set the font style. DCNL ACCEPTS: [ \'normal\' | \'italic\' | \'oblique\']'
def set_fontstyle(self, fontstyle): DCNL 'alias for set_style'
def set_size(self, fontsize): DCNL 'Set the font size.  May be either a size string, relative to DCNL the default font size, or an absolute font size in points. DCNL ACCEPTS: [ size in points | \'xx-small\' | \'x-small\' | \'small\' | \'medium\' | \'large\' | \'x-large\' | \'xx-large\' ]'
def set_fontsize(self, fontsize): DCNL 'alias for set_size'
def set_weight(self, weight): DCNL 'Set the font weight. DCNL ACCEPTS: [ a numeric value in range 0-1000 | \'ultralight\' | \'light\' | \'normal\' | \'regular\' | \'book\' | \'medium\' | \'roman\' | \'semibold\' | \'demibold\' | \'demi\' | \'bold\' | \'heavy\' | \'extra bold\' | \'black\' ]'
def set_fontweight(self, weight): DCNL 'alias for set_weight'
def set_stretch(self, stretch): DCNL 'Set the font stretch (horizontal condensation or expansion). DCNL ACCEPTS: [ a numeric value in range 0-1000 | \'ultra-condensed\' | \'extra-condensed\' | \'condensed\' | \'semi-condensed\' | \'normal\' | \'semi-expanded\' | \'expanded\' | \'extra-expanded\' | \'ultra-expanded\' ]'
def set_fontstretch(self, stretch): DCNL 'alias for set_stretch'
def set_position(self, xy): DCNL 'Set the (*x*, *y*) position of the text DCNL ACCEPTS: (x,y)'
def set_x(self, x): DCNL 'Set the *x* position of the text DCNL ACCEPTS: float'
def set_y(self, y): DCNL 'Set the *y* position of the text DCNL ACCEPTS: float'
def set_rotation(self, s): DCNL 'Set the rotation of the text DCNL ACCEPTS: [ angle in degrees | \'vertical\' | \'horizontal\' ]'
def set_va(self, align): DCNL 'alias for set_verticalalignment'
def set_verticalalignment(self, align): DCNL 'Set the vertical alignment DCNL ACCEPTS: [ \'center\' | \'top\' | \'bottom\' | \'baseline\' ]'
def set_text(self, s): DCNL 'Set the text string *s* DCNL It may contain newlines (``\n``) or math in LaTeX syntax. DCNL ACCEPTS: string or anything printable with \'%s\' conversion.'
def is_math_text(self, s): DCNL 'Returns True if the given string *s* contains any mathtext.'
def set_fontproperties(self, fp): DCNL 'Set the font properties that control the text.  *fp* must be a DCNL :class:`matplotlib.font_manager.FontProperties` object. DCNL ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance'
def set_font_properties(self, fp): DCNL 'alias for set_fontproperties'
def get_position(self): DCNL 'Return the position of the text as a tuple (*x*, *y*)'
def get_prop_tup(self): DCNL 'Return a hashable tuple of properties. DCNL Not intended to be human readable, but useful for backends who DCNL want to cache derived information about text (eg layouts) and DCNL need to know if the text has changed.'
def draw(self, renderer): DCNL 'Draw the :class:`TextWithDash` object to the given *renderer*.'
def update_coords(self, renderer): DCNL 'Computes the actual *x*, *y* coordinates for text based on the DCNL input *x*, *y* and the *dashlength*. Since the rotation is DCNL with respect to the actual canvas\'s coordinates we need to map DCNL back and forth.'
def get_window_extent(self, renderer=None): DCNL 'Return a :class:`~matplotlib.transforms.Bbox` object bounding DCNL the text, in display units. DCNL In addition to being used internally, this is useful for DCNL specifying clickable regions in a png file on a web page. DCNL *renderer* defaults to the _renderer attribute of the text DCNL object.  This is not assigned until the first execution of DCNL :meth:`draw`, so you must use this kwarg if you want DCNL to call :meth:`get_window_extent` prior to the first DCNL :meth:`draw`.  For getting web page regions, it is DCNL simpler to call the method after saving the figure.'
def get_dashlength(self): DCNL 'Get the length of the dash.'
def set_dashlength(self, dl): DCNL 'Set the length of the dash. DCNL ACCEPTS: float (canvas units)'
def get_dashdirection(self): DCNL 'Get the direction dash.  1 is before the text and 0 is after.'
def set_dashdirection(self, dd): DCNL 'Set the direction of the dash following the text. DCNL 1 is before the text and 0 is after. The default DCNL is 0, which is what you\'d want for the typical DCNL case of ticks below and on the left of the figure. DCNL ACCEPTS: int (1 is before, 0 is after)'
def get_dashrotation(self): DCNL 'Get the rotation of the dash in degrees.'
def set_dashrotation(self, dr): DCNL 'Set the rotation of the dash, in degrees DCNL ACCEPTS: float (degrees)'
def get_dashpad(self): DCNL 'Get the extra spacing between the dash and the text, in canvas units.'
def set_dashpad(self, dp): DCNL 'Set the "pad" of the TextWithDash, which is the extra spacing DCNL between the dash and the text, in canvas units. DCNL ACCEPTS: float (canvas units)'
def get_dashpush(self): DCNL 'Get the extra spacing between the dash and the specified text DCNL position, in canvas units.'
def set_dashpush(self, dp): DCNL 'Set the "push" of the TextWithDash, which DCNL is the extra spacing between the beginning DCNL of the dash and the specified position. DCNL ACCEPTS: float (canvas units)'
def set_position(self, xy): DCNL 'Set the (*x*, *y*) position of the :class:`TextWithDash`. DCNL ACCEPTS: (x, y)'
def set_x(self, x): DCNL 'Set the *x* position of the :class:`TextWithDash`. DCNL ACCEPTS: float'
def set_y(self, y): DCNL 'Set the *y* position of the :class:`TextWithDash`. DCNL ACCEPTS: float'
def set_transform(self, t): DCNL 'Set the :class:`matplotlib.transforms.Transform` instance used DCNL by this artist. DCNL ACCEPTS: a :class:`matplotlib.transforms.Transform` instance'
def get_figure(self): DCNL 'return the figure instance the artist belongs to'
def set_figure(self, fig): DCNL 'Set the figure instance the artist belong to. DCNL ACCEPTS: a :class:`matplotlib.figure.Figure` instance'
def __init__(self, s, xy, xytext=None, xycoords='data', textcoords=None, arrowprops=None, **kwargs): DCNL 'Annotate the *x*, *y* point *xy* with text *s* at *x*, *y* DCNL location *xytext*.  (If *xytext* = *None*, defaults to *xy*, DCNL and if *textcoords* = *None*, defaults to *xycoords*). DCNL *arrowprops*, if not *None*, is a dictionary of line properties DCNL (see :class:`matplotlib.lines.Line2D`) for the arrow that connects DCNL annotation to the point. DCNL If the dictionary has a key *arrowstyle*, a FancyArrowPatch DCNL instance is created with the given dictionary and is DCNL drawn. Otherwise, a YAArow patch instance is created and DCNL drawn. Valid keys for YAArow are DCNL Key         Description DCNL width       the width of the arrow in points DCNL frac        the fraction of the arrow length occupied by the head DCNL headwidth   the width of the base of the arrow head in points DCNL shrink      oftentimes it is convenient to have the arrowtip DCNL and base a bit away from the text and point being DCNL annotated.  If *d* is the distance between the text and DCNL annotated point, shrink will shorten the arrow so the tip DCNL and base are shink percent of the distance *d* away from the DCNL endpoints.  ie, ``shrink=0.05 is 5%%`` DCNL ?           any key for :class:`matplotlib.patches.polygon` DCNL Valid keys for FancyArrowPatch are DCNL Key              Description DCNL arrowstyle       the arrow style DCNL connectionstyle  the connection style DCNL relpos           default is (0.5, 0.5) DCNL patchA           default is bounding box of the text DCNL patchB           default is None DCNL shrinkA          default is 2 points DCNL shrinkB          default is 2 points DCNL mutation_scale   default is text size (in points) DCNL mutation_aspect  default is 1. DCNL ?                any key for :class:`matplotlib.patches.PathPatch` DCNL *xycoords* and *textcoords* are strings that indicate the DCNL coordinates of *xy* and *xytext*. DCNL Property            Description DCNL \'figure points\'     points from the lower left corner of the figure DCNL \'figure pixels\'     pixels from the lower left corner of the figure DCNL \'figure fraction\'   0,0 is lower left of figure and 1,1 is upper, right DCNL \'axes points\'       points from lower left corner of axes DCNL \'axes pixels\'       pixels from lower left corner of axes DCNL \'axes fraction\'     0,1 is lower left of axes and 1,1 is upper right DCNL \'data\'              use the coordinate system of the object being DCNL annotated (default) DCNL \'offset points\'     Specify an offset (in points) from the *xy* value DCNL \'polar\'             you can specify *theta*, *r* for the annotation, DCNL even in cartesian plots.  Note that if you DCNL are using a polar axes, you do not need DCNL to specify polar for the coordinate DCNL system since that is the native "data" coordinate DCNL system. DCNL If a \'points\' or \'pixels\' option is specified, values will be DCNL added to the bottom-left and if negative, values will be DCNL subtracted from the top-right.  Eg:: DCNL # 10 points to the right of the left border of the axes and DCNL # 5 points below the top border DCNL xy=(10,-5), xycoords=\'axes points\' DCNL Additional kwargs are Text properties: DCNL %(Text)s'
def draw(self, renderer): DCNL 'Draw the :class:`Annotation` object to the given *renderer*.'
def __call__(self, o): DCNL 'reserve the lock for o'
def release(self, o): DCNL 'release the lock'
def available(self, o): DCNL 'drawing is available to o'
def isowner(self, o): DCNL 'o owns the lock'
def locked(self): DCNL 'the lock is held'
def __init__(self, ax, label, image=None, color='0.85', hovercolor='0.95'): DCNL 'ax is the Axes instance the button will be placed into DCNL label is a string which is the button text DCNL image if not None, is an image to place in the button -- can DCNL be any legal arg to imshow (numpy array, matplotlib Image DCNL instance, or PIL image) DCNL color is the color of the button when not activated DCNL hovercolor is the color of the button when the mouse is over DCNL it'
def on_clicked(self, func): DCNL 'When the button is clicked, call this func with event DCNL A connection id is returned which can be used to disconnect'
def disconnect(self, cid): DCNL 'remove the observer with connection id cid'
def __init__(self, ax, label, valmin, valmax, valinit=0.5, valfmt='%1.2f', closedmin=True, closedmax=True, slidermin=None, slidermax=None, dragging=True, **kwargs): DCNL 'Create a slider from valmin to valmax in axes ax; DCNL valinit -  the slider initial position DCNL label - the slider label DCNL valfmt - used to format the slider value DCNL closedmin and closedmax - indicate whether the slider interval is closed DCNL slidermin and slidermax - be used to contrain the value of DCNL this slider to the values of other sliders. DCNL additional kwargs are passed on to self.poly which is the DCNL matplotlib.patches.Rectangle which draws the slider.  See the DCNL matplotlib.patches.Rectangle documentation for legal property DCNL names (eg facecolor, edgecolor, alpha, ...)'
def _update(self, event): DCNL 'update the slider position'
def on_changed(self, func): DCNL 'When the slider valud is changed, call this func with the new DCNL slider position DCNL A connection id is returned which can be used to disconnect'
def disconnect(self, cid): DCNL 'remove the observer with connection id cid'
def reset(self): DCNL 'reset the slider to the initial value if needed'
def __init__(self, ax, labels, actives): DCNL 'Add check buttons to axes.Axes instance ax DCNL labels is a len(buttons) list of labels as strings DCNL actives is a len(buttons) list of booleans indicating whether DCNL the button is active'
def on_clicked(self, func): DCNL 'When the button is clicked, call this func with button label DCNL A connection id is returned which can be used to disconnect'
def disconnect(self, cid): DCNL 'remove the observer with connection id cid'
def __init__(self, ax, labels, active=0, activecolor='blue'): DCNL 'Add radio buttons to axes.Axes instance ax DCNL labels is a len(buttons) list of labels as strings DCNL active is the index into labels for the button that is active DCNL activecolor is the color of the button when clicked'
def on_clicked(self, func): DCNL 'When the button is clicked, call this func with button label DCNL A connection id is returned which can be used to disconnect'
def disconnect(self, cid): DCNL 'remove the observer with connection id cid'
def __init__(self, targetfig, toolfig): DCNL 'targetfig is the figure to adjust DCNL toolfig is the figure to embed the the subplot tool into.  If DCNL None, a default pylab figure will be created.  If you are DCNL using this from the GUI'
def __init__(self, ax, useblit=False, **lineprops): DCNL 'Add a cursor to ax.  If useblit=True, use the backend DCNL dependent blitting features for faster updates (GTKAgg only DCNL now).  lineprops is a dictionary of line properties.  See DCNL examples/widgets/cursor.py.'
def clear(self, event): DCNL 'clear the cursor'
def onmove(self, event): DCNL 'on mouse motion draw the cursor if visible'
def clear(self, event): DCNL 'clear the cursor'
def __init__(self, ax, onselect, direction, minspan=None, useblit=False, rectprops=None, onmove_callback=None): DCNL 'Create a span selector in ax.  When a selection is made, clear DCNL the span and call onselect with DCNL onselect(vmin, vmax) DCNL and clear the span. DCNL direction must be \'horizontal\' or \'vertical\' DCNL If minspan is not None, ignore events smaller than minspan DCNL The span rect is drawn with rectprops; default DCNL rectprops = dict(facecolor=\'red\', alpha=0.5) DCNL set the visible attribute to False if you want to turn off DCNL the functionality of the span selector'
def update_background(self, event): DCNL 'force an update of the background'
def ignore(self, event): DCNL 'return True if event should be ignored'
def press(self, event): DCNL 'on button press event'
def release(self, event): DCNL 'on button release event'
def update(self): DCNL 'draw using newfangled blit or oldfangled draw depending on useblit'
def onmove(self, event): DCNL 'on motion notify event'
def __init__(self, ax, onselect, drawtype='box', minspanx=None, minspany=None, useblit=False, lineprops=None, rectprops=None, spancoords='data'): DCNL 'Create a selector in ax.  When a selection is made, clear DCNL the span and call onselect with DCNL onselect(pos_1, pos_2) DCNL and clear the drawn box/line. There pos_i are arrays of length 2 DCNL containing the x- and y-coordinate. DCNL If minspanx is not None then events smaller than minspanx DCNL in x direction are ignored(it\'s the same for y). DCNL The rect is drawn with rectprops; default DCNL rectprops = dict(facecolor=\'red\', edgecolor = \'black\', DCNL alpha=0.5, fill=False) DCNL The line is drawn with lineprops; default DCNL lineprops = dict(color=\'black\', linestyle=\'-\', DCNL linewidth = 2, alpha=0.5) DCNL Use type if you want the mouse to draw a line, a box or nothing DCNL between click and actual position ny setting DCNL drawtype = \'line\', drawtype=\'box\' or drawtype = \'none\'. DCNL spancoords is one of \'data\' or \'pixels\'.  If \'data\', minspanx DCNL and minspanx will be interpreted in the same coordinates as DCNL the x and ya axis, if \'pixels\', they are in pixels'
def update_background(self, event): DCNL 'force an update of the background'
def ignore(self, event): DCNL 'return True if event should be ignored'
def press(self, event): DCNL 'on button press event'
def release(self, event): DCNL 'on button release event'
def update(self): DCNL 'draw using newfangled blit or oldfangled draw depending on useblit'
def onmove(self, event): DCNL 'on motion notify event if box/line is wanted'
def set_active(self, active): DCNL 'Use this to activate / deactivate the RectangleSelector DCNL from your program with an boolean variable \'active\'.'
def get_active(self): DCNL 'to get status of active mode (boolean variable)'
def __init__(self, majloc=None, minloc=None, majfmt=None, minfmt=None, label=None): DCNL 'majloc and minloc: TickLocators for the major and minor ticks DCNL majfmt and minfmt: TickFormatters for the major and minor ticks DCNL label: the default axis label DCNL If any of the above are None, the axis will simply use the default'
def axisinfo(unit): DCNL 'return an units.AxisInfo instance for unit'
def default_units(x): DCNL 'return the default unit for x or None'
def convert(obj, unit): DCNL 'convert obj using unit.  If obj is a sequence, return the DCNL converted sequence.  The ouput must be a sequence of scalars DCNL that can be used by the numpy array layer'
def is_numlike(x): DCNL 'The matplotlib datalim, autoscaling, locators etc work with DCNL scalars which are the units converted to floats given the DCNL current unit.  The converter may be passed these floats, or DCNL arrays of them, even when units are set.  Derived conversion DCNL interfaces may opt to pass plain-ol unitless numbers through DCNL the conversion interface and this is a helper function for DCNL them.'
def get_converter(self, x): DCNL 'get the converter interface instance for x, or None'
def __init__(self, fmt): DCNL 'fmt: any valid strptime format is supported'
def __call__(self, s): DCNL 's : string to be converted DCNL return value: a date2num float'
def __init__(self, fmt, tz=None): DCNL '*fmt* is an :func:`strftime` format string; *tz* is the DCNL :class:`tzinfo` instance.'
def __init__(self, t, fmt, tz=None): DCNL '*t* is a sequence of dates (floating point days).  *fmt* is a DCNL :func:`strftime` format string.'
def __call__(self, x, pos=0): DCNL 'Return the label for time *x* at position *pos*'
def __init__(self, tz=None): DCNL '*tz* is a :class:`tzinfo` instance.'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def autoscale(self): DCNL 'Set the view limits to include the data range.'
def __call__(self): DCNL 'Return the locations of the ticks'
def refresh(self): DCNL 'Refresh internal information based on current limits.'
def autoscale(self): DCNL 'Try to choose the view limits intelligently.'
def get_locator(self, dmin, dmax): DCNL 'Pick the best locator based on a distance.'
def __init__(self, base=1, month=1, day=1, tz=None): DCNL 'Mark years that are multiple of base on a given month and day DCNL (default jan 1).'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def autoscale(self): DCNL 'Set the view limits to include the data range.'
def __init__(self, bymonth=None, bymonthday=1, interval=1, tz=None): DCNL 'Mark every month in *bymonth*; *bymonth* can be an int or DCNL sequence.  Default is ``range(1,13)``, i.e. every month. DCNL *interval* is the interval between each iteration.  For DCNL example, if ``interval=2``, mark every second occurance.'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def __init__(self, byweekday=1, interval=1, tz=None): DCNL 'Mark every weekday in *byweekday*; *byweekday* can be a number or DCNL sequence. DCNL Elements of *byweekday* must be one of MO, TU, WE, TH, FR, SA, DCNL SU, the constants from :mod:`dateutils.rrule`. DCNL *interval* specifies the number of weeks to skip.  For example, DCNL ``interval=2`` plots every second week.'
def _get_unit(self): DCNL 'return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def __init__(self, bymonthday=None, interval=1, tz=None): DCNL 'Mark every day in *bymonthday*; *bymonthday* can be an int or DCNL sequence. DCNL Default is to tick every day of the month: ``bymonthday=range(1,32)``'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def __init__(self, byhour=None, interval=1, tz=None): DCNL 'Mark every hour in *byhour*; *byhour* can be an int or sequence. DCNL Default is to tick every hour: ``byhour=range(24)`` DCNL *interval* is the interval between each iteration.  For DCNL example, if ``interval=2``, mark every second occurrence.'
def _get_unit(self): DCNL 'return how many days a unit of the locator is; use for DCNL intelligent autoscaling'
def __init__(self, byminute=None, interval=1, tz=None): DCNL 'Mark every minute in *byminute*; *byminute* can be an int or DCNL sequence.  Default is to tick every minute: ``byminute=range(60)`` DCNL *interval* is the interval between each iteration.  For DCNL example, if ``interval=2``, mark every second occurrence.'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def __init__(self, bysecond=None, interval=1, tz=None): DCNL 'Mark every second in *bysecond*; *bysecond* can be an int or DCNL sequence.  Default is to tick every second: ``bysecond = range(60)`` DCNL *interval* is the interval between each iteration.  For DCNL example, if ``interval=2``, mark every second occurrence.'
def _get_unit(self): DCNL 'Return how many days a unit of the locator is; used for DCNL intelligent autoscaling.'
def axisinfo(unit): DCNL 'return the unit AxisInfo'
def default_units(x): DCNL 'Return the default unit for *x* or None'
def set_figure(self, fig): DCNL 'Set the figure DCNL accepts a class:`~matplotlib.figure.Figure` instance'
def set_offset(self, xy): DCNL 'Set the offset DCNL accepts x, y, tuple, or a callable object.'
def get_offset(self, width, height, xdescent, ydescent): DCNL 'Get the offset DCNL accepts extent of the box'
def set_width(self, width): DCNL 'Set the width DCNL accepts float'
def set_height(self, height): DCNL 'Set the height DCNL accepts float'
def get_children(self): DCNL 'Return a list of artists it contains.'
def get_extent(self, renderer): DCNL 'Return with, height, xdescent, ydescent of box'
def get_window_extent(self, renderer): DCNL 'get the bounding box in display space.'
def draw(self, renderer): DCNL 'Update the location of children if necessary and draw them DCNL to the given *renderer*.'
def __init__(self, pad=None, sep=None, width=None, height=None, align=None, mode=None, children=None): DCNL '*pad* : boundary pad DCNL *sep* : spacing between items DCNL *width*, *height* : width and height of the container box. DCNL calculated if None. DCNL *align* : alignment of boxes DCNL *mode* : packing mode'
def __init__(self, pad=None, sep=None, width=None, height=None, align='baseline', mode='fixed', children=None): DCNL '*pad* : boundary pad DCNL *sep* : spacing between items DCNL *width*, *height* : width and height of the container box. DCNL calculated if None. DCNL *align* : alignment of boxes DCNL *mode* : packing mode'
def get_extent_offsets(self, renderer): DCNL 'update offset of childrens and return the extents of the box'
def __init__(self, pad=None, sep=None, width=None, height=None, align='baseline', mode='fixed', children=None): DCNL '*pad* : boundary pad DCNL *sep* : spacing between items DCNL *width*, *height* : width and height of the container box. DCNL calculated if None. DCNL *align* : alignment of boxes DCNL *mode* : packing mode'
def get_extent_offsets(self, renderer): DCNL 'update offset of childrens and return the extents of the box'
def __init__(self, width, height, xdescent=0.0, ydescent=0.0, clip=True): DCNL '*width*, *height* : width and height of the container box. DCNL *xdescent*, *ydescent* : descent of the box in x- and y-direction.'
def get_transform(self): DCNL 'Return the :class:`~matplotlib.transforms.Transform` applied DCNL to the children'
def set_transform(self, t): DCNL 'set_transform is ignored.'
def set_offset(self, xy): DCNL 'set offset of the container. DCNL Accept : tuple of x,y cooridnate in disokay units.'
def get_offset(self): DCNL 'return offset of the container.'
def get_window_extent(self, renderer): DCNL 'get the bounding box in display space.'
def get_extent(self, renderer): DCNL 'Return with, height, xdescent, ydescent of box'
def add_artist(self, a): DCNL 'Add any :class:`~matplotlib.artist.Artist` to the container box'
def draw(self, renderer): DCNL 'Draw the children'
def __init__(self, s, textprops=None, multilinebaseline=None, minimumdescent=True): DCNL '*s* : a string to be displayed. DCNL *textprops* : property dictionary for the text DCNL *multilinebaseline* : If True, baseline for multiline text is DCNL adjusted so that it is (approximatedly) DCNL center-aligned with singleline text. DCNL *minimumdescent*  : If True, the box has a minimum descent of "p".'
def set_multilinebaseline(self, t): DCNL 'Set multilinebaseline . DCNL If True, baseline for multiline text is DCNL adjusted so that it is (approximatedly) center-aligned with DCNL singleline text.'
def get_multilinebaseline(self): DCNL 'get multilinebaseline .'
def set_minimumdescent(self, t): DCNL 'Set minimumdescent . DCNL If True, extent of the single line text is adjusted so that DCNL it has minimum descent of "p"'
def get_minimumdescent(self): DCNL 'get minimumdescent.'
def set_transform(self, t): DCNL 'set_transform is ignored.'
def set_offset(self, xy): DCNL 'set offset of the container. DCNL Accept : tuple of x,y cooridnate in disokay units.'
def get_offset(self): DCNL 'return offset of the container.'
def get_window_extent(self, renderer): DCNL 'get the bounding box in display space.'
def draw(self, renderer): DCNL 'Draw the children'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val x at position pos; pos=None indicated unspecified'
def format_data_short(self, value): DCNL 'return a short string version'
def fix_minus(self, s): DCNL 'some classes may want to replace a hyphen for minus with the DCNL proper unicode symbol as described `here DCNL <http://sourceforge.net/tracker/index.php?func=detail&aid=1962574&group_id=80706&atid=560720>`_. DCNL The default is to do nothing DCNL Note, if you use this method, eg in :meth`format_data` or DCNL call, you probably don\'t want to use it for DCNL :meth:`format_data_short` since the toolbar uses this for DCNL interative coord reporting and I doubt we can expect GUIs DCNL across platforms will handle the unicode correctly.  So for DCNL now the classes that override :meth:`fix_minus` should have an DCNL explicit :meth:`format_data_short` method'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __init__(self, seq): DCNL 'seq is a sequence of strings.  For positions `i<len(seq)` return DCNL *seq[i]* regardless of *x*.  Otherwise return \'\''
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def fix_minus(self, s): DCNL 'use a unicode minus rather than hyphen'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def set_scientific(self, b): DCNL 'True or False to turn scientific notation on or off DCNL see also :meth:`set_powerlimits`'
def set_powerlimits(self, lims): DCNL 'Sets size thresholds for scientific notation. DCNL e.g. ``xaxis.set_powerlimits((-3, 4))`` sets the pre-2007 default in DCNL which scientific notation is used for numbers less than DCNL 1e-3 or greater than 1e4. DCNL See also :meth:`set_scientific`.'
def format_data_short(self, value): DCNL 'return a short formatted string representation of a number'
def format_data(self, value): DCNL 'return a formatted string representation of a number'
def get_offset(self): DCNL 'Return scientific notation, plus offset'
def set_locs(self, locs): DCNL 'set the locations of the ticks'
def __init__(self, base=10.0, labelOnlyBase=True): DCNL '*base* is used to locate the decade tick, DCNL which will be the only one to be labeled if *labelOnlyBase* DCNL is ``False``'
def base(self, base): DCNL 'change the *base* for labeling - warning: should always match the base used for :class:`LogLocator`'
def label_minor(self, labelOnlyBase): DCNL 'switch on/off minor ticks labeling'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def format_data_short(self, value): DCNL 'return a short formatted string representation of a number'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __call__(self, x, pos=None): DCNL 'Return the format for tick val *x* at position *pos*'
def __call__(self): DCNL 'Return the locations of the ticks'
def view_limits(self, vmin, vmax): DCNL 'select a scale for the range from vmin to vmax DCNL Normally This will be overridden.'
def autoscale(self): DCNL 'autoscale the view limits'
def pan(self, numsteps): DCNL 'Pan numticks (can be positive or negative)'
def zoom(self, direction): DCNL 'Zoom in/out on axis; if direction is >0 zoom in, else zoom out'
def refresh(self): DCNL 'refresh internal information based on current lim'
def __init__(self, base, offset): DCNL 'place ticks on the i-th data points where (i-offset)%base==0'
def __call__(self): DCNL 'Return the locations of the ticks'
def __call__(self): DCNL 'Return the locations of the ticks'
def __call__(self): DCNL 'Return the locations of the ticks'
def __init__(self, numticks=None, presets=None): DCNL 'Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs'
def __call__(self): DCNL 'Return the locations of the ticks'
def view_limits(self, vmin, vmax): DCNL 'Try to choose the view limits intelligently'
def lt(self, x): DCNL 'return the largest multiple of base < x'
def le(self, x): DCNL 'return the largest multiple of base <= x'
def gt(self, x): DCNL 'return the smallest multiple of base > x'
def ge(self, x): DCNL 'return the smallest multiple of base >= x'
def __call__(self): DCNL 'Return the locations of the ticks'
def view_limits(self, dmin, dmax): DCNL 'Set the view limits to the nearest multiples of base that DCNL contain the data'
def __init__(self, base=10.0, subs=[1.0]): DCNL 'place ticks on the location= base**i*subs[j]'
def base(self, base): DCNL 'set the base of the log scaling (major tick every base**i, i interger)'
def subs(self, subs): DCNL 'set the minor ticks the log scaling every base**i*subs[j]'
def __call__(self): DCNL 'Return the locations of the ticks'
def view_limits(self, vmin, vmax): DCNL 'Try to choose the view limits intelligently'
def __init__(self, transform, subs=[1.0]): DCNL 'place ticks on the location= base**i*subs[j]'
def __call__(self): DCNL 'Return the locations of the ticks'
def view_limits(self, vmin, vmax): DCNL 'Try to choose the view limits intelligently'
def __call__(self): DCNL 'Return the locations of the ticks'
def refresh(self): DCNL 'refresh internal information based on current lim'
def view_limits(self, vmin, vmax): DCNL 'Try to choose the view limits intelligently'
def get_locator(self, d): DCNL 'pick the best locator based on a distance'
def parse(self, pattern): DCNL 'Parse the given fontconfig *pattern* and return a dictionary DCNL of key/value pairs useful for initializing a DCNL :class:`font_manager.FontProperties` object.'
def __init__(self, nmax): DCNL 'Buffer up to *nmax* points.'
def register(self, func, N): DCNL 'Call *func* every time *N* events are passed; *func* signature DCNL is ``func(fifo)``.'
def add(self, x, y): DCNL 'Add scalar *x* and *y* to the queue.'
def last(self): DCNL 'Get the last *x*, *y* or *None*.  *None* if no data set.'
def asarrays(self): DCNL 'Return *x* and *y* as arrays; their length will be the len of DCNL data added or *nmax*.'
def update_datalim_to_current(self): DCNL 'Update the *datalim* in the current data in the fifo.'
def get_family(self): DCNL 'Return a list of font names that comprise the font family.'
def get_name(self): DCNL 'Return the name of the font that best matches the font DCNL properties.'
def get_style(self): DCNL 'Return the font style.  Values are: \'normal\', \'italic\' or DCNL \'oblique\'.'
def get_variant(self): DCNL 'Return the font variant.  Values are: \'normal\' or DCNL \'small-caps\'.'
def get_weight(self): DCNL 'Set the font weight.  Options are: A numeric value in the DCNL range 0-1000 or one of \'light\', \'normal\', \'regular\', \'book\', DCNL \'medium\', \'roman\', \'semibold\', \'demibold\', \'demi\', \'bold\', DCNL \'heavy\', \'extra bold\', \'black\''
def get_stretch(self): DCNL 'Return the font stretch or width.  Options are: \'ultra-condensed\', DCNL \'extra-condensed\', \'condensed\', \'semi-condensed\', \'normal\', DCNL \'semi-expanded\', \'expanded\', \'extra-expanded\', \'ultra-expanded\'.'
def get_size(self): DCNL 'Return the font size.'
def get_file(self): DCNL 'Return the filename of the associated font.'
def get_fontconfig_pattern(self): DCNL 'Get a fontconfig pattern suitable for looking up the font as DCNL specified with fontconfig\'s ``fc-match`` utility. DCNL See the documentation on `fontconfig patterns DCNL <http://www.fontconfig.org/fontconfig-user.html>`_. DCNL This support does not require fontconfig to be installed or DCNL support for it to be enabled.  We are merely borrowing its DCNL pattern syntax for use here.'
def set_family(self, family): DCNL 'Change the font family.  May be either an alias (generic name DCNL is CSS parlance), such as: \'serif\', \'sans-serif\', \'cursive\', DCNL \'fantasy\', or \'monospace\', or a real font name.'
def set_style(self, style): DCNL 'Set the font style.  Values are: \'normal\', \'italic\' or DCNL \'oblique\'.'
def set_variant(self, variant): DCNL 'Set the font variant.  Values are: \'normal\' or \'small-caps\'.'
def set_weight(self, weight): DCNL 'Set the font weight.  May be either a numeric value in the DCNL range 0-1000 or one of \'ultralight\', \'light\', \'normal\', DCNL \'regular\', \'book\', \'medium\', \'roman\', \'semibold\', \'demibold\', DCNL \'demi\', \'bold\', \'heavy\', \'extra bold\', \'black\''
def set_stretch(self, stretch): DCNL 'Set the font stretch or width.  Options are: \'ultra-condensed\', DCNL \'extra-condensed\', \'condensed\', \'semi-condensed\', \'normal\', DCNL \'semi-expanded\', \'expanded\', \'extra-expanded\' or DCNL \'ultra-expanded\', or a numeric value in the range 0-1000.'
def set_size(self, size): DCNL 'Set the font size.  Either an relative value of \'xx-small\', DCNL \'x-small\', \'small\', \'medium\', \'large\', \'x-large\', \'xx-large\' DCNL or an absolute font size, e.g. 12.'
def set_file(self, file): DCNL 'Set the filename of the fontfile to use.  In this case, all DCNL other properties will be ignored.'
def set_fontconfig_pattern(self, pattern): DCNL 'Set the properties by parsing a fontconfig *pattern*. DCNL See the documentation on `fontconfig patterns DCNL <http://www.fontconfig.org/fontconfig-user.html>`_. DCNL This support does not require fontconfig to be installed or DCNL support for it to be enabled.  We are merely borrowing its DCNL pattern syntax for use here.'
def copy(self): DCNL 'Return a deep copy of self'
def get_default_weight(self): DCNL 'Return the default font weight.'
def get_default_size(self): DCNL 'Return the default font size.'
def set_default_weight(self, weight): DCNL 'Set the default font weight.  The initial value is \'normal\'.'
def set_default_size(self, size): DCNL 'Set the default font size in points.  The initial value is set DCNL by ``font.size`` in rc.'
def update_fonts(self, filenames): DCNL 'Update the font dictionary with new font files. DCNL Currently not implemented.'
def score_family(self, families, family2): DCNL 'Returns a match score between the list of font families in DCNL *families* and the font family name *family2*. DCNL An exact match anywhere in the list returns 0.0. DCNL A match by generic font name will return 0.1. DCNL No match will return 1.0.'
def score_style(self, style1, style2): DCNL 'Returns a match score between *style1* and *style2*. DCNL An exact match returns 0.0. DCNL A match between \'italic\' and \'oblique\' returns 0.1. DCNL No match returns 1.0.'
def score_variant(self, variant1, variant2): DCNL 'Returns a match score between *variant1* and *variant2*. DCNL An exact match returns 0.0, otherwise 1.0.'
def score_stretch(self, stretch1, stretch2): DCNL 'Returns a match score between *stretch1* and *stretch2*. DCNL The result is the absolute value of the difference between the DCNL CSS numeric values of *stretch1* and *stretch2*, normalized DCNL between 0.0 and 1.0.'
def score_weight(self, weight1, weight2): DCNL 'Returns a match score between *weight1* and *weight2*. DCNL The result is the absolute value of the difference between the DCNL CSS numeric values of *weight1* and *weight2*, normalized DCNL between 0.0 and 1.0.'
def score_size(self, size1, size2): DCNL 'Returns a match score between *size1* and *size2*. DCNL If *size2* (the size specified in the font file) is \'scalable\', this DCNL function always returns 0.0, since any font size can be generated. DCNL Otherwise, the result is the absolute distance between *size1* and DCNL *size2*, normalized so that the usual range of font sizes (6pt - DCNL 72pt) will lie between 0.0 and 1.0.'
def findfont(self, prop, fontext='ttf'): DCNL 'Search the font list for the font that most closely matches DCNL the :class:`FontProperties` *prop*. DCNL :meth:`findfont` performs a nearest neighbor search.  Each DCNL font is given a similarity score to the target font DCNL properties.  The first font with the highest score is DCNL returned.  If no matches below a certain threshold are found, DCNL the default font (usually Vera Sans) is returned. DCNL The result is cached, so subsequent lookups don\'t have to DCNL perform the O(n) nearest neighbor search. DCNL See the `W3C Cascading Style Sheet, Level 1 DCNL <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation DCNL for a description of the font finding algorithm.'
def __init__(self, parent, handles, labels, loc=None, numpoints=None, markerscale=None, scatterpoints=3, scatteryoffsets=None, prop=None, pad=None, labelsep=None, handlelen=None, handletextsep=None, axespad=None, borderpad=None, labelspacing=None, handlelength=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncol=1, mode=None, fancybox=None, shadow=None): DCNL '- *parent* : the artist that contains the legend DCNL - *handles* : a list of artists (lines, patches) to add to the legend DCNL - *labels* : a list of strings to label the legend DCNL Optional keyword arguments: DCNL Keyword            Description DCNL loc                a location code or a tuple of coordinates DCNL numpoints          the number of points in the legend line DCNL prop               the font property DCNL markerscale        the relative size of legend markers vs. original DCNL fancybox           if True, draw a frame with a round fancybox.  If None, use rc DCNL shadow             if True, draw a shadow behind legend DCNL scatteryoffsets    a list of yoffsets for scatter symbols in legend DCNL borderpad          the fractional whitespace inside the legend border DCNL labelspacing       the vertical space between the legend entries DCNL handlelength       the length of the legend handles DCNL handletextpad      the pad between the legend handle and text DCNL borderaxespad      the pad between the axes and legend border DCNL columnspacing      the spacing between columns DCNL The dimensions of pad and spacing are given as a fraction of the DCNL fontsize. Values from rcParams will be used if None.'
def _set_artist_props(self, a): DCNL 'set the boilerplate props for artists added to axes'
def _findoffset_best(self, width, height, xdescent, ydescent, renderer): DCNL 'Heper function to locate the legend at its best position'
def _findoffset_loc(self, width, height, xdescent, ydescent, renderer): DCNL 'Heper function to locate the legend using the location code'
def draw(self, renderer): DCNL 'Draw everything that belongs to the legend'
def _approx_text_height(self, renderer=None): DCNL 'Return the approximate height of the text. This is used to place DCNL the legend handle.'
def _init_legend_box(self, handles, labels): DCNL 'Initiallize the legend_box. The legend_box is an instance of DCNL the OffsetBox, which is packed with legend handles and DCNL texts. Once packed, their location is calculated during the DCNL drawing time.'
def _update_legend_box(self, renderer): DCNL 'Update the dimension of the legend_box. This is required DCNL becuase the paddings, the hadle size etc. depends on the dpi DCNL of the renderer.'
def _auto_legend_data(self): DCNL 'Returns list of vertices and extents covered by the plot. DCNL Returns a two long list. DCNL First element is a list of (x, y) vertices (in DCNL display-coordinates) covered by all the lines and line DCNL collections, in the legend\'s handles. DCNL Second element is a list of bounding boxes for all the patches in DCNL the legend\'s handles.'
def draw_frame(self, b): DCNL 'b is a boolean.  Set draw frame to b'
def get_children(self): DCNL 'return a list of child artists'
def get_frame(self): DCNL 'return the Rectangle instance used to frame the legend'
def get_lines(self): DCNL 'return a list of lines.Line2D instances in the legend'
def get_patches(self): DCNL 'return a list of patch instances in the legend'
def get_texts(self): DCNL 'return a list of text.Text instance in the legend'
def get_window_extent(self): DCNL 'return a extent of the the legend'
def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer): DCNL 'Place the *bbox* inside the *parentbbox* according to a given DCNL location code. Return the (x,y) coordinate of the bbox. DCNL - loc: a location code in range(1, 11). DCNL This corresponds to the possible values for self._loc, excluding "best". DCNL - bbox: bbox to be placed, display coodinate units. DCNL - parentbbox: a parent box which will contain the bbox. In DCNL display coordinates.'
def _find_best_position(self, width, height, renderer, consider=None): DCNL 'Determine the best location to place the legend. DCNL `consider` is a list of (x, y) pairs to consider as a potential DCNL lower-left corner of the legend. All are display coords.'
def get_verts(self): DCNL 'Return a copy of the vertices used in this patch DCNL If the patch contains Bézier curves, the curves will be DCNL interpolated by line segments.  To access the curves as DCNL curves, use :meth:`get_path`.'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred in the patch. DCNL Returns T/F, {}'
def update_from(self, other): DCNL 'Updates this :class:`Patch` from the properties of *other*.'
def get_extents(self): DCNL 'Return a :class:`~matplotlib.transforms.Bbox` object defining DCNL the axis-aligned extents of the :class:`Patch`.'
def get_transform(self): DCNL 'Return the :class:`~matplotlib.transforms.Transform` applied DCNL to the :class:`Patch`.'
def get_antialiased(self): DCNL 'Returns True if the :class:`Patch` is to be drawn with antialiasing.'
def get_edgecolor(self): DCNL 'Return the edge color of the :class:`Patch`.'
def get_facecolor(self): DCNL 'Return the face color of the :class:`Patch`.'
def get_linewidth(self): DCNL 'Return the line width in points.'
def get_linestyle(self): DCNL 'Return the linestyle.  Will be one of [\'solid\' | \'dashed\' | DCNL \'dashdot\' | \'dotted\']'
def set_antialiased(self, aa): DCNL 'Set whether to use antialiased rendering DCNL ACCEPTS: [True | False]  or None for default'
def set_aa(self, aa): DCNL 'alias for set_antialiased'
def set_edgecolor(self, color): DCNL 'Set the patch edge color DCNL ACCEPTS: mpl color spec, or None for default, or \'none\' for no color'
def set_ec(self, color): DCNL 'alias for set_edgecolor'
def set_facecolor(self, color): DCNL 'Set the patch face color DCNL ACCEPTS: mpl color spec, or None for default, or \'none\' for no color'
def set_fc(self, color): DCNL 'alias for set_facecolor'
def set_linewidth(self, w): DCNL 'Set the patch linewidth in points DCNL ACCEPTS: float or None for default'
def set_lw(self, lw): DCNL 'alias for set_linewidth'
def set_linestyle(self, ls): DCNL 'Set the patch linestyle DCNL ACCEPTS: [\'solid\' | \'dashed\' | \'dashdot\' | \'dotted\']'
def set_ls(self, ls): DCNL 'alias for set_linestyle'
def set_fill(self, b): DCNL 'Set whether to fill the patch DCNL ACCEPTS: [True | False]'
def get_fill(self): DCNL 'return whether fill is set'
def set_hatch(self, h): DCNL 'Set the hatching pattern DCNL hatch can be one of:: DCNL /   - diagonal hatching DCNL \   - back diagonal DCNL |   - vertical DCNL -   - horizontal DCNL #   - crossed DCNL x   - crossed diagonal DCNL Letters can be combined, in which case all the specified DCNL hatchings are done.  If same letter repeats, it increases the DCNL density of hatching in that direction. DCNL CURRENT LIMITATIONS: DCNL 1. Hatching is supported in the PostScript backend only. DCNL 2. Hatching is done with solid black lines of width 0. DCNL ACCEPTS: [ \'/\' | \'\\' | \'|\' | \'-\' | \'#\' | \'x\' ]'
def get_hatch(self): DCNL 'Return the current hatching pattern'
def draw(self, renderer): DCNL 'Draw the :class:`Patch` to the given *renderer*.'
def get_path(self): DCNL 'Return the path of this patch'
def __init__(self, patch, ox, oy, props=None, **kwargs): DCNL 'Create a shadow of the given *patch* offset by *ox*, *oy*. DCNL *props*, if not *None*, is a patch property update dictionary. DCNL If *None*, the shadow will have have the same color as the face, DCNL but darkened. DCNL kwargs are DCNL %(Patch)s'
def __init__(self, xy, width, height, **kwargs): DCNL '*fill* is a boolean indicating whether to fill the rectangle DCNL Valid kwargs are: DCNL %(Patch)s'
def get_path(self): DCNL 'Return the vertices of the rectangle'
def _update_patch_transform(self): DCNL 'NOTE: This cannot be called until after this has been added DCNL to an Axes, otherwise unit conversion will fail. This DCNL maxes it very important to call the accessor method and DCNL not directly access the transformation member variable.'
def get_x(self): DCNL 'Return the left coord of the rectangle'
def get_y(self): DCNL 'Return the bottom coord of the rectangle'
def get_xy(self): DCNL 'Return the left and bottom coords of the rectangle'
def get_width(self): DCNL 'Return the width of the  rectangle'
def get_height(self): DCNL 'Return the height of the rectangle'
def set_x(self, x): DCNL 'Set the left coord of the rectangle DCNL ACCEPTS: float'
def set_y(self, y): DCNL 'Set the bottom coord of the rectangle DCNL ACCEPTS: float'
def set_xy(self, xy): DCNL 'Set the left and bottom coords of the rectangle DCNL ACCEPTS: 2-item sequence'
def set_width(self, w): DCNL 'Set the width rectangle DCNL ACCEPTS: float'
def set_height(self, h): DCNL 'Set the width rectangle DCNL ACCEPTS: float'
def set_bounds(self, *args): DCNL 'Set the bounds of the rectangle: l,b,w,h DCNL ACCEPTS: (left, bottom, width, height)'
def __init__(self, xy, numVertices, radius=5, orientation=0, **kwargs): DCNL 'Constructor arguments: DCNL *xy* DCNL A length 2 tuple (*x*, *y*) of the center. DCNL *numVertices* DCNL the number of vertices. DCNL *radius* DCNL The distance from the center to each of the vertices. DCNL *orientation* DCNL rotates the polygon (in radians). DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, path, **kwargs): DCNL '*path* is a :class:`matplotlib.path.Path` object. DCNL Valid kwargs are: DCNL %(Patch)s DCNL .. seealso:: DCNL :class:`Patch`: DCNL For additional kwargs'
def __init__(self, xy, closed=True, **kwargs): DCNL '*xy* is a numpy array with shape Nx2. DCNL If *closed* is *True*, the polygon will be closed so the DCNL starting and ending points are the same. DCNL Valid kwargs are: DCNL %(Patch)s DCNL .. seealso:: DCNL :class:`Patch`: DCNL For additional kwargs'
def __init__(self, center, r, theta1, theta2, width=None, **kwargs): DCNL 'Draw a wedge centered at *x*, *y* center with radius *r* that DCNL sweeps *theta1* to *theta2* (in degrees).  If *width* is given, DCNL then a partial wedge is drawn from inner radius *r* - *width* DCNL to outer radius *r*. DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, x, y, dx, dy, width=1.0, **kwargs): DCNL 'Draws an arrow, starting at (*x*, *y*), direction and length DCNL given by (*dx*, *dy*) the width of the arrow is scaled by *width*. DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, x, y, dx, dy, width=0.001, length_includes_head=False, head_width=None, head_length=None, shape='full', overhang=0, head_starts_at_zero=False, **kwargs): DCNL 'Constructor arguments DCNL *length_includes_head*: DCNL *True* if head is counted in calculating the length. DCNL *shape*: [\'full\', \'left\', \'right\'] DCNL *overhang*: DCNL distance that the arrow is swept back (0 overhang means DCNL triangular shape). DCNL *head_starts_at_zero*: DCNL If *True*, the head starts being drawn at coordinate 0 DCNL instead of ending at coordinate 0. DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, figure, xytip, xybase, width=4, frac=0.1, headwidth=12, **kwargs): DCNL 'Constructor arguments: DCNL *xytip* DCNL (*x*, *y*) location of arrow tip DCNL *xybase* DCNL (*x*, *y*) location the arrow base mid point DCNL *figure* DCNL The :class:`~matplotlib.figure.Figure` instance DCNL (fig.dpi) DCNL *width* DCNL The width of the arrow in points DCNL *frac* DCNL The fraction of the arrow length occupied by the head DCNL *headwidth* DCNL The width of the base of the arrow head in points DCNL Valid kwargs are: DCNL %(Patch)s'
def getpoints(self, x1, y1, x2, y2, k): DCNL 'For line segment defined by (*x1*, *y1*) and (*x2*, *y2*) DCNL return the points on the line that is perpendicular to the DCNL line and intersects (*x2*, *y2*) and the distance from (*x2*, DCNL *y2*) of the returned points is *k*.'
def __init__(self, xy, radius=5, resolution=20, **kwargs): DCNL 'Create a circle at *xy* = (*x*, *y*) with given *radius*. DCNL This circle is approximated by a regular polygon with DCNL *resolution* sides.  For a smoother circle drawn with splines, DCNL see :class:`~matplotlib.patches.Circle`. DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, xy, width, height, angle=0.0, **kwargs): DCNL '*xy* DCNL center of ellipse DCNL *width* DCNL length of horizontal axis DCNL *height* DCNL length of vertical axis DCNL *angle* DCNL rotation in degrees (anti-clockwise) DCNL Valid kwargs are: DCNL %(Patch)s'
def _recompute_transform(self): DCNL 'NOTE: This cannot be called until after this has been added DCNL to an Axes, otherwise unit conversion will fail. This DCNL maxes it very important to call the accessor method and DCNL not directly access the transformation member variable.'
def get_path(self): DCNL 'Return the vertices of the rectangle'
def __init__(self, xy, radius=5, **kwargs): DCNL 'Create true circle at center *xy* = (*x*, *y*) with given DCNL *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon` DCNL which is a polygonal approximation, this uses Bézier splines DCNL and is much closer to a scale-free circle. DCNL Valid kwargs are: DCNL %(Patch)s'
def __init__(self, xy, width, height, angle=0.0, theta1=0.0, theta2=360.0, **kwargs): DCNL 'The following args are supported: DCNL *xy* DCNL center of ellipse DCNL *width* DCNL length of horizontal axis DCNL *height* DCNL length of vertical axis DCNL *angle* DCNL rotation in degrees (anti-clockwise) DCNL *theta1* DCNL starting angle of the arc in degrees DCNL *theta2* DCNL ending angle of the arc in degrees DCNL If *theta1* and *theta2* are not provided, the arc will form a DCNL complete ellipse. DCNL Valid kwargs are: DCNL %(Patch)s'
def draw(self, renderer): DCNL 'Ellipses are normally drawn using an approximation that uses DCNL eight cubic bezier splines.  The error of this approximation DCNL is 1.89818e-6, according to this unverified source: DCNL Lancaster, Don.  Approximating a Circle or an Ellipse Using DCNL Four Bezier Cubic Splines. DCNL http://www.tinaja.com/glib/ellipse4.pdf DCNL There is a use case where very large ellipses must be drawn DCNL with very high accuracy, and it is too expensive to render the DCNL entire ellipse with enough segments (either splines or line DCNL segments).  Therefore, in the case where either radius of the DCNL ellipse is large enough that the error of the spline DCNL approximation will be visible (greater than one pixel offset DCNL from the ideal), a different technique is used. DCNL In that case, only the visible parts of the ellipse are drawn, DCNL with each visible arc using a fixed number of spline segments DCNL (8).  The algorithm proceeds as follows: DCNL 1. The points where the ellipse intersects the axes bounding DCNL box are located.  (This is done be performing an inverse DCNL transformation on the axes bbox such that it is relative DCNL to the unit circle -- this makes the intersection DCNL calculation much easier than doing rotated ellipse DCNL intersection directly). DCNL This uses the "line intersecting a circle" algorithm DCNL from: DCNL Vince, John.  Geometry for Computer Graphics: Formulae, DCNL Examples & Proofs.  London: Springer-Verlag, 2005. DCNL 2. The angles of each of the intersection points are DCNL calculated. DCNL 3. Proceeding counterclockwise starting in the positive DCNL x-direction, each of the visible arc-segments between the DCNL pairs of vertices are drawn using the bezier arc DCNL approximation technique implemented in DCNL :meth:`matplotlib.path.Path.arc`.'
def __new__(self, stylename, **kw): DCNL 'return the instance of the subclass with the given style name.'
@classmethod DCNL def get_styles(klass): DCNL 'A class method which returns a dictionary of available styles.'
@classmethod DCNL def pprint_styles(klass): DCNL 'A class method which returns a string of the available styles.'
def __init__(self): DCNL 'initializtion.'
def transmute(self, x0, y0, width, height, mutation_size): DCNL 'The transmute method is a very core of the DCNL :class:`BboxTransmuter` class and must be overriden in the DCNL subclasses. It receives the location and size of the DCNL rectangle, and the mutation_size, with which the amount of DCNL padding and etc. will be scaled. It returns a DCNL :class:`~matplotlib.path.Path` instance.'
def __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.0): DCNL 'Given the location and size of the box, return the path of DCNL the box around it. DCNL - *x0*, *y0*, *width*, *height* : location and size of the box DCNL - *mutation_size* : a reference scale for the mutation. DCNL - *aspect_ratio* : aspect-ration for the mutation.'
def __init__(self, pad=0.3): DCNL '*pad* DCNL amount of padding'
def __init__(self, pad=0.3, rounding_size=None): DCNL '*pad* DCNL amount of padding DCNL *rounding_size* DCNL rounding radius of corners. *pad* if None'
def __init__(self, pad=0.3, rounding_size=None): DCNL '*pad* DCNL amount of padding DCNL *rounding_size* DCNL rounding size of edges. *pad* if None'
def __init__(self, pad=0.3, tooth_size=None): DCNL '*pad* DCNL amount of padding DCNL *tooth_size* DCNL size of the sawtooth. pad* if None'
def __init__(self, pad=0.3, tooth_size=None): DCNL '*pad* DCNL amount of padding DCNL *tooth_size* DCNL size of the sawtooth. pad* if None'
def __init__(self, xy, width, height, boxstyle='round', bbox_transmuter=None, mutation_scale=1.0, mutation_aspect=None, **kwargs): DCNL '*xy* = lower left corner DCNL *width*, *height* DCNL *boxstyle* determines what kind of fancy box will be drawn. It DCNL can be a string of the style name with a comma separated DCNL attribute, or an instance of :class:`BoxStyle`. Following box DCNL styles are available. DCNL %(AvailableBoxstyles)s DCNL *mutation_scale* : a value with which attributes of boxstyle DCNL (e.g., pad) will be scaled. default=1. DCNL *mutation_aspect* : The height of the rectangle will be DCNL squeezed by this value before the mutation and the mutated DCNL box will be stretched by the inverse of it. default=None. DCNL Valid kwargs are: DCNL %(Patch)s'
def set_boxstyle(self, boxstyle=None, **kw): DCNL 'Set the box style. DCNL *boxstyle* can be a string with boxstyle name with optional DCNL comma-separated attributes. Alternatively, the attrs can DCNL be provided as keywords:: DCNL set_boxstyle("round,pad=0.2") DCNL set_boxstyle("round", pad=0.2) DCNL Old attrs simply are forgotten. DCNL Without argument (or with *boxstyle* = None), it returns DCNL available box styles. DCNL ACCEPTS: [ %(AvailableBoxstyles)s ]'
def set_mutation_scale(self, scale): DCNL 'Set the mutation scale. DCNL ACCEPTS: float'
def get_mutation_scale(self): DCNL 'Return the mutation scale.'
def set_mutation_aspect(self, aspect): DCNL 'Set the aspect ratio of the bbox mutation. DCNL ACCEPTS: float'
def get_mutation_aspect(self): DCNL 'Return the aspect ratio of the bbox mutation.'
def get_boxstyle(self): DCNL 'Return the boxstyle object'
def get_path(self): DCNL 'Return the mutated path of the rectangle'
def get_x(self): DCNL 'Return the left coord of the rectangle'
def get_y(self): DCNL 'Return the bottom coord of the rectangle'
def get_width(self): DCNL 'Return the width of the  rectangle'
def get_height(self): DCNL 'Return the height of the rectangle'
def set_x(self, x): DCNL 'Set the left coord of the rectangle DCNL ACCEPTS: float'
def set_y(self, y): DCNL 'Set the bottom coord of the rectangle DCNL ACCEPTS: float'
def set_width(self, w): DCNL 'Set the width rectangle DCNL ACCEPTS: float'
def set_height(self, h): DCNL 'Set the width rectangle DCNL ACCEPTS: float'
def set_bounds(self, *args): DCNL 'Set the bounds of the rectangle: l,b,w,h DCNL ACCEPTS: (left, bottom, width, height)'
def _clip(self, path, patchA, patchB): DCNL 'Clip the path to the boundary of the patchA and patchB. DCNL The starting point of the path needed to be inside of the DCNL patchA and the end point inside the patch B. The *contains* DCNL methods of each patch object is utilized to test if the point DCNL is inside the path.'
def _shrink(self, path, shrinkA, shrinkB): DCNL 'Shrink the path by fixed size (in points) with shrinkA and shrinkB'
def __call__(self, posA, posB, shrinkA=2.0, shrinkB=2.0, patchA=None, patchB=None): DCNL 'Calls the *connect* method to create a path between *posA* DCNL and *posB*. The path is clipped and shrinked.'
def __init__(self, rad=0.0): DCNL '*rad* DCNL curvature of the curve.'
def __init__(self, angleA=90, angleB=0): DCNL '*angleA* DCNL starting angle of the path DCNL *angleB* DCNL ending angle of the path'
def __init__(self, angleA=90, angleB=0, rad=0.0): DCNL '*angleA* DCNL starting angle of the path DCNL *angleB* DCNL ending angle of the path DCNL *rad* DCNL rounding radius of the edge'
def __init__(self, angleA=0, angleB=0, armA=None, armB=None, rad=0.0): DCNL '*angleA* : DCNL starting angle of the path DCNL *angleB* : DCNL ending angle of the path DCNL *armA* : DCNL length of the starting arm DCNL *armB* : DCNL length of the ending arm DCNL *rad* : DCNL rounding radius of the edges'
@staticmethod DCNL def ensure_quadratic_bezier(path): DCNL 'Some ArrowStyle class only wokrs with a simple DCNL quaratic bezier curve (created with Arc3Connetion or DCNL Angle3Connector). This static method is to check if the DCNL provided path is a simple quadratic bezier curve and returns DCNL its control points if true.'
def transmute(self, path, mutation_size, linewidth): DCNL 'The transmute method is a very core of the ArrowStyle DCNL class and must be overriden in the subclasses. It receives the DCNL path object along which the arrow will be drawn, and the DCNL mutation_size, with which the amount arrow head and etc. will DCNL be scaled. It returns a Path instance. The linewidth may be DCNL used to adjust the the path so that it does not pass beyond DCNL the given points.'
def __call__(self, path, mutation_size, linewidth, aspect_ratio=1.0): DCNL 'The __call__ method is a thin wrapper around the transmute method DCNL and take care of the aspect ratio.'
def __init__(self, beginarrow=None, endarrow=None, head_length=0.2, head_width=0.1): DCNL 'The arrows are drawn if *beginarrow* and/or *endarrow* are DCNL true. *head_length* and *head_width* determines the size of DCNL the arrow relative to the *mutation scale*.'
def _get_arrow_wedge(self, x0, y0, x1, y1, head_dist, cos_t, sin_t, linewidth): DCNL 'Return the paths for arrow heads. Since arrow lines are DCNL drawn with capstyle=projected, The arrow is goes beyond the DCNL desired point. This method also returns the amount of the path DCNL to be shrinked so that it does not overshoot.'
def __init__(self, head_length=0.4, head_width=0.2): DCNL '*head_length* DCNL length of the arrow head DCNL *head_width* DCNL width of the arrow head'
def __init__(self, head_length=0.4, head_width=0.2): DCNL '*head_length* DCNL length of the arrow head DCNL *head_width* DCNL width of the arrow head'
def __init__(self, head_length=0.4, head_width=0.2): DCNL '*head_length* DCNL length of the arrow head DCNL *head_width* DCNL width of the arrow head'
def __init__(self, widthB=1.0, lengthB=0.2, angleB=None): DCNL '*widthB* DCNL width of the bracket DCNL *lengthB* DCNL length of the bracket DCNL *angleB* DCNL angle between the bracket and the line'
def __init__(self, head_length=0.5, head_width=0.5, tail_width=0.2): DCNL '*head_length* DCNL length of the arrow head DCNL *head_with* DCNL width of the arrow head DCNL *tail_width* DCNL width of the arrow tail'
def __init__(self, head_length=0.4, head_width=0.4, tail_width=0.4): DCNL '*head_length* DCNL length of the arrow head DCNL *head_with* DCNL width of the arrow head DCNL *tail_width* DCNL width of the arrow tail'
def __init__(self, tail_width=0.3, shrink_factor=0.5): DCNL '*tail_width* DCNL width of the tail DCNL *shrink_factor* DCNL fraction of the arrow width at the middle point'
def __init__(self, posA=None, posB=None, path=None, arrowstyle='simple', arrow_transmuter=None, connectionstyle='arc3', connector=None, patchA=None, patchB=None, shrinkA=2.0, shrinkB=2.0, mutation_scale=1.0, mutation_aspect=None, **kwargs): DCNL 'If *posA* and *posB* is given, a path connecting two point are DCNL created according to the connectionstyle. The path will be DCNL clipped with *patchA* and *patchB* and further shirnked by DCNL *shrinkA* and *shrinkB*. An arrow is drawn along this DCNL resulting path using the *arrowstyle* parameter. If *path* DCNL provided, an arrow is drawn along this path and *patchA*, DCNL *patchB*, *shrinkA*, and *shrinkB* are ignored. DCNL The *connectionstyle* describes how *posA* and *posB* are DCNL connected. It can be an instance of the ConnectionStyle class DCNL (matplotlib.patches.ConnectionStlye) or a string of the DCNL connectionstyle name, with optional comma-separated DCNL attributes.  The following connection styles are available. DCNL %(AvailableConnectorstyles)s DCNL The *arrowstyle* describes how the fancy arrow will be DCNL drawn. It can be string of the available arrowstyle names, DCNL with optional comma-separated attributes, or one of the DCNL ArrowStyle instance. The optional attributes are meant to be DCNL scaled with the *mutation_scale*. The following arrow styles are DCNL available. DCNL %(AvailableArrowstyles)s DCNL *mutation_scale* : a value with which attributes of arrowstyle DCNL (e.g., head_length) will be scaled. default=1. DCNL *mutation_aspect* : The height of the rectangle will be DCNL squeezed by this value before the mutation and the mutated DCNL box will be stretched by the inverse of it. default=None. DCNL Valid kwargs are: DCNL %(Patch)s'
def set_positions(self, posA, posB): DCNL 'set the begin end end positions of the connecting DCNL path. Use current vlaue if None.'
def set_patchA(self, patchA): DCNL 'set the begin patch.'
def set_patchB(self, patchB): DCNL 'set the begin patch'
def set_connectionstyle(self, connectionstyle, **kw): DCNL 'Set the connection style. DCNL *connectionstyle* can be a string with connectionstyle name with optional DCNL comma-separated attributes. Alternatively, the attrs can DCNL be probided as keywords. DCNL set_connectionstyle("arc,angleA=0,armA=30,rad=10") DCNL set_connectionstyle("arc", angleA=0,armA=30,rad=10) DCNL Old attrs simply are forgotten. DCNL Without argument (or with connectionstyle=None), return DCNL available styles as a list of strings.'
def get_connectionstyle(self): DCNL 'Return the ConnectionStyle instance'
def set_arrowstyle(self, arrowstyle=None, **kw): DCNL 'Set the arrow style. DCNL *arrowstyle* can be a string with arrowstyle name with optional DCNL comma-separated attributes. Alternatively, the attrs can DCNL be provided as keywords. DCNL set_arrowstyle("Fancy,head_length=0.2") DCNL set_arrowstyle("fancy", head_length=0.2) DCNL Old attrs simply are forgotten. DCNL Without argument (or with arrowstyle=None), return DCNL available box styles as a list of strings.'
def get_arrowstyle(self): DCNL 'Return the arrowstyle object'
def set_mutation_scale(self, scale): DCNL 'Set the mutation scale. DCNL ACCEPTS: float'
def get_mutation_scale(self): DCNL 'Return the mutation scale.'
def set_mutation_aspect(self, aspect): DCNL 'Set the aspect ratio of the bbox mutation. DCNL ACCEPTS: float'
def get_mutation_aspect(self): DCNL 'Return the aspect ratio of the bbox mutation.'
def get_path(self): DCNL 'return the path of the arrow in the data coordinate. Use DCNL get_path_in_displaycoord() medthod to retrieve the arrow path DCNL in the disaply coord.'
def get_path_in_displaycoord(self): DCNL 'Return the mutated path of the arrow in the display coord'
def _split(self, data): DCNL 'Split the Type 1 font into its three main parts. DCNL The three parts are: (1) the cleartext part, which ends in a DCNL eexec operator; (2) the encrypted part; (3) the fixed part, DCNL which contains 512 ASCII zeros possibly divided on various DCNL lines, a cleartomark operator, and possibly something else.'
def _parse(self): DCNL 'A very limited kind of parsing to find the Encoding of the DCNL font.'
def __init__(self, axes, loc, label, size=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True): DCNL 'bbox is the Bound2D bounding box in display coords of the Axes DCNL loc is the tick location in data coords DCNL size is the tick size in relative, axes coords'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occured in the Tick marks. DCNL This function always returns false.  It is more useful to test if the DCNL axis as a whole contains the mouse rather than the set of tick marks.'
def set_pad(self, val): DCNL 'Set the tick label pad in points DCNL ACCEPTS: float'
def get_pad(self): DCNL 'Get the value of the tick label pad in points'
def _get_text1(self): DCNL 'Get the default Text 1 instance'
def _get_text2(self): DCNL 'Get the default Text 2 instance'
def _get_tick1line(self): DCNL 'Get the default line2D instance for tick1'
def _get_tick2line(self): DCNL 'Get the default line2D instance for tick2'
def _get_gridline(self): DCNL 'Get the default grid Line2d instance for this tick'
def get_loc(self): DCNL 'Return the tick location (data coords) as a scalar'
def set_label1(self, s): DCNL 'Set the text of ticklabel DCNL ACCEPTS: str'
def set_label2(self, s): DCNL 'Set the text of ticklabel2 DCNL ACCEPTS: str'
def get_view_interval(self): DCNL 'return the view Interval instance for the axis this tick is ticking'
def _get_text1(self): DCNL 'Get the default Text instance'
def _get_text2(self): DCNL 'Get the default Text 2 instance'
def _get_tick1line(self): DCNL 'Get the default line2D instance'
def _get_tick2line(self): DCNL 'Get the default line2D instance'
def _get_gridline(self): DCNL 'Get the default line2D instance'
def update_position(self, loc): DCNL 'Set the location of tick in data coords with scalar *loc*'
def get_view_interval(self): DCNL 'return the Interval instance for this axis view limits'
def get_data_interval(self): DCNL 'return the Interval instance for this axis data limits'
def _get_text1(self): DCNL 'Get the default Text instance'
def _get_text2(self): DCNL 'Get the default Text instance'
def _get_tick1line(self): DCNL 'Get the default line2D instance'
def _get_tick2line(self): DCNL 'Get the default line2D instance'
def _get_gridline(self): DCNL 'Get the default line2D instance'
def update_position(self, loc): DCNL 'Set the location of tick in data coords with scalar loc'
def get_view_interval(self): DCNL 'return the Interval instance for this axis view limits'
def get_data_interval(self): DCNL 'return the Interval instance for this axis data limits'
def __init__(self, axes, pickradius=15): DCNL 'Init the axis with the parent Axes instance'
def set_label_coords(self, x, y, transform=None): DCNL 'Set the coordinates of the label.  By default, the x DCNL coordinate of the y label is determined by the tick label DCNL bounding boxes, but this can lead to poor alignment of DCNL multiple ylabels if there are multiple axes.  Ditto for the y DCNL coodinate of the x label. DCNL You can also specify the coordinate system of the label with DCNL the transform.  If None, the default coordinate system will be DCNL the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5) DCNL is middle, etc'
def cla(self): DCNL 'clear the current axis'
def get_view_interval(self): DCNL 'return the Interval instance for this axis view limits'
def get_data_interval(self): DCNL 'return the Interval instance for this axis data limits'
def set_data_interval(self): DCNL 'Set the axis data limits'
def iter_ticks(self): DCNL 'Iterate through all of the major and minor ticks.'
def get_ticklabel_extents(self, renderer): DCNL 'Get the extents of the tick labels on either side DCNL of the axes.'
def draw(self, renderer, *args, **kwargs): DCNL 'Draw the axis lines, grid lines, tick lines and labels'
def get_gridlines(self): DCNL 'Return the grid lines as a list of Line2D instance'
def get_label(self): DCNL 'Return the axis label as a Text instance'
def get_offset_text(self): DCNL 'Return the axis offsetText as a Text instance'
def get_pickradius(self): DCNL 'Return the depth of the axis used by the picker'
def get_majorticklabels(self): DCNL 'Return a list of Text instances for the major ticklabels'
def get_minorticklabels(self): DCNL 'Return a list of Text instances for the minor ticklabels'
def get_ticklabels(self, minor=False): DCNL 'Return a list of Text instances for ticklabels'
def get_majorticklines(self): DCNL 'Return the major tick lines as a list of Line2D instances'
def get_minorticklines(self): DCNL 'Return the minor tick lines as a list of Line2D instances'
def get_ticklines(self, minor=False): DCNL 'Return the tick lines as a list of Line2D instances'
def get_majorticklocs(self): DCNL 'Get the major tick locations in data coordinates as a numpy array'
def get_minorticklocs(self): DCNL 'Get the minor tick locations in data coordinates as a numpy array'
def get_ticklocs(self, minor=False): DCNL 'Get the tick locations in data coordinates as a numpy array'
def _get_tick(self, major): DCNL 'return the default tick intsance'
def _copy_tick_props(self, src, dest): DCNL 'Copy the props from src tick to dest tick'
def get_major_locator(self): DCNL 'Get the locator of the major ticker'
def get_minor_locator(self): DCNL 'Get the locator of the minor ticker'
def get_major_formatter(self): DCNL 'Get the formatter of the major ticker'
def get_minor_formatter(self): DCNL 'Get the formatter of the minor ticker'
def get_major_ticks(self, numticks=None): DCNL 'get the tick instances; grow as necessary'
def get_minor_ticks(self, numticks=None): DCNL 'get the minor tick instances; grow as necessary'
def grid(self, b=None, which='major', **kwargs): DCNL 'Set the axis grid on or off; b is a boolean use *which* = DCNL \'major\' | \'minor\' to set the grid for major or minor ticks DCNL if *b* is *None* and len(kwargs)==0, toggle the grid state.  If DCNL *kwargs* are supplied, it is assumed you want the grid on and *b* DCNL will be set to True DCNL *kwargs* are used to set the line properties of the grids, eg, DCNL xax.grid(color=\'r\', linestyle=\'-\', linewidth=2)'
def update_units(self, data): DCNL 'introspect *data* for units converter and update the DCNL axis.converter instance if necessary. Return *True* is *data* is DCNL registered for unit conversion'
def _update_axisinfo(self): DCNL 'check the axis converter for the stored units to see if the DCNL axis info needs to be updated'
def set_units(self, u): DCNL 'set the units for axis DCNL ACCEPTS: a units tag'
def get_units(self): DCNL 'return the units for axis'
def set_major_formatter(self, formatter): DCNL 'Set the formatter of the major ticker DCNL ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance'
def set_minor_formatter(self, formatter): DCNL 'Set the formatter of the minor ticker DCNL ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance'
def set_major_locator(self, locator): DCNL 'Set the locator of the major ticker DCNL ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance'
def set_minor_locator(self, locator): DCNL 'Set the locator of the minor ticker DCNL ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance'
def set_pickradius(self, pickradius): DCNL 'Set the depth of the axis used by the picker DCNL ACCEPTS: a distance in points'
def set_ticklabels(self, ticklabels, *args, **kwargs): DCNL 'Set the text values of the tick labels. Return a list of Text DCNL instances.  Use *kwarg* *minor=True* to select minor ticks. DCNL ACCEPTS: sequence of strings'
def set_ticks(self, ticks, minor=False): DCNL 'Set the locations of the tick marks from sequence ticks DCNL ACCEPTS: sequence of floats'
def _update_label_position(self, bboxes, bboxes2): DCNL 'Update the label position based on the sequence of bounding DCNL boxes of all the ticklabels'
def _update_offset_text_postion(self, bboxes, bboxes2): DCNL 'Update the label position based on the sequence of bounding DCNL boxes of all the ticklabels'
def pan(self, numsteps): DCNL 'Pan *numsteps* (can be positive or negative)'
def zoom(self, direction): DCNL 'Zoom in/out on axis; if *direction* is >0 zoom in, else zoom out'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occured in the x axis.'
def get_label_position(self): DCNL 'Return the label position (top or bottom)'
def set_label_position(self, position): DCNL 'Set the label position (top or bottom) DCNL ACCEPTS: [ \'top\' | \'bottom\' ]'
def _update_label_position(self, bboxes, bboxes2): DCNL 'Update the label position based on the sequence of bounding DCNL boxes of all the ticklabels'
def _update_offset_text_position(self, bboxes, bboxes2): DCNL 'Update the offset_text position based on the sequence of bounding DCNL boxes of all the ticklabels'
def get_text_heights(self, renderer): DCNL 'Returns the amount of space one should reserve for text DCNL above and below the axes.  Returns a tuple (above, below)'
def set_ticks_position(self, position): DCNL 'Set the ticks position (top, bottom, both, default or none) DCNL both sets the ticks to appear on both positions, but does not DCNL change the tick labels.  default resets the tick positions to DCNL the default: ticks on both positions, labels at bottom.  none DCNL can be used if you don\'t want any ticks. DCNL ACCEPTS: [ \'top\' | \'bottom\' | \'both\' | \'default\' | \'none\' ]'
def tick_top(self): DCNL 'use ticks only on top'
def tick_bottom(self): DCNL 'use ticks only on bottom'
def get_ticks_position(self): DCNL 'Return the ticks position (top, bottom, default or unknown)'
def get_view_interval(self): DCNL 'return the Interval instance for this axis view limits'
def get_data_interval(self): DCNL 'return the Interval instance for this axis data limits'
def set_data_interval(self, vmin, vmax, ignore=False): DCNL 'return the Interval instance for this axis data limits'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred in the y axis. DCNL Returns *True* | *False*'
def get_label_position(self): DCNL 'Return the label position (left or right)'
def set_label_position(self, position): DCNL 'Set the label position (left or right) DCNL ACCEPTS: [ \'left\' | \'right\' ]'
def _update_label_position(self, bboxes, bboxes2): DCNL 'Update the label position based on the sequence of bounding DCNL boxes of all the ticklabels'
def _update_offset_text_position(self, bboxes, bboxes2): DCNL 'Update the offset_text position based on the sequence of bounding DCNL boxes of all the ticklabels'
def set_ticks_position(self, position): DCNL 'Set the ticks position (left, right, both or default) DCNL both sets the ticks to appear on both positions, but DCNL does not change the tick labels. DCNL default resets the tick positions to the default: DCNL ticks on both positions, labels on the left. DCNL ACCEPTS: [ \'left\' | \'right\' | \'both\' | \'default\' | \'none\' ]'
def tick_right(self): DCNL 'use ticks only on right'
def tick_left(self): DCNL 'use ticks only on left'
def get_ticks_position(self): DCNL 'Return the ticks position (left, right, both or unknown)'
def get_view_interval(self): DCNL 'return the Interval instance for this axis view limits'
def get_data_interval(self): DCNL 'return the Interval instance for this axis data limits'
def set_data_interval(self, vmin, vmax, ignore=False): DCNL 'return the Interval instance for this axis data limits'
def __init__(self, xdata, ydata, linewidth=None, linestyle=None, color=None, marker=None, markersize=None, markeredgewidth=None, markeredgecolor=None, markerfacecolor=None, antialiased=None, dash_capstyle=None, solid_capstyle=None, dash_joinstyle=None, solid_joinstyle=None, pickradius=5, drawstyle=None, **kwargs): DCNL 'Create a :class:`~matplotlib.lines.Line2D` instance with *x* DCNL and *y* data in sequences *xdata*, *ydata*. DCNL The kwargs are :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL See :meth:`set_linestyle` for a decription of the line styles, DCNL :meth:`set_marker` for a description of the markers, and DCNL :meth:`set_drawstyle` for a description of the draw styles.'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred on the line.  The pick DCNL radius determines the precision of the location test (usually DCNL within five points of the value).  Use DCNL :meth:`~matplotlib.lines.Line2D.get_pickradius` or DCNL :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or DCNL modify it. DCNL Returns *True* if any values are within the radius along with DCNL ``{\'ind\': pointlist}``, where *pointlist* is the set of points DCNL within the radius. DCNL TODO: sort returned indices by distance'
def get_pickradius(self): DCNL 'return the pick radius used for containment tests'
def setpickradius(self, d): DCNL 'Sets the pick radius used for containment tests DCNL ACCEPTS: float distance in points'
def set_picker(self, p): DCNL 'Sets the event picker details for the line. DCNL ACCEPTS: float distance in points or callable pick function DCNL ``fn(artist, event)``'
def set_data(self, *args): DCNL 'Set the x and y data DCNL ACCEPTS: 2D array'
def set_transform(self, t): DCNL 'set the Transformation instance used by this artist DCNL ACCEPTS: a :class:`matplotlib.transforms.Transform` instance'
def _is_sorted(self, x): DCNL 'return true if x is sorted'
def get_data(self, orig=True): DCNL 'Return the xdata, ydata. DCNL If *orig* is *True*, return the original data'
def get_xdata(self, orig=True): DCNL 'Return the xdata. DCNL If *orig* is *True*, return the original data, else the DCNL processed data.'
def get_ydata(self, orig=True): DCNL 'Return the ydata. DCNL If *orig* is *True*, return the original data, else the DCNL processed data.'
def get_path(self): DCNL 'Return the :class:`~matplotlib.path.Path` object associated DCNL with this line.'
def get_xydata(self): DCNL 'Return the *xy* data as a Nx2 numpy array.'
def set_antialiased(self, b): DCNL 'True if line should be drawin with antialiased rendering DCNL ACCEPTS: [True | False]'
def set_color(self, color): DCNL 'Set the color of the line DCNL ACCEPTS: any matplotlib color'
def set_drawstyle(self, drawstyle): DCNL 'Set the drawstyle of the plot DCNL \'default\' connects the points with lines. The steps variants DCNL produce step-plots. \'steps\' is equivalent to \'steps-pre\' and DCNL is maintained for backward-compatibility. DCNL ACCEPTS: [ \'default\' | \'steps\' | \'steps-pre\' | \'steps-mid\' | \'steps-post\' ]'
def set_linewidth(self, w): DCNL 'Set the line width in points DCNL ACCEPTS: float value in points'
def set_linestyle(self, linestyle): DCNL 'Set the linestyle of the line (also accepts drawstyles) DCNL linestyle           description DCNL \'-\'                 solid DCNL \'--\'                dashed DCNL \'-.\'                dash_dot DCNL \':\'                 dotted DCNL \'None\'              draw nothing DCNL \' \'                 draw nothing DCNL \'\'                  draw nothing DCNL \'steps\' is equivalent to \'steps-pre\' and is maintained for DCNL backward-compatibility. DCNL .. seealso:: DCNL :meth:`set_drawstyle` DCNL ACCEPTS: [ \'-\' | \'--\' | \'-.\' | \':\' | \'None\' | \' \' | \'\' ] and DCNL any drawstyle in combination with a linestyle, e.g. \'steps--\'.'
def set_marker(self, marker): DCNL 'Set the line marker DCNL marker     description DCNL \'.\'        point DCNL \',\'        pixel DCNL \'o\'        circle DCNL \'v\'        triangle_down DCNL \'^\'        triangle_up DCNL \'<\'        triangle_left DCNL \'>\'        triangle_right DCNL \'1\'        tri_down DCNL \'2\'        tri_up DCNL \'3\'        tri_left DCNL \'4\'        tri_right DCNL \'s\'        square DCNL \'p\'        pentagon DCNL \'*\'        star DCNL \'h\'        hexagon1 DCNL \'H\'        hexagon2 DCNL \'+\'        plus DCNL \'x\'        x DCNL \'D\'        diamond DCNL \'d\'        thin_diamond DCNL \'|\'        vline DCNL \'_\'        hline DCNL TICKLEFT   tickleft DCNL TICKRIGHT  tickright DCNL TICKUP     tickup DCNL TICKDOWN   tickdown DCNL CARETLEFT  caretleft DCNL CARETRIGHT caretright DCNL CARETUP    caretup DCNL CARETDOWN  caretdown DCNL \'None\'     nothing DCNL \' \'        nothing DCNL \'\'         nothing DCNL ACCEPTS: [ \'+\' | \'*\' | \',\' | \'.\' | \'1\' | \'2\' | \'3\' | \'4\' DCNL | \'<\' | \'>\' | \'D\' | \'H\' | \'^\' | \'_\' | \'d\' DCNL | \'h\' | \'o\' | \'p\' | \'s\' | \'v\' | \'x\' | \'|\' DCNL | TICKUP | TICKDOWN | TICKLEFT | TICKRIGHT DCNL | \'None\' | \' \' | \'\' ]'
def set_markeredgecolor(self, ec): DCNL 'Set the marker edge color DCNL ACCEPTS: any matplotlib color'
def set_markeredgewidth(self, ew): DCNL 'Set the marker edge width in points DCNL ACCEPTS: float value in points'
def set_markerfacecolor(self, fc): DCNL 'Set the marker face color DCNL ACCEPTS: any matplotlib color'
def set_markersize(self, sz): DCNL 'Set the marker size in points DCNL ACCEPTS: float'
def set_xdata(self, x): DCNL 'Set the data np.array for x DCNL ACCEPTS: 1D array'
def set_ydata(self, y): DCNL 'Set the data np.array for y DCNL ACCEPTS: 1D array'
def set_dashes(self, seq): DCNL 'Set the dash sequence, sequence of dashes with on off ink in DCNL points.  If seq is empty or if seq = (None, None), the DCNL linestyle will be set to solid. DCNL ACCEPTS: sequence of on/off ink in points'
def update_from(self, other): DCNL 'copy properties from other to self'
def set_aa(self, val): DCNL 'alias for set_antialiased'
def set_c(self, val): DCNL 'alias for set_color'
def set_ls(self, val): DCNL 'alias for set_linestyle'
def set_lw(self, val): DCNL 'alias for set_linewidth'
def set_mec(self, val): DCNL 'alias for set_markeredgecolor'
def set_mew(self, val): DCNL 'alias for set_markeredgewidth'
def set_mfc(self, val): DCNL 'alias for set_markerfacecolor'
def set_ms(self, val): DCNL 'alias for set_markersize'
def get_aa(self): DCNL 'alias for get_antialiased'
def get_c(self): DCNL 'alias for get_color'
def get_ls(self): DCNL 'alias for get_linestyle'
def get_lw(self): DCNL 'alias for get_linewidth'
def get_mec(self): DCNL 'alias for get_markeredgecolor'
def get_mew(self): DCNL 'alias for get_markeredgewidth'
def get_mfc(self): DCNL 'alias for get_markerfacecolor'
def get_ms(self): DCNL 'alias for get_markersize'
def set_dash_joinstyle(self, s): DCNL 'Set the join style for dashed linestyles DCNL ACCEPTS: [\'miter\' | \'round\' | \'bevel\']'
def set_solid_joinstyle(self, s): DCNL 'Set the join style for solid linestyles DCNL ACCEPTS: [\'miter\' | \'round\' | \'bevel\']'
def get_dash_joinstyle(self): DCNL 'Get the join style for dashed linestyles'
def get_solid_joinstyle(self): DCNL 'Get the join style for solid linestyles'
def set_dash_capstyle(self, s): DCNL 'Set the cap style for dashed linestyles DCNL ACCEPTS: [\'butt\' | \'round\' | \'projecting\']'
def set_solid_capstyle(self, s): DCNL 'Set the cap style for solid linestyles DCNL ACCEPTS: [\'butt\' | \'round\' |  \'projecting\']'
def get_dash_capstyle(self): DCNL 'Get the cap style for dashed linestyles'
def get_solid_capstyle(self): DCNL 'Get the cap style for solid linestyles'
def is_dashed(self): DCNL 'return True if line is dashstyle'
def __init__(self, line): DCNL 'Initialize the class with a :class:`matplotlib.lines.Line2D` DCNL instance.  The line should already be added to some DCNL :class:`matplotlib.axes.Axes` instance and should have the DCNL picker property set.'
def process_selected(self, ind, xs, ys): DCNL 'Default "do nothing" implementation of the DCNL :meth:`process_selected` method. DCNL *ind* are the indices of the selected vertices.  *xs* and *ys* DCNL are the coordinates of the selected vertices.'
def onpick(self, event): DCNL 'When the line is picked, update the set of selected indicies.'
def __init__(self): DCNL 'Creates a new :class:`TransformNode`.'
def invalidate(self): DCNL 'Invalidate this :class:`TransformNode` and all of its DCNL ancestors.  Should be called any time the transform changes.'
def set_children(self, *children): DCNL 'Set the children of the transform, to let the invalidation DCNL system know which transforms can invalidate this transform. DCNL Should be called from the constructor of any transforms that DCNL depend on other transforms.'
def frozen(self): DCNL 'Returns a frozen copy of this transform node.  The frozen copy DCNL will not update when its children change.  Useful for storing DCNL a previously known state of a transform where DCNL ``copy.deepcopy()`` might normally be used.'
def is_unit(self): DCNL 'Returns True if the :class:`Bbox` is the unit bounding box DCNL from (0, 0) to (1, 1).'
def containsx(self, x): DCNL 'Returns True if *x* is between or equal to :attr:`x0` and DCNL :attr:`x1`.'
def containsy(self, y): DCNL 'Returns True if *y* is between or equal to :attr:`y0` and DCNL :attr:`y1`.'
def contains(self, x, y): DCNL 'Returns *True* if (*x*, *y*) is a coordinate inside the DCNL bounding box or on its edge.'
def overlaps(self, other): DCNL 'Returns True if this bounding box overlaps with the given DCNL bounding box *other*.'
def fully_containsx(self, x): DCNL 'Returns True if *x* is between but not equal to :attr:`x0` and DCNL :attr:`x1`.'
def fully_containsy(self, y): DCNL 'Returns True if *y* is between but not equal to :attr:`y0` and DCNL :attr:`y1`.'
def fully_contains(self, x, y): DCNL 'Returns True if (*x*, *y*) is a coordinate inside the bounding DCNL box, but not on its edge.'
def fully_overlaps(self, other): DCNL 'Returns True if this bounding box overlaps with the given DCNL bounding box *other*, but not on its edge alone.'
def transformed(self, transform): DCNL 'Return a new :class:`Bbox` object, statically transformed by DCNL the given transform.'
def inverse_transformed(self, transform): DCNL 'Return a new :class:`Bbox` object, statically transformed by DCNL the inverse of the given transform.'
def anchored(self, c, container=None): DCNL 'Return a copy of the :class:`Bbox`, shifted to position *c* DCNL within a container. DCNL *c*: may be either: DCNL * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0 DCNL to 1, where 0 is left or bottom and 1 is right or top DCNL * a string: DCNL - \'C\' for centered DCNL - \'S\' for bottom-center DCNL - \'SE\' for bottom-left DCNL - \'E\' for left DCNL - etc. DCNL Optional argument *container* is the box within which the DCNL :class:`Bbox` is positioned; it defaults to the initial DCNL :class:`Bbox`.'
def shrunk(self, mx, my): DCNL 'Return a copy of the :class:`Bbox`, shrunk by the factor *mx* DCNL in the *x* direction and the factor *my* in the *y* direction. DCNL The lower left corner of the box remains unchanged.  Normally DCNL *mx* and *my* will be less than 1, but this is not enforced.'
def shrunk_to_aspect(self, box_aspect, container=None, fig_aspect=1.0): DCNL 'Return a copy of the :class:`Bbox`, shrunk so that it is as DCNL large as it can be while having the desired aspect ratio, DCNL *box_aspect*.  If the box coordinates are relative---that DCNL is, fractions of a larger box such as a figure---then the DCNL physical aspect ratio of that figure is specified with DCNL *fig_aspect*, so that *box_aspect* can also be given as a DCNL ratio of the absolute dimensions, not the relative dimensions.'
def splitx(self, *args): DCNL 'e.g., ``bbox.splitx(f1, f2, ...)`` DCNL Returns a list of new :class:`Bbox` objects formed by DCNL splitting the original one with vertical lines at fractional DCNL positions *f1*, *f2*, ...'
def splity(self, *args): DCNL 'e.g., ``bbox.splitx(f1, f2, ...)`` DCNL Returns a list of new :class:`Bbox` objects formed by DCNL splitting the original one with horizontal lines at fractional DCNL positions *f1*, *f2*, ...'
def count_contains(self, vertices): DCNL 'Count the number of vertices contained in the :class:`Bbox`. DCNL *vertices* is a Nx2 Numpy array.'
def count_overlaps(self, bboxes): DCNL 'Count the number of bounding boxes that overlap this one. DCNL bboxes is a sequence of :class:`BboxBase` objects'
def expanded(self, sw, sh): DCNL 'Return a new :class:`Bbox` which is this :class:`Bbox` DCNL expanded around its center by the given factors *sw* and DCNL *sh*.'
def padded(self, p): DCNL 'Return a new :class:`Bbox` that is padded on all four sides by DCNL the given value.'
def translated(self, tx, ty): DCNL 'Return a copy of the :class:`Bbox`, statically translated by DCNL *tx* and *ty*.'
def corners(self): DCNL 'Return an array of points which are the four corners of this DCNL rectangle.  For example, if this :class:`Bbox` is defined by DCNL the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns DCNL (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).'
def rotated(self, radians): DCNL 'Return a new bounding box that bounds a rotated version of DCNL this bounding box by the given radians.  The new bounding box DCNL is still aligned with the axes, of course.'
def union(bboxes): DCNL 'Return a :class:`Bbox` that contains all of the given bboxes.'
def __init__(self, points): DCNL '*points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]] DCNL If you need to create a :class:`Bbox` object from another form DCNL of data, consider the static methods :meth:`unit`, DCNL :meth:`from_bounds` and :meth:`from_extents`.'
def unit(): DCNL '(staticmethod) Create a new unit :class:`Bbox` from (0, 0) to DCNL (1, 1).'
def from_bounds(x0, y0, width, height): DCNL '(staticmethod) Create a new :class:`Bbox` from *x0*, *y0*, DCNL *width* and *height*. DCNL *width* and *height* may be negative.'
def from_extents(*args): DCNL '(staticmethod) Create a new Bbox from *left*, *bottom*, DCNL *right* and *top*. DCNL The *y*-axis increases upwards.'
def ignore(self, value): DCNL 'Set whether the existing bounds of the box should be ignored DCNL by subsequent calls to :meth:`update_from_data` or DCNL :meth:`update_from_data_xy`. DCNL *value*: DCNL - When True, subsequent calls to :meth:`update_from_data` DCNL will ignore the existing bounds of the :class:`Bbox`. DCNL - When False, subsequent calls to :meth:`update_from_data` DCNL will include the existing bounds of the :class:`Bbox`.'
def update_from_data(self, x, y, ignore=None): DCNL 'Update the bounds of the :class:`Bbox` based on the passed in DCNL data.  After updating, the bounds will have positive *width* DCNL and *height*; *x0* and *y0* will be the minimal values. DCNL *x*: a numpy array of *x*-values DCNL *y*: a numpy array of *y*-values DCNL *ignore*: DCNL - when True, ignore the existing bounds of the :class:`Bbox`. DCNL - when False, include the existing bounds of the :class:`Bbox`. DCNL - when None, use the last value passed to :meth:`ignore`.'
def update_from_path(self, path, ignore=None, updatex=True, updatey=True): DCNL 'Update the bounds of the :class:`Bbox` based on the passed in DCNL data.  After updating, the bounds will have positive *width* DCNL and *height*; *x0* and *y0* will be the minimal values. DCNL *path*: a :class:`~matplotlib.path.Path` instance DCNL *ignore*: DCNL - when True, ignore the existing bounds of the :class:`Bbox`. DCNL - when False, include the existing bounds of the :class:`Bbox`. DCNL - when None, use the last value passed to :meth:`ignore`. DCNL *updatex*: when True, update the x values DCNL *updatey*: when True, update the y values'
def update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True): DCNL 'Update the bounds of the :class:`Bbox` based on the passed in DCNL data.  After updating, the bounds will have positive *width* DCNL and *height*; *x0* and *y0* will be the minimal values. DCNL *xy*: a numpy array of 2D points DCNL *ignore*: DCNL - when True, ignore the existing bounds of the :class:`Bbox`. DCNL - when False, include the existing bounds of the :class:`Bbox`. DCNL - when None, use the last value passed to :meth:`ignore`. DCNL *updatex*: when True, update the x values DCNL *updatey*: when True, update the y values'
def get_points(self): DCNL 'Get the points of the bounding box directly as a numpy array DCNL of the form: [[x0, y0], [x1, y1]].'
def set_points(self, points): DCNL 'Set the points of the bounding box directly from a numpy array DCNL of the form: [[x0, y0], [x1, y1]].  No error checking is DCNL performed, as this method is mainly for internal use.'
def set(self, other): DCNL 'Set this bounding box from the "frozen" bounds of another DCNL :class:`Bbox`.'
def __init__(self, bbox, transform): DCNL '*bbox*: a child :class:`Bbox` DCNL *transform*: a 2D :class:`Transform`'
def __add__(self, other): DCNL 'Composes two transforms together such that *self* is followed DCNL by *other*.'
def __radd__(self, other): DCNL 'Composes two transforms together such that *self* is followed DCNL by *other*.'
def __array__(self, *args, **kwargs): DCNL 'Used by C/C++ -based backends to get at the array matrix data.'
def transform(self, values): DCNL 'Performs the transformation on the given array of values. DCNL Accepts a numpy array of shape (N x :attr:`input_dims`) and DCNL returns a numpy array of shape (N x :attr:`output_dims`).'
def transform_affine(self, values): DCNL 'Performs only the affine part of this transformation on the DCNL given array of values. DCNL ``transform(values)`` is always equivalent to DCNL ``transform_affine(transform_non_affine(values))``. DCNL In non-affine transformations, this is generally a no-op.  In DCNL affine transformations, this is equivalent to DCNL ``transform(values)``. DCNL Accepts a numpy array of shape (N x :attr:`input_dims`) and DCNL returns a numpy array of shape (N x :attr:`output_dims`).'
def transform_non_affine(self, values): DCNL 'Performs only the non-affine part of the transformation. DCNL ``transform(values)`` is always equivalent to DCNL ``transform_affine(transform_non_affine(values))``. DCNL In non-affine transformations, this is generally equivalent to DCNL ``transform(values)``.  In affine transformations, this is DCNL always a no-op. DCNL Accepts a numpy array of shape (N x :attr:`input_dims`) and DCNL returns a numpy array of shape (N x :attr:`output_dims`).'
def get_affine(self): DCNL 'Get the affine part of this transform.'
def transform_point(self, point): DCNL 'A convenience function that returns the transformed copy of a DCNL single point. DCNL The point is given as a sequence of length :attr:`input_dims`. DCNL The transformed point is returned as a sequence of length DCNL :attr:`output_dims`.'
def transform_path(self, path): DCNL 'Returns a transformed copy of path. DCNL *path*: a :class:`~matplotlib.path.Path` instance. DCNL In some cases, this transform may insert curves into the path DCNL that began as line segments.'
def transform_path_affine(self, path): DCNL 'Returns a copy of path, transformed only by the affine part of DCNL this transform. DCNL *path*: a :class:`~matplotlib.path.Path` instance. DCNL ``transform_path(path)`` is equivalent to DCNL ``transform_path_affine(transform_path_non_affine(values))``.'
def transform_path_non_affine(self, path): DCNL 'Returns a copy of path, transformed only by the non-affine DCNL part of this transform. DCNL *path*: a :class:`~matplotlib.path.Path` instance. DCNL ``transform_path(path)`` is equivalent to DCNL ``transform_path_affine(transform_path_non_affine(values))``.'
def transform_angles(self, angles, pts, radians=False, pushoff=1e-05): DCNL 'Performs transformation on a set of angles anchored at DCNL specific locations. DCNL The *angles* must be a column vector (i.e., numpy array). DCNL The *pts* must be a two-column numpy array of x,y positions DCNL (angle transforms currently only work in 2D).  This array must DCNL have the same number of rows as *angles*. DCNL *radians* indicates whether or not input angles are given in DCNL radians (True) or degrees (False; the default). DCNL *pushoff* is the distance to move away from *pts* for DCNL determining transformed angles (see discussion of method DCNL below). DCNL The transformed angles are returned in an array with the same DCNL size as *angles*. DCNL The generic version of this method uses a very generic DCNL algorithm that transforms *pts*, as well as locations very DCNL close to *pts*, to find the angle in the transformed system.'
def inverted(self): DCNL 'Return the corresponding inverse transformation. DCNL The return value of this method should be treated as DCNL temporary.  An update to *self* does not cause a corresponding DCNL update to its inverted copy. DCNL ``x === self.inverted().transform(self.transform(x))``'
def __init__(self, child): DCNL '*child*: A class:`Transform` instance.  This child may later DCNL be replaced with :meth:`set`.'
def set(self, child): DCNL 'Replace the current child of this transform with another one. DCNL The new child must have the same number of input and output DCNL dimensions as the current child.'
def _concat(a, b): DCNL 'Concatenates two transformation matrices (represented as numpy DCNL arrays) together.'
def get_matrix(self): DCNL 'Get the underlying transformation matrix as a numpy array.'
def to_values(self): DCNL 'Return the values of the matrix as a sequence (a,b,c,d,e,f)'
def matrix_from_values(a, b, c, d, e, f): DCNL '(staticmethod) Create a new transformation matrix as a 3x3 DCNL numpy array of the form:: DCNL a c e DCNL b d f DCNL 0 0 1'
def __init__(self, matrix=None): DCNL 'Initialize an Affine transform from a 3x3 numpy float array:: DCNL a c e DCNL b d f DCNL 0 0 1 DCNL If *matrix* is None, initialize with the identity transform.'
def from_values(a, b, c, d, e, f): DCNL '(staticmethod) Create a new Affine2D instance from the given DCNL values:: DCNL a c e DCNL b d f DCNL 0 0 1'
def get_matrix(self): DCNL 'Get the underlying transformation matrix as a 3x3 numpy array:: DCNL a c e DCNL b d f DCNL 0 0 1'
def set_matrix(self, mtx): DCNL 'Set the underlying transformation matrix from a 3x3 numpy array:: DCNL a c e DCNL b d f DCNL 0 0 1'
def set(self, other): DCNL 'Set this transformation from the frozen copy of another DCNL :class:`Affine2DBase` object.'
def identity(): DCNL '(staticmethod) Return a new :class:`Affine2D` object that is DCNL the identity transform. DCNL Unless this transform will be mutated later on, consider using DCNL the faster :class:`IdentityTransform` class instead.'
def clear(self): DCNL 'Reset the underlying matrix to the identity transform.'
def rotate(self, theta): DCNL 'Add a rotation (in radians) to this transform in place. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def rotate_deg(self, degrees): DCNL 'Add a rotation (in degrees) to this transform in place. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def rotate_around(self, x, y, theta): DCNL 'Add a rotation (in radians) around the point (x, y) in place. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def rotate_deg_around(self, x, y, degrees): DCNL 'Add a rotation (in degrees) around the point (x, y) in place. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def translate(self, tx, ty): DCNL 'Adds a translation in place. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def scale(self, sx, sy=None): DCNL 'Adds a scale in place. DCNL If *sy* is None, the same scale is applied in both the *x*- and DCNL *y*-directions. DCNL Returns *self*, so this method can easily be chained with more DCNL calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate` DCNL and :meth:`scale`.'
def __init__(self, x_transform, y_transform): DCNL 'Create a new "blended" transform using *x_transform* to DCNL transform the *x*-axis and *y_transform* to transform the DCNL *y*-axis. DCNL You will generally not call this constructor directly but use DCNL the :func:`blended_transform_factory` function instead, which DCNL can determine automatically which kind of blended transform to DCNL create.'
def __init__(self, x_transform, y_transform): DCNL 'Create a new "blended" transform using *x_transform* to DCNL transform the *x*-axis and *y_transform* to transform the DCNL *y*-axis. DCNL Both *x_transform* and *y_transform* must be 2D affine DCNL transforms. DCNL You will generally not call this constructor directly but use DCNL the :func:`blended_transform_factory` function instead, which DCNL can determine automatically which kind of blended transform to DCNL create.'
def __init__(self, a, b): DCNL 'Create a new composite transform that is the result of DCNL applying transform *a* then transform *b*. DCNL You will generally not call this constructor directly but use DCNL the :func:`composite_transform_factory` function instead, DCNL which can automatically choose the best kind of composite DCNL transform instance to create.'
def __init__(self, a, b): DCNL 'Create a new composite transform that is the result of DCNL applying transform *a* then transform *b*. DCNL Both *a* and *b* must be instances of :class:`Affine2DBase`. DCNL You will generally not call this constructor directly but use DCNL the :func:`composite_transform_factory` function instead, DCNL which can automatically choose the best kind of composite DCNL transform instance to create.'
def __init__(self, boxin, boxout): DCNL 'Create a new :class:`BboxTransform` that linearly transforms DCNL points from *boxin* to *boxout*.'
def __init__(self, boxout): DCNL 'Create a new :class:`BboxTransformTo` that linearly transforms DCNL points from the unit bounding box to *boxout*.'
def __init__(self, path, transform): DCNL 'Create a new :class:`TransformedPath` from the given DCNL :class:`~matplotlib.path.Path` and :class:`Transform`.'
def get_transformed_points_and_affine(self): DCNL 'Return a copy of the child path, with the non-affine part of DCNL the transform already applied, along with the affine part of DCNL the path necessary to complete the transformation.  Unlike DCNL :meth:`get_transformed_path_and_affine`, no interpolation will DCNL be performed.'
def get_transformed_path_and_affine(self): DCNL 'Return a copy of the child path, with the non-affine part of DCNL the transform already applied, along with the affine part of DCNL the path necessary to complete the transformation.'
def get_fully_transformed_path(self): DCNL 'Return a fully-transformed copy of the child path.'
def __init__(self, ax, cmap=None, norm=None, interpolation=None, origin=None, extent=None, filternorm=1, filterrad=4.0, resample=False, **kwargs): DCNL 'interpolation and cmap default to their rc settings DCNL cmap is a colors.Colormap instance DCNL norm is a colors.Normalize instance to map luminance to 0-1 DCNL extent is data axes (left, right, bottom, top) for making image plots DCNL registered with data plots.  Default is to label the pixel DCNL centers with the zero-based row and column indices. DCNL Additional kwargs are matplotlib.artist properties'
def get_size(self): DCNL 'Get the numrows, numcols of the input image'
def set_alpha(self, alpha): DCNL 'Set the alpha value used for blending - not supported on DCNL all backends DCNL ACCEPTS: float'
def changed(self): DCNL 'Call this whenever the mappable is changed so observers can DCNL update state'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occured within the image.'
def write_png(self, fname, noscale=False): DCNL 'Write the image to png file with fname'
def set_data(self, A, shape=None): DCNL 'Set the image array DCNL ACCEPTS: numpy/PIL Image A'
def set_array(self, A): DCNL 'retained for backwards compatibility - use set_data instead DCNL ACCEPTS: numpy array A or PIL Image'
def set_extent(self, extent): DCNL 'extent is data axes (left, right, bottom, top) for making image plots'
def get_interpolation(self): DCNL 'Return the interpolation method the image uses when resizing. DCNL One of \'nearest\', \'bilinear\', \'bicubic\', \'spline16\', \'spline36\', \'hanning\', DCNL \'hamming\', \'hermite\', \'kaiser\', \'quadric\', \'catrom\', \'gaussian\', DCNL \'bessel\', \'mitchell\', \'sinc\', \'lanczos\','
def set_interpolation(self, s): DCNL 'Set the interpolation method the image uses when resizing. DCNL ACCEPTS: [\'nearest\' | \'bilinear\' | \'bicubic\' | \'spline16\' | DCNL \'spline36\' | \'hanning\' | \'hamming\' | \'hermite\' | \'kaiser\' | DCNL \'quadric\' | \'catrom\' | \'gaussian\' | \'bessel\' | \'mitchell\' | DCNL \'sinc\' | \'lanczos\' | ]'
def get_extent(self): DCNL 'get the image extent: left, right, bottom, top'
def set_filternorm(self, filternorm): DCNL 'Set whether the resize filter norms the weights -- see DCNL help for imshow DCNL ACCEPTS: 0 or 1'
def get_filternorm(self): DCNL 'return the filternorm setting'
def set_filterrad(self, filterrad): DCNL 'Set the resize filter radius only applicable to some DCNL interpolation schemes -- see help for imshow DCNL ACCEPTS: positive float'
def get_filterrad(self): DCNL 'return the filterrad setting'
def __init__(self, ax, x=None, y=None, A=None, cmap=None, norm=None, **kwargs): DCNL 'cmap defaults to its rc setting DCNL cmap is a colors.Colormap instance DCNL norm is a colors.Normalize instance to map luminance to 0-1 DCNL Additional kwargs are matplotlib.artist properties'
def set_alpha(self, alpha): DCNL 'Set the alpha value used for blending - not supported on DCNL all backends DCNL ACCEPTS: float'
def __init__(self, fig, cmap=None, norm=None, offsetx=0, offsety=0, origin=None, **kwargs): DCNL 'cmap is a colors.Colormap instance DCNL norm is a colors.Normalize instance to map luminance to 0-1 DCNL kwargs are an optional list of Artist keyword args'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occured within the image.'
def get_size(self): DCNL 'Get the numrows, numcols of the input image'
def get_extent(self): DCNL 'get the image extent: left, right, bottom, top'
def write_png(self, fname): DCNL 'Write the image to png file with fname'
def get_window_extent(self, *args, **kwargs): DCNL 'get the axes bounding box in display space; *args* and DCNL *kwargs* are empty'
def _init_axis(self): DCNL 'move this out of __init__ because non-separable axes don\'t use it'
def set_figure(self, fig): DCNL 'Set the class:`~matplotlib.axes.Axes` figure DCNL accepts a class:`~matplotlib.figure.Figure` instance'
def _set_lim_and_transforms(self): DCNL 'set the *dataLim* and *viewLim* DCNL :class:`~matplotlib.transforms.Bbox` attributes and the DCNL *transScale*, *transData*, *transLimits* and *transAxes* DCNL transformations.'
def get_xaxis_transform(self): DCNL 'Get the transformation used for drawing x-axis labels, ticks DCNL and gridlines.  The x-direction is in data coordinates and the DCNL y-direction is in axis coordinates. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_xaxis_text1_transform(self, pad_points): DCNL 'Get the transformation used for drawing x-axis labels, which DCNL will add the given amount of padding (in points) between the DCNL axes and the label.  The x-direction is in data coordinates DCNL and the y-direction is in axis coordinates.  Returns a DCNL 3-tuple of the form:: DCNL (transform, valign, halign) DCNL where *valign* and *halign* are requested alignments for the DCNL text. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_xaxis_text2_transform(self, pad_points): DCNL 'Get the transformation used for drawing the secondary x-axis DCNL labels, which will add the given amount of padding (in points) DCNL between the axes and the label.  The x-direction is in data DCNL coordinates and the y-direction is in axis coordinates. DCNL Returns a 3-tuple of the form:: DCNL (transform, valign, halign) DCNL where *valign* and *halign* are requested alignments for the DCNL text. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_yaxis_transform(self): DCNL 'Get the transformation used for drawing y-axis labels, ticks DCNL and gridlines.  The x-direction is in axis coordinates and the DCNL y-direction is in data coordinates. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_yaxis_text1_transform(self, pad_points): DCNL 'Get the transformation used for drawing y-axis labels, which DCNL will add the given amount of padding (in points) between the DCNL axes and the label.  The x-direction is in axis coordinates DCNL and the y-direction is in data coordinates.  Returns a 3-tuple DCNL of the form:: DCNL (transform, valign, halign) DCNL where *valign* and *halign* are requested alignments for the DCNL text. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_yaxis_text2_transform(self, pad_points): DCNL 'Get the transformation used for drawing the secondary y-axis DCNL labels, which will add the given amount of padding (in points) DCNL between the axes and the label.  The x-direction is in axis DCNL coordinates and the y-direction is in data coordinates. DCNL Returns a 3-tuple of the form:: DCNL (transform, valign, halign) DCNL where *valign* and *halign* are requested alignments for the DCNL text. DCNL .. note:: DCNL This transformation is primarily used by the DCNL :class:`~matplotlib.axis.Axis` class, and is meant to be DCNL overridden by new kinds of projections that may need to DCNL place axis elements in different locations.'
def get_position(self, original=False): DCNL 'Return the a copy of the axes rectangle as a Bbox'
def set_position(self, pos, which='both'): DCNL 'Set the axes position with:: DCNL pos = [left, bottom, width, height] DCNL in relative 0,1 coords, or *pos* can be a DCNL :class:`~matplotlib.transforms.Bbox` DCNL There are two position variables: one which is ultimately DCNL used, but which may be modified by :meth:`apply_aspect`, and a DCNL second which is the starting point for :meth:`apply_aspect`. DCNL Optional keyword arguments: DCNL *which* DCNL value        description DCNL \'active\'     to change the first DCNL \'original\'   to change the second DCNL \'both\'       to change both'
def reset_position(self): DCNL 'Make the original position the active position'
def _set_artist_props(self, a): DCNL 'set the boilerplate props for artists added to axes'
def _gen_axes_patch(self): DCNL 'Returns the patch used to draw the background of the axes.  It DCNL is also used as the clipping path for any data elements on the DCNL axes. DCNL In the standard axes, this is a rectangle, but in other DCNL projections it may not be. DCNL .. note:: DCNL Intended to be overridden by new projection types.'
def cla(self): DCNL 'Clear the current axes'
def clear(self): DCNL 'clear the axes'
def set_color_cycle(self, clist): DCNL 'Set the color cycle for any future plot commands on this Axes. DCNL clist is a list of mpl color specifiers.'
def ishold(self): DCNL 'return the HOLD status of the axes'
def hold(self, b=None): DCNL 'call signature:: DCNL hold(b=None) DCNL Set the hold state.  If *hold* is *None* (default), toggle the DCNL *hold* state.  Else set the *hold* state to boolean value *b*. DCNL Examples: DCNL * toggle hold: DCNL >>> hold() DCNL * turn hold on: DCNL >>> hold(True) DCNL * turn hold off DCNL >>> hold(False) DCNL When hold is True, subsequent plot commands will be added to DCNL the current axes.  When hold is False, the current axes and DCNL figure will be cleared on the next plot command'
def set_aspect(self, aspect, adjustable=None, anchor=None): DCNL '*aspect* DCNL value      description DCNL \'auto\'     automatic; fill position rectangle with data DCNL \'normal\'   same as \'auto\'; deprecated DCNL \'equal\'    same scaling from data to plot units for x and y DCNL num       a circle will be stretched such that the height DCNL is num times the width. aspect=1 is the same as DCNL aspect=\'equal\'. DCNL *adjustable* DCNL value       description DCNL \'box\'       change physical size of axes DCNL \'datalim\'   change xlim or ylim DCNL *anchor* DCNL value   description DCNL \'C\'     centered DCNL \'SW\'    lower left corner DCNL \'S\'     middle of bottom edge DCNL \'SE\'    lower right corner DCNL etc.'
def set_adjustable(self, adjustable): DCNL 'ACCEPTS: [ \'box\' | \'datalim\' ]'
def set_anchor(self, anchor): DCNL '*anchor* DCNL value  description DCNL \'C\'    Center DCNL \'SW\'   bottom left DCNL \'S\'    bottom DCNL \'SE\'   bottom right DCNL \'E\'    right DCNL \'NE\'   top right DCNL \'N\'    top DCNL \'NW\'   top left DCNL \'W\'    left'
def get_data_ratio(self): DCNL 'Returns the aspect ratio of the raw data. DCNL This method is intended to be overridden by new projection DCNL types.'
def apply_aspect(self, position=None): DCNL 'Use :meth:`_aspect` and :meth:`_adjustable` to modify the DCNL axes box or the view limits.'
def axis(self, *v, **kwargs): DCNL 'Convenience method for manipulating the x and y view limits DCNL and the aspect ratio of the plot. DCNL *kwargs* are passed on to :meth:`set_xlim` and DCNL :meth:`set_ylim`'
def get_child_artists(self): DCNL 'Return a list of artists the axes contains. DCNL .. deprecated:: 0.98'
def get_frame(self): DCNL 'Return the axes Rectangle frame'
def get_legend(self): DCNL 'Return the legend.Legend instance, or None if no legend is defined'
def get_images(self): DCNL 'return a list of Axes images contained by the Axes'
def get_lines(self): DCNL 'Return a list of lines contained by the Axes'
def get_xaxis(self): DCNL 'Return the XAxis instance'
def get_xgridlines(self): DCNL 'Get the x grid lines as a list of Line2D instances'
def get_xticklines(self): DCNL 'Get the xtick lines as a list of Line2D instances'
def get_yaxis(self): DCNL 'Return the YAxis instance'
def get_ygridlines(self): DCNL 'Get the y grid lines as a list of Line2D instances'
def get_yticklines(self): DCNL 'Get the ytick lines as a list of Line2D instances'
def has_data(self): DCNL 'Return *True* if any artists have been added to axes. DCNL This should not be used to determine whether the *dataLim* DCNL need to be updated, and may not actually be useful for DCNL anything.'
def add_artist(self, a): DCNL 'Add any :class:`~matplotlib.artist.Artist` to the axes'
def add_collection(self, collection, autolim=True): DCNL 'add a :class:`~matplotlib.collections.Collection` instance DCNL to the axes'
def add_line(self, line): DCNL 'Add a :class:`~matplotlib.lines.Line2D` to the list of plot DCNL lines'
def add_patch(self, p): DCNL 'Add a :class:`~matplotlib.patches.Patch` *p* to the list of DCNL axes patches; the clipbox will be set to the Axes clipping DCNL box.  If the transform is not set, it will be set to DCNL :attr:`transData`.'
def _update_patch_limits(self, patch): DCNL 'update the data limits for patch *p*'
def add_table(self, tab): DCNL 'Add a :class:`~matplotlib.tables.Table` instance to the DCNL list of axes tables'
def relim(self): DCNL 'recompute the data limits based on current artists'
def update_datalim(self, xys, updatex=True, updatey=True): DCNL 'Update the data lim bbox with seq of xy tups or equiv. 2-D array'
def update_datalim_numerix(self, x, y): DCNL 'Update the data lim bbox with seq of xy tups'
def update_datalim_bounds(self, bounds): DCNL 'Update the datalim to include the given DCNL :class:`~matplotlib.transforms.Bbox` *bounds*'
def _process_unit_info(self, xdata=None, ydata=None, kwargs=None): DCNL 'look for unit *kwargs* and update the axis instances as necessary'
def in_axes(self, mouseevent): DCNL 'return *True* if the given *mouseevent* (in display coords) DCNL is in the Axes'
def get_autoscale_on(self): DCNL 'Get whether autoscaling is applied on plot commands'
def set_autoscale_on(self, b): DCNL 'Set whether autoscaling is applied on plot commands DCNL accepts: [ *True* | *False* ]'
def autoscale_view(self, tight=False, scalex=True, scaley=True): DCNL 'autoscale the view limits using the data limits. You can DCNL selectively autoscale only a single axis, eg, the xaxis by DCNL setting *scaley* to *False*.  The autoscaling preserves any DCNL axis direction reversal that has already been done.'
def draw(self, renderer=None, inframe=False): DCNL 'Draw everything (plot lines, axes, labels)'
def draw_artist(self, a): DCNL 'This method can only be used after an initial draw which DCNL caches the renderer.  It is used to efficiently update Axes DCNL data (axis ticks, labels, etc are not updated)'
def redraw_in_frame(self): DCNL 'This method can only be used after an initial draw which DCNL caches the renderer.  It is used to efficiently update Axes DCNL data (axis ticks, labels, etc are not updated)'
def get_frame_on(self): DCNL 'Get whether the axes rectangle patch is drawn'
def set_frame_on(self, b): DCNL 'Set whether the axes rectangle patch is drawn DCNL ACCEPTS: [ *True* | *False* ]'
def get_axisbelow(self): DCNL 'Get whether axis below is true or not'
def set_axisbelow(self, b): DCNL 'Set whether the axis ticks and gridlines are above or below most artists DCNL ACCEPTS: [ *True* | *False* ]'
def grid(self, b=None, **kwargs): DCNL 'call signature:: DCNL grid(self, b=None, **kwargs) DCNL Set the axes grids on or off; *b* is a boolean DCNL If *b* is *None* and ``len(kwargs)==0``, toggle the grid state.  If DCNL *kwargs* are supplied, it is assumed that you want a grid and *b* DCNL is thus set to *True* DCNL *kawrgs* are used to set the grid line properties, eg:: DCNL ax.grid(color=\'r\', linestyle=\'-\', linewidth=2) DCNL Valid :class:`~matplotlib.lines.Line2D` kwargs are DCNL %(Line2D)s'
def ticklabel_format(self, **kwargs): DCNL 'Convenience method for manipulating the ScalarFormatter DCNL used by default for linear axes. DCNL Optional keyword arguments: DCNL Keyword        Description DCNL *style*        [ \'sci\' (or \'scientific\') | \'plain\' ] DCNL plain turns off scientific notation DCNL *scilimits*    (m, n), pair of integers; if *style* DCNL is \'sci\', scientific notation will DCNL be used for numbers outside the range DCNL 10`-m`:sup: to 10`n`:sup:. DCNL Use (0,0) to include all numbers. DCNL *axis*         [ \'x\' | \'y\' | \'both\' ] DCNL Only the major ticks are affected. DCNL If the method is called when the DCNL :class:`~matplotlib.ticker.ScalarFormatter` is not the DCNL :class:`~matplotlib.ticker.Formatter` being used, an DCNL :exc:`AttributeError` will be raised.'
def set_axis_off(self): DCNL 'turn off the axis'
def set_axis_on(self): DCNL 'turn on the axis'
def get_axis_bgcolor(self): DCNL 'Return the axis background color'
def set_axis_bgcolor(self, color): DCNL 'set the axes background color DCNL ACCEPTS: any matplotlib color - see DCNL :func:`~matplotlib.pyplot.colors`'
def invert_xaxis(self): DCNL 'Invert the x-axis.'
def xaxis_inverted(self): DCNL 'Returns True if the x-axis is inverted.'
def get_xbound(self): DCNL 'Returns the x-axis numerical bounds where:: DCNL lowerBound < upperBound'
def set_xbound(self, lower=None, upper=None): DCNL 'Set the lower and upper numerical bounds of the x-axis. DCNL This method will honor axes inversion regardless of parameter order.'
def get_xlim(self): DCNL 'Get the x-axis range [*xmin*, *xmax*]'
def set_xlim(self, xmin=None, xmax=None, emit=True, **kwargs): DCNL 'call signature:: DCNL set_xlim(self, *args, **kwargs) DCNL Set the limits for the xaxis DCNL Returns the current xlimits as a length 2 tuple: [*xmin*, *xmax*] DCNL Examples:: DCNL set_xlim((valmin, valmax)) DCNL set_xlim(valmin, valmax) DCNL set_xlim(xmin=1) # xmax unchanged DCNL set_xlim(xmax=1) # xmin unchanged DCNL Keyword arguments: DCNL *ymin*: scalar DCNL the min of the ylim DCNL *ymax*: scalar DCNL the max of the ylim DCNL *emit*: [ True | False ] DCNL notify observers of lim change DCNL ACCEPTS: len(2) sequence of floats'
def set_xscale(self, value, **kwargs): DCNL 'call signature:: DCNL set_xscale(value) DCNL Set the scaling of the x-axis: %(scale)s DCNL ACCEPTS: [%(scale)s] DCNL Different kwargs are accepted, depending on the scale: DCNL %(scale_docs)s'
def get_xticks(self, minor=False): DCNL 'Return the x ticks as a list of locations'
def set_xticks(self, ticks, minor=False): DCNL 'Set the x ticks with list of *ticks* DCNL ACCEPTS: sequence of floats'
def get_xmajorticklabels(self): DCNL 'Get the xtick labels as a list of Text instances'
def get_xminorticklabels(self): DCNL 'Get the xtick labels as a list of Text instances'
def get_xticklabels(self, minor=False): DCNL 'Get the xtick labels as a list of Text instances'
def set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs): DCNL 'call signature:: DCNL set_xticklabels(labels, fontdict=None, minor=False, **kwargs) DCNL Set the xtick labels with list of strings *labels*. Return a DCNL list of axis text instances. DCNL *kwargs* set the :class:`~matplotlib.text.Text` properties. DCNL Valid properties are DCNL %(Text)s DCNL ACCEPTS: sequence of strings'
def invert_yaxis(self): DCNL 'Invert the y-axis.'
def yaxis_inverted(self): DCNL 'Returns True if the y-axis is inverted.'
def get_ybound(self): DCNL 'Return y-axis numerical bounds in the form of lowerBound < upperBound'
def set_ybound(self, lower=None, upper=None): DCNL 'Set the lower and upper numerical bounds of the y-axis. DCNL This method will honor axes inversion regardless of parameter order.'
def get_ylim(self): DCNL 'Get the y-axis range [*ymin*, *ymax*]'
def set_ylim(self, ymin=None, ymax=None, emit=True, **kwargs): DCNL 'call signature:: DCNL set_ylim(self, *args, **kwargs): DCNL Set the limits for the yaxis; v = [ymin, ymax]:: DCNL set_ylim((valmin, valmax)) DCNL set_ylim(valmin, valmax) DCNL set_ylim(ymin=1) # ymax unchanged DCNL set_ylim(ymax=1) # ymin unchanged DCNL Keyword arguments: DCNL *ymin*: scalar DCNL the min of the ylim DCNL *ymax*: scalar DCNL the max of the ylim DCNL *emit*: [ True | False ] DCNL notify observers of lim change DCNL Returns the current ylimits as a length 2 tuple DCNL ACCEPTS: len(2) sequence of floats'
def set_yscale(self, value, **kwargs): DCNL 'call signature:: DCNL set_yscale(value) DCNL Set the scaling of the y-axis: %(scale)s DCNL ACCEPTS: [%(scale)s] DCNL Different kwargs are accepted, depending on the scale: DCNL %(scale_docs)s'
def get_yticks(self, minor=False): DCNL 'Return the y ticks as a list of locations'
def set_yticks(self, ticks, minor=False): DCNL 'Set the y ticks with list of *ticks* DCNL ACCEPTS: sequence of floats DCNL Keyword arguments: DCNL *minor*: [ False | True ] DCNL Sets the minor ticks if True'
def get_ymajorticklabels(self): DCNL 'Get the xtick labels as a list of Text instances'
def get_yminorticklabels(self): DCNL 'Get the xtick labels as a list of Text instances'
def get_yticklabels(self, minor=False): DCNL 'Get the xtick labels as a list of Text instances'
def set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs): DCNL 'call signature:: DCNL set_yticklabels(labels, fontdict=None, minor=False, **kwargs) DCNL Set the ytick labels with list of strings *labels*.  Return a list of DCNL :class:`~matplotlib.text.Text` instances. DCNL *kwargs* set :class:`~matplotlib.text.Text` properties for the labels. DCNL Valid properties are DCNL %(Text)s DCNL ACCEPTS: sequence of strings'
def xaxis_date(self, tz=None): DCNL 'Sets up x-axis ticks and labels that treat the x data as dates. DCNL *tz* is the time zone to use in labeling dates.  Defaults to rc value.'
def yaxis_date(self, tz=None): DCNL 'Sets up y-axis ticks and labels that treat the y data as dates. DCNL *tz* is the time zone to use in labeling dates.  Defaults to rc value.'
def format_xdata(self, x): DCNL 'Return *x* string formatted.  This function will use the attribute DCNL self.fmt_xdata if it is callable, else will fall back on the xaxis DCNL major formatter'
def format_ydata(self, y): DCNL 'Return y string formatted.  This function will use the DCNL :attr:`fmt_ydata` attribute if it is callable, else will fall DCNL back on the yaxis major formatter'
def format_coord(self, x, y): DCNL 'return a format string formatting the *x*, *y* coord'
def can_zoom(self): DCNL 'Return *True* if this axes support the zoom box'
def get_navigate(self): DCNL 'Get whether the axes responds to navigation commands'
def set_navigate(self, b): DCNL 'Set whether the axes responds to navigation toolbar commands DCNL ACCEPTS: [ True | False ]'
def get_navigate_mode(self): DCNL 'Get the navigation toolbar button status: \'PAN\', \'ZOOM\', or None'
def set_navigate_mode(self, b): DCNL 'Set the navigation toolbar button status; DCNL .. warning:: DCNL this is not a user-API function.'
def start_pan(self, x, y, button): DCNL 'Called when a pan operation has started. DCNL *x*, *y* are the mouse coordinates in display coords. DCNL button is the mouse button number: DCNL * 1: LEFT DCNL * 2: MIDDLE DCNL * 3: RIGHT DCNL .. note:: DCNL Intended to be overridden by new projection types.'
def end_pan(self): DCNL 'Called when a pan operation completes (when the mouse button DCNL is up.) DCNL .. note:: DCNL Intended to be overridden by new projection types.'
def drag_pan(self, button, key, x, y): DCNL 'Called when the mouse moves during a pan operation. DCNL *button* is the mouse button number: DCNL * 1: LEFT DCNL * 2: MIDDLE DCNL * 3: RIGHT DCNL *key* is a "shift" key DCNL *x*, *y* are the mouse coordinates in display coords. DCNL .. note:: DCNL Intended to be overridden by new projection types.'
def get_cursor_props(self): DCNL 'return the cursor propertiess as a (*linewidth*, *color*) DCNL tuple, where *linewidth* is a float and *color* is an RGBA DCNL tuple'
def set_cursor_props(self, *args): DCNL 'Set the cursor property as:: DCNL ax.set_cursor_props(linewidth, color) DCNL or:: DCNL ax.set_cursor_props((linewidth, color)) DCNL ACCEPTS: a (*float*, *color*) tuple'
def connect(self, s, func): DCNL 'Register observers to be notified when certain events occur.  Register DCNL with callback functions with the following signatures.  The function DCNL has the following signature:: DCNL func(ax)  # where ax is the instance making the callback. DCNL The following events can be connected to: DCNL \'xlim_changed\',\'ylim_changed\' DCNL The connection id is is returned - you can use this with DCNL disconnect to disconnect from the axes event'
def disconnect(self, cid): DCNL 'disconnect from the Axes event.'
def get_children(self): DCNL 'return a list of child artists'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occured in the axes. DCNL Returns T/F, {}'
def pick(self, *args): DCNL 'call signature:: DCNL pick(mouseevent) DCNL each child artist will fire a pick event if mouseevent is over DCNL the artist and the artist has picker set'
def __pick(self, x, y, trans=None, among=None): DCNL 'Return the artist under point that is closest to the *x*, *y*. DCNL If *trans* is *None*, *x*, and *y* are in window coords, DCNL (0,0 = lower left).  Otherwise, *trans* is a DCNL :class:`~matplotlib.transforms.Transform` that specifies the DCNL coordinate system of *x*, *y*. DCNL The selection of artists from amongst which the pick function DCNL finds an artist can be narrowed using the optional keyword DCNL argument *among*. If provided, this should be either a sequence DCNL of permitted artists or a function taking an artist as its DCNL argument and returning a true value if and only if that artist DCNL can be selected. DCNL Note this algorithm calculates distance to the vertices of the DCNL polygon, so if you want to pick a patch, click on the edge!'
def get_title(self): DCNL 'Get the title text string.'
def set_title(self, label, fontdict=None, **kwargs): DCNL 'call signature:: DCNL set_title(label, fontdict=None, **kwargs): DCNL Set the title for the axes. DCNL kwargs are Text properties: DCNL %(Text)s DCNL ACCEPTS: str DCNL .. seealso:: DCNL :meth:`text`: DCNL for information on how override and the optional args work'
def get_xlabel(self): DCNL 'Get the xlabel text string.'
def set_xlabel(self, xlabel, fontdict=None, **kwargs): DCNL 'call signature:: DCNL set_xlabel(xlabel, fontdict=None, **kwargs) DCNL Set the label for the xaxis. DCNL Valid kwargs are Text properties: DCNL %(Text)s DCNL ACCEPTS: str DCNL .. seealso:: DCNL :meth:`text`: DCNL for information on how override and the optional args work'
def get_ylabel(self): DCNL 'Get the ylabel text string.'
def set_ylabel(self, ylabel, fontdict=None, **kwargs): DCNL 'call signature:: DCNL set_ylabel(ylabel, fontdict=None, **kwargs) DCNL Set the label for the yaxis DCNL Valid kwargs are Text properties: DCNL %(Text)s DCNL ACCEPTS: str DCNL .. seealso:: DCNL :meth:`text`: DCNL for information on how override and the optional args work'
def text(self, x, y, s, fontdict=None, withdash=False, **kwargs): DCNL 'call signature:: DCNL text(x, y, s, fontdict=None, **kwargs) DCNL Add text in string *s* to axis at location *x*, *y*, data DCNL coordinates. DCNL Keyword arguments: DCNL *fontdict*: DCNL A dictionary to override the default text properties. DCNL If *fontdict* is *None*, the defaults are determined by your rc DCNL parameters. DCNL *withdash*: [ False | True ] DCNL Creates a :class:`~matplotlib.text.TextWithDash` instance DCNL instead of a :class:`~matplotlib.text.Text` instance. DCNL Individual keyword arguments can be used to override any given DCNL parameter:: DCNL text(x, y, s, fontsize=12) DCNL The default transform specifies that text is in data coords, DCNL alternatively, you can specify text in axis coords (0,0 is DCNL lower-left and 1,1 is upper-right).  The example below places DCNL text in the center of the axes:: DCNL text(0.5, 0.5,\'matplotlib\', DCNL horizontalalignment=\'center\', DCNL verticalalignment=\'center\', DCNL transform = ax.transAxes) DCNL You can put a rectangular box around the text instance (eg. to DCNL set a background color) by using the keyword *bbox*.  *bbox* is DCNL a dictionary of :class:`matplotlib.patches.Rectangle` DCNL properties.  For example:: DCNL text(x, y, s, bbox=dict(facecolor=\'red\', alpha=0.5)) DCNL Valid kwargs are :class:`matplotlib.text.Text` properties: DCNL %(Text)s'
def annotate(self, *args, **kwargs): DCNL 'call signature:: DCNL annotate(s, xy, xytext=None, xycoords=\'data\', DCNL textcoords=\'data\', arrowprops=None, **kwargs) DCNL Keyword arguments: DCNL %(Annotation)s DCNL .. plot:: mpl_examples/pylab_examples/annotation_demo2.py'
def axhline(self, y=0, xmin=0, xmax=1, **kwargs): DCNL 'call signature:: DCNL axhline(y=0, xmin=0, xmax=1, **kwargs) DCNL Axis Horizontal Line DCNL Draw a horizontal line at *y* from *xmin* to *xmax*.  With the DCNL default values of *xmin* = 0 and *xmax* = 1, this line will DCNL always span the horizontal extent of the axes, regardless of DCNL the xlim settings, even if you change them, eg. with the DCNL :meth:`set_xlim` command.  That is, the horizontal extent is DCNL in axes coords: 0=left, 0.5=middle, 1.0=right but the *y* DCNL location is in data coordinates. DCNL Return value is the :class:`~matplotlib.lines.Line2D` DCNL instance.  kwargs are the same as kwargs to plot, and can be DCNL used to control the line properties.  Eg., DCNL * draw a thick red hline at *y* = 0 that spans the xrange DCNL >>> axhline(linewidth=4, color=\'r\') DCNL * draw a default hline at *y* = 1 that spans the xrange DCNL >>> axhline(y=1) DCNL * draw a default hline at *y* = .5 that spans the the middle half of DCNL the xrange DCNL >>> axhline(y=.5, xmin=0.25, xmax=0.75) DCNL Valid kwargs are :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL .. seealso:: DCNL :meth:`axhspan`: DCNL for example plot and source code'
def axvline(self, x=0, ymin=0, ymax=1, **kwargs): DCNL 'call signature:: DCNL axvline(x=0, ymin=0, ymax=1, **kwargs) DCNL Axis Vertical Line DCNL Draw a vertical line at *x* from *ymin* to *ymax*.  With the DCNL default values of *ymin* = 0 and *ymax* = 1, this line will DCNL always span the vertical extent of the axes, regardless of the DCNL xlim settings, even if you change them, eg. with the DCNL :meth:`set_xlim` command.  That is, the vertical extent is in DCNL axes coords: 0=bottom, 0.5=middle, 1.0=top but the *x* location DCNL is in data coordinates. DCNL Return value is the :class:`~matplotlib.lines.Line2D` DCNL instance.  kwargs are the same as kwargs to plot, and can be DCNL used to control the line properties.  Eg., DCNL * draw a thick red vline at *x* = 0 that spans the yrange DCNL >>> axvline(linewidth=4, color=\'r\') DCNL * draw a default vline at *x* = 1 that spans the yrange DCNL >>> axvline(x=1) DCNL * draw a default vline at *x* = .5 that spans the the middle half of DCNL the yrange DCNL >>> axvline(x=.5, ymin=0.25, ymax=0.75) DCNL Valid kwargs are :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL .. seealso:: DCNL :meth:`axhspan`: DCNL for example plot and source code'
def axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs): DCNL 'call signature:: DCNL axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs) DCNL Axis Horizontal Span. DCNL *y* coords are in data units and *x* coords are in axes (relative DCNL 0-1) units. DCNL Draw a horizontal span (rectangle) from *ymin* to *ymax*. DCNL With the default values of *xmin* = 0 and *xmax* = 1, this DCNL always spans the xrange, regardless of the xlim settings, even DCNL if you change them, eg. with the :meth:`set_xlim` command. DCNL That is, the horizontal extent is in axes coords: 0=left, DCNL 0.5=middle, 1.0=right but the *y* location is in data DCNL coordinates. DCNL Return value is a :class:`matplotlib.patches.Polygon` DCNL instance. DCNL Examples: DCNL * draw a gray rectangle from *y* = 0.25-0.75 that spans the DCNL horizontal extent of the axes DCNL >>> axhspan(0.25, 0.75, facecolor=\'0.5\', alpha=0.5) DCNL Valid kwargs are :class:`~matplotlib.patches.Polygon` properties: DCNL %(Polygon)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/axhspan_demo.py'
def axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs): DCNL 'call signature:: DCNL axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs) DCNL Axis Vertical Span. DCNL *x* coords are in data units and *y* coords are in axes (relative DCNL 0-1) units. DCNL Draw a vertical span (rectangle) from *xmin* to *xmax*.  With DCNL the default values of *ymin* = 0 and *ymax* = 1, this always DCNL spans the yrange, regardless of the ylim settings, even if you DCNL change them, eg. with the :meth:`set_ylim` command.  That is, DCNL the vertical extent is in axes coords: 0=bottom, 0.5=middle, DCNL 1.0=top but the *y* location is in data coordinates. DCNL Return value is the :class:`matplotlib.patches.Polygon` DCNL instance. DCNL Examples: DCNL * draw a vertical green translucent rectangle from x=1.25 to 1.55 that DCNL spans the yrange of the axes DCNL >>> axvspan(1.25, 1.55, facecolor=\'g\', alpha=0.5) DCNL Valid kwargs are :class:`~matplotlib.patches.Polygon` DCNL properties: DCNL %(Polygon)s DCNL .. seealso:: DCNL :meth:`axhspan`: DCNL for example plot and source code'
def hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs): DCNL 'call signature:: DCNL hlines(y, xmin, xmax, colors=\'k\', linestyles=\'solid\', **kwargs) DCNL Plot horizontal lines at each *y* from *xmin* to *xmax*. DCNL Returns the :class:`~matplotlib.collections.LineCollection` DCNL that was added. DCNL Required arguments: DCNL *y*: DCNL a 1-D numpy array or iterable. DCNL *xmin* and *xmax*: DCNL can be scalars or ``len(x)`` numpy arrays.  If they are DCNL scalars, then the respective values are constant, else the DCNL widths of the lines are determined by *xmin* and *xmax*. DCNL Optional keyword arguments: DCNL *colors*: DCNL a line collections color argument, either a single color DCNL or a ``len(y)`` list of colors DCNL *linestyles*: DCNL [ \'solid\' | \'dashed\' | \'dashdot\' | \'dotted\' ] DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/hline_demo.py'
def vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs): DCNL 'call signature:: DCNL vlines(x, ymin, ymax, color=\'k\', linestyles=\'solid\') DCNL Plot vertical lines at each *x* from *ymin* to *ymax*.  *ymin* DCNL or *ymax* can be scalars or len(*x*) numpy arrays.  If they are DCNL scalars, then the respective values are constant, else the DCNL heights of the lines are determined by *ymin* and *ymax*. DCNL *colors* DCNL a line collections color args, either a single color DCNL or a len(*x*) list of colors DCNL *linestyles* DCNL one of [ \'solid\' | \'dashed\' | \'dashdot\' | \'dotted\' ] DCNL Returns the :class:`matplotlib.collections.LineCollection` DCNL that was added. DCNL kwargs are :class:`~matplotlib.collections.LineCollection` properties: DCNL %(LineCollection)s'
def plot(self, *args, **kwargs): DCNL 'Plot lines and/or markers to the DCNL :class:`~matplotlib.axes.Axes`.  *args* is a variable length DCNL argument, allowing for multiple *x*, *y* pairs with an DCNL optional format string.  For example, each of the following is DCNL legal:: DCNL plot(x, y)         # plot x and y using default line style and color DCNL plot(x, y, \'bo\')   # plot x and y using blue circle markers DCNL plot(y)            # plot y using x as index array 0..N-1 DCNL plot(y, \'r+\')      # ditto, but with red plusses DCNL If *x* and/or *y* is 2-dimensional, then the corresponding columns DCNL will be plotted. DCNL An arbitrary number of *x*, *y*, *fmt* groups can be DCNL specified, as in:: DCNL a.plot(x1, y1, \'g^\', x2, y2, \'g-\') DCNL Return value is a list of lines that were added. DCNL The following format string characters are accepted to control DCNL the line style or marker: DCNL character           description DCNL \'-\'                 solid line style DCNL \'--\'                dashed line style DCNL \'-.\'                dash-dot line style DCNL \':\'                 dotted line style DCNL \'.\'                 point marker DCNL \',\'                 pixel marker DCNL \'o\'                 circle marker DCNL \'v\'                 triangle_down marker DCNL \'^\'                 triangle_up marker DCNL \'<\'                 triangle_left marker DCNL \'>\'                 triangle_right marker DCNL \'1\'                 tri_down marker DCNL \'2\'                 tri_up marker DCNL \'3\'                 tri_left marker DCNL \'4\'                 tri_right marker DCNL \'s\'                 square marker DCNL \'p\'                 pentagon marker DCNL \'*\'                 star marker DCNL \'h\'                 hexagon1 marker DCNL \'H\'                 hexagon2 marker DCNL \'+\'                 plus marker DCNL \'x\'                 x marker DCNL \'D\'                 diamond marker DCNL \'d\'                 thin_diamond marker DCNL \'|\'                 vline marker DCNL \'_\'                 hline marker DCNL The following color abbreviations are supported: DCNL character   color DCNL \'b\'         blue DCNL \'g\'         green DCNL \'r\'         red DCNL \'c\'         cyan DCNL \'m\'         magenta DCNL \'y\'         yellow DCNL \'k\'         black DCNL \'w\'         white DCNL In addition, you can specify colors in many weird and DCNL wonderful ways, including full names (``\'green\'``), hex DCNL strings (``\'#008000\'``), RGB or RGBA tuples (``(0,1,0,1)``) or DCNL grayscale intensities as a string (``\'0.8\'``).  Of these, the DCNL string specifications can be used in place of a ``fmt`` group, DCNL but the tuple forms can be used only as ``kwargs``. DCNL Line styles and colors are combined in a single format string, as in DCNL ``\'bo\'`` for blue circles. DCNL The *kwargs* can be used to set line properties (any property that has DCNL a ``set_*`` method).  You can use this to set a line label (for auto DCNL legends), linewidth, anitialising, marker face color, etc.  Here is an DCNL example:: DCNL plot([1,2,3], [1,2,3], \'go-\', label=\'line 1\', linewidth=2) DCNL plot([1,2,3], [1,4,9], \'rs\',  label=\'line 2\') DCNL axis([0, 4, 0, 10]) DCNL legend() DCNL If you make multiple lines with one plot command, the kwargs DCNL apply to all those lines, e.g.:: DCNL plot(x1, y1, x2, y2, antialised=False) DCNL Neither line will be antialiased. DCNL You do not need to use format strings, which are just DCNL abbreviations.  All of the line properties can be controlled DCNL by keyword arguments.  For example, you can set the color, DCNL marker, linestyle, and markercolor with:: DCNL plot(x, y, color=\'green\', linestyle=\'dashed\', marker=\'o\', DCNL markerfacecolor=\'blue\', markersize=12).  See DCNL :class:`~matplotlib.lines.Line2D` for details. DCNL The kwargs are :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL kwargs *scalex* and *scaley*, if defined, are passed on to DCNL :meth:`~matplotlib.axes.Axes.autoscale_view` to determine DCNL whether the *x* and *y* axes are autoscaled; the default is DCNL *True*.'
def plot_date(self, x, y, fmt='bo', tz=None, xdate=True, ydate=False, **kwargs): DCNL 'call signature:: DCNL plot_date(x, y, fmt=\'bo\', tz=None, xdate=True, ydate=False, **kwargs) DCNL Similar to the :func:`~matplotlib.pyplot.plot` command, except DCNL the *x* or *y* (or both) data is considered to be dates, and the DCNL axis is labeled accordingly. DCNL *x* and/or *y* can be a sequence of dates represented as float DCNL days since 0001-01-01 UTC. DCNL Keyword arguments: DCNL *fmt*: string DCNL The plot format string. DCNL *tz*: [ None | timezone string ] DCNL The time zone to use in labeling dates. If *None*, defaults to rc DCNL value. DCNL *xdate*: [ True | False ] DCNL If *True*, the *x*-axis will be labeled with dates. DCNL *ydate*: [ False | True ] DCNL If *True*, the *y*-axis will be labeled with dates. DCNL Note if you are using custom date tickers and formatters, it DCNL may be necessary to set the formatters/locators after the call DCNL to :meth:`plot_date` since :meth:`plot_date` will set the DCNL default tick locator to DCNL :class:`matplotlib.ticker.AutoDateLocator` (if the tick DCNL locator is not already set to a DCNL :class:`matplotlib.ticker.DateLocator` instance) and the DCNL default tick formatter to DCNL :class:`matplotlib.ticker.AutoDateFormatter` (if the tick DCNL formatter is not already set to a DCNL :class:`matplotlib.ticker.DateFormatter` instance). DCNL Valid kwargs are :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL .. seealso:: DCNL :mod:`~matplotlib.dates`: DCNL for helper functions DCNL :func:`~matplotlib.dates.date2num`, DCNL :func:`~matplotlib.dates.num2date` and DCNL :func:`~matplotlib.dates.drange`: DCNL for help on creating the required floating point DCNL dates.'
def loglog(self, *args, **kwargs): DCNL 'call signature:: DCNL loglog(*args, **kwargs) DCNL Make a plot with log scaling on the *x* and *y* axis. DCNL :func:`~matplotlib.pyplot.loglog` supports all the keyword DCNL arguments of :func:`~matplotlib.pyplot.plot` and DCNL :meth:`matplotlib.axes.Axes.set_xscale` / DCNL :meth:`matplotlib.axes.Axes.set_yscale`. DCNL Notable keyword arguments: DCNL *basex*/*basey*: scalar > 1 DCNL base of the *x*/*y* logarithm DCNL *subsx*/*subsy*: [ None | sequence ] DCNL the location of the minor *x*/*y* ticks; *None* defaults DCNL to autosubs, which depend on the number of decades in the DCNL plot; see :meth:`matplotlib.axes.Axes.set_xscale` / DCNL :meth:`matplotlib.axes.Axes.set_yscale` for details DCNL The remaining valid kwargs are DCNL :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/log_demo.py'
def semilogx(self, *args, **kwargs): DCNL 'call signature:: DCNL semilogx(*args, **kwargs) DCNL Make a plot with log scaling on the *x* axis. DCNL :func:`semilogx` supports all the keyword arguments of DCNL :func:`~matplotlib.pyplot.plot` and DCNL :meth:`matplotlib.axes.Axes.set_xscale`. DCNL Notable keyword arguments: DCNL *basex*: scalar > 1 DCNL base of the *x* logarithm DCNL *subsx*: [ None | sequence ] DCNL The location of the minor xticks; *None* defaults to DCNL autosubs, which depend on the number of decades in the DCNL plot; see :meth:`~matplotlib.axes.Axes.set_xscale` for DCNL details. DCNL The remaining valid kwargs are DCNL :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL .. seealso:: DCNL :meth:`loglog`: DCNL For example code and figure'
def semilogy(self, *args, **kwargs): DCNL 'call signature:: DCNL semilogy(*args, **kwargs) DCNL Make a plot with log scaling on the *y* axis. DCNL :func:`semilogy` supports all the keyword arguments of DCNL :func:`~matplotlib.pylab.plot` and DCNL :meth:`matplotlib.axes.Axes.set_yscale`. DCNL Notable keyword arguments: DCNL *basey*: scalar > 1 DCNL Base of the *y* logarithm DCNL *subsy*: [ None | sequence ] DCNL The location of the minor yticks; *None* defaults to DCNL autosubs, which depend on the number of decades in the DCNL plot; see :meth:`~matplotlib.axes.Axes.set_yscale` for DCNL details. DCNL The remaining valid kwargs are DCNL :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL .. seealso:: DCNL :meth:`loglog`: DCNL For example code and figure'
def acorr(self, x, **kwargs): DCNL 'call signature:: DCNL acorr(x, normed=False, detrend=mlab.detrend_none, usevlines=False, DCNL maxlags=None, **kwargs) DCNL Plot the autocorrelation of *x*.  If *normed* = *True*, DCNL normalize the data by the autocorrelation at 0-th lag.  *x* is DCNL detrended by the *detrend* callable (default no normalization). DCNL Data are plotted as ``plot(lags, c, **kwargs)`` DCNL Return value is a tuple (*lags*, *c*, *line*) where: DCNL - *lags* are a length 2*maxlags+1 lag vector DCNL - *c* is the 2*maxlags+1 auto correlation vector DCNL - *line* is a :class:`~matplotlib.lines.Line2D` instance DCNL returned by :meth:`plot` DCNL The default *linestyle* is None and the default *marker* is DCNL ``\'o\'``, though these can be overridden with keyword args. DCNL The cross correlation is performed with DCNL :func:`numpy.correlate` with *mode* = 2. DCNL If *usevlines* is *True*, :meth:`~matplotlib.axes.Axes.vlines` DCNL rather than :meth:`~matplotlib.axes.Axes.plot` is used to draw DCNL vertical lines from the origin to the acorr.  Otherwise, the DCNL plot style is determined by the kwargs, which are DCNL :class:`~matplotlib.lines.Line2D` properties. DCNL *maxlags* is a positive integer detailing the number of lags DCNL to show.  The default value of *None* will return all DCNL :math:`2 \mathrm{len}(x) - 1` lags. DCNL The return value is a tuple (*lags*, *c*, *linecol*, *b*) DCNL where DCNL - *linecol* is the DCNL :class:`~matplotlib.collections.LineCollection` DCNL - *b* is the *x*-axis. DCNL .. seealso:: DCNL :meth:`~matplotlib.axes.Axes.plot` or DCNL :meth:`~matplotlib.axes.Axes.vlines`: For documentation on DCNL valid kwargs. DCNL **Example:** DCNL :func:`~matplotlib.pyplot.xcorr` above, and DCNL :func:`~matplotlib.pyplot.acorr` below. DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/xcorr_demo.py'
def xcorr(self, x, y, normed=False, detrend=mlab.detrend_none, usevlines=False, maxlags=None, **kwargs): DCNL 'call signature:: DCNL xcorr(x, y, normed=False, detrend=mlab.detrend_none, DCNL usevlines=False, **kwargs): DCNL Plot the cross correlation between *x* and *y*.  If *normed* = DCNL *True*, normalize the data by the cross correlation at 0-th DCNL lag.  *x* and y are detrended by the *detrend* callable DCNL (default no normalization).  *x* and *y* must be equal length. DCNL Data are plotted as ``plot(lags, c, **kwargs)`` DCNL Return value is a tuple (*lags*, *c*, *line*) where: DCNL - *lags* are a length ``2*maxlags+1`` lag vector DCNL - *c* is the ``2*maxlags+1`` auto correlation vector DCNL - *line* is a :class:`~matplotlib.lines.Line2D` instance DCNL returned by :func:`~matplotlib.pyplot.plot`. DCNL The default *linestyle* is *None* and the default *marker* is DCNL \'o\', though these can be overridden with keyword args.  The DCNL cross correlation is performed with :func:`numpy.correlate` DCNL with *mode* = 2. DCNL If *usevlines* is *True*: DCNL :func:`~matplotlib.pyplot.vlines` DCNL rather than :func:`~matplotlib.pyplot.plot` is used to draw DCNL vertical lines from the origin to the xcorr.  Otherwise the DCNL plotstyle is determined by the kwargs, which are DCNL :class:`~matplotlib.lines.Line2D` properties. DCNL The return value is a tuple (*lags*, *c*, *linecol*, *b*) DCNL where *linecol* is the DCNL :class:`matplotlib.collections.LineCollection` instance and DCNL *b* is the *x*-axis. DCNL *maxlags* is a positive integer detailing the number of lags to show. DCNL The default value of *None* will return all ``(2*len(x)-1)`` lags. DCNL **Example:** DCNL :func:`~matplotlib.pyplot.xcorr` above, and DCNL :func:`~matplotlib.pyplot.acorr` below. DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/xcorr_demo.py'
def legend(self, *args, **kwargs): DCNL 'call signature:: DCNL legend(*args, **kwargs) DCNL Place a legend on the current axes at location *loc*.  Labels are a DCNL sequence of strings and *loc* can be a string or an integer specifying DCNL the legend location. DCNL To make a legend with existing lines:: DCNL legend() DCNL :meth:`legend` by itself will try and build a legend using the label DCNL property of the lines/patches/collections.  You can set the label of DCNL a line by doing:: DCNL plot(x, y, label=\'my data\') DCNL or:: DCNL line.set_label(\'my data\'). DCNL If label is set to \'_nolegend_\', the item will not be shown in DCNL legend. DCNL To automatically generate the legend from labels:: DCNL legend( (\'label1\', \'label2\', \'label3\') ) DCNL To make a legend for a list of lines and labels:: DCNL legend( (line1, line2, line3), (\'label1\', \'label2\', \'label3\') ) DCNL To make a legend at a given location, using a location argument:: DCNL legend( (\'label1\', \'label2\', \'label3\'), loc=\'upper left\') DCNL or:: DCNL legend( (line1, line2, line3),  (\'label1\', \'label2\', \'label3\'), loc=2) DCNL The location codes are DCNL Location String   Location Code DCNL \'best\'            0 DCNL \'upper right\'     1 DCNL \'upper left\'      2 DCNL \'lower left\'      3 DCNL \'lower right\'     4 DCNL \'right\'           5 DCNL \'center left\'     6 DCNL \'center right\'    7 DCNL \'lower center\'    8 DCNL \'upper center\'    9 DCNL \'center\'          10 DCNL If none of these are locations are suitable, loc can be a 2-tuple DCNL giving x,y in axes coords, ie:: DCNL loc = 0, 1 # left top DCNL loc = 0.5, 0.5 # center DCNL Keyword arguments: DCNL *isaxes*: [ True | False ] DCNL Indicates that this is an axes legend DCNL *numpoints*: integer DCNL The number of points in the legend line, default is 4 DCNL *prop*: [ None | FontProperties ] DCNL A :class:`matplotlib.font_manager.FontProperties` DCNL instance, or *None* to use rc settings. DCNL *pad*: [ None | scalar ] DCNL The fractional whitespace inside the legend border, between 0 and 1. DCNL If *None*, use rc settings. DCNL *markerscale*: [ None | scalar ] DCNL The relative size of legend markers vs. original. If *None*, use rc DCNL settings. DCNL *shadow*: [ None | False | True ] DCNL If *True*, draw a shadow behind legend. If *None*, use rc settings. DCNL *labelsep*: [ None | scalar ] DCNL The vertical space between the legend entries. If *None*, use rc DCNL settings. DCNL *handlelen*: [ None | scalar ] DCNL The length of the legend lines. If *None*, use rc settings. DCNL *handletextsep*: [ None | scalar ] DCNL The space between the legend line and legend text. If *None*, use rc DCNL settings. DCNL *axespad*: [ None | scalar ] DCNL The border between the axes and legend edge. If *None*, use rc DCNL settings. DCNL **Example:** DCNL .. plot:: mpl_examples/api/legend_demo.py'
def step(self, x, y, *args, **kwargs): DCNL 'call signature:: DCNL step(x, y, *args, **kwargs) DCNL Make a step plot. Additional keyword args to :func:`step` are the same DCNL as those for :func:`~matplotlib.pyplot.plot`. DCNL *x* and *y* must be 1-D sequences, and it is assumed, but not checked, DCNL that *x* is uniformly increasing. DCNL Keyword arguments: DCNL *where*: [ \'pre\' | \'post\' | \'mid\'  ] DCNL If \'pre\', the interval from x[i] to x[i+1] has level y[i] DCNL If \'post\', that interval has level y[i+1] DCNL If \'mid\', the jumps in *y* occur half-way between the DCNL *x*-values.'
def bar(self, left, height, width=0.8, bottom=None, color=None, edgecolor=None, linewidth=None, yerr=None, xerr=None, ecolor=None, capsize=3, align='edge', orientation='vertical', log=False, **kwargs): DCNL 'call signature:: DCNL bar(left, height, width=0.8, bottom=0, DCNL color=None, edgecolor=None, linewidth=None, DCNL yerr=None, xerr=None, ecolor=None, capsize=3, DCNL align=\'edge\', orientation=\'vertical\', log=False) DCNL Make a bar plot with rectangles bounded by: DCNL *left*, *left* + *width*, *bottom*, *bottom* + *height* DCNL (left, right, bottom and top edges) DCNL *left*, *height*, *width*, and *bottom* can be either scalars DCNL or sequences DCNL Return value is a list of DCNL :class:`matplotlib.patches.Rectangle` instances. DCNL Required arguments: DCNL Argument   Description DCNL *left*     the x coordinates of the left sides of the bars DCNL *height*   the heights of the bars DCNL Optional keyword arguments: DCNL Keyword           Description DCNL *width*           the widths of the bars DCNL *bottom*          the y coordinates of the bottom edges of DCNL the bars DCNL *color*           the colors of the bars DCNL *edgecolor*       the colors of the bar edges DCNL *linewidth*       width of bar edges; None means use default DCNL linewidth; 0 means don\'t draw edges. DCNL *xerr*            if not None, will be used to generate DCNL errorbars on the bar chart DCNL *yerr*            if not None, will be used to generate DCNL errorbars on the bar chart DCNL *ecolor*          specifies the color of any errorbar DCNL *capsize*         (default 3) determines the length in DCNL points of the error bar caps DCNL *align*           \'edge\' (default) | \'center\' DCNL *orientation*     \'vertical\' | \'horizontal\' DCNL *log*             [False|True] False (default) leaves the DCNL orientation axis as-is; True sets it to DCNL log scale DCNL For vertical bars, *align* = \'edge\' aligns bars by their left DCNL edges in left, while *align* = \'center\' interprets these DCNL values as the *x* coordinates of the bar centers. For DCNL horizontal bars, *align* = \'edge\' aligns bars by their bottom DCNL edges in bottom, while *align* = \'center\' interprets these DCNL values as the *y* coordinates of the bar centers. DCNL The optional arguments *color*, *edgecolor*, *linewidth*, DCNL *xerr*, and *yerr* can be either scalars or sequences of DCNL length equal to the number of bars.  This enables you to use DCNL bar as the basis for stacked bar charts, or candlestick plots. DCNL Other optional kwargs: DCNL %(Rectangle)s DCNL **Example:** A stacked bar chart. DCNL .. plot:: mpl_examples/pylab_examples/bar_stacked.py'
def barh(self, bottom, width, height=0.8, left=None, **kwargs): DCNL 'call signature:: DCNL barh(bottom, width, height=0.8, left=0, **kwargs) DCNL Make a horizontal bar plot with rectangles bounded by: DCNL *left*, *left* + *width*, *bottom*, *bottom* + *height* DCNL (left, right, bottom and top edges) DCNL *bottom*, *width*, *height*, and *left* can be either scalars DCNL or sequences DCNL Return value is a list of DCNL :class:`matplotlib.patches.Rectangle` instances. DCNL Required arguments: DCNL Argument   Description DCNL *bottom*   the vertical positions of the bottom edges of the bars DCNL *width*    the lengths of the bars DCNL Optional keyword arguments: DCNL Keyword           Description DCNL *height*          the heights (thicknesses) of the bars DCNL *left*            the x coordinates of the left edges of the DCNL bars DCNL *color*           the colors of the bars DCNL *edgecolor*       the colors of the bar edges DCNL *linewidth*       width of bar edges; None means use default DCNL linewidth; 0 means don\'t draw edges. DCNL *xerr*            if not None, will be used to generate DCNL errorbars on the bar chart DCNL *yerr*            if not None, will be used to generate DCNL errorbars on the bar chart DCNL *ecolor*          specifies the color of any errorbar DCNL *capsize*         (default 3) determines the length in DCNL points of the error bar caps DCNL *align*           \'edge\' (default) | \'center\' DCNL *log*             [False|True] False (default) leaves the DCNL horizontal axis as-is; True sets it to log DCNL scale DCNL Setting *align* = \'edge\' aligns bars by their bottom edges in DCNL bottom, while *align* = \'center\' interprets these values as DCNL the *y* coordinates of the bar centers. DCNL The optional arguments *color*, *edgecolor*, *linewidth*, DCNL *xerr*, and *yerr* can be either scalars or sequences of DCNL length equal to the number of bars.  This enables you to use DCNL barh as the basis for stacked bar charts, or candlestick DCNL plots. DCNL other optional kwargs: DCNL %(Rectangle)s'
def broken_barh(self, xranges, yrange, **kwargs): DCNL 'call signature:: DCNL broken_barh(self, xranges, yrange, **kwargs) DCNL A collection of horizontal bars spanning *yrange* with a sequence of DCNL *xranges*. DCNL Required arguments: DCNL Argument    Description DCNL *xranges*   sequence of (*xmin*, *xwidth*) DCNL *yrange*    sequence of (*ymin*, *ywidth*) DCNL kwargs are DCNL :class:`matplotlib.collections.BrokenBarHCollection` DCNL properties: DCNL %(BrokenBarHCollection)s DCNL these can either be a single argument, ie:: DCNL facecolors = \'black\' DCNL or a sequence of arguments for the various bars, ie:: DCNL facecolors = (\'black\', \'red\', \'green\') DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/broken_barh.py'
def stem(self, x, y, linefmt='b-', markerfmt='bo', basefmt='r-'): DCNL 'call signature:: DCNL stem(x, y, linefmt=\'b-\', markerfmt=\'bo\', basefmt=\'r-\') DCNL A stem plot plots vertical lines (using *linefmt*) at each *x* DCNL location from the baseline to *y*, and places a marker there DCNL using *markerfmt*.  A horizontal line at 0 is is plotted using DCNL *basefmt*. DCNL Return value is a tuple (*markerline*, *stemlines*, DCNL *baseline*). DCNL .. seealso:: DCNL `this document`__ for details DCNL :file:`examples/pylab_examples/stem_plot.py`: DCNL for a demo DCNL __ http://www.mathworks.com/access/helpdesk/help/techdoc/ref/stem.html'
def pie(self, x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1): DCNL 'call signature:: DCNL pie(x, explode=None, labels=None, DCNL colors=(\'b\', \'g\', \'r\', \'c\', \'m\', \'y\', \'k\', \'w\'), DCNL autopct=None, pctdistance=0.6, labeldistance=1.1, shadow=False) DCNL Make a pie chart of array *x*.  The fractional area of each DCNL wedge is given by x/sum(x).  If sum(x) <= 1, then the values DCNL of x give the fractional area directly and the array will not DCNL be normalized. DCNL Keyword arguments: DCNL *explode*: [ None | len(x) sequence ] DCNL If not *None*, is a len(*x*) array which specifies the DCNL fraction of the radius with which to offset each wedge. DCNL *colors*: [ None | color sequence ] DCNL A sequence of matplotlib color args through which the pie chart DCNL will cycle. DCNL *labels*: [ None | len(x) sequence of strings ] DCNL A sequence of strings providing the labels for each wedge DCNL *autopct*: [ None | format string | format function ] DCNL If not *None*, is a string or function used to label the DCNL wedges with their numeric value.  The label will be placed inside DCNL the wedge.  If it is a format string, the label will be ``fmt%pct``. DCNL If it is a function, it will be called. DCNL *pctdistance*: scalar DCNL The ratio between the center of each pie slice and the DCNL start of the text generated by *autopct*.  Ignored if DCNL *autopct* is *None*; default is 0.6. DCNL *labeldistance*: scalar DCNL The radial distance at which the pie labels are drawn DCNL *shadow*: [ False | True ] DCNL Draw a shadow beneath the pie. DCNL The pie chart will probably look best if the figure and axes are DCNL square.  Eg.:: DCNL figure(figsize=(8,8)) DCNL ax = axes([0.1, 0.1, 0.8, 0.8]) DCNL Return value: DCNL If *autopct* is None, return the tuple (*patches*, *texts*): DCNL - *patches* is a sequence of DCNL :class:`matplotlib.patches.Wedge` instances DCNL - *texts* is a list of the label DCNL :class:`matplotlib.text.Text` instances. DCNL If *autopct* is not *None*, return the tuple (*patches*, DCNL *texts*, *autotexts*), where *patches* and *texts* are as DCNL above, and *autotexts* is a list of DCNL :class:`~matplotlib.text.Text` instances for the numeric DCNL labels.'
def errorbar(self, x, y, yerr=None, xerr=None, fmt='-', ecolor=None, elinewidth=None, capsize=3, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, **kwargs): DCNL 'call signature:: DCNL errorbar(x, y, yerr=None, xerr=None, DCNL fmt=\'-\', ecolor=None, elinewidth=None, capsize=3, DCNL barsabove=False, lolims=False, uplims=False, DCNL xlolims=False, xuplims=False) DCNL Plot *x* versus *y* with error deltas in *yerr* and *xerr*. DCNL Vertical errorbars are plotted if *yerr* is not *None*. DCNL Horizontal errorbars are plotted if *xerr* is not *None*. DCNL *x*, *y*, *xerr*, and *yerr* can all be scalars, which plots a DCNL single error bar at *x*, *y*. DCNL Optional keyword arguments: DCNL *xerr*/*yerr*: [ scalar | N, Nx1, Nx2 array-like ] DCNL If a scalar number, len(N) array-like object, or an Nx1 array-like DCNL object, errorbars are drawn +/- value. DCNL If a rank-1, Nx2 Numpy array, errorbars are drawn at -column1 and DCNL +column2 DCNL *fmt*: \'-\' DCNL The plot format symbol for *y*. If *fmt* is *None*, just plot the DCNL errorbars with no line symbols.  This can be useful for creating a DCNL bar plot with errorbars. DCNL *ecolor*: [ None | mpl color ] DCNL a matplotlib color arg which gives the color the errorbar lines; if DCNL *None*, use the marker color. DCNL *elinewidth*: scalar DCNL the linewidth of the errorbar lines. If *None*, use the linewidth. DCNL *capsize*: scalar DCNL the size of the error bar caps in points DCNL *barsabove*: [ True | False ] DCNL if *True*, will plot the errorbars above the plot DCNL symbols. Default is below. DCNL *lolims*/*uplims*/*xlolims*/*xuplims*: [ False | True ] DCNL These arguments can be used to indicate that a value gives DCNL only upper/lower limits. In that case a caret symbol is DCNL used to indicate this. lims-arguments may be of the same DCNL type as *xerr* and *yerr*. DCNL All other keyword arguments are passed on to the plot command for the DCNL markers, so you can add additional key=value pairs to control the DCNL errorbar markers.  For example, this code makes big red squares with DCNL thick green edges:: DCNL x,y,yerr = rand(3,10) DCNL errorbar(x, y, yerr, marker=\'s\', DCNL mfc=\'red\', mec=\'green\', ms=20, mew=4) DCNL where *mfc*, *mec*, *ms* and *mew* are aliases for the longer DCNL property names, *markerfacecolor*, *markeredgecolor*, *markersize* DCNL and *markeredgewith*. DCNL valid kwargs for the marker properties are DCNL %(Line2D)s DCNL Return value is a length 3 tuple.  The first element is the DCNL :class:`~matplotlib.lines.Line2D` instance for the *y* symbol DCNL lines.  The second element is a list of error bar cap lines, DCNL the third element is a list of DCNL :class:`~matplotlib.collections.LineCollection` instances for DCNL the horizontal and vertical error ranges. DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/errorbar_demo.py'
def boxplot(self, x, notch=0, sym='b+', vert=1, whis=1.5, positions=None, widths=None): DCNL 'call signature:: DCNL boxplot(x, notch=0, sym=\'+\', vert=1, whis=1.5, DCNL positions=None, widths=None) DCNL Make a box and whisker plot for each column of *x* or each DCNL vector in sequence *x*.  The box extends from the lower to DCNL upper quartile values of the data, with a line at the median. DCNL The whiskers extend from the box to show the range of the DCNL data.  Flier points are those past the end of the whiskers. DCNL - *notch* = 0 (default) produces a rectangular box plot. DCNL - *notch* = 1 will produce a notched box plot DCNL *sym* (default \'b+\') is the default symbol for flier points. DCNL Enter an empty string (\'\') if you don\'t want to show fliers. DCNL - *vert* = 1 (default) makes the boxes vertical. DCNL - *vert* = 0 makes horizontal boxes.  This seems goofy, but DCNL that\'s how Matlab did it. DCNL *whis* (default 1.5) defines the length of the whiskers as DCNL a function of the inner quartile range.  They extend to the DCNL most extreme data point within ( ``whis*(75%-25%)`` ) data range. DCNL *positions* (default 1,2,...,n) sets the horizontal positions of DCNL the boxes. The ticks and limits are automatically set to match DCNL the positions. DCNL *widths* is either a scalar or a vector and sets the width of DCNL each box. The default is 0.5, or ``0.15*(distance between extreme DCNL positions)`` if that is smaller. DCNL *x* is an array or a sequence of vectors. DCNL Returns a dictionary mapping each component of the boxplot DCNL to a list of the :class:`matplotlib.lines.Line2D` DCNL instances created. DCNL **Example:** DCNL .. plot:: pyplots/boxplot_demo.py'
def scatter(self, x, y, s=20, c='b', marker='o', cmap=None, norm=None, vmin=None, vmax=None, alpha=1.0, linewidths=None, faceted=True, verts=None, **kwargs): DCNL 'call signatures:: DCNL scatter(x, y, s=20, c=\'b\', marker=\'o\', cmap=None, norm=None, DCNL vmin=None, vmax=None, alpha=1.0, linewidths=None, DCNL verts=None, **kwargs) DCNL Make a scatter plot of *x* versus *y*, where *x*, *y* are 1-D DCNL sequences of the same length, *N*. DCNL Keyword arguments: DCNL *s*: DCNL size in points^2.  It is a scalar or an array of the same DCNL length as *x* and *y*. DCNL *c*: DCNL a color. *c* can be a single color format string, or a DCNL sequence of color specifications of length *N*, or a DCNL sequence of *N* numbers to be mapped to colors using the DCNL *cmap* and *norm* specified via kwargs (see below). Note DCNL that *c* should not be a single numeric RGB or RGBA DCNL sequence because that is indistinguishable from an array DCNL of values to be colormapped.  *c* can be a 2-D array in DCNL which the rows are RGB or RGBA, however. DCNL *marker*: DCNL can be one of: DCNL Value   Description DCNL \'s\'     square DCNL \'o\'     circle DCNL \'^\'     triangle up DCNL \'>\'     triangle right DCNL \'v\'     triangle down DCNL \'<\'     triangle left DCNL \'d\'     diamond DCNL \'p\'     pentagram DCNL \'h\'     hexagon DCNL \'8\'     octagon DCNL \'+\'     plus DCNL \'x\'     cross DCNL The marker can also be a tuple (*numsides*, *style*, DCNL *angle*), which will create a custom, regular symbol. DCNL *numsides*: DCNL the number of sides DCNL *style*: DCNL the style of the regular symbol: DCNL Value   Description DCNL 0       a regular polygon DCNL 1       a star-like symbol DCNL 2       an asterisk DCNL 3       a circle (*numsides* and *angle* is ignored) DCNL *angle*: DCNL the angle of rotation of the symbol DCNL Finally, *marker* can be (*verts*, 0): *verts* is a DCNL sequence of (*x*, *y*) vertices for a custom scatter DCNL symbol.  Alternatively, use the kwarg combination DCNL *marker* = *None*, *verts* = *verts*. DCNL Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in DCNL which case all masks will be combined and only unmasked points DCNL will be plotted. DCNL Other keyword arguments: the color mapping and normalization DCNL arguments will be used only if *c* is an array of floats. DCNL *cmap*: [ None | Colormap ] DCNL A :class:`matplotlib.colors.Colormap` instance. If *None*, DCNL defaults to rc ``image.cmap``. *cmap* is only used if *c* DCNL is an array of floats. DCNL *norm*: [ None | Normalize ] DCNL A :class:`matplotlib.colors.Normalize` instance is used to DCNL scale luminance data to 0, 1. If *None*, use the default DCNL :func:`normalize`. *norm* is only used if *c* is an array DCNL of floats. DCNL *vmin*/*vmax*: DCNL *vmin* and *vmax* are used in conjunction with norm to DCNL normalize luminance data.  If either are None, the min and DCNL max of the color array *C* is used.  Note if you pass a DCNL *norm* instance, your settings for *vmin* and *vmax* will DCNL be ignored. DCNL *alpha*: 0 <= scalar <= 1 DCNL The alpha value for the patches DCNL *linewidths*: [ None | scalar | sequence ] DCNL If *None*, defaults to (lines.linewidth,).  Note that this DCNL is a tuple, and if you set the linewidths argument you DCNL must set it as a sequence of floats, as required by DCNL :class:`~matplotlib.collections.RegularPolyCollection`. DCNL Optional kwargs control the DCNL :class:`~matplotlib.collections.Collection` properties; in DCNL particular: DCNL *edgecolors*: DCNL \'none\' to plot faces with no outlines DCNL *facecolors*: DCNL \'none\' to plot unfilled outlines DCNL Here are the standard descriptions of all the DCNL :class:`~matplotlib.collections.Collection` kwargs: DCNL %(Collection)s DCNL A :class:`~matplotlib.collections.Collection` instance is DCNL returned.'
def hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', cmap=None, norm=None, vmin=None, vmax=None, alpha=1.0, linewidths=None, edgecolors='none', reduce_C_function=np.mean, **kwargs): DCNL 'call signature:: DCNL hexbin(x, y, C = None, gridsize = 100, bins = None, DCNL xscale = \'linear\', yscale = \'linear\', DCNL cmap=None, norm=None, vmin=None, vmax=None, DCNL alpha=1.0, linewidths=None, edgecolors=\'none\' DCNL reduce_C_function = np.mean, DCNL **kwargs) DCNL Make a hexagonal binning plot of *x* versus *y*, where *x*, DCNL *y* are 1-D sequences of the same length, *N*. If *C* is None DCNL (the default), this is a histogram of the number of occurences DCNL of the observations at (x[i],y[i]). DCNL If *C* is specified, it specifies values at the coordinate DCNL (x[i],y[i]). These values are accumulated for each hexagonal DCNL bin and then reduced according to *reduce_C_function*, which DCNL defaults to numpy\'s mean function (np.mean). (If *C* is DCNL specified, it must also be a 1-D sequence of the same length DCNL as *x* and *y*.) DCNL *x*, *y* and/or *C* may be masked arrays, in which case only DCNL unmasked points will be plotted. DCNL Optional keyword arguments: DCNL *gridsize*: [ 100 | integer ] DCNL The number of hexagons in the *x*-direction, default is DCNL 100. The corresponding number of hexagons in the DCNL *y*-direction is chosen such that the hexagons are DCNL approximately regular. Alternatively, gridsize can be a DCNL tuple with two elements specifying the number of hexagons DCNL in the *x*-direction and the *y*-direction. DCNL *bins*: [ None | \'log\' | integer | sequence ] DCNL If *None*, no binning is applied; the color of each hexagon DCNL directly corresponds to its count value. DCNL If \'log\', use a logarithmic scale for the color DCNL map. Internally, :math:`log_{10}(i+1)` is used to DCNL determine the hexagon color. DCNL If an integer, divide the counts in the specified number DCNL of bins, and color the hexagons accordingly. DCNL If a sequence of values, the values of the lower bound of DCNL the bins to be used. DCNL *xscale*: [ \'linear\' | \'log\' ] DCNL Use a linear or log10 scale on the horizontal axis. DCNL *scale*: [ \'linear\' | \'log\' ] DCNL Use a linear or log10 scale on the vertical axis. DCNL Other keyword arguments controlling color mapping and normalization DCNL arguments: DCNL *cmap*: [ None | Colormap ] DCNL a :class:`matplotlib.cm.Colormap` instance. If *None*, DCNL defaults to rc ``image.cmap``. DCNL *norm*: [ None | Normalize ] DCNL :class:`matplotlib.colors.Normalize` instance is used to DCNL scale luminance data to 0,1. DCNL *vmin*/*vmax*: scalar DCNL *vmin* and *vmax* are used in conjunction with *norm* to normalize DCNL luminance data.  If either are *None*, the min and max of the color DCNL array *C* is used.  Note if you pass a norm instance, your settings DCNL for *vmin* and *vmax* will be ignored. DCNL *alpha*: scalar DCNL the alpha value for the patches DCNL *linewidths*: [ None | scalar ] DCNL If *None*, defaults to rc lines.linewidth. Note that this DCNL is a tuple, and if you set the linewidths argument you DCNL must set it as a sequence of floats, as required by DCNL :class:`~matplotlib.collections.RegularPolyCollection`. DCNL Other keyword arguments controlling the Collection properties: DCNL *edgecolors*: [ None | mpl color | color sequence ] DCNL If \'none\', draws the edges in the same color as the fill color. DCNL This is the default, as it avoids unsightly unpainted pixels DCNL between the hexagons. DCNL If *None*, draws the outlines in the default color. DCNL If a matplotlib color arg or sequence of rgba tuples, draws the DCNL outlines in the specified color. DCNL Here are the standard descriptions of all the DCNL :class:`~matplotlib.collections.Collection` kwargs: DCNL %(Collection)s DCNL The return value is a DCNL :class:`~matplotlib.collections.PolyCollection` instance; use DCNL :meth:`~matplotlib.collection.PolyCollection.get_array` on DCNL this :class:`~matplotlib.collections.PolyCollection` to get DCNL the counts in each hexagon. DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/hexbin_demo.py'
def arrow(self, x, y, dx, dy, **kwargs): DCNL 'call signature:: DCNL arrow(x, y, dx, dy, **kwargs) DCNL Draws arrow on specified axis from (*x*, *y*) to (*x* + *dx*, DCNL *y* + *dy*). DCNL Optional kwargs control the arrow properties: DCNL %(FancyArrow)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/arrow_demo.py'
def barbs(self, *args, **kw): DCNL '%(barbs_doc)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/barb_demo.py'
def fill(self, *args, **kwargs): DCNL 'call signature:: DCNL fill(*args, **kwargs) DCNL Plot filled polygons.  *args* is a variable length argument, DCNL allowing for multiple *x*, *y* pairs with an optional color DCNL format string; see :func:`~matplotlib.pyplot.plot` for details DCNL on the argument parsing.  For example, to plot a polygon with DCNL vertices at *x*, *y* in blue.:: DCNL ax.fill(x,y, \'b\' ) DCNL An arbitrary number of *x*, *y*, *color* groups can be specified:: DCNL ax.fill(x1, y1, \'g\', x2, y2, \'r\') DCNL Return value is a list of :class:`~matplotlib.patches.Patch` DCNL instances that were added. DCNL The same color strings that :func:`~matplotlib.pyplot.plot` DCNL supports are supported by the fill format string. DCNL If you would like to fill below a curve, eg. shade a region DCNL between 0 and *y* along *x*, use :meth:`fill_between` DCNL The *closed* kwarg will close the polygon when *True* (default). DCNL kwargs control the Polygon properties: DCNL %(Polygon)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/fill_demo.py'
def fill_between(self, x, y1, y2=0, where=None, **kwargs): DCNL 'call signature:: DCNL fill_between(x, y1, y2=0, where=None, **kwargs) DCNL Create a :class:`~matplotlib.collections.PolyCollection` DCNL filling the regions between *y1* and *y2* where DCNL ``where==True`` DCNL *x* DCNL an N length np array of the x data DCNL *y1* DCNL an N length scalar or np array of the x data DCNL *y2* DCNL an N length scalar or np array of the x data DCNL *where* DCNL if None, default to fill between everywhere.  If not None, DCNL it is a a N length numpy boolean array and the fill will DCNL only happen over the regions where ``where==True`` DCNL *kwargs* DCNL keyword args passed on to the :class:`PolyCollection` DCNL kwargs control the Polygon properties: DCNL %(PolyCollection)s DCNL .. plot:: mpl_examples/pylab_examples/fill_between.py'
def imshow(self, X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=1.0, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, **kwargs): DCNL 'call signature:: DCNL imshow(X, cmap=None, norm=None, aspect=None, interpolation=None, DCNL alpha=1.0, vmin=None, vmax=None, origin=None, extent=None, DCNL **kwargs) DCNL Display the image in *X* to current axes.  *X* may be a float DCNL array, a uint8 array or a PIL image. If *X* is an array, *X* DCNL can have the following shapes: DCNL * MxN -- luminance (grayscale, float array only) DCNL * MxNx3 -- RGB (float or uint8 array) DCNL * MxNx4 -- RGBA (float or uint8 array) DCNL The value for each component of MxNx3 and MxNx4 float arrays should be DCNL in the range 0.0 to 1.0; MxN float arrays may be normalised. DCNL An :class:`matplotlib.image.AxesImage` instance is returned. DCNL Keyword arguments: DCNL *cmap*: [ None | Colormap ] DCNL A :class:`matplotlib.cm.Colormap` instance, eg. cm.jet. DCNL If *None*, default to rc ``image.cmap`` value. DCNL *cmap* is ignored when *X* has RGB(A) information DCNL *aspect*: [ None | \'auto\' | \'equal\' | scalar ] DCNL If \'auto\', changes the image aspect ratio to match that of the axes DCNL If \'equal\', and *extent* is *None*, changes the axes DCNL aspect ratio to match that of the image. If *extent* is DCNL not *None*, the axes aspect ratio is changed to match that DCNL of the extent. DCNL If *None*, default to rc ``image.aspect`` value. DCNL *interpolation*: DCNL Acceptable values are *None*, \'nearest\', \'bilinear\', DCNL \'bicubic\', \'spline16\', \'spline36\', \'hanning\', \'hamming\', DCNL \'hermite\', \'kaiser\', \'quadric\', \'catrom\', \'gaussian\', DCNL \'bessel\', \'mitchell\', \'sinc\', \'lanczos\', DCNL If *interpolation* is *None*, default to rc DCNL ``image.interpolation``. See also the *filternorm* and DCNL *filterrad* parameters DCNL *norm*: [ None | Normalize ] DCNL An :class:`matplotlib.colors.Normalize` instance; if DCNL *None*, default is ``normalization()``.  This scales DCNL luminance -> 0-1 DCNL *norm* is only used for an MxN float array. DCNL *vmin*/*vmax*: [ None | scalar ] DCNL Used to scale a luminance image to 0-1.  If either is DCNL *None*, the min and max of the luminance values will be DCNL used.  Note if *norm* is not *None*, the settings for DCNL *vmin* and *vmax* will be ignored. DCNL *alpha*: scalar DCNL The alpha blending value, between 0 (transparent) and 1 (opaque) DCNL *origin*: [ None | \'upper\' | \'lower\' ] DCNL Place the [0,0] index of the array in the upper left or lower left DCNL corner of the axes. If *None*, default to rc ``image.origin``. DCNL *extent*: [ None | scalars (left, right, bottom, top) ] DCNL Eata values of the axes.  The default assigns zero-based row, DCNL column indices to the *x*, *y* centers of the pixels. DCNL *shape*: [ None | scalars (columns, rows) ] DCNL For raw buffer images DCNL *filternorm*: DCNL A parameter for the antigrain image resize filter.  From the DCNL antigrain documentation, if *filternorm* = 1, the filter normalizes DCNL integer values and corrects the rounding errors. It doesn\'t do DCNL anything with the source floating point values, it corrects only DCNL integers according to the rule of 1.0 which means that any sum of DCNL pixel weights must be equal to 1.0.  So, the filter function must DCNL produce a graph of the proper shape. DCNL *filterrad*: DCNL The filter radius for filters that have a radius DCNL parameter, i.e. when interpolation is one of: \'sinc\', DCNL \'lanczos\' or \'blackman\' DCNL Additional kwargs are :class:`~matplotlib.artist.Artist` properties: DCNL %(Artist)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/image_demo.py'
def pcolor(self, *args, **kwargs): DCNL 'call signatures:: DCNL pcolor(C, **kwargs) DCNL pcolor(X, Y, C, **kwargs) DCNL Create a pseudocolor plot of a 2-D array. DCNL *C* is the array of color values. DCNL *X* and *Y*, if given, specify the (*x*, *y*) coordinates of DCNL the colored quadrilaterals; the quadrilateral for C[i,j] has DCNL corners at:: DCNL (X[i,   j],   Y[i,   j]), DCNL (X[i,   j+1], Y[i,   j+1]), DCNL (X[i+1, j],   Y[i+1, j]), DCNL (X[i+1, j+1], Y[i+1, j+1]). DCNL Ideally the dimensions of *X* and *Y* should be one greater DCNL than those of *C*; if the dimensions are the same, then the DCNL last row and column of *C* will be ignored. DCNL Note that the the column index corresponds to the DCNL *x*-coordinate, and the row index corresponds to *y*; for DCNL details, see the :ref:`Grid Orientation DCNL <axes-pcolor-grid-orientation>` section below. DCNL If either or both of *X* and *Y* are 1-D arrays or column vectors, DCNL they will be expanded as needed into the appropriate 2-D arrays, DCNL making a rectangular grid. DCNL *X*, *Y* and *C* may be masked arrays.  If either C[i, j], or one DCNL of the vertices surrounding C[i,j] (*X* or *Y* at [i, j], [i+1, j], DCNL [i, j+1],[i+1, j+1]) is masked, nothing is plotted. DCNL Keyword arguments: DCNL *cmap*: [ None | Colormap ] DCNL A :class:`matplotlib.cm.Colormap` instance. If *None*, use DCNL rc settings. DCNL norm: [ None | Normalize ] DCNL An :class:`matplotlib.colors.Normalize` instance is used DCNL to scale luminance data to 0,1. If *None*, defaults to DCNL :func:`normalize`. DCNL *vmin*/*vmax*: [ None | scalar ] DCNL *vmin* and *vmax* are used in conjunction with *norm* to DCNL normalize luminance data.  If either are *None*, the min DCNL and max of the color array *C* is used.  If you pass a DCNL *norm* instance, *vmin* and *vmax* will be ignored. DCNL *shading*: [ \'flat\' | \'faceted\' ] DCNL If \'faceted\', a black grid is drawn around each rectangle; if DCNL \'flat\', edges are not drawn. Default is \'flat\', contrary to DCNL Matlab(TM). DCNL This kwarg is deprecated; please use \'edgecolors\' instead: DCNL * shading=\'flat\' -- edgecolors=\'None\' DCNL * shading=\'faceted  -- edgecolors=\'k\' DCNL *edgecolors*: [ None | \'None\' | color | color sequence] DCNL If *None*, the rc setting is used by default. DCNL If \'None\', edges will not be visible. DCNL An mpl color or sequence of colors will set the edge color DCNL *alpha*: 0 <= scalar <= 1 DCNL the alpha blending value DCNL Return value is a :class:`matplotlib.collection.Collection` DCNL instance. DCNL .. _axes-pcolor-grid-orientation: DCNL The grid orientation follows the Matlab(TM) convention: an DCNL array *C* with shape (*nrows*, *ncolumns*) is plotted with DCNL the column number as *X* and the row number as *Y*, increasing DCNL up; hence it is plotted the way the array would be printed, DCNL except that the *Y* axis is reversed.  That is, *C* is taken DCNL as *C*(*y*, *x*). DCNL Similarly for :func:`~matplotlib.pyplot.meshgrid`:: DCNL x = np.arange(5) DCNL y = np.arange(3) DCNL X, Y = meshgrid(x,y) DCNL is equivalent to: DCNL X = array([[0, 1, 2, 3, 4], DCNL [0, 1, 2, 3, 4], DCNL [0, 1, 2, 3, 4]]) DCNL Y = array([[0, 0, 0, 0, 0], DCNL [1, 1, 1, 1, 1], DCNL [2, 2, 2, 2, 2]]) DCNL so if you have:: DCNL C = rand( len(x), len(y)) DCNL then you need:: DCNL pcolor(X, Y, C.T) DCNL or:: DCNL pcolor(C.T) DCNL Matlab :func:`pcolor` always discards the last row and column DCNL of *C*, but matplotlib displays the last row and column if *X* and DCNL *Y* are not specified, or if *X* and *Y* have one more row and DCNL column than *C*. DCNL kwargs can be used to control the DCNL :class:`~matplotlib.collection.PolyCollection` properties: DCNL %(PolyCollection)s'
def pcolormesh(self, *args, **kwargs): DCNL 'call signatures:: DCNL pcolormesh(C) DCNL pcolormesh(X, Y, C) DCNL pcolormesh(C, **kwargs) DCNL *C* may be a masked array, but *X* and *Y* may not.  Masked DCNL array support is implemented via *cmap* and *norm*; in DCNL contrast, :func:`~matplotlib.pyplot.pcolor` simply does not DCNL draw quadrilaterals with masked colors or vertices. DCNL Keyword arguments: DCNL *cmap*: [ None | Colormap ] DCNL A :class:`matplotlib.cm.Colormap` instance. If None, use DCNL rc settings. DCNL *norm*: [ None | Normalize ] DCNL A :class:`matplotlib.colors.Normalize` instance is used to DCNL scale luminance data to 0,1. If None, defaults to DCNL :func:`normalize`. DCNL *vmin*/*vmax*: [ None | scalar ] DCNL *vmin* and *vmax* are used in conjunction with *norm* to DCNL normalize luminance data.  If either are *None*, the min DCNL and max of the color array *C* is used.  If you pass a DCNL *norm* instance, *vmin* and *vmax* will be ignored. DCNL *shading*: [ \'flat\' | \'faceted\' ] DCNL If \'faceted\', a black grid is drawn around each rectangle; if DCNL \'flat\', edges are not drawn. Default is \'flat\', contrary to DCNL Matlab(TM). DCNL This kwarg is deprecated; please use \'edgecolors\' instead: DCNL * shading=\'flat\' -- edgecolors=\'None\' DCNL * shading=\'faceted  -- edgecolors=\'k\' DCNL *edgecolors*: [ None | \'None\' | color | color sequence] DCNL If None, the rc setting is used by default. DCNL If \'None\', edges will not be visible. DCNL An mpl color or sequence of colors will set the edge color DCNL *alpha*: 0 <= scalar <= 1 DCNL the alpha blending value DCNL Return value is a :class:`matplotlib.collection.QuadMesh` DCNL object. DCNL kwargs can be used to control the DCNL :class:`matplotlib.collections.QuadMesh` DCNL properties: DCNL %(QuadMesh)s DCNL .. seealso:: DCNL :func:`~matplotlib.pyplot.pcolor`: DCNL For an explanation of the grid orientation and the DCNL expansion of 1-D *X* and/or *Y* to 2-D arrays.'
def pcolorfast(self, *args, **kwargs): DCNL 'pseudocolor plot of a 2-D array DCNL Experimental; this is a version of pcolor that DCNL does not draw lines, that provides the fastest DCNL possible rendering with the Agg backend, and that DCNL can handle any quadrilateral grid. DCNL Call signatures:: DCNL pcolor(C, **kwargs) DCNL pcolor(xr, yr, C, **kwargs) DCNL pcolor(x, y, C, **kwargs) DCNL pcolor(X, Y, C, **kwargs) DCNL C is the 2D array of color values corresponding to quadrilateral DCNL cells. Let (nr, nc) be its shape.  C may be a masked array. DCNL ``pcolor(C, **kwargs)`` is equivalent to DCNL ``pcolor([0,nc], [0,nr], C, **kwargs)`` DCNL *xr*, *yr* specify the ranges of *x* and *y* corresponding to the DCNL rectangular region bounding *C*.  If:: DCNL xr = [x0, x1] DCNL and:: DCNL yr = [y0,y1] DCNL then *x* goes from *x0* to *x1* as the second index of *C* goes DCNL from 0 to *nc*, etc.  (*x0*, *y0*) is the outermost corner of DCNL cell (0,0), and (*x1*, *y1*) is the outermost corner of cell DCNL (*nr*-1, *nc*-1).  All cells are rectangles of the same size. DCNL This is the fastest version. DCNL *x*, *y* are 1D arrays of length *nc* +1 and *nr* +1, respectively, DCNL giving the x and y boundaries of the cells.  Hence the cells are DCNL rectangular but the grid may be nonuniform.  The speed is DCNL intermediate.  (The grid is checked, and if found to be DCNL uniform the fast version is used.) DCNL *X* and *Y* are 2D arrays with shape (*nr* +1, *nc* +1) that specify DCNL the (x,y) coordinates of the corners of the colored DCNL quadrilaterals; the quadrilateral for C[i,j] has corners at DCNL (X[i,j],Y[i,j]), (X[i,j+1],Y[i,j+1]), (X[i+1,j],Y[i+1,j]), DCNL (X[i+1,j+1],Y[i+1,j+1]).  The cells need not be rectangular. DCNL This is the most general, but the slowest to render.  It may DCNL produce faster and more compact output using ps, pdf, and DCNL svg backends, however. DCNL Note that the the column index corresponds to the x-coordinate, DCNL and the row index corresponds to y; for details, see DCNL the "Grid Orientation" section below. DCNL Optional keyword arguments: DCNL *cmap*: [ None | Colormap ] DCNL A cm Colormap instance from cm. If None, use rc settings. DCNL *norm*: [ None | Normalize ] DCNL An mcolors.Normalize instance is used to scale luminance data to DCNL 0,1. If None, defaults to normalize() DCNL *vmin*/*vmax*: [ None | scalar ] DCNL *vmin* and *vmax* are used in conjunction with norm to normalize DCNL luminance data.  If either are *None*, the min and max of the color DCNL array *C* is used.  If you pass a norm instance, *vmin* and *vmax* DCNL will be *None*. DCNL *alpha*: 0 <= scalar <= 1 DCNL the alpha blending value DCNL Return value is an image if a regular or rectangular grid DCNL is specified, and a QuadMesh collection in the general DCNL quadrilateral case.'
def table(self, **kwargs): DCNL 'call signature:: DCNL table(cellText=None, cellColours=None, DCNL cellLoc=\'right\', colWidths=None, DCNL rowLabels=None, rowColours=None, rowLoc=\'left\', DCNL colLabels=None, colColours=None, colLoc=\'center\', DCNL loc=\'bottom\', bbox=None): DCNL Add a table to the current axes.  Returns a DCNL :class:`matplotlib.table.Table` instance.  For finer grained DCNL control over tables, use the :class:`~matplotlib.table.Table` DCNL class and add it to the axes with DCNL :meth:`~matplotlib.axes.Axes.add_table`. DCNL Thanks to John Gill for providing the class and table. DCNL kwargs control the :class:`~matplotlib.table.Table` DCNL properties: DCNL %(Table)s'
def twinx(self): DCNL 'call signature:: DCNL ax = twinx() DCNL create a twin of Axes for generating a plot with a sharex DCNL x-axis but independent y axis.  The y-axis of self will have DCNL ticks on left and the returned axes will have ticks on the DCNL right'
def twiny(self): DCNL 'call signature:: DCNL ax = twiny() DCNL create a twin of Axes for generating a plot with a shared DCNL y-axis but independent x axis.  The x-axis of self will have DCNL ticks on bottom and the returned axes will have ticks on the DCNL top'
def get_shared_x_axes(self): DCNL 'Return a copy of the shared axes Grouper object for x axes'
def get_shared_y_axes(self): DCNL 'Return a copy of the shared axes Grouper object for y axes'
def hist(self, x, bins=10, range=None, normed=False, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, **kwargs): DCNL 'call signature:: DCNL hist(x, bins=10, range=None, normed=False, cumulative=False, DCNL bottom=None, histtype=\'bar\', align=\'mid\', DCNL orientation=\'vertical\', rwidth=None, log=False, **kwargs) DCNL Compute and draw the histogram of *x*. The return value is a DCNL tuple (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, DCNL [*patches0*, *patches1*,...]) if the input contains multiple DCNL data. DCNL Keyword arguments: DCNL *bins*: DCNL Either an integer number of bins or a sequence giving the DCNL bins.  *x* are the data to be binned. *x* can be an array, DCNL a 2D array with multiple data in its columns, or a list of DCNL arrays with data of different length.  Note, if *bins* DCNL is an integer input argument=numbins, *bins* + 1 bin edges DCNL will be returned, compatible with the semantics of DCNL :func:`numpy.histogram` with the *new* = True argument. DCNL Unequally spaced bins are supported if *bins* is a sequence. DCNL *range*: DCNL The lower and upper range of the bins. Lower and upper outliers DCNL are ignored. If not provided, *range* is (x.min(), x.max()). DCNL Range has no effect if *bins* is a sequence. DCNL If *bins* is a sequence or *range* is specified, autoscaling is DCNL set off (*autoscale_on* is set to *False*) and the xaxis limits DCNL are set to encompass the full specified bin range. DCNL *normed*: DCNL If *True*, the first element of the return tuple will DCNL be the counts normalized to form a probability density, i.e., DCNL ``n/(len(x)*dbin)``.  In a probability density, the integral of DCNL the histogram should be 1; you can verify that with a DCNL trapezoidal integration of the probability density function:: DCNL pdf, bins, patches = ax.hist(...) DCNL print np.sum(pdf * np.diff(bins)) DCNL *cumulative*: DCNL If *True*, then a histogram is computed where each bin DCNL gives the counts in that bin plus all bins for smaller values. DCNL The last bin gives the total number of datapoints.  If *normed* DCNL is also *True* then the histogram is normalized such that the DCNL last bin equals 1. If *cumulative* evaluates to less than 0 DCNL (e.g. -1), the direction of accumulation is reversed.  In this DCNL case, if *normed* is also *True*, then the histogram is normalized DCNL such that the first bin equals 1. DCNL *histtype*: [ \'bar\' | \'barstacked\' | \'step\' | \'stepfilled\' ] DCNL The type of histogram to draw. DCNL - \'bar\' is a traditional bar-type histogram.  If multiple data DCNL are given the bars are aranged side by side. DCNL - \'barstacked\' is a bar-type histogram where multiple DCNL data are stacked on top of each other. DCNL - \'step\' generates a lineplot that is by default DCNL unfilled. DCNL - \'stepfilled\' generates a lineplot that is by default DCNL filled. DCNL *align*: [\'left\' | \'mid\' | \'right\' ] DCNL Controls how the histogram is plotted. DCNL - \'left\': bars are centered on the left bin edges. DCNL - \'mid\': bars are centered between the bin edges. DCNL - \'right\': bars are centered on the right bin edges. DCNL *orientation*: [ \'horizontal\' | \'vertical\' ] DCNL If \'horizontal\', :func:`~matplotlib.pyplot.barh` will be DCNL used for bar-type histograms and the *bottom* kwarg will be DCNL the left edges. DCNL *rwidth*: DCNL The relative width of the bars as a fraction of the bin DCNL width.  If *None*, automatically compute the width. Ignored DCNL if *histtype* = \'step\' or \'stepfilled\'. DCNL *log*: DCNL If *True*, the histogram axis will be set to a log scale. DCNL If *log* is *True* and *x* is a 1D array, empty bins will DCNL be filtered out and only the non-empty (*n*, *bins*, DCNL *patches*) will be returned. DCNL kwargs are used to update the properties of the hist DCNL :class:`~matplotlib.patches.Rectangle` instances: DCNL %(Rectangle)s DCNL You can use labels for your histogram, and only the first DCNL :class:`~matplotlib.patches.Rectangle` gets the label (the DCNL others get the magic string \'_nolegend_\'.  This will make the DCNL histograms work in the intuitive way for bar charts:: DCNL ax.hist(10+2*np.random.randn(1000), label=\'men\') DCNL ax.hist(12+3*np.random.randn(1000), label=\'women\', alpha=0.5) DCNL ax.legend() DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/histogram_demo.py'
def psd(self, x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs): DCNL 'call signature:: DCNL psd(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, DCNL window=mlab.window_hanning, noverlap=0, pad_to=None, DCNL sides=\'default\', scale_by_freq=None, **kwargs) DCNL The power spectral density by Welch\'s average periodogram DCNL method.  The vector *x* is divided into *NFFT* length DCNL segments.  Each segment is detrended by function *detrend* and DCNL windowed by function *window*.  *noverlap* gives the length of DCNL the overlap between segments.  The :math:`|\mathrm{fft}(i)|^2` DCNL of each segment :math:`i` are averaged to compute *Pxx*, with a DCNL scaling to correct for power loss due to windowing.  *Fs* is the DCNL sampling frequency. DCNL %(PSD)s DCNL *Fc*: integer DCNL The center frequency of *x* (defaults to 0), which offsets DCNL the x extents of the plot to reflect the frequency range used DCNL when a signal is acquired and then filtered and downsampled to DCNL baseband. DCNL Returns the tuple (*Pxx*, *freqs*). DCNL For plotting, the power is plotted as DCNL :math:`10\log_{10}(P_{xx})` for decibels, though *Pxx* itself DCNL is returned. DCNL References: DCNL Bendat & Piersol -- Random Data: Analysis and Measurement DCNL Procedures, John Wiley & Sons (1986) DCNL kwargs control the :class:`~matplotlib.lines.Line2D` properties: DCNL %(Line2D)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/psd_demo.py'
def csd(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs): DCNL 'call signature:: DCNL csd(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, DCNL window=mlab.window_hanning, noverlap=0, pad_to=None, DCNL sides=\'default\', scale_by_freq=None, **kwargs) DCNL The cross spectral density :math:`P_{xy}` by Welch\'s average DCNL periodogram method.  The vectors *x* and *y* are divided into DCNL *NFFT* length segments.  Each segment is detrended by function DCNL *detrend* and windowed by function *window*.  The product of DCNL the direct FFTs of *x* and *y* are averaged over each segment DCNL to compute :math:`P_{xy}`, with a scaling to correct for power DCNL loss due to windowing. DCNL Returns the tuple (*Pxy*, *freqs*).  *P* is the cross spectrum DCNL (complex valued), and :math:`10\log_{10}|P_{xy}|` is DCNL plotted. DCNL %(PSD)s DCNL *Fc*: integer DCNL The center frequency of *x* (defaults to 0), which offsets DCNL the x extents of the plot to reflect the frequency range used DCNL when a signal is acquired and then filtered and downsampled to DCNL baseband. DCNL References: DCNL Bendat & Piersol -- Random Data: Analysis and Measurement DCNL Procedures, John Wiley & Sons (1986) DCNL kwargs control the Line2D properties: DCNL %(Line2D)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/csd_demo.py DCNL .. seealso: DCNL :meth:`psd` DCNL For a description of the optional parameters.'
def cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs): DCNL 'call signature:: DCNL cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend = mlab.detrend_none, DCNL window = mlab.window_hanning, noverlap=0, pad_to=None, DCNL sides=\'default\', scale_by_freq=None, **kwargs) DCNL cohere the coherence between *x* and *y*.  Coherence is the normalized DCNL cross spectral density: DCNL .. math:: DCNL C_{xy} = \frac{|P_{xy}|^2}{P_{xx}P_{yy}} DCNL %(PSD)s DCNL *Fc*: integer DCNL The center frequency of *x* (defaults to 0), which offsets DCNL the x extents of the plot to reflect the frequency range used DCNL when a signal is acquired and then filtered and downsampled to DCNL baseband. DCNL The return value is a tuple (*Cxy*, *f*), where *f* are the DCNL frequencies of the coherence vector. DCNL kwargs are applied to the lines. DCNL References: DCNL * Bendat & Piersol -- Random Data: Analysis and Measurement DCNL Procedures, John Wiley & Sons (1986) DCNL kwargs control the :class:`~matplotlib.lines.Line2D` DCNL properties of the coherence plot: DCNL %(Line2D)s DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/cohere_demo.py'
def specgram(self, x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, window=mlab.window_hanning, noverlap=128, cmap=None, xextent=None, pad_to=None, sides='default', scale_by_freq=None): DCNL 'call signature:: DCNL specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none, DCNL window=mlab.window_hanning, noverlap=128, DCNL cmap=None, xextent=None, pad_to=None, sides=\'default\', DCNL scale_by_freq=None) DCNL Compute a spectrogram of data in *x*.  Data are split into DCNL *NFFT* length segments and the PSD of each section is DCNL computed.  The windowing function *window* is applied to each DCNL segment, and the amount of overlap of each segment is DCNL specified with *noverlap*. DCNL %(PSD)s DCNL *Fc*: integer DCNL The center frequency of *x* (defaults to 0), which offsets DCNL the y extents of the plot to reflect the frequency range used DCNL when a signal is acquired and then filtered and downsampled to DCNL baseband. DCNL *cmap*: DCNL A :class:`matplotlib.cm.Colormap` instance; if *None* use DCNL default determined by rc DCNL *xextent*: DCNL The image extent along the x-axis. xextent = (xmin,xmax) DCNL The default is (0,max(bins)), where bins is the return DCNL value from :func:`mlab.specgram` DCNL Return value is (*Pxx*, *freqs*, *bins*, *im*): DCNL - *bins* are the time points the spectrogram is calculated over DCNL - *freqs* is an array of frequencies DCNL - *Pxx* is a len(times) x len(freqs) array of power DCNL - *im* is a :class:`matplotlib.image.AxesImage` instance DCNL Note: If *x* is real (i.e. non-complex), only the positive DCNL spectrum is shown.  If *x* is complex, both positive and DCNL negative parts of the spectrum are shown.  This can be DCNL overridden using the *sides* keyword argument. DCNL **Example:** DCNL .. plot:: mpl_examples/pylab_examples/specgram_demo.py'
def spy(self, Z, precision=0, marker=None, markersize=None, aspect='equal', **kwargs): DCNL 'call signature:: DCNL spy(Z, precision=0, marker=None, markersize=None, DCNL aspect=\'equal\', **kwargs) DCNL ``spy(Z)`` plots the sparsity pattern of the 2-D array *Z*. DCNL If *precision* is 0, any non-zero value will be plotted; DCNL else, values of :math:`|Z| > precision` will be plotted. DCNL For :class:`scipy.sparse.spmatrix` instances, there is a DCNL special case: if *precision* is \'present\', any value present in DCNL the array will be plotted, even if it is identically zero. DCNL The array will be plotted as it would be printed, with DCNL the first index (row) increasing down and the second DCNL index (column) increasing to the right. DCNL By default aspect is \'equal\', so that each array element DCNL occupies a square space; set the aspect kwarg to \'auto\' DCNL to allow the plot to fill the plot box, or to any scalar DCNL number to specify the aspect ratio of an array element DCNL directly. DCNL Two plotting styles are available: image or marker. Both DCNL are available for full arrays, but only the marker style DCNL works for :class:`scipy.sparse.spmatrix` instances. DCNL If *marker* and *markersize* are *None*, an image will be DCNL returned and any remaining kwargs are passed to DCNL :func:`~matplotlib.pyplot.imshow`; else, a DCNL :class:`~matplotlib.lines.Line2D` object will be returned with DCNL the value of marker determining the marker type, and any DCNL remaining kwargs passed to the DCNL :meth:`~matplotlib.axes.Axes.plot` method. DCNL If *marker* and *markersize* are *None*, useful kwargs include: DCNL * *cmap* DCNL * *alpha* DCNL .. seealso:: DCNL :func:`~matplotlib.pyplot.imshow` DCNL For controlling colors, e.g. cyan background and red marks, DCNL use:: DCNL cmap = mcolors.ListedColormap([\'c\',\'r\']) DCNL If *marker* or *markersize* is not *None*, useful kwargs include: DCNL * *marker* DCNL * *markersize* DCNL * *color* DCNL Useful values for *marker* include: DCNL * \'s\'  square (default) DCNL * \'o\'  circle DCNL * \'.\'  point DCNL * \',\'  pixel DCNL .. seealso:: DCNL :func:`~matplotlib.pyplot.plot`'
def matshow(self, Z, **kwargs): DCNL 'Plot a matrix or array as an image. DCNL The matrix will be shown the way it would be printed, DCNL with the first row at the top.  Row and column numbering DCNL is zero-based. DCNL Argument: DCNL *Z*   anything that can be interpreted as a 2-D array DCNL kwargs all are passed to :meth:`~matplotlib.axes.Axes.imshow`. DCNL :meth:`matshow` sets defaults for *extent*, *origin*, DCNL *interpolation*, and *aspect*; use care in overriding the DCNL *extent* and *origin* kwargs, because they interact.  (Also, DCNL if you want to change them, you probably should be using DCNL imshow directly in your own version of matshow.) DCNL Returns: an :class:`matplotlib.image.AxesImage` instance.'
def __init__(self, fig, *args, **kwargs): DCNL '*fig* is a :class:`matplotlib.figure.Figure` instance. DCNL *args* is the tuple (*numRows*, *numCols*, *plotNum*), where DCNL the array of subplots in the figure has dimensions *numRows*, DCNL *numCols*, and where *plotNum* is the number of the subplot DCNL being created.  *plotNum* starts at 1 in the upper left DCNL corner and increases to the right. DCNL If *numRows* <= *numCols* <= *plotNum* < 10, *args* can be the DCNL decimal integer *numRows* * 100 + *numCols* * 10 + *plotNum*.'
def get_geometry(self): DCNL 'get the subplot geometry, eg 2,2,3'
def change_geometry(self, numrows, numcols, num): DCNL 'change subplot geometry, eg. from 1,1,1 to 2,2,3'
def update_params(self): DCNL 'update the subplot position from fig.subplotpars'
def label_outer(self): DCNL 'set the visible property on ticklabels so xticklabels are DCNL visible only if the subplot is in the last row and yticklabels DCNL are visible only if the subplot is in the first column'
def __init__(self, filename, dpi): DCNL 'Initialize the object. This takes the filename as input and DCNL opens the file; actually reading the file happens when DCNL iterating through the pages of the file.'
def __iter__(self): DCNL 'Iterate through the pages of the file. DCNL Returns (text, pages) pairs, where: DCNL text is a list of (x, y, fontnum, glyphnum, width) tuples DCNL boxes is a list of (x, y, height, width) tuples DCNL The coordinates are transformed into a standard Cartesian DCNL coordinate system at the dpi value given when initializing. DCNL The coordinates are floating point numbers, but otherwise DCNL precision is not lost and coordinate values are not clipped to DCNL integers.'
def close(self): DCNL 'Close the underlying file if it is open.'
def _output(self): DCNL 'Output the text and boxes belonging to the most recent page. DCNL page = dvi._output()'
def _read(self): DCNL 'Read one page from the file. Return True if successful, DCNL False if there were no more pages.'
def _arg(self, nbytes, signed=False): DCNL 'Read and return an integer argument "nbytes" long. DCNL Signedness is determined by the "signed" keyword.'
def _dispatch(self, byte): DCNL 'Based on the opcode "byte", read the correct kinds of DCNL arguments from the dvi file and call the method implementing DCNL that opcode with those arguments.'
def _width_of(self, char): DCNL 'Width of char in dvi units. For internal use by dviread.py.'
def _parse(self, file): DCNL 'Parse each line into words.'
def _register(self, words): DCNL 'Register a font described by "words". DCNL The format is, AFAIK: texname fontname [effects and filenames] DCNL Effects are PostScript snippets like ".177 SlantFont", DCNL filenames begin with one or two less-than signs. A filename DCNL ending in enc is an encoding file, other filenames are font DCNL files. This can be overridden with a left bracket: <[foobar DCNL indicates an encoding file named foobar. DCNL There is some difference between <foo.pfb and <<bar.pfb in DCNL subsetting, but I have no example of << in my TeX installation.'
def __init__(self, edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', antialiaseds=None, offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5.0, urls=None, **kwargs): DCNL 'Create a Collection DCNL %(Collection)s'
def _prepare_points(self): DCNL 'Point prep for drawing and hit testing'
def contains(self, mouseevent): DCNL 'Test whether the mouse event occurred in the collection. DCNL Returns True | False, ``dict(ind=itemlist)``, where every DCNL item in itemlist contains the event.'
def set_offsets(self, offsets): DCNL 'Set the offsets for the collection.  *offsets* can be a scalar DCNL or a sequence. DCNL ACCEPTS: float or sequence of floats'
def get_offsets(self): DCNL 'Return the offsets for the collection.'
def set_linewidth(self, lw): DCNL 'Set the linewidth(s) for the collection.  *lw* can be a scalar DCNL or a sequence; if it is a sequence the patches will cycle DCNL through the sequence DCNL ACCEPTS: float or sequence of floats'
def set_linewidths(self, lw): DCNL 'alias for set_linewidth'
def set_lw(self, lw): DCNL 'alias for set_linewidth'
def set_linestyle(self, ls): DCNL 'Set the linestyle(s) for the collection. DCNL ACCEPTS: [\'solid\' | \'dashed\', \'dashdot\', \'dotted\' | DCNL (offset, on-off-dash-seq) ]'
def set_linestyles(self, ls): DCNL 'alias for set_linestyle'
def set_dashes(self, ls): DCNL 'alias for set_linestyle'
def set_antialiased(self, aa): DCNL 'Set the antialiasing state for rendering. DCNL ACCEPTS: Boolean or sequence of booleans'
def set_antialiaseds(self, aa): DCNL 'alias for set_antialiased'
def set_color(self, c): DCNL 'Set both the edgecolor and the facecolor. DCNL ACCEPTS: matplotlib color arg or sequence of rgba tuples DCNL .. seealso:: DCNL :meth:`set_facecolor`, :meth:`set_edgecolor`'
def set_facecolor(self, c): DCNL 'Set the facecolor(s) of the collection.  *c* can be a DCNL matplotlib color arg (all patches have same color), or a DCNL sequence or rgba tuples; if it is a sequence the patches will DCNL cycle through the sequence DCNL ACCEPTS: matplotlib color arg or sequence of rgba tuples'
def set_facecolors(self, c): DCNL 'alias for set_facecolor'
def set_edgecolor(self, c): DCNL 'Set the edgecolor(s) of the collection. *c* can be a DCNL matplotlib color arg (all patches have same color), or a DCNL sequence or rgba tuples; if it is a sequence the patches will DCNL cycle through the sequence. DCNL If *c* is \'face\', the edge color will always be the same as DCNL the face color. DCNL ACCEPTS: matplotlib color arg or sequence of rgba tuples'
def set_edgecolors(self, c): DCNL 'alias for set_edgecolor'
def set_alpha(self, alpha): DCNL 'Set the alpha tranparencies of the collection.  *alpha* must be DCNL a float. DCNL ACCEPTS: float'
def update_scalarmappable(self): DCNL 'If the scalar mappable array is not none, update colors DCNL from scalar data'
def update_from(self, other): DCNL 'copy properties from other to self'
def convert_mesh_to_paths(meshWidth, meshHeight, coordinates): DCNL 'Converts a given mesh into a sequence of DCNL :class:`matplotlib.path.Path` objects for easier rendering by DCNL backends that do not directly support quadmeshes. DCNL This function is primarily of use to backend implementers.'
def __init__(self, verts, sizes=None, closed=True, **kwargs): DCNL '*verts* is a sequence of ( *verts0*, *verts1*, ...) where DCNL *verts_i* is a sequence of *xy* tuples of vertices, or an DCNL equivalent :mod:`numpy` array of shape (*nv*, 2). DCNL *sizes* is *None* (default) or a sequence of floats that DCNL scale the corresponding *verts_i*.  The scaling is applied DCNL before the Artist master transform; if the latter is an identity DCNL transform, then the overall scaling is such that if DCNL *verts_i* specify a unit square, then *sizes_i* is the area DCNL of that square in points^2. DCNL If len(*sizes*) < *nv*, the additional values will be DCNL taken cyclically from the array. DCNL *closed*, when *True*, will explicitly close the polygon. DCNL %(Collection)s'
def set_verts(self, verts, closed=True): DCNL 'This allows one to delay initialization of the vertices.'
def __init__(self, xranges, yrange, **kwargs): DCNL '*xranges* DCNL sequence of (*xmin*, *xwidth*) DCNL *yrange* DCNL *ymin*, *ywidth* DCNL %(Collection)s'
@staticmethod DCNL def span_where(x, ymin, ymax, where, **kwargs): DCNL 'Create a BrokenBarHCollection to plot horizontal bars from DCNL over the regions in *x* where *where* is True.  The bars range DCNL on the y-axis from *ymin* to *ymax* DCNL A :class:`BrokenBarHCollection` is returned. DCNL *kwargs* are passed on to the collection'
def __init__(self, numsides, rotation=0, sizes=(1,), **kwargs): DCNL '*numsides* DCNL the number of sides of the polygon DCNL *rotation* DCNL the rotation of the polygon in radians DCNL *sizes* DCNL gives the area of the circle circumscribing the DCNL regular polygon in points^2 DCNL %(Collection)s DCNL Example: see :file:`examples/dynamic_collection.py` for DCNL complete example:: DCNL offsets = np.random.rand(20,2) DCNL facecolors = [cm.jet(x) for x in np.random.rand(20)] DCNL black = (0,0,0,1) DCNL collection = RegularPolyCollection( DCNL numsides=5, # a pentagon DCNL rotation=0, sizes=(50,), DCNL facecolors = facecolors, DCNL edgecolors = (black,), DCNL linewidths = (1,), DCNL offsets = offsets, DCNL transOffset = ax.transData,'
def __init__(self, segments, linewidths=None, colors=None, antialiaseds=None, linestyles='solid', offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5, **kwargs): DCNL '*segments* DCNL a sequence of (*line0*, *line1*, *line2*), where:: DCNL linen = (x0, y0), (x1, y1), ... (xm, ym) DCNL or the equivalent numpy array with two columns. Each line DCNL can be a different length. DCNL *colors* DCNL must be a sequence of RGBA tuples (eg arbitrary color DCNL strings, etc, not allowed). DCNL *antialiaseds* DCNL must be a sequence of ones or zeros DCNL *linestyles* [ \'solid\' | \'dashed\' | \'dashdot\' | \'dotted\' ] DCNL a string or dash tuple. The dash tuple is:: DCNL (offset, onoffseq), DCNL where *onoffseq* is an even length tuple of on and off ink DCNL in points. DCNL If *linewidths*, *colors*, or *antialiaseds* is None, they DCNL default to their rcParams setting, in sequence form. DCNL If *offsets* and *transOffset* are not None, then DCNL *offsets* are transformed by *transOffset* and applied after DCNL the segments have been transformed to display coordinates. DCNL If *offsets* is not None but *transOffset* is None, then the DCNL *offsets* are added to the segments before any transformation. DCNL In this case, a single offset can be specified as:: DCNL offsets=(xo,yo) DCNL and this value will be added cumulatively to each successive DCNL segment, so as to produce a set of successively offset curves. DCNL *norm* DCNL None (optional for :class:`matplotlib.cm.ScalarMappable`) DCNL *cmap* DCNL None (optional for :class:`matplotlib.cm.ScalarMappable`) DCNL *pickradius* is the tolerance for mouse clicks picking a line. DCNL The default is 5 pt. DCNL The use of :class:`~matplotlib.cm.ScalarMappable` is optional. DCNL If the :class:`~matplotlib.cm.ScalarMappable` matrix DCNL :attr:`~matplotlib.cm.ScalarMappable._A` is not None (ie a call to DCNL :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at DCNL draw time a call to scalar mappable will be made to set the colors.'
def set_color(self, c): DCNL 'Set the color(s) of the line collection.  *c* can be a DCNL matplotlib color arg (all patches have same color), or a DCNL sequence or rgba tuples; if it is a sequence the patches will DCNL cycle through the sequence DCNL ACCEPTS: matplotlib color arg or sequence of rgba tuples'
def color(self, c): DCNL 'Set the color(s) of the line collection.  *c* can be a DCNL matplotlib color arg (all patches have same color), or a DCNL sequence or rgba tuples; if it is a sequence the patches will DCNL cycle through the sequence DCNL ACCEPTS: matplotlib color arg or sequence of rgba tuples'
def __init__(self, sizes, **kwargs): DCNL '*sizes* DCNL Gives the area of the circle in points^2 DCNL %(Collection)s'
def __init__(self, widths, heights, angles, units='points', **kwargs): DCNL '*widths*: sequence DCNL half-lengths of first axes (e.g., semi-major axis lengths) DCNL *heights*: sequence DCNL half-lengths of second axes DCNL *angles*: sequence DCNL angles of first axes, degrees CCW from the X-axis DCNL *units*: [\'points\' | \'inches\' | \'dots\' | \'width\' | \'height\' | \'x\' | \'y\'] DCNL units in which majors and minors are given; \'width\' and \'height\' DCNL refer to the dimensions of the axes, while \'x\' and \'y\' DCNL refer to the *offsets* data units. DCNL Additional kwargs inherited from the base :class:`Collection`: DCNL %(Collection)s'
def __init__(self, patches, match_original=False, **kwargs): DCNL '*patches* DCNL a sequence of Patch objects.  This list may include DCNL a heterogeneous assortment of different patch types. DCNL *match_original* DCNL If True, use the colors and linewidths of the original DCNL patches.  If False, new colors may be assigned by DCNL providing the standard collection arguments, facecolor, DCNL edgecolor, linewidths, norm or cmap. DCNL If any of *edgecolors*, *facecolors*, *linewidths*, DCNL *antialiaseds* are None, they default to their DCNL :data:`matplotlib.rcParams` patch setting, in sequence form. DCNL The use of :class:`~matplotlib.cm.ScalarMappable` is optional. DCNL If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not DCNL None (ie a call to set_array has been made), at draw time a DCNL call to scalar mappable will be made to set the face colors.'
def __init__(self, fh): DCNL 'Parse the AFM file in file object *fh*'
def string_width_height(self, s): DCNL 'Return the string width (including kerning) and string height DCNL as a (*w*, *h*) tuple.'
def get_str_bbox_and_descent(self, s): DCNL 'Return the string bounding box'
def get_str_bbox(self, s): DCNL 'Return the string bounding box'
def get_name_char(self, c, isord=False): DCNL 'Get the name of the character, ie, \';\' is \'semicolon\''
def get_width_char(self, c, isord=False): DCNL 'Get the width of the character from the character metric WX DCNL field'
def get_width_from_char_name(self, name): DCNL 'Get the width of the character from a type1 character name'
def get_height_char(self, c, isord=False): DCNL 'Get the height of character *c* from the bounding box.  This DCNL is the ink height (space is 0)'
def get_kern_dist(self, c1, c2): DCNL 'Return the kerning pair distance (possibly 0) for chars *c1* DCNL and *c2*'
def get_kern_dist_from_name(self, name1, name2): DCNL 'Return the kerning pair distance (possibly 0) for chars DCNL *name1* and *name2*'
def get_fontname(self): DCNL 'Return the font name, eg, \'Times-Roman\''
def get_fullname(self): DCNL 'Return the font full name, eg, \'Times-Roman\''
def get_familyname(self): DCNL 'Return the font family name, eg, \'Times\''
def get_weight(self): DCNL 'Return the font weight, eg, \'Bold\' or \'Roman\''
def get_angle(self): DCNL 'Return the fontangle as float'
def get_capheight(self): DCNL 'Return the cap height as float'
def get_xheight(self): DCNL 'Return the xheight as float'
def get_underline_thickness(self): DCNL 'Return the underline thickness as float'
def get_horizontal_stem_width(self): DCNL 'Return the standard horizontal stem width as float, or *None* if DCNL not specified in AFM file.'
def get_vertical_stem_width(self): DCNL 'Return the standard vertical stem width as float, or *None* if DCNL not specified in AFM file.'
def remove(self): DCNL 'Remove the artist from the figure if possible.  The effect DCNL will not be visible until the figure is redrawn, e.g., with DCNL :meth:`matplotlib.axes.Axes.draw_idle`.  Call DCNL :meth:`matplotlib.axes.Axes.relim` to update the axes limits DCNL if desired. DCNL Note: :meth:`~matplotlib.axes.Axes.relim` will not see DCNL collections even if the collection was added to axes with DCNL *autolim* = True. DCNL Note: there is no support for removing the artist\'s legend entry.'
def have_units(self): DCNL 'Return *True* if units are set on the *x* or *y* axes'
def convert_xunits(self, x): DCNL 'For artists in an axes, if the xaxis has units support, DCNL convert *x* using xaxis unit type'
def convert_yunits(self, y): DCNL 'For artists in an axes, if the yaxis has units support, DCNL convert *y* using yaxis unit type'
def set_axes(self, axes): DCNL 'Set the :class:`~matplotlib.axes.Axes` instance in which the DCNL artist resides, if any. DCNL ACCEPTS: an :class:`~matplotlib.axes.Axes` instance'
def get_axes(self): DCNL 'Return the :class:`~matplotlib.axes.Axes` instance the artist DCNL resides in, or *None*'
def add_callback(self, func): DCNL 'Adds a callback function that will be called whenever one of DCNL the :class:`Artist`\'s properties changes. DCNL Returns an *id* that is useful for removing the callback with DCNL :meth:`remove_callback` later.'
def remove_callback(self, oid): DCNL 'Remove a callback based on its *id*. DCNL .. seealso:: DCNL :meth:`add_callback`'
def pchanged(self): DCNL 'Fire an event when property changed, calling all of the DCNL registered callbacks.'
def is_transform_set(self): DCNL 'Returns *True* if :class:`Artist` has a transform explicitly DCNL set.'
def set_transform(self, t): DCNL 'Set the :class:`~matplotlib.transforms.Transform` instance DCNL used by this artist. DCNL ACCEPTS: :class:`~matplotlib.transforms.Transform` instance'
def get_transform(self): DCNL 'Return the :class:`~matplotlib.transforms.Transform` DCNL instance used by this artist.'
def hitlist(self, event): DCNL 'List the children of the artist which contain the mouse event *event*.'
def get_children(self): DCNL 'Return a list of the child :class:`Artist`s this DCNL :class:`Artist` contains.'
def contains(self, mouseevent): DCNL 'Test whether the artist contains the mouse event. DCNL Returns the truth value and a dictionary of artist specific details of DCNL selection, such as which points are contained in the pick radius.  See DCNL individual artists for details.'
def set_contains(self, picker): DCNL 'Replace the contains test used by this artist. The new picker DCNL should be a callable function which determines whether the DCNL artist is hit by the mouse event:: DCNL hit, props = picker(artist, mouseevent) DCNL If the mouse event is over the artist, return *hit* = *True* DCNL and *props* is a dictionary of properties you want returned DCNL with the contains test. DCNL ACCEPTS: a callable function'
def get_contains(self): DCNL 'Return the _contains test used by the artist, or *None* for default.'
def pickable(self): DCNL 'Return *True* if :class:`Artist` is pickable.'
def pick(self, mouseevent): DCNL 'call signature:: DCNL pick(mouseevent) DCNL each child artist will fire a pick event if *mouseevent* is over DCNL the artist and the artist has picker set'
def set_picker(self, picker): DCNL 'Set the epsilon for picking used by this artist DCNL *picker* can be one of the following: DCNL * *None*: picking is disabled for this artist (default) DCNL * A boolean: if *True* then picking will be enabled and the DCNL artist will fire a pick event if the mouse event is over DCNL the artist DCNL * A float: if picker is a number it is interpreted as an DCNL epsilon tolerance in points and the artist will fire DCNL off an event if it\'s data is within epsilon of the mouse DCNL event.  For some artists like lines and patch collections, DCNL the artist may provide additional data to the pick event DCNL that is generated, e.g. the indices of the data within DCNL epsilon of the pick event DCNL * A function: if picker is callable, it is a user supplied DCNL function which determines whether the artist is hit by the DCNL mouse event:: DCNL hit, props = picker(artist, mouseevent) DCNL to determine the hit test.  if the mouse event is over the DCNL artist, return *hit=True* and props is a dictionary of DCNL properties you want added to the PickEvent attributes. DCNL ACCEPTS: [None|float|boolean|callable]'
def get_picker(self): DCNL 'Return the picker object used by this artist'
def is_figure_set(self): DCNL 'Returns True if the artist is assigned to a DCNL :class:`~matplotlib.figure.Figure`.'
def get_url(self): DCNL 'Returns the url'
def set_url(self, url): DCNL 'Sets the url for the artist'
def get_snap(self): DCNL 'Returns the snap setting which may be: DCNL * True: snap vertices to the nearest pixel center DCNL * False: leave vertices as-is DCNL * None: (auto) If the path contains only rectilinear line DCNL segments, round to the nearest pixel center DCNL Only supported by the Agg backends.'
def set_snap(self, snap): DCNL 'Sets the snap setting which may be: DCNL * True: snap vertices to the nearest pixel center DCNL * False: leave vertices as-is DCNL * None: (auto) If the path contains only rectilinear line DCNL segments, round to the nearest pixel center DCNL Only supported by the Agg backends.'
def get_figure(self): DCNL 'Return the :class:`~matplotlib.figure.Figure` instance the DCNL artist belongs to.'
def set_figure(self, fig): DCNL 'Set the :class:`~matplotlib.figure.Figure` instance the artist DCNL belongs to. DCNL ACCEPTS: a :class:`matplotlib.figure.Figure` instance'
def set_clip_box(self, clipbox): DCNL 'Set the artist\'s clip :class:`~matplotlib.transforms.Bbox`. DCNL ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance'
def set_clip_path(self, path, transform=None): DCNL 'Set the artist\'s clip path, which may be: DCNL * a :class:`~matplotlib.patches.Patch` (or subclass) instance DCNL * a :class:`~matplotlib.path.Path` instance, in which case DCNL an optional :class:`~matplotlib.transforms.Transform` DCNL instance may be provided, which will be applied to the DCNL path before using it for clipping. DCNL * *None*, to remove the clipping path DCNL For efficiency, if the path happens to be an axis-aligned DCNL rectangle, this method will set the clipping box to the DCNL corresponding rectangle and set the clipping path to *None*. DCNL ACCEPTS: [ (:class:`~matplotlib.path.Path`, DCNL :class:`~matplotlib.transforms.Transform`) | DCNL :class:`~matplotlib.patches.Patch` | None ]'
def get_alpha(self): DCNL 'Return the alpha value used for blending - not supported on all DCNL backends'
def get_visible(self): DCNL 'Return the artist\'s visiblity'
def get_animated(self): DCNL 'Return the artist\'s animated state'
def get_clip_on(self): DCNL 'Return whether artist uses clipping'
def get_clip_box(self): DCNL 'Return artist clipbox'
def get_clip_path(self): DCNL 'Return artist clip path'
def get_transformed_clip_path_and_affine(self): DCNL 'Return the clip path with the non-affine part of its DCNL transformation applied, and the remaining affine part of its DCNL transformation.'
def set_clip_on(self, b): DCNL 'Set whether artist uses clipping. DCNL ACCEPTS: [True | False]'
def _set_gc_clip(self, gc): DCNL 'Set the clip properly for the gc'
def draw(self, renderer, *args, **kwargs): DCNL 'Derived classes drawing method'
def set_alpha(self, alpha): DCNL 'Set the alpha value used for blending - not supported on DCNL all backends DCNL ACCEPTS: float (0.0 transparent through 1.0 opaque)'
def set_lod(self, on): DCNL 'Set Level of Detail on or off.  If on, the artists may examine DCNL things like the pixel width of the axes and draw a subset of DCNL their contents accordingly DCNL ACCEPTS: [True | False]'
def set_visible(self, b): DCNL 'Set the artist\'s visiblity. DCNL ACCEPTS: [True | False]'
def set_animated(self, b): DCNL 'Set the artist\'s animation state. DCNL ACCEPTS: [True | False]'
def update(self, props): DCNL 'Update the properties of this :class:`Artist` from the DCNL dictionary *prop*.'
def get_label(self): DCNL 'Get the label used for this artist in the legend.'
def set_label(self, s): DCNL 'Set the label to *s* for auto legend. DCNL ACCEPTS: any string'
def get_zorder(self): DCNL 'Return the :class:`Artist`\'s zorder.'
def set_zorder(self, level): DCNL 'Set the zorder for the artist.  Artists with lower zorder DCNL values are drawn first. DCNL ACCEPTS: any number'
def update_from(self, other): DCNL 'Copy properties from *other* to *self*.'
def set(self, **kwargs): DCNL 'A tkstyle set command, pass *kwargs* to set properties'
def findobj(self, match=None): DCNL 'pyplot signature: DCNL findobj(o=gcf(), match=None) DCNL Recursively find all :class:matplotlib.artist.Artist instances DCNL contained in self. DCNL *match* can be DCNL - None: return all objects contained in artist (including artist) DCNL - function with signature ``boolean = match(artist)`` used to filter matches DCNL - class instance: eg Line2D.  Only return artists of class type DCNL .. plot:: mpl_examples/pylab_examples/findobj_demo.py'
def __init__(self, o): DCNL 'Initialize the artist inspector with an DCNL :class:`~matplotlib.artist.Artist` or sequence of DCNL :class:`Artists`.  If a sequence is used, we assume it is a DCNL homogeneous sequence (all :class:`Artists` are of the same DCNL type) and it is your responsibility to make sure this is so.'
def get_aliases(self): DCNL 'Get a dict mapping *fullname* -> *alias* for each *alias* in DCNL the :class:`~matplotlib.artist.ArtistInspector`. DCNL Eg., for lines:: DCNL {\'markerfacecolor\': \'mfc\', DCNL \'linewidth\'      : \'lw\','
def get_valid_values(self, attr): DCNL 'Get the legal arguments for the setter associated with *attr*. DCNL This is done by querying the docstring of the function *set_attr* DCNL for a line that begins with ACCEPTS: DCNL Eg., for a line linestyle, return DCNL [ \'-\' | \'--\' | \'-.\' | \':\' | \'steps\' | \'None\' ]'
def _get_setters_and_targets(self): DCNL 'Get the attribute strings and a full path to where the setter DCNL is defined for all setters in an object.'
def get_setters(self): DCNL 'Get the attribute strings with setters for object.  Eg., for a line, DCNL return ``[\'markerfacecolor\', \'linewidth\', ....]``.'
def is_alias(self, o): DCNL 'Return *True* if method object *o* is an alias for another DCNL function.'
def aliased_name(self, s): DCNL 'return \'PROPNAME or alias\' if *s* has an alias, else return DCNL PROPNAME. DCNL E.g. for the line markerfacecolor property, which has an DCNL alias, return \'markerfacecolor or mfc\' and for the transform DCNL property, which does not, return \'transform\''
def aliased_name_rest(self, s, target): DCNL 'return \'PROPNAME or alias\' if *s* has an alias, else return DCNL PROPNAME formatted for ReST DCNL E.g. for the line markerfacecolor property, which has an DCNL alias, return \'markerfacecolor or mfc\' and for the transform DCNL property, which does not, return \'transform\''
def pprint_setters(self, prop=None, leadingspace=2): DCNL 'If *prop* is *None*, return a list of strings of all settable properies DCNL and their valid values. DCNL If *prop* is not *None*, it is a valid property name and that DCNL property will be returned as a string of property : valid DCNL values.'
def pprint_setters_rest(self, prop=None, leadingspace=2): DCNL 'If *prop* is *None*, return a list of strings of all settable properies DCNL and their valid values.  Format the output for ReST DCNL If *prop* is not *None*, it is a valid property name and that DCNL property will be returned as a string of property : valid DCNL values.'
def pprint_getters(self): DCNL 'Return the getters and actual values as list of strings.'
def findobj(self, match=None): DCNL 'Recursively find all :class:`matplotlib.artist.Artist` DCNL instances contained in *self*. DCNL If *match* is not None, it can be DCNL - function with signature ``boolean = match(artist)`` DCNL - class instance: eg :class:`~matplotlib.lines.Line2D` DCNL used to filter matches.'
def __getattr__(self, aname): DCNL 'supported attributes by name are: DCNL - lineno - returns the line number of the exception text DCNL - col - returns the column number of the exception text DCNL - line - returns the line containing the exception text'
def markInputline(self, markerString='>!<'): DCNL 'Extracts the exception line from the input string, and marks DCNL the location of the exception with a special symbol.'
def keys(self): DCNL 'Returns all named result keys.'
def pop(self, index=(-1)): DCNL 'Removes and returns item at specified index (default=last). DCNL Will work with either numeric indices or dict-key indicies.'
def get(self, key, defaultValue=None): DCNL 'Returns named result matching the given key, or if there is no DCNL such name, then returns the given defaultValue or None if no DCNL defaultValue is specified.'
def items(self): DCNL 'Returns all named result keys and values as a list of tuples.'
def values(self): DCNL 'Returns all named result values.'
def asList(self): DCNL 'Returns the parse results as a nested list of matching tokens, all converted to strings.'
def asDict(self): DCNL 'Returns the named parse results as dictionary.'
def copy(self): DCNL 'Returns a new copy of a ParseResults object.'
def asXML(self, doctag=None, namedItemsOnly=False, indent='', formatted=True): DCNL 'Returns the parse results as XML. Tags are created for tokens and lists that have defined results names.'
def getName(self): DCNL 'Returns the results name for this token expression.'
def dump(self, indent='', depth=0): DCNL 'Diagnostic method for listing out the contents of a ParseResults. DCNL Accepts an optional indent argument so that this string can be embedded DCNL in a nested display of other data.'
def setDefaultWhitespaceChars(chars): DCNL 'Overrides the default whitespace chars'
def copy(self): DCNL 'Make a copy of this ParserElement.  Useful for defining different parse actions DCNL for the same parsing pattern, using copies of the original parse element.'
def setName(self, name): DCNL 'Define name for this expression, for use in debugging.'
def setResultsName(self, name, listAllMatches=False): DCNL 'Define name for referencing matching tokens as a nested attribute DCNL of the returned parse results. DCNL NOTE: this returns a *copy* of the original ParserElement object; DCNL this is so that the client can define a basic element, such as an DCNL integer, and reference it in multiple places with different names.'
def setBreak(self, breakFlag=True): DCNL 'Method to invoke the Python pdb debugger when this element is DCNL about to be parsed. Set breakFlag to True to enable, False to DCNL disable.'
def _normalizeParseActionArgs(f): DCNL 'Internal method used to decorate parse actions that take fewer than 3 arguments, DCNL so that all parse actions can be called as f(s,l,t).'
def setParseAction(self, *fns, **kwargs): DCNL 'Define action to perform when successfully matching parse element definition. DCNL Parse action fn is a callable method with 0-3 arguments, called as fn(s,loc,toks), DCNL fn(loc,toks), fn(toks), or just fn(), where: DCNL - s   = the original string being parsed (see note below) DCNL - loc = the location of the matching substring DCNL - toks = a list of the matched tokens, packaged as a ParseResults object DCNL If the functions in fns modify the tokens, they can return them as the return DCNL value from fn, and the modified list of tokens will replace the original. DCNL Otherwise, fn does not need to return any value. DCNL Note: the default parsing behavior is to expand tabs in the input string DCNL before starting the parsing process.  See L{I{parseString}<parseString>} for more information DCNL on parsing strings containing <TAB>s, and suggested methods to maintain a DCNL consistent view of the parsed string, the parse location, and line and column DCNL positions within the parsed string.'
def addParseAction(self, *fns, **kwargs): DCNL 'Add parse action to expression\'s list of parse actions. See L{I{setParseAction}<setParseAction>}.'
def setFailAction(self, fn): DCNL 'Define action to perform if parsing fails at this expression. DCNL Fail acton fn is a callable function that takes the arguments DCNL fn(s,loc,expr,err) where: DCNL - s = string being parsed DCNL - loc = location where expression match was attempted and failed DCNL - expr = the parse expression that failed DCNL - err = the exception thrown DCNL The function returns no value.  It may throw ParseFatalException DCNL if it is desired to stop parsing immediately.'
def enablePackrat(): DCNL 'Enables "packrat" parsing, which adds memoizing to the parsing logic. DCNL Repeated parse attempts at the same string location (which happens DCNL often in many complex grammars) can immediately return a cached value, DCNL instead of re-executing parsing/validating code.  Memoizing is done of DCNL both valid results and parsing exceptions. DCNL This speedup may break existing programs that use parse actions that DCNL have side-effects.  For this reason, packrat parsing is disabled when DCNL you first import pyparsing.  To activate the packrat feature, your DCNL program must call the class method ParserElement.enablePackrat().  If DCNL your program uses psyco to "compile as you go", you must call DCNL enablePackrat before calling psyco.full().  If you do not do this, DCNL Python will crash.  For best results, call enablePackrat() immediately DCNL after importing pyparsing.'
def parseString(self, instring, parseAll=False): DCNL 'Execute the parse expression with the given string. DCNL This is the main interface to the client code, once the complete DCNL expression has been built. DCNL If you want the grammar to require that the entire input string be DCNL successfully parsed, then set parseAll to True (equivalent to ending DCNL the grammar with StringEnd()). DCNL Note: parseString implicitly calls expandtabs() on the input string, DCNL in order to report proper column numbers in parse actions. DCNL If the input string contains tabs and DCNL the grammar uses parse actions that use the loc argument to index into the DCNL string being parsed, you can ensure you have a consistent view of the input DCNL string by: DCNL - calling parseWithTabs on your grammar before calling parseString DCNL (see L{I{parseWithTabs}<parseWithTabs>}) DCNL - define your parse action using the full (s,loc,toks) signature, and DCNL reference the input string using the parse action\'s s argument DCNL - explictly expand the tabs in your input string before calling DCNL parseString'
def scanString(self, instring, maxMatches=_MAX_INT): DCNL 'Scan the input string for expression matches.  Each match will return the DCNL matching tokens, start location, and end location.  May be called with optional DCNL maxMatches argument, to clip scanning after \'n\' matches are found. DCNL Note that the start and end locations are reported relative to the string DCNL being parsed.  See L{I{parseString}<parseString>} for more information on parsing DCNL strings with embedded tabs.'
def transformString(self, instring): DCNL 'Extension to scanString, to modify matching text with modified tokens that may DCNL be returned from a parse action.  To use transformString, define a grammar and DCNL attach a parse action to it that modifies the returned token list. DCNL Invoking transformString() on a target string will then scan for matches, DCNL and replace the matched text patterns according to the logic in the parse DCNL action.  transformString() returns the resulting transformed string.'
def searchString(self, instring, maxMatches=_MAX_INT): DCNL 'Another extension to scanString, simplifying the access to the tokens found DCNL to match the given parse expression.  May be called with optional DCNL maxMatches argument, to clip searching after \'n\' matches are found.'
def __add__(self, other): DCNL 'Implementation of + operator - returns And'
def __radd__(self, other): DCNL 'Implementation of + operator when left operand is not a ParserElement'
def __sub__(self, other): DCNL 'Implementation of - operator, returns And with error stop'
def __rsub__(self, other): DCNL 'Implementation of - operator when left operand is not a ParserElement'
def __or__(self, other): DCNL 'Implementation of | operator - returns MatchFirst'
def __ror__(self, other): DCNL 'Implementation of | operator when left operand is not a ParserElement'
def __xor__(self, other): DCNL 'Implementation of ^ operator - returns Or'
def __rxor__(self, other): DCNL 'Implementation of ^ operator when left operand is not a ParserElement'
def __and__(self, other): DCNL 'Implementation of & operator - returns Each'
def __rand__(self, other): DCNL 'Implementation of & operator when left operand is not a ParserElement'
def __invert__(self): DCNL 'Implementation of ~ operator - returns NotAny'
def __call__(self, name): DCNL 'Shortcut for setResultsName, with listAllMatches=default:: DCNL userdata = Word(alphas).setResultsName("name") + Word(nums+"-").setResultsName("socsecno") DCNL could be written as:: DCNL userdata = Word(alphas)("name") + Word(nums+"-")("socsecno")'
def suppress(self): DCNL 'Suppresses the output of this ParserElement; useful to keep punctuation from DCNL cluttering up returned output.'
def leaveWhitespace(self): DCNL 'Disables the skipping of whitespace before matching the characters in the DCNL ParserElement\'s defined pattern.  This is normally only used internally by DCNL the pyparsing module, but may be needed in some whitespace-sensitive grammars.'
def setWhitespaceChars(self, chars): DCNL 'Overrides the default whitespace chars'
def parseWithTabs(self): DCNL 'Overrides default behavior to expand <TAB>s to spaces before parsing the input string. DCNL Must be called before parseString when the input grammar contains elements that DCNL match <TAB> characters.'
def ignore(self, other): DCNL 'Define expression to be ignored (e.g., comments) while doing pattern DCNL matching; may be called repeatedly, to define multiple comment or other DCNL ignorable patterns.'
def setDebugActions(self, startAction, successAction, exceptionAction): DCNL 'Enable display of debugging messages while doing pattern matching.'
def setDebug(self, flag=True): DCNL 'Enable display of debugging messages while doing pattern matching. DCNL Set flag to True to enable, False to disable.'
def validate(self, validateTrace=[]): DCNL 'Check defined expressions for valid structure, check for infinite recursive definitions.'
def parseFile(self, file_or_filename): DCNL 'Execute the parse expression on the given file or filename. DCNL If a filename is specified (instead of a file object), DCNL the entire file is opened, read, and closed before parsing.'
def setDefaultKeywordChars(chars): DCNL 'Overrides the default Keyword chars'
def __init__(self, pattern, flags=0): DCNL 'The parameters pattern and flags are passed to the re.compile() function as-is. See the Python re module for an explanation of the acceptable patterns and flags.'
def __init__(self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None): DCNL 'Defined with the following parameters: DCNL - quoteChar - string of one or more characters defining the quote delimiting string DCNL - escChar - character to escape quotes, typically backslash (default=None) DCNL - escQuote - special quote sequence to escape an embedded quote string (such as SQL\'s "" to escape an embedded ") (default=None) DCNL - multiline - boolean indicating whether quotes can span multiple lines (default=False) DCNL - unquoteResults - boolean indicating whether the matched text should be unquoted (default=True) DCNL - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=None => same as quoteChar)'
def leaveWhitespace(self): DCNL 'Extends leaveWhitespace defined in base class, and also invokes leaveWhitespace on DCNL all contained expressions.'
def refreshGUI(self): DCNL 'Give plot a pause, so data is drawn and GUI\'s event loop can run.'
def __init__(self, inputDimensions, columnDimensions): DCNL 'Parameters: DCNL _inputDimensions: The size of the input. (m,n) will give a size m x n DCNL _columnDimensions: The size of the 2 dimensional array of columns'
def createInput(self): DCNL 'create a random input vector'
def run(self): DCNL 'Run the spatial pooler with the input vector'
def addNoise(self, noiseLevel): DCNL 'Flip the value of 10% of input bits (add noise) DCNL :param noiseLevel: The percentage of total input bits that should be flipped'
def compute(self, inputs, outputs): DCNL 'Run one iteration of IdentityRegion\'s compute'
@classmethod DCNL def getSpec(cls): DCNL 'Return the Spec for IdentityRegion.'
def testFastLearning(self): DCNL 'Test with fast learning, make sure PAM allows us to train with fewer DCNL repeats of the training data.'
def testSlowLearning(self): DCNL 'Test with slow learning, make sure PAM allows us to train with fewer DCNL repeats of the training data.'
def testSlowLearningWithOverlap(self): DCNL 'Test with slow learning, some overlap in the patterns, and TM thresholds DCNL of 80% of newSynapseCount DCNL Make sure PAM allows us to train with fewer repeats of the training data.'
def testForbesLikeData(self): DCNL 'Test with "Forbes-like" data. A bunch of sequences of lengths between 2 DCNL and 10 elements long. DCNL We will test with both fast and slow learning. DCNL Make sure PAM allows us to train with fewer repeats of the training data.'
def _basicTest(self, tm=None): DCNL 'Test creation, pickling, and basic run of learning and inference.'
def _printOneTrainingVector(self, x): DCNL 'Print a single vector succinctly.'
def _printAllTrainingSequences(self, trainingSequences): DCNL 'Print all vectors'
def _setVerbosity(self, verbosity, tm, tmPy): DCNL 'Set verbosity level on the TM'
def _createTMs(self, numCols, fixedResources=False, checkSynapseConsistency=True): DCNL 'Create an instance of the appropriate temporal memory. We isolate DCNL all parameters as constants specified here.'
def _getSimplePatterns(self, numOnes, numPatterns): DCNL 'Very simple patterns. Each pattern has numOnes consecutive DCNL bits on. There are numPatterns*numOnes bits in the vector. These patterns DCNL are used as elements of sequences when building up a training set.'
def _buildSegmentLearningTrainingSet(self, numOnes=10, numRepetitions=10): DCNL 'A simple sequence of 5 patterns. The left half of the vector contains DCNL the pattern elements, each with numOnes consecutive bits. The right half DCNL contains numOnes random bits. The function returns a pair: DCNL trainingSequences:    A list containing numRepetitions instances of the DCNL above sequence DCNL testSequence:         A single clean test sequence containing the 5 patterns DCNL but with no noise on the right half'
def _buildSL2TrainingSet(self, numOnes=10, numRepetitions=10): DCNL 'Three simple sequences, composed of the same 5 static patterns. The left DCNL half of the vector contains the pattern elements, each with numOnes DCNL consecutive bits. The right half contains numOnes random bits. DCNL Sequence 1 is: p0, p1, p2, p3, p4 DCNL Sequence 2 is: p4, p3, p2, p1, p0 DCNL Sequence 3 is: p2, p0, p4, p1, p3 DCNL The function returns a pair: DCNL trainingSequences:    A list containing numRepetitions instances of the DCNL above sequences DCNL testSequence:         Clean test sequences with no noise on the right half'
def _testSegmentLearningSequence(self, tms, trainingSequences, testSequences, doResets=True): DCNL 'Train the given TM once on the entire training set. on the Test a single DCNL set of sequences once and check that individual predictions reflect the true DCNL relative frequencies. Return a success code. Success code is 1 for pass, 0 DCNL for fail.'
def _testSL1(self, numOnes=10, numRepetitions=6, fixedResources=False, checkSynapseConsistency=True): DCNL 'Test segment learning'
def _testSL2(self, numOnes=10, numRepetitions=10, fixedResources=False, checkSynapseConsistency=True): DCNL 'Test segment learning'
def test_SL1NoFixedResources(self): DCNL 'Test segment learning without fixed resources'
def test_SL1WithFixedResources(self): DCNL 'Test segment learning with fixed resources'
def test_SL2NoFixedResources(self): DCNL 'Test segment learning without fixed resources'
def test_SL2WithFixedResources(self): DCNL 'Test segment learning with fixed resources'
def __init__(self, requestedActivities): DCNL 'requestedActivities: a sequence of PeriodicActivityRequest elements'
def tick(self): DCNL 'Activity tick handler; services all activities DCNL Returns:      True if controlling iterator says it\'s okay to keep going; DCNL False to stop'
def __init__(self, dirPath, reason): DCNL 'dirPath:    the path that we attempted to create for experiment files DCNL reason:     any object that can be converted to a string that explains DCNL the reason (may be an exception)'
def __init__(self, problem, precursor): DCNL 'problem:    a string-convertible object that describes the problem DCNL experienced by the error-reporting funciton. DCNL precursor:  a string-convertible object that explains DCNL the original error that the error-reporting function DCNL was attempting to report when it encountered its own failure.'
@staticmethod DCNL def getInputElement(inferenceElement): DCNL 'Get the sensor input element that corresponds to the given inference DCNL element. This is mainly used for metrics and prediction logging'
@staticmethod DCNL def isTemporal(inferenceElement): DCNL 'Returns True if the inference from this timestep is predicted the input DCNL for the NEXT timestep. DCNL NOTE: This should only be checked IF THE MODEL\'S INFERENCE TYPE IS ALSO DCNL TEMPORAL. That is, a temporal model CAN have non-temporal inference elements, DCNL but a non-temporal model CANNOT have temporal inference elements'
@staticmethod DCNL def getTemporalDelay(inferenceElement, key=None): DCNL 'Returns the number of records that elapse between when an inference is DCNL made and when the corresponding input record will appear. For example, a DCNL multistep prediction for 3 timesteps out will have a delay of 3 DCNL Parameters: DCNL inferenceElement:   The InferenceElement value being delayed DCNL key:                If the inference is a dictionary type, this specifies DCNL key for the sub-inference that is being delayed'
@staticmethod DCNL def getMaxDelay(inferences): DCNL 'Returns the maximum delay for the InferenceElements in the inference DCNL dictionary DCNL Parameters: DCNL inferences:   A dictionary where the keys are InferenceElements'
@staticmethod DCNL def isTemporal(inferenceType): DCNL 'Returns True if the inference type is \'temporal\', i.e. requires a DCNL temporal memory in the network.'
def __init__(self, options, cmdLineArgs): DCNL 'Instantiate the Hypersearch worker DCNL Parameters: DCNL options:      The command line options. See the main() method for a DCNL description of these options DCNL cmdLineArgs:  Copy of the command line arguments, so we can place them DCNL in the log'
def _processUpdatedModels(self, cjDAO): DCNL 'For all models that modified their results since last time this method DCNL was called, send their latest results to the Hypersearch implementation.'
def run(self): DCNL 'Run this worker. DCNL Parameters: DCNL retval:     jobID of the job we ran. This is used by unit test code DCNL when calling this working using the --params command DCNL line option (which tells this worker to insert the job DCNL itself).'
def __init__(self, modelID, jobID, params, predictedField, reportKeyPatterns, optimizeKeyPattern, jobsDAO, modelCheckpointGUID, logLevel=None, predictionCacheMaxRecords=None): DCNL 'Parameters: DCNL modelID:    ID of this model in the models table DCNL jobID: DCNL params:     a dictionary of parameters for this dummy model. The DCNL possible keys are: DCNL delay:          OPTIONAL-This specifies the amount of time DCNL (in seconds) that the experiment should wait DCNL before STARTING to process records. This is DCNL useful for simulating workers that start/end DCNL at different times DCNL finalDelay:     OPTIONAL-This specifies the amount of time DCNL (in seconds) that the experiment should wait DCNL before it conducts its finalization operations. DCNL These operations include checking if the model DCNL is the best model, and writing out checkpoints. DCNL waitTime:       OPTIONAL-The amount of time (in seconds) DCNL to wait in a busy loop to simulate DCNL computation time on EACH ITERATION DCNL randomizeWait:  OPTIONAL-([0.0-1.0] ). Default:None DCNL If set to a value, the above specified DCNL wait time will be randomly be dithered by DCNL +/- <randomizeWait>% of the specfied value. DCNL For example, if randomizeWait=0.2, the wait DCNL time will be dithered by +/- 20% of its value. DCNL iterations:     OPTIONAL-How many iterations to run the model DCNL for. -1 means run forever (default=1) DCNL metricFunctions: OPTIONAL-A list of single argument functions DCNL serialized as strings, which return the metric DCNL value given the record number. DCNL Mutually exclusive with metricValue DCNL metricValue:    OPTIONAL-A single value to use for the metric DCNL value (used to debug hypersearch). DCNL Mutually exclusive with metricFunctions DCNL finalize:       OPTIONAL-(True/False). Default:True DCNL When False, this will prevent the model from DCNL recording it\'s metrics and performing other DCNL functions that it usually performs after the DCNL model has finished running DCNL permutationParams: A dict containing the instances of all the DCNL variables being permuted over DCNL experimentDirectory: REQUIRED-An absolute path to a directory DCNL with a valid description.py file. DCNL NOTE: This does not actually affect the DCNL running of the model or the metrics DCNL produced. It is required to create certain DCNL objects (such as the output stream) DCNL makeCheckpoint:     True to actually write a checkpoint out to DCNL disk (default: False) DCNL sysExitModelRange: A string containing two integers \'firstIdx, DCNL endIdx\'. When present, if we are running the DCNL firstIdx\'th model up to but not including the DCNL endIdx\'th model, then do a sys.exit() while DCNL running the model. This causes the worker to DCNL exit, simulating an orphaned model. DCNL delayModelRange: A string containing two integers \'firstIdx, DCNL endIdx\'. When present, if we are running the DCNL firstIdx\'th model up to but not including the DCNL endIdx\'th model, then do a delay of 10 sec. DCNL while running the model. This causes the DCNL worker to run slower and for some other worker DCNL to think the model should be orphaned. DCNL exitAfter:      The number of iterations after which the model DCNL should perform a sys exit. This is an DCNL alternative way of creating an orphaned model DCNL that use\'s the dummmy model\'s modelIndex DCNL instead of the modelID DCNL errModelRange: A string containing two integers \'firstIdx, DCNL endIdx\'. When present, if we are running the DCNL firstIdx\'th model up to but not including the DCNL endIdx\'th model, then raise an exception while DCNL running the model. This causes the model to DCNL fail with a CMPL_REASON_ERROR reason DCNL sleepModelRange: A string containing 3 integers \'firstIdx, DCNL endIdx: delay\'. When present, if we are running DCNL the firstIdx\'th model up to but not including DCNL the endIdx\'th model, then sleep for delay DCNL seconds at the beginning of the run. DCNL jobFailErr: If true, model will raise a JobFailException DCNL which should cause the job to be marked as DCNL failed and immediately cancel all other workers. DCNL predictedField:     Name of the input field for which this model is being DCNL optimized DCNL reportKeyPatterns:  list of items from the results dict to include in DCNL the report. These can be regular expressions. DCNL optimizeKeyPattern: Which report item, if any, we will be optimizing for. DCNL This can also be a regular expression, but is an error DCNL if it matches more than one key from the experiment\'s DCNL results. DCNL jobsDAO:            Jobs data access object - the interface to the DCNL jobs database which has the model\'s table. DCNL modelCheckpointGUID: DCNL A persistent, globally-unique identifier for DCNL constructing the model checkpoint key DCNL logLevel:           override logging level to this value, if not None DCNL predictionCacheMaxRecords: DCNL Maximum number of records for the prediction output cache. DCNL Pass None for the default value.'
def _loadDummyModelParameters(self, params): DCNL 'Loads all the parameters for this dummy model. For any paramters DCNL specified as lists, read the appropriate value for this model using the model DCNL index'
def _computModelDelay(self): DCNL 'Computes the amount of time (if any) to delay the run of this model. DCNL This can be determined by two mutually exclusive parameters: DCNL delay and sleepModelRange. DCNL \'delay\' specifies the number of seconds a model should be delayed. If a list DCNL is specified, the appropriate amount of delay is determined by using the DCNL model\'s modelIndex property. DCNL However, this doesn\'t work when testing orphaned models, because the DCNL modelIndex will be the same for every recovery attempt. Therefore, every DCNL recovery attempt will also be delayed and potentially orphaned. DCNL \'sleepModelRange\' doesn\'t use the modelIndex property for a model, but rather DCNL sees which order the model is in the database, and uses that to determine DCNL whether or not a model should be delayed.'
def _getMetrics(self): DCNL 'Protected function that can be overridden by subclasses. Its main purpose DCNL is to allow the the OPFDummyModelRunner to override this with deterministic DCNL values DCNL Returns: All the metrics being computed for this model'
def run(self): DCNL 'Runs the given OPF task against the given Model instance'
def _createPredictionLogger(self): DCNL 'Creates the model\'s PredictionLogger object, which is an interface to write DCNL model results to a permanent storage location'
def __shouldSysExit(self, iteration): DCNL 'Checks to see if the model should exit based on the exitAfter dummy DCNL parameter'
def __init__(self, hsObj): DCNL 'Create our state object. DCNL Parameters: DCNL hsObj:     Reference to the HypersesarchV2 instance DCNL cjDAO:     ClientJobsDAO instance DCNL logger:    logger to use DCNL jobID:     our JobID'
def isDirty(self): DCNL 'Return true if our local copy of the state has changed since the DCNL last time we read from the DB.'
def isSearchOver(self): DCNL 'Return true if the search should be considered over.'
def readStateFromDB(self): DCNL 'Set our state to that obtained from the engWorkerState field of the DCNL job record. DCNL Parameters: DCNL stateJSON:    JSON encoded state from job record'
def writeStateToDB(self): DCNL 'Update the state in the job record with our local changes (if any). DCNL If we don\'t have the latest state in our priorStateJSON, then re-load DCNL in the latest state and return False. If we were successful writing out DCNL our changes, return True DCNL Parameters: DCNL retval:    True if we were successful writing out our changes DCNL False if our priorState is not the latest that was in the DB. DCNL In this case, we will re-load our state from the DB'
def getEncoderNameFromKey(self, key): DCNL 'Given an encoder dictionary key, get the encoder name. DCNL Encoders are a sub-dict within model params, and in HSv2, their key DCNL is structured like this for example: DCNL \'modelParams|sensorParams|encoders|home_winloss\' DCNL The encoderName is the last word in the | separated key name'
def getEncoderKeyFromName(self, name): DCNL 'Given an encoder name, get the key. DCNL Encoders are a sub-dict within model params, and in HSv2, their key DCNL is structured like this for example: DCNL \'modelParams|sensorParams|encoders|home_winloss\' DCNL The encoderName is the last word in the | separated key name'
def getFieldContributions(self): DCNL 'Return the field contributions statistics. DCNL Parameters: DCNL retval:   Dictionary where the keys are the field names and the values DCNL are how much each field contributed to the best score.'
def getAllSwarms(self, sprintIdx): DCNL 'Return the list of all swarms in the given sprint. DCNL Parameters: DCNL retval:   list of active swarm Ids in the given sprint'
def getActiveSwarms(self, sprintIdx=None): DCNL 'Return the list of active swarms in the given sprint. These are swarms DCNL which still need new particles created in them. DCNL Parameters: DCNL sprintIdx:    which sprint to query. If None, get active swarms from all DCNL sprints DCNL retval:   list of active swarm Ids in the given sprint'
def getNonKilledSwarms(self, sprintIdx): DCNL 'Return the list of swarms in the given sprint that were not killed. DCNL This is called when we are trying to figure out which encoders to carry DCNL forward to the next sprint. We don\'t want to carry forward encoder DCNL combintations which were obviously bad (in killed swarms). DCNL Parameters: DCNL retval:   list of active swarm Ids in the given sprint'
def getCompletedSwarms(self): DCNL 'Return the list of all completed swarms. DCNL Parameters: DCNL retval:   list of active swarm Ids'
def getCompletingSwarms(self): DCNL 'Return the list of all completing swarms. DCNL Parameters: DCNL retval:   list of active swarm Ids'
def bestModelInCompletedSwarm(self, swarmId): DCNL 'Return the best model ID and it\'s errScore from the given swarm. DCNL If the swarm has not completed yet, the bestModelID will be None. DCNL Parameters: DCNL retval:   (modelId, errScore)'
def bestModelInCompletedSprint(self, sprintIdx): DCNL 'Return the best model ID and it\'s errScore from the given sprint. DCNL If the sprint has not completed yet, the bestModelID will be None. DCNL Parameters: DCNL retval:   (modelId, errScore)'
def bestModelInSprint(self, sprintIdx): DCNL 'Return the best model ID and it\'s errScore from the given sprint, DCNL which may still be in progress. This returns the best score from all models DCNL in the sprint which have matured so far. DCNL Parameters: DCNL retval:   (modelId, errScore)'
def setSwarmState(self, swarmId, newStatus): DCNL 'Change the given swarm\'s state to \'newState\'. If \'newState\' is DCNL \'completed\', then bestModelId and bestErrScore must be provided. DCNL Parameters: DCNL swarmId:      swarm Id DCNL newStatus:    new status, either \'active\', \'completing\', \'completed\', or DCNL \'killed\''
def anyGoodSprintsActive(self): DCNL 'Return True if there are any more good sprints still being explored. DCNL A \'good\' sprint is one that is earlier than where we detected an increase DCNL in error from sprint to subsequent sprint.'
def isSprintCompleted(self, sprintIdx): DCNL 'Return True if the given sprint has completed.'
def killUselessSwarms(self): DCNL 'See if we can kill off some speculative swarms. If an earlier sprint DCNL has finally completed, we can now tell which fields should *really* be present DCNL in the sprints we\'ve already started due to speculation, and kill off the DCNL swarms that should not have been included.'
def isSprintActive(self, sprintIdx): DCNL 'If the given sprint exists and is active, return active=True. DCNL If the sprint does not exist yet, this call will create it (and return DCNL active=True). If it already exists, but is completing or complete, return DCNL active=False. DCNL If sprintIdx is past the end of the possible sprints, return DCNL active=False, noMoreSprints=True DCNL IMPORTANT: When speculative particles are enabled, this call has some DCNL special processing to handle speculative sprints: DCNL * When creating a new speculative sprint (creating sprint N before DCNL sprint N-1 has completed), it initially only puts in only ONE swarm into DCNL the sprint. DCNL * Every time it is asked if sprint N is active, it also checks to see if DCNL it is time to add another swarm to the sprint, and adds a new swarm if DCNL appropriate before returning active=True DCNL * We decide it is time to add a new swarm to a speculative sprint when ALL DCNL of the currently active swarms in the sprint have all the workers they DCNL need (number of running (not mature) particles is _minParticlesPerSwarm). DCNL This means that we have capacity to run additional particles in a new DCNL swarm. DCNL It is expected that the sprints will be checked IN ORDER from 0 on up. (It DCNL is an error not to) The caller should always try to allocate from the first DCNL active sprint it finds. If it can\'t, then it can call this again to DCNL find/create the next active sprint. DCNL Parameters: DCNL retval:   (active, noMoreSprints) DCNL active: True if the given sprint is active DCNL noMoreSprints: True if there are no more sprints possible'
def debug(self, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with severity \'DEBUG\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)'
def info(self, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with severity \'INFO\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.info("Houston, we have a %s", "interesting problem", exc_info=1)'
def warning(self, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with severity \'WARNING\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.warning("Houston, we have a %s", "bit of a problem", exc_info=1)'
def error(self, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with severity \'ERROR\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.error("Houston, we have a %s", "major problem", exc_info=1)'
def critical(self, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with severity \'CRITICAL\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.critical("Houston, we have a %s", "major disaster", exc_info=1)'
def log(self, level, msg, *args, **kwargs): DCNL 'Log \'msg % args\' with the integer severity \'level\'. DCNL To pass exception information, use the keyword argument exc_info with DCNL a true value, e.g. DCNL logger.log(level, "We have a %s", "mysterious problem", exc_info=1)'
def recordDataPoint(self, swarmId, generation, errScore): DCNL 'Record the best score for a swarm\'s generation index (x) DCNL Returns list of swarmIds to terminate.'
def getTerminationCallbacks(self, terminationFunc): DCNL 'Returns the periodic checks to see if the model should DCNL continue running. DCNL Parameters: DCNL terminationFunc:  The function that will be called in the model main loop DCNL as a wrapper around this function. Must have a parameter DCNL called \'index\' DCNL Returns:          A list of PeriodicActivityRequest objects.'
@classmethod DCNL def getString(cls, prop): DCNL 'Retrieve the requested property as a string. If property does not exist, DCNL then KeyError will be raised. DCNL Parameters: DCNL prop:        name of the property DCNL retval:      property value as a string'
@classmethod DCNL def getBool(cls, prop): DCNL 'Retrieve the requested property and return it as a bool. If property DCNL does not exist, then KeyError will be raised. If the property value is DCNL neither 0 nor 1, then ValueError will be raised DCNL Parameters: DCNL prop:        name of the property DCNL retval:      property value as bool'
@classmethod DCNL def getInt(cls, prop): DCNL 'Retrieve the requested property and return it as an int. If property DCNL does not exist, then KeyError will be raised. DCNL Parameters: DCNL prop:        name of the property DCNL retval:      property value as int'
@classmethod DCNL def getFloat(cls, prop): DCNL 'Retrieve the requested property and return it as a float. If property DCNL does not exist, then KeyError will be raised. DCNL Parameters: DCNL prop:        name of the property DCNL retval:      property value as float'
@classmethod DCNL def get(cls, prop, default=None): DCNL 'Get the value of the given configuration property as string. This DCNL returns a string which is the property value, or the value of "default" arg DCNL if the property is not found. Use Configuration.getString() instead. DCNL NOTE: it\'s atypical for our configuration properties to be missing - a DCNL missing configuration property is usually a very serious error. Because DCNL of this, it\'s preferable to use one of the getString, getInt, getFloat, DCNL etc. variants instead of get(). Those variants will raise KeyError when DCNL an expected property is missing. DCNL Parameters: DCNL prop:        name of the property DCNL default:     default value to return if property does not exist DCNL retval:      property value (as a string), or default if the property does DCNL not exist.'
@classmethod DCNL def set(cls, prop, value): DCNL 'Set the value of the given configuration property. DCNL Parameters: DCNL prop:        name of the property DCNL value:       value to set'
@classmethod DCNL def dict(cls): DCNL 'Return a dict containing all of the configuration properties DCNL Parameters: DCNL retval:      dict containing all configuration properties.'
@classmethod DCNL def readConfigFile(cls, filename, path=None): DCNL 'Parse the given XML file and store all properties it describes. DCNL Parameters: DCNL filename:  name of XML file to parse (no path) DCNL path:      path of the XML file. If None, then use the standard DCNL configuration search path.'
@classmethod DCNL def _readConfigFile(cls, filename, path=None): DCNL 'Parse the given XML file and return a dict describing the file. DCNL Parameters: DCNL filename:  name of XML file to parse (no path) DCNL path:      path of the XML file. If None, then use the standard DCNL configuration search path. DCNL retval:    returns a dict with each property as a key and a dict of all DCNL the property\'s attributes as value'
@classmethod DCNL def clear(cls): DCNL 'Clear out the entire configuration.'
@classmethod DCNL def findConfigFile(cls, filename): DCNL 'Search the configuration path (specified via the NTA_CONF_PATH DCNL environment variable) for the given filename. If found, return the complete DCNL path to the file. DCNL Parameters: DCNL filename:  name of file to locate'
@classmethod DCNL def getConfigPaths(cls): DCNL 'Return the list of paths to search for configuration files. DCNL Parameters: DCNL retval:    list of paths.'
@classmethod DCNL def setConfigPaths(cls, paths): DCNL 'Modify the paths we use to search for configuration files. DCNL Parameters: DCNL paths:   list of paths to search for config files.'
@classmethod DCNL def _readStdConfigFiles(cls): DCNL 'Read in all standard configuration files'
@classmethod DCNL def getCustomDict(cls): DCNL 'Return a dict containing all custom configuration properties DCNL Parameters: DCNL retval:      dict containing all custom configuration properties.'
@classmethod DCNL def setCustomProperty(cls, propertyName, value): DCNL 'Set a single custom setting and persist it to the custom DCNL configuration store. DCNL Parameters: DCNL propertyName: string containing the name of the property to get DCNL value: value to set the property to'
@classmethod DCNL def setCustomProperties(cls, properties): DCNL 'Set multiple custom properties and persist them to the custom DCNL configuration store. DCNL Parameters: DCNL properties: a dict of property name/value pairs to set'
@classmethod DCNL def clear(cls): DCNL 'Clear all configuration properties from in-memory cache, but do NOT DCNL alter the custom configuration file. Used in unit-testing.'
@classmethod DCNL def resetCustomConfig(cls): DCNL 'Clear all custom configuration settings and delete the persistent DCNL custom configuration store.'
@classmethod DCNL def loadCustomConfig(cls): DCNL 'Loads custom configuration settings from their persistent storage. DCNL DO NOT CALL THIS: It\'s typically not necessary to call this method DCNL directly - see NOTE below. DCNL NOTE: this method exists *solely* for the benefit of prepare_conf.py, which DCNL needs to load configuration files selectively.'
@classmethod DCNL def _readStdConfigFiles(cls): DCNL 'Intercept the _readStdConfigFiles call from our base config class to DCNL read in base and custom configuration settings.'
@classmethod DCNL def clear(cls, persistent=False): DCNL 'If persistent is True, delete the temporary file DCNL Parameters: DCNL persistent: if True, custom configuration file is deleted'
@classmethod DCNL def getCustomDict(cls): DCNL 'Returns a dict of all temporary values in custom configuration file'
@classmethod DCNL def edit(cls, properties): DCNL 'Edits the XML configuration file with the parameters specified by DCNL properties DCNL Parameters: DCNL properties: dict of settings to be applied to the custom configuration store DCNL (key is property name, value is value)'
@classmethod DCNL def _setPath(cls): DCNL 'Sets the path of the custom configuration file'
@classmethod DCNL def getPath(cls): DCNL 'Get the path of the custom configuration file'
def getState(self): DCNL 'Return the current state of this particle. This is used for DCNL communicating our state into a model record entry so that it can be DCNL instantiated on another worker.'
def setState(self, state): DCNL 'Set the current state of this particle. This is counterpart to getState.'
def getPosition(self): DCNL 'for int vars, returns position to nearest int DCNL Parameters: DCNL retval:     current position'
def agitate(self): DCNL 'This causes the variable to jiggle away from its current position. DCNL It does this by increasing its velocity by a multiplicative factor. DCNL Every time agitate() is called, the velocity will increase. In this way, DCNL you can call agitate over and over again until the variable reaches a DCNL new position.'
def newPosition(self, globalBestPosition, rng): DCNL 'Choose a new position based on results obtained so far from other DCNL particles and the passed in globalBestPosition. DCNL Parameters: DCNL globalBestPosition:   global best position for this colony DCNL rng:                  instance of random.Random() used for generating DCNL random numbers DCNL retval:       new position'
def pushAwayFrom(self, otherVars, rng): DCNL 'Choose a new position that is as far away as possible from all DCNL \'otherVars\', where \'otherVars\' is a list of PermuteVariable instances. DCNL Parameters: DCNL otherVars:   list of other PermuteVariables to push away from DCNL rng:                  instance of random.Random() used for generating DCNL random numbers'
def resetVelocity(self, rng): DCNL 'Reset the velocity to be some fraction of the total distance. This DCNL is called usually when we start a new swarm and want to start at the DCNL previous best position found in the previous swarm but with a DCNL velocity which is a known fraction of the total distance between min DCNL and max. DCNL Parameters: DCNL rng:                  instance of random.Random() used for generating DCNL random numbers'
def __init__(self, min, max, stepSize=None, inertia=None, cogRate=None, socRate=None): DCNL 'Construct a variable that permutes over floating point values using DCNL the Particle Swarm Optimization (PSO) algorithm. See descriptions of DCNL PSO (i.e. http://en.wikipedia.org/wiki/Particle_swarm_optimization) DCNL for references to the inertia, cogRate, and socRate parameters. DCNL Parameters: DCNL min:          min allowed value of position DCNL max:          max allowed value of position DCNL stepSize:     if not None, the position must be at min + N * stepSize, DCNL where N is an integer DCNL inertia:      The inertia for the particle. DCNL cogRate:      This parameter controls how much the particle is affected DCNL by its distance from it\'s local best position DCNL socRate:      This parameter controls how much the particle is affected DCNL by its distance from the global best position'
def __repr__(self): DCNL 'See comments in base class.'
def getState(self): DCNL 'See comments in base class.'
def setState(self, state): DCNL 'See comments in base class.'
def getPosition(self): DCNL 'See comments in base class.'
def agitate(self): DCNL 'See comments in base class.'
def newPosition(self, globalBestPosition, rng): DCNL 'See comments in base class.'
def pushAwayFrom(self, otherPositions, rng): DCNL 'See comments in base class.'
def resetVelocity(self, rng): DCNL 'See comments in base class.'
def __repr__(self): DCNL 'See comments in base class.'
def getPosition(self): DCNL 'See comments in base class.'
def __repr__(self): DCNL 'See comments in base class.'
def getState(self): DCNL 'See comments in base class.'
def setState(self, state): DCNL 'See comments in base class.'
def setResultsPerChoice(self, resultsPerChoice): DCNL 'Setup our resultsPerChoice history based on the passed in DCNL resultsPerChoice. DCNL For example, if this variable has the following choices: DCNL [\'a\', \'b\', \'c\'] DCNL resultsPerChoice will have up to 3 elements, each element is a tuple DCNL containing (choiceValue, errors) where errors is the list of errors DCNL received from models that used the specific choice: DCNL retval: DCNL [(\'a\', [0.1, 0.2, 0.3]), (\'b\', [0.5, 0.1, 0.6]), (\'c\', [0.2])]'
def getPosition(self): DCNL 'See comments in base class.'
def agitate(self): DCNL 'See comments in base class.'
def newPosition(self, globalBestPosition, rng): DCNL 'See comments in base class.'
def pushAwayFrom(self, otherPositions, rng): DCNL 'See comments in base class.'
def resetVelocity(self, rng): DCNL 'See comments in base class.'
def __repr__(self): DCNL 'See comments in base class.'
def getDict(self, encoderName, flattenedChosenValues): DCNL 'Return a dict that can be used to construct this encoder. This dict DCNL can be passed directly to the addMultipleEncoders() method of the DCNL multi encoder. DCNL Parameters: DCNL encoderName:            name of the encoder DCNL flattenedChosenValues:  dict of the flattened permutation variables. Any DCNL variables within this dict whose key starts DCNL with encoderName will be substituted for DCNL encoder constructor args which are being DCNL permuted over.'
def _testValidPositions(self, varClass, minValue, maxValue, stepSize, iterations=100): DCNL 'Run a bunch of iterations on a PermuteVar and collect which positions DCNL were visited. Verify that they were all valid.'
def _testConvergence(self, varClass, minValue, maxValue, targetValue, iterations=100): DCNL 'Test that we can converge on the right answer.'
def run(self): DCNL 'Run unit tests on this module.'
def __init__(self, hsObj, resultsDB, flattenedPermuteVars, swarmId=None, newFarFrom=None, evolveFromState=None, newFromClone=None, newParticleId=False): DCNL 'Create a particle. DCNL There are 3 fundamentally different methods of instantiating a particle: DCNL 1.) You can instantiate a new one from scratch, at generation index #0. This DCNL particle gets a new particleId. DCNL required: swarmId DCNL optional: newFarFrom DCNL must be None: evolveFromState, newFromClone DCNL 2.) You can instantiate one from savedState, in which case it\'s generation DCNL index is incremented (from the value stored in the saved state) and DCNL its particleId remains the same. DCNL required: evolveFromState DCNL optional: DCNL must be None: flattenedPermuteVars, swarmId, newFromClone DCNL 3.) You can clone another particle, creating a new particle at the same DCNL generationIdx but a different particleId. This new particle will end DCNL up at exactly the same position as the one it was cloned from. If DCNL you want to move it to the next position, or just jiggle it a bit, call DCNL newPosition() or agitate() after instantiation. DCNL required: newFromClone DCNL optional: DCNL must be None: flattenedPermuteVars, swarmId, evolveFromState DCNL Parameters: DCNL hsObj:    The HypersearchV2 instance DCNL resultsDB: the ResultsDB instance that holds all the model results DCNL flattenedPermuteVars: dict() containing the (key, PermuteVariable) pairs DCNL of the  flattened permutation variables as read from the permutations DCNL file. DCNL swarmId: String that represents the encoder names of the encoders that are DCNL to be included in this particle\'s model. Of the form DCNL \'encoder1.encoder2\'. DCNL Required for creation method #1. DCNL newFarFrom: If not None, this is a list of other particleState dicts in the DCNL swarm that we want to be as far away from as possible. Optional DCNL argument for creation method #1. DCNL evolveFromState: If not None, evolve an existing particle. This is a DCNL dict containing the particle\'s state. Preserve the particleId, but DCNL increment the generation index. Required for creation method #2. DCNL newFromClone: If not None, clone this other particle\'s position and generation DCNL index, with small random perturbations. This is a dict containing the DCNL particle\'s state. Required for creation method #3. DCNL newParticleId: Only applicable when newFromClone is True. Give the clone DCNL a new particle ID.'
def getState(self): DCNL 'Get the particle state as a dict. This is enough information to DCNL instantiate this particle on another worker.'
def initStateFrom(self, particleId, particleState, newBest): DCNL 'Init all of our variable positions, velocities, and optionally the best DCNL result and best position from the given particle. DCNL If newBest is true, we get the best result and position for this new DCNL generation from the resultsDB, This is used when evoloving a particle DCNL because the bestResult and position as stored in was the best AT THE TIME DCNL THAT PARTICLE STARTED TO RUN and does not include the best since that DCNL particle completed.'
def copyEncoderStatesFrom(self, particleState): DCNL 'Copy all encoder variables from particleState into this particle. DCNL Parameters: DCNL particleState:        dict produced by a particle\'s getState() method'
def copyVarStatesFrom(self, particleState, varNames): DCNL 'Copy specific variables from particleState into this particle. DCNL Parameters: DCNL particleState:        dict produced by a particle\'s getState() method DCNL varNames:             which variables to copy'
def getPosition(self): DCNL 'Return the position of this particle. This returns a dict() of key DCNL value pairs where each key is the name of the flattened permutation DCNL variable and the value is its chosen value. DCNL Parameters: DCNL retval:     dict() of flattened permutation choices'
@staticmethod DCNL def getPositionFromState(pState): DCNL 'Return the position of a particle given its state dict. DCNL Parameters: DCNL retval:     dict() of particle position, keys are the variable names, DCNL values are their positions'
def agitate(self): DCNL 'Agitate this particle so that it is likely to go to a new position. DCNL Every time agitate is called, the particle is jiggled an even greater DCNL amount. DCNL Parameters: DCNL retval:               None'
def newPosition(self, whichVars=None): DCNL 'Choose a new position based on results obtained so far from all other DCNL particles. DCNL Parameters: DCNL whichVars:       If not None, only move these variables DCNL retval:               new position'
def __init__(self, jobID, jobsDAO, logLevel=None): DCNL 'TODO: Documentation'
def updateResultsForJob(self, forceUpdate=True): DCNL 'Chooses the best model for a given job. DCNL Parameters DCNL forceUpdate:  (True/False). If True, the update will ignore all the DCNL restrictions on the minimum time to update and the minimum DCNL number of records to update. This should typically only be DCNL set to true if the model has completed running'
def __init__(self, options): DCNL 'Parameters: DCNL options:        NupicRunPermutations options dict DCNL retval:         nothing'
def runNewSearch(self): DCNL 'Start a new hypersearch job and monitor it to completion DCNL Parameters: DCNL retval:         nothing'
def pickupSearch(self): DCNL 'Pick up the latest search from a saved jobID and monitor it to completion DCNL Parameters: DCNL retval:         nothing'
def monitorSearchJob(self): DCNL 'Parameters: DCNL retval:         nothing'
def _launchWorkers(self, cmdLine, numWorkers): DCNL 'Launch worker processes to execute the given command line DCNL Parameters: DCNL cmdLine: The command line for each worker DCNL numWorkers: number of workers to launch'
def __startSearch(self): DCNL 'Starts HyperSearch as a worker or runs it inline for the "dryRun" action DCNL Parameters: DCNL retval:         the new _HyperSearchJob instance representing the DCNL HyperSearch job'
def peekSearchJob(self): DCNL 'Retrieves the runner\'s _HyperSearchJob instance; NOTE: only available DCNL after run(). DCNL Parameters: DCNL retval:         _HyperSearchJob instance or None'
def getDiscoveredMetricsKeys(self): DCNL 'Returns a tuple of all metrics keys discovered while running HyperSearch. DCNL NOTE: This is an optimization so that our client may DCNL use this info for generating the report csv file without having DCNL to pre-scan all modelInfos DCNL Parameters: DCNL retval:         Tuple of metrics keys discovered while running DCNL HyperSearch;'
@classmethod DCNL def printModels(cls, options): DCNL 'Prints a listing of experiments that would take place without DCNL actually executing them. DCNL Parameters: DCNL options:        NupicRunPermutations options dict DCNL retval:         nothing'
@classmethod DCNL def generateReport(cls, options, replaceReport, hyperSearchJob, metricsKeys): DCNL 'Prints all available results in the given HyperSearch job and emits DCNL model information to the permutations report csv. DCNL The job may be completed or still in progress. DCNL Parameters: DCNL options:        NupicRunPermutations options dict DCNL replaceReport:  True to replace existing report csv, if any; False to DCNL append to existing report csv, if any DCNL hyperSearchJob: _HyperSearchJob instance; if None, will get it from saved DCNL jobID, if any DCNL metricsKeys:    sequence of report metrics key names to include in report; DCNL if None, will pre-scan all modelInfos to generate a complete DCNL list of metrics key names. DCNL retval:         model parameters'
@classmethod DCNL def loadSavedHyperSearchJob(cls, permWorkDir, outputLabel): DCNL 'Instantiates a _HyperSearchJob instance from info saved in file DCNL Parameters: DCNL permWorkDir: Directory path for saved jobID file DCNL outputLabel: Label string for incorporating into file name for saved jobID DCNL retval:      _HyperSearchJob instance; raises exception if not found'
@classmethod DCNL def __saveHyperSearchJobID(cls, permWorkDir, outputLabel, hyperSearchJob): DCNL 'Saves the given _HyperSearchJob instance\'s jobID to file DCNL Parameters: DCNL permWorkDir:   Directory path for saved jobID file DCNL outputLabel:   Label string for incorporating into file name for saved jobID DCNL hyperSearchJob: _HyperSearchJob instance DCNL retval:        nothing'
@classmethod DCNL def __loadHyperSearchJobID(cls, permWorkDir, outputLabel): DCNL 'Loads a saved jobID from file DCNL Parameters: DCNL permWorkDir:  Directory path for saved jobID file DCNL outputLabel:  Label string for incorporating into file name for saved jobID DCNL retval:       HyperSearch jobID; raises exception if not found.'
@classmethod DCNL def __getHyperSearchJobIDFilePath(cls, permWorkDir, outputLabel): DCNL 'Returns filepath where to store HyperSearch JobID DCNL Parameters: DCNL permWorkDir: Directory path for saved jobID file DCNL outputLabel: Label string for incorporating into file name for saved jobID DCNL retval:      Filepath where to store HyperSearch JobID'
def __init__(self, hyperSearchJob, metricsKeys, searchVar, outputDirAbsPath, outputLabel, replaceReport): DCNL 'Parameters: DCNL hyperSearchJob: _HyperSearchJob instance DCNL metricsKeys:    sequence of report metrics key names to include in report DCNL outputDirAbsPath: DCNL Directory for creating report CSV file (absolute path) DCNL outputLabel:    A string label to incorporate into report CSV file name DCNL replaceReport:  True to replace existing report csv, if any; False to DCNL append to existing report csv, if any DCNL retval:         nothing'
def emit(self, modelInfo): DCNL 'Emit model info to csv file DCNL Parameters: DCNL modelInfo:      _NupicModelInfo instance DCNL retval:         nothing'
def finalize(self): DCNL 'Close file and print report/backup csv file paths DCNL Parameters: DCNL retval:         nothing'
def __openAndInitCSVFile(self, modelInfo): DCNL '- Backs up old report csv file; DCNL - opens the report csv file in append or overwrite mode (per DCNL self.__replaceReport); DCNL - emits column fields; DCNL - sets up self.__sortedVariableNames, self.__csvFileObj, DCNL self.__backupCSVPath, and self.__reportCSVPath DCNL Parameters: DCNL modelInfo:      First _NupicModelInfo instance passed to emit() DCNL retval:         nothing'
def __init__(self, nupicJobID): DCNL '_NupicJob constructor DCNL Parameters: DCNL retval:         Nupic Client JobID of the job'
def __repr__(self): DCNL 'Parameters: DCNL retval:         representation of this _NupicJob instance'
def getJobStatus(self, workers): DCNL 'Parameters: DCNL workers:  If this job was launched outside of the nupic job engine, then this DCNL is an array of subprocess Popen instances, one for each worker DCNL retval:         _NupicJob.JobStatus instance'
def getJobID(self): DCNL 'Semi-private method for retrieving the jobId DCNL Parameters: DCNL retval:         Nupic Client JobID of this _NupicJob instance'
def getParams(self): DCNL 'Semi-private method for retrieving the job-specific params DCNL Parameters: DCNL retval:         Job params dict corresponding to the JSON params value DCNL returned by ClientJobsDAO.jobInfo()'
def __init__(self, nupicJobID, workers): DCNL '_NupicJob.JobStatus Constructor DCNL Parameters: DCNL nupicJobID:    Nupic ClientJob ID DCNL workers:  If this job was launched outside of the Nupic job engine, then this DCNL is an array of subprocess Popen instances, one for each worker DCNL retval:       nothing'
def statusAsString(self): DCNL 'Parameters: DCNL retval:       Job status as a human-readable string'
def isWaitingToStart(self): DCNL 'Parameters: DCNL retval:       True if the job has not been started yet'
def isStarting(self): DCNL 'Parameters: DCNL retval:         True if the job is starting'
def isRunning(self): DCNL 'Parameters: DCNL retval:         True if the job is running'
def isFinished(self): DCNL 'Parameters: DCNL retval:         True if the job has finished (either with success or DCNL failure)'
def getCompletionReason(self): DCNL 'Returns _JobCompletionReason. DCNL NOTE: it\'s an error to call this method if isFinished() would return DCNL False. DCNL Parameters: DCNL retval:         _JobCompletionReason instance'
def getCompletionMsg(self): DCNL 'Returns job completion message. DCNL NOTE: it\'s an error to call this method if isFinished() would return DCNL False. DCNL Parameters: DCNL retval:         completion message'
def getWorkerCompletionMsg(self): DCNL 'Returns the worker generated completion message. DCNL NOTE: it\'s an error to call this method if isFinished() would return DCNL False. DCNL Parameters: DCNL retval:         completion message'
def getStartTime(self): DCNL 'Returns job start time. DCNL NOTE: it\'s an error to call this method if isWaitingToStart() would DCNL return True. DCNL Parameters: DCNL retval:         job processing start time'
def getEndTime(self): DCNL 'Returns job end time. DCNL NOTE: it\'s an error to call this method if isFinished() would return DCNL False. DCNL Parameters: DCNL retval:         job processing end time'
def getWorkerState(self): DCNL 'Returns the worker state field. DCNL Parameters: DCNL retval:         worker state field as a dict'
def getResults(self): DCNL 'Returns the results field. DCNL Parameters: DCNL retval:         job results field as a dict'
def getModelMilestones(self): DCNL 'Returns the model milestones field. DCNL Parameters: DCNL retval:        model milestones as a dict'
def getEngStatus(self): DCNL 'Returns the engine status field - used for progress messages DCNL Parameters: DCNL retval:        engine status field as string'
def __init__(self, reason): DCNL 'Parameters: DCNL reason:   completion reason value from ClientJobsDAO.jobInfo()'
def __init__(self, nupicJobID): DCNL 'Parameters: DCNL nupicJobID:      Nupic Client JobID of a HyperSearch job DCNL retval:         nothing'
def queryModelIDs(self): DCNL 'Queuries DB for model IDs of all currently instantiated models DCNL associated with this HyperSearch job. DCNL See also: _iterModels() DCNL Parameters: DCNL retval:         A sequence of Nupic modelIDs'
def getExpectedNumModels(self, searchMethod): DCNL 'Returns:  the total number of expected models if known, -1 if it can\'t DCNL be determined. DCNL NOTE: this can take a LONG time to complete for HyperSearches with a huge DCNL number of possible permutations. DCNL Parameters: DCNL searchMethod:   "v2" is the only method currently supported DCNL retval:         The total number of expected models, if known; -1 if unknown'
@classmethod DCNL def makeSearchJobParamsDict(cls, options, forRunning=False): DCNL 'Constructs a dictionary of HyperSearch parameters suitable for converting DCNL to json and passing as the params argument to ClientJobsDAO.jobInsert() DCNL Parameters: DCNL options:        NupicRunPermutations options dict DCNL forRunning:     True if the params are for running a Hypersearch job; False DCNL if params are for introspection only. DCNL retval:         A dictionary of HyperSearch parameters for DCNL ClientJobsDAO.jobInsert()'
@classmethod DCNL def getOptimizationMetricInfo(cls, searchJobParams): DCNL 'Retrives the optimization key name and optimization function. DCNL Parameters: DCNL searchJobParams: DCNL Parameter for passing as the searchParams arg to DCNL Hypersearch constructor. DCNL retval:       (optimizationMetricKey, maximize) DCNL optimizationMetricKey: which report key to optimize for DCNL maximize: True if we should try and maximize the optimizeKey DCNL metric. False if we should minimize it.'
def __init__(self, rawInfo): DCNL 'Parameters: DCNL rawInfo:        A single model information element as returned by DCNL ClientJobsDAO.modelsInfo() DCNL retval:         nothing.'
def __repr__(self): DCNL 'Parameters: DCNL retval:         Representation of this _NupicModelInfo instance.'
def getModelID(self): DCNL 'Parameters: DCNL retval:         Nupic modelID associated with this model info.'
def statusAsString(self): DCNL 'Parameters: DCNL retval:    Human-readable string representation of the model\'s status.'
def getModelDescription(self): DCNL 'Parameters: DCNL retval:         Printable description of the model.'
def getGeneratedDescriptionFile(self): DCNL 'Parameters: DCNL retval:         Contents of the sub-experiment description file for DCNL this model'
def getNumRecords(self): DCNL 'Paramets: DCNL retval:         The number of records processed by the model.'
def getParamLabels(self): DCNL 'Parameters: DCNL retval:         a dictionary of model parameter labels. For each entry DCNL the key is the name of the parameter and the value DCNL is the value chosen for it.'
def __unwrapParams(self): DCNL 'Unwraps self.__rawInfo.params into the equivalent python dictionary DCNL and caches it in self.__cachedParams. Returns the unwrapped params DCNL Parameters: DCNL retval:         Model params dictionary as correpsonding to the json DCNL as returned in ClientJobsDAO.modelsInfo()[x].params'
def getReportMetrics(self): DCNL 'Retrives a dictionary of metrics designated for report DCNL Parameters: DCNL retval: a dictionary of metrics that were collected for the model or DCNL an empty dictionary if there aren\'t any.'
def getOptimizationMetrics(self): DCNL 'Retrives a dictionary of metrics designagted for optimization DCNL Parameters: DCNL retval:         a dictionary of optimization metrics that were collected DCNL for the model or an empty dictionary if there aren\'t any.'
def getAllMetrics(self): DCNL 'Retrives a dictionary of metrics that combines all report and DCNL optimization metrics DCNL Parameters: DCNL retval:         a dictionary of optimization metrics that were collected DCNL for the model; an empty dictionary if there aren\'t any.'
def __unwrapResults(self): DCNL 'Unwraps self.__rawInfo.results and caches it in self.__cachedResults; DCNL Returns the unwrapped params DCNL Parameters: DCNL retval:         ModelResults namedtuple instance'
def isWaitingToStart(self): DCNL 'Parameters: DCNL retval:       True if the job has not been started yet'
def isRunning(self): DCNL 'Parameters: DCNL retval:       True if the job has not been started yet'
def isFinished(self): DCNL 'Parameters: DCNL retval:         True if the model\'s processing has completed (either with DCNL success or failure).'
def getCompletionReason(self): DCNL 'Returns _ModelCompletionReason. DCNL NOTE: it\'s an error to call this method if isFinished() would return False. DCNL Parameters: DCNL retval:         _ModelCompletionReason instance'
def getCompletionMsg(self): DCNL 'Returns model completion message. DCNL NOTE: it\'s an error to call this method if isFinished() would return False. DCNL Parameters: DCNL retval:         completion message'
def getStartTime(self): DCNL 'Returns model evaluation start time. DCNL NOTE: it\'s an error to call this method if isWaitingToStart() would DCNL return True. DCNL Parameters: DCNL retval:         model evaluation start time'
def getEndTime(self): DCNL 'Returns mode evaluation end time. DCNL NOTE: it\'s an error to call this method if isFinished() would return False. DCNL Parameters: DCNL retval:         model evaluation end time'
def __init__(self, hsObj): DCNL 'Instantiate our results database DCNL Parameters: DCNL hsObj:        Reference to the HypersearchV2 instance'
def update(self, modelID, modelParams, modelParamsHash, metricResult, completed, completionReason, matured, numRecords): DCNL 'Insert a new entry or update an existing one. If this is an update DCNL of an existing entry, then modelParams will be None DCNL Parameters: DCNL modelID:       globally unique modelID of this model DCNL modelParams:    params dict for this model, or None if this is just an update DCNL of a model that it already previously reported on. DCNL See the comments for the createModels() method for DCNL a description of this dict. DCNL modelParamsHash:  hash of the modelParams dict, generated by the worker DCNL that put it into the model database. DCNL metricResult:   value on the optimizeMetric for this model. DCNL May be None if we have no results yet. DCNL completed:      True if the model has completed evaluation, False if it DCNL is still running (and these are online results) DCNL completionReason: One of the ClientJobsDAO.CMPL_REASON_XXX equates DCNL matured:        True if this model has matured DCNL numRecords:     Number of records that have been processed so far by this DCNL model. DCNL retval: Canonicalized result on the optimize metric'
def getNumErrModels(self): DCNL 'Return number of models that completed with errors. DCNL Parameters: DCNL retval:      # if models'
def getErrModelIds(self): DCNL 'Return list of models IDs that completed with errors. DCNL Parameters: DCNL retval:      # if models'
def getNumCompletedModels(self): DCNL 'Return total number of models that completed. DCNL Parameters: DCNL retval:      # if models that completed'
def getModelIDFromParamsHash(self, paramsHash): DCNL 'Return the modelID of the model with the given paramsHash, or DCNL None if not found. DCNL Parameters: DCNL paramsHash:  paramsHash to look for DCNL retval:      modelId, or None if not found'
def numModels(self, swarmId=None, includeHidden=False): DCNL 'Return the total # of models we have in our database (if swarmId is DCNL None) or in a specific swarm. DCNL Parameters: DCNL swarmId:        A string representation of the sorted list of encoders DCNL in this swarm. For example \'__address_encoder.__gym_encoder\' DCNL includeHidden:  If False, this will only return the number of models DCNL that are not hidden (i.e. orphanned, etc.) DCNL retval:  numModels'
def bestModelIdAndErrScore(self, swarmId=None, genIdx=None): DCNL 'Return the model ID of the model with the best result so far and DCNL it\'s score on the optimize metric. If swarm is None, then it returns DCNL the global best, otherwise it returns the best for the given swarm DCNL for all generatons up to and including genIdx. DCNL Parameters: DCNL swarmId:  A string representation of the sorted list of encoders in this DCNL swarm. For example \'__address_encoder.__gym_encoder\' DCNL genIdx:   consider the best in all generations up to and including this DCNL generation if not None. DCNL retval:  (modelID, result)'
def getParticleInfo(self, modelId): DCNL 'Return particle info for a specific modelId. DCNL Parameters: DCNL modelId:  which model Id DCNL retval:  (particleState, modelId, errScore, completed, matured)'
def getParticleInfos(self, swarmId=None, genIdx=None, completed=None, matured=None, lastDescendent=False): DCNL 'Return a list of particleStates for all particles we know about in DCNL the given swarm, their model Ids, and metric results. DCNL Parameters: DCNL swarmId:  A string representation of the sorted list of encoders in this DCNL swarm. For example \'__address_encoder.__gym_encoder\' DCNL genIdx:  If not None, only return particles at this specific generation DCNL index. DCNL completed:   If not None, only return particles of the given state (either DCNL completed if \'completed\' is True, or running if \'completed\' DCNL is false DCNL matured:   If not None, only return particles of the given state (either DCNL matured if \'matured\' is True, or not matured if \'matured\' DCNL is false. Note that any model which has completed is also DCNL considered matured. DCNL lastDescendent: If True, only return particles that are the last descendent, DCNL that is, the highest generation index for a given particle Id DCNL retval:  (particleStates, modelIds, errScores, completed, matured) DCNL particleStates: list of particleStates DCNL modelIds: list of modelIds DCNL errScores: list of errScores, numpy.inf is plugged in DCNL if we don\'t have a result yet DCNL completed: list of completed booleans DCNL matured: list of matured booleans'
def getOrphanParticleInfos(self, swarmId, genIdx): DCNL 'Return a list of particleStates for all particles in the given DCNL swarm generation that have been orphaned. DCNL Parameters: DCNL swarmId:  A string representation of the sorted list of encoders in this DCNL swarm. For example \'__address_encoder.__gym_encoder\' DCNL genIdx:  If not None, only return particles at this specific generation DCNL index. DCNL retval:  (particleStates, modelIds, errScores, completed, matured) DCNL particleStates: list of particleStates DCNL modelIds: list of modelIds DCNL errScores: list of errScores, numpy.inf is plugged in DCNL if we don\'t have a result yet DCNL completed: list of completed booleans DCNL matured: list of matured booleans'
def getMaturedSwarmGenerations(self): DCNL 'Return a list of swarm generations that have completed and the DCNL best (minimal) errScore seen for each of them. DCNL Parameters: DCNL retval:  list of tuples. Each tuple is of the form: DCNL (swarmId, genIdx, bestErrScore)'
def firstNonFullGeneration(self, swarmId, minNumParticles): DCNL 'Return the generation index of the first generation in the given DCNL swarm that does not have numParticles particles in it, either still in the DCNL running state or completed. This does not include orphaned particles. DCNL Parameters: DCNL swarmId:  A string representation of the sorted list of encoders in this DCNL swarm. For example \'__address_encoder.__gym_encoder\' DCNL minNumParticles: minium number of partices required for a full DCNL generation. DCNL retval:  generation index, or None if no particles at all.'
def highestGeneration(self, swarmId): DCNL 'Return the generation index of the highest generation in the given DCNL swarm. DCNL Parameters: DCNL swarmId:  A string representation of the sorted list of encoders in this DCNL swarm. For example \'__address_encoder.__gym_encoder\' DCNL retval:  generation index'
def getParticleBest(self, particleId): DCNL 'Return the best score and position for a given particle. The position DCNL is given as a dict, with varName:varPosition items in it. DCNL Parameters: DCNL particleId:    which particle DCNL retval:        (bestResult, bestPosition)'
def getResultsPerChoice(self, swarmId, maxGenIdx, varName): DCNL 'Return a dict of the errors obtained on models that were run with DCNL each value from a PermuteChoice variable. DCNL For example, if a PermuteChoice variable has the following choices: DCNL [\'a\', \'b\', \'c\'] DCNL The dict will have 3 elements. The keys are the stringified choiceVars, DCNL and each value is tuple containing (choiceVar, errors) where choiceVar is DCNL the original form of the choiceVar (before stringification) and errors is DCNL the list of errors received from models that used the specific choice: DCNL retval: DCNL [\'a\':(\'a\', [0.1, 0.2, 0.3]), \'b\':(\'b\', [0.5, 0.1, 0.6]), \'c\':(\'c\', [])] DCNL Parameters: DCNL swarmId:  swarm Id of the swarm to retrieve info from DCNL maxGenIdx: max generation index to consider from other models, ignored DCNL if None DCNL varName:  which variable to retrieve DCNL retval:  list of the errors obtained from each choice.'
def __init__(self, searchParams, workerID=None, cjDAO=None, jobID=None, logLevel=None): DCNL 'Instantiate the HyperseachV2 instance. DCNL Parameters: DCNL searchParams:   a dict of the job\'s search parameters. The format is: DCNL persistentJobGUID:  REQUIRED. DCNL Persistent, globally-unique identifier for this job DCNL for use in constructing persistent model checkpoint DCNL keys. MUST be compatible with S3 key-naming rules, but DCNL MUST NOT contain forward slashes. This GUID is DCNL expected to retain its global uniqueness across DCNL clusters and cluster software updates (unlike the DCNL record IDs in the Engine\'s jobs table, which recycle DCNL upon table schema change and software update). In the DCNL future, this may also be instrumental for checkpoint DCNL garbage collection. DCNL permutationsPyFilename: DCNL OPTIONAL - path to permutations.py file DCNL permutationsPyContents: DCNL OPTIONAL - JSON encoded string with DCNL contents of permutations.py file DCNL descriptionPyContents: DCNL OPTIONAL - JSON encoded string with DCNL contents of base description.py file DCNL description:        OPTIONAL - JSON description of the search DCNL createCheckpoints:  OPTIONAL - Whether to create checkpoints DCNL useTerminators      OPTIONAL - True of False (default config.xml). When set DCNL to False, the model and swarm terminators DCNL are disabled DCNL maxModels:          OPTIONAL - max # of models to generate DCNL NOTE: This is a deprecated location for this DCNL setting. Now, it should be specified through DCNL the maxModels variable within the permutations DCNL file, or maxModels in the JSON description DCNL dummyModel:         OPTIONAL - Either (True/False) or a dict of parameters DCNL for a dummy model. If this key is absent, DCNL a real model is trained. DCNL See utils.py/OPFDummyModel runner for the DCNL schema of the dummy parameters DCNL speculativeParticles OPTIONAL - True or False (default obtained from DCNL nupic.hypersearch.speculative.particles.default DCNL configuration property). See note below. DCNL NOTE: The caller must provide just ONE of the following to describe the DCNL hypersearch: DCNL 1.) permutationsPyFilename DCNL OR  2.) permutationsPyContents & permutationsPyContents DCNL OR  3.) description DCNL The schema for the description element can be found at: DCNL "py/nupic/frameworks/opf/expGenerator/experimentDescriptionSchema.json" DCNL NOTE about speculativeParticles: If true (not 0), hypersearch workers will DCNL go ahead and create and run particles in subsequent sprints and DCNL generations before the current generation or sprint has been completed. If DCNL false, a worker will wait in a sleep loop until the current generation or DCNL sprint has finished before choosing the next particle position or going DCNL into the next sprint. When true, the best model can be found faster, but DCNL results are less repeatable due to the randomness of when each worker DCNL completes each particle. This property can be overridden via the DCNL speculativeParticles element of the Hypersearch job params. DCNL workerID:   our unique Hypersearch worker ID DCNL cjDAO:      ClientJobsDB Data Access Object DCNL jobID:      job ID for this hypersearch job DCNL logLevel:   override logging level to this value, if not None'
def _getStreamDef(self, modelDescription): DCNL 'Generate stream definition based on'
def __del__(self): DCNL 'Destructor; NOTE: this is not guaranteed to be called (bugs like DCNL circular references could prevent it from being called).'
def close(self): DCNL 'Deletes temporary system objects/files.'
def _readPermutationsFile(self, filename, modelDescription): DCNL 'Read the permutations file and initialize the following member variables: DCNL _predictedField: field name of the field we are trying to DCNL predict DCNL _permutations: Dict containing the full permutations dictionary. DCNL _flattenedPermutations: Dict containing the flattened version of DCNL _permutations. The keys leading to the value in the dict are joined DCNL with a period to create the new key and permute variables within DCNL encoders are pulled out of the encoder. DCNL _encoderNames: keys from self._permutations of only the encoder DCNL variables. DCNL _reportKeys:   The \'report\' list from the permutations file. DCNL This is a list of the items from each experiment\'s pickled DCNL results file that should be included in the final report. The DCNL format of each item is a string of key names separated by colons, DCNL each key being one level deeper into the experiment results DCNL dict. For example, \'key1:key2\'. DCNL _filterFunc: a user-supplied function that can be used to DCNL filter out specific permutation combinations. DCNL _optimizeKey: which report key to optimize for DCNL _maximize: True if we should try and maximize the optimizeKey DCNL metric. False if we should minimize it. DCNL _dummyModelParamsFunc: a user-supplied function that can be used to DCNL artificially generate HTMPredictionModel results. When supplied, DCNL the model is not actually run through the OPF, but instead is run DCNL through a "Dummy Model" (nupic.swarming.ModelRunner. DCNL OPFDummyModelRunner). This function returns the params dict used DCNL to control various options in the dummy model (the returned metric, DCNL the execution time, etc.). This is used for hypersearch algorithm DCNL development. DCNL Parameters: DCNL filename:     Name of permutations file DCNL retval:       None'
def getExpectedNumModels(self): DCNL 'Computes the number of models that are expected to complete as part of DCNL this instances\'s HyperSearch. DCNL NOTE: This is compute-intensive for HyperSearches with a huge number of DCNL combinations. DCNL NOTE/TODO:  THIS ONLY WORKS FOR RONOMATIC: This method is exposed for the DCNL benefit of perutations_runner.py for use in progress DCNL reporting. DCNL Parameters: DCNL retval:       The total number of expected models, if known; -1 if unknown'
def getModelNames(self): DCNL 'Generates a list of model names that are expected to complete as part of DCNL this instances\'s HyperSearch. DCNL NOTE: This is compute-intensive for HyperSearches with a huge number of DCNL combinations. DCNL NOTE/TODO:  THIS ONLY WORKS FOR RONOMATIC: This method is exposed for the DCNL benefit of perutations_runner.py. DCNL Parameters: DCNL retval:       List of model names for this HypersearchV2 instance, or DCNL None of not applicable'
def getPermutationVariables(self): DCNL 'Returns a dictionary of permutation variables. DCNL Parameters: DCNL retval:       A dictionary of permutation variables; keys are DCNL flat permutation variable names and each value is DCNL a sub-class of PermuteVariable.'
def getComplexVariableLabelLookupDict(self): DCNL 'Generates a lookup dictionary of permutation variables whose values DCNL are too complex for labels, so that artificial labels have to be generated DCNL for them. DCNL Parameters: DCNL retval:       A look-up dictionary of permutation DCNL variables whose values are too complex for labels, so DCNL artificial labels were generated instead (e.g., "Choice0", DCNL "Choice1", etc.); the key is the name of the complex variable DCNL and the value is: DCNL dict(labels=<list_of_labels>, values=<list_of_values>).'
def getOptimizationMetricInfo(self): DCNL 'Retrives the optimization key name and optimization function. DCNL Parameters: DCNL retval:       (optimizationMetricKey, maximize) DCNL optimizationMetricKey: which report key to optimize for DCNL maximize: True if we should try and maximize the optimizeKey DCNL metric. False if we should minimize it.'
def _checkForOrphanedModels(self): DCNL 'If there are any models that haven\'t been updated in a while, consider DCNL them dead, and mark them as hidden in our resultsDB. We also change the DCNL paramsHash and particleHash of orphaned models so that we can DCNL re-generate that particle and/or model again if we desire. DCNL Parameters: DCNL retval:'
def _hsStatePeriodicUpdate(self, exhaustedSwarmId=None): DCNL 'Periodically, check to see if we should remove a certain field combination DCNL from evaluation (because it is doing so poorly) or move on to the next DCNL sprint (add in more fields). DCNL This method is called from _getCandidateParticleAndSwarm(), which is called DCNL right before we try and create a new model to run. DCNL Parameters: DCNL removeSwarmId:     If not None, force a change to the current set of active DCNL swarms by removing this swarm. This is used in situations DCNL where we can\'t find any new unique models to create in DCNL this swarm. In these situations, we update the hypersearch DCNL state regardless of the timestamp of the last time another DCNL worker updated it.'
def _getCandidateParticleAndSwarm(self, exhaustedSwarmId=None): DCNL 'Find or create a candidate particle to produce a new model. DCNL At any one time, there is an active set of swarms in the current sprint, where DCNL each swarm in the sprint represents a particular combination of fields. DCNL Ideally, we should try to balance the number of models we have evaluated for DCNL each swarm at any time. DCNL This method will see how many models have been evaluated for each active DCNL swarm in the current active sprint(s) and then try and choose a particle DCNL from the least represented swarm in the first possible active sprint, with DCNL the following constraints/rules: DCNL for each active sprint: DCNL for each active swarm (preference to those with least# of models so far): DCNL 1.) The particle will be created from new (generation #0) if there are not DCNL already self._minParticlesPerSwarm particles in the swarm. DCNL 2.) Find the first gen that has a completed particle and evolve that DCNL particle to the next generation. DCNL 3.) If we got to here, we know that we have satisfied the min# of DCNL particles for the swarm, and they are all currently running (probably at DCNL various generation indexes). Go onto the next swarm DCNL If we couldn\'t find a swarm to allocate a particle in, go onto the next DCNL sprint and start allocating particles there.... DCNL Parameters: DCNL exhaustedSwarmId:   If not None, force a change to the current set of active DCNL swarms by marking this swarm as either \'completing\' or DCNL \'completed\'. If there are still models being evaluaed in DCNL it, mark it as \'completing\', else \'completed. This is DCNL used in situations where we can\'t find any new unique DCNL models to create in this swarm. In these situations, we DCNL force an update to the hypersearch state so no other DCNL worker wastes time try to use this swarm. DCNL retval: (exit, particle, swarm) DCNL exit: If true, this worker is ready to exit (particle and DCNL swarm will be None) DCNL particle: Which particle to run DCNL swarm: which swarm the particle is in DCNL NOTE: When particle and swarm are None and exit is False, it DCNL means that we need to wait for one or more other worker(s) to DCNL finish their respective models before we can pick a particle DCNL to run. This will generally only happen when speculativeParticles DCNL is set to False.'
def _okToExit(self): DCNL 'Test if it\'s OK to exit this worker. This is only called when we run DCNL out of prospective new models to evaluate. This method sees if all models DCNL have matured yet. If not, it will sleep for a bit and return False. This DCNL will indicate to the hypersearch worker that we should keep running, and DCNL check again later. This gives this worker a chance to pick up and adopt any DCNL model which may become orphaned by another worker before it matures. DCNL If all models have matured, this method will send a STOP message to all DCNL matured, running models (presummably, there will be just one - the model DCNL which thinks it\'s the best) before returning True.'
def createModels(self, numModels=1): DCNL 'Create one or more new models for evaluation. These should NOT be models DCNL that we already know are in progress (i.e. those that have been sent to us DCNL via recordModelProgress). We return a list of models to the caller DCNL (HypersearchWorker) and if one can be successfully inserted into DCNL the models table (i.e. it is not a duplicate) then HypersearchWorker will DCNL turn around and call our runModel() method, passing in this model. If it DCNL is a duplicate, HypersearchWorker will call this method again. A model DCNL is a duplicate if either the  modelParamsHash or particleHash is DCNL identical to another entry in the model table. DCNL The numModels is provided by HypersearchWorker as a suggestion as to how DCNL many models to generate. This particular implementation only ever returns 1 DCNL model. DCNL Before choosing some new models, we first do a sweep for any models that DCNL may have been abandonded by failed workers. If/when we detect an abandoned DCNL model, we mark it as complete and orphaned and hide it from any subsequent DCNL queries to our ResultsDB. This effectively considers it as if it never DCNL existed. We also change the paramsHash and particleHash in the model record DCNL of the models table so that we can create another model with the same DCNL params and particle status and run it (which we then do immediately). DCNL The modelParamsHash returned for each model should be a hash (max allowed DCNL size of ClientJobsDAO.hashMaxSize) that uniquely identifies this model by DCNL it\'s params and the optional particleHash should be a hash of the particleId DCNL and generation index. Every model that gets placed into the models database, DCNL either by this worker or another worker, will have these hashes computed for DCNL it. The recordModelProgress gets called for every model in the database and DCNL the hash is used to tell which, if any, are the same as the ones this worker DCNL generated. DCNL NOTE: We check first ourselves for possible duplicates using the paramsHash DCNL before we return a model. If HypersearchWorker failed to insert it (because DCNL some other worker beat us to it), it will turn around and call our DCNL recordModelProgress with that other model so that we now know about it. It DCNL will then call createModels() again. DCNL This methods returns an exit boolean and the model to evaluate. If there is DCNL no model to evalulate, we may return False for exit because we want to stay DCNL alive for a while, waiting for all other models to finish. This gives us DCNL a chance to detect and pick up any possibly orphaned model by another DCNL worker. DCNL Parameters: DCNL numModels:   number of models to generate DCNL retval:      (exit, models) DCNL exit: true if this worker should exit. DCNL models: list of tuples, one for each model. Each tuple contains: DCNL (modelParams, modelParamsHash, particleHash) DCNL modelParams is a dictionary containing the following elements: DCNL structuredParams: dictionary containing all variables for DCNL this model, with encoders represented as a dict within DCNL this dict (or None if they are not included. DCNL particleState: dictionary containing the state of this DCNL particle. This includes the position and velocity of DCNL each of it\'s variables, the particleId, and the particle DCNL generation index. It contains the following keys: DCNL id: The particle Id of the particle we are using to DCNL generate/track this model. This is a string of the DCNL form <hypesearchWorkerId>.<particleIdx> DCNL genIdx: the particle\'s generation index. This starts at 0 DCNL and increments every time we move the particle to a DCNL new position. DCNL swarmId: The swarmId, which is a string of the form DCNL <encoder>.<encoder>... that describes this swarm DCNL varStates: dict of the variable states. The key is the DCNL variable name, the value is a dict of the variable\'s DCNL position, velocity, bestPosition, bestResult, etc.'
def recordModelProgress(self, modelID, modelParams, modelParamsHash, results, completed, completionReason, matured, numRecords): DCNL 'Record or update the results for a model. This is called by the DCNL HSW whenever it gets results info for another model, or updated results DCNL on a model that is still running. DCNL The first time this is called for a given modelID, the modelParams will DCNL contain the params dict for that model and the modelParamsHash will contain DCNL the hash of the params. Subsequent updates of the same modelID will DCNL have params and paramsHash values of None (in order to save overhead). DCNL The Hypersearch object should save these results into it\'s own working DCNL memory into some table, which it then uses to determine what kind of DCNL new models to create next time createModels() is called. DCNL Parameters: DCNL modelID:        ID of this model in models table DCNL modelParams:    params dict for this model, or None if this is just an update DCNL of a model that it already previously reported on. DCNL See the comments for the createModels() method for a DCNL description of this dict. DCNL modelParamsHash:  hash of the modelParams dict, generated by the worker DCNL that put it into the model database. DCNL results:        tuple containing (allMetrics, optimizeMetric). Each is a DCNL dict containing metricName:result pairs. . DCNL May be none if we have no results yet. DCNL completed:      True if the model has completed evaluation, False if it DCNL is still running (and these are online results) DCNL completionReason: One of the ClientJobsDAO.CMPL_REASON_XXX equates DCNL matured:        True if this model has matured. In most cases, once a DCNL model matures, it will complete as well. The only time a DCNL model matures and does not complete is if it\'s currently DCNL the best model and we choose to keep it running to generate DCNL predictions. DCNL numRecords:     Number of records that have been processed so far by this DCNL model.'
def runModel(self, modelID, jobID, modelParams, modelParamsHash, jobsDAO, modelCheckpointGUID): DCNL 'Run the given model. DCNL This runs the model described by \'modelParams\'. Periodically, it updates DCNL the results seen on the model to the model database using the databaseAO DCNL (database Access Object) methods. DCNL Parameters: DCNL modelID:             ID of this model in models table DCNL jobID:               ID for this hypersearch job in the jobs table DCNL modelParams:         parameters of this specific model DCNL modelParams is a dictionary containing the name/value DCNL pairs of each variable we are permuting over. Note that DCNL variables within an encoder spec have their name DCNL structure as: DCNL <encoderName>.<encodrVarName> DCNL modelParamsHash:     hash of modelParamValues DCNL jobsDAO              jobs data access object - the interface to the jobs DCNL database where model information is stored DCNL modelCheckpointGUID: A persistent, globally-unique identifier for DCNL constructing the model checkpoint key'
def __init__(self, modelID, jobID, predictedField, experimentDir, reportKeyPatterns, optimizeKeyPattern, jobsDAO, modelCheckpointGUID, logLevel=None, predictionCacheMaxRecords=None): DCNL 'Parameters: DCNL modelID:            ID for this model in the models table DCNL jobID:              ID for this hypersearch job in the jobs table DCNL predictedField:     Name of the input field for which this model is being DCNL optimized DCNL experimentDir:      Directory path containing the experiment\'s DCNL description.py script DCNL reportKeyPatterns:  list of items from the results dict to include in DCNL the report. These can be regular expressions. DCNL optimizeKeyPattern: Which report item, if any, we will be optimizing for. DCNL This can also be a regular expression, but is an error DCNL if it matches more than one key from the experiment\'s DCNL results. DCNL jobsDAO:            Jobs data access object - the interface to the DCNL jobs database which has the model\'s table. DCNL modelCheckpointGUID: DCNL A persistent, globally-unique identifier for DCNL constructing the model checkpoint key. If None, then DCNL don\'t bother creating a model checkpoint. DCNL logLevel:           override logging level to this value, if not None DCNL predictionCacheMaxRecords: DCNL Maximum number of records for the prediction output cache. DCNL Pass None for default value.'
def run(self): DCNL 'Runs the OPF Model DCNL Parameters: DCNL retval:  (completionReason, completionMsg) DCNL where completionReason is one of the ClientJobsDAO.CMPL_REASON_XXX DCNL equates.'
def __runTaskMainLoop(self, numIters, learningOffAt=None): DCNL 'Main loop of the OPF Model Runner. DCNL Parameters: DCNL recordIterator:    Iterator for counting number of records (see _runTask) DCNL learningOffAt:     If not None, learning is turned off when we reach this DCNL iteration number'
def _finalize(self): DCNL 'Run final activities after a model has run. These include recording and DCNL logging the final score'
def __createModelCheckpoint(self): DCNL 'Create a checkpoint from the current model, and store it in a dir named DCNL after checkpoint GUID, and finally store the GUID in the Models DB'
def __deleteModelCheckpoint(self, modelID): DCNL 'Delete the stored checkpoint for the specified modelID. This function is DCNL called if the current model is now the best model, making the old model\'s DCNL checkpoint obsolete DCNL Parameters: DCNL modelID:      The modelID for the checkpoint to delete. This is NOT the DCNL unique checkpointID'
def _createPredictionLogger(self): DCNL 'Creates the model\'s PredictionLogger object, which is an interface to write DCNL model results to a permanent storage location'
def __getOptimizedMetricLabel(self): DCNL 'Get the label for the metric being optimized. This function also caches DCNL the label in the instance variable self._optimizedMetricLabel DCNL Parameters: DCNL metricLabels:   A sequence of all the labels being computed for this model DCNL Returns:        The label for the metric being optmized over'
def _getMetricLabels(self): DCNL 'Returns:  A list of labels that correspond to metrics being computed'
def _getFieldStats(self): DCNL 'Method which returns a dictionary of field statistics received from the DCNL input source. DCNL Returns: DCNL fieldStats: dict of dicts where the first level is the field name and DCNL the second level is the statistic. ie. fieldStats[\'pounds\'][\'min\']'
def _getMetrics(self): DCNL 'Protected function that can be overriden by subclasses. Its main purpose DCNL is to allow the the OPFDummyModelRunner to override this with deterministic DCNL values DCNL Returns: All the metrics being computed for this model'
def _updateModelDBResults(self): DCNL 'Retrieves the current results and updates the model\'s record in DCNL the Model database.'
def __updateJobResultsPeriodic(self): DCNL 'Periodic check to see if this is the best model. This should only have an DCNL effect if this is the *first* model to report its progress'
def __checkIfBestCompletedModel(self): DCNL 'Reads the current "best model" for the job and returns whether or not the DCNL current model is better than the "best model" stored for the job DCNL Returns: (isBetter, storedBest, origResultsStr) DCNL isBetter: DCNL True if the current model is better than the stored "best model" DCNL storedResults: DCNL A dict of the currently stored results in the jobs table record DCNL origResultsStr: DCNL The json-encoded string that currently resides in the "results" field DCNL of the jobs record (used to create atomicity)'
def __updateJobResults(self): DCNL 'Check if this is the best model DCNL If so: DCNL 1) Write it\'s checkpoint DCNL 2) Record this model as the best DCNL 3) Delete the previous best\'s output cache DCNL Otherwise: DCNL 1) Delete our output cache'
def _writePrediction(self, result): DCNL 'Writes the results of one iteration of a model. The results are written to DCNL this ModelRunner\'s in-memory cache unless this model is the "best model" for DCNL the job. If this model is the "best model", the predictions are written out DCNL to a permanent store via a prediction output stream instance DCNL Parameters: DCNL result:      A opf_utils.ModelResult object, which contains the input and DCNL output for this iteration'
def __writeRecordsCallback(self): DCNL 'This callback is called by self.__predictionLogger.writeRecords() DCNL between each batch of records it writes. It gives us a chance to say that DCNL the model is \'still alive\' during long write operations.'
def __flushPredictionCache(self): DCNL 'Writes the contents of this model\'s in-memory prediction cache to a permanent DCNL store via the prediction output stream instance'
def __deleteOutputCache(self, modelID): DCNL 'Delete\'s the output cache associated with the given modelID. This actually DCNL clears up the resources associated with the cache, rather than deleting al DCNL the records in the cache DCNL Parameters: DCNL modelID:      The id of the model whose output cache is being deleted'
def _initPeriodicActivities(self): DCNL 'Creates and returns a PeriodicActivityMgr instance initialized with DCNL our periodic activities DCNL Parameters: DCNL retval:             a PeriodicActivityMgr instance'
def __checkCancelation(self): DCNL 'Check if the cancelation flag has been set for this model DCNL in the Model DB'
def __checkMaturity(self): DCNL 'Save the current metric value and see if the model\'s performance has DCNL \'leveled off.\' We do this by looking at some number of previous number of DCNL recordings'
def handleWarningSignal(self, signum, frame): DCNL 'Handles a "warning signal" from the scheduler. This is received when the DCNL scheduler is about to kill the the current process so that the worker can be DCNL allocated to another job. DCNL Right now, this function just sets the current model to the "Orphaned" state DCNL in the models table so that another worker can eventually re-run this model DCNL Parameters:'
def __setAsOrphaned(self): DCNL 'Sets the current model as orphaned. This is called when the scheduler is DCNL about to kill the process to reallocate the worker to a different process.'
def GET(self): DCNL '/models DCNL returns: DCNL [model1, model2, model3, ...] list of model names'
def POST(self, name): DCNL '/models/{name} DCNL schema: DCNL "modelParams": dict containing model parameters DCNL "predictedFieldName": str DCNL returns: DCNL {"success":name}'
def POST(self, name): DCNL '/models/{name}/run DCNL schema: DCNL predictedFieldName: value DCNL timestamp: %m/%d/%y %H:%M DCNL NOTE: predictedFieldName MUST be the same name specified when DCNL creating the model. DCNL returns: DCNL "predictionNumber":<number of record>, DCNL "anomalyScore":anomalyScore'
def export(self): DCNL 'Exports a network as a networkx MultiDiGraph intermediate representation DCNL suitable for visualization. DCNL :return: networkx MultiDiGraph'
def render(self, renderer=DEFAULT_RENDERER): DCNL 'Render network. Default is DCNL :class:`~nupic.frameworks.viz.dot_renderer.DotRenderer`. DCNL :param renderer: Constructor parameter to a "renderer" implementation. DCNL Return value for which must have a "render" method that accepts a DCNL single argument (a networkx graph instance).'
def __init__(self, filePath): DCNL 'filePath: path of file where SP __init__ args are to be saved'
def __init__(self, filePath): DCNL 'filePath: path of file where TM __init__ args are to be saved'
def finishLearning(self): DCNL 'The PVM does not learn, so this function has no effect.'
def setFieldStatistics(self, fieldStats): DCNL 'Since the PVM has no use for this information, this is a no-op'
def write(self, proto): DCNL 'Serialize via capnp DCNL :param proto: capnp PreviousValueModelProto message builder'
@classmethod DCNL def read(cls, proto): DCNL 'Deserialize via capnp DCNL :param proto: capnp PreviousValueModelProto message reader DCNL :returns: new instance of PreviousValueModel deserialized from the given DCNL proto'
@classmethod DCNL def __getLogger(cls): DCNL 'Get the logger for this object. DCNL :returns: (Logger) A Logger object.'
@staticmethod DCNL def create(modelConfig, logLevel=logging.ERROR): DCNL 'Create a new model instance, given a description dictionary. DCNL :param modelConfig: (dict) DCNL A dictionary describing the current model, DCNL `described here <../../quick-start/example-model-params.html>`_. DCNL :param logLevel: (int) The level of logging output that should be generated DCNL :raises Exception: Unsupported model type DCNL :returns: :class:`nupic.frameworks.opf.model.Model`'
@staticmethod DCNL def loadFromCheckpoint(savedModelDir, newSerialization=False): DCNL 'Load saved model. DCNL :param savedModelDir: (string) DCNL Directory of where the experiment is to be or was saved DCNL :returns: (:class:`nupic.frameworks.opf.model.Model`) The loaded model DCNL instance.'
def update(self, results): DCNL 'Compute the new metrics values, given the next inference/ground-truth values DCNL :param results: (:class:`~nupic.frameworks.opf.opf_utils.ModelResult`) DCNL object that was computed during the last iteration of the model. DCNL :returns: (dict) where each key is the metric-name, and the values are DCNL it scalar value.'
def getMetrics(self): DCNL 'Gets the current metric values DCNL :returns: (dict) where each key is the metric-name, and the values are DCNL it scalar value. Same as the output of DCNL :meth:`~nupic.frameworks.opf.prediction_metrics_manager.MetricsManager.update`'
def getMetricDetails(self, metricLabel): DCNL 'Gets detailed info about a given metric, in addition to its value. This DCNL may including any statistics or auxilary data that are computed for a given DCNL metric. DCNL :param metricLabel: (string) label of the given metric (see DCNL :class:`~nupic.frameworks.opf.metrics.MetricSpec`) DCNL :returns: (dict) of metric information, as returned by DCNL :meth:`nupic.frameworks.opf.metrics.MetricsIface.getMetric`.'
def getMetricLabels(self): DCNL ':returns: (list) of labels for the metrics that are being calculated'
def _addResults(self, results): DCNL 'Stores the current model results in the manager\'s internal store DCNL Parameters: DCNL results:  A ModelResults object that contains the current timestep\'s DCNL input/inferences'
def _getGroundTruth(self, inferenceElement): DCNL 'Get the actual value for this field DCNL Parameters: DCNL sensorInputElement:       The inference element (part of the inference) that DCNL is being used for this metric'
def _getInference(self, inferenceElement): DCNL 'Get what the inferred value for this field was DCNL Parameters: DCNL inferenceElement:       The inference element (part of the inference) that DCNL is being used for this metric'
def _getRawGroundTruth(self): DCNL 'Get what the inferred value for this field was DCNL Parameters: DCNL inferenceElement:       The inference element (part of the inference) that DCNL is being used for this metric'
def __constructMetricsModules(self, metricSpecs): DCNL 'Creates the required metrics modules DCNL Parameters: DCNL metricSpecs: DCNL A sequence of MetricSpec objects that specify which metric modules to DCNL instantiate'
def getLabel(self, inferenceType=None): DCNL 'Helper method that generates a unique label for a :class:`MetricSpec` / DCNL :class:`~nupic.frameworks.opf.opf_utils.InferenceType` pair. The label is DCNL formatted as follows: DCNL <predictionKind>:<metric type>:(paramName=value)*:field=<fieldname> DCNL For example: DCNL classification:aae:paramA=10.2:paramB=20:window=100:field=pounds DCNL :returns: (string) label for inference type'
@classmethod DCNL def getInferenceTypeFromLabel(cls, label): DCNL 'Extracts the PredictionKind (temporal vs. nontemporal) from the given DCNL metric label. DCNL :param label: (string) for a metric spec generated by DCNL :meth:`getMetricLabel` DCNL :returns: (:class:`~nupic.frameworks.opf.opf_utils.InferenceType`)'
def __init__(self, windowSize=None): DCNL ':param windowSize:             The number of values that are used to compute the DCNL moving average'
def __init__(self, metricSpec): DCNL 'Initialize this metric DCNL If the params contains the key \'errorMetric\', then that is the name of DCNL another metric to which we will pass a modified groundTruth and prediction DCNL to from our addInstance() method. For example, we may compute a moving mean DCNL on the groundTruth and then pass that to the AbsoluteAveError metric'
def _getShiftedGroundTruth(self, groundTruth): DCNL 'Utility function that saves the passed in groundTruth into a local DCNL history buffer, and returns the groundTruth from self._predictionSteps ago, DCNL where self._predictionSteps is defined by the \'steps\' parameter. DCNL This can be called from the beginning of a derived class\'s addInstance() DCNL before it passes groundTruth and prediction onto accumulate().'
def addInstance(self, groundTruth, prediction, record=None, result=None): DCNL 'Compute and store metric value'
def getMetric(self): DCNL 'Return the metric value'
def mostLikely(self, pred): DCNL 'Helper function to return a scalar value representing the most DCNL likely outcome given a probability distribution'
def expValue(self, pred): DCNL 'Helper function to return a scalar value representing the expected DCNL value of a probability distribution'
def accumulate(self, groundTruth, prediction, accumulatedError, historyBuffer, result=None): DCNL 'Accumulate history of groundTruth and "prediction" values. DCNL For this metric, groundTruth is the actual category and "prediction" is a DCNL dict containing one top-level item with a key of 0 (meaning this is the DCNL 0-step classificaton) and a value which is another dict, which contains the DCNL probability for each category as output from the classifier. For example, DCNL this is what "prediction" would be if the classifier said that category 0 DCNL had a 0.6 probability and category 1 had a 0.4 probability: {0:0.6, 1: 0.4}'
def __init__(self, metricSpec): DCNL 'MetricMulti constructor using metricSpec is not allowed.'
def __init__(self, weights, metrics, window=None): DCNL 'MetricMulti DCNL @param weights - [list of floats] used as weights DCNL @param metrics - [list of submetrics] DCNL @param window - (opt) window size for moving average, or None when disabled'
def __init__(self, model, task, cmdOptions): DCNL 'Constructor DCNL Args: DCNL model: The OPF Model instance against which to run the task DCNL task: A dictionary conforming to opfTaskSchema.json DCNL cmdOptions: ParseCommandLineOptionsResult namedtuple'
def run(self): DCNL 'Runs a single experiment task'
def _createPeriodicActivities(self): DCNL 'Creates and returns a list of activites for this TaskRunner instance DCNL Returns: a list of PeriodicActivityRequest elements'
def __init__(self, requestedActivities): DCNL 'requestedActivities: a sequence of PeriodicActivityRequest elements'
def tick(self): DCNL 'Activity tick handler; services all activities DCNL Returns: DCNL True if controlling iterator says it\'s okay to keep going; DCNL False to stop'
def _translateMetricsToJSON(self, metrics, label): DCNL 'Translates the given metrics value to JSON string DCNL metrics:        A list of dictionaries per OPFTaskDriver.getMetrics(): DCNL Returns:        JSON string representing the given metrics object.'
def __init__(self, experimentDir, label, inferenceType, fields, metricNames=None, checkpointSource=None): DCNL 'Constructor DCNL experimentDir: DCNL experiment directory path that contains description.py DCNL label:        A label string to incorporate into the filename. DCNL inferenceElements: DCNL inferenceType: DCNL An constant from opf_utils.InferenceType for the DCNL requested prediction writer DCNL fields:       a non-empty sequence of nupic.data.fieldmeta.FieldMetaInfo DCNL representing fields that will be emitted to this prediction DCNL writer DCNL metricNames:  OPTIONAL - A list of metric names that well be emiited by this DCNL prediction writer DCNL checkpointSource: DCNL If not None, a File-like object containing the DCNL previously-checkpointed predictions for setting the initial DCNL contents of this PredictionOutputStream.  Will be copied DCNL before returning, if needed.'
def __openDatafile(self, modelResult): DCNL 'Open the data file and write the header row'
def setLoggedMetrics(self, metricNames): DCNL 'Tell the writer which metrics should be written DCNL Parameters: DCNL metricsNames: A list of metric lables to be written'
def close(self): DCNL '[virtual method override] Closes the writer (e.g., close the underlying DCNL file)'
def __getListMetaInfo(self, inferenceElement): DCNL 'Get field metadata information for inferences that are of list type DCNL TODO: Right now we assume list inferences are associated with the input field DCNL metadata'
def __getDictMetaInfo(self, inferenceElement, inferenceDict): DCNL 'Get field metadate information for inferences that are of dict type'
def append(self, modelResult): DCNL '[virtual method override] Emits a single prediction as input versus DCNL predicted. DCNL modelResult:    An opf_utils.ModelResult object that contains the model input DCNL and output for the current timestep.'
def checkpoint(self, checkpointSink, maxRows): DCNL '[virtual method override] Save a checkpoint of the prediction output DCNL stream. The checkpoint comprises up to maxRows of the most recent inference DCNL records. DCNL Parameters: DCNL checkpointSink:     A File-like object where predictions checkpoint data, if DCNL any, will be stored. DCNL maxRows:            Maximum number of most recent inference rows DCNL to checkpoint.'
def update(self, modelResult): DCNL 'Emit a input/prediction pair, if possible. DCNL modelResult:    An opf_utils.ModelResult object that contains the model input DCNL and output for the current timestep.'
def __init__(self, writer): DCNL 'writer:       Non-temporal prediction log writer conforming to DCNL PredictionWriterIface interface.'
def update(self, modelResult): DCNL 'Queue up the T(i+1) prediction value and emit a T(i) DCNL input/prediction pair, if possible.  E.g., if the previous T(i-1) DCNL iteration was learn-only, then we would not have a T(i) prediction in our DCNL FIFO and would not be able to emit a meaningful input/prediction DCNL pair. DCNL modelResult:    An opf_utils.ModelResult object that contains the model input DCNL and output for the current timestep.'
@staticmethod DCNL def getExperimentInferenceDirPath(experimentDir): DCNL 'experimentDir:  experiment directory path that contains description.py DCNL Returns: experiment inference directory path string (the path may not DCNL yet exist - see createExperimentInferenceDir())'
@classmethod DCNL def createExperimentInferenceDir(cls, experimentDir): DCNL 'Creates the inference output directory for the given experiment DCNL experimentDir:  experiment directory path that contains description.py DCNL Returns:  path of the inference output directory'
@staticmethod DCNL def makeDirectory(path): DCNL 'Makes directory for the given directory path if it doesn\'t already exist DCNL in the filesystem.  Creates all requested directory segments as needed. DCNL path:   path of the directory to create. DCNL Returns:      nothing'
@staticmethod DCNL def getInputElement(inferenceElement): DCNL 'Get the sensor input element that corresponds to the given inference DCNL element. This is mainly used for metrics and prediction logging DCNL :param inferenceElement: (:class:`.InferenceElement`) DCNL :return: (string) name of sensor input element'
@staticmethod DCNL def isTemporal(inferenceElement): DCNL '.. note:: This should only be checked IF THE MODEL\'S INFERENCE TYPE IS ALSO DCNL TEMPORAL. That is, a temporal model CAN have non-temporal inference DCNL elements, but a non-temporal model CANNOT have temporal inference DCNL elements. DCNL :param inferenceElement: (:class:`.InferenceElement`) DCNL :return: (bool) ``True`` if the inference from this time step is predicted DCNL the input for the NEXT time step.'
@staticmethod DCNL def getTemporalDelay(inferenceElement, key=None): DCNL ':param inferenceElement: (:class:`.InferenceElement`) value being delayed DCNL :param key: (string) If the inference is a dictionary type, this specifies DCNL key for the sub-inference that is being delayed. DCNL :return: (int) the number of records that elapse between when an inference DCNL is made and when the corresponding input record will appear. For DCNL example, a multistep prediction for 3 timesteps out will have a DCNL delay of 3.'
@staticmethod DCNL def getMaxDelay(inferences): DCNL ':param inferences: (dict) where the keys are :class:`.InferenceElement` DCNL objects. DCNL :return: (int) the maximum delay for the :class:`.InferenceElement` objects DCNL in the inference dictionary.'
@staticmethod DCNL def isTemporal(inferenceType): DCNL ':param inferenceType: (:class:`.InferenceType`) DCNL :return: (bool) `True` if the inference type is \'temporal\', i.e. requires a DCNL temporal memory in the network.'
def __init__(self, inferenceType=None, proto=None): DCNL ':param opf_utils.InferenceType inferenceType: mutually-exclusive with proto DCNL arg DCNL :param proto: capnp ModelProto message reader for deserializing; DCNL mutually-exclusive with the other constructor args.'
def run(self, inputRecord): DCNL 'Run one iteration of this model. DCNL :param inputRecord: (object) DCNL A record object formatted according to DCNL :meth:`~nupic.data.record_stream.RecordStreamIface.getNextRecord` or DCNL :meth:`~nupic.data.record_stream.RecordStreamIface.getNextRecordDict` DCNL result format. DCNL :returns: (:class:`~nupic.frameworks.opf.opf_utils.ModelResult`) DCNL An ModelResult namedtuple. The contents of ModelResult.inferences DCNL depends on the the specific inference type of this model, which DCNL can be queried by :meth:`.getInferenceType`.'
def getInferenceType(self): DCNL 'Return the InferenceType of this model. DCNL This is immutable. DCNL :returns: :class:`~nupic.frameworks.opf.opf_utils.InferenceType`'
def enableLearning(self): DCNL 'Turn Learning on for the current model.'
def disableLearning(self): DCNL 'Turn Learning off for the current model.'
def isLearningEnabled(self): DCNL 'Return the Learning state of the current model. DCNL :returns: (bool) The learning state'
def enableInference(self, inferenceArgs=None): DCNL 'Enable inference for this model. DCNL :param inferenceArgs: (dict) DCNL A dictionary of arguments required for inference. These depend on DCNL the InferenceType of the current model'
def getInferenceArgs(self): DCNL 'Return the dict of arguments for the current inference mode. DCNL :returns: (dict) The arguments of the inference mode'
def disableInference(self): DCNL 'Turn Inference off for the current model.'
def isInferenceEnabled(self): DCNL 'Return the inference state of the current model. DCNL :returns: (bool) The inference state'
@staticmethod DCNL def getSchema(): DCNL 'Return the pycapnp proto type that the class uses for serialization. DCNL This is used to convert the proto into the proper type before passing it DCNL into the read or write method of the subclass.'
@staticmethod DCNL def _getModelCheckpointFilePath(checkpointDir): DCNL 'Return the absolute path of the model\'s checkpoint file. DCNL :param checkpointDir: (string) DCNL Directory of where the experiment is to be or was saved DCNL :returns: (string) An absolute path.'
def writeToCheckpoint(self, checkpointDir): DCNL 'Serializes model using capnproto and writes data to ``checkpointDir``'
@classmethod DCNL def readFromCheckpoint(cls, checkpointDir): DCNL 'Deerializes model from checkpointDir using capnproto'
def writeBaseToProto(self, proto): DCNL 'Save the state maintained by the Model base class DCNL :param proto: capnp ModelProto message builder'
def write(self, proto): DCNL 'Write state to proto object. DCNL The type of proto is determined by :meth:`getSchema`.'
@classmethod DCNL def read(cls, proto): DCNL 'Read state from proto object. DCNL The type of proto is determined by :meth:`getSchema`.'
def save(self, saveModelDir): DCNL 'Save the model in the given directory. DCNL :param saveModelDir: (string) DCNL Absolute directory path for saving the model. This directory should DCNL only be used to store a saved model. If the directory does not exist, DCNL it will be created automatically and populated with model data. A DCNL pre-existing directory will only be accepted if it contains previously DCNL saved model data. If such a directory is given, the full contents of DCNL the directory will be deleted and replaced with current model data.'
def _serializeExtraData(self, extraDataDir): DCNL 'Protected method that is called during serialization with an external DCNL directory path. It can be overridden by subclasses to bypass pickle for DCNL saving large binary states. DCNL This is called by ModelBase only. DCNL :param extraDataDir: (string) Model\'s extra data directory path'
@classmethod DCNL def load(cls, savedModelDir): DCNL 'Load saved model. DCNL :param savedModelDir: (string) DCNL Directory of where the experiment is to be or was saved DCNL :returns: (:class:`Model`) The loaded model instance'
def _deSerializeExtraData(self, extraDataDir): DCNL 'Protected method that is called during deserialization DCNL (after __setstate__) with an external directory path. DCNL It can be overridden by subclasses to bypass pickle for loading large DCNL binary states. DCNL This is called by ModelBase only. DCNL :param extraDataDir: (string) Model\'s extra data directory path'
@staticmethod DCNL def _getModelPickleFilePath(saveModelDir): DCNL 'Return the absolute path of the model\'s pickle file. DCNL :param saveModelDir: (string) DCNL Directory of where the experiment is to be or was saved DCNL :returns: (string) An absolute path.'
@staticmethod DCNL def _getModelExtraDataDir(saveModelDir): DCNL 'Return the absolute path to the directory where the model\'s own DCNL "extra data" are stored (i.e., data that\'s too big for pickling). DCNL :param saveModelDir: (string) DCNL Directory of where the experiment is to be or was saved DCNL :returns: (string) An absolute path.'
@staticmethod DCNL def __makeDirectoryFromAbsolutePath(absDirPath): DCNL 'Make directory for the given directory path if it doesn\'t already DCNL exist in the filesystem. DCNL :param absDirPath: (string) Absolute path of the directory to create DCNL @exception (Exception) OSError if directory creation fails'
def __call__(self, topContainer): DCNL 'Resolves the referenced value.  If the result is already cached, DCNL returns it to caller. Otherwise, invokes the pure virtual method DCNL handleGetValue.  If handleGetValue() returns another value-getter, calls DCNL that value-getter to resolve the value.  This may result in a chain of calls DCNL that terminates once the value is fully resolved to a non-value-getter value. DCNL Upon return, the value is fully resolved and cached, so subsequent calls will DCNL always return the cached value reference. DCNL topContainer: The top-level container (dict, tuple, or list [sub-]instance) DCNL within whose context the value-getter is applied. DCNL Returns:  The fully-resolved value that was referenced by the value-getter DCNL instance'
def handleGetValue(self, topContainer): DCNL 'A "pure virtual" method.  The derived class MUST override this method DCNL and return the referenced value.  The derived class is NOT responsible for DCNL fully resolving the reference\'d value in the event the value resolves to DCNL another ValueGetterBase-based instance -- this is handled automatically DCNL within ValueGetterBase implementation. DCNL topContainer: The top-level container (dict, tuple, or list [sub-]instance) DCNL within whose context the value-getter is applied. DCNL Returns:      The value referenced by this instance (which may be another DCNL value-getter instance)'
def __init__(self, referenceDict, *dictKeyChain): DCNL 'referenceDict: Explicit reference dictionary that contains the field DCNL corresonding to the first key name in dictKeyChain.  This may DCNL be the result returned by the built-in globals() function, DCNL when we desire to look up a dictionary value from a dictionary DCNL referenced by a global variable within the calling module. DCNL If None is passed for referenceDict, then the topContainer DCNL parameter supplied to handleGetValue() will be used as the DCNL reference dictionary instead (this allows the desired module DCNL to designate the appropriate reference dictionary for the DCNL value-getters when it calls applyValueGettersToContainer()) DCNL dictKeyChain: One or more strings; the first string is a key (that will DCNL eventually be defined) in the reference dictionary. If DCNL additional strings are supplied, then the values DCNL correspnding to prior key strings must be dictionaries, and DCNL each additionl string references a sub-dictionary of the DCNL former. The final string is the key of the field whose value DCNL will be returned by handleGetValue(). DCNL NOTE: Its possible that the referenced value does not yet exist at the DCNL time of instantiation of this class.  It will be resolved when the DCNL base description.py calls applyValueGettersToContainer(). DCNL Example: DCNL config = dict( DCNL _dsEncoderFieldName2_N = 70, DCNL _dsEncoderFieldName2_W = 5, DCNL dsEncoderSchema = [ DCNL dict( DCNL base=dict( DCNL fieldname=\'Name2\', type=\'ScalarEncoder\', DCNL name=\'Name2\', minval=0, maxval=270, clipInput=True, DCNL n=DictValueGetter(None, \'_dsEncoderFieldName2_N\'), DCNL w=DictValueGetter(None, \'_dsEncoderFieldName2_W\')), DCNL updateConfigFromSubConfig(config) DCNL applyValueGettersToContainer(config)'
def handleGetValue(self, topContainer): DCNL 'This method overrides ValueGetterBase\'s "pure virtual" method.  It DCNL returns the referenced value.  The derived class is NOT responsible for DCNL fully resolving the reference\'d value in the event the value resolves to DCNL another ValueGetterBase-based instance -- this is handled automatically DCNL within ValueGetterBase implementation. DCNL topContainer: The top-level container (dict, tuple, or list [sub-]instance) DCNL within whose context the value-getter is applied.  If DCNL self.__referenceDict is None, then topContainer will be used DCNL as the reference dictionary for resolving our dictionary key DCNL chain. DCNL Returns:      The value referenced by this instance (which may be another DCNL value-getter instance)'
def __init__(self, *dictKeyChain): DCNL 'dictKeyChain: One or more strings; the first string is a key (that will DCNL eventually be defined) in the dictionary that will be passed DCNL to applyValueGettersToContainer(). If additional strings are DCNL supplied, then the values correspnding to prior key strings DCNL must be dictionaries, and each additionl string references a DCNL sub-dictionary of the former. The final string is the key of DCNL the field whose value will be returned by this value-getter DCNL NOTE: its possible that the referenced value does not yet exist at the DCNL time of instantiation of this class.  It will be resolved when the DCNL base description.py calls applyValueGettersToContainer(). DCNL Example: DCNL config = dict( DCNL _dsEncoderFieldName2_N = 70, DCNL _dsEncoderFieldName2_W = 5, DCNL dsEncoderSchema = [ DCNL dict( DCNL base=dict( DCNL fieldname=\'Name2\', type=\'ScalarEncoder\', DCNL name=\'Name2\', minval=0, maxval=270, clipInput=True, DCNL n=DeferredDictLookup(\'_dsEncoderFieldName2_N\'), DCNL w=DeferredDictLookup(\'_dsEncoderFieldName2_W\')), DCNL updateConfigFromSubConfig(config) DCNL applyValueGettersToContainer(config)'
def _getImpl(self, model): DCNL 'Creates and returns the _IterationPhase-based instance corresponding DCNL to this phase specification DCNL model:          Model instance'
def _getImpl(self, model): DCNL 'Creates and returns the _IterationPhase-based instance corresponding DCNL to this phase specification DCNL model:          Model instance'
def _getImpl(self, model): DCNL 'Creates and returns the _IterationPhase-based instance corresponding DCNL to this phase specification DCNL model:          Model instance'
def replaceIterationCycle(self, phaseSpecs): DCNL 'Replaces the Iteration Cycle phases DCNL :param phaseSpecs: Iteration cycle description consisting of a sequence of DCNL IterationPhaseSpecXXXXX elements that are performed in the DCNL given order'
def setup(self): DCNL 'Performs initial setup activities, including \'setup\' callbacks. This DCNL method MUST be called once before the first call to DCNL :meth:`handleInputRecord`.'
def finalize(self): DCNL 'Perform final activities, including \'finish\' callbacks. This DCNL method MUST be called once after the last call to :meth:`handleInputRecord`.'
def handleInputRecord(self, inputRecord): DCNL 'Processes the given record according to the current iteration cycle phase DCNL :param inputRecord: (object) record expected to be returned from DCNL :meth:`nupic.data.record_stream.RecordStreamIface.getNextRecord`. DCNL :returns: :class:`nupic.frameworks.opf.opf_utils.ModelResult`'
def getMetrics(self): DCNL 'Gets the current metric values DCNL :returns: A dictionary of metric values. The key for each entry is the label DCNL for the metric spec, as generated by DCNL :meth:`nupic.frameworks.opf.metrics.MetricSpec.getLabel`. The DCNL value for each entry is a dictionary containing the value of the DCNL metric as returned by DCNL :meth:`nupic.frameworks.opf.metrics.MetricsIface.getMetric`.'
def getMetricLabels(self): DCNL ':returns: (list) labels for the metrics that are being calculated'
def __init__(self, model, phaseSpecs): DCNL 'model:   Model instance DCNL phaseSpecs:   Iteration period description consisting of a sequence of DCNL IterationPhaseSpecXXXXX elements that are performed in the DCNL given order'
def __advancePhase(self): DCNL 'Advance to the next iteration cycle phase'
def handleInputRecord(self, inputRecord): DCNL 'Processes the given record according to the current phase DCNL inputRecord:  record object formatted according to DCNL nupic.data.FileSource.getNext() result format. DCNL Returns:      An opf_utils.ModelResult object with the inputs and inferences DCNL after the current record is processed by the model'
def __init__(self, nIters): DCNL 'nIters:       Number of iterations; MUST be greater than 0'
@abstractmethod DCNL def enterPhase(self): DCNL 'Performs initialization that is necessary upon entry to the phase. Must DCNL be called before handleInputRecord() at the beginning of each phase'
def advance(self): DCNL 'Advances the iteration; DCNL Returns:      True if more iterations remain; False if this is the final DCNL iteration.'
def __init__(self, model, nIters): DCNL 'model:        Model instance DCNL nIters:       Number of iterations; MUST be greater than 0'
def enterPhase(self): DCNL '[_IterationPhase method implementation] DCNL Performs initialization that is necessary upon entry to the phase. Must DCNL be called before handleInputRecord() at the beginning of each phase'
def __init__(self, model, nIters, inferenceArgs): DCNL 'model:        Model instance DCNL nIters:       Number of iterations; MUST be greater than 0 DCNL inferenceArgs: DCNL A dictionary of arguments required for inference. These DCNL depend on the InferenceType of the current model'
def enterPhase(self): DCNL '[_IterationPhase method implementation] DCNL Performs initialization that is necessary upon entry to the phase. Must DCNL be called before handleInputRecord() at the beginning of each phase'
def __init__(self, model, nIters, inferenceArgs): DCNL 'model:        Model instance DCNL nIters:       Number of iterations; MUST be greater than 0 DCNL inferenceArgs: DCNL A dictionary of arguments required for inference. These DCNL depend on the InferenceType of the current model'
def enterPhase(self): DCNL '[_IterationPhase method implementation] DCNL Performs initialization that is necessary upon entry to the phase. Must DCNL be called before handleInputRecord() at the beginning of each phase'
def __init__(self, model, nIters, inferenceArgs): DCNL 'model:        Model instance DCNL nIters:       Number of iterations; MUST be greater than 0 DCNL inferenceArgs: DCNL A dictionary of arguments required for inference. These DCNL depend on the InferenceType of the current model'
def enterPhase(self): DCNL '[_IterationPhase method implementation] DCNL Performs initialization that is necessary upon entry to the phase. Must DCNL be called before handleInputRecord() at the beginning of each phase'
def setFieldStatistics(self, fieldStats): DCNL 'Since the two-gram has no use for this information, this is a no-op'
@classmethod DCNL def read(cls, proto): DCNL ':param proto: capnp TwoGramModelProto message reader'
def write(self, proto): DCNL ':param proto: capnp TwoGramModelProto message builder'
def __init__(self, net, statsCollectors): DCNL 'net:          The CLA Network instance DCNL statsCollectors: DCNL Sequence of 0 or more CLAStatistic-based instances'
def __init__(self, sensorParams={}, inferenceType=InferenceType.TemporalNextStep, spEnable=True, spParams={}, trainSPNetOnlyIfRequested=False, tmEnable=True, tmParams={}, clEnable=True, clParams={}, anomalyParams={}, minLikelihoodThreshold=DEFAULT_LIKELIHOOD_THRESHOLD, maxPredictionsPerStep=DEFAULT_MAX_PREDICTIONS_PER_STEP, network=None, baseProto=None): DCNL ':param network: if not None, the deserialized nupic.engine.Network instance DCNL to use instead of creating a new Network DCNL :param baseProto: if not None, capnp ModelProto message reader for DCNL deserializing; supersedes inferenceType'
def getParameter(self, paramName): DCNL 'Currently only supports a parameter named ``__numRunCalls``. DCNL :param paramName: (string) name of parameter to get. If not DCNL ``__numRunCalls`` an exception is thrown. DCNL :returns: (int) the value of ``self.__numRunCalls``'
@requireAnomalyModel DCNL def setAnomalyParameter(self, param, value): DCNL 'Set a parameter of the anomaly classifier within this model. DCNL :param param: (string) name of parameter to set DCNL :param value: (object) value to set'
@requireAnomalyModel DCNL def getAnomalyParameter(self, param): DCNL 'Get a parameter of the anomaly classifier within this model by key. DCNL :param param: (string) name of parameter to retrieve'
@requireAnomalyModel DCNL def anomalyRemoveLabels(self, start, end, labelFilter): DCNL 'Remove labels from the anomaly classifier within this model. Removes all DCNL records if ``labelFilter==None``, otherwise only removes the labels equal to DCNL ``labelFilter``. DCNL :param start: (int) index to start removing labels DCNL :param end: (int) index to end removing labels DCNL :param labelFilter: (string) If specified, only removes records that match'
@requireAnomalyModel DCNL def anomalyAddLabel(self, start, end, labelName): DCNL 'Add labels from the anomaly classifier within this model. DCNL :param start: (int) index to start label DCNL :param end: (int) index to end label DCNL :param labelName: (string) name of label'
@requireAnomalyModel DCNL def anomalyGetLabels(self, start, end): DCNL 'Get labels from the anomaly classifier within this model. DCNL :param start: (int) index to start getting labels DCNL :param end: (int) index to end getting labels'
def _getSensorInputRecord(self, inputRecord): DCNL 'inputRecord - dict containing the input to the sensor DCNL Return a \'SensorInput\' object, which represents the \'parsed\' DCNL representation of the input record'
def _getClassifierInputRecord(self, inputRecord): DCNL 'inputRecord - dict containing the input to the sensor DCNL Return a \'ClassifierInput\' object, which contains the mapped DCNL bucket index for input Record'
def _anomalyCompute(self): DCNL 'Compute Anomaly score, if required'
def _handleSDRClassifierMultiStep(self, patternNZ, inputTSRecordIdx, rawInput): DCNL 'Handle the CLA Classifier compute logic when implementing multi-step DCNL prediction. This is where the patternNZ is associated with one of the DCNL other fields from the dataset 0 to N steps in the future. This method is DCNL used by each type of network (encoder only, SP only, SP +TM) to handle the DCNL compute logic through the CLA Classifier. It fills in the inference dict with DCNL the results of the compute. DCNL Parameters: DCNL patternNZ: The input to the CLA Classifier as a list of active input indices DCNL inputTSRecordIdx: The index of the record as computed from the timestamp DCNL and aggregation interval. This normally increments by 1 DCNL each time unless there are missing records. If there is no DCNL aggregation interval or timestamp in the data, this will be DCNL None. DCNL rawInput:   The raw input to the sensor, as a dict.'
@classmethod DCNL def _removeUnlikelyPredictions(cls, likelihoodsDict, minLikelihoodThreshold, maxPredictionsPerStep): DCNL 'Remove entries with 0 likelihood or likelihood less than DCNL minLikelihoodThreshold, but don\'t leave an empty dict.'
def getRuntimeStats(self): DCNL 'Only returns data for a stat called ``numRunCalls``. DCNL :return:'
def _getLogger(self): DCNL 'Get the logger for this object. This is a protected method that is used DCNL by the Model to access the logger created by the subclass DCNL return: DCNL A logging.Logger object. Should not be None'
def _getSPRegion(self): DCNL 'Returns reference to the network\'s SP region'
def _getTPRegion(self): DCNL 'Returns reference to the network\'s TM region'
def _getSensorRegion(self): DCNL 'Returns reference to the network\'s Sensor region'
def _getClassifierRegion(self): DCNL 'Returns reference to the network\'s Classifier region'
def _getEncoder(self): DCNL 'Returns:  sensor region\'s encoder for the given network'
def _getClassifierOnlyEncoder(self): DCNL 'Returns:  sensor region\'s encoder that is sent only to the classifier, DCNL not to the bottom of the network'
def _getDataSource(self): DCNL 'Returns: data source that we installed in sensor region'
def __createHTMNetwork(self, sensorParams, spEnable, spParams, tmEnable, tmParams, clEnable, clParams, anomalyParams): DCNL 'Create a CLA network and return it. DCNL description:  HTMPredictionModel description dictionary (TODO: define schema) DCNL Returns:      NetworkInfo instance;'
def __getstate__(self): DCNL 'Return serializable state.  This function will return a version of the DCNL __dict__ with data that shouldn\'t be pickled stripped out. In particular, DCNL the CLA Network is stripped out because it has it\'s own serialization DCNL mechanism) DCNL See also: _serializeExtraData()'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state. DCNL See also: _deSerializeExtraData'
def write(self, proto): DCNL ':param proto: capnp HTMPredictionModelProto message builder'
@classmethod DCNL def read(cls, proto): DCNL ':param proto: capnp HTMPredictionModelProto message reader'
def _serializeExtraData(self, extraDataDir): DCNL '[virtual method override] This method is called during serialization DCNL with an external directory path that can be used to bypass pickle for saving DCNL large binary states. DCNL extraDataDir: DCNL Model\'s extra data directory path'
def _deSerializeExtraData(self, extraDataDir): DCNL '[virtual method override] This method is called during deserialization DCNL (after __setstate__) with an external directory path that can be used to DCNL bypass pickle for loading large binary states. DCNL extraDataDir: DCNL Model\'s extra data directory path'
def _addAnomalyClassifierRegion(self, network, params, spEnable, tmEnable): DCNL 'Attaches an \'AnomalyClassifier\' region to the network. Will remove current DCNL \'AnomalyClassifier\' region if it exists. DCNL Parameters DCNL network - network to add the AnomalyClassifier region DCNL params - parameters to pass to the region DCNL spEnable - True if network has an SP region DCNL tmEnable - True if network has a TM region; Currently requires True'
def __getNetworkStateDirectory(self, extraDataDir): DCNL 'extraDataDir: DCNL Model\'s extra data directory path DCNL Returns:      Absolute directory path for saving CLA Network'
def __manglePrivateMemberName(self, privateMemberName, skipCheck=False): DCNL 'Mangles the given mangled (private) member name; a mangled member name DCNL is one whose name begins with two or more underscores and ends with one DCNL or zero underscores. DCNL privateMemberName: DCNL The private member name (e.g., "__logger") DCNL skipCheck:    Pass True to skip test for presence of the demangled member DCNL in our instance. DCNL Returns:      The demangled member name (e.g., "_HTMPredictionModel__logger")'
def __init__(self, *args, **kwargs): DCNL 'Initialize interpreter with blacklisted nodes removed from supported DCNL nodes.'
def __validateExperimentControl(self, control): DCNL 'Validates control dictionary for the experiment context'
def __validateNupicControl(self, control): DCNL 'Validates control dictionary for the nupic engine context'
def normalizeStreamSource(self, stream): DCNL 'TODO: document DCNL :param stream:'
def normalizeStreamSources(self): DCNL 'TODO: document'
def convertNupicEnvToOPF(self): DCNL 'TODO: document'
def __init__(self, requestedActivities=[]): DCNL 'requestedActivities: a sequence of PeriodicActivityRequest elements'
def addActivities(self, periodicActivities): DCNL 'Adds activities DCNL periodicActivities: A sequence of PeriodicActivityRequest elements'
def tick(self): DCNL 'Activity tick handler; services all activities DCNL Returns:      True if controlling iterator says it\'s okay to keep going; DCNL False to stop'
def __appendActivities(self, periodicActivities): DCNL 'periodicActivities: A sequence of PeriodicActivityRequest elements'
def addLabel(self, start, end, labelName): DCNL 'Add the label labelName to each record with record ROWID in range from DCNL start to end, noninclusive of end. DCNL This will recalculate all points from end to the last record stored in the DCNL internal cache of this classifier.'
def removeLabels(self, start=None, end=None, labelFilter=None): DCNL 'Remove labels from each record with record ROWID in range from DCNL start to end, noninclusive of end. Removes all records if labelFilter is DCNL None, otherwise only removes the labels eqaul to labelFilter. DCNL This will recalculate all points from end to the last record stored in the DCNL internal cache of this classifier.'
def _addRecordToKNN(self, record): DCNL 'This method will add the record to the KNN classifier.'
def _deleteRecordsFromKNN(self, recordsToDelete): DCNL 'This method will remove the given records from the classifier. DCNL parameters DCNL recordsToDelete - list of records to delete from the classififier'
def _deleteRangeFromKNN(self, start=0, end=None): DCNL 'This method will remove any stored records within the range from start to DCNL end. Noninclusive of end. DCNL parameters DCNL start - integer representing the ROWID of the start of the deletion range, DCNL end - integer representing the ROWID of the end of the deletion range, DCNL if None, it will default to end.'
def _recomputeRecordFromKNN(self, record): DCNL 'return the classified labeling of record'
def _constructClassificationRecord(self): DCNL 'Construct a _HTMClassificationRecord based on the current state of the DCNL htm_prediction_model of this classifier. DCNL ***This will look into the internals of the model and may depend on the DCNL SP, TM, and KNNClassifier***'
def compute(self): DCNL 'Run an iteration of this anomaly classifier'
def setAutoDetectWaitRecords(self, waitRecords): DCNL 'Sets the autoDetectWaitRecords.'
def getAutoDetectWaitRecords(self): DCNL 'Return the autoDetectWaitRecords.'
def setAutoDetectThreshold(self, threshold): DCNL 'Sets the autoDetectThreshold. DCNL TODO: Ensure previously classified points outside of classifier are valid.'
def getAutoDetectThreshold(self): DCNL 'Return the autoDetectThreshold.'
def _labelToCategoryNumber(self, label): DCNL 'Since the KNN Classifier stores categories as numbers, we must store each DCNL label as a number. This method converts from a label to a unique number. DCNL Each label is assigned a unique bit so multiple labels may be assigned to DCNL a single record.'
def _labelListToCategoryNumber(self, labelList): DCNL 'This method takes a list of labels and returns a unique category number. DCNL This enables this class to store a list of categories for each point since DCNL the KNN classifier only stores a single number category for each record.'
def _categoryToLabelList(self, category): DCNL 'Converts a category number into a list of labels'
def _getStateAnomalyVector(self, state): DCNL 'Returns a state\'s anomaly vertor converting it from spare to dense'
def __init__(self, windowSize, existingHistoricalValues=None): DCNL 'new instance of MovingAverage, so method .next() can be used DCNL @param windowSize - length of sliding window DCNL @param existingHistoricalValues - construct the object with already DCNL some values in it.'
@staticmethod DCNL def compute(slidingWindow, total, newVal, windowSize): DCNL 'Routine for computing a moving average. DCNL @param slidingWindow a list of previous values to use in computation that DCNL will be modified and returned DCNL @param total the sum of the values in slidingWindow to be used in the DCNL calculation of the moving average DCNL @param newVal a new number compute the new windowed average DCNL @param windowSize how many values to use in the moving window DCNL @returns an updated windowed average, the modified input slidingWindow list, DCNL and the new total sum of the sliding window'
def next(self, newValue): DCNL 'Instance method wrapper around compute.'
def getCurrentAvg(self): DCNL 'get current average'
def __setstate__(self, state): DCNL 'for loading this object'
@classmethod DCNL @abstractmethod DCNL def getSchema(cls): DCNL 'Get Cap\'n Proto schema. DCNL ..warning: This is an abstract method.  Per abc protocol, attempts to subclass DCNL without overriding will fail. DCNL @returns Cap\'n Proto schema'
@classmethod DCNL @abstractmethod DCNL def read(cls, proto): DCNL 'Create a new object initialized from Cap\'n Proto obj. DCNL Note: This is an abstract method.  Per abc protocol, attempts to subclass DCNL without overriding will fail. DCNL :param proto: Cap\'n Proto obj DCNL :return: Obj initialized from proto'
@abstractmethod DCNL def write(self, proto): DCNL 'Write obj instance to Cap\'n Proto object DCNL .. warning: This is an abstract method.  Per abc protocol, attempts to DCNL subclass without overriding will fail. DCNL :param proto: Cap\'n Proto obj'
@classmethod DCNL def readFromFile(cls, f, packed=True): DCNL 'Read serialized object from file. DCNL :param f: input file DCNL :param packed: If true, will assume content is packed DCNL :return: first-class instance initialized from proto obj'
def writeToFile(self, f, packed=True): DCNL 'Write serialized object to file. DCNL :param f: output file DCNL :param packed: If true, will pack contents.'
@staticmethod DCNL def connectionsFactory(*args, **kwargs): DCNL 'Create a :class:`~nupic.algorithms.connections.Connections` instance. DCNL :class:`TemporalMemory` subclasses may override this method to choose a DCNL different :class:`~nupic.algorithms.connections.Connections` implementation, DCNL or to augment the instance otherwise returned by the default DCNL :class:`~nupic.algorithms.connections.Connections` implementation. DCNL See :class:`~nupic.algorithms.connections.Connections` for constructor DCNL signature and usage. DCNL :returns: :class:`~nupic.algorithms.connections.Connections` instance'
def compute(self, activeColumns, learn=True): DCNL 'Perform one time step of the Temporal Memory algorithm. DCNL This method calls :meth:`activateCells`, then calls DCNL :meth:`activateDendrites`. Using :class:`TemporalMemory` via its DCNL :meth:`compute` method ensures that you\'ll always be able to call DCNL :meth:`getPredictiveCells` to get predictions for the next time step. DCNL :param activeColumns: (iter) Indices of active columns. DCNL :param learn: (bool) Whether or not learning is enabled.'
def activateCells(self, activeColumns, learn=True): DCNL 'Calculate the active cells, using the current active columns and dendrite DCNL segments. Grow and reinforce synapses. DCNL :param activeColumns: (iter) A sorted list of active column indices. DCNL :param learn: (bool) If true, reinforce / punish / grow synapses. DCNL **Pseudocode:** DCNL for each column DCNL if column is active and has active distal dendrite segments DCNL call activatePredictedColumn DCNL if column is active and doesn\'t have active distal dendrite segments DCNL call burstColumn DCNL if column is inactive and has matching distal dendrite segments DCNL call punishPredictedColumn'
def activateDendrites(self, learn=True): DCNL 'Calculate dendrite segment activity, using the current active cells. DCNL :param learn: (bool) If true, segment activations will be recorded. This DCNL information is used during segment cleanup. DCNL **Pseudocode:** DCNL for each distal dendrite segment with activity >= activationThreshold DCNL mark the segment as active DCNL for each distal dendrite segment with unconnected activity >= minThreshold DCNL mark the segment as matching'
def reset(self): DCNL 'Indicates the start of a new sequence. Clears any predictions and makes sure DCNL synapses don\'t grow to the currently active cells in the next time step.'
def activatePredictedColumn(self, column, columnActiveSegments, columnMatchingSegments, prevActiveCells, prevWinnerCells, learn): DCNL 'Determines which cells in a predicted column should be added to winner cells DCNL list, and learns on the segments that correctly predicted this column. DCNL :param column: (int) Index of bursting column. DCNL :param columnActiveSegments: (iter) Active segments in this column. DCNL :param columnMatchingSegments: (iter) Matching segments in this column. DCNL :param prevActiveCells: (list) Active cells in ``t-1``. DCNL :param prevWinnerCells: (list) Winner cells in ``t-1``. DCNL :param learn: (bool) If true, grow and reinforce synapses. DCNL :returns: (list) A list of predicted cells that will be added to DCNL active cells and winner cells.'
def burstColumn(self, column, columnMatchingSegments, prevActiveCells, prevWinnerCells, learn): DCNL 'Activates all of the cells in an unpredicted active column, chooses a winner DCNL cell, and, if learning is turned on, learns on one segment, growing a new DCNL segment if necessary. DCNL :param column: (int) Index of bursting column. DCNL :param columnMatchingSegments: (iter) Matching segments in this column, or DCNL None if there aren\'t any. DCNL :param prevActiveCells: (list) Active cells in ``t-1``. DCNL :param prevWinnerCells: (list) Winner cells in ``t-1``. DCNL :param learn: (bool) Whether or not learning is enabled. DCNL :returns: (tuple) Contains (``cells`` [iter], ``winnerCell`` [int])'
def punishPredictedColumn(self, column, columnActiveSegments, columnMatchingSegments, prevActiveCells, prevWinnerCells): DCNL 'Punishes the Segments that incorrectly predicted a column to be active. DCNL :param column: (int) Index of bursting column. DCNL :param columnActiveSegments: (iter) Active segments for this column, or None DCNL if there aren\'t any. DCNL :param columnMatchingSegments: (iter) Matching segments for this column, or DCNL None if there aren\'t any. DCNL :param prevActiveCells: (list) Active cells in ``t-1``. DCNL :param prevWinnerCells: (list) Winner cells in ``t-1``.'
def createSegment(self, cell): DCNL 'Create a :class:`~nupic.algorithms.connections.Segment` on the specified DCNL cell. This method calls DCNL :meth:`~nupic.algorithms.connections.Connections.createSegment` on the DCNL underlying :class:`~nupic.algorithms.connections.Connections`, and it does DCNL some extra bookkeeping. Unit tests should call this method, and not DCNL :meth:`~nupic.algorithms.connections.Connections.createSegment`. DCNL :param cell: (int) Index of cell to create a segment on. DCNL :returns: (:class:`~nupic.algorithms.connections.Segment`) The created DCNL segment.'
@classmethod DCNL def _activatePredictedColumn(cls, connections, random, columnActiveSegments, prevActiveCells, prevWinnerCells, numActivePotentialSynapsesForSegment, maxNewSynapseCount, initialPermanence, permanenceIncrement, permanenceDecrement, maxSynapsesPerSegment, learn): DCNL ':param connections: (Object) DCNL Connections for the TM. Gets mutated. DCNL :param random: (Object) DCNL Random number generator. Gets mutated. DCNL :param columnActiveSegments: (iter) DCNL Active segments in this column. DCNL :param prevActiveCells: (list) DCNL Active cells in `t-1`. DCNL :param prevWinnerCells: (list) DCNL Winner cells in `t-1`. DCNL :param numActivePotentialSynapsesForSegment: (list) DCNL Number of active potential synapses per segment, indexed by the segment\'s DCNL flatIdx. DCNL :param maxNewSynapseCount: (int) DCNL The maximum number of synapses added to a segment during learning DCNL :param initialPermanence: (float) DCNL Initial permanence of a new synapse. DCNL @permanenceIncrement (float) DCNL Amount by which permanences of synapses are incremented during learning. DCNL @permanenceDecrement (float) DCNL Amount by which permanences of synapses are decremented during learning. DCNL :param maxSynapsesPerSegment: (int) DCNL The maximum number of synapses per segment. DCNL :param learn: (bool) DCNL If true, grow and reinforce synapses. DCNL :returns: cellsToAdd (list) DCNL A list of predicted cells that will be added to active cells and winner DCNL cells. DCNL Pseudocode: DCNL for each cell in the column that has an active distal dendrite segment DCNL mark the cell as active DCNL mark the cell as a winner cell DCNL (learning) for each active distal dendrite segment DCNL strengthen active synapses DCNL weaken inactive synapses DCNL grow synapses to previous winner cells'
@classmethod DCNL def _burstColumn(cls, connections, random, lastUsedIterationForSegment, column, columnMatchingSegments, prevActiveCells, prevWinnerCells, cellsForColumn, numActivePotentialSynapsesForSegment, iteration, maxNewSynapseCount, initialPermanence, permanenceIncrement, permanenceDecrement, maxSegmentsPerCell, maxSynapsesPerSegment, learn): DCNL ':param connections: (Object) DCNL Connections for the TM. Gets mutated. DCNL :param random: (Object) DCNL Random number generator. Gets mutated. DCNL :param lastUsedIterationForSegment: (list) DCNL Last used iteration for each segment, indexed by the segment\'s flatIdx. DCNL Gets mutated. DCNL :param column: (int) DCNL Index of bursting column. DCNL :param columnMatchingSegments: (iter) DCNL Matching segments in this column. DCNL :param prevActiveCells: (list) DCNL Active cells in `t-1`. DCNL :param prevWinnerCells: (list) DCNL Winner cells in `t-1`. DCNL :param cellsForColumn: (sequence) DCNL Range of cell indices on which to operate. DCNL :param numActivePotentialSynapsesForSegment: (list) DCNL Number of active potential synapses per segment, indexed by the segment\'s DCNL flatIdx. DCNL :param iteration: (int) DCNL The current timestep. DCNL :param maxNewSynapseCount: (int) DCNL The maximum number of synapses added to a segment during learning. DCNL :param initialPermanence: (float) DCNL Initial permanence of a new synapse. DCNL :param permanenceIncrement: (float) DCNL Amount by which permanences of synapses are incremented during learning. DCNL :param permanenceDecrement: (float) DCNL Amount by which permanences of synapses are decremented during learning. DCNL :param maxSegmentsPerCell: (int) DCNL The maximum number of segments per cell. DCNL :param maxSynapsesPerSegment: (int) DCNL The maximum number of synapses per segment. DCNL :param learn: (bool) DCNL Whether or not learning is enabled. DCNL :returns: (tuple) Contains: DCNL `cells`         (iter), DCNL `winnerCell`    (int), DCNL Pseudocode: DCNL mark all cells as active DCNL if there are any matching distal dendrite segments DCNL find the most active matching segment DCNL mark its cell as a winner cell DCNL (learning) DCNL grow and reinforce synapses to previous winner cells DCNL else DCNL find the cell with the least segments, mark it as a winner cell DCNL (learning) DCNL (optimization) if there are prev winner cells DCNL add a segment to this winner cell DCNL grow synapses to previous winner cells'
@classmethod DCNL def _punishPredictedColumn(cls, connections, columnMatchingSegments, prevActiveCells, predictedSegmentDecrement): DCNL ':param connections: (Object) DCNL Connections for the TM. Gets mutated. DCNL :param columnMatchingSegments: (iter) DCNL Matching segments for this column. DCNL :param prevActiveCells: (list) DCNL Active cells in `t-1`. DCNL :param predictedSegmentDecrement: (float) DCNL Amount by which segments are punished for incorrect predictions. DCNL Pseudocode: DCNL for each matching segment in the column DCNL weaken active synapses'
@classmethod DCNL def _createSegment(cls, connections, lastUsedIterationForSegment, cell, iteration, maxSegmentsPerCell): DCNL 'Create a segment on the connections, enforcing the maxSegmentsPerCell DCNL parameter.'
@classmethod DCNL def _destroyMinPermanenceSynapses(cls, connections, random, segment, nDestroy, excludeCells): DCNL 'Destroy nDestroy synapses on the specified segment, but don\'t destroy DCNL synapses to the "excludeCells".'
@classmethod DCNL def _leastUsedCell(cls, random, cells, connections): DCNL 'Gets the cell with the smallest number of segments. DCNL Break ties randomly. DCNL :param random: (Object) DCNL Random number generator. Gets mutated. DCNL :param cells: (list) DCNL Indices of cells. DCNL :param connections: (Object) DCNL Connections instance for the TM. DCNL :returns: (int) Cell index.'
@classmethod DCNL def _growSynapses(cls, connections, random, segment, nDesiredNewSynapes, prevWinnerCells, initialPermanence, maxSynapsesPerSegment): DCNL 'Creates nDesiredNewSynapes synapses on the segment passed in if DCNL possible, choosing random cells from the previous winner cells that are DCNL not already on the segment. DCNL :param connections:        (Object) Connections instance for the tm DCNL :param random:             (Object) TM object used to generate random DCNL numbers DCNL :param segment:            (int)    Segment to grow synapses on. DCNL :param nDesiredNewSynapes: (int)    Desired number of synapses to grow DCNL :param prevWinnerCells:    (list)   Winner cells in `t-1` DCNL :param initialPermanence:  (float)  Initial permanence of a new synapse.'
@classmethod DCNL def _adaptSegment(cls, connections, segment, prevActiveCells, permanenceIncrement, permanenceDecrement): DCNL 'Updates synapses on segment. DCNL Strengthens active synapses; weakens inactive synapses. DCNL :param connections:          (Object) Connections instance for the tm DCNL :param segment:              (int)    Segment to adapt DCNL :param prevActiveCells:      (list)   Active cells in `t-1` DCNL :param permanenceIncrement:  (float)  Amount to increment active synapses DCNL :param permanenceDecrement:  (float)  Amount to decrement inactive synapses'
def columnForCell(self, cell): DCNL 'Returns the index of the column that a cell belongs to. DCNL :param cell: (int) Cell index DCNL :returns: (int) Column index'
def cellsForColumn(self, column): DCNL 'Returns the indices of cells that belong to a column. DCNL :param column: (int) Column index DCNL :returns: (list) Cell indices'
def numberOfColumns(self): DCNL 'Returns the number of columns in this layer. DCNL :returns: (int) Number of columns'
def numberOfCells(self): DCNL 'Returns the number of cells in this layer. DCNL :returns: (int) Number of cells'
def mapCellsToColumns(self, cells): DCNL 'Maps cells to the columns they belong to. DCNL :param cells: (set) Cells DCNL :returns: (dict) Mapping from columns to their cells in `cells`'
def getActiveCells(self): DCNL 'Returns the indices of the active cells. DCNL :returns: (list) Indices of active cells.'
def getPredictiveCells(self): DCNL 'Returns the indices of the predictive cells. DCNL :returns: (list) Indices of predictive cells.'
def getWinnerCells(self): DCNL 'Returns the indices of the winner cells. DCNL :returns: (list) Indices of winner cells.'
def getActiveSegments(self): DCNL 'Returns the active segments. DCNL :returns: (list) Active segments'
def getMatchingSegments(self): DCNL 'Returns the matching segments. DCNL :returns: (list) Matching segments'
def getCellsPerColumn(self): DCNL 'Returns the number of cells per column. DCNL :returns: (int) The number of cells per column.'
def getColumnDimensions(self): DCNL 'Returns the dimensions of the columns in the region. DCNL :returns: (tuple) Column dimensions'
def getActivationThreshold(self): DCNL 'Returns the activation threshold. DCNL :returns: (int) The activation threshold.'
def setActivationThreshold(self, activationThreshold): DCNL 'Sets the activation threshold. DCNL :param activationThreshold: (int) activation threshold.'
def getInitialPermanence(self): DCNL 'Get the initial permanence. DCNL :returns: (float) The initial permanence.'
def setInitialPermanence(self, initialPermanence): DCNL 'Sets the initial permanence. DCNL :param initialPermanence: (float) The initial permanence.'
def getMinThreshold(self): DCNL 'Returns the min threshold. DCNL :returns: (int) The min threshold.'
def setMinThreshold(self, minThreshold): DCNL 'Sets the min threshold. DCNL :param minThreshold: (int) min threshold.'
def getMaxNewSynapseCount(self): DCNL 'Returns the max new synapse count. DCNL :returns: (int) The max new synapse count.'
def setMaxNewSynapseCount(self, maxNewSynapseCount): DCNL 'Sets the max new synapse count. DCNL :param maxNewSynapseCount: (int) Max new synapse count.'
def getPermanenceIncrement(self): DCNL 'Get the permanence increment. DCNL :returns: (float) The permanence increment.'
def setPermanenceIncrement(self, permanenceIncrement): DCNL 'Sets the permanence increment. DCNL :param permanenceIncrement: (float) The permanence increment.'
def getPermanenceDecrement(self): DCNL 'Get the permanence decrement. DCNL :returns: (float) The permanence decrement.'
def setPermanenceDecrement(self, permanenceDecrement): DCNL 'Sets the permanence decrement. DCNL :param permanenceDecrement: (float) The permanence decrement.'
def getPredictedSegmentDecrement(self): DCNL 'Get the predicted segment decrement. DCNL :returns: (float) The predicted segment decrement.'
def setPredictedSegmentDecrement(self, predictedSegmentDecrement): DCNL 'Sets the predicted segment decrement. DCNL :param predictedSegmentDecrement: (float) The predicted segment decrement.'
def getConnectedPermanence(self): DCNL 'Get the connected permanence. DCNL :returns: (float) The connected permanence.'
def setConnectedPermanence(self, connectedPermanence): DCNL 'Sets the connected permanence. DCNL :param connectedPermanence: (float) The connected permanence.'
def getMaxSegmentsPerCell(self): DCNL 'Get the maximum number of segments per cell DCNL :returns: (int) max number of segments per cell'
def getMaxSynapsesPerSegment(self): DCNL 'Get the maximum number of synapses per segment. DCNL :returns: (int) max number of synapses per segment'
def write(self, proto): DCNL 'Writes serialized data to proto object. DCNL :param proto: (DynamicStructBuilder) Proto object'
@classmethod DCNL def read(cls, proto): DCNL 'Reads deserialized data from proto object. DCNL :param proto: (DynamicStructBuilder) Proto object DCNL :returns: (:class:TemporalMemory) TemporalMemory instance'
def __eq__(self, other): DCNL 'Non-equality operator for TemporalMemory instances. DCNL Checks if two instances are functionally identical DCNL (might have different internal state). DCNL :param other: (TemporalMemory) TemporalMemory instance to compare to'
def __ne__(self, other): DCNL 'Non-equality operator for TemporalMemory instances. DCNL Checks if two instances are not functionally identical DCNL (might have different internal state). DCNL :param other: (TemporalMemory) TemporalMemory instance to compare to'
def _validateColumn(self, column): DCNL 'Raises an error if column index is invalid. DCNL :param column: (int) Column index'
def _validateCell(self, cell): DCNL 'Raises an error if cell index is invalid. DCNL :param cell: (int) Cell index'
@classmethod DCNL def getCellIndices(cls, cells): DCNL 'Returns the indices of the cells passed in. DCNL :param cells: (list) cells to find the indices of'
@staticmethod DCNL def getCellIndex(cell): DCNL 'Returns the index of the cell. DCNL :param cell: (int) cell to find the index of'
@staticmethod DCNL def create(*args, **kwargs): DCNL 'Create a SDR classifier factory. DCNL The implementation of the SDR Classifier can be specified with DCNL the "implementation" keyword argument. DCNL The SDRClassifierFactory uses the implementation as specified in DCNL `Default NuPIC Configuration <default-config.html>`_.'
@staticmethod DCNL def read(proto): DCNL ':param proto: SDRClassifierRegionProto capnproto object'
def clear(self): DCNL 'Clears the state of the KNNClassifier.'
def prototypeSetCategory(self, idToCategorize, newCategory): DCNL 'Allows ids to be assigned a category and subsequently enables users to use: DCNL - :meth:`~.KNNClassifier.KNNClassifier.removeCategory` DCNL - :meth:`~.KNNClassifier.KNNClassifier.closestTrainingPattern` DCNL - :meth:`~.KNNClassifier.KNNClassifier.closestOtherTrainingPattern`'
def removeIds(self, idsToRemove): DCNL 'There are two caveats. First, this is a potentially slow operation. Second, DCNL pattern indices will shift if patterns before them are removed. DCNL :param idsToRemove: A list of row indices to remove.'
def removeCategory(self, categoryToRemove): DCNL 'There are two caveats. First, this is a potentially slow operation. Second, DCNL pattern indices will shift if patterns before them are removed. DCNL :param categoryToRemove: Category label to remove'
def _removeRows(self, rowsToRemove): DCNL 'A list of row indices to remove. There are two caveats. First, this is DCNL a potentially slow operation. Second, pattern indices will shift if DCNL patterns before them are removed.'
def doIteration(self): DCNL 'Utility method to increment the iteration index. Intended for models that DCNL don\'t learn each timestep.'
def learn(self, inputPattern, inputCategory, partitionId=None, isSparse=0, rowID=None): DCNL 'Train the classifier to associate specified input pattern with a DCNL particular category. DCNL :param inputPattern: (list) The pattern to be assigned a category. If DCNL isSparse is 0, this should be a dense array (both ON and OFF bits DCNL present). Otherwise, if isSparse > 0, this should be a list of the DCNL indices of the non-zero bits in sorted order DCNL :param inputCategory: (int) The category to be associated to the training DCNL pattern DCNL :param partitionId: (int) partitionID allows you to associate an id with each DCNL input vector. It can be used to associate input patterns stored in the DCNL classifier with an external id. This can be useful for debugging or DCNL visualizing. Another use case is to ignore vectors with a specific id DCNL during inference (see description of infer() for details). There can be DCNL at most one partitionId per stored pattern (i.e. if two patterns are DCNL within distThreshold, only the first partitionId will be stored). This DCNL is an optional parameter. DCNL :param isSparse: (int) If 0, the input pattern is a dense representation. If DCNL isSparse > 0, the input pattern is a list of non-zero indices and DCNL isSparse is the length of the dense representation DCNL :param rowID: (int) UNKNOWN DCNL :returns: The number of patterns currently stored in the classifier'
def getOverlaps(self, inputPattern): DCNL 'Return the degree of overlap between an input pattern and each category DCNL stored in the classifier. The overlap is computed by computing: DCNL .. code-block:: python DCNL logical_and(inputPattern != 0, trainingPattern != 0).sum() DCNL :param inputPattern: pattern to check overlap of DCNL :returns: (overlaps, categories) Two numpy arrays of the same length, where: DCNL * overlaps: an integer overlap amount for each category DCNL * categories: category index for each element of overlaps'
def getDistances(self, inputPattern): DCNL 'Return the distances between the input pattern and all other DCNL stored patterns. DCNL :param inputPattern: pattern to check distance with DCNL :returns: (distances, categories) numpy arrays of the same length. DCNL - overlaps: an integer overlap amount for each category DCNL - categories: category index for each element of distances'
def infer(self, inputPattern, computeScores=True, overCategories=True, partitionId=None): DCNL 'Finds the category that best matches the input pattern. Returns the DCNL winning category index as well as a distribution over all categories. DCNL :param inputPattern: (list) A pattern to be classified DCNL :param computeScores: NO EFFECT DCNL :param overCategories: NO EFFECT DCNL :param partitionId: (int) If provided, all training vectors with partitionId DCNL equal to that of the input pattern are ignored. DCNL For example, this may be used to perform k-fold cross validation DCNL without repopulating the classifier. First partition all the data into DCNL k equal partitions numbered 0, 1, 2, ... and then call learn() for each DCNL vector passing in its partitionId. Then, during inference, by passing DCNL in the partition ID in the call to infer(), all other vectors with the DCNL same partitionId are ignored simulating the effect of repopulating the DCNL classifier while ommitting the training vectors in the same partition. DCNL :returns: 4-tuple with these keys: DCNL - ``winner``: The category with the greatest number of nearest neighbors DCNL within the kth nearest neighbors. If the inferenceResult contains no DCNL neighbors, the value of winner is None. This can happen, for example, DCNL in cases of exact matching, if there are no stored vectors, or if DCNL minSparsity is not met. DCNL - ``inferenceResult``: A list of length numCategories, each entry contains DCNL the number of neighbors within the top k neighbors that are in that DCNL category. DCNL - ``dist``: A list of length numPrototypes. Each entry is the distance DCNL from the unknown to that prototype. All distances are between 0.0 and DCNL 1.0. DCNL - ``categoryDist``: A list of length numCategories. Each entry is the DCNL distance from the unknown to the nearest prototype of DCNL that category. All distances are between 0 and 1.0.'
def getClosest(self, inputPattern, topKCategories=3): DCNL 'Returns the index of the pattern that is closest to inputPattern, DCNL the distances of all patterns to inputPattern, and the indices of the k DCNL closest categories.'
def closestTrainingPattern(self, inputPattern, cat): DCNL 'Returns the closest training pattern to inputPattern that belongs to DCNL category "cat". DCNL :param inputPattern: The pattern whose closest neighbor is sought DCNL :param cat: The required category of closest neighbor DCNL :returns: A dense version of the closest training pattern, or None if no DCNL such patterns exist'
def closestOtherTrainingPattern(self, inputPattern, cat): DCNL 'Return the closest training pattern that is *not* of the given DCNL category "cat". DCNL :param inputPattern: The pattern whose closest neighbor is sought DCNL :param cat: Training patterns of this category will be ignored no matter DCNL their distance to inputPattern DCNL :returns: A dense version of the closest training pattern, or None if no DCNL such patterns exist'
def getPattern(self, idx, sparseBinaryForm=False, cat=None): DCNL 'Gets a training pattern either by index or category number. DCNL :param idx: Index of the training pattern DCNL :param sparseBinaryForm: If true, returns a list of the indices of the DCNL non-zero bits in the training pattern DCNL :param cat: If not None, get the first pattern belonging to category cat. If DCNL this is specified, idx must be None. DCNL :returns: The training pattern with specified index'
def getPartitionId(self, i): DCNL 'Gets the partition id given an index. DCNL :param i: index of partition DCNL :returns: the partition id associated with pattern i. Returns None if no id DCNL is associated with it.'
def getPartitionIdList(self): DCNL ':returns: a list of complete partition id objects'
def getNumPartitionIds(self): DCNL ':returns: the number of unique partition Ids stored.'
def getPartitionIdKeys(self): DCNL ':returns: a list containing unique (non-None) partition Ids (just the keys)'
def getPatternIndicesWithPartitionId(self, partitionId): DCNL ':returns: a list of pattern indices corresponding to this partitionId. DCNL Return an empty list if there are none.'
def _addPartitionId(self, index, partitionId=None): DCNL 'Adds partition id for pattern index'
def _rebuildPartitionIdMap(self, partitionIdList): DCNL 'Rebuilds the partition Id map using the given partitionIdList'
def _calcDistance(self, inputPattern, distanceNorm=None): DCNL 'Calculate the distances from inputPattern to all stored patterns. All DCNL distances are between 0.0 and 1.0 DCNL :param inputPattern The pattern from which distances to all other patterns DCNL are calculated DCNL :param distanceNorm Degree of the distance norm'
def _getDistances(self, inputPattern, partitionId=None): DCNL 'Return the distances from inputPattern to all stored patterns. DCNL :param inputPattern The pattern from which distances to all other patterns DCNL are returned DCNL :param partitionId If provided, ignore all training vectors with this DCNL partitionId.'
def finishLearning(self): DCNL 'Used for batch scenarios.  This method needs to be called between learning DCNL and inference.'
def computeSVD(self, numSVDSamples=None, finalize=True): DCNL 'Compute the singular value decomposition (SVD). The SVD is a factorization DCNL of a real or complex matrix. It factors the matrix `a` as DCNL `u * np.diag(s) * v`, where `u` and `v` are unitary and `s` is a 1-d array DCNL of `a`\'s singular values. DCNL **Reason for computing the SVD:** DCNL There are cases where you want to feed a lot of vectors to the DCNL KNNClassifier. However, this can be slow. You can speed up training by (1) DCNL computing the SVD of the input patterns which will give you the DCNL eigenvectors, (2) only keeping a fraction of the eigenvectors, and (3) DCNL projecting the input patterns onto the remaining eigenvectors. DCNL Note that all input patterns are projected onto the eigenvectors in the same DCNL fashion. Keeping only the highest eigenvectors increases training DCNL performance since it reduces the dimensionality of the input. DCNL :param numSVDSamples: (int) the number of samples to use for the SVD DCNL computation. DCNL :param finalize: (bool) whether to apply SVD to the input patterns. DCNL :returns: (array) The singular values for every matrix, sorted in DCNL descending order.'
def getAdaptiveSVDDims(self, singularValues, fractionOfMax=0.001): DCNL 'Compute the number of eigenvectors (singularValues) to keep. DCNL :param singularValues: DCNL :param fractionOfMax: DCNL :return:'
def _finalizeSVD(self, numSVDDims=None): DCNL 'Called by finalizeLearning(). This will project all the patterns onto the DCNL SVD eigenvectors. DCNL :param numSVDDims: (int) number of egeinvectors used for projection. DCNL :return:'
def remapCategories(self, mapping): DCNL 'Change the category indices. DCNL Used by the Network Builder to keep the category indices in sync with the DCNL ImageSensor categoryInfo when the user renames or removes categories. DCNL :param mapping: List of new category indices. For example, mapping=[2,0,1] DCNL would change all vectors of category 0 to be category 2, category 1 to DCNL 0, and category 2 to 1'
def setCategoryOfVectors(self, vectorIndices, categoryIndices): DCNL 'Change the category associated with this vector(s). DCNL Used by the Network Builder to move vectors between categories, to enable DCNL categories, and to invalidate vectors by setting the category to -1. DCNL :param vectorIndices: Single index or list of indices DCNL :param categoryIndices: Single index or list of indices. Can also be a DCNL single index when vectorIndices is a list, in which case the same DCNL category will be used for all vectors'
def __getstate__(self): DCNL 'Return serializable state. DCNL This function will return a version of the __dict__.'
def __setstate__(self, state): DCNL 'Set the state of this object from a serialized state.'
def compute(self, activeColumns, predictedColumns, inputValue=None, timestamp=None): DCNL 'Compute the anomaly score as the percent of active columns not predicted. DCNL :param activeColumns: array of active column indices DCNL :param predictedColumns: array of columns indices predicted in this step DCNL (used for anomaly in step T+1) DCNL :param inputValue: (optional) value of current input to encoders DCNL (eg "cat" for category encoder) DCNL (used in anomaly-likelihood) DCNL :param timestamp: (optional) date timestamp when the sample occured DCNL (used in anomaly-likelihood) DCNL :returns: the computed anomaly score; float 0..1'
def __setstate__(self, state): DCNL 'deserialization'
def __init__(self, numberOfCols=500, cellsPerColumn=10, initialPerm=0.11, connectedPerm=0.5, minThreshold=8, newSynapseCount=15, permanenceInc=0.1, permanenceDec=0.1, permanenceMax=1.0, activationThreshold=12, predictedSegmentDecrement=0.0, maxSegmentsPerCell=255, maxSynapsesPerSegment=255, globalDecay=0.1, maxAge=100000, pamLength=1, verbosity=0, outputType='normal', seed=42): DCNL 'Translate parameters and initialize member variables specific to `backtracking_tm.py`.'
@classmethod DCNL def read(cls, proto): DCNL 'Intercepts TemporalMemory deserialization request in order to initialize DCNL `self.infActiveState` DCNL @param proto (DynamicStructBuilder) Proto object DCNL @return (TemporalMemory) TemporalMemory shim instance'
def compute(self, bottomUpInput, enableLearn, computeInfOutput=None): DCNL '(From `backtracking_tm.py`) DCNL Handle one compute, possibly learning. DCNL @param bottomUpInput     The bottom-up input, typically from a spatial pooler DCNL @param enableLearn       If true, perform learning DCNL @param computeInfOutput  If None, default behavior is to disable the inference DCNL output when enableLearn is on. DCNL If true, compute the inference output DCNL If false, do not compute the inference output'
def topDownCompute(self, topDownIn=None): DCNL '(From `backtracking_tm.py`) DCNL Top-down compute - generate expected input given output of the TM DCNL @param topDownIn top down input from the level above us DCNL @returns best estimate of the TM input that would have generated bottomUpOut.'
def __init__(self, numberOfCols=500, cellsPerColumn=10, initialPerm=0.11, connectedPerm=0.5, minThreshold=8, newSynapseCount=15, permanenceInc=0.1, permanenceDec=0.1, permanenceMax=1.0, activationThreshold=12, predictedSegmentDecrement=0.0, maxSegmentsPerCell=255, maxSynapsesPerSegment=255, globalDecay=0.1, maxAge=100000, pamLength=1, verbosity=0, outputType='normal', seed=42): DCNL 'Translate parameters and initialize member variables specific to `backtracking_tm.py`.'
def compute(self, bottomUpInput, enableLearn, computeInfOutput=None): DCNL '(From `backtracking_tm.py`) DCNL Handle one compute, possibly learning. DCNL @param bottomUpInput     The bottom-up input, typically from a spatial pooler DCNL @param enableLearn       If true, perform learning DCNL @param computeInfOutput  If None, default behavior is to disable the inference DCNL output when enableLearn is on. DCNL If true, compute the inference output DCNL If false, do not compute the inference output'
def topDownCompute(self, topDownIn=None): DCNL '(From `backtracking_tm.py`) DCNL Top-down compute - generate expected input given output of the TM DCNL @param topDownIn top down input from the level above us DCNL @returns best estimate of the TM input that would have generated bottomUpOut.'
def write(self, proto): DCNL 'Populate serialization proto instance. DCNL :param proto: (BacktrackingTMCppProto) the proto instance to populate'
@classmethod DCNL def read(cls, proto): DCNL 'Deserialize from proto instance. DCNL :param proto: (BacktrackingTMCppProto) the proto instance to read from'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state.'
def _getEphemeralMembers(self): DCNL 'List of our member variables that we don\'t need to be saved'
def _initEphemerals(self): DCNL 'Initialize all ephemeral members after being restored to a pickled state.'
def saveToFile(self, filePath): DCNL 'Save Cells4 state to a file. File can be loaded with :meth:`loadFromFile`.'
def loadFromFile(self, filePath): DCNL 'Load Cells4 state from a file saved with :meth:`saveToFile`.'
def __getattr__(self, name): DCNL 'Patch __getattr__ so that we can catch the first access to \'cells\' and load. DCNL This function is only called when we try to access an attribute that doesn\'t DCNL exist.  We purposely make sure that "self.cells" doesn\'t exist after DCNL unpickling so that we\'ll hit this, then we can load it on the first access. DCNL If this is called at any other time, it will raise an AttributeError. DCNL That\'s because: DCNL - If \'name\' is "cells", after the first call, self._realCells won\'t exist DCNL so we\'ll get an implicit AttributeError. DCNL - If \'name\' isn\'t "cells", I\'d expect our super wouldn\'t have __getattr__, DCNL so we\'ll raise our own Attribute error.  If the super did get __getattr__, DCNL we\'ll just return what it gives us.'
def compute(self, bottomUpInput, enableLearn, enableInference=None): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.compute`.'
def _inferPhase2(self): DCNL 'This calls phase 2 of inference (used in multistep prediction).'
def _copyAllocatedStates(self): DCNL 'If state is allocated in CPP, copy over the data into our numpy arrays.'
def _setStatePointers(self): DCNL 'If we are having CPP use numpy-allocated buffers, set these buffer DCNL pointers. This is a relatively fast operation and, for safety, should be DCNL done before every call to the cells4 compute methods.  This protects us DCNL in situations where code can cause Python or numpy to create copies.'
def reset(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.reset`.'
def finishLearning(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.finishLearning`.'
def trimSegments(self, minPermanence=None, minNumSyns=None): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.trimSegments`.'
def printSegmentUpdates(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.printSegmentUpdates`.'
def _slowIsSegmentActive(self, seg, timeStep): DCNL 'A segment is active if it has >= activationThreshold connected DCNL synapses that are active due to infActiveState.'
def printCell(self, c, i, onlyActiveSegments=False): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.printCell`.'
def getAvgLearnedSeqLength(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getAvgLearnedSeqLength`.'
def getColCellIdx(self, idx): DCNL 'Get column and cell within column from a global cell index. DCNL The global index is ``idx = colIdx * nCellsPerCol() + cellIdxInCol`` DCNL :param idx: (int) global cell index DCNL :returns: (tuple) (colIdx, cellIdxInCol)'
def getSegmentOnCell(self, c, i, segIdx): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getSegmentOnCell`.'
def getNumSegments(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getNumSegments`.'
def getNumSynapses(self): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getNumSynapses`.'
def getNumSegmentsInCell(self, c, i): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getNumSegmentsInCell`.'
def getSegmentInfo(self, collectActiveData=False): DCNL 'Overrides :meth:`nupic.algorithms.backtracking_tm.BacktrackingTM.getSegmentInfo`.'
def __getitem__(self, columnIndex): DCNL 'Wraps getRow() such that instances may be indexed by columnIndex.'
def replace(self, columnIndex, bitmap): DCNL 'Wraps replaceSparseRow()'
def update(self, columnIndex, vector): DCNL 'Wraps setRowFromDense()'
def getColumnDimensions(self): DCNL ':returns: (iter) the dimensions of the columns in the region'
def getInputDimensions(self): DCNL ':returns: (iter) the dimensions of the input vector'
def getNumColumns(self): DCNL ':returns: (int) the total number of columns'
def getNumInputs(self): DCNL ':returns: (int) the total number of inputs.'
def getPotentialRadius(self): DCNL ':returns: (float) the potential radius'
def setPotentialRadius(self, potentialRadius): DCNL ':param potentialRadius: (float) value to set'
def getPotentialPct(self): DCNL ':returns: (float) the potential percent'
def setPotentialPct(self, potentialPct): DCNL ':param potentialPct: (float) value to set'
def getGlobalInhibition(self): DCNL ':returns: (bool) whether global inhibition is enabled.'
def setGlobalInhibition(self, globalInhibition): DCNL ':param globalInhibition: (bool) value to set.'
def getNumActiveColumnsPerInhArea(self): DCNL ':returns: (float) the number of active columns per inhibition area. Returns DCNL a value less than 0 if parameter is unused.'
def setNumActiveColumnsPerInhArea(self, numActiveColumnsPerInhArea): DCNL 'Sets the number of active columns per inhibition area. Invalidates the DCNL ``localAreaDensity`` parameter DCNL :param numActiveColumnsPerInhArea: (float) value to set'
def getLocalAreaDensity(self): DCNL ':returns: (float) the local area density. Returns a value less than 0 if DCNL parameter is unused.'
def setLocalAreaDensity(self, localAreaDensity): DCNL 'Sets the local area density. Invalidates the \'numActiveColumnsPerInhArea\' DCNL parameter DCNL :param localAreaDensity: (float) value to set'
def getStimulusThreshold(self): DCNL ':returns: (int) the stimulus threshold'
def setStimulusThreshold(self, stimulusThreshold): DCNL ':param stimulusThreshold: (float) value to set.'
def getInhibitionRadius(self): DCNL ':returns: (int) the inhibition radius'
def setInhibitionRadius(self, inhibitionRadius): DCNL ':param inhibitionRadius: (int) value to set'
def getDutyCyclePeriod(self): DCNL ':returns: (int) the duty cycle period'
def setDutyCyclePeriod(self, dutyCyclePeriod): DCNL ':param dutyCyclePeriod: (int) value to set.'
def getBoostStrength(self): DCNL ':returns: (float) the maximum boost value used.'
def setBoostStrength(self, boostStrength): DCNL 'Sets the maximum boost value. DCNL :param boostStrength: (float) value to set'
def getIterationNum(self): DCNL ':returns: the iteration number'
def setIterationNum(self, iterationNum): DCNL ':param iterationNum: (int) value to set'
def getIterationLearnNum(self): DCNL ':returns: (int) The number of iterations that have been learned.'
def setIterationLearnNum(self, iterationLearnNum): DCNL ':param iterationLearnNum: (int) value to set'
def getSpVerbosity(self): DCNL ':returns: (int) the verbosity level, larger is more verbose.'
def setSpVerbosity(self, spVerbosity): DCNL ':param spVerbosity: (int) value to set, larger is more verbose.'
def getUpdatePeriod(self): DCNL ':returns: (int) The period at which active duty cycles are updated.'
def setUpdatePeriod(self, updatePeriod): DCNL ':param updatePeriod: (int) The period at which active duty cycles are DCNL updated.'
def getSynPermTrimThreshold(self): DCNL 'Sparsity is enforced by trimming out all permanence values below this value. DCNL :returns: (float) the permanence trim threshold'
def setSynPermTrimThreshold(self, synPermTrimThreshold): DCNL 'Sparsity is enforced by trimming out all permanence values below this value. DCNL :param synPermTrimThreshold: (float) the permanence trim threshold'
def getSynPermActiveInc(self): DCNL ':returns: (float) the permanence increment amount for active synapses inputs'
def setSynPermActiveInc(self, synPermActiveInc): DCNL 'Sets the permanence increment amount for active synapses. DCNL :param synPermActiveInc: (float) value to set.'
def getSynPermInactiveDec(self): DCNL ':returns: (float) the permanence decrement amount for inactive synapses.'
def setSynPermInactiveDec(self, synPermInactiveDec): DCNL 'Sets the permanence decrement amount for inactive synapses. DCNL :param synPermInactiveDec: (float) value to set.'
def getSynPermBelowStimulusInc(self): DCNL ':returns: (float) the permanence increment amount for columns that have not DCNL been recently active.'
def setSynPermBelowStimulusInc(self, synPermBelowStimulusInc): DCNL 'Sets the permanence increment amount for columns that have not been DCNL recently active. DCNL :param synPermBelowStimulusInc: (float) value to set.'
def getSynPermConnected(self): DCNL ':returns: (float) the permanence amount that qualifies a synapse as being DCNL connected.'
def setSynPermConnected(self, synPermConnected): DCNL 'Sets the permanence amount that qualifies a synapse as being DCNL connected. DCNL :param synPermConnected: (float) value to set.'
def getMinPctOverlapDutyCycles(self): DCNL ':returns: (float) the minimum tolerated overlaps, given as percent of DCNL neighbors overlap score'
def setMinPctOverlapDutyCycles(self, minPctOverlapDutyCycles): DCNL 'Sets the minimum tolerated activity duty cycle, given as percent of DCNL neighbors\' activity duty cycle. DCNL :param minPctOverlapDutyCycles: (float) value to set.'
def getBoostFactors(self, boostFactors): DCNL 'Gets the boost factors for all columns. Input list will be overwritten. DCNL :param boostFactors: (list) size must match number of columns.'
def setBoostFactors(self, boostFactors): DCNL 'Sets the boost factors for all columns. ``boostFactors`` size must match DCNL the number of columns. DCNL :param boostFactors: (iter) value to set.'
def getOverlapDutyCycles(self, overlapDutyCycles): DCNL 'Gets the overlap duty cycles for all columns. ``overlapDutyCycles`` DCNL size must match the number of columns. DCNL :param overlapDutyCycles: (list) will be overwritten.'
def setOverlapDutyCycles(self, overlapDutyCycles): DCNL 'Sets the overlap duty cycles for all columns. ``overlapDutyCycles`` DCNL size must match the number of columns. DCNL :param overlapDutyCycles: (list) value to set.'
def getActiveDutyCycles(self, activeDutyCycles): DCNL 'Gets the activity duty cycles for all columns. Input list will be DCNL overwritten. DCNL :param activeDutyCycles: (list) size must match number of columns.'
def setActiveDutyCycles(self, activeDutyCycles): DCNL 'Sets the activity duty cycles for all columns. ``activeDutyCycles`` size DCNL must match the number of columns. DCNL :param activeDutyCycles: (list) value to set.'
def getMinOverlapDutyCycles(self, minOverlapDutyCycles): DCNL ':returns: (list) the minimum overlap duty cycles for all columns. DCNL ``minOverlapDutyCycles`` size must match the number of columns.'
def setMinOverlapDutyCycles(self, minOverlapDutyCycles): DCNL 'Sets the minimum overlap duty cycles for all columns. DCNL ``minOverlapDutyCycles`` size must match the number of columns. DCNL :param minOverlapDutyCycles: (iter) value to set.'
def getPotential(self, columnIndex, potential): DCNL ':param columnIndex: (int) column index to get potential for. DCNL :param potential: (list) will be overwritten with column potentials. Must DCNL match the number of inputs.'
def setPotential(self, columnIndex, potential): DCNL 'Sets the potential mapping for a given column. ``potential`` size must match DCNL the number of inputs, and must be greater than ``stimulusThreshold``. DCNL :param columnIndex: (int) column index to set potential for. DCNL :param potential: (list) value to set.'
def getPermanence(self, columnIndex, permanence): DCNL 'Returns the permanence values for a given column. ``permanence`` size DCNL must match the number of inputs. DCNL :param columnIndex: (int) column index to get permanence for. DCNL :param permanence: (list) will be overwritten with permanences.'
def setPermanence(self, columnIndex, permanence): DCNL 'Sets the permanence values for a given column. ``permanence`` size must DCNL match the number of inputs. DCNL :param columnIndex: (int) column index to set permanence for. DCNL :param permanence: (list) value to set.'
def getConnectedSynapses(self, columnIndex, connectedSynapses): DCNL ':param connectedSynapses: (list) will be overwritten DCNL :returns: (iter) the connected synapses for a given column. DCNL ``connectedSynapses`` size must match the number of inputs'
def getConnectedCounts(self, connectedCounts): DCNL ':param connectedCounts: (list) will be overwritten DCNL :returns: (int) the number of connected synapses for all columns. DCNL ``connectedCounts`` size must match the number of columns.'
def getOverlaps(self): DCNL ':returns: (iter) the overlap score for each column.'
def getBoostedOverlaps(self): DCNL ':returns: (list) the boosted overlap score for each column.'
def compute(self, inputVector, learn, activeArray): DCNL 'This is the primary public method of the SpatialPooler class. This DCNL function takes a input vector and outputs the indices of the active columns. DCNL If \'learn\' is set to True, this method also updates the permanences of the DCNL columns. DCNL :param inputVector: A numpy array of 0\'s and 1\'s that comprises the input DCNL to the spatial pooler. The array will be treated as a one dimensional DCNL array, therefore the dimensions of the array do not have to match the DCNL exact dimensions specified in the class constructor. In fact, even a DCNL list would suffice. The number of input bits in the vector must, DCNL however, match the number of bits specified by the call to the DCNL constructor. Therefore there must be a \'0\' or \'1\' in the array for DCNL every input bit. DCNL :param learn: A boolean value indicating whether learning should be DCNL performed. Learning entails updating the  permanence values of the DCNL synapses, and hence modifying the \'state\' of the model. Setting DCNL learning to \'off\' freezes the SP and has many uses. For example, you DCNL might want to feed in various inputs and examine the resulting SDR\'s. DCNL :param activeArray: An array whose size is equal to the number of columns. DCNL Before the function returns this array will be populated with 1\'s at DCNL the indices of the active columns, and 0\'s everywhere else.'
def stripUnlearnedColumns(self, activeArray): DCNL 'Removes the set of columns who have never been active from the set of DCNL active columns selected in the inhibition round. Such columns cannot DCNL represent learned pattern and are therefore meaningless if only inference DCNL is required. This should not be done when using a random, unlearned SP DCNL since you would end up with no active columns. DCNL :param activeArray: An array whose size is equal to the number of columns. DCNL Any columns marked as active with an activeDutyCycle of 0 have DCNL never been activated before and therefore are not active due to DCNL learning. Any of these (unlearned) columns will be disabled (set to 0).'
def _updateMinDutyCycles(self): DCNL 'Updates the minimum duty cycles defining normal activity for a column. A DCNL column with activity duty cycle below this minimum threshold is boosted.'
def _updateMinDutyCyclesGlobal(self): DCNL 'Updates the minimum duty cycles in a global fashion. Sets the minimum duty DCNL cycles for the overlap all columns to be a percent of the maximum in the DCNL region, specified by minPctOverlapDutyCycle. Functionality it is equivalent DCNL to _updateMinDutyCyclesLocal, but this function exploits the globality of DCNL the computation to perform it in a straightforward, and efficient manner.'
def _updateMinDutyCyclesLocal(self): DCNL 'Updates the minimum duty cycles. The minimum duty cycles are determined DCNL locally. Each column\'s minimum duty cycles are set to be a percent of the DCNL maximum duty cycles in the column\'s neighborhood. Unlike DCNL _updateMinDutyCyclesGlobal, here the values can be quite different for DCNL different columns.'
def _updateDutyCycles(self, overlaps, activeColumns): DCNL 'Updates the duty cycles for each column. The OVERLAP duty cycle is a moving DCNL average of the number of inputs which overlapped with the each column. The DCNL ACTIVITY duty cycles is a moving average of the frequency of activation for DCNL each column. DCNL Parameters: DCNL :param overlaps: DCNL An array containing the overlap score for each column. DCNL The overlap score for a column is defined as the number DCNL of synapses in a "connected state" (connected synapses) DCNL that are connected to input bits which are turned on. DCNL :param activeColumns: DCNL An array containing the indices of the active columns, DCNL the sparse set of columns which survived inhibition'
def _updateInhibitionRadius(self): DCNL 'Update the inhibition radius. The inhibition radius is a measure of the DCNL square (or hypersquare) of columns that each a column is "connected to" DCNL on average. Since columns are are not connected to each other directly, we DCNL determine this quantity by first figuring out how many *inputs* a column is DCNL connected to, and then multiplying it by the total number of columns that DCNL exist for each input. For multiple dimension the aforementioned DCNL calculations are averaged over all dimensions of inputs and columns. This DCNL value is meaningless if global inhibition is enabled.'
def _avgColumnsPerInput(self): DCNL 'The average number of columns per input, taking into account the topology DCNL of the inputs and columns. This value is used to calculate the inhibition DCNL radius. This function supports an arbitrary number of dimensions. If the DCNL number of column dimensions does not match the number of input dimensions, DCNL we treat the missing, or phantom dimensions as \'ones\'.'
def _avgConnectedSpanForColumn1D(self, columnIndex): DCNL 'The range of connected synapses for column. This is used to DCNL calculate the inhibition radius. This variation of the function only DCNL supports a 1 dimensional column topology. DCNL Parameters: DCNL :param columnIndex:   The index identifying a column in the permanence, DCNL potential and connectivity matrices'
def _avgConnectedSpanForColumn2D(self, columnIndex): DCNL 'The range of connectedSynapses per column, averaged for each dimension. DCNL This value is used to calculate the inhibition radius. This variation of DCNL the  function only supports a 2 dimensional column topology. DCNL Parameters: DCNL :param columnIndex:   The index identifying a column in the permanence, DCNL potential and connectivity matrices'
def _avgConnectedSpanForColumnND(self, columnIndex): DCNL 'The range of connectedSynapses per column, averaged for each dimension. DCNL This value is used to calculate the inhibition radius. This variation of DCNL the function supports arbitrary column dimensions. DCNL Parameters: DCNL :param index:   The index identifying a column in the permanence, potential DCNL and connectivity matrices.'
def _adaptSynapses(self, inputVector, activeColumns): DCNL 'The primary method in charge of learning. Adapts the permanence values of DCNL the synapses based on the input vector, and the chosen columns after DCNL inhibition round. Permanence values are increased for synapses connected to DCNL input bits that are turned on, and decreased for synapses connected to DCNL inputs bits that are turned off. DCNL Parameters: DCNL :param inputVector: DCNL A numpy array of 0\'s and 1\'s that comprises the input to DCNL the spatial pooler. There exists an entry in the array DCNL for every input bit. DCNL :param activeColumns: DCNL An array containing the indices of the columns that DCNL survived inhibition.'
def _bumpUpWeakColumns(self): DCNL 'This method increases the permanence values of synapses of columns whose DCNL activity level has been too low. Such columns are identified by having an DCNL overlap duty cycle that drops too much below those of their peers. The DCNL permanence values for such columns are increased.'
def _raisePermanenceToThreshold(self, perm, mask): DCNL 'This method ensures that each column has enough connections to input bits DCNL to allow it to become active. Since a column must have at least DCNL \'self._stimulusThreshold\' overlaps in order to be considered during the DCNL inhibition phase, columns without such minimal number of connections, even DCNL if all the input bits they are connected to turn on, have no chance of DCNL obtaining the minimum threshold. For such columns, the permanence values DCNL are increased until the minimum number of connections are formed. DCNL Parameters: DCNL :param perm:    An array of permanence values for a column. The array is DCNL "dense", i.e. it contains an entry for each input bit, even DCNL if the permanence value is 0. DCNL :param mask:    the indices of the columns whose permanences need to be DCNL raised.'
def _updatePermanencesForColumn(self, perm, columnIndex, raisePerm=True): DCNL 'This method updates the permanence matrix with a column\'s new permanence DCNL values. The column is identified by its index, which reflects the row in DCNL the matrix, and the permanence is given in \'dense\' form, i.e. a full DCNL array containing all the zeros as well as the non-zero values. It is in DCNL charge of implementing \'clipping\' - ensuring that the permanence values are DCNL always between 0 and 1 - and \'trimming\' - enforcing sparsity by zeroing out DCNL all permanence values below \'_synPermTrimThreshold\'. It also maintains DCNL the consistency between \'self._permanences\' (the matrix storing the DCNL permanence values), \'self._connectedSynapses\', (the matrix storing the bits DCNL each column is connected to), and \'self._connectedCounts\' (an array storing DCNL the number of input bits each column is connected to). Every method wishing DCNL to modify the permanence matrix should do so through this method. DCNL Parameters: DCNL :param perm:    An array of permanence values for a column. The array is DCNL "dense", i.e. it contains an entry for each input bit, even DCNL if the permanence value is 0. DCNL :param index:   The index identifying a column in the permanence, potential DCNL and connectivity matrices DCNL :param raisePerm: A boolean value indicating whether the permanence values DCNL should be raised until a minimum number are synapses are in DCNL a connected state. Should be set to \'false\' when a direct DCNL assignment is required.'
def _initPermConnected(self): DCNL 'Returns a randomly generated permanence value for a synapses that is DCNL initialized in a connected state. The basic idea here is to initialize DCNL permanence values very close to synPermConnected so that a small number of DCNL learning steps could make it disconnected or connected. DCNL Note: experimentation was done a long time ago on the best way to initialize DCNL permanence values, but the history for this particular scheme has been lost.'
def _initPermNonConnected(self): DCNL 'Returns a randomly generated permanence value for a synapses that is to be DCNL initialized in a non-connected state.'
def _initPermanence(self, potential, connectedPct): DCNL 'Initializes the permanences of a column. The method DCNL returns a 1-D array the size of the input, where each entry in the DCNL array represents the initial permanence value between the input bit DCNL at the particular index in the array, and the column represented by DCNL the \'index\' parameter. DCNL Parameters: DCNL :param potential: A numpy array specifying the potential pool of the column. DCNL Permanence values will only be generated for input bits DCNL corresponding to indices for which the mask value is 1. DCNL :param connectedPct: A value between 0 or 1 governing the chance, for each DCNL permanence, that the initial permanence value will DCNL be a value that is considered connected.'
def _mapColumn(self, index): DCNL 'Maps a column to its respective input index, keeping to the topology of DCNL the region. It takes the index of the column as an argument and determines DCNL what is the index of the flattened input vector that is to be the center of DCNL the column\'s potential pool. It distributes the columns over the inputs DCNL uniformly. The return value is an integer representing the index of the DCNL input bit. Examples of the expected output of this method: DCNL * If the topology is one dimensional, and the column index is 0, this DCNL method will return the input index 0. If the column index is 1, and there DCNL are 3 columns over 7 inputs, this method will return the input index 3. DCNL * If the topology is two dimensional, with column dimensions [3, 5] and DCNL input dimensions [7, 11], and the column index is 3, the method DCNL returns input index 8. DCNL Parameters: DCNL :param index:   The index identifying a column in the permanence, potential DCNL and connectivity matrices. DCNL :param wrapAround: A boolean value indicating that boundaries should be DCNL ignored.'
def _mapPotential(self, index): DCNL 'Maps a column to its input bits. This method encapsulates the topology of DCNL the region. It takes the index of the column as an argument and determines DCNL what are the indices of the input vector that are located within the DCNL column\'s potential pool. The return value is a list containing the indices DCNL of the input bits. The current implementation of the base class only DCNL supports a 1 dimensional topology of columns with a 1 dimensional topology DCNL of inputs. To extend this class to support 2-D topology you will need to DCNL override this method. Examples of the expected output of this method: DCNL * If the potentialRadius is greater than or equal to the largest input DCNL dimension then each column connects to all of the inputs. DCNL * If the topology is one dimensional, the input space is divided up evenly DCNL among the columns and each column is centered over its share of the DCNL inputs.  If the potentialRadius is 5, then each column connects to the DCNL input it is centered above as well as the 5 inputs to the left of that DCNL input and the five inputs to the right of that input, wrapping around if DCNL wrapAround=True. DCNL * If the topology is two dimensional, the input space is again divided up DCNL evenly among the columns and each column is centered above its share of DCNL the inputs.  If the potentialRadius is 5, the column connects to a square DCNL that has 11 inputs on a side and is centered on the input that the column DCNL is centered above. DCNL Parameters: DCNL :param index:   The index identifying a column in the permanence, potential DCNL and connectivity matrices.'
@staticmethod DCNL def _updateDutyCyclesHelper(dutyCycles, newInput, period): DCNL 'Updates a duty cycle estimate with a new value. This is a helper DCNL function that is used to update several duty cycle variables in DCNL the Column class, such as: overlapDutyCucle, activeDutyCycle, DCNL minPctDutyCycleBeforeInh, minPctDutyCycleAfterInh, etc. returns DCNL the updated duty cycle. Duty cycles are updated according to the following DCNL formula: DCNL (period - 1)*dutyCycle + newValue DCNL dutyCycle := ---------------------------------- DCNL period DCNL Parameters: DCNL :param dutyCycles: An array containing one or more duty cycle values that need DCNL to be updated DCNL :param newInput: A new numerical value used to update the duty cycle DCNL :param period:  The period of the duty cycle'
def _updateBoostFactors(self): DCNL 'Update the boost factors for all columns. The boost factors are used to DCNL increase the overlap of inactive columns to improve their chances of DCNL becoming active, and hence encourage participation of more columns in the DCNL learning process. The boosting function is a curve defined as: DCNL boostFactors = exp[ - boostStrength * (dutyCycle - targetDensity)] DCNL Intuitively this means that columns that have been active at the target DCNL activation level have a boost factor of 1, meaning their overlap is not DCNL boosted. Columns whose active duty cycle drops too much below that of their DCNL neighbors are boosted depending on how infrequently they have been active. DCNL Columns that has been active more than the target activation level have DCNL a boost factor below 1, meaning their overlap is suppressed DCNL The boostFactor depends on the activeDutyCycle via an exponential function: DCNL boostFactor DCNL |                |           1  _  |                  |    _ DCNL +--------------------> activeDutyCycle DCNL targetDensity'
def _updateBoostFactorsGlobal(self): DCNL 'Update boost factors when global inhibition is used'
def _updateBoostFactorsLocal(self): DCNL 'Update boost factors when local inhibition is used'
def _updateBookeepingVars(self, learn): DCNL 'Updates counter instance variables each round. DCNL Parameters: DCNL :param learn:   a boolean value indicating whether learning should be DCNL performed. Learning entails updating the  permanence DCNL values of the synapses, and hence modifying the \'state\' DCNL of the model. setting learning to \'off\' might be useful DCNL for indicating separate training vs. testing sets.'
def _calculateOverlap(self, inputVector): DCNL 'This function determines each column\'s overlap with the current input DCNL vector. The overlap of a column is the number of synapses for that column DCNL that are connected (permanence value is greater than \'_synPermConnected\') DCNL to input bits which are turned on. The implementation takes advantage of DCNL the SparseBinaryMatrix class to perform this calculation efficiently. DCNL Parameters: DCNL :param inputVector: a numpy array of 0\'s and 1\'s that comprises the input to DCNL the spatial pooler.'
def _inhibitColumns(self, overlaps): DCNL 'Performs inhibition. This method calculates the necessary values needed to DCNL actually perform inhibition and then delegates the task of picking the DCNL active columns to helper functions. DCNL Parameters: DCNL :param overlaps: an array containing the overlap score for each  column. DCNL The overlap score for a column is defined as the number DCNL of synapses in a "connected state" (connected synapses) DCNL that are connected to input bits which are turned on.'
def _inhibitColumnsGlobal(self, overlaps, density): DCNL 'Perform global inhibition. Performing global inhibition entails picking the DCNL top \'numActive\' columns with the highest overlap score in the entire DCNL region. At most half of the columns in a local neighborhood are allowed to DCNL be active. Columns with an overlap score below the \'stimulusThreshold\' are DCNL always inhibited. DCNL :param overlaps: an array containing the overlap score for each  column. DCNL The overlap score for a column is defined as the number DCNL of synapses in a "connected state" (connected synapses) DCNL that are connected to input bits which are turned on. DCNL :param density: The fraction of columns to survive inhibition. DCNL @return list with indices of the winning columns'
def _inhibitColumnsLocal(self, overlaps, density): DCNL 'Performs local inhibition. Local inhibition is performed on a column by DCNL column basis. Each column observes the overlaps of its neighbors and is DCNL selected if its overlap score is within the top \'numActive\' in its local DCNL neighborhood. At most half of the columns in a local neighborhood are DCNL allowed to be active. Columns with an overlap score below the DCNL \'stimulusThreshold\' are always inhibited. DCNL :param overlaps: an array containing the overlap score for each  column. DCNL The overlap score for a column is defined as the number DCNL of synapses in a "connected state" (connected synapses) DCNL that are connected to input bits which are turned on. DCNL :param density: The fraction of columns to survive inhibition. This DCNL value is only an intended target. Since the surviving DCNL columns are picked in a local fashion, the exact fraction DCNL of surviving columns is likely to vary. DCNL @return list with indices of the winning columns'
def _isUpdateRound(self): DCNL 'returns true if enough rounds have passed to warrant updates of DCNL duty cycles'
def _getColumnNeighborhood(self, centerColumn): DCNL 'Gets a neighborhood of columns. DCNL Simply calls topology.neighborhood or topology.wrappingNeighborhood DCNL A subclass can insert different topology behavior by overriding this method. DCNL :param centerColumn (int) DCNL The center of the neighborhood. DCNL @returns (1D numpy array of integers) DCNL The columns in the neighborhood.'
def _getInputNeighborhood(self, centerInput): DCNL 'Gets a neighborhood of inputs. DCNL Simply calls topology.wrappingNeighborhood or topology.neighborhood. DCNL A subclass can insert different topology behavior by overriding this method. DCNL :param centerInput (int) DCNL The center of the neighborhood. DCNL @returns (1D numpy array of integers) DCNL The inputs in the neighborhood.'
def _seed(self, seed=(-1)): DCNL 'Initialize the random seed'
def __setstate__(self, state): DCNL 'Initialize class properties from stored values.'
def printParameters(self): DCNL 'Useful for debugging.'
def __init__(self, claLearningPeriod=None, learningPeriod=288, estimationSamples=100, historicWindowSize=8640, reestimationPeriod=100): DCNL 'NOTE: Anomaly likelihood scores are reported at a flat 0.5 for DCNL learningPeriod + estimationSamples iterations. DCNL claLearningPeriod and learningPeriod are specifying the same variable, DCNL although claLearningPeriod is a deprecated name for it. DCNL :param learningPeriod: (claLearningPeriod: deprecated) - (int) the number of DCNL iterations required for the algorithm to learn the basic patterns in the DCNL dataset and for the anomaly score to \'settle down\'. The default is based DCNL on empirical observations but in reality this could be larger for more DCNL complex domains. The downside if this is too large is that real anomalies DCNL might get ignored and not flagged. DCNL :param estimationSamples: (int) the number of reasonable anomaly scores DCNL required for the initial estimate of the Gaussian. The default of 100 DCNL records is reasonable - we just need sufficient samples to get a decent DCNL estimate for the Gaussian. It\'s unlikely you will need to tune this since DCNL the Gaussian is re-estimated every 10 iterations by default. DCNL :param historicWindowSize: (int) size of sliding window of historical DCNL data points to maintain for periodic reestimation of the Gaussian. Note: DCNL the default of 8640 is based on a month\'s worth of history at 5-minute DCNL intervals. DCNL :param reestimationPeriod: (int) how often we re-estimate the Gaussian DCNL distribution. The ideal is to re-estimate every iteration but this is a DCNL performance hit. In general the system is not very sensitive to this DCNL number as long as it is small relative to the total number of records DCNL processed.'
@staticmethod DCNL def computeLogLikelihood(likelihood): DCNL 'Compute a log scale representation of the likelihood value. Since the DCNL likelihood computations return low probabilities that often go into four 9\'s DCNL or five 9\'s, a log value is more useful for visualization, thresholding, DCNL etc.'
@staticmethod DCNL def _calcSkipRecords(numIngested, windowSize, learningPeriod): DCNL 'Return the value of skipRecords for passing to estimateAnomalyLikelihoods DCNL If `windowSize` is very large (bigger than the amount of data) then this DCNL could just return `learningPeriod`. But when some values have fallen out of DCNL the historical sliding window of anomaly records, then we have to take those DCNL into account as well so we return the `learningPeriod` minus the number DCNL shifted out. DCNL :param numIngested - (int) number of data points that have been added to the DCNL sliding window of historical data points. DCNL :param windowSize - (int) size of sliding window of historical data points. DCNL :param learningPeriod - (int) the number of iterations required for the DCNL algorithm to learn the basic patterns in the dataset and for the anomaly DCNL score to \'settle down\'.'
@classmethod DCNL def read(cls, proto): DCNL 'capnp deserialization method for the anomaly likelihood object DCNL :param proto: (Object) capnp proto object specified in DCNL nupic.regions.AnomalyLikelihoodRegion.capnp DCNL :returns: (Object) the deserialized AnomalyLikelihood object'
def write(self, proto): DCNL 'capnp serialization method for the anomaly likelihood object DCNL :param proto: (Object) capnp proto object specified in DCNL nupic.regions.AnomalyLikelihoodRegion.capnp'
def anomalyProbability(self, value, anomalyScore, timestamp=None): DCNL 'Compute the probability that the current value plus anomaly score represents DCNL an anomaly given the historical distribution of anomaly scores. The closer DCNL the number is to 1, the higher the chance it is an anomaly. DCNL :param value: the current metric ("raw") input value, eg. "orange", or DCNL \'21.2\' (deg. Celsius), ... DCNL :param anomalyScore: the current anomaly score DCNL :param timestamp: [optional] timestamp of the ocurrence, DCNL default (None) results in using iteration step. DCNL :returns: the anomalyLikelihood for this record.'
def __init__(self, monitor, title): DCNL '@param monitor (MonitorMixinBase) Monitor Mixin instance that generated DCNL this trace DCNL @param title   (string)           Title'
@staticmethod DCNL def prettyPrintDatum(datum): DCNL '@param datum (object) Datum from `self.data` to pretty-print DCNL @return (string) Pretty-printed datum'
def makeCountsTrace(self): DCNL '@return (CountsTrace) A new Trace made up of counts of this trace\'s indices.'
def makeCumCountsTrace(self): DCNL '@return (CountsTrace) A new Trace made up of cumulative counts of this DCNL trace\'s indices.'
def mmGetTraceActiveColumns(self): DCNL '@return (Trace) Trace of active columns'
def mmGetTracePredictiveCells(self): DCNL '@return (Trace) Trace of predictive cells'
def mmGetTraceNumSegments(self): DCNL '@return (Trace) Trace of # segments'
def mmGetTraceNumSynapses(self): DCNL '@return (Trace) Trace of # synapses'
def mmGetTraceSequenceLabels(self): DCNL '@return (Trace) Trace of sequence labels'
def mmGetTraceResets(self): DCNL '@return (Trace) Trace of resets'
def mmGetTracePredictedActiveCells(self): DCNL '@return (Trace) Trace of predicted => active cells'
def mmGetTracePredictedInactiveCells(self): DCNL '@return (Trace) Trace of predicted => inactive cells'
def mmGetTracePredictedActiveColumns(self): DCNL '@return (Trace) Trace of predicted => active columns'
def mmGetTracePredictedInactiveColumns(self): DCNL '@return (Trace) Trace of predicted => inactive columns'
def mmGetTraceUnpredictedActiveColumns(self): DCNL '@return (Trace) Trace of unpredicted => active columns'
def mmGetMetricFromTrace(self, trace): DCNL 'Convenience method to compute a metric over an indices trace, excluding DCNL resets. DCNL @param (IndicesTrace) Trace of indices DCNL @return (Metric) Metric over trace excluding resets'
def mmGetMetricSequencesPredictedActiveCellsPerColumn(self): DCNL 'Metric for number of predicted => active cells per column for each sequence DCNL @return (Metric) metric'
def mmGetMetricSequencesPredictedActiveCellsShared(self): DCNL 'Metric for number of sequences each predicted => active cell appears in DCNL Note: This metric is flawed when it comes to high-order sequences. DCNL @return (Metric) metric'
def mmPrettyPrintConnections(self): DCNL 'Pretty print the connections in the temporal memory. DCNL TODO: Use PrettyTable. DCNL @return (string) Pretty-printed text'
def mmPrettyPrintSequenceCellRepresentations(self, sortby='Column'): DCNL 'Pretty print the cell representations for sequences in the history. DCNL @param sortby (string) Column of table to sort by DCNL @return (string) Pretty-printed text'
def _mmComputeTransitionTraces(self): DCNL 'Computes the transition traces, if necessary. DCNL Transition traces are the following: DCNL predicted => active cells DCNL predicted => inactive cells DCNL predicted => active columns DCNL predicted => inactive columns DCNL unpredicted => active columns'
def mmGetCellActivityPlot(self, title='', showReset=False, resetShading=0.25, activityType='activeCells'): DCNL 'Returns plot of the cell activity. DCNL @param title        (string)  an optional title for the figure DCNL @param showReset    (bool)    if true, the first set of cell activities DCNL after a reset will have a gray background DCNL @param resetShading (float)   if showReset is true, this float specifies the DCNL intensity of the reset background with 0.0 DCNL being white and 1.0 being black DCNL @param activityType (string)  The type of cell activity to display. Valid DCNL types include "activeCells", DCNL "predictiveCells", "predictedCells", DCNL and "predictedActiveCells" DCNL @return (Plot) plot'
def __init__(self, monitor, title, data): DCNL '@param monitor (MonitorMixinBase) Monitor Mixin instance that generated DCNL this trace DCNL @param title   (string)           Title DCNL @param data    (list)             List of numbers to compute metric from'
def __init__(self, monitor, title, show=True): DCNL '@param monitor (MonitorMixinBase) Monitor Mixin instance that generated DCNL this plot DCNL @param title  (string)            Plot title'
def addGraph(self, data, position=111, xlabel=None, ylabel=None): DCNL 'Adds a graph to the plot\'s figure. DCNL @param data See matplotlib.Axes.plot documentation. DCNL @param position A 3-digit number. The first two digits define a 2D grid DCNL where subplots may be added. The final digit specifies the nth grid DCNL location for the added subplot DCNL @param xlabel text to be displayed on the x-axis DCNL @param ylabel text to be displayed on the y-axis'
def addHistogram(self, data, position=111, xlabel=None, ylabel=None, bins=None): DCNL 'Adds a histogram to the plot\'s figure. DCNL @param data See matplotlib.Axes.hist documentation. DCNL @param position A 3-digit number. The first two digits define a 2D grid DCNL where subplots may be added. The final digit specifies the nth grid DCNL location for the added subplot DCNL @param xlabel text to be displayed on the x-axis DCNL @param ylabel text to be displayed on the y-axis'
def add2DArray(self, data, position=111, xlabel=None, ylabel=None, cmap=None, aspect='auto', interpolation='nearest', name=None): DCNL 'Adds an image to the plot\'s figure. DCNL @param data a 2D array. See matplotlib.Axes.imshow documentation. DCNL @param position A 3-digit number. The first two digits define a 2D grid DCNL where subplots may be added. The final digit specifies the nth grid DCNL location for the added subplot DCNL @param xlabel text to be displayed on the x-axis DCNL @param ylabel text to be displayed on the y-axis DCNL @param cmap color map used in the rendering DCNL @param aspect how aspect ratio is handled during resize DCNL @param interpolation interpolation method'
def _addBase(self, position, xlabel=None, ylabel=None): DCNL 'Adds a subplot to the plot\'s figure at specified position. DCNL @param position A 3-digit number. The first two digits define a 2D grid DCNL where subplots may be added. The final digit specifies the nth grid DCNL location for the added subplot DCNL @param xlabel text to be displayed on the x-axis DCNL @param ylabel text to be displayed on the y-axis DCNL @returns (matplotlib.Axes) Axes instance'
def __init__(self, *args, **kwargs): DCNL 'Note: If you set the kwarg "mmName", then pretty-printing of traces and DCNL metrics will include the name you specify as a tag before every title.'
def mmClearHistory(self): DCNL 'Clears the stored history.'
@staticmethod DCNL def mmPrettyPrintTraces(traces, breakOnResets=None): DCNL 'Returns pretty-printed table of traces. DCNL @param traces (list) Traces to print in table DCNL @param breakOnResets (BoolsTrace) Trace of resets to break table on DCNL @return (string) Pretty-printed table of traces.'
@staticmethod DCNL def mmPrettyPrintMetrics(metrics, sigFigs=5): DCNL 'Returns pretty-printed table of metrics. DCNL @param metrics (list) Traces to print in table DCNL @param sigFigs (int)  Number of significant figures to print DCNL @return (string) Pretty-printed table of metrics.'
def mmGetDefaultTraces(self, verbosity=1): DCNL 'Returns list of default traces. (To be overridden.) DCNL @param verbosity (int) Verbosity level DCNL @return (list) Default traces'
def mmGetDefaultMetrics(self, verbosity=1): DCNL 'Returns list of default metrics. (To be overridden.) DCNL @param verbosity (int) Verbosity level DCNL @return (list) Default metrics'
def mmGetCellTracePlot(self, cellTrace, cellCount, activityType, title='', showReset=False, resetShading=0.25): DCNL 'Returns plot of the cell activity. Note that if many timesteps of DCNL activities are input, matplotlib\'s image interpolation may omit activities DCNL (columns in the image). DCNL @param cellTrace    (list)   a temporally ordered list of sets of cell DCNL activities DCNL @param cellCount    (int)    number of cells in the space being rendered DCNL @param activityType (string) type of cell activity being displayed DCNL @param title        (string) an optional title for the figure DCNL @param showReset    (bool)   if true, the first set of cell activities DCNL after a reset will have a grayscale background DCNL @param resetShading (float)  applicable if showReset is true, specifies the DCNL intensity of the reset background with 0.0 DCNL being white and 1.0 being black DCNL @return (Plot) plot'
def __init__(self, columnDimensions=(2048,), cellsPerColumn=32, activationThreshold=13, initialPermanence=0.21, connectedPermanence=0.5, minThreshold=10, maxNewSynapseCount=20, permanenceIncrement=0.1, permanenceDecrement=0.1, seed=42): DCNL 'Translate parameters and initialize member variables DCNL specific to TemporalMemory'
def compute(self, activeColumns, learn=True): DCNL 'Feeds input record through TM, performing inference and learning. DCNL Updates member variables with new state. DCNL @param activeColumns (set) Indices of active columns in `t`'
def compute(self, recordNum, patternNZ, classification, learn, infer): DCNL 'Process one input sample. DCNL This method is called by outer loop code outside the nupic-engine. We DCNL use this instead of the nupic engine compute() because our inputs and DCNL outputs aren\'t fixed size vectors of reals. DCNL :param recordNum: Record number of this input pattern. Record numbers DCNL normally increase sequentially by 1 each time unless there are missing DCNL records in the dataset. Knowing this information insures that we don\'t get DCNL confused by missing records. DCNL :param patternNZ: List of the active indices from the output below. When the DCNL input is from TemporalMemory, this list should be the indices of the DCNL active cells. DCNL :param classification: Dict of the classification information where: DCNL - bucketIdx: list of indices of the encoder bucket DCNL - actValue: list of actual values going into the encoder DCNL Classification could be None for inference mode. DCNL :param learn: (bool) if true, learn this sample DCNL :param infer: (bool) if true, perform inference DCNL :return:    Dict containing inference results, there is one entry for each DCNL step in self.steps, where the key is the number of steps, and DCNL the value is an array containing the relative likelihood for DCNL each bucketIdx starting from bucketIdx 0. DCNL There is also an entry containing the average actual value to DCNL use for each bucket. The key is \'actualValues\'. DCNL for example: DCNL .. code-block:: python DCNL {1 :             [0.1, 0.3, 0.2, 0.7], DCNL 4 :             [0.2, 0.4, 0.3, 0.5], DCNL \'actualValues\': [1.5, 3,5, 5,5, 7.6],'
def infer(self, patternNZ, actValueList): DCNL 'Return the inference value from one input sample. The actual DCNL learning happens in compute(). DCNL :param patternNZ: list of the active indices from the output below DCNL :param classification: dict of the classification information: DCNL bucketIdx: index of the encoder bucket DCNL actValue:  actual value going into the encoder DCNL :return:    dict containing inference results, one entry for each step in DCNL self.steps. The key is the number of steps, the value is an DCNL array containing the relative likelihood for each bucketIdx DCNL starting from bucketIdx 0. DCNL for example: DCNL .. code-block:: python DCNL {\'actualValues\': [0.0, 1.0, 2.0, 3.0] DCNL 1 : [0.1, 0.3, 0.2, 0.7] DCNL 4 : [0.2, 0.4, 0.3, 0.5]}'
def inferSingleStep(self, patternNZ, weightMatrix): DCNL 'Perform inference for a single step. Given an SDR input and a weight DCNL matrix, return a predicted distribution. DCNL :param patternNZ: list of the active indices from the output below DCNL :param weightMatrix: numpy array of the weight matrix DCNL :return: numpy array of the predicted class label distribution'
def _calculateError(self, recordNum, bucketIdxList): DCNL 'Calculate error signal DCNL :param bucketIdxList: list of encoder buckets DCNL :return: dict containing error. The key is the number of steps DCNL The value is a numpy array of error at the output layer'
def __eq__(self, other): DCNL 'Explicitly implement this for unit testing. The flatIdx is not designed DCNL to be consistent after serialize / deserialize, and the synapses might not DCNL enumerate in the same order.'
def __eq__(self, other): DCNL 'Explicitly implement this for unit testing. Allow floating point DCNL differences for synapse permanence.'
def segmentsForCell(self, cell): DCNL 'Returns the segments that belong to a cell. DCNL :param cell: (int) Cell index DCNL :returns: (list) Segment objects representing segments on the given cell.'
def synapsesForSegment(self, segment): DCNL 'Returns the synapses on a segment. DCNL :param segment: (int) Segment index DCNL :returns: (set) Synapse objects representing synapses on the given segment.'
def dataForSynapse(self, synapse): DCNL 'Returns the data for a synapse. DCNL .. note:: This method exists to match the interface of the C++ Connections. DCNL This allows tests and tools to inspect the connections using a common DCNL interface. DCNL :param synapse: (:class:`Synapse`) DCNL :returns: Synapse data'
def dataForSegment(self, segment): DCNL 'Returns the data for a segment. DCNL .. note:: This method exists to match the interface of the C++ Connections. DCNL This allows tests and tools to inspect the connections using a common DCNL interface. DCNL :param segment (:class:`Segment`) DCNL :returns: segment data'
def getSegment(self, cell, idx): DCNL 'Returns a :class:`Segment` object of the specified segment using data from DCNL the ``self._cells`` array. DCNL :param cell: (int) cell index DCNL :param idx:  (int) segment index on a cell DCNL :returns: (:class:`Segment`) Segment object with index idx on the specified cell'
def segmentForFlatIdx(self, flatIdx): DCNL 'Get the segment with the specified flatIdx. DCNL :param flatIdx: (int) The segment\'s flattened list index. DCNL :returns: (:class:`Segment`)'
def segmentFlatListLength(self): DCNL 'Get the needed length for a list to hold a value for every segment\'s DCNL flatIdx. DCNL :returns: (int) Required list length'
def synapsesForPresynapticCell(self, presynapticCell): DCNL 'Returns the synapses for the source cell that they synapse on. DCNL :param presynapticCell: (int) Source cell index DCNL :returns: (set) :class:`Synapse` objects'
def createSegment(self, cell): DCNL 'Adds a new segment on a cell. DCNL :param cell: (int) Cell index DCNL :returns: (int) New segment index'
def destroySegment(self, segment): DCNL 'Destroys a segment. DCNL :param segment: (:class:`Segment`) representing the segment to be destroyed.'
def createSynapse(self, segment, presynapticCell, permanence): DCNL 'Creates a new synapse on a segment. DCNL :param segment: (:class:`Segment`) Segment object for synapse to be synapsed DCNL to. DCNL :param presynapticCell: (int) Source cell index. DCNL :param permanence: (float) Initial permanence of synapse. DCNL :returns: (:class:`Synapse`) created synapse'
def destroySynapse(self, synapse): DCNL 'Destroys a synapse. DCNL :param synapse: (:class:`Synapse`) synapse to destroy'
def updateSynapsePermanence(self, synapse, permanence): DCNL 'Updates the permanence for a synapse. DCNL :param synapse: (class:`Synapse`) to be updated. DCNL :param permanence: (float) New permanence.'
def computeActivity(self, activePresynapticCells, connectedPermanence): DCNL 'Compute each segment\'s number of active synapses for a given input. DCNL In the returned lists, a segment\'s active synapse count is stored at index DCNL ``segment.flatIdx``. DCNL :param activePresynapticCells: (iter) Active cells. DCNL :param connectedPermanence: (float) Permanence threshold for a synapse to be DCNL considered connected DCNL :returns: (tuple) (``numActiveConnectedSynapsesForSegment`` [list], DCNL ``numActivePotentialSynapsesForSegment`` [list])'
def numSegments(self, cell=None): DCNL 'Returns the number of segments. DCNL :param cell: (int) Optional parameter to get the number of segments on a DCNL cell. DCNL :returns: (int) Number of segments on all cells if cell is not specified, or DCNL on a specific specified cell'
def numSynapses(self, segment=None): DCNL 'Returns the number of Synapses. DCNL :param segment: (:class:`Segment`) Optional parameter to get the number of DCNL synapses on a segment. DCNL :returns: (int) Number of synapses on all segments if segment is not DCNL specified, or on a specified segment.'
def segmentPositionSortKey(self, segment): DCNL 'Return a numeric key for sorting this segment. This can be used with the DCNL python built-in ``sorted()`` function. DCNL :param segment: (:class:`Segment`) within this :class:`Connections` DCNL instance. DCNL :returns: (float) A numeric key for sorting.'
def write(self, proto): DCNL 'Writes serialized data to proto object. DCNL :param proto: (DynamicStructBuilder) Proto object'
@classmethod DCNL def read(cls, proto): DCNL 'Reads deserialized data from proto object DCNL :param proto: (DynamicStructBuilder) Proto object DCNL :returns: (:class:`Connections`) instance'
def __eq__(self, other): DCNL 'Equality operator for Connections instances. DCNL Checks if two instances are functionally identical DCNL :param other: (:class:`Connections`) Connections instance to compare to'
def __ne__(self, other): DCNL 'Non-equality operator for Connections instances. DCNL Checks if two instances are not functionally identical DCNL :param other: (:class:`Connections`) Connections instance to compare to'
def _getEphemeralMembers(self): DCNL 'List of our member variables that we don\'t need to be saved.'
def _initEphemerals(self): DCNL 'Initialize all ephemeral members after being restored to a pickled state.'
def __getstate__(self): DCNL '@internal DCNL Return serializable state.  This function will return a version of the DCNL __dict__ with all "ephemeral" members stripped out.  "Ephemeral" members DCNL are defined as those that do not need to be (nor should be) stored DCNL in any kind of persistent file (e.g., NuPIC network XML file.)'
def __setstate__(self, state): DCNL '@internal DCNL Set the state of ourself from a serialized state.'
def write(self, proto): DCNL 'Populate serialization proto instance. DCNL :param proto: (BacktrackingTMProto) the proto instance to populate'
@classmethod DCNL def read(cls, proto): DCNL 'Deserialize from proto instance. DCNL :param proto: (BacktrackingTMProto) the proto instance to read from'
def __getattr__(self, name): DCNL '@internal DCNL Patch __getattr__ so that we can catch the first access to \'cells\' and load. DCNL This function is only called when we try to access an attribute that doesn\'t DCNL exist.  We purposely make sure that "self.cells" doesn\'t exist after DCNL unpickling so that we\'ll hit this, then we can load it on the first access. DCNL If this is called at any other time, it will raise an AttributeError. DCNL That\'s because: DCNL - If \'name\' is "cells", after the first call, self._realCells won\'t exist DCNL so we\'ll get an implicit AttributeError. DCNL - If \'name\' isn\'t "cells", I\'d expect our super wouldn\'t have __getattr__, DCNL so we\'ll raise our own Attribute error.  If the super did get __getattr__, DCNL we\'ll just return what it gives us.'
def saveToFile(self, filePath): DCNL 'Implemented in DCNL :meth:`nupic.algorithms.backtracking_tm_cpp.BacktrackingTMCPP.saveToFile`.'
def loadFromFile(self, filePath): DCNL 'Implemented in DCNL :meth:`nupic.algorithms.backtracking_tm_cpp.BacktrackingTMCPP.loadFromFile`.'
def _getRandomState(self): DCNL '@internal DCNL Return the random number state. DCNL This is used during unit testing to generate repeatable results.'
def _setRandomState(self, state): DCNL '@internal Set the random number state. DCNL This is used during unit testing to generate repeatable results.'
def reset(self): DCNL 'Reset the state of all cells. DCNL This is normally used between sequences while training. All internal states DCNL are reset to 0.'
def resetStats(self): DCNL 'Reset the learning and inference stats. This will usually be called by DCNL user code at the start of each inference run (for a particular data set).'
def getStats(self): DCNL 'Return the current learning and inference stats. This returns a dict DCNL containing all the learning and inference stats we have collected since the DCNL last :meth:`resetStats` call. If :class:`BacktrackingTM` ``collectStats`` DCNL parameter is False, then None is returned. DCNL :returns: (dict) The following keys are returned in the dict when DCNL ``collectStats`` is True: DCNL - ``nPredictions``: the number of predictions. This is the total DCNL number of inferences excluding burn-in and the last inference. DCNL - ``curPredictionScore``: the score for predicting the current input DCNL (predicted during the previous inference) DCNL - ``curMissing``: the number of bits in the current input that were DCNL not predicted to be on. DCNL - ``curExtra``: the number of bits in the predicted output that are DCNL not in the next input DCNL - ``predictionScoreTotal``: the sum of every prediction score to date DCNL - ``predictionScoreAvg``: ``predictionScoreTotal / nPredictions`` DCNL - ``pctMissingTotal``: the total number of bits that were missed over DCNL all predictions DCNL - ``pctMissingAvg``: ``pctMissingTotal / nPredictions`` DCNL - ``prevSequenceSignature``: signature for the sequence immediately DCNL preceding the last reset. \'None\' if ``collectSequenceStats`` is DCNL False.'
def _updateStatsInferEnd(self, stats, bottomUpNZ, predictedState, colConfidence): DCNL 'Called at the end of learning and inference, this routine will update DCNL a number of stats in our _internalStats dictionary, including our computed DCNL prediction score. DCNL :param stats            internal stats dictionary DCNL :param bottomUpNZ       list of the active bottom-up inputs DCNL :param predictedState   The columns we predicted on the last time step (should DCNL match the current bottomUpNZ in the best case) DCNL :param colConfidence    Column confidences we determined on the last time step'
def printState(self, aState): DCNL 'Print an integer array that is the same shape as activeState. DCNL :param aState: TODO: document'
def printConfidence(self, aState, maxCols=20): DCNL 'Print a floating point array that is the same shape as activeState. DCNL :param aState: TODO: document DCNL :param maxCols: TODO: document'
def printColConfidence(self, aState, maxCols=20): DCNL 'Print up to maxCols number from a flat floating point array. DCNL :param aState: TODO: document DCNL :param maxCols: TODO: document'
def printStates(self, printPrevious=True, printLearnState=True): DCNL 'TODO: document DCNL :param printPrevious: DCNL :param printLearnState: DCNL :return:'
def printOutput(self, y): DCNL 'TODO: document DCNL :param y: DCNL :return:'
def printInput(self, x): DCNL 'TODO: document DCNL :param x: DCNL :return:'
def printParameters(self): DCNL 'Print the parameter settings for the TM.'
def printActiveIndices(self, state, andValues=False): DCNL 'Print the list of ``[column, cellIdx]`` indices for each of the active cells DCNL in state. DCNL :param state: TODO: document DCNL :param andValues: TODO: document'
def printComputeEnd(self, output, learn=False): DCNL 'Called at the end of inference to print out various diagnostic DCNL information based on the current verbosity level. DCNL :param output: TODO: document DCNL :param learn: TODO: document'
def printSegmentUpdates(self): DCNL 'TODO: document DCNL :return:'
def printCell(self, c, i, onlyActiveSegments=False): DCNL 'TODO: document DCNL :param c: DCNL :param i: DCNL :param onlyActiveSegments: DCNL :return:'
def printCells(self, predictedOnly=False): DCNL 'TODO: document DCNL :param predictedOnly: DCNL :return:'
def getNumSegmentsInCell(self, c, i): DCNL ':param c: (int) column index DCNL :param i: (int) cell index within column DCNL :returns: (int) the total number of synapses in cell (c, i)'
def getNumSynapses(self): DCNL ':returns: (int) the total number of synapses'
def getNumSynapsesPerSegmentAvg(self): DCNL ':returns: (int) the average number of synapses per segment'
def getNumSegments(self): DCNL ':returns: (int) the total number of segments'
def getNumCells(self): DCNL ':returns: (int) the total number of cells'
def getSegmentOnCell(self, c, i, segIdx): DCNL ':param c: (int) column index DCNL :param i: (int) cell index in column DCNL :param segIdx: (int) segment index to match DCNL :returns: (list) representing the the segment on cell (c, i) with index DCNL ``segIdx``. DCNL [  [segmentID, sequenceSegmentFlag, positiveActivations, DCNL totalActivations, lastActiveIteration, DCNL lastPosDutyCycle, lastPosDutyCycleIteration], DCNL [col1, idx1, perm1], DCNL [col2, idx2, perm2], ...'
def _addToSegmentUpdates(self, c, i, segUpdate): DCNL 'Store a dated potential segment update. The "date" (iteration index) is used DCNL later to determine whether the update is too old and should be forgotten. DCNL This is controlled by parameter ``segUpdateValidDuration``. DCNL :param c: TODO: document DCNL :param i: TODO: document DCNL :param segUpdate: TODO: document'
def _removeSegmentUpdate(self, updateInfo): DCNL 'Remove a segment update (called when seg update expires or is processed) DCNL :param updateInfo: (tuple) (creationDate, SegmentUpdate)'
def _computeOutput(self): DCNL 'Computes output for both learning and inference. In both cases, the DCNL output is the boolean OR of ``activeState`` and ``predictedState`` at ``t``. DCNL Stores ``currentOutput`` for ``checkPrediction``. DCNL :returns: TODO: document'
def _getActiveState(self): DCNL 'Return the current active state. This is called by the node to DCNL obtain the sequence output of the TM. DCNL :returns: TODO: document'
def getPredictedState(self): DCNL ':returns: numpy array of predicted cells, representing the current predicted DCNL state. ``predictedCells[c][i]`` represents the state of the i\'th cell in DCNL the c\'th column.'
def predict(self, nSteps): DCNL 'This function gives the future predictions for <nSteps> timesteps starting DCNL from the current TM state. The TM is returned to its original state at the DCNL end before returning. DCNL 1. We save the TM state. DCNL 2. Loop for nSteps DCNL a. Turn-on with lateral support from the current active cells DCNL b. Set the predicted cells as the next step\'s active cells. This step DCNL in learn and infer methods use input here to correct the predictions. DCNL We don\'t use any input here. DCNL 3. Revert back the TM state to the time before prediction DCNL :param nSteps: (int) The number of future time steps to be predicted DCNL :returns: all the future predictions - a numpy array of type "float32" and DCNL shape (nSteps, numberOfCols). The ith row gives the tm prediction for DCNL each column at a future timestep (t+i+1).'
def _getTPDynamicStateVariableNames(self): DCNL 'Any newly added dynamic states in the TM should be added to this list. DCNL Parameters: DCNL retval:       The list of names of TM dynamic state variables.'
def _getTPDynamicState(self): DCNL 'Parameters: DCNL retval:       A dict with all the dynamic state variable names as keys and DCNL their values at this instant as values.'
def _setTPDynamicState(self, tpDynamicState): DCNL 'Set all the dynamic state variables from the <tpDynamicState> dict. DCNL <tpDynamicState> dict has all the dynamic state variable names as keys and DCNL their values at this instant as values. DCNL We set the dynamic state variables in the tm object with these items.'
def _updateAvgLearnedSeqLength(self, prevSeqLength): DCNL 'Update our moving average of learned sequence length.'
def getAvgLearnedSeqLength(self): DCNL ':returns: Moving average of learned sequence length'
def _inferBacktrack(self, activeColumns): DCNL 'This "backtracks" our inference state, trying to see if we can lock onto DCNL the current set of inputs by assuming the sequence started up to N steps DCNL ago on start cells. DCNL This will adjust @ref infActiveState[\'t\'] if it does manage to lock on to a DCNL sequence that started earlier. It will also compute infPredictedState[\'t\'] DCNL based on the possibly updated @ref infActiveState[\'t\'], so there is no need to DCNL call inferPhase2() after calling inferBacktrack(). DCNL This looks at: DCNL - ``infActiveState[\'t\']`` DCNL This updates/modifies: DCNL - ``infActiveState[\'t\']`` DCNL - ``infPredictedState[\'t\']`` DCNL - ``colConfidence[\'t\']`` DCNL - ``cellConfidence[\'t\']`` DCNL How it works: DCNL This method gets called from :meth:`updateInferenceState` when we detect DCNL either of the following two conditions: DCNL #. The current bottom-up input had too many un-expected columns DCNL #. We fail to generate a sufficient number of predicted columns for the DCNL next time step. DCNL Either of these two conditions indicate that we have fallen out of a DCNL learned sequence. DCNL Rather than simply "giving up" and bursting on the unexpected input DCNL columns, a better approach is to see if perhaps we are in a sequence that DCNL started a few steps ago. The real world analogy is that you are driving DCNL along and suddenly hit a dead-end, you will typically go back a few turns DCNL ago and pick up again from a familiar intersection. DCNL This back-tracking goes hand in hand with our learning methodology, which DCNL always tries to learn again from start cells after it loses context. This DCNL results in a network that has learned multiple, overlapping paths through DCNL the input data, each starting at different points. The lower the global DCNL decay and the more repeatability in the data, the longer each of these DCNL paths will end up being. DCNL The goal of this function is to find out which starting point in the past DCNL leads to the current input with the most context as possible. This gives us DCNL the best chance of predicting accurately going forward. Consider the DCNL following example, where you have learned the following sub-sequences which DCNL have the given frequencies: DCNL ? - Q - C - D - E      10X      seq 0 DCNL ? - B - C - D - F      1X       seq 1 DCNL ? - B - C - H - I      2X       seq 2 DCNL ? - B - C - D - F      3X       seq 3 DCNL ? - Z - A - B - C - D - J      2X       seq 4 DCNL ? - Z - A - B - C - H - I      1X       seq 5 DCNL ? - Y - A - B - C - D - F      3X       seq 6 DCNL W - X - Z - A - B - C - D          <= input history DCNL current time step DCNL Suppose, in the current time step, the input pattern is D and you have not DCNL predicted D, so you need to backtrack. Suppose we can backtrack up to 6 DCNL steps in the past, which path should we choose? From the table above, we can DCNL see that the correct answer is to assume we are in seq 4. How do we DCNL implement the backtrack to give us this right answer? The current DCNL implementation takes the following approach: DCNL #. Start from the farthest point in the past. DCNL #. For each starting point S, calculate the confidence of the current DCNL input, conf(startingPoint=S), assuming we followed that sequence. DCNL Note that we must have learned at least one sequence that starts at DCNL point S. DCNL #. If conf(startingPoint=S) is significantly different from DCNL conf(startingPoint=S-1), then choose S-1 as the starting point. DCNL The assumption here is that starting point S-1 is the starting point of DCNL a learned sub-sequence that includes the current input in it\'s path and DCNL that started the longest ago. It thus has the most context and will be DCNL the best predictor going forward. DCNL From the statistics in the above table, we can compute what the confidences DCNL will be for each possible starting point: DCNL startingPoint           confidence of D DCNL B (t-2)               4/6  = 0.667   (seq 1,3)/(seq 1,2,3) DCNL Z (t-4)               2/3  = 0.667   (seq 4)/(seq 4,5) DCNL First of all, we do not compute any confidences at starting points t-1, t-3, DCNL t-5, t-6 because there are no learned sequences that start at those points. DCNL Notice here that Z is the starting point of the longest sub-sequence leading DCNL up to the current input. Event though starting at t-2 and starting at t-4 DCNL give the same confidence value, we choose the sequence starting at t-4 DCNL because it gives the most context, and it mirrors the way that learning DCNL extends sequences. DCNL :param activeColumns: (list) of active column indices'
def _inferPhase1(self, activeColumns, useStartCells): DCNL 'Update the inference active state from the last set of predictions DCNL and the current bottom-up. DCNL This looks at: DCNL - ``infPredictedState[\'t-1\']`` DCNL This modifies: DCNL - ``infActiveState[\'t\']`` DCNL :param activeColumns: (list) active bottom-ups DCNL :param useStartCells: (bool) If true, ignore previous predictions and simply DCNL turn on the start cells in the active columns DCNL :returns: (bool) True if the current input was sufficiently predicted, OR if DCNL we started over on startCells. False indicates that the current input DCNL was NOT predicted, and we are now bursting on most columns.'
def _inferPhase2(self): DCNL 'Phase 2 for the inference state. The computes the predicted state, then DCNL checks to insure that the predicted state is not over-saturated, i.e. DCNL look too close like a burst. This indicates that there were so many DCNL separate paths learned from the current input columns to the predicted DCNL input columns that bursting on the current input columns is most likely DCNL generated mix and match errors on cells in the predicted columns. If DCNL we detect this situation, we instead turn on only the start cells in the DCNL current active columns and re-generate the predicted state from those. DCNL This looks at: DCNL - `` infActiveState[\'t\']`` DCNL This modifies: DCNL - `` infPredictedState[\'t\']`` DCNL - `` colConfidence[\'t\']`` DCNL - `` cellConfidence[\'t\']`` DCNL :returns: (bool) True if we have a decent guess as to the next input. DCNL Returning False from here indicates to the caller that we have DCNL reached the end of a learned sequence.'
def _updateInferenceState(self, activeColumns): DCNL 'Update the inference state. Called from :meth:`compute` on every iteration. DCNL :param activeColumns: (list) active column indices.'
def _learnBacktrackFrom(self, startOffset, readOnly=True): DCNL 'A utility method called from learnBacktrack. This will backtrack DCNL starting from the given startOffset in our prevLrnPatterns queue. DCNL It returns True if the backtrack was successful and we managed to get DCNL predictions all the way up to the current time step. DCNL If readOnly, then no segments are updated or modified, otherwise, all DCNL segment updates that belong to the given path are applied. DCNL This updates/modifies: DCNL - lrnActiveState[\'t\'] DCNL This trashes: DCNL - lrnPredictedState[\'t\'] DCNL - lrnPredictedState[\'t-1\'] DCNL - lrnActiveState[\'t-1\'] DCNL :param startOffset: Start offset within the prevLrnPatterns input history DCNL :param readOnly: DCNL :return: True if we managed to lock on to a sequence that started DCNL earlier. DCNL If False, we lost predictions somewhere along the way DCNL leading up to the current time.'
def _learnBacktrack(self): DCNL 'This "backtracks" our learning state, trying to see if we can lock onto DCNL the current set of inputs by assuming the sequence started up to N steps DCNL ago on start cells. DCNL This will adjust @ref lrnActiveState[\'t\'] if it does manage to lock on to a DCNL sequence that started earlier. DCNL :returns:          >0 if we managed to lock on to a sequence that started DCNL earlier. The value returned is how many steps in the DCNL past we locked on. DCNL If 0 is returned, the caller needs to change active DCNL state to start on start cells. DCNL How it works: DCNL This method gets called from updateLearningState when we detect either of DCNL the following two conditions: DCNL #. Our PAM counter (@ref pamCounter) expired DCNL #. We reached the max allowed learned sequence length DCNL Either of these two conditions indicate that we want to start over on start DCNL cells. DCNL Rather than start over on start cells on the current input, we can DCNL accelerate learning by backtracking a few steps ago and seeing if perhaps DCNL a sequence we already at least partially know already started. DCNL This updates/modifies: DCNL - @ref lrnActiveState[\'t\'] DCNL This trashes: DCNL - @ref lrnActiveState[\'t-1\'] DCNL - @ref lrnPredictedState[\'t\'] DCNL - @ref lrnPredictedState[\'t-1\']'
def _learnPhase1(self, activeColumns, readOnly=False): DCNL 'Compute the learning active state given the predicted state and DCNL the bottom-up input. DCNL :param activeColumns list of active bottom-ups DCNL :param readOnly      True if being called from backtracking logic. DCNL This tells us not to increment any segment DCNL duty cycles or queue up any updates. DCNL :returns: True if the current input was sufficiently predicted, OR DCNL if we started over on startCells. False indicates that the current DCNL input was NOT predicted, well enough to consider it as "inSequence" DCNL This looks at: DCNL - @ref lrnActiveState[\'t-1\'] DCNL - @ref lrnPredictedState[\'t-1\'] DCNL This modifies: DCNL - @ref lrnActiveState[\'t\'] DCNL - @ref lrnActiveState[\'t-1\']'
def _learnPhase2(self, readOnly=False): DCNL 'Compute the predicted segments given the current set of active cells. DCNL :param readOnly       True if being called from backtracking logic. DCNL This tells us not to increment any segment DCNL duty cycles or queue up any updates. DCNL This computes the lrnPredictedState[\'t\'] and queues up any segments that DCNL became active (and the list of active synapses for each segment) into DCNL the segmentUpdates queue DCNL This looks at: DCNL - @ref lrnActiveState[\'t\'] DCNL This modifies: DCNL - @ref lrnPredictedState[\'t\'] DCNL - @ref segmentUpdates'
def _updateLearningState(self, activeColumns): DCNL 'Update the learning state. Called from compute() on every iteration DCNL :param activeColumns List of active column indices'
def compute(self, bottomUpInput, enableLearn, enableInference=None): DCNL 'Handle one compute, possibly learning. DCNL .. note::  It is an error to have both ``enableLearn`` and DCNL ``enableInference`` set to False DCNL .. note:: By default, we don\'t compute the inference output when learning DCNL because it slows things down, but you can override this by passing DCNL in True for ``enableInference``. DCNL :param bottomUpInput: The bottom-up input as numpy list, typically from a DCNL spatial pooler. DCNL :param enableLearn: (bool) If true, perform learning DCNL :param enableInference: (bool) If None, default behavior is to disable the DCNL inference output when ``enableLearn`` is on. If true, compute the DCNL inference output. If false, do not compute the inference output. DCNL :returns: TODO: document'
def infer(self, bottomUpInput): DCNL 'TODO: document DCNL :param bottomUpInput: DCNL :return:'
def learn(self, bottomUpInput, enableInference=None): DCNL 'TODO: document DCNL :param bottomUpInput: DCNL :param enableInference: DCNL :return:'
def _columnConfidences(self): DCNL 'Returns the stored cell confidences from the last compute. DCNL :returns: Column confidence scores'
def topDownCompute(self): DCNL 'For now, we will assume there is no one above us and that bottomUpOut is DCNL simply the output that corresponds to our currently stored column DCNL confidences. DCNL :returns: the same thing as :meth:`columnConfidences`'
def _trimSegmentsInCell(self, colIdx, cellIdx, segList, minPermanence, minNumSyns): DCNL 'This method goes through a list of segments for a given cell and DCNL deletes all synapses whose permanence is less than minPermanence and deletes DCNL any segments that have less than minNumSyns synapses remaining. DCNL :param colIdx        Column index DCNL :param cellIdx       Cell index within the column DCNL :param segList       List of segment references DCNL :param minPermanence Any syn whose permamence is 0 or < minPermanence will DCNL be deleted. DCNL :param minNumSyns    Any segment with less than minNumSyns synapses remaining DCNL in it will be deleted. DCNL :returns: tuple (numSegsRemoved, numSynsRemoved)'
def trimSegments(self, minPermanence=None, minNumSyns=None): DCNL 'This method deletes all synapses whose permanence is less than DCNL minPermanence and deletes any segments that have less than DCNL minNumSyns synapses remaining. DCNL :param minPermanence: (float) Any syn whose permanence is 0 or < DCNL ``minPermanence``  will be deleted. If None is passed in, then DCNL ``self.connectedPerm`` is used. DCNL :param minNumSyns: (int) Any segment with less than ``minNumSyns`` synapses DCNL remaining in it will be deleted. If None is passed in, then DCNL ``self.activationThreshold`` is used. DCNL :returns: (tuple) ``numSegsRemoved``, ``numSynsRemoved``'
def _cleanUpdatesList(self, col, cellIdx, seg): DCNL 'Removes any update that would be for the given col, cellIdx, segIdx. DCNL NOTE: logically, we need to do this when we delete segments, so that if DCNL an update refers to a segment that was just deleted, we also remove DCNL that update from the update list. However, I haven\'t seen it trigger DCNL in any of the unit tests yet, so it might mean that it\'s not needed DCNL and that situation doesn\'t occur, by construction.'
def finishLearning(self): DCNL 'Called when learning has been completed. This method just calls DCNL :meth:`trimSegments` and then clears out caches.'
def _checkPrediction(self, patternNZs, output=None, colConfidence=None, details=False): DCNL 'This function produces goodness-of-match scores for a set of input patterns, DCNL by checking for their presence in the current and predicted output of the DCNL TM. Returns a global count of the number of extra and missing bits, the DCNL confidence scores for each input pattern, and (if requested) the DCNL bits in each input pattern that were not present in the TM\'s prediction. DCNL :param patternNZs a list of input patterns that we want to check for. Each DCNL element is a list of the non-zeros in that pattern. DCNL :param output     The output of the TM. If not specified, then use the DCNL TM\'s current output. This can be specified if you are DCNL trying to check the prediction metric for an output from DCNL the past. DCNL :param colConfidence The column confidences. If not specified, then use the DCNL TM\'s current self.colConfidence. This can be specified if you DCNL are trying to check the prediction metrics for an output DCNL from the past. DCNL :param details    if True, also include details of missing bits per pattern. DCNL :returns:  list containing: DCNL totalExtras, DCNL totalMissing, DCNL [conf_1, conf_2, ...], DCNL [missing1, missing2, ...] DCNL @retval totalExtras a global count of the number of \'extras\', i.e. bits that DCNL are on in the current output but not in the or of all the DCNL passed in patterns DCNL @retval totalMissing a global count of all the missing bits, i.e. the bits DCNL that are on in the or of the patterns, but not in the DCNL current output DCNL @retval conf_i the confidence score for the i\'th pattern inpatternsToCheck DCNL This consists of 3 items as a tuple: DCNL (predictionScore, posPredictionScore, negPredictionScore) DCNL @retval missing_i the bits in the i\'th pattern that were missing DCNL in the output. This list is only returned if details is DCNL True.'
def _isSegmentActive(self, seg, activeState): DCNL 'A segment is active if it has >= activationThreshold connected DCNL synapses that are active due to activeState. DCNL Notes: studied various cutoffs, none of which seem to be worthwhile DCNL list comprehension didn\'t help either DCNL :param seg TODO: document DCNL :param activeState TODO: document'
def _getSegmentActivityLevel(self, seg, activeState, connectedSynapsesOnly=False): DCNL 'This routine computes the activity level of a segment given activeState. DCNL It can tally up only connected synapses (permanence >= connectedPerm), or DCNL all the synapses of the segment, at either t or t-1. DCNL :param seg TODO: document DCNL :param activeState TODO: document DCNL :param connectedSynapsesOnly TODO: document'
def _getBestMatchingCell(self, c, activeState, minThreshold): DCNL 'Find weakly activated cell in column with at least minThreshold active DCNL synapses. DCNL :param c            which column to look at DCNL :param activeState  the active cells DCNL :param minThreshold minimum number of synapses required DCNL :returns: tuple (cellIdx, segment, numActiveSynapses)'
def _getBestMatchingSegment(self, c, i, activeState): DCNL 'For the given cell, find the segment with the largest number of active DCNL synapses. This routine is aggressive in finding the best match. The DCNL permanence value of synapses is allowed to be below connectedPerm. The number DCNL of active synapses is allowed to be below activationThreshold, but must be DCNL above minThreshold. The routine returns the segment index. If no segments are DCNL found, then an index of -1 is returned. DCNL :param c TODO: document DCNL :param i TODO: document DCNL :param activeState TODO: document'
def _getCellForNewSegment(self, colIdx): DCNL 'Return the index of a cell in this column which is a good candidate DCNL for adding a new segment. DCNL When we have fixed size resources in effect, we insure that we pick a DCNL cell which does not already have the max number of allowed segments. If DCNL none exists, we choose the least used segment in the column to re-allocate. DCNL :param colIdx which column to look at DCNL :returns: cell index'
def _getSegmentActiveSynapses(self, c, i, s, activeState, newSynapses=False): DCNL 'Return a segmentUpdate data structure containing a list of proposed DCNL changes to segment s. Let activeSynapses be the list of active synapses DCNL where the originating cells have their activeState output = 1 at time step DCNL t. (This list is empty if s is None since the segment doesn\'t exist.) DCNL newSynapses is an optional argument that defaults to false. If newSynapses DCNL is true, then newSynapseCount - len(activeSynapses) synapses are added to DCNL activeSynapses. These synapses are randomly chosen from the set of cells DCNL that have learnState = 1 at timeStep. DCNL :param c TODO: document DCNL :param i TODO: document DCNL :param s TODO: document DCNL :param activeState TODO: document DCNL :param newSynapses TODO: document'
def _chooseCellsToLearnFrom(self, c, i, s, n, activeState): DCNL 'Choose n random cells to learn from. DCNL This function is called several times while learning with timeStep = t-1, so DCNL we cache the set of candidates for that case. It\'s also called once with DCNL timeStep = t, and we cache that set of candidates. DCNL :returns: tuple (column index, cell index).'
def _processSegmentUpdates(self, activeColumns): DCNL 'Go through the list of accumulated segment updates and process them DCNL as follows: DCNL if the segment update is too old, remove the update DCNL else if the cell received bottom-up, update its permanences DCNL else if it\'s still being predicted, leave it in the queue DCNL else remove it. DCNL :param activeColumns TODO: document'
def _adaptSegment(self, segUpdate): DCNL 'This function applies segment update information to a segment in a DCNL cell. DCNL Synapses on the active list get their permanence counts incremented by DCNL permanenceInc. All other synapses get their permanence counts decremented DCNL by permanenceDec. DCNL We also increment the positiveActivations count of the segment. DCNL :param segUpdate SegmentUpdate instance DCNL :returns: True if some synapses were decremented to 0 and the segment is a DCNL candidate for trimming'
def getSegmentInfo(self, collectActiveData=False): DCNL 'Returns information about the distribution of segments, synapses and DCNL permanence values in the current TM. If requested, also returns information DCNL regarding the number of currently active segments and synapses. DCNL :returns: tuple described below: DCNL nSegments, DCNL nSynapses, DCNL nActiveSegs, DCNL nActiveSynapses, DCNL distSegSizes, DCNL distNSegsPerCell, DCNL distPermValues, DCNL distAges DCNL - ``nSegments``: (int) total number of segments DCNL - ``nSynapses``: (int) total number of synapses DCNL - ``nActiveSegs``: (int) total number of active segments (0 if DCNL ``collectActiveData`` is False) DCNL - ``nActiveSynapses``: (int) total number of active synapses 0 if DCNL ``collectActiveData`` is False DCNL - ``distSegSizes``: (dict) where d[n] = number of segments with n synapses DCNL - ``distNSegsPerCell``: (dict) where d[n] = number of cells with n segments DCNL - ``distPermValues``: (dict) where d[p] = number of synapses with perm = p/10 DCNL - ``distAges``: (list) of tuples (``ageRange``, ``numSegments``)'
def dutyCycle(self, active=False, readOnly=False): DCNL 'Compute/update and return the positive activations duty cycle of DCNL this segment. This is a measure of how often this segment is DCNL providing good predictions. DCNL :param active   True if segment just provided a good prediction DCNL :param readOnly If True, compute the updated duty cycle, but don\'t change DCNL the cached value. This is used by debugging print statements. DCNL :returns: The duty cycle, a measure of how often this segment is DCNL providing good predictions. DCNL **NOTE:** This method relies on different schemes to compute the duty cycle DCNL based on how much history we have. In order to support this tiered DCNL approach **IT MUST BE CALLED ON EVERY SEGMENT AT EACH DUTY CYCLE TIER** DCNL (@ref dutyCycleTiers). DCNL When we don\'t have a lot of history yet (first tier), we simply return DCNL number of positive activations / total number of iterations DCNL After a certain number of iterations have accumulated, it converts into DCNL a moving average calculation, which is updated only when requested DCNL since it can be a bit expensive to compute on every iteration (it uses DCNL the pow() function). DCNL The duty cycle is computed as follows: DCNL dc[t] = (1-alpha) * dc[t-1] + alpha * value[t] DCNL If the value[t] has been 0 for a number of steps in a row, you can apply DCNL all of the updates at once using: DCNL dc[t] = (1-alpha)^(t-lastT) * dc[lastT] DCNL We use the alphas and tiers as defined in @ref dutyCycleAlphas and DCNL @ref dutyCycleTiers.'
def debugPrint(self): DCNL 'Print segment information for verbose messaging and debugging. DCNL This uses the following format: DCNL ID:54413 True 0.64801 (24/36) 101 [9,1]0.75 [10,1]0.75 [11,1]0.75 DCNL where: DCNL 54413 - is the unique segment id DCNL True - is sequence segment DCNL 0.64801 - moving average duty cycle DCNL (24/36) - (numPositiveActivations / numTotalActivations) DCNL 101 - age, number of iterations since last activated DCNL [9,1]0.75 - synapse from column 9, cell #1, strength 0.75 DCNL [10,1]0.75 - synapse from column 10, cell #1, strength 0.75 DCNL [11,1]0.75 - synapse from column 11, cell #1, strength 0.75'
def freeNSynapses(self, numToFree, inactiveSynapseIndices, verbosity=0): DCNL 'Free up some synapses in this segment. We always free up inactive DCNL synapses (lowest permanence freed up first) before we start to free up DCNL active ones. DCNL :param numToFree              number of synapses to free up DCNL :param inactiveSynapseIndices list of the inactive synapse indices.'
def addSynapse(self, srcCellCol, srcCellIdx, perm): DCNL 'Add a new synapse DCNL :param srcCellCol source cell column DCNL :param srcCellIdx source cell index within the column DCNL :param perm       initial permanence'
def updateSynapses(self, synapses, delta): DCNL 'Update a set of synapses in the segment. DCNL :param tm       The owner TM DCNL :param synapses List of synapse indices to update DCNL :param delta    How much to add to each permanence DCNL :returns:   True if synapse reached 0'
def __constructEphemeralInstanceVars(self): DCNL 'Initialize ephemeral instance variables (those that aren\'t serialized)'
def initialize(self): DCNL 'Called by network after all links have been set up'
def compute(self, inputs, outputs): DCNL 'Run one iteration of the region\'s compute. DCNL The guts of the compute are contained in the _compute() call so that DCNL we can profile it if requested.'
@classmethod DCNL def getSpec(cls): DCNL 'Return the base Spec for TestRegion.'
def getParameter(self, parameterName, index=(-1)): DCNL 'Get the value of a NodeSpec parameter. Most parameters are handled DCNL automatically by PyRegion\'s parameter get mechanism. The ones that need DCNL special treatment are explicitly handled here.'
def setParameter(self, parameterName, index, parameterValue): DCNL 'Set the value of a Spec parameter. Most parameters are handled DCNL automatically by PyRegion\'s parameter set mechanism. The ones that need DCNL special treatment are explicitly handled here.'
def setIdentityPolicyInstance(self, identityPolicyObj): DCNL 'TestRegion command that sets identity policy instance.  The instance DCNL MUST be derived from TestRegion\'s RegionIdentityPolicyBase class. DCNL Users MUST set the identity instance BEFORE running the network DCNL Exception: AssertionError if identity policy instance has already been set DCNL or if the passed-in instance is not derived from DCNL RegionIdentityPolicyBase.'
def getIdentityPolicyInstance(self): DCNL 'TestRegion command that returns the identity policy instance that was DCNL associated with this TestRegion instance via setIdentityPolicyInstance(). DCNL Returns: a RegionIdentityPolicyBase-based instance that was associated with DCNL this TestRegion intstance. DCNL Exception: AssertionError if no identity policy instance has been set.'
def write(self, proto): DCNL 'Save the region\'s state. DCNL The ephemerals and identity policy are excluded from the saved state. DCNL :param proto: an instance of TestRegionProto to serialize'
def read(self, proto): DCNL 'Load the state from the given proto instance. DCNL The saved state does not include the identity policy so this must be DCNL constructed and set after the region is deserialized. This can be done by DCNL calling \'setIdentityPolicyInstance\'. DCNL :param proto: an instance of TestRegionProto to load state from'
def __getstate__(self): DCNL 'Return serializable state.  This function will return a version of the DCNL __dict__ with all "ephemeral" members stripped out.  "Ephemeral" members DCNL are defined as those that do not need to be (nor should be) stored DCNL in any kind of persistent file (e.g., NuPIC network XML file.)'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state.'
def _initializeEphemeralMembers(self): DCNL 'Initialize all ephemeral data members, and give the derived class the DCNL opportunity to do the same by invoking the virtual member _initEphemerals(), DCNL which is intended to be overridden. DCNL NOTE: this is used by both __init__ and __setstate__ code paths.'
def initialize(self): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.initialize`.'
def _allocateSpatialFDR(self, rfInput): DCNL 'Allocate the spatial pooler instance.'
def compute(self, inputs, outputs): DCNL 'Run one iteration, profiling it if requested. DCNL :param inputs: (dict) mapping region input names to numpy.array values DCNL :param outputs: (dict) mapping region output names to numpy.arrays that DCNL should be populated with output values by this method'
def _compute(self, inputs, outputs): DCNL 'Run one iteration of SPRegion\'s compute'
def _doBottomUpCompute(self, rfInput, resetSignal): DCNL 'Do one iteration of inference and/or learning and return the result DCNL Parameters: DCNL rfInput:      Input vector. Shape is: (1, inputVectorLen). DCNL resetSignal:  True if reset is asserted'
def _doTopDownInfer(self, topDownInput=None): DCNL 'Do one iteration of top-down inference. DCNL Parameters: DCNL tdInput:      Top-down input DCNL retval:     (spatialTopDownOut, temporalTopDownOut) DCNL spatialTopDownOut is the top down output computed only from the SP, DCNL using it\'s current bottom-up output. DCNL temporalTopDownOut is the top down output computed from the topDown in DCNL of the level above us.'
@classmethod DCNL def getBaseSpec(cls): DCNL 'Doesn\'t include the spatial, temporal and other parameters DCNL :returns: (dict) The base Spec for SPRegion.'
@classmethod DCNL def getSpec(cls): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getSpec`. DCNL The parameters collection is constructed based on the parameters specified DCNL by the various components (spatialSpec, temporalSpec and otherSpec)'
def getAlgorithmInstance(self): DCNL ':returns: (:class:`~nupic.algorithms.spatial_pooler.SpatialPooler`) instance DCNL of the underlying algorithm object.'
def getParameter(self, parameterName, index=(-1)): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameter`. DCNL Most parameters are handled automatically by PyRegion\'s parameter get DCNL mechanism. The ones that need special treatment are explicitly handled here.'
def setParameter(self, parameterName, index, parameterValue): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.setParameter`. DCNL Set the value of a Spec parameter. Most parameters are handled DCNL automatically by PyRegion\'s parameter set mechanism. The ones that need DCNL special treatment are explicitly handled here.'
@staticmethod DCNL def getSchema(): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getSchema`.'
def writeToProto(self, proto): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.writeToProto`. DCNL Write state to proto object. DCNL :param proto: SPRegionProto capnproto object'
@classmethod DCNL def readFromProto(cls, proto): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.readFromProto`. DCNL Read state from proto object. DCNL :param proto: SPRegionProto capnproto object'
def __getstate__(self): DCNL 'Return serializable state.  This function will return a version of the DCNL __dict__ with all "ephemeral" members stripped out.  "Ephemeral" members DCNL are defined as those that do not need to be (nor should be) stored DCNL in any kind of persistent file (e.g., NuPIC network XML file.)'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state.'
def _initEphemerals(self): DCNL 'Initialize all ephemerals used by derived classes.'
def _getEphemeralMembers(self): DCNL 'Callback that returns a list of all "ephemeral" members (i.e., data members DCNL that should not and/or cannot be pickled.)'
def _getEphemeralMembersBase(self): DCNL 'Returns list of all ephemeral members.'
def _getEphemeralMembersAll(self): DCNL 'Returns a concatenated list of both the standard base class DCNL ephemeral members, as well as any additional ephemeral members DCNL (e.g., file handles, etc.).'
def getParameterArrayCount(self, name, index): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameterArrayCount`. DCNL TODO: as a temporary hack, getParameterArrayCount checks to see if there\'s a DCNL variable, private or not, with that name. If so, it returns the value of the DCNL variable.'
def getParameterArray(self, name, index, a): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameterArray`. DCNL TODO: as a temporary hack, getParameterArray checks to see if there\'s a DCNL variable, private or not, with that name. If so, it returns the value of the DCNL variable.'
def invariant(self): DCNL 'Verify the validity of the node spec object DCNL The type of each sub-object is verified and then DCNL the validity of each node spec item is verified by calling DCNL it invariant() method. It also makes sure that there is at most DCNL one default input and one default output.'
def toDict(self): DCNL 'Convert the information of the node spec to a plain dict of basic types DCNL The description and singleNodeOnly attributes are placed directly in DCNL the result dicts. The inputs, outputs, parameters and commands dicts DCNL contain Spec item objects (InputSpec, OutputSpec, etc). Each such object DCNL is converted also to a plain dict using the internal items2dict() function DCNL (see bellow).'
@classmethod DCNL def getSpec(cls): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getSpec`.'
def _getEphemeralAttributes(self): DCNL 'List of attributes to not save with serialized state.'
def _initEphemerals(self): DCNL 'Initialize attributes that are not saved with the checkpoint.'
def __setstate__(self, state): DCNL 'Set state from serialized state.'
def __getstate__(self): DCNL 'Get serializable state.'
def getAlgorithmInstance(self): DCNL ':returns: (:class:`~nupic.algorithms.knn_classifier.KNNClassifier`)'
def getParameter(self, name, index=(-1)): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getParameter`.'
def setParameter(self, name, index, value): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.setParameter`.'
def reset(self): DCNL 'Resets confusion matrix.'
def enableTap(self, tapPath): DCNL 'Begin writing output tap files. DCNL :param tapPath: (string) base name of the output tap files to write.'
def disableTap(self): DCNL 'Disable writing of output tap files.'
def handleLogInput(self, inputs): DCNL 'Write inputs to output tap file. DCNL :param inputs: (iter) some inputs.'
def handleLogOutput(self, output): DCNL 'Write outputs to output tap file. DCNL :param outputs: (iter) some outputs.'
def _storeSample(self, inputVector, trueCatIndex, partition=0): DCNL 'Store a training sample and associated category label'
def compute(self, inputs, outputs): DCNL 'Process one input sample. This method is called by the runtime engine. DCNL .. note:: the number of input categories may vary, but the array size is DCNL fixed to the max number of categories allowed (by a lower region), so DCNL "unused" indices of the input category array are filled with -1s. DCNL TODO: confusion matrix does not support multi-label classification DCNL :param inputs: (dict) mapping region input names to numpy.array values DCNL :param outputs: (dict) mapping region output names to numpy.arrays that DCNL should be populated with output values by this method'
def getCategoryList(self): DCNL 'Public API for returning the category list. This is a required API of the DCNL NearestNeighbor inspector. DCNL :returns: (list) which has one entry per stored prototype. The value of the DCNL entry is the category # of that stored prototype.'
def removeCategory(self, categoryToRemove): DCNL 'Removes a category. DCNL :param categoryToRemove: (string) label to remove'
def getLatestDistances(self): DCNL 'Public API for returning the full scores (distance to each prototype) from DCNL the last :meth:`compute` inference call. This is a required API of the DCNL NearestNeighbor inspector. DCNL :returns: (list) which has one entry per stored prototype. The value of the DCNL entry is distance of the most recenty inferred input from the DCNL stored prototype.'
def getAllDistances(self): DCNL 'Like :meth:`~nupic.regions.knn_classifier_region.KNNClassifierRegion.getLatestDistances`, DCNL but returns all the scores if more than one  set is available. DCNL :meth:`~nupic.regions.knn_classifier_region.KNNClassifierRegion.getLatestDistances` DCNL will always just return one set of scores. DCNL :returns: (list) all the prototype distances from all computes available.'
def _finishLearning(self): DCNL 'Does nothing. Kept here for API compatibility'
def _finishSphering(self): DCNL 'Compute normalization constants for each feature dimension DCNL based on the collected training samples.  Then normalize our DCNL training samples using these constants (so that each input DCNL dimension has mean and variance of zero and one, respectively.) DCNL Then feed these "sphered" training samples into the underlying DCNL SVM model.'
def getOutputElementCount(self, name): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getOutputElementCount`.'
def rewind(self): DCNL 'Reset the sensor to beginning of data.'
def getNextRecord(self): DCNL 'Get the next record to encode. Includes getting a record from the DCNL `dataSource` and applying filters. If the filters request more data from the DCNL `dataSource` continue to get data from the `dataSource` until all filters DCNL are satisfied. This method is separate from :meth:`.RecordSensor.compute` so that we can DCNL use a standalone :class:`.RecordSensor` to get filtered data.'
def applyFilters(self, data): DCNL 'Apply pre-encoding filters. These filters may modify or add data. If a DCNL filter needs another record (e.g. a delta filter) it will request another DCNL record by returning False and the current record will be skipped (but will DCNL still be given to all filters). DCNL We have to be very careful about resets. A filter may add a reset, DCNL but other filters should not see the added reset, each filter sees DCNL the original reset value, and we keep track of whether any filter DCNL adds a reset. DCNL :param data: (dict) The data that will be processed by the filter. DCNL :returns: (tuple) with the data processed by the filter and a boolean to DCNL know whether or not the filter needs mode data.'
def populateCategoriesOut(self, categories, output): DCNL 'Populate the output array with the category indices. DCNL .. note:: Non-categories are represented with ``-1``. DCNL :param categories: (list) of category strings DCNL :param output: (list) category output, will be overwritten'
def compute(self, inputs, outputs): DCNL 'Get a record from the dataSource and encode it. DCNL Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.compute`.'
def _convertNonNumericData(self, spatialOutput, temporalOutput, output): DCNL 'Converts all of the non-numeric fields from spatialOutput and temporalOutput DCNL into their scalar equivalents and records them in the output dictionary. DCNL :param spatialOutput: The results of topDownCompute() for the spatial input. DCNL :param temporalOutput: The results of topDownCompute() for the temporal DCNL input. DCNL :param output: The main dictionary of outputs passed to compute(). It is DCNL expected to have keys \'spatialTopDownOut\' and \'temporalTopDownOut\' that DCNL are mapped to numpy arrays.'
def getOutputValues(self, outputName): DCNL '.. note:: These are normal Python lists, rather than numpy arrays. This is DCNL to support lists with mixed scalars and strings, as in the case of DCNL records with categorical variables. DCNL :returns: (dict) output values.'
def getOutputElementCount(self, name): DCNL 'Computes the width of dataOut. DCNL Overrides DCNL :meth:`nupic.bindings.regions.PyRegion.PyRegion.getOutputElementCount`.'
def setParameter(self, parameterName, index, parameterValue): DCNL 'Set the value of a Spec parameter. Most parameters are handled DCNL automatically by PyRegion\'s parameter set mechanism. The ones that need DCNL special treatment are explicitly handled here.'
@staticmethod DCNL def getSchema(): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getSchema`.'
def writeToProto(self, proto): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.writeToProto`.'
@classmethod DCNL def readFromProto(cls, proto): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.readFromProto`.'
def _initialize(self): DCNL 'Initialize all ephemeral data members, and give the derived DCNL class the opportunity to do the same by invoking the DCNL virtual member _initEphemerals(), which is intended to be DCNL overridden.'
def initialize(self): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.initialize`.'
def compute(self, inputs, outputs): DCNL 'Run one iteration of :class:`~nupic.regions.tm_region.TMRegion` compute, DCNL profiling it if requested. DCNL :param inputs: (dict) mapping region input names to numpy.array values DCNL :param outputs: (dict) mapping region output names to numpy.arrays that DCNL should be populated with output values by this method'
def _compute(self, inputs, outputs): DCNL 'Run one iteration of TMRegion\'s compute'
@classmethod DCNL def getBaseSpec(cls): DCNL 'Doesn\'t include the spatial, temporal and other parameters DCNL :returns: (dict) the base Spec for TMRegion.'
@classmethod DCNL def getSpec(cls): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getSpec`. DCNL The parameters collection is constructed based on the parameters specified DCNL by the various components (spatialSpec, temporalSpec and otherSpec)'
def getAlgorithmInstance(self): DCNL ':returns: instance of the underlying DCNL :class:`~nupic.algorithms.temporal_memory.TemporalMemory` DCNL algorithm object.'
def getParameter(self, parameterName, index=(-1)): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameter`. DCNL Get the value of a parameter. Most parameters are handled automatically by DCNL :class:`~nupic.bindings.regions.PyRegion.PyRegion`\'s parameter get mechanism. The DCNL ones that need special treatment are explicitly handled here.'
def setParameter(self, parameterName, index, parameterValue): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.setParameter`.'
def resetSequenceStates(self): DCNL 'Resets the region\'s sequence states.'
def finishLearning(self): DCNL 'Perform an internal optimization step that speeds up inference if we know DCNL learning will not be performed anymore. This call may, for example, remove DCNL all potential inputs to each column.'
@staticmethod DCNL def getSchema(): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getSchema`.'
def writeToProto(self, proto): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.writeToProto`. DCNL Write state to proto object. DCNL :param proto: TMRegionProto capnproto object'
@classmethod DCNL def readFromProto(cls, proto): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.readFromProto`. DCNL Read state from proto object. DCNL :param proto: TMRegionProto capnproto object'
def __getstate__(self): DCNL 'Return serializable state.  This function will return a version of the DCNL __dict__ with all "ephemeral" members stripped out.  "Ephemeral" members DCNL are defined as those that do not need to be (nor should be) stored DCNL in any kind of persistent file (e.g., NuPIC network XML file.)'
def serializeExtraData(self, filePath): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.serializeExtraData`.'
def deSerializeExtraData(self, filePath): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.deSerializeExtraData`. DCNL This method is called during network deserialization with an external DCNL filename that can be used to bypass pickle for loading large binary states. DCNL :param filePath: (string) absolute file path'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state.'
def _initEphemerals(self): DCNL 'Initialize all ephemerals used by derived classes.'
def _getEphemeralMembers(self): DCNL 'Callback that returns a list of all "ephemeral" members (i.e., data members DCNL that should not and/or cannot be pickled.)'
def _getEphemeralMembersBase(self): DCNL 'Returns list of all ephemeral members.'
def _getEphemeralMembersAll(self): DCNL 'Returns a concatenated list of both the standard base class DCNL ephemeral members, as well as any additional ephemeral members DCNL (e.g., file handles, etc.).'
def getOutputElementCount(self, name): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getOutputElementCount`.'
def getParameterArrayCount(self, name, index): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameterArrayCount`.'
def getParameterArray(self, name, index, a): DCNL 'Overrides :meth:`~nupic.bindings.regions.PyRegion.PyRegion.getParameterArray`.'
@classmethod DCNL def getSpec(cls): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getSpec`.'
def initialize(self): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.initialize`. DCNL Is called once by NuPIC before the first call to compute(). DCNL Initializes self._sdrClassifier if it is not already initialized.'
def getAlgorithmInstance(self): DCNL ':returns: (:class:`nupic.regions.sdr_classifier_region.SDRClassifierRegion`)'
def getParameter(self, name, index=(-1)): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getParameter`.'
def setParameter(self, name, index, value): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.setParameter`.'
@staticmethod DCNL def getSchema(): DCNL ':returns: the pycapnp proto type that the class uses for serialization.'
def writeToProto(self, proto): DCNL 'Write state to proto object. DCNL :param proto: SDRClassifierRegionProto capnproto object'
@classmethod DCNL def readFromProto(cls, proto): DCNL 'Read state from proto object. DCNL :param proto: SDRClassifierRegionProto capnproto object'
def compute(self, inputs, outputs): DCNL 'Process one input sample. DCNL This method is called by the runtime engine. DCNL :param inputs: (dict) mapping region input names to numpy.array values DCNL :param outputs: (dict) mapping region output names to numpy.arrays that DCNL should be populated with output values by this method'
def customCompute(self, recordNum, patternNZ, classification): DCNL 'Just return the inference value from one input sample. The actual DCNL learning happens in compute() -- if, and only if learning is enabled -- DCNL which is called when you run the network. DCNL .. warning:: This method is deprecated and exists only to maintain backward DCNL compatibility. This method is deprecated, and will be removed. Use DCNL :meth:`nupic.engine.Network.run` instead, which will call DCNL :meth:`~nupic.regions.sdr_classifier_region.compute`. DCNL :param recordNum: (int) Record number of the input sample. DCNL :param patternNZ: (list) of the active indices from the output below DCNL :param classification: (dict) of the classification information: DCNL * ``bucketIdx``: index of the encoder bucket DCNL * ``actValue``:  actual value going into the encoder DCNL :returns: (dict) containing inference results, one entry for each step in DCNL ``self.steps``. The key is the number of steps, the value is an DCNL array containing the relative likelihood for each ``bucketIdx`` DCNL starting from 0. DCNL For example: DCNL {\'actualValues\': [0.0, 1.0, 2.0, 3.0] DCNL 1 : [0.1, 0.3, 0.2, 0.7] DCNL 4 : [0.2, 0.4, 0.3, 0.5]}'
def getOutputElementCount(self, outputName): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getOutputElementCount`.'
@classmethod DCNL def getSpec(cls): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getSpec`.'
def getParameter(self, name, index=(-1)): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getParameter`.'
def setParameter(self, name, index, value): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.setParameter`.'
def compute(self, inputs, outputs): DCNL 'Process one input sample. DCNL This method is called by the runtime engine.'
def getLabelResults(self): DCNL 'Get the labels of the previously computed record. DCNL :returns: (list) of strings representing the classification labels'
def _classifyStates(self): DCNL 'Reclassifies all internal state'
def _classifyState(self, state): DCNL 'Reclassifies given state.'
def _constructClassificationRecord(self, inputs): DCNL 'Construct a _HTMClassificationRecord based on the state of the model DCNL passed in through the inputs. DCNL Types for self.classificationVectorType: DCNL 1 - TM active cells in learn state DCNL 2 - SP columns concatenated with error from TM column predictions and SP'
def _addRecordToKNN(self, record): DCNL 'Adds the record to the KNN classifier.'
def _deleteRecordsFromKNN(self, recordsToDelete): DCNL 'Removes the given records from the classifier. DCNL parameters DCNL recordsToDelete - list of records to delete from the classififier'
def _deleteRangeFromKNN(self, start=0, end=None): DCNL 'Removes any stored records within the range from start to DCNL end. Noninclusive of end. DCNL parameters DCNL start - integer representing the ROWID of the start of the deletion range, DCNL end - integer representing the ROWID of the end of the deletion range, DCNL if None, it will default to end.'
def _recomputeRecordFromKNN(self, record): DCNL 'returns the classified labeling of record'
def _labelToCategoryNumber(self, label): DCNL 'Since the KNN Classifier stores categories as numbers, we must store each DCNL label as a number. This method converts from a label to a unique number. DCNL Each label is assigned a unique bit so multiple labels may be assigned to DCNL a single record.'
def _labelListToCategoryNumber(self, labelList): DCNL 'This method takes a list of labels and returns a unique category number. DCNL This enables this class to store a list of categories for each point since DCNL the KNN classifier only stores a single number category for each record.'
def _categoryToLabelList(self, category): DCNL 'Converts a category number into a list of labels'
def _getStateAnomalyVector(self, state): DCNL 'Returns a state\'s anomaly vertor converting it from spare to dense'
def getLabels(self, start=None, end=None): DCNL 'Get the labels on classified points within range start to end. Not inclusive DCNL of end. DCNL :returns: (dict) with format: DCNL \'isProcessing\': boolean, DCNL \'recordLabels\': list of results DCNL ``isProcessing`` - currently always false as recalculation blocks; used if DCNL reprocessing of records is still being performed; DCNL Each item in ``recordLabels`` is of format: DCNL \'ROWID\': id of the row, DCNL \'labels\': list of strings'
def addLabel(self, start, end, labelName): DCNL 'Add the label labelName to each record with record ROWID in range from DCNL ``start`` to ``end``, noninclusive of end. DCNL This will recalculate all points from end to the last record stored in the DCNL internal cache of this classifier. DCNL :param start: (int) start index DCNL :param end: (int) end index (noninclusive) DCNL :param labelName: (string) label name'
def removeLabels(self, start=None, end=None, labelFilter=None): DCNL 'Remove labels from each record with record ROWID in range from DCNL ``start`` to ``end``, noninclusive of end. Removes all records if DCNL ``labelFilter`` is None, otherwise only removes the labels equal to DCNL ``labelFilter``. DCNL This will recalculate all points from end to the last record stored in the DCNL internal cache of this classifier. DCNL :param start: (int) start index DCNL :param end: (int) end index (noninclusive) DCNL :param labelFilter: (string) label filter'
def __getstate__(self): DCNL 'Return serializable state.  This function will return a version of the DCNL __dict__ with all "ephemeral" members stripped out.  "Ephemeral" members DCNL are defined as those that do not need to be (nor should be) stored DCNL in any kind of persistent file (e.g., NuPIC network XML file.)'
def __setstate__(self, state): DCNL 'Set the state of ourself from a serialized state.'
def getOutputElementCount(self, name): DCNL 'Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.getOutputElementCount`.'
def getSensedValue(self): DCNL ':return: sensed value'
def setSensedValue(self, value): DCNL ':param value: will be encoded when this region does a compute.'
@classmethod DCNL def dbNamePrefix(cls): DCNL 'Get the beginning part of the database name for the current version DCNL of the database. This, concatenated with DCNL \'_\' + Configuration.get(\'nupic.cluster.database.nameSuffix\') will DCNL produce the actual database name used.'
@classmethod DCNL def __getDBNamePrefixForVersion(cls, dbVersion): DCNL 'Get the beginning part of the database name for the given database DCNL version. This, concatenated with DCNL \'_\' + Configuration.get(\'nupic.cluster.database.nameSuffix\') will DCNL produce the actual database name used. DCNL Parameters: DCNL dbVersion:      ClientJobs database version number DCNL retval:         the ClientJobs database name prefix for the given DB version'
@classmethod DCNL def _getDBName(cls): DCNL 'Generates the ClientJobs database name for the current version of the DCNL database; "semi-private" class method for use by friends of the class. DCNL Parameters: DCNL retval:         the ClientJobs database name'
@classmethod DCNL def __getDBNameForVersion(cls, dbVersion): DCNL 'Generates the ClientJobs database name for the given version of the DCNL database DCNL Parameters: DCNL dbVersion:      ClientJobs database version number DCNL retval:         the ClientJobs database name for the given DB version'
@staticmethod DCNL @logExceptions(_LOGGER) DCNL def get(): DCNL 'Get the instance of the ClientJobsDAO created for this process (or DCNL perhaps at some point in the future, for this thread). DCNL Parameters: DCNL retval:  instance of ClientJobsDAO'
@logExceptions(_LOGGER) DCNL def __init__(self): DCNL 'Instantiate a ClientJobsDAO instance. DCNL Parameters:'
def _columnNameDBToPublic(self, dbName): DCNL 'Convert a database internal column name to a public name. This DCNL takes something of the form word1_word2_word3 and converts it to: DCNL word1Word2Word3. If the db field name starts with \'_\', it is stripped out DCNL so that the name is compatible with collections.namedtuple. DCNL for example: _word1_word2_word3 => word1Word2Word3 DCNL Parameters: DCNL dbName:      database internal field name DCNL retval:      public name'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def connect(self, deleteOldVersions=False, recreate=False): DCNL 'Locate the current version of the jobs DB or create a new one, and DCNL optionally delete old versions laying around. If desired, this method DCNL can be called at any time to re-create the tables from scratch, delete DCNL old versions of the database, etc. DCNL Parameters: DCNL deleteOldVersions:   if true, delete any old versions of the DB left DCNL on the server DCNL recreate:            if true, recreate the database from scratch even DCNL if it already exists.'
@logExceptions(_LOGGER) DCNL def _initTables(self, cursor, deleteOldVersions, recreate): DCNL 'Initialize tables, if needed DCNL Parameters: DCNL cursor:              SQL cursor DCNL deleteOldVersions:   if true, delete any old versions of the DB left DCNL on the server DCNL recreate:            if true, recreate the database from scratch even DCNL if it already exists.'
def _getMatchingRowsNoRetries(self, tableInfo, conn, fieldsToMatch, selectFieldNames, maxRows=None): DCNL 'Return a sequence of matching rows with the requested field values from DCNL a table or empty sequence if nothing matched. DCNL tableInfo:       Table information: a ClientJobsDAO._TableInfoBase  instance DCNL conn:            Owned connection acquired from ConnectionFactory.get() DCNL fieldsToMatch:   Dictionary of internal fieldName/value mappings that DCNL identify the desired rows. If a value is an instance of DCNL ClientJobsDAO._SEQUENCE_TYPES (list/set/tuple), then the DCNL operator \'IN\' will be used in the corresponding SQL DCNL predicate; if the value is bool: "IS TRUE/FALSE"; if the DCNL value is None: "IS NULL"; \'=\' will be used for all other DCNL cases. DCNL selectFieldNames: DCNL list of fields to return, using internal field names DCNL maxRows:         maximum number of rows to return; unlimited if maxRows DCNL is None DCNL retval:          A sequence of matching rows, each row consisting of field DCNL values in the order of the requested field names.  Empty DCNL sequence is returned when not match exists.'
@g_retrySQL DCNL def _getMatchingRowsWithRetries(self, tableInfo, fieldsToMatch, selectFieldNames, maxRows=None): DCNL 'Like _getMatchingRowsNoRetries(), but with retries on transient MySQL DCNL failures'
def _getOneMatchingRowNoRetries(self, tableInfo, conn, fieldsToMatch, selectFieldNames): DCNL 'Return a single matching row with the requested field values from the DCNL the requested table or None if nothing matched. DCNL tableInfo:       Table information: a ClientJobsDAO._TableInfoBase  instance DCNL conn:            Owned connection acquired from ConnectionFactory.get() DCNL fieldsToMatch:   Dictionary of internal fieldName/value mappings that DCNL identify the desired rows. If a value is an instance of DCNL ClientJobsDAO._SEQUENCE_TYPES (list/set/tuple), then the DCNL operator \'IN\' will be used in the corresponding SQL DCNL predicate; if the value is bool: "IS TRUE/FALSE"; if the DCNL value is None: "IS NULL"; \'=\' will be used for all other DCNL cases. DCNL selectFieldNames: DCNL list of fields to return, using internal field names DCNL retval:          A sequence of field values of the matching row in the order DCNL of the given field names; or None if there was no match.'
@g_retrySQL DCNL def _getOneMatchingRowWithRetries(self, tableInfo, fieldsToMatch, selectFieldNames): DCNL 'Like _getOneMatchingRowNoRetries(), but with retries on transient MySQL DCNL failures'
def _insertOrGetUniqueJobNoRetries(self, conn, client, cmdLine, jobHash, clientInfo, clientKey, params, minimumWorkers, maximumWorkers, jobType, priority, alreadyRunning): DCNL 'Attempt to insert a row with the given parameters into the jobs table. DCNL Return jobID of the inserted row, or of an existing row with matching DCNL client/jobHash key. DCNL The combination of client and jobHash are expected to be unique (enforced DCNL by a unique index on the two columns). DCNL NOTE: It\'s possibe that this or another process (on this or another machine) DCNL already inserted a row with matching client/jobHash key (e.g., DCNL StreamMgr). This may also happen undetected by this function due to a DCNL partially-successful insert operation (e.g., row inserted, but then DCNL connection was lost while reading response) followed by retries either of DCNL this function or in SteadyDB module. DCNL Parameters: DCNL conn:            Owned connection acquired from ConnectionFactory.get() DCNL client:          Name of the client submitting the job DCNL cmdLine:         Command line to use to launch each worker process; must be DCNL a non-empty string DCNL jobHash:         unique hash of this job. The caller must insure that this, DCNL together with client, uniquely identifies this job request DCNL for the purposes of detecting duplicates. DCNL clientInfo:      JSON encoded dict of client specific information. DCNL clientKey:       Foreign key. DCNL params:          JSON encoded dict of the parameters for the job. This DCNL can be fetched out of the database by the worker processes DCNL based on the jobID. DCNL minimumWorkers:  minimum number of workers design at a time. DCNL maximumWorkers:  maximum number of workers desired at a time. DCNL priority:        Job scheduling priority; 0 is the default priority ( DCNL ClientJobsDAO.DEFAULT_JOB_PRIORITY); positive values are DCNL higher priority (up to ClientJobsDAO.MAX_JOB_PRIORITY), DCNL and negative values are lower priority (down to DCNL ClientJobsDAO.MIN_JOB_PRIORITY). Higher-priority jobs will DCNL be scheduled to run at the expense of the lower-priority DCNL jobs, and higher-priority job tasks will preempt those DCNL with lower priority if there is inadequate supply of DCNL scheduling slots. Excess lower priority job tasks will DCNL starve as long as slot demand exceeds supply. Most jobs DCNL should be scheduled with DEFAULT_JOB_PRIORITY. System jobs DCNL that must run at all cost, such as Multi-Model-Master, DCNL should be scheduled with MAX_JOB_PRIORITY. DCNL alreadyRunning:  Used for unit test purposes only. This inserts the job DCNL in the running state. It is used when running a worker DCNL in standalone mode without hadoop- it gives it a job DCNL record to work with. DCNL retval:           jobID of the inserted jobs row, or of an existing jobs row DCNL with matching client/jobHash key'
def _resumeJobNoRetries(self, conn, jobID, alreadyRunning): DCNL 'Resumes processing of an existing job that is presently in the DCNL STATUS_COMPLETED state. DCNL NOTE: this is primarily for resuming suspended Production and Stream Jobs; DO DCNL NOT use it on Hypersearch jobs. DCNL This prepares an existing job entry to resume processing. The CJM is always DCNL periodically sweeping the jobs table and when it finds a job that is ready DCNL to run, it will proceed to start it up on Hadoop. DCNL Parameters: DCNL conn:            Owned connection acquired from ConnectionFactory.get() DCNL jobID:          jobID of the job to resume DCNL alreadyRunning: Used for unit test purposes only. This inserts the job DCNL in the running state. It is used when running a worker DCNL in standalone mode without hadoop. DCNL raises:         Throws a RuntimeError if no rows are affected. This could DCNL either be because: DCNL 1) Because there was not matching jobID DCNL 2) or if the status of the job was not STATUS_COMPLETED. DCNL retval:            nothing'
def getConnectionID(self): DCNL 'Return our connection ID. This can be used for worker identification DCNL purposes. DCNL NOTE: the actual MySQL connection ID used in queries may change from time DCNL to time if connection is re-acquired (e.g., upon MySQL server restart) or DCNL when more than one entry from the connection pool has been used (e.g., DCNL multi-threaded apps)'
@logExceptions(_LOGGER) DCNL def jobSuspend(self, jobID): DCNL 'Requests a job to be suspended DCNL NOTE: this is primarily for suspending Production Jobs; DO NOT use DCNL it on Hypersearch jobs. For canceling any job type, use jobCancel() instead! DCNL Parameters: DCNL jobID:          jobID of the job to resume DCNL retval:            nothing'
@logExceptions(_LOGGER) DCNL def jobResume(self, jobID, alreadyRunning=False): DCNL 'Resumes processing of an existing job that is presently in the DCNL STATUS_COMPLETED state. DCNL NOTE: this is primarily for resuming suspended Production Jobs; DO NOT use DCNL it on Hypersearch jobs. DCNL NOTE: The job MUST be in the STATUS_COMPLETED state at the time of this DCNL call, otherwise an exception will be raised. DCNL This prepares an existing job entry to resume processing. The CJM is always DCNL periodically sweeping the jobs table and when it finds a job that is ready DCNL to run, will proceed to start it up on Hadoop. DCNL Parameters: DCNL job:            jobID of the job to resume DCNL alreadyRunning: Used for unit test purposes only. This inserts the job DCNL in the running state. It is used when running a worker DCNL in standalone mode without hadoop. DCNL raises:         Throws a RuntimeError if no rows are affected. This could DCNL either be because: DCNL 1) Because there was not matching jobID DCNL 2) or if the status of the job was not STATUS_COMPLETED. DCNL retval:            nothing'
@logExceptions(_LOGGER) DCNL def jobInsert(self, client, cmdLine, clientInfo='', clientKey='', params='', alreadyRunning=False, minimumWorkers=0, maximumWorkers=0, jobType='', priority=DEFAULT_JOB_PRIORITY): DCNL 'Add an entry to the jobs table for a new job request. This is called by DCNL clients that wish to startup a new job, like a Hypersearch, stream job, or DCNL specific model evaluation from the engine. DCNL This puts a new entry into the jobs table. The CJM is always periodically DCNL sweeping the jobs table and when it finds a new job, will proceed to start it DCNL up on Hadoop. DCNL Parameters: DCNL client:          Name of the client submitting the job DCNL cmdLine:         Command line to use to launch each worker process; must be DCNL a non-empty string DCNL clientInfo:      JSON encoded dict of client specific information. DCNL clientKey:       Foreign key. DCNL params:          JSON encoded dict of the parameters for the job. This DCNL can be fetched out of the database by the worker processes DCNL based on the jobID. DCNL alreadyRunning:  Used for unit test purposes only. This inserts the job DCNL in the running state. It is used when running a worker DCNL in standalone mode without hadoop - it gives it a job DCNL record to work with. DCNL minimumWorkers:  minimum number of workers design at a time. DCNL maximumWorkers:  maximum number of workers desired at a time. DCNL jobType:         The type of job that this is. This should be one of the DCNL JOB_TYPE_XXXX enums. This is needed to allow a standard DCNL way of recognizing a job\'s function and capabilities. DCNL priority:        Job scheduling priority; 0 is the default priority ( DCNL ClientJobsDAO.DEFAULT_JOB_PRIORITY); positive values are DCNL higher priority (up to ClientJobsDAO.MAX_JOB_PRIORITY), DCNL and negative values are lower priority (down to DCNL ClientJobsDAO.MIN_JOB_PRIORITY). Higher-priority jobs will DCNL be scheduled to run at the expense of the lower-priority DCNL jobs, and higher-priority job tasks will preempt those DCNL with lower priority if there is inadequate supply of DCNL scheduling slots. Excess lower priority job tasks will DCNL starve as long as slot demand exceeds supply. Most jobs DCNL should be scheduled with DEFAULT_JOB_PRIORITY. System jobs DCNL that must run at all cost, such as Multi-Model-Master, DCNL should be scheduled with MAX_JOB_PRIORITY. DCNL retval:          jobID - unique ID assigned to this job'
@logExceptions(_LOGGER) DCNL def jobInsertUnique(self, client, cmdLine, jobHash, clientInfo='', clientKey='', params='', minimumWorkers=0, maximumWorkers=0, jobType='', priority=DEFAULT_JOB_PRIORITY): DCNL 'Add an entry to the jobs table for a new job request, but only if the DCNL same job, by the same client is not already running. If the job is already DCNL running, or queued up to run, this call does nothing. If the job does not DCNL exist in the jobs table or has completed, it will be inserted and/or started DCNL up again. DCNL This method is called by clients, like StreamMgr, that wish to only start up DCNL a job if it hasn\'t already been started up. DCNL Parameters: DCNL client:          Name of the client submitting the job DCNL cmdLine:         Command line to use to launch each worker process; must be DCNL a non-empty string DCNL jobHash:         unique hash of this job. The client must insure that this DCNL uniquely identifies this job request for the purposes DCNL of detecting duplicates. DCNL clientInfo:      JSON encoded dict of client specific information. DCNL clientKey:       Foreign key. DCNL params:          JSON encoded dict of the parameters for the job. This DCNL can be fetched out of the database by the worker processes DCNL based on the jobID. DCNL minimumWorkers:  minimum number of workers design at a time. DCNL maximumWorkers:  maximum number of workers desired at a time. DCNL jobType:         The type of job that this is. This should be one of the DCNL JOB_TYPE_XXXX enums. This is needed to allow a standard DCNL way of recognizing a job\'s function and capabilities. DCNL priority:        Job scheduling priority; 0 is the default priority ( DCNL ClientJobsDAO.DEFAULT_JOB_PRIORITY); positive values are DCNL higher priority (up to ClientJobsDAO.MAX_JOB_PRIORITY), DCNL and negative values are lower priority (down to DCNL ClientJobsDAO.MIN_JOB_PRIORITY). Higher-priority jobs will DCNL be scheduled to run at the expense of the lower-priority DCNL jobs, and higher-priority job tasks will preempt those DCNL with lower priority if there is inadequate supply of DCNL scheduling slots. Excess lower priority job tasks will DCNL starve as long as slot demand exceeds supply. Most jobs DCNL should be scheduled with DEFAULT_JOB_PRIORITY. System jobs DCNL that must run at all cost, such as Multi-Model-Master, DCNL should be scheduled with MAX_JOB_PRIORITY. DCNL retval:          jobID of the newly inserted or existing job.'
@g_retrySQL DCNL def _startJobWithRetries(self, jobID): DCNL 'Place the given job in STATUS_RUNNING mode; the job is expected to be DCNL STATUS_NOTSTARTED. DCNL NOTE: this function was factored out of jobStartNext because it\'s also DCNL needed for testing (e.g., test_client_jobs_dao.py)'
@logExceptions(_LOGGER) DCNL def jobStartNext(self): DCNL 'For use only by Nupic Scheduler (also known as ClientJobManager) Look DCNL through the jobs table and see if any new job requests have been DCNL queued up. If so, pick one and mark it as starting up and create the DCNL model table to hold the results DCNL Parameters: DCNL retval:    jobID of the job we are starting up, if found; None if not found'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobReactivateRunningJobs(self): DCNL 'Look through the jobs table and reactivate all that are already in the DCNL running state by setting their _eng_allocate_new_workers fields to True; DCNL used by Nupic Scheduler as part of its failure-recovery procedure.'
@logExceptions(_LOGGER) DCNL def jobGetDemand(self): DCNL 'Look through the jobs table and get the demand - minimum and maximum DCNL number of workers requested, if new workers are to be allocated, if there DCNL are any untended dead workers, for all running jobs. DCNL Parameters: DCNL retval:      list of ClientJobsDAO._jobs.jobDemandNamedTuple nametuples DCNL containing the demand - min and max workers, DCNL allocate_new_workers, untended_dead_workers, num_failed_workers DCNL for each running (STATUS_RUNNING) job. Empty list when there DCNL isn\'t any demand.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobCancelAllRunningJobs(self): DCNL 'Set cancel field of all currently-running jobs to true.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobCountCancellingJobs(self): DCNL 'Look through the jobs table and count the running jobs whose DCNL cancel field is true. DCNL Parameters: DCNL retval:      A count of running jobs with the cancel field set to true.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobGetCancellingJobs(self): DCNL 'Look through the jobs table and get the list of running jobs whose DCNL cancel field is true. DCNL Parameters: DCNL retval:      A (possibly empty) sequence of running job IDs with cancel field DCNL set to true'
@staticmethod DCNL @logExceptions(_LOGGER) DCNL def partitionAtIntervals(data, intervals): DCNL 'Generator to allow iterating slices at dynamic intervals DCNL Parameters: DCNL data:       Any data structure that supports slicing (i.e. list or tuple) DCNL *intervals: Iterable of intervals.  The sum of intervals should be less DCNL than, or equal to the length of data.'
@staticmethod DCNL @logExceptions(_LOGGER) DCNL def _combineResults(result, *namedTuples): DCNL 'Return a list of namedtuples from the result of a join query.  A DCNL single database result is partitioned at intervals corresponding to the DCNL fields in namedTuples.  The return value is the result of applying DCNL namedtuple._make() to each of the partitions, for each of the namedTuples. DCNL Parameters: DCNL result:         Tuple representing a single result from a database query DCNL *namedTuples:   List of named tuples.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobInfoWithModels(self, jobID): DCNL 'Get all info about a job, with model details, if available. DCNL Parameters: DCNL job:    jobID of the job to query DCNL retval: A sequence of two-tuples if the jobID exists in the jobs DCNL table (exeption is raised if it doesn\'t exist). Each two-tuple DCNL contains an instance of jobInfoNamedTuple as the first element and DCNL an instance of modelInfoNamedTuple as the second element. NOTE: In DCNL the case where there are no matching model rows, a sequence of one DCNL two-tuple will still be returned, but the modelInfoNamedTuple DCNL fields will be None, and the jobInfoNamedTuple fields will be DCNL populated.'
@logExceptions(_LOGGER) DCNL def jobInfo(self, jobID): DCNL 'Get all info about a job DCNL Parameters: DCNL job:    jobID of the job to query DCNL retval:  namedtuple containing the job info.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobSetStatus(self, jobID, status, useConnectionID=True): DCNL 'Change the status on the given job DCNL Parameters: DCNL job:        jobID of the job to change status DCNL status:     new status string (ClientJobsDAO.STATUS_xxxxx) DCNL useConnectionID: True if the connection id of the calling function DCNL must be the same as the connection that created the job. Set DCNL to False for hypersearch workers'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobSetCompleted(self, jobID, completionReason, completionMsg, useConnectionID=True): DCNL 'Change the status on the given job to completed DCNL Parameters: DCNL job:                 jobID of the job to mark as completed DCNL completionReason:    completionReason string DCNL completionMsg:       completionMsg string DCNL useConnectionID: True if the connection id of the calling function DCNL must be the same as the connection that created the job. Set DCNL to False for hypersearch workers'
@logExceptions(_LOGGER) DCNL def jobCancel(self, jobID): DCNL 'Cancel the given job. This will update the cancel field in the DCNL jobs table and will result in the job being cancelled. DCNL Parameters: DCNL jobID:                 jobID of the job to mark as completed DCNL to False for hypersearch workers'
@logExceptions(_LOGGER) DCNL def jobGetModelIDs(self, jobID): DCNL 'Fetch all the modelIDs that correspond to a given jobID; empty sequence DCNL if none'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getActiveJobCountForClientInfo(self, clientInfo): DCNL 'Return the number of jobs for the given clientInfo and a status that is DCNL not completed.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getActiveJobCountForClientKey(self, clientKey): DCNL 'Return the number of jobs for the given clientKey and a status that is DCNL not completed.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getActiveJobsForClientInfo(self, clientInfo, fields=[]): DCNL 'Fetch jobIDs for jobs in the table with optional fields given a DCNL specific clientInfo'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getActiveJobsForClientKey(self, clientKey, fields=[]): DCNL 'Fetch jobIDs for jobs in the table with optional fields given a DCNL specific clientKey'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getJobs(self, fields=[]): DCNL 'Fetch jobIDs for jobs in the table with optional fields'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def getFieldsForActiveJobsOfType(self, jobType, fields=[]): DCNL 'Helper function for querying the models table including relevant job DCNL info where the job type matches the specified jobType.  Only records for DCNL which there is a matching jobId in both tables is returned, and only the DCNL requested fields are returned in each result, assuming that there is not DCNL a conflict.  This function is useful, for example, in querying a cluster DCNL for a list of actively running production models (according to the state DCNL of the client jobs database).  jobType must be one of the JOB_TYPE_XXXX DCNL enumerations. DCNL Parameters: DCNL jobType:   jobType enum DCNL fields:    list of fields to return DCNL Returns:    List of tuples containing the jobId and requested field values'
@logExceptions(_LOGGER) DCNL def jobGetFields(self, jobID, fields): DCNL 'Fetch the values of 1 or more fields from a job record. Here, \'fields\' DCNL is a list with the names of the fields to fetch. The names are the public DCNL names of the fields (camelBack, not the lower_case_only form as stored in DCNL the DB). DCNL Parameters: DCNL jobID:     jobID of the job record DCNL fields:    list of fields to return DCNL Returns:    A sequence of field values in the same order as the requested DCNL field list -> [field1, field2, ...]'
@logExceptions(_LOGGER) DCNL def jobsGetFields(self, jobIDs, fields, requireAll=True): DCNL 'Fetch the values of 1 or more fields from a sequence of job records. DCNL Here, \'fields\' is a sequence (list or tuple) with the names of the fields to DCNL fetch. The names are the public names of the fields (camelBack, not the DCNL lower_case_only form as stored in the DB). DCNL WARNING!!!: The order of the results are NOT necessarily in the same order as DCNL the order of the job IDs passed in!!! DCNL Parameters: DCNL jobIDs:        A sequence of jobIDs DCNL fields:        A list  of fields to return for each jobID DCNL Returns:      A list of tuples->(jobID, [field1, field2,...])'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobSetFields(self, jobID, fields, useConnectionID=True, ignoreUnchanged=False): DCNL 'Change the values of 1 or more fields in a job. Here, \'fields\' is a DCNL dict with the name/value pairs to change. The names are the public names of DCNL the fields (camelBack, not the lower_case_only form as stored in the DB). DCNL This method is for private use by the ClientJobManager only. DCNL Parameters: DCNL jobID:     jobID of the job record DCNL fields:    dictionary of fields to change DCNL useConnectionID: True if the connection id of the calling function DCNL must be the same as the connection that created the job. Set DCNL to False for hypersearch workers DCNL ignoreUnchanged: The default behavior is to throw a DCNL RuntimeError if no rows are affected. This could either be DCNL because: DCNL 1) Because there was not matching jobID DCNL 2) or if the data to update matched the data in the DB exactly. DCNL Set this parameter to True if you expect case 2 and wish to DCNL supress the error.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobSetFieldIfEqual(self, jobID, fieldName, newValue, curValue): DCNL 'Change the value of 1 field in a job to \'newValue\', but only if the DCNL current value matches \'curValue\'. The \'fieldName\' is the public name of DCNL the field (camelBack, not the lower_case_only form as stored in the DB). DCNL This method is used for example by HypersearcWorkers to update the DCNL engWorkerState field periodically. By qualifying on curValue, it insures DCNL that only 1 worker at a time is elected to perform the next scheduled DCNL periodic sweep of the models. DCNL Parameters: DCNL jobID:        jobID of the job record to modify DCNL fieldName:    public field name of the field DCNL newValue:     new value of the field to set DCNL curValue:     current value to qualify against DCNL retval:       True if we successfully modified the field DCNL False if curValue did not match'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobIncrementIntField(self, jobID, fieldName, increment=1, useConnectionID=False): DCNL 'Incremet the value of 1 field in a job by increment. The \'fieldName\' is DCNL the public name of the field (camelBack, not the lower_case_only form as DCNL stored in the DB). DCNL This method is used for example by HypersearcWorkers to update the DCNL engWorkerState field periodically. By qualifying on curValue, it insures DCNL that only 1 worker at a time is elected to perform the next scheduled DCNL periodic sweep of the models. DCNL Parameters: DCNL jobID:        jobID of the job record to modify DCNL fieldName:    public field name of the field DCNL increment:    increment is added to the current value of the field'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def jobUpdateResults(self, jobID, results): DCNL 'Update the results string and last-update-time fields of a model. DCNL Parameters: DCNL jobID:      job ID of model to modify DCNL results:    new results (json dict string)'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelsClearAll(self): DCNL 'Delete all models from the models table DCNL Parameters:'
@logExceptions(_LOGGER) DCNL def modelInsertAndStart(self, jobID, params, paramsHash, particleHash=None): DCNL 'Insert a new unique model (based on params) into the model table in the DCNL "running" state. This will return two things: whether or not the model was DCNL actually inserted (i.e. that set of params isn\'t already in the table) and DCNL the modelID chosen for that set of params. Even if the model was not DCNL inserted by this call (it was already there) the modelID of the one already DCNL inserted is returned. DCNL Parameters: DCNL jobID:            jobID of the job to add models for DCNL params:           params for this model DCNL paramsHash        hash of the params, generated by the worker DCNL particleHash      hash of the particle info (for PSO). If not provided, DCNL then paramsHash will be used. DCNL retval:           (modelID, wasInserted) DCNL modelID: the model ID for this set of params DCNL wasInserted: True if this call ended up inserting the DCNL new model. False if this set of params was already in DCNL the model table.'
@logExceptions(_LOGGER) DCNL def modelsInfo(self, modelIDs): DCNL 'Get ALL info for a set of models DCNL WARNING!!!: The order of the results are NOT necessarily in the same order as DCNL the order of the model IDs passed in!!! DCNL Parameters: DCNL modelIDs:    list of model IDs DCNL retval:      list of nametuples containing all the fields stored for each DCNL model.'
@logExceptions(_LOGGER) DCNL def modelsGetFields(self, modelIDs, fields): DCNL 'Fetch the values of 1 or more fields from a sequence of model records. DCNL Here, \'fields\' is a list with the names of the fields to fetch. The names DCNL are the public names of the fields (camelBack, not the lower_case_only form DCNL as stored in the DB). DCNL WARNING!!!: The order of the results are NOT necessarily in the same order DCNL as the order of the model IDs passed in!!! DCNL Parameters: DCNL modelIDs:      A single modelID or sequence of modelIDs DCNL fields:        A list  of fields to return DCNL Returns:  If modelIDs is a sequence: DCNL a list of tuples->(modelID, [field1, field2,...]) DCNL If modelIDs is a single modelID: DCNL a list of field values->[field1, field2,...]'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelsGetFieldsForJob(self, jobID, fields, ignoreKilled=False): DCNL 'Gets the specified fields for all the models for a single job. This is DCNL similar to modelsGetFields DCNL Parameters: DCNL jobID:              jobID for the models to be searched DCNL fields:             A list  of fields to return DCNL ignoreKilled:       (True/False). If True, this will ignore models that DCNL have been killed DCNL Returns: a (possibly empty) list of tuples as follows DCNL (model_id1, [field1, ..., fieldn]), DCNL (model_id2, [field1, ..., fieldn]), DCNL (model_id3, [field1, ..., fieldn]) DCNL NOTE: since there is a window of time between a job getting inserted into DCNL jobs table and the job\'s worker(s) starting up and creating models, an DCNL empty-list result is one of the normal outcomes.'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelsGetFieldsForCheckpointed(self, jobID, fields): DCNL 'Gets fields from all models in a job that have been checkpointed. This is DCNL used to figure out whether or not a new model should be checkpointed. DCNL Parameters: DCNL jobID:                    The jobID for the models to be searched DCNL fields:                   A list of fields to return DCNL Returns: a (possibly-empty) list of tuples as follows DCNL (model_id1, [field1, ..., fieldn]), DCNL (model_id2, [field1, ..., fieldn]), DCNL (model_id3, [field1, ..., fieldn])'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelSetFields(self, modelID, fields, ignoreUnchanged=False): DCNL 'Change the values of 1 or more fields in a model. Here, \'fields\' is a DCNL dict with the name/value pairs to change. The names are the public names of DCNL the fields (camelBack, not the lower_case_only form as stored in the DB). DCNL Parameters: DCNL jobID:     jobID of the job record DCNL fields:    dictionary of fields to change DCNL ignoreUnchanged: The default behavior is to throw a DCNL RuntimeError if no rows are affected. This could either be DCNL because: DCNL 1) Because there was no matching modelID DCNL 2) or if the data to update matched the data in the DB exactly. DCNL Set this parameter to True if you expect case 2 and wish to DCNL supress the error.'
@logExceptions(_LOGGER) DCNL def modelsGetParams(self, modelIDs): DCNL 'Get the params and paramsHash for a set of models. DCNL WARNING!!!: The order of the results are NOT necessarily in the same order as DCNL the order of the model IDs passed in!!! DCNL Parameters: DCNL modelIDs:    list of model IDs DCNL retval:      list of result namedtuples defined in DCNL ClientJobsDAO._models.getParamsNamedTuple. Each tuple DCNL contains: (modelId, params, engParamsHash)'
@logExceptions(_LOGGER) DCNL def modelsGetResultAndStatus(self, modelIDs): DCNL 'Get the results string and other status fields for a set of models. DCNL WARNING!!!: The order of the results are NOT necessarily in the same order DCNL as the order of the model IDs passed in!!! DCNL For each model, this returns a tuple containing: DCNL (modelID, results, status, updateCounter, numRecords, completionReason, DCNL completionMsg, engParamsHash DCNL Parameters: DCNL modelIDs:    list of model IDs DCNL retval:      list of result tuples. Each tuple contains: DCNL (modelID, results, status, updateCounter, numRecords, DCNL completionReason, completionMsg, engParamsHash)'
@logExceptions(_LOGGER) DCNL def modelsGetUpdateCounters(self, jobID): DCNL 'Return info on all of the models that are in already in the models DCNL table for a given job. For each model, this returns a tuple DCNL containing: (modelID, updateCounter). DCNL Note that we don\'t return the results for all models, since the results DCNL string could be quite large. The information we are returning is DCNL just 2 integer fields. DCNL Parameters: DCNL jobID:      jobID to query DCNL retval:     (possibly empty) list of tuples. Each tuple contains: DCNL (modelID, updateCounter)'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelUpdateResults(self, modelID, results=None, metricValue=None, numRecords=None): DCNL 'Update the results string, and/or num_records fields of DCNL a model. This will fail if the model does not currently belong to this DCNL client (connection_id doesn\'t match). DCNL Parameters: DCNL modelID:      model ID of model to modify DCNL results:      new results, or None to ignore DCNL metricValue:  the value of the metric being optimized, or None to ignore DCNL numRecords:   new numRecords, or None to ignore'
@logExceptions(_LOGGER) DCNL @g_retrySQL DCNL def modelSetCompleted(self, modelID, completionReason, completionMsg, cpuTime=0, useConnectionID=True): DCNL 'Mark a model as completed, with the given completionReason and DCNL completionMsg. This will fail if the model does not currently belong to this DCNL client (connection_id doesn\'t match). DCNL Parameters: DCNL modelID:             model ID of model to modify DCNL completionReason:    completionReason string DCNL completionMsg:       completionMsg string DCNL cpuTime:             amount of CPU time spent on this model DCNL useConnectionID:     True if the connection id of the calling function DCNL must be the same as the connection that created the DCNL job. Set to True for hypersearch workers, which use DCNL this mechanism for orphaned model detection.'
@logExceptions(_LOGGER) DCNL def modelAdoptNextOrphan(self, jobId, maxUpdateInterval): DCNL 'Look through the models table for an orphaned model, which is a model DCNL that is not completed yet, whose _eng_last_update_time is more than DCNL maxUpdateInterval seconds ago. DCNL If one is found, change its _eng_worker_conn_id to the current worker\'s DCNL and return the model id. DCNL Parameters: DCNL retval:    modelId of the model we adopted, or None if none found'
@classmethod DCNL def get(cls): DCNL 'Acquire a ConnectionWrapper instance that represents a connection DCNL to the SQL server per nupic.cluster.database.* configuration settings. DCNL NOTE: caller is responsible for calling the ConnectionWrapper instance\'s DCNL release() method after using the connection in order to release resources. DCNL Better yet, use the returned ConnectionWrapper instance in a Context Manager DCNL statement for automatic invocation of release(): DCNL Example: DCNL # If using Jython 2.5.x, first import with_statement at the very top of DCNL your script (don\'t need this import for Jython/Python 2.6.x and later): DCNL from __future__ import with_statement DCNL # Then: DCNL from nupic.database.Connection import ConnectionFactory DCNL # Then use it like this DCNL with ConnectionFactory.get() as conn: DCNL conn.cursor.execute("SELECT ...") DCNL conn.cursor.fetchall() DCNL conn.cursor.execute("INSERT ...") DCNL WARNING: DO NOT close the underlying connection or cursor as it may be DCNL shared by other modules in your process.  ConnectionWrapper\'s release() DCNL method will do the right thing. DCNL Parameters: DCNL retval:       A ConnectionWrapper instance. NOTE: Caller is responsible DCNL for releasing resources as described above.'
@classmethod DCNL def close(cls): DCNL 'Close ConnectionFactory\'s connection policy. Typically, there is no need DCNL to call this method as the system will automatically close the connections DCNL when the process exits. DCNL NOTE: This method should be used with CAUTION. It is designed to be DCNL called ONLY by the code responsible for startup and shutdown of the process DCNL since it closes the connection(s) used by ALL clients in this process.'
@classmethod DCNL def setConnectionPolicyProvider(cls, provider): DCNL 'Set the method for ConnectionFactory to use when it needs to DCNL instantiate its database connection policy. DCNL NOTE: This method should be used with CAUTION. ConnectionFactory\'s default DCNL behavior should be adequate for all NuPIC code, and this method is provided DCNL primarily for diagnostics. It is designed to only be called by the code DCNL responsible for startup of the process since the provider method has no DCNL impact after ConnectionFactory\'s connection policy instance is instantiated. DCNL See ConnectionFactory._createDefaultPolicy DCNL Parameters: DCNL provider:     The method that instantiates the singleton database DCNL connection policy to be used by ConnectionFactory class. DCNL The method must be compatible with the following signature: DCNL <DatabaseConnectionPolicyIface subclass instance> provider()'
@classmethod DCNL def _createDefaultPolicy(cls): DCNL '[private] Create the default database connection policy instance DCNL Parameters: DCNL retval:            The default database connection policy instance'
def __init__(self, dbConn, cursor, releaser, logger): DCNL 'Parameters: DCNL dbConn:         the underlying database connection instance DCNL cursor:         database cursor DCNL releaser:       a method to call to release the connection and cursor; DCNL method signature: DCNL None dbConnReleaser(dbConn, cursor)'
def __enter__(self): DCNL '[Context Manager protocol method] Permit a ConnectionWrapper instance DCNL to be used in a context manager expression (with ... as:) to facilitate DCNL robust release of resources (instead of try:/finally:/release()).  See DCNL examples in ConnectionFactory docstring.'
def __exit__(self, exc_type, exc_val, exc_tb): DCNL '[Context Manager protocol method] Release resources.'
def release(self): DCNL 'Release the database connection and cursor DCNL The receiver of the Connection instance MUST call this method in order DCNL to reclaim resources'
def _trackInstanceAndCheckForConcurrencyViolation(self): DCNL 'Check for concurrency violation and add self to DCNL _clsOutstandingInstances. DCNL ASSUMPTION: Called from constructor BEFORE _clsNumOutstanding is DCNL incremented'
def close(self): DCNL 'Close the policy instance and its shared database connection.'
def acquireConnection(self): DCNL 'Get a Connection instance. DCNL Parameters: DCNL retval:       A ConnectionWrapper instance. DCNL Caller is responsible for calling the  ConnectionWrapper DCNL instance\'s release() method to release resources.'
def __init__(self): DCNL 'Consruct an instance. The instance\'s open() method must be DCNL called to make it ready for acquireConnection() calls.'
def close(self): DCNL 'Close the policy instance and its shared database connection.'
def acquireConnection(self): DCNL 'Get a Connection instance. DCNL Parameters: DCNL retval:       A ConnectionWrapper instance. NOTE: Caller DCNL is responsible for calling the  ConnectionWrapper DCNL instance\'s release() method or use it in a context manager DCNL expression (with ... as:) to release resources.'
def _releaseConnection(self, dbConn, cursor): DCNL 'Release database connection and cursor; passed as a callback to DCNL ConnectionWrapper'
def __init__(self): DCNL 'Consruct an instance. The instance\'s open() method must be DCNL called to make it ready for acquireConnection() calls.'
def close(self): DCNL 'Close the policy instance and its database connection pool.'
def acquireConnection(self): DCNL 'Get a connection from the pool. DCNL Parameters: DCNL retval:       A ConnectionWrapper instance. NOTE: Caller DCNL is responsible for calling the  ConnectionWrapper DCNL instance\'s release() method or use it in a context manager DCNL expression (with ... as:) to release resources.'
def _releaseConnection(self, dbConn, cursor): DCNL 'Release database connection and cursor; passed as a callback to DCNL ConnectionWrapper'
def __init__(self): DCNL 'Consruct an instance. The instance\'s open() method must be DCNL called to make it ready for acquireConnection() calls.'
def close(self): DCNL 'Close the policy instance.'
def acquireConnection(self): DCNL 'Create a Connection instance. DCNL Parameters: DCNL retval:       A ConnectionWrapper instance. NOTE: Caller DCNL is responsible for calling the  ConnectionWrapper DCNL instance\'s release() method or use it in a context manager DCNL expression (with ... as:) to release resources.'
def _releaseConnection(self, dbConn, cursor): DCNL 'Release database connection and cursor; passed as a callback to DCNL ConnectionWrapper'
def __init__(self, n, w=None, name='sparse_pass_through', forced=False, verbosity=0): DCNL 'n is the total bits in input DCNL w is the number of bits used to encode each input bit'
def encodeIntoArray(self, value, output): DCNL 'See method description in base.py'
def __init__(self, w, minval=None, maxval=None, periodic=False, n=0, radius=0, resolution=0, name=None, verbosity=0, clipInput=True, forced=False): DCNL '[ScalarEncoder class method override]'
def topDownCompute(self, encoded): DCNL '[ScalarEncoder class method override]'
def getDecoderOutputFieldTypes(self): DCNL 'Encoder class virtual method override'
def _getScaledValue(self, inpt): DCNL 'Convert the input, which is in normal space, into log space'
def getBucketIndices(self, inpt): DCNL 'See the function description in base.py'
def encodeIntoArray(self, inpt, output): DCNL 'See the function description in base.py'
def decode(self, encoded, parentFieldName=''): DCNL 'See the function description in base.py'
def getBucketValues(self): DCNL 'See the function description in base.py'
def getBucketInfo(self, buckets): DCNL 'See the function description in base.py'
def topDownCompute(self, encoded): DCNL 'See the function description in base.py'
def closenessScores(self, expValues, actValues, fractional=True): DCNL 'See the function description in base.py'
def getDescription(self): DCNL 'See `nupic.encoders.base.Encoder` for more information.'
def getScalars(self, inputData): DCNL 'See `nupic.encoders.base.Encoder` for more information.'
def encodeIntoArray(self, inputData, output): DCNL 'See `nupic.encoders.base.Encoder` for more information. DCNL :param: inputData (tuple) Contains speed (float), longitude (float), DCNL latitude (float), altitude (float) DCNL :param: output (numpy.array) Stores encoded SDR in this numpy array'
def coordinateForPosition(self, longitude, latitude, altitude=None): DCNL 'Returns coordinate for given GPS position. DCNL :param: longitude (float) Longitude of position DCNL :param: latitude (float) Latitude of position DCNL :param: altitude (float) Altitude of position DCNL :returns: (numpy.array) Coordinate that the given GPS position DCNL maps to'
def radiusForSpeed(self, speed): DCNL 'Returns radius for given speed. DCNL Tries to get the encodings of consecutive readings to be DCNL adjacent with some overlap. DCNL :param: speed (float) Speed (in meters per second) DCNL :returns: (int) Radius for given speed'
def getWidth(self): DCNL 'Should return the output width, in bits. DCNL :return: (int) output width in bits'
def encodeIntoArray(self, inputData, output): DCNL 'Encodes inputData and puts the encoded value into the numpy output array, DCNL which is a 1-D array of length returned by :meth:`.getWidth`. DCNL .. note:: The numpy output array is reused, so clear it before updating it. DCNL :param inputData: Data to encode. This should be validated by the encoder. DCNL :param output: numpy 1-D array of same length returned by DCNL :meth:`.getWidth`.'
def setLearning(self, learningEnabled): DCNL 'Set whether learning is enabled. DCNL :param learningEnabled: (bool) whether learning should be enabled'
def setFieldStats(self, fieldName, fieldStatistics): DCNL 'This method is called by the model to set the statistics like min and DCNL max for the underlying encoders if this information is available. DCNL :param fieldName: name of the field this encoder is encoding, provided by DCNL :class:`~.nupic.encoders.multi.MultiEncoder`. DCNL :param fieldStatistics: dictionary of dictionaries with the first level being DCNL the fieldname and the second index the statistic ie: DCNL ``fieldStatistics[\'pounds\'][\'min\']``'
def encode(self, inputData): DCNL 'Convenience wrapper for :meth:`.encodeIntoArray`. DCNL This may be less efficient because it allocates a new numpy array every DCNL call. DCNL :param inputData: input data to be encoded DCNL :return: a numpy array with the encoded representation of inputData'
def getScalarNames(self, parentFieldName=''): DCNL 'Return the field names for each of the scalar values returned by DCNL getScalars. DCNL :param parentFieldName: The name of the encoder which is our parent. This DCNL name is prefixed to each of the field names within this encoder to DCNL form the keys of the dict() in the retval. DCNL :return: array of field names'
def getDecoderOutputFieldTypes(self): DCNL 'Returns a sequence of field types corresponding to the elements in the DCNL decoded output field array.  The types are defined by DCNL :class:`~nupic.data.field_meta.FieldMetaType`. DCNL :return: list of :class:`~nupic.data.field_meta.FieldMetaType` objects'
def setStateLock(self, lock): DCNL 'Setting this to true freezes the state of the encoder DCNL This is separate from the learning state which affects changing parameters. DCNL Implemented in subclasses.'
def _getInputValue(self, obj, fieldName): DCNL 'Gets the value of a given field from the input record'
def getEncoderList(self): DCNL ':return: a reference to each sub-encoder in this encoder. They are DCNL returned in the same order as they are for :meth:`.getScalarNames` DCNL and :meth:`.getScalars`.'
def getScalars(self, inputData): DCNL 'Returns a numpy array containing the sub-field scalar value(s) for DCNL each sub-field of the ``inputData``. To get the associated field names for DCNL each of the scalar values, call :meth:`.getScalarNames()`. DCNL For a simple scalar encoder, the scalar value is simply the input unmodified. DCNL For category encoders, it is the scalar representing the category string DCNL that is passed in. For the datetime encoder, the scalar value is the DCNL the number of seconds since epoch. DCNL The intent of the scalar representation of a sub-field is to provide a DCNL baseline for measuring error differences. You can compare the scalar value DCNL of the inputData with the scalar value returned from :meth:`.topDownCompute` DCNL on a top-down representation to evaluate prediction accuracy, for example. DCNL :param inputData: The data from the source. This is typically an object with DCNL members DCNL :return: array of scalar values'
def getEncodedValues(self, inputData): DCNL 'Returns the input in the same format as is returned by DCNL :meth:`.topDownCompute`. For most encoder types, this is the same as the DCNL input data. For instance, for scalar and category types, this corresponds to DCNL the numeric and string values, respectively, from the inputs. For datetime DCNL encoders, this returns the list of scalars for each of the sub-fields DCNL (timeOfDay, dayOfWeek, etc.) DCNL This method is essentially the same as :meth:`.getScalars` except that it DCNL returns strings. DCNL :param inputData: The input data in the format it is received from the data DCNL source DCNL :return: A list of values, in the same format and in the same order as they DCNL are returned by :meth:`.topDownCompute`.'
def getBucketIndices(self, inputData): DCNL 'Returns an array containing the sub-field bucket indices for each sub-field DCNL of the inputData. To get the associated field names for each of the buckets, DCNL call :meth:`.getScalarNames`. DCNL :param inputData: The data from the source. This is typically an object with DCNL members. DCNL :return: array of bucket indices'
def scalarsToStr(self, scalarValues, scalarNames=None): DCNL 'Return a pretty print string representing the return values from DCNL :meth:`.getScalars` and :meth:`.getScalarNames`. DCNL :param scalarValues: input values to encode to string DCNL :param scalarNames: optional input of scalar names to convert. If None, gets DCNL scalar names from :meth:`.getScalarNames` DCNL :return: string representation of scalar values'
def getDescription(self): DCNL '**Must be overridden by subclasses.** DCNL This returns a list of tuples, each containing (``name``, ``offset``). DCNL The ``name`` is a string description of each sub-field, and ``offset`` is DCNL the bit offset of the sub-field for that encoder. DCNL For now, only the \'multi\' and \'date\' encoders have multiple (name, offset) DCNL pairs. All other encoders have a single pair, where the offset is 0. DCNL :return: list of tuples containing (name, offset)'
def getFieldDescription(self, fieldName): DCNL 'Return the offset and length of a given field within the encoded output. DCNL :param fieldName: Name of the field DCNL :return: tuple(``offset``, ``width``) of the field within the encoded output'
def encodedBitDescription(self, bitOffset, formatted=False): DCNL 'Return a description of the given bit in the encoded output. DCNL This will include the field name and the offset within the field. DCNL :param bitOffset:      Offset of the bit to get the description of DCNL :param formatted:      If True, the bitOffset is w.r.t. formatted output, DCNL which includes separators DCNL :return:             tuple(``fieldName``, ``offsetWithinField``)'
def pprintHeader(self, prefix=''): DCNL 'Pretty-print a header that labels the sub-fields of the encoded DCNL output. This can be used in conjuction with :meth:`.pprint`. DCNL :param prefix: printed before the header if specified'
def pprint(self, output, prefix=''): DCNL 'Pretty-print the encoded output using ascii art. DCNL :param output: to print DCNL :param prefix: printed before the header if specified'
def decode(self, encoded, parentFieldName=''): DCNL 'Takes an encoded output and does its best to work backwards and generate DCNL the input that would have generated it. DCNL In cases where the encoded output contains more ON bits than an input DCNL would have generated, this routine will return one or more ranges of inputs DCNL which, if their encoded outputs were ORed together, would produce the DCNL target output. This behavior makes this method suitable for doing things DCNL like generating a description of a learned coincidence in the SP, which DCNL in many cases might be a union of one or more inputs. DCNL If instead, you want to figure the *most likely* single input scalar value DCNL that would have generated a specific encoded output, use the DCNL :meth:`.topDownCompute` method. DCNL If you want to pretty print the return value from this method, use the DCNL :meth:`.decodedToStr` method. DCNL :param encoded:      The encoded output that you want decode DCNL :param parentFieldName: The name of the encoder which is our parent. This name DCNL is prefixed to each of the field names within this encoder to form the DCNL keys of the dict() in the retval. DCNL :return: tuple(``fieldsDict``, ``fieldOrder``) DCNL ``fieldsDict`` is a dict() where the keys represent field names DCNL (only 1 if this is a simple encoder, > 1 if this is a multi DCNL or date encoder) and the values are the result of decoding each DCNL field. If there are  no bits in encoded that would have been DCNL generated by a field, it won\'t be present in the dict. The DCNL key of each entry in the dict is formed by joining the passed in DCNL parentFieldName with the child encoder name using a \'.\'. DCNL Each \'value\' in ``fieldsDict`` consists of (ranges, desc), where DCNL ranges is a list of one or more (minVal, maxVal) ranges of DCNL input that would generate bits in the encoded output and \'desc\' DCNL is a pretty print description of the ranges. For encoders like DCNL the category encoder, the \'desc\' will contain the category DCNL names that correspond to the scalar values included in the DCNL ranges. DCNL ``fieldOrder`` is a list of the keys from ``fieldsDict``, in the DCNL same order as the fields appear in the encoded output. DCNL TODO: when we switch to Python 2.7 or 3.x, use OrderedDict DCNL Example retvals for a scalar encoder: DCNL .. code-block:: python DCNL {\'amount\':  ( [[1,3], [7,10]], \'1-3, 7-10\' )} DCNL {\'amount\':  ( [[2.5,2.5]],     \'2.5\'       )} DCNL Example retval for a category encoder: DCNL .. code-block:: python DCNL {\'country\': ( [[1,1], [5,6]], \'US, GB, ES\' )} DCNL Example retval for a multi encoder: DCNL .. code-block:: python DCNL {\'amount\':  ( [[2.5,2.5]],     \'2.5\'       ), DCNL \'country\': ( [[1,1], [5,6]],  \'US, GB, ES\' )}'
def decodedToStr(self, decodeResults): DCNL 'Return a pretty print string representing the return value from DCNL :meth:`.decode`.'
def getBucketValues(self): DCNL '**Must be overridden by subclasses.** DCNL Returns a list of items, one for each bucket defined by this encoder. DCNL Each item is the value assigned to that bucket, this is the same as the DCNL :attr:`.EncoderResult.value` that would be returned by DCNL :meth:`.getBucketInfo` for that bucket and is in the same format as the DCNL input that would be passed to :meth:`.encode`. DCNL This call is faster than calling :meth:`.getBucketInfo` on each bucket DCNL individually if all you need are the bucket values. DCNL :return: list of items, each item representing the bucket value for that DCNL bucket.'
def getBucketInfo(self, buckets): DCNL 'Returns a list of :class:`.EncoderResult` namedtuples describing the inputs DCNL for each sub-field that correspond to the bucket indices passed in DCNL ``buckets``. To get the associated field names for each of the values, call DCNL :meth:`.getScalarNames`. DCNL :param buckets: The list of bucket indices, one for each sub-field encoder. DCNL These bucket indices for example may have been retrieved DCNL from the :meth:`.getBucketIndices` call. DCNL :return: A list of :class:`.EncoderResult`.'
def topDownCompute(self, encoded): DCNL 'Returns a list of :class:`.EncoderResult` namedtuples describing the DCNL top-down best guess inputs for each sub-field given the encoded output. DCNL These are the values which are most likely to generate the given encoded DCNL output. To get the associated field names for each of the values, call DCNL :meth:`.getScalarNames`. DCNL :param encoded: The encoded output. Typically received from the topDown DCNL outputs from the spatial pooler just above us. DCNL :return: A list of :class:`.EncoderResult`'
def closenessScores(self, expValues, actValues, fractional=True): DCNL 'Compute closeness scores between the expected scalar value(s) and actual DCNL scalar value(s). The expected scalar values are typically those obtained DCNL from the :meth:`.getScalars` method. The actual scalar values are typically DCNL those returned from :meth:`.topDownCompute`. DCNL This method returns one closeness score for each value in expValues (or DCNL actValues which must be the same length). The closeness score ranges from DCNL 0 to 1.0, 1.0 being a perfect match and 0 being the worst possible match. DCNL If this encoder is a simple, single field encoder, then it will expect DCNL just 1 item in each of the ``expValues`` and ``actValues`` arrays. DCNL Multi-encoders will expect 1 item per sub-encoder. DCNL Each encoder type can define it\'s own metric for closeness. For example, DCNL a category encoder may return either 1 or 0, if the scalar matches exactly DCNL or not. A scalar encoder might return a percentage match, etc. DCNL :param expValues: Array of expected scalar values, typically obtained from DCNL :meth:`.getScalars` DCNL :param actValues: Array of actual values, typically obtained from DCNL :meth:`.topDownCompute` DCNL :return: Array of closeness scores, one per item in expValues (or DCNL actValues).'
def getDisplayWidth(self): DCNL 'Calculate width of display for bits plus blanks between fields. DCNL :return: (int) width of display for bits plus blanks between fields'
def getDecoderOutputFieldTypes(self): DCNL '[Encoder class virtual method override]'
def getScalars(self, input): DCNL 'See method description in base.py'
def getBucketIndices(self, input): DCNL 'See method description in base.py'
def encodeIntoArray(self, inputVal, outputVal): DCNL 'See method description in base.py'
def decode(self, encoded, parentFieldName=''): DCNL 'See the function description in base.py'
def getBucketInfo(self, buckets): DCNL 'See the function description in base.py'
def topDownCompute(self, encoded): DCNL 'See the function description in base.py'
def closenessScores(self, expValues, actValues, **kwargs): DCNL 'Does a bitwise compare of the two bitmaps and returns a fractonal DCNL value between 0 and 1 of how similar they are. DCNL - ``1`` => identical DCNL - ``0`` => no overlaping bits DCNL ``kwargs`` will have the keyword "fractional", which is assumed by this DCNL encoder.'
def getDecoderOutputFieldTypes(self): DCNL '[Encoder class virtual method override]'
def getScalars(self, input): DCNL 'See method description in base.py'
def getBucketIndices(self, input): DCNL 'See method description in base.py'
def decode(self, encoded, parentFieldName=''): DCNL 'See the function description in base.py'
def closenessScores(self, expValues, actValues, fractional=True): DCNL 'See the function description in base.py DCNL kwargs will have the keyword "fractional", which is ignored by this encoder'
def getBucketValues(self): DCNL 'See the function description in base.py'
def getBucketInfo(self, buckets): DCNL 'See the function description in base.py'
def topDownCompute(self, encoded): DCNL 'See the function description in base.py'
def _setEncoderParams(self): DCNL 'Set the radius, resolution and range. These values are updated when minval DCNL and/or maxval change.'
def setFieldStats(self, fieldName, fieldStats): DCNL 'TODO: document'
def _setMinAndMax(self, input, learn): DCNL 'Potentially change the minval and maxval using input. DCNL **The learn flag is currently not supported by cla regions.**'
def getBucketIndices(self, input, learn=None): DCNL '[overrides nupic.encoders.scalar.ScalarEncoder.getBucketIndices]'
def encodeIntoArray(self, input, output, learn=None): DCNL '[overrides nupic.encoders.scalar.ScalarEncoder.encodeIntoArray]'
def getBucketInfo(self, buckets): DCNL '[overrides nupic.encoders.scalar.ScalarEncoder.getBucketInfo]'
def topDownCompute(self, encoded): DCNL '[overrides nupic.encoders.scalar.ScalarEncoder.topDownCompute]'
def _seed(self, seed=(-1)): DCNL 'Initialize the random seed'
def getDecoderOutputFieldTypes(self): DCNL '[Encoder class virtual method override]'
def _newRep(self): DCNL 'Generate a new and unique representation. Returns a numpy array DCNL of shape (n,).'
def getScalars(self, input): DCNL 'See method description in base.py'
def getBucketIndices(self, input): DCNL 'See method description in base.py'
def decode(self, encoded, parentFieldName=''): DCNL 'See the function description in base.py'
def _getTopDownMapping(self): DCNL 'Return the interal _topDownMappingM matrix used for handling the DCNL bucketInfo() and topDownCompute() methods. This is a matrix, one row per DCNL category (bucket) where each row contains the encoded output for that DCNL category.'
def getBucketValues(self): DCNL 'See the function description in base.py'
def getBucketInfo(self, buckets): DCNL 'See the function description in base.py'
def topDownCompute(self, encoded): DCNL 'See the function description in base.py'
def closenessScores(self, expValues, actValues, fractional=True): DCNL 'See the function description in base.py DCNL kwargs will have the keyword "fractional", which is ignored by this encoder'
def _seed(self, seed=(-1)): DCNL 'Initialize the random seed'
def getDecoderOutputFieldTypes(self): DCNL 'See method description in base.py'
def getWidth(self): DCNL 'See method description in base.py'
def getBucketIndices(self, x): DCNL 'See method description in base.py'
def mapBucketIndexToNonZeroBits(self, index): DCNL 'Given a bucket index, return the list of non-zero bits. If the bucket DCNL index does not exist, it is created. If the index falls outside our range DCNL we clip it. DCNL :param index The bucket index to get non-zero bits for. DCNL @returns numpy array of indices of non-zero bits for specified index.'
def encodeIntoArray(self, x, output): DCNL 'See method description in base.py'
def _createBucket(self, index): DCNL 'Create the given bucket index. Recursively create as many in-between DCNL bucket indices as necessary.'
def _newRepresentation(self, index, newIndex): DCNL 'Return a new representation for newIndex that overlaps with the DCNL representation at index by exactly w-1 bits'
def _newRepresentationOK(self, newRep, newIndex): DCNL 'Return True if this new candidate representation satisfies all our overlap DCNL rules. Since we know that neighboring representations differ by at most DCNL one bit, we compute running overlaps.'
def _countOverlapIndices(self, i, j): DCNL 'Return the overlap between bucket indices i and j'
@staticmethod DCNL def _countOverlap(rep1, rep2): DCNL 'Return the overlap between two representations. rep1 and rep2 are lists of DCNL non-zero indices.'
def _overlapOK(self, i, j, overlap=None): DCNL 'Return True if the given overlap between bucket indices i and j are DCNL acceptable. If overlap is not specified, calculate it from the bucketMap'
def _initializeBucketMap(self, maxBuckets, offset): DCNL 'Initialize the bucket map assuming the given number of maxBuckets.'
def _initEncoder(self, w, minval, maxval, n, radius, resolution): DCNL '(helper function)  There are three different ways of thinking about the representation. DCNL Handle each case here.'
def _checkReasonableSettings(self): DCNL '(helper function) check if the settings are reasonable for SP to work'
def getDecoderOutputFieldTypes(self): DCNL '[Encoder class virtual method override]'
def _getFirstOnBit(self, input): DCNL 'Return the bit offset of the first bit to be set in the encoder output. DCNL For periodic encoders, this can be a negative number when the encoded output DCNL wraps around.'
def getBucketIndices(self, input): DCNL 'See method description in base.py'
def encodeIntoArray(self, input, output, learn=True): DCNL 'See method description in base.py'
def decode(self, encoded, parentFieldName=''): DCNL 'See the function description in base.py'
def _generateRangeDescription(self, ranges): DCNL 'generate description from a text description of the ranges'
def _getTopDownMapping(self): DCNL 'Return the interal _topDownMappingM matrix used for handling the DCNL bucketInfo() and topDownCompute() methods. This is a matrix, one row per DCNL category (bucket) where each row contains the encoded output for that DCNL category.'
def getBucketValues(self): DCNL 'See the function description in base.py'
def getBucketInfo(self, buckets): DCNL 'See the function description in base.py'
def topDownCompute(self, encoded): DCNL 'See the function description in base.py'
def closenessScores(self, expValues, actValues, fractional=True): DCNL 'See the function description in base.py'
def getScalarNames(self, parentFieldName=''): DCNL 'See method description in base.py'
def getEncodedValues(self, input): DCNL 'See method description in base.py'
def getScalars(self, input): DCNL 'See method description in :meth:`~.nupic.encoders.base.Encoder.getScalars`. DCNL :param input: (datetime) representing the time being encoded DCNL :returns: A numpy array of the corresponding scalar values in the following DCNL order: season, dayOfWeek, weekend, holiday, timeOfDay. Some of DCNL these fields might be omitted if they were not specified in the DCNL encoder.'
def getBucketIndices(self, input): DCNL 'See method description in base.py'
def encodeIntoArray(self, input, output): DCNL 'See method description in base.py'
def addEncoder(self, name, encoder): DCNL 'Adds one encoder. DCNL :param name: (string) name of encoder, should be unique DCNL :param encoder: (:class:`.Encoder`) the encoder to add'
def getWidth(self): DCNL 'Represents the sum of the widths of each fields encoding.'
def addMultipleEncoders(self, fieldEncodings): DCNL ':param fieldEncodings: dict of dicts, mapping field names to the field DCNL params dict. DCNL Each field params dict has the following keys: DCNL 1. ``fieldname``: data field name DCNL 2. ``type`` an encoder type DCNL 3. All other keys are encoder parameters DCNL For example, DCNL .. code-block:: python DCNL fieldEncodings={ DCNL \'dateTime\': dict(fieldname=\'dateTime\', type=\'DateEncoder\', DCNL timeOfDay=(5,5)), DCNL \'attendeeCount\': dict(fieldname=\'attendeeCount\', type=\'ScalarEncoder\', DCNL name=\'attendeeCount\', minval=0, maxval=250, DCNL clipInput=True, w=5, resolution=10), DCNL \'consumption\': dict(fieldname=\'consumption\',type=\'ScalarEncoder\', DCNL name=\'consumption\', minval=0,maxval=110, DCNL clipInput=True, w=5, resolution=5), DCNL would yield a vector with a part encoded by the :class:`.DateEncoder`, and DCNL to parts seperately taken care of by the :class:`.ScalarEncoder` with the DCNL specified parameters. The three seperate encodings are then merged together DCNL to the final vector, in such a way that they are always at the same location DCNL within the vector.'
def getWidth(self): DCNL 'See `nupic.encoders.base.Encoder` for more information.'
def getDescription(self): DCNL 'See `nupic.encoders.base.Encoder` for more information.'
def getScalars(self, inputData): DCNL 'See `nupic.encoders.base.Encoder` for more information.'
def encodeIntoArray(self, inputData, output): DCNL 'See `nupic.encoders.base.Encoder` for more information. DCNL @param inputData (tuple) Contains coordinate (numpy.array, N-dimensional DCNL integer coordinate) and radius (int) DCNL @param output (numpy.array) Stores encoded SDR in this numpy array'
@staticmethod DCNL def _neighbors(coordinate, radius): DCNL 'Returns coordinates around given coordinate, within given radius. DCNL Includes given coordinate. DCNL @param coordinate (numpy.array) N-dimensional integer coordinate DCNL @param radius (int) Radius around `coordinate` DCNL @return (numpy.array) List of coordinates'
@classmethod DCNL def _topWCoordinates(cls, coordinates, w): DCNL 'Returns the top W coordinates by order. DCNL @param coordinates (numpy.array) A 2D numpy array, where each element DCNL is a coordinate DCNL @param w (int) Number of top coordinates to return DCNL @return (numpy.array) A subset of `coordinates`, containing only the DCNL top ones by order'
@staticmethod DCNL def _hashCoordinate(coordinate): DCNL 'Hash a coordinate to a 64 bit integer.'
@classmethod DCNL def _orderForCoordinate(cls, coordinate): DCNL 'Returns the order for a coordinate. DCNL @param coordinate (numpy.array) Coordinate DCNL @return (float) A value in the interval [0, 1), representing the DCNL order of the coordinate'
@classmethod DCNL def _bitForCoordinate(cls, coordinate, n): DCNL 'Maps the coordinate to a bit in the SDR. DCNL @param coordinate (numpy.array) Coordinate DCNL @param n (int) The number of available bits in the SDR DCNL @return (int) The index to a bit in the SDR'
def __init__(cls, name, bases, dict): DCNL ''
def printTestHeader(self): DCNL 'Print out what test we are running'
def printBanner(self, msg, *args): DCNL 'Print out a banner'
def addExtraLogItem(self, item): DCNL 'Add an item to the log items list for the currently running session. DCNL Our self.myAssertXXXXXX wrappers add the current items to the msg that is DCNL passed to the unittest\'s assertXXXXX methods.  The extra info will show up DCNL in test results if the test fails.'
def __wrapMsg(self, msg): DCNL 'Called by our unittest.TestCase.assertXXXXXX overrides to construct a DCNL message from the given message plus self.__logItems, if any. If DCNL self.__logItems is non-empty, returns a dictionary containing the given DCNL message value as the "msg" property and self.__logItems as the "extra" DCNL property. If self.__logItems is empy, returns the given msg arg.'
def assertEqual(self, first, second, msg=None): DCNL 'unittest.TestCase.assertEqual override; adds extra log items to msg'
def assertNotEqual(self, first, second, msg=None): DCNL 'unittest.TestCase.assertNotEqual override; adds extra log items to msg'
def assertTrue(self, expr, msg=None): DCNL 'unittest.TestCase.assertTrue override; adds extra log items to msg'
def assertFalse(self, expr, msg=None): DCNL 'unittest.TestCase.assertFalse override; adds extra log items to msg'
def getDefaultTMParams(self): DCNL 'Override this method to set the default TM params for `self.tm`.'
def init(self, overrides=None): DCNL 'Initialize Temporal Memory, and other member variables. DCNL :param overrides: overrides for default Temporal Memory parameters'
@classmethod DCNL def getCustomDict(cls): DCNL 'returns: (dict) containing all custom configuration properties.'
@classmethod DCNL def setCustomProperty(cls, propertyName, value): DCNL 'Set a single custom setting and persist it to the custom configuration DCNL store. DCNL :param propertyName: (string) containing the name of the property to get DCNL :param value: (object) value to set the property to'
@classmethod DCNL def setCustomProperties(cls, properties): DCNL 'Set multiple custom properties and persist them to the custom configuration DCNL store. DCNL :param properties: (dict) of property name/value pairs to set'
@classmethod DCNL def clear(cls): DCNL 'Clear all configuration properties from in-memory cache, but do NOT alter DCNL the custom configuration file. Used in unit-testing.'
@classmethod DCNL def resetCustomConfig(cls): DCNL 'Clear all custom configuration settings and delete the persistent custom DCNL configuration store.'
@classmethod DCNL def loadCustomConfig(cls): DCNL 'Loads custom configuration settings from their persistent storage. DCNL .. warning :: DO NOT CALL THIS: It\'s typically not necessary to call this DCNL method directly. This method exists *solely* for the benefit of DCNL ``prepare_conf.py``, which needs to load configuration files selectively.'
@classmethod DCNL def _readStdConfigFiles(cls): DCNL 'Intercept the _readStdConfigFiles call from our base config class to DCNL read in base and custom configuration settings.'
@classmethod DCNL def clear(cls, persistent=False): DCNL 'If persistent is True, delete the temporary file DCNL Parameters: DCNL persistent: if True, custom configuration file is deleted'
@classmethod DCNL def getCustomDict(cls): DCNL 'Returns a dict of all temporary values in custom configuration file'
@classmethod DCNL def edit(cls, properties): DCNL 'Edits the XML configuration file with the parameters specified by DCNL properties DCNL Parameters: DCNL properties: dict of settings to be applied to the custom configuration store DCNL (key is property name, value is value)'
@classmethod DCNL def _setPath(cls): DCNL 'Sets the path of the custom configuration file'
@classmethod DCNL def getPath(cls): DCNL 'Get the path of the custom configuration file'
@classmethod DCNL def getString(cls, prop): DCNL 'Retrieve the requested property as a string. If property does not exist, DCNL then KeyError will be raised. DCNL :param prop: (string) name of the property DCNL :raises: KeyError DCNL :returns: (string) property value'
@classmethod DCNL def getBool(cls, prop): DCNL 'Retrieve the requested property and return it as a bool. If property DCNL does not exist, then KeyError will be raised. If the property value is DCNL neither 0 nor 1, then ValueError will be raised DCNL :param prop: (string) name of the property DCNL :raises: KeyError, ValueError DCNL :returns: (bool) property value'
@classmethod DCNL def getInt(cls, prop): DCNL 'Retrieve the requested property and return it as an int. If property DCNL does not exist, then KeyError will be raised. DCNL :param prop: (string) name of the property DCNL :returns: (int) property value'
@classmethod DCNL def getFloat(cls, prop): DCNL 'Retrieve the requested property and return it as a float. If property DCNL does not exist, then KeyError will be raised. DCNL :param prop: (string) name of the property DCNL :returns: (float) property value'
@classmethod DCNL def get(cls, prop, default=None): DCNL 'Get the value of the given configuration property as string. This DCNL returns a string which is the property value, or the value of "default" arg. DCNL If the property is not found, use :meth:`getString` instead. DCNL .. note:: it\'s atypical for our configuration properties to be missing - a DCNL missing configuration property is usually a very serious error. Because DCNL of this, it\'s preferable to use one of the :meth:`getString`, DCNL :meth:`getInt`, :meth:`getFloat`, etc. variants instead of :meth:`get`. DCNL Those variants will raise KeyError when an expected property is missing. DCNL :param prop: (string) name of the property DCNL :param default: default value to return if property does not exist DCNL :returns: (string) property value, or default if the property does not exist'
@classmethod DCNL def set(cls, prop, value): DCNL 'Set the value of the given configuration property. DCNL :param prop: (string) name of the property DCNL :param value: (object) value to set'
@classmethod DCNL def dict(cls): DCNL 'Return a dict containing all of the configuration properties DCNL :returns: (dict) containing all configuration properties.'
@classmethod DCNL def readConfigFile(cls, filename, path=None): DCNL 'Parse the given XML file and store all properties it describes. DCNL :param filename: (string) name of XML file to parse (no path) DCNL :param path: (string) path of the XML file. If None, then use the standard DCNL configuration search path.'
@classmethod DCNL def _readConfigFile(cls, filename, path=None): DCNL 'Parse the given XML file and return a dict describing the file. DCNL :param filename: (string) name of XML file to parse (no path) DCNL :param path: (string) path of the XML file. If None, then use the standard DCNL configuration search path. DCNL :returns: (dict) with each property as a key and a dict of all the DCNL property\'s attributes as value'
@classmethod DCNL def clear(cls): DCNL 'Clear out the entire configuration.'
@classmethod DCNL def findConfigFile(cls, filename): DCNL 'Search the configuration path (specified via the NTA_CONF_PATH DCNL environment variable) for the given filename. If found, return the complete DCNL path to the file. DCNL :param filename: (string) name of file to locate'
@classmethod DCNL def getConfigPaths(cls): DCNL 'Return the list of paths to search for configuration files. DCNL :returns: (list) of paths'
@classmethod DCNL def setConfigPaths(cls, paths): DCNL 'Modify the paths we use to search for configuration files. DCNL :param paths: (list) of paths to search for config files.'
@classmethod DCNL def _readStdConfigFiles(cls): DCNL 'Read in all standard configuration files'
def cPrint(self, level, message, *args, **kw): DCNL 'Print a message to the console. DCNL Prints only if level <= self.consolePrinterVerbosity DCNL Printing with level 0 is equivalent to using a print statement, DCNL and should normally be avoided. DCNL :param level: (int) indicating the urgency of the message with DCNL lower values meaning more urgent (messages at level 0  are the most DCNL urgent and are always printed) DCNL :param message: (string) possibly with format specifiers DCNL :param args: specifies the values for any format specifiers in message DCNL :param kw: newline is the only keyword argument. True (default) if a newline DCNL should be printed'
def propose(self, current, r): DCNL 'Generates a random sample from the discrete probability distribution and DCNL returns its value, the log of the probability of sampling that value and the DCNL log of the probability of sampling the current value (passed in).'
def propose(self, current, r): DCNL 'Generates a random sample from the Poisson probability distribution with DCNL with location and scale parameter equal to the current value (passed in). DCNL Returns the value of the random sample, the log of the probability of DCNL sampling that value, and the log of the probability of sampling the current DCNL value if the roles of the new sample and the current sample were reversed DCNL (the log of the backward proposal probability).'
def sample(self, rgen): DCNL 'Generates a random sample from the discrete probability distribution DCNL and returns its value and the log of the probability of sampling that value.'
def logProbability(self, distn): DCNL 'Form of distribution must be an array of counts in order of self.keys.'
def sample(self, rgen): DCNL 'Generates a random sample from the Poisson probability distribution and DCNL returns its value and the log of the probability of sampling that value.'
def numRows(self): DCNL 'Gets the number of rows in the histogram. DCNL :returns: Integer number of rows.'
def numColumns(self): DCNL ':return: (int) number of columns'
def grow(self, rows, cols): DCNL 'Grows the histogram to have rows rows and cols columns. DCNL Must not have been initialized before, or already have the same DCNL number of columns. DCNL If rows is smaller than the current number of rows, DCNL does not shrink. DCNL Also updates the sizes of the row and column sums. DCNL :param rows: Integer number of rows. DCNL :param cols: Integer number of columns.'
def updateRow(self, row, distribution): DCNL 'Add distribution to row row. DCNL Distribution should be an array of probabilities or counts. DCNL :param row:   Integer index of the row to add to. DCNL May be larger than the current number of rows, in which case DCNL the histogram grows. DCNL :param distribution: Array of length equal to the number of columns.'
def inferRow(self, distribution): DCNL 'Computes the sumProp probability of each row given the input probability DCNL of each column. Normalizes the distribution in each column on the fly. DCNL The semantics are as follows: If the distribution is P(col|e) where e is DCNL the evidence is col is the column, and the CPD represents P(row|col), then DCNL this calculates sum(P(col|e) P(row|col)) = P(row|e). DCNL :param distribution: Array of length equal to the number of columns. DCNL :returns: array of length equal to the number of rows.'
def inferRowEvidence(self, distribution): DCNL 'Computes the probability of evidence given each row from the probability DCNL of evidence given each column.  Essentially, this just means that it sums DCNL probabilities over (normalized) rows.  Normalizes the distribution over DCNL each row on the fly. DCNL The semantics are as follows:  If the distribution is P(e|col) where e is DCNL evidence and col is the column, and the CPD is of P(col|row), then this DCNL calculates sum(P(e|col) P(col|row)) = P(e|row). DCNL :param distribution: Array of length equal to the number of columns. DCNL :returns: array of length equal to the number of rows.'
def inferRowCompat(self, distribution): DCNL 'Equivalent to the category inference of zeta1.TopLevel. DCNL Computes the max_prod (maximum component of a component-wise multiply) DCNL between the rows of the histogram and the incoming distribution. DCNL May be slow if the result of clean_outcpd() is not valid. DCNL :param distribution: Array of length equal to the number of columns. DCNL :returns: array of length equal to the number of rows.'
def clean_outcpd(self): DCNL 'Hack to act like clean_outcpd on zeta1.TopLevelNode. DCNL Take the max element in each to column, set it to 1, and set all the DCNL other elements to 0. DCNL Only called by inferRowMaxProd() and only needed if an updateRow() DCNL has been called since the last clean_outcpd().'
def shift(self, modelResult): DCNL 'Shift the model result and return the new instance. DCNL Queues up the T(i+1) prediction value and emits a T(i) DCNL input/prediction pair, if possible. E.g., if the previous T(i-1) DCNL iteration was learn-only, then we would not have a T(i) prediction in our DCNL FIFO and would not be able to emit a meaningful input/prediction pair. DCNL :param modelResult: A :class:`~.nupic.frameworks.opf.opf_utils.ModelResult` DCNL instance to shift. DCNL :return: A :class:`~.nupic.frameworks.opf.opf_utils.ModelResult` instance that DCNL has been shifted'
def __init__(self, filterDict): DCNL 'TODO describe filterDict schema'
def match(self, record): DCNL 'Returns True if the record matches any of the provided filters'
def __init__(self, n, w, num=100, seed=42): DCNL '@param n   (int)      Number of available bits in pattern DCNL @param w   (int/list) Number of on bits in pattern DCNL If list, each pattern will have a `w` randomly DCNL selected from the list. DCNL @param num (int)      Number of available patterns'
def get(self, number): DCNL 'Return a pattern for a number. DCNL @param number (int) Number of pattern DCNL @return (set) Indices of on bits'
def addNoise(self, bits, amount): DCNL 'Add noise to pattern. DCNL @param bits   (set)   Indices of on bits DCNL @param amount (float) Probability of switching an on bit with a random bit DCNL @return (set) Indices of on bits in noisy pattern'
def numbersForBit(self, bit): DCNL 'Return the set of pattern numbers that match a bit. DCNL @param bit (int) Index of bit DCNL @return (set) Indices of numbers'
def numberMapForBits(self, bits): DCNL 'Return a map from number to matching on bits, DCNL for all numbers that match a set of bits. DCNL @param bits (set) Indices of bits DCNL @return (dict) Mapping from number => on bits.'
def prettyPrintPattern(self, bits, verbosity=1): DCNL 'Pretty print a pattern. DCNL @param bits      (set) Indices of on bits DCNL @param verbosity (int) Verbosity level DCNL @return (string) Pretty-printed text'
def _generate(self): DCNL 'Generates set of random patterns.'
def _getW(self): DCNL 'Gets a value of `w` for use in generating a pattern.'
def _generate(self): DCNL 'Generates set of consecutive patterns.'
def getNext(self): DCNL 'Returns the next value of the disribution using knowledge about the DCNL current state of the distribution as stored in numValues.'
def getData(self, n): DCNL 'Returns the next n values for the distribution as a list.'
def getDescription(self): DCNL 'Returns a dict of parameters pertinent to the distribution (if any) as DCNL well as state variables such as numValues.'
def __init__(self, patternMachine, seed=42): DCNL '@param patternMachine (PatternMachine) Pattern machine instance'
def generateFromNumbers(self, numbers): DCNL 'Generate a sequence from a list of numbers. DCNL Note: Any `None` in the list of numbers is considered a reset. DCNL @param numbers (list) List of numbers DCNL @return (list) Generated sequence'
def addSpatialNoise(self, sequence, amount): DCNL 'Add spatial noise to each pattern in the sequence. DCNL @param sequence (list)  Sequence DCNL @param amount   (float) Amount of spatial noise DCNL @return (list) Sequence with spatial noise'
def prettyPrintSequence(self, sequence, verbosity=1): DCNL 'Pretty print a sequence. DCNL @param sequence  (list) Sequence DCNL @param verbosity (int)  Verbosity level DCNL @return (string) Pretty-printed text'
def generateNumbers(self, numSequences, sequenceLength, sharedRange=None): DCNL '@param numSequences   (int)   Number of sequences to return, DCNL separated by None DCNL @param sequenceLength (int)   Length of each sequence DCNL @param sharedRange    (tuple) (start index, end index) indicating range of DCNL shared subsequence in each sequence DCNL (None if no shared subsequences) DCNL @return (list) Numbers representing sequences'
def __init__(self, name='testDataset', seed=42, verbosity=0): DCNL 'Initialize the dataset generator with a random seed and a name'
def getDescription(self): DCNL 'Returns a description of the dataset'
def setSeed(self, seed): DCNL 'Set the random seed and the numpy seed DCNL Parameters: DCNL seed:             random seed'
def addField(self, name, fieldParams, encoderParams): DCNL 'Add a single field to the dataset. DCNL Parameters: DCNL name:             The user-specified name of the field DCNL fieldSpec:        A list of one or more dictionaries specifying parameters DCNL to be used for dataClass initialization. Each dict must DCNL contain the key \'type\' that specifies a distribution for DCNL the values in this field DCNL encoderParams:    Parameters for the field encoder'
def addMultipleFields(self, fieldsInfo): DCNL 'Add multiple fields to the dataset. DCNL Parameters: DCNL fieldsInfo:       A list of dictionaries, containing a field name, specs for DCNL the data classes and encoder params for the corresponding DCNL field.'
def defineField(self, name, encoderParams=None): DCNL 'Initialize field using relevant encoder parameters. DCNL Parameters: DCNL name:                 Field name DCNL encoderParams:        Parameters for the encoder. DCNL Returns the index of the field'
def setFlag(self, index, flag): DCNL 'Set flag for field at index. Flags are special characters such as \'S\' for DCNL sequence or \'T\' for timestamp. DCNL Parameters: DCNL index:            index of field whose flag is being set DCNL flag:             special character'
def generateRecord(self, record): DCNL 'Generate a record. Each value is stored in its respective field. DCNL Parameters: DCNL record:       A 1-D array containing as many values as the number of fields DCNL fields:       An object of the class field that specifies the characteristics DCNL of each value in the record DCNL Assertion: DCNL len(record)==len(fields):   A value for each field must be specified. DCNL Replace missing values of any type by DCNL SENTINEL_VALUE_FOR_MISSING_DATA DCNL This method supports external classes but not combination of classes.'
def generateRecords(self, records): DCNL 'Generate multiple records. Refer to definition for generateRecord'
def getRecord(self, n=None): DCNL 'Returns the nth record'
def getAllRecords(self): DCNL 'Returns all the records'
def encodeRecord(self, record, toBeAdded=True): DCNL 'Encode a record as a sparse distributed representation DCNL Parameters: DCNL record:        Record to be encoded DCNL toBeAdded:     Whether the encodings corresponding to the record are added to DCNL the corresponding fields'
def encodeAllRecords(self, records=None, toBeAdded=True): DCNL 'Encodes a list of records. DCNL Parameters: DCNL records:      One or more records. (i,j)th element of this 2D array DCNL specifies the value at field j of record i. DCNL If unspecified, records previously generated and stored are DCNL used. DCNL toBeAdded:    Whether the encodings corresponding to the record are added to DCNL the corresponding fields'
def addValueToField(self, i, value=None): DCNL 'Add \'value\' to the field i. DCNL Parameters: DCNL value:       value to be added DCNL i:           value is added to field i'
def addValuesToField(self, i, numValues): DCNL 'Add values to the field i.'
def getSDRforValue(self, i, j): DCNL 'Returns the sdr for jth value at column i'
def getZeroedOutEncoding(self, n): DCNL 'Returns the nth encoding with the predictedField zeroed out'
def getTotaln(self): DCNL 'Returns the cumulative n for all the fields in the dataset'
def getTotalw(self): DCNL 'Returns the cumulative w for all the fields in the dataset'
def getEncoding(self, n): DCNL 'Returns the nth encoding'
def getAllEncodings(self): DCNL 'Returns encodings for all the records'
def getAllFieldNames(self): DCNL 'Returns all field names'
def getAllFlags(self): DCNL 'Returns flags for all fields'
def getAllDataTypes(self): DCNL 'Returns data types for all fields'
def getFieldDescriptions(self): DCNL 'Returns descriptions for all fields'
def saveRecords(self, path='myOutput'): DCNL 'Export all the records into a csv file in numenta format. DCNL Example header format: DCNL fieldName1    fieldName2    fieldName3 DCNL date          string        float DCNL T             S DCNL Parameters: DCNL path:      Relative path of the file to which the records are to be exported'
def removeAllRecords(self): DCNL 'Deletes all the values in the dataset'
def __init__(self, name, encoderSpec): DCNL 'Initialize a field with various parameters such as n, w, flag, dataType, DCNL encoderType, and tag predicted field.'
def addValues(self, values): DCNL 'Add values to the field'
def addValue(self, value): DCNL 'Add value to the field'
def encodeValue(self, value, toBeAdded=True): DCNL 'Value is encoded as a sdr using the encoding parameters of the Field'
def _setTypes(self, encoderSpec): DCNL 'Set up the dataTypes and initialize encoders'
def _initializeEncoders(self, encoderSpec): DCNL 'Initialize the encoders'
@staticmethod DCNL def createFromFileFieldElement(fieldInfoTuple): DCNL 'Creates a :class:`.field_meta.FieldMetaInfo` instance from a tuple containing DCNL ``name``, ``type``, and ``special``. DCNL :param fieldInfoTuple: Must contain ``name``, ``type``, and ``special`` DCNL :return: (:class:`~.field_meta.FieldMetaInfo`) instance'
@classmethod DCNL def createListFromFileFieldList(cls, fields): DCNL 'Creates a FieldMetaInfo list from the a list of tuples. Basically runs DCNL :meth:`~.field_meta.FieldMetaInfo.createFromFileFieldElement` on each tuple. DCNL *Example:* DCNL .. code-block:: python DCNL # Create a list of FieldMetaInfo instances from a list of File meta-data DCNL # tuples DCNL el = [("pounds", FieldMetaType.float, FieldMetaSpecial.none), DCNL ("price", FieldMetaType.float, FieldMetaSpecial.none), DCNL ("id", FieldMetaType.string, FieldMetaSpecial.sequence), DCNL ("date", FieldMetaType.datetime, FieldMetaSpecial.timestamp), DCNL ml = FieldMetaInfo.createListFromFileFieldList(el) DCNL :param fields: a sequence of field attribute tuples conforming to the format DCNL of ``name``, ``type``, and ``special`` DCNL :return: A list of :class:`~.field_meta.FieldMetaInfo` elements corresponding DCNL to the given \'fields\' list.'
@classmethod DCNL def isValid(cls, fieldDataType): DCNL 'Check a candidate value whether it\'s one of the valid field data types DCNL :param fieldDataType: (string) candidate field data type DCNL :returns: True if the candidate value is a legitimate field data type value; DCNL False if not'
@classmethod DCNL def isValid(cls, attr): DCNL 'Check a candidate value whether it\'s one of the valid attributes DCNL :param attr: (string) candidate value DCNL :returns: True if the candidate value is a legitimate "special" field DCNL attribute; False if not'
def getStats(self, stats): DCNL 'Override of getStats()  in BaseStatsCollector DCNL stats: A dictionary where all the stats are DCNL outputted'
def __init__(self, origField, deltaField): DCNL 'Add a delta field to the data.'
@staticmethod DCNL def _openStream(dataUrl, isBlocking, maxTimeout, bookmark, firstRecordIdx): DCNL 'Open the underlying file stream DCNL This only supports \'file://\' prefixed paths. DCNL :returns: record stream instance DCNL :rtype: FileRecordStream'
def close(self): DCNL 'Close the stream'
def getNextRecord(self): DCNL 'Returns combined data from all sources (values only). DCNL :returns: None on EOF; empty sequence on timeout.'
def getDataRowCount(self): DCNL 'Iterates through stream to calculate total records after aggregation. DCNL This will alter the bookmark state.'
def getNextRecordIdx(self): DCNL ':returns: the index of the record that will be read next from DCNL :meth:`getNextRecord`.'
def recordsExistAfter(self, bookmark): DCNL ':returns: True if there are records left after the  bookmark.'
def getAggregationMonthsAndSeconds(self): DCNL 'Returns the aggregation period of the record stream as a dict DCNL containing \'months\' and \'seconds\'. The months is always an integer and DCNL seconds is a floating point. Only one is allowed to be non-zero at a DCNL time. DCNL Will return the aggregation period from this call. This call is DCNL used by the :meth:`nupic.data.record_stream.RecordStream.getNextRecordDict` DCNL method to assign a record number to a record given its timestamp and the DCNL aggregation interval. DCNL :returns: aggregationPeriod (as a dict) where: DCNL - ``months``: number of months in aggregation period DCNL - ``seconds``: number of seconds in aggregation period DCNL (as a float)'
def getFieldNames(self): DCNL 'Returns all fields in all inputs (list of plain names). DCNL .. note:: currently, only one input is supported'
def getFields(self): DCNL ':returns: a sequence of :class:`nupic.data.fieldmeta.FieldMetaInfo` for each DCNL field in the stream.'
def getBookmark(self): DCNL ':returns: a bookmark to the current position'
def clearStats(self): DCNL 'Resets stats collected so far.'
def getStats(self): DCNL 'TODO: This method needs to be enhanced to get the stats on the *aggregated* DCNL records. DCNL :returns: stats (like min and max values of the fields).'
def getError(self): DCNL ':returns: errors saved in the stream.'
def setError(self, error): DCNL 'Saves specified error in the stream. DCNL :param error: to save'
def isCompleted(self): DCNL ':returns: True if all records have been read.'
def setCompleted(self, completed=True): DCNL 'Marks the stream completed (True or False) DCNL :param completed: (bool) is completed or not'
def setTimeout(self, timeout): DCNL 'Set the read timeout. DCNL :param timeout: (float or int) timeout length'
def _cacheSequenceInfoType(self): DCNL 'Figure out whether reset, sequenceId, DCNL both or neither are present in the data. DCNL Compute once instead of every time. DCNL Taken from filesource.py'
def __init__(self, aggregationInfo, inputFields, timeFieldName=None, sequenceIdFieldName=None, resetFieldName=None, filterInfo=None): DCNL 'Construct an aggregator instance DCNL Params: DCNL - aggregationInfo: a dictionary that contains the following entries DCNL - fields: a list of pairs. Each pair is a field name and an DCNL aggregation function (e.g. sum). The function will be used to aggregate DCNL multiple values during the aggregation period. DCNL - aggregation period: 0 or more of unit=value fields; allowed units are: DCNL [years months] | [weeks days hours minutes seconds milliseconds DCNL microseconds] DCNL NOTE: years and months are mutually-exclusive with the other units.  See DCNL getEndTime() and _aggregate() for more details. DCNL Example1: years=1, months=6, DCNL Example2: hours=1, minutes=30, DCNL If none of the period fields are specified or if all that are specified DCNL have values of 0, then aggregation will be suppressed, and the given DCNL inputFile parameter value will be returned. DCNL - inputFields: The fields from the data source. This is a sequence of DCNL `nupic.data.fieldmeta.FieldMetaInfo` instances. DCNL - timeFieldName: name of the field to use as the time field. If None, DCNL then the time field will be queried from the reader. DCNL - sequenceIdFieldName: name of the field to use as the sequenecId. If None, DCNL then the time field will be queried from the reader. DCNL - resetFieldName: name of the field to use as the reset field. If None, DCNL then the time field will be queried from the reader. DCNL - filterInfo: a structure with rules for filtering records out DCNL If the input file contains a time field, sequence id field or reset field DCNL that were not specified in aggregationInfo fields, those fields will be DCNL added automatically with the following rules: DCNL 1. The order will be R, S, T, rest of the fields DCNL 2. The aggregation function for these will be to pick the first: DCNL lambda x: x[0]'
def _getEndTime(self, t): DCNL 'Add the aggregation period to the input time t and return a datetime object DCNL Years and months are handled as aspecial case due to leap years DCNL and months with different number of dates. They can\'t be converted DCNL to a strict timedelta because a period of 3 months will have different DCNL durations actually. The solution is to just add the years and months DCNL fields directly to the current time. DCNL Other periods are converted to timedelta and just added to current time.'
def _getFuncPtrAndParams(self, funcName): DCNL 'Given the name of an aggregation function, returns the function pointer DCNL and param. DCNL Parameters: DCNL funcName:  a string (name of function) or funcPtr DCNL retval:   (funcPtr, param)'
def _createAggregateRecord(self): DCNL 'Generate the aggregated output record DCNL Parameters: DCNL retval: outputRecord'
def isNullAggregation(self): DCNL 'Return True if no aggregation will be performed, either because the DCNL aggregationInfo was None or all aggregation params within it were 0.'
def next(self, record, curInputBookmark): DCNL 'Return the next aggregated record, if any DCNL Parameters: DCNL record:         The input record (values only) from the input source, or DCNL None if the input has reached EOF (this will cause this DCNL method to force completion of and return any partially DCNL aggregated time period) DCNL curInputBookmark: The bookmark to the next input record DCNL retval: DCNL (outputRecord, inputBookmark) DCNL outputRecord: the aggregated record DCNL inputBookmark: a bookmark to the last position from the input that DCNL contributed to this aggregated record. DCNL If we don\'t have any aggregated records yet, returns (None, None) DCNL The caller should generally do a loop like this: DCNL while True: DCNL inRecord = reader.getNextRecord() DCNL bookmark = reader.getBookmark() DCNL (aggRecord, aggBookmark) = aggregator.next(inRecord, bookmark) DCNL # reached EOF? DCNL if inRecord is None and aggRecord is None: DCNL break DCNL if aggRecord is not None: DCNL proessRecord(aggRecord, aggBookmark) DCNL This method makes use of the self._slice member variable to build up DCNL the values we need to aggregate. This is a dict of lists. The keys are DCNL the field indices and the elements of each list are the values for that DCNL field. For example: DCNL self._siice = { 0: [42, 53], 1: [4.0, 5.1] }'
def __init__(self, fields, aggregationPeriod=None): DCNL ':param fields: non-empty sequence of nupic.data.fieldmeta.FieldMetaInfo DCNL objects corresponding to fields in input rows. DCNL :param aggregationPeriod: (dict) aggregation period of the record stream DCNL containing \'months\' and \'seconds\'. The months is always an integer DCNL and seconds is a floating point. Only one is allowed to be non-zero at a DCNL time. If there is no aggregation associated with the stream, pass None. DCNL Typically, a raw file or hbase stream will NOT have any aggregation info, DCNL but subclasses of RecordStreamIface, like StreamReader, will and will DCNL provide the aggregation period. This is used by the encode method to DCNL assign a record number to a record given its timestamp and the aggregation DCNL interval.'
def rewind(self): DCNL 'Put us back at the beginning of the file again'
def encode(self, inputRow): DCNL 'Encodes the given input row as a dict, with the DCNL keys being the field names. This also adds in some meta fields: DCNL \'_category\': The value from the category field (if any) DCNL \'_reset\': True if the reset field was True (if any) DCNL \'_sequenceId\': the value from the sequenceId field (if any) DCNL :param inputRow: sequence of values corresponding to a single input metric DCNL data row DCNL :rtype: dict'
def _computeTimestampRecordIdx(self, recordTS): DCNL 'Give the timestamp of a record (a datetime object), compute the record\'s DCNL timestamp index - this is the timestamp divided by the aggregation period. DCNL Parameters: DCNL recordTS:  datetime instance DCNL retval:    record timestamp index, or None if no aggregation period'
def rewind(self): DCNL 'Put us back at the beginning of the file again.'
def getNextRecordDict(self): DCNL 'Returns next available data record from the storage as a dict, with the DCNL keys being the field names. This also adds in some meta fields: DCNL - ``_category``: The value from the category field (if any) DCNL - ``_reset``: True if the reset field was True (if any) DCNL - ``_sequenceId``: the value from the sequenceId field (if any)'
def getAggregationMonthsAndSeconds(self): DCNL 'Returns the aggregation period of the record stream as a dict DCNL containing \'months\' and \'seconds\'. The months is always an integer and DCNL seconds is a floating point. Only one is allowed to be non-zero. DCNL If there is no aggregation associated with the stream, returns None. DCNL Typically, a raw file or hbase stream will NOT have any aggregation info, DCNL but subclasses of :class:`~nupic.data.record_stream.RecordStreamIface`, like DCNL :class:`~nupic.data.stream_reader.StreamReader`, will and will return the DCNL aggregation period from this call. This call is used by DCNL :meth:`getNextRecordDict` to assign a record number to a record given its DCNL timestamp and the aggregation interval. DCNL :returns: ``None``'
def getFieldMin(self, fieldName): DCNL 'If underlying implementation does not support min/max stats collection, DCNL or if a field type does not support min/max (non scalars), the return DCNL value will be None. DCNL :param fieldName: (string) name of field to get min DCNL :returns: current minimum value for the field ``fieldName``.'
def getFieldMax(self, fieldName): DCNL 'If underlying implementation does not support min/max stats collection, DCNL or if a field type does not support min/max (non scalars), the return DCNL value will be None. DCNL :param fieldName: (string) name of field to get max DCNL :returns: current maximum value for the field ``fieldName``.'
def getResetFieldIdx(self): DCNL ':returns: (int) index of the ``reset`` field; ``None`` if no such field.'
def getTimestampFieldIdx(self): DCNL ':returns: (int) index of the ``timestamp`` field.'
def getSequenceIdFieldIdx(self): DCNL ':returns: (int) index of the ``sequenceId`` field.'
def getCategoryFieldIdx(self): DCNL ':returns: (int) index of ``category`` field'
def getLearningFieldIdx(self): DCNL ':returns: (int) index of the ``learning`` field.'
def close(self): DCNL 'Closes the stream.'
def rewind(self): DCNL 'Put us back at the beginning of the file again.'
def getNextRecord(self, useCache=True): DCNL 'Returns next available data record from the file. DCNL :returns: a data row (a list or tuple) if available; None, if no more DCNL records in the table (End of Stream - EOS); empty sequence (list DCNL or tuple) when timing out while waiting for the next record.'
def appendRecord(self, record): DCNL 'Saves the record in the underlying csv file. DCNL :param record: a list of Python objects that will be string-ified'
def appendRecords(self, records, progressCB=None): DCNL 'Saves multiple records in the underlying storage. DCNL :param records: array of records as in DCNL :meth:`~.FileRecordStream.appendRecord` DCNL :param progressCB: (function) callback to report progress'
def getBookmark(self): DCNL 'Gets a bookmark or anchor to the current position. DCNL :returns: an anchor to the current position in the data. Passing this DCNL anchor to a constructor makes the current position to be the first DCNL returned record.'
def recordsExistAfter(self, bookmark): DCNL 'Returns whether there are more records from current position. ``bookmark`` DCNL is not used in this implementation. DCNL :return: True if there are records left after current position.'
def seekFromEnd(self, numRecords): DCNL 'Seeks to ``numRecords`` from the end and returns a bookmark to the new DCNL position. DCNL :param numRecords: how far to seek from end of file. DCNL :return: bookmark to desired location.'
def setAutoRewind(self, autoRewind): DCNL 'Controls whether :meth:`~.FileRecordStream.getNextRecord` should DCNL automatically rewind the source when EOF is reached. DCNL :param autoRewind: (bool) DCNL - if True, :meth:`~.FileRecordStream.getNextRecord` will automatically rewind DCNL the source on EOF. DCNL - if False, :meth:`~.FileRecordStream.getNextRecord` will not automatically DCNL rewind the source on EOF.'
def getStats(self): DCNL 'Parse the file using dedicated reader and collect fields stats. Never DCNL called if user of :class:`~.FileRecordStream` does not invoke DCNL :meth:`~.FileRecordStream.getStats` method. DCNL :returns: DCNL a dictionary of stats. In the current implementation, min and max DCNL fields are supported. Example of the return dictionary is: DCNL .. code-block:: python DCNL \'min\' : [f1_min, f2_min, None, None, fn_min], DCNL \'max\' : [f1_max, f2_max, None, None, fn_max] DCNL (where fx_min/fx_max are set for scalar fields, or None if not)'
def clearStats(self): DCNL 'Resets stats collected so far.'
def getError(self): DCNL 'Not implemented. CSV file version does not provide storage for the error DCNL information'
def setError(self, error): DCNL 'Not implemented. CSV file version does not provide storage for the error DCNL information'
def isCompleted(self): DCNL 'Not implemented. CSV file is always considered completed.'
def setCompleted(self, completed=True): DCNL 'Not implemented: CSV file is always considered completed, nothing to do.'
def getFieldNames(self): DCNL ':returns: (list) field names associated with the data.'
def getFields(self): DCNL ':returns: a sequence of :class:`~.FieldMetaInfo` DCNL ``name``/``type``/``special`` tuples for each field in the stream.'
def _updateSequenceInfo(self, r): DCNL 'Keep track of sequence and make sure time goes forward DCNL Check if the current record is the beginning of a new sequence DCNL A new sequence starts in 2 cases: DCNL 1. The sequence id changed (if there is a sequence id field) DCNL 2. The reset field is 1 (if there is a reset field) DCNL Note that if there is no sequenceId field or resetId field then the entire DCNL dataset is technically one big sequence. The function will not return True DCNL for the first record in this case. This is Ok because it is important to DCNL detect new sequences only when there are multiple sequences in the file.'
def _getStartRow(self, bookmark): DCNL 'Extracts start row from the bookmark information'
def _getTotalLineCount(self): DCNL 'Returns:  count of ALL lines in dataset, including header lines'
def getNextRecordIdx(self): DCNL ':returns: (int) the index of the record that will be read next from DCNL :meth:`~.FileRecordStream.getNextRecord`.'
def getDataRowCount(self): DCNL ':returns: (int) count of data rows in dataset (excluding header lines)'
def flush(self): DCNL 'Flushes the file.'
def __enter__(self): DCNL 'Context guard - enter DCNL Just return the object'
def __exit__(self, yupe, value, traceback): DCNL 'Context guard - exit DCNL Ensures that the file is always closed at the end of the \'with\' block. DCNL Lets exceptions propagate.'
def __iter__(self): DCNL 'Support for the iterator protocol. Return itself'
def next(self): DCNL 'Implement the iterator protocol'
def __init__(self, *args): DCNL 'Construct a Dimensions object DCNL The constructor can be called with no arguments or with a list DCNL of integers'
def __init__(self, region, network): DCNL 'Store the wraped region and hosting network DCNL The network is the high-level Network and not the internal DCNL Network. This is important in case the user requests the network DCNL from the region (never leak a engine object, remember)'
@staticmethod DCNL def getSpecFromType(nodeType): DCNL '@doc:place_holder(Region.getSpecFromType)'
def compute(self): DCNL '@doc:place_holder(Region.compute) DCNL ** This line comes from the original docstring (not generated by Documentor)'
def getInputData(self, inputName): DCNL '@doc:place_holder(Region.getInputData)'
def getOutputData(self, outputName): DCNL '@doc:place_holder(Region.getOutputData)'
def getInputNames(self): DCNL 'Returns list of input names in spec.'
def getOutputNames(self): DCNL 'Returns list of output names in spec.'
def executeCommand(self, args): DCNL '@doc:place_holder(Region.executeCommand)'
def _getSpec(self): DCNL 'Spec of the region'
def _getDimensions(self): DCNL 'Dimensions of the region'
def _getNetwork(self): DCNL 'Network for the region'
def __hash__(self): DCNL 'Hash a region'
def __cmp__(self, other): DCNL 'Compare regions'
def _getParameterMethods(self, paramName): DCNL 'Returns functions to set/get the parameter. These are DCNL the strongly typed functions get/setParameterUInt32, etc. DCNL The return value is a pair: DCNL setfunc, getfunc DCNL If the parameter is not available on this region, setfunc/getfunc DCNL are None.'
def getParameter(self, paramName): DCNL 'Get parameter value'
def setParameter(self, paramName, value): DCNL 'Set parameter value'
def _get(self, method): DCNL 'Auto forwarding of properties to get methods of internal region'
def __init__(self, *args): DCNL 'Constructor DCNL - Initialize the internal engine_internal.Network class generated by Swig DCNL - Attach docstrings to selected methods'
def _getRegions(self): DCNL 'Get the collection of regions in a network DCNL This is a tricky one. The collection of regions returned from DCNL from the internal network is a collection of internal regions. DCNL The desired collection is a collelcion of net.Region objects DCNL that also points to this network (net.network) and not to DCNL the internal network. To achieve that a CollectionWrapper DCNL class is used with a custom makeRegion() function (see bellow) DCNL as a value wrapper. The CollectionWrapper class wraps each value in the DCNL original collection with the result of the valueWrapper.'
def addRegion(self, name, nodeType, nodeParams): DCNL '@doc:place_holder(Network.addRegion)'
def addRegionFromBundle(self, name, nodeType, dimensions, bundlePath, label): DCNL '@doc:place_holder(Network.addRegionFromBundle)'
def setPhases(self, name, phases): DCNL '@doc:place_holder(Network.setPhases)'
def run(self, n): DCNL '@doc:place_holder(Network.run)'
def disableProfiling(self, *args, **kwargs): DCNL '@doc:place_holder(Network.disableProfiling)'
def enableProfiling(self, *args, **kwargs): DCNL '@doc:place_holder(Network.enableProfiling)'
def getCallbacks(self, *args, **kwargs): DCNL '@doc:place_holder(Network.getCallbacks)'
def initialize(self, *args, **kwargs): DCNL '@doc:place_holder(Network.initialize)'
def link(self, *args, **kwargs): DCNL '@doc:place_holder(Network.link)'
def removeLink(self, *args, **kwargs): DCNL '@doc:place_holder(Network.removeLink)'
def removeRegion(self, *args, **kwargs): DCNL '@doc:place_holder(Network.removeRegion)'
def resetProfiling(self, *args, **kwargs): DCNL '@doc:place_holder(Network.resetProfiling)'
def save(self, *args, **kwargs): DCNL '@doc:place_holder(Network.save)'
def getRegionsByType(self, regionClass): DCNL 'Gets all region instances of a given class DCNL (for example, nupic.regions.sp_region.SPRegion).'
@staticmethod DCNL def registerRegion(regionClass): DCNL 'Adds the module and class name for the region to the list of classes the network can use DCNL regionClass: a pointer to a subclass of PyRegion'
@staticmethod DCNL def unregisterRegion(regionName): DCNL 'Unregisters a region from the internal list of regions DCNL :param str regionName: The name of the region to unregister DCNL (ex: regionName=regionClass.__name__)'
